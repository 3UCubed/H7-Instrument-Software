
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000172e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08017580  08017580  00027580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080179b4  080179b4  000279b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080179bc  080179bc  000279bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080179c0  080179c0  000279c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  080179c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005970  24000120  08017acc  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a90  08017acc  00035a90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033b80  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f2  00000000  00000000  00063cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002780  00000000  00000000  000693a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002568  00000000  00000000  0006bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032424  00000000  00000000  000ae196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b67  00000000  00000000  000e05ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00275121  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0f0  00000000  00000000  00275174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017568 	.word	0x08017568

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017568 	.word	0x08017568

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c44 	.word	0x24000c44

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 feb2 	bl	8013380 <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fea7 	bl	8013380 <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fe9c 	bl	8013380 <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fe91 	bl	8013380 <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fbd1 	bl	8016e08 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c64 	.word	0x24000c64
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	080175ec 	.word	0x080175ec

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fee9 	bl	801046c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 8454 	bhi.w	8000f50 <HAL_UART_RxCpltCallback+0x8c8>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cfd 	.word	0x08000cfd
 80006dc:	08000d3b 	.word	0x08000d3b
 80006e0:	08000e31 	.word	0x08000e31
 80006e4:	08000e83 	.word	0x08000e83
 80006e8:	08000ee5 	.word	0x08000ee5
 80006ec:	08000f0d 	.word	0x08000f0d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d13 	.word	0x08000d13
 8000720:	08000d51 	.word	0x08000d51
 8000724:	08000e47 	.word	0x08000e47
 8000728:	08000ebd 	.word	0x08000ebd
 800072c:	08000f51 	.word	0x08000f51
 8000730:	08000f51 	.word	0x08000f51
 8000734:	08000f51 	.word	0x08000f51
 8000738:	08000f51 	.word	0x08000f51
 800073c:	08000f51 	.word	0x08000f51
 8000740:	08000f51 	.word	0x08000f51
 8000744:	08000f51 	.word	0x08000f51
 8000748:	08000f51 	.word	0x08000f51
 800074c:	08000f51 	.word	0x08000f51
 8000750:	08000f51 	.word	0x08000f51
 8000754:	08000f51 	.word	0x08000f51
 8000758:	08000f51 	.word	0x08000f51
 800075c:	08000f51 	.word	0x08000f51
 8000760:	08000f51 	.word	0x08000f51
 8000764:	08000f51 	.word	0x08000f51
 8000768:	08000f51 	.word	0x08000f51
 800076c:	08000f51 	.word	0x08000f51
 8000770:	08000f51 	.word	0x08000f51
 8000774:	08000f51 	.word	0x08000f51
 8000778:	08000f51 	.word	0x08000f51
 800077c:	08000f51 	.word	0x08000f51
 8000780:	08000f51 	.word	0x08000f51
 8000784:	08000f51 	.word	0x08000f51
 8000788:	08000f51 	.word	0x08000f51
 800078c:	08000f51 	.word	0x08000f51
 8000790:	08000f51 	.word	0x08000f51
 8000794:	08000f51 	.word	0x08000f51
 8000798:	08000f51 	.word	0x08000f51
 800079c:	08000f51 	.word	0x08000f51
 80007a0:	08000f51 	.word	0x08000f51
 80007a4:	08000f51 	.word	0x08000f51
 80007a8:	08000f51 	.word	0x08000f51
 80007ac:	08000f51 	.word	0x08000f51
 80007b0:	08000f51 	.word	0x08000f51
 80007b4:	08000f51 	.word	0x08000f51
 80007b8:	08000f51 	.word	0x08000f51
 80007bc:	08000f51 	.word	0x08000f51
 80007c0:	08000f51 	.word	0x08000f51
 80007c4:	08000f51 	.word	0x08000f51
 80007c8:	08000f51 	.word	0x08000f51
 80007cc:	08000f51 	.word	0x08000f51
 80007d0:	08000f51 	.word	0x08000f51
 80007d4:	08000f51 	.word	0x08000f51
 80007d8:	08000f51 	.word	0x08000f51
 80007dc:	08000f51 	.word	0x08000f51
 80007e0:	08000f51 	.word	0x08000f51
 80007e4:	08000f51 	.word	0x08000f51
 80007e8:	08000f51 	.word	0x08000f51
 80007ec:	08000f51 	.word	0x08000f51
 80007f0:	08000f51 	.word	0x08000f51
 80007f4:	08000f51 	.word	0x08000f51
 80007f8:	08000f51 	.word	0x08000f51
 80007fc:	08000f51 	.word	0x08000f51
 8000800:	08000f51 	.word	0x08000f51
 8000804:	08000f51 	.word	0x08000f51
 8000808:	08000f51 	.word	0x08000f51
 800080c:	08000f51 	.word	0x08000f51
 8000810:	08000f51 	.word	0x08000f51
 8000814:	08000f51 	.word	0x08000f51
 8000818:	08000f51 	.word	0x08000f51
 800081c:	08000f51 	.word	0x08000f51
 8000820:	08000f51 	.word	0x08000f51
 8000824:	08000f51 	.word	0x08000f51
 8000828:	08000f51 	.word	0x08000f51
 800082c:	08000f51 	.word	0x08000f51
 8000830:	08000f51 	.word	0x08000f51
 8000834:	08000f51 	.word	0x08000f51
 8000838:	08000f51 	.word	0x08000f51
 800083c:	08000f51 	.word	0x08000f51
 8000840:	08000f51 	.word	0x08000f51
 8000844:	08000f51 	.word	0x08000f51
 8000848:	08000f51 	.word	0x08000f51
 800084c:	08000f51 	.word	0x08000f51
 8000850:	08000f51 	.word	0x08000f51
 8000854:	08000f51 	.word	0x08000f51
 8000858:	08000f51 	.word	0x08000f51
 800085c:	08000f51 	.word	0x08000f51
 8000860:	08000f51 	.word	0x08000f51
 8000864:	08000f51 	.word	0x08000f51
 8000868:	08000f51 	.word	0x08000f51
 800086c:	08000f51 	.word	0x08000f51
 8000870:	08000f51 	.word	0x08000f51
 8000874:	08000f51 	.word	0x08000f51
 8000878:	08000f51 	.word	0x08000f51
 800087c:	08000f51 	.word	0x08000f51
 8000880:	08000f51 	.word	0x08000f51
 8000884:	08000f51 	.word	0x08000f51
 8000888:	08000f51 	.word	0x08000f51
 800088c:	08000f51 	.word	0x08000f51
 8000890:	08000f51 	.word	0x08000f51
 8000894:	08000f51 	.word	0x08000f51
 8000898:	08000f51 	.word	0x08000f51
 800089c:	08000f51 	.word	0x08000f51
 80008a0:	08000f51 	.word	0x08000f51
 80008a4:	08000f51 	.word	0x08000f51
 80008a8:	08000f51 	.word	0x08000f51
 80008ac:	08000f51 	.word	0x08000f51
 80008b0:	08000f51 	.word	0x08000f51
 80008b4:	08000f51 	.word	0x08000f51
 80008b8:	08000f51 	.word	0x08000f51
 80008bc:	08000f51 	.word	0x08000f51
 80008c0:	08000f51 	.word	0x08000f51
 80008c4:	08000f51 	.word	0x08000f51
 80008c8:	08000f51 	.word	0x08000f51
 80008cc:	08000f51 	.word	0x08000f51
 80008d0:	08000f51 	.word	0x08000f51
 80008d4:	08000f51 	.word	0x08000f51
 80008d8:	08000f51 	.word	0x08000f51
 80008dc:	08000f51 	.word	0x08000f51
 80008e0:	08000f51 	.word	0x08000f51
 80008e4:	08000f51 	.word	0x08000f51
 80008e8:	08000f51 	.word	0x08000f51
 80008ec:	08000f51 	.word	0x08000f51
 80008f0:	08000f51 	.word	0x08000f51
 80008f4:	08000f51 	.word	0x08000f51
 80008f8:	08000f51 	.word	0x08000f51
 80008fc:	08000f51 	.word	0x08000f51
 8000900:	08000f51 	.word	0x08000f51
 8000904:	08000f51 	.word	0x08000f51
 8000908:	08000f51 	.word	0x08000f51
 800090c:	08000f51 	.word	0x08000f51
 8000910:	08000f51 	.word	0x08000f51
 8000914:	08000f51 	.word	0x08000f51
 8000918:	08000f51 	.word	0x08000f51
 800091c:	08000f51 	.word	0x08000f51
 8000920:	08000f51 	.word	0x08000f51
 8000924:	08000f51 	.word	0x08000f51
 8000928:	08000f51 	.word	0x08000f51
 800092c:	08000f51 	.word	0x08000f51
 8000930:	08000f51 	.word	0x08000f51
 8000934:	08000f51 	.word	0x08000f51
 8000938:	08000f51 	.word	0x08000f51
 800093c:	08000f51 	.word	0x08000f51
 8000940:	08000f51 	.word	0x08000f51
 8000944:	08000f51 	.word	0x08000f51
 8000948:	08000f51 	.word	0x08000f51
 800094c:	08000f51 	.word	0x08000f51
 8000950:	08000f51 	.word	0x08000f51
 8000954:	08000f51 	.word	0x08000f51
 8000958:	08000f51 	.word	0x08000f51
 800095c:	08000f51 	.word	0x08000f51
 8000960:	08000f51 	.word	0x08000f51
 8000964:	08000f51 	.word	0x08000f51
 8000968:	08000f51 	.word	0x08000f51
 800096c:	08000f45 	.word	0x08000f45
 8000970:	08000f51 	.word	0x08000f51
 8000974:	08000f51 	.word	0x08000f51
 8000978:	08000f51 	.word	0x08000f51
 800097c:	08000f51 	.word	0x08000f51
 8000980:	08000f51 	.word	0x08000f51
 8000984:	08000f51 	.word	0x08000f51
 8000988:	08000f51 	.word	0x08000f51
 800098c:	08000f51 	.word	0x08000f51
 8000990:	08000f51 	.word	0x08000f51
 8000994:	08000f51 	.word	0x08000f51
 8000998:	08000f51 	.word	0x08000f51
 800099c:	08000f51 	.word	0x08000f51
 80009a0:	08000f51 	.word	0x08000f51
 80009a4:	08000f51 	.word	0x08000f51
 80009a8:	08000f51 	.word	0x08000f51
 80009ac:	08000f4b 	.word	0x08000f4b
 80009b0:	08000f51 	.word	0x08000f51
 80009b4:	08000f51 	.word	0x08000f51
 80009b8:	08000f51 	.word	0x08000f51
 80009bc:	08000f51 	.word	0x08000f51
 80009c0:	08000f51 	.word	0x08000f51
 80009c4:	08000f51 	.word	0x08000f51
 80009c8:	08000f51 	.word	0x08000f51
 80009cc:	08000f51 	.word	0x08000f51
 80009d0:	08000f51 	.word	0x08000f51
 80009d4:	08000f51 	.word	0x08000f51
 80009d8:	08000f51 	.word	0x08000f51
 80009dc:	08000f51 	.word	0x08000f51
 80009e0:	08000f51 	.word	0x08000f51
 80009e4:	08000f51 	.word	0x08000f51
 80009e8:	08000f51 	.word	0x08000f51
 80009ec:	08000f51 	.word	0x08000f51
 80009f0:	08000f33 	.word	0x08000f33
 80009f4:	08000f51 	.word	0x08000f51
 80009f8:	08000f51 	.word	0x08000f51
 80009fc:	08000f51 	.word	0x08000f51
 8000a00:	08000f51 	.word	0x08000f51
 8000a04:	08000f51 	.word	0x08000f51
 8000a08:	08000f51 	.word	0x08000f51
 8000a0c:	08000f51 	.word	0x08000f51
 8000a10:	08000f51 	.word	0x08000f51
 8000a14:	08000f51 	.word	0x08000f51
 8000a18:	08000f51 	.word	0x08000f51
 8000a1c:	08000f51 	.word	0x08000f51
 8000a20:	08000f51 	.word	0x08000f51
 8000a24:	08000f51 	.word	0x08000f51
 8000a28:	08000f51 	.word	0x08000f51
 8000a2c:	08000f51 	.word	0x08000f51
 8000a30:	08000f21 	.word	0x08000f21
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f9e7 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fc2f 	bl	80092a4 <HAL_GPIO_WritePin>
		break;
 8000a46:	e28e      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f9dd 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fc25 	bl	80092a4 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e284      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
 8000a5c:	24000c68 	.word	0x24000c68
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08017604 	.word	0x08017604
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	0801760c 	.word	0x0801760c
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48c1      	ldr	r0, [pc, #772]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a72:	f016 f9c9 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bc1      	ldr	r3, [pc, #772]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fc11 	bl	80092a4 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbf      	ldr	r3, [pc, #764]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e26d      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48be      	ldr	r0, [pc, #760]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000a8c:	f016 f9bc 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bba      	ldr	r3, [pc, #744]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fc04 	bl	80092a4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb7      	ldr	r3, [pc, #732]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fbfe 	bl	80092a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb7      	ldr	r3, [pc, #732]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fbf7 	bl	80092a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb4      	ldr	r3, [pc, #720]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fbf0 	bl	80092a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bb0      	ldr	r3, [pc, #704]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 fbe9 	bl	80092a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4bad      	ldr	r3, [pc, #692]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fbe3 	bl	80092a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4baa      	ldr	r3, [pc, #680]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fbdd 	bl	80092a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba7      	ldr	r3, [pc, #668]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fbd6 	bl	80092a4 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4ba1      	ldr	r3, [pc, #644]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba3      	ldr	r3, [pc, #652]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4ba2      	ldr	r3, [pc, #648]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4ba2      	ldr	r3, [pc, #648]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4ba0      	ldr	r3, [pc, #640]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9f      	ldr	r3, [pc, #636]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e21a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489e      	ldr	r0, [pc, #632]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b32:	f016 f969 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b94      	ldr	r3, [pc, #592]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fbb0 	bl	80092a4 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b91      	ldr	r3, [pc, #580]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e20c      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4898      	ldr	r0, [pc, #608]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b4e:	f016 f95b 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8d      	ldr	r3, [pc, #564]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fba2 	bl	80092a4 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b8a      	ldr	r3, [pc, #552]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e1fe      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	4892      	ldr	r0, [pc, #584]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000b6a:	f016 f94d 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fb95 	bl	80092a4 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b85      	ldr	r3, [pc, #532]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1f1      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488d      	ldr	r0, [pc, #564]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000b84:	f016 f940 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7f      	ldr	r3, [pc, #508]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fb88 	bl	80092a4 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7e      	ldr	r3, [pc, #504]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1e4      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4887      	ldr	r0, [pc, #540]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000b9e:	f016 f933 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b79      	ldr	r3, [pc, #484]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fb7b 	bl	80092a4 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1d7      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	4882      	ldr	r0, [pc, #520]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000bb8:	f016 f926 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fb6e 	bl	80092a4 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b72      	ldr	r3, [pc, #456]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1ca      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	487c      	ldr	r0, [pc, #496]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000bd2:	f016 f919 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fb60 	bl	80092a4 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1bc      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4876      	ldr	r0, [pc, #472]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000bee:	f016 f90b 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fb52 	bl	80092a4 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e1ae      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	4870      	ldr	r0, [pc, #448]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c0a:	f016 f8fd 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5e      	ldr	r3, [pc, #376]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fb44 	bl	80092a4 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e1a0      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	486a      	ldr	r0, [pc, #424]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c26:	f016 f8ef 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fb36 	bl	80092a4 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e192      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4864      	ldr	r0, [pc, #400]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c42:	f016 f8e1 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fb28 	bl	80092a4 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e184      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485e      	ldr	r0, [pc, #376]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000c5e:	f016 f8d3 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fb1a 	bl	80092a4 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e176      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4858      	ldr	r0, [pc, #352]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000c7a:	f016 f8c5 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fb0d 	bl	80092a4 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e169      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4853      	ldr	r0, [pc, #332]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000c94:	f016 f8b8 	bl	8016e08 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 fb00 	bl	80092a4 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e15c      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484d      	ldr	r0, [pc, #308]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cae:	f016 f8ab 	bl	8016e08 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a4b      	ldr	r2, [pc, #300]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	484b      	ldr	r0, [pc, #300]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cbe:	f004 ff55 	bl	8005b6c <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e150      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	484a      	ldr	r0, [pc, #296]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000cc6:	f016 f89f 	bl	8016e08 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4847      	ldr	r0, [pc, #284]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cce:	f005 f80d 	bl	8005cec <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e148      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cd6:	f016 f897 	bl	8016e08 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4846      	ldr	r0, [pc, #280]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cde:	f00d fee5 	bl	800eaac <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f012 fb49 	bl	8013380 <osEventFlagsSet>
		ERPA_ON = 1;
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000cf4:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
		break;
 8000cfa:	e134      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cfc:	4842      	ldr	r0, [pc, #264]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000cfe:	f016 f883 	bl	8016e08 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000d02:	210c      	movs	r1, #12
 8000d04:	483c      	ldr	r0, [pc, #240]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000d06:	f00e f82b 	bl	800ed60 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
		break;
 8000d10:	e129      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d12:	483e      	ldr	r0, [pc, #248]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d14:	f016 f878 	bl	8016e08 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	483d      	ldr	r0, [pc, #244]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d1c:	f00d fec6 	bl	800eaac <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f012 fb2a 	bl	8013380 <osEventFlagsSet>
		PMT_ON = 1;
 8000d2c:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	801a      	strh	r2, [r3, #0]
		break;
 8000d38:	e115      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d3a:	4838      	ldr	r0, [pc, #224]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d3c:	f016 f864 	bl	8016e08 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d40:	2100      	movs	r1, #0
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d44:	f00e f80c 	bl	800ed60 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
		break;
 8000d4e:	e10a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d50:	4833      	ldr	r0, [pc, #204]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d52:	f016 f859 	bl	8016e08 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	4832      	ldr	r0, [pc, #200]	; (8000e24 <HAL_UART_RxCpltCallback+0x79c>)
 8000d5a:	f00d fea7 	bl	800eaac <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2104      	movs	r1, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f012 fb0b 	bl	8013380 <osEventFlagsSet>
		HK_ON = 1;
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_UART_RxCpltCallback+0x7a0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <HAL_UART_RxCpltCallback+0x7a4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	801a      	strh	r2, [r3, #0]
		break;
 8000d76:	e0f6      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
 8000d78:	08017618 	.word	0x08017618
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	24000c1c 	.word	0x24000c1c
 8000d84:	08017624 	.word	0x08017624
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	24000c1d 	.word	0x24000c1d
 8000d90:	24000c1e 	.word	0x24000c1e
 8000d94:	24000c1f 	.word	0x24000c1f
 8000d98:	24000c20 	.word	0x24000c20
 8000d9c:	24000c21 	.word	0x24000c21
 8000da0:	24000c22 	.word	0x24000c22
 8000da4:	24000c23 	.word	0x24000c23
 8000da8:	24000c24 	.word	0x24000c24
 8000dac:	08017630 	.word	0x08017630
 8000db0:	0801763c 	.word	0x0801763c
 8000db4:	0801764c 	.word	0x0801764c
 8000db8:	08017658 	.word	0x08017658
 8000dbc:	08017664 	.word	0x08017664
 8000dc0:	08017670 	.word	0x08017670
 8000dc4:	08017680 	.word	0x08017680
 8000dc8:	0801768c 	.word	0x0801768c
 8000dcc:	08017698 	.word	0x08017698
 8000dd0:	080176a4 	.word	0x080176a4
 8000dd4:	080176b0 	.word	0x080176b0
 8000dd8:	080176c0 	.word	0x080176c0
 8000ddc:	080176d0 	.word	0x080176d0
 8000de0:	080176dc 	.word	0x080176dc
 8000de4:	080176ec 	.word	0x080176ec
 8000de8:	24000010 	.word	0x24000010
 8000dec:	240002f4 	.word	0x240002f4
 8000df0:	080176fc 	.word	0x080176fc
 8000df4:	0801770c 	.word	0x0801770c
 8000df8:	24000554 	.word	0x24000554
 8000dfc:	24000c64 	.word	0x24000c64
 8000e00:	24000c5f 	.word	0x24000c5f
 8000e04:	24000c58 	.word	0x24000c58
 8000e08:	08017714 	.word	0x08017714
 8000e0c:	08017720 	.word	0x08017720
 8000e10:	24000508 	.word	0x24000508
 8000e14:	24000c5e 	.word	0x24000c5e
 8000e18:	24000c54 	.word	0x24000c54
 8000e1c:	08017728 	.word	0x08017728
 8000e20:	08017730 	.word	0x08017730
 8000e24:	240005a0 	.word	0x240005a0
 8000e28:	24000c60 	.word	0x24000c60
 8000e2c:	24000c5c 	.word	0x24000c5c
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000e30:	484f      	ldr	r0, [pc, #316]	; (8000f70 <HAL_UART_RxCpltCallback+0x8e8>)
 8000e32:	f015 ffe9 	bl	8016e08 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	484e      	ldr	r0, [pc, #312]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000e3a:	f00d ff91 	bl	800ed60 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
		break;
 8000e44:	e08f      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e46:	484d      	ldr	r0, [pc, #308]	; (8000f7c <HAL_UART_RxCpltCallback+0x8f4>)
 8000e48:	f015 ffde 	bl	8016e08 <puts>
		if (step < 17) {
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b10      	cmp	r3, #16
 8000e52:	f200 8081 	bhi.w	8000f58 <HAL_UART_RxCpltCallback+0x8d0>
			step += 2;
 8000e56:	4b4a      	ldr	r3, [pc, #296]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e62:	4b47      	ldr	r3, [pc, #284]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	4845      	ldr	r0, [pc, #276]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000e74:	f004 ffdd 	bl	8005e32 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4843      	ldr	r0, [pc, #268]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000e7c:	f004 fe1e 	bl	8005abc <HAL_DAC_Start>
		}
		break;
 8000e80:	e06a      	b.n	8000f58 <HAL_UART_RxCpltCallback+0x8d0>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e82:	4842      	ldr	r0, [pc, #264]	; (8000f8c <HAL_UART_RxCpltCallback+0x904>)
 8000e84:	f015 ffc0 	bl	8016e08 <puts>
		if (step > 3) {
 8000e88:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d965      	bls.n	8000f5c <HAL_UART_RxCpltCallback+0x8d4>
			step -= 2;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3b02      	subs	r3, #2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e9a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e9c:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4836      	ldr	r0, [pc, #216]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000eae:	f004 ffc0 	bl	8005e32 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4834      	ldr	r0, [pc, #208]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000eb6:	f004 fe01 	bl	8005abc <HAL_DAC_Start>
		}
		break;
 8000eba:	e04f      	b.n	8000f5c <HAL_UART_RxCpltCallback+0x8d4>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ebc:	4834      	ldr	r0, [pc, #208]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000ebe:	f015 ffa3 	bl	8016e08 <puts>
		if (cadence <= 50000) {
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d848      	bhi.n	8000f60 <HAL_UART_RxCpltCallback+0x8d8>
			cadence *= 2;
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ed6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee2:	e03d      	b.n	8000f60 <HAL_UART_RxCpltCallback+0x8d8>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ee4:	482c      	ldr	r0, [pc, #176]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000ee6:	f015 ff8f 	bl	8016e08 <puts>
		if (cadence >= 6250) {
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d936      	bls.n	8000f64 <HAL_UART_RxCpltCallback+0x8dc>
			cadence /= 2;
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000efe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000f0a:	e02b      	b.n	8000f64 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000f0c:	4823      	ldr	r0, [pc, #140]	; (8000f9c <HAL_UART_RxCpltCallback+0x914>)
 8000f0e:	f015 ff7b 	bl	8016e08 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_UART_RxCpltCallback+0x918>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2116      	movs	r1, #22
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f012 fa31 	bl	8013380 <osEventFlagsSet>
		break;
 8000f1e:	e022      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000f22:	f015 ff71 	bl	8016e08 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_UART_RxCpltCallback+0x920>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f013 ffce 	bl	8014ecc <xTaskResumeFromISR>
		break;
 8000f30:	e019      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f32:	481e      	ldr	r0, [pc, #120]	; (8000fac <HAL_UART_RxCpltCallback+0x924>)
 8000f34:	f015 ff68 	bl	8016e08 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_UART_RxCpltCallback+0x928>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f013 ffc5 	bl	8014ecc <xTaskResumeFromISR>
		break;
 8000f42:	e010      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xAF: {
		sync();
 8000f44:	f001 fa84 	bl	8002450 <sync>
		break;
 8000f48:	e00d      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xBF: {
		enter_flight_mode();
 8000f4a:	f001 f8ef 	bl	800212c <enter_flight_mode>
		break;
 8000f4e:	e00a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	default: {
		printf("Unknown Command\n");
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <HAL_UART_RxCpltCallback+0x92c>)
 8000f52:	f015 ff59 	bl	8016e08 <puts>
		break;
 8000f56:	e006      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f58:	bf00      	nop
 8000f5a:	e004      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f5c:	bf00      	nop
 8000f5e:	e002      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f60:	bf00      	nop
 8000f62:	e000      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f64:	bf00      	nop
	}
	}
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08017738 	.word	0x08017738
 8000f74:	240005a0 	.word	0x240005a0
 8000f78:	24000c60 	.word	0x24000c60
 8000f7c:	08017740 	.word	0x08017740
 8000f80:	2400000c 	.word	0x2400000c
 8000f84:	24000010 	.word	0x24000010
 8000f88:	240002f4 	.word	0x240002f4
 8000f8c:	08017748 	.word	0x08017748
 8000f90:	08017754 	.word	0x08017754
 8000f94:	24000008 	.word	0x24000008
 8000f98:	08017760 	.word	0x08017760
 8000f9c:	0801776c 	.word	0x0801776c
 8000fa0:	24000c64 	.word	0x24000c64
 8000fa4:	0801777c 	.word	0x0801777c
 8000fa8:	24000750 	.word	0x24000750
 8000fac:	08017788 	.word	0x08017788
 8000fb0:	240009b0 	.word	0x240009b0
 8000fb4:	08017794 	.word	0x08017794

08000fb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fbc:	f002 ffea 	bl	8003f94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fc0:	f000 f8ac 	bl	800111c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000fc4:	f000 f92a 	bl	800121c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fc8:	f000 feee 	bl	8001da8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000fcc:	f000 feb4 	bl	8001d38 <MX_DMA_Init>
	MX_TIM3_Init();
 8000fd0:	f000 fdac 	bl	8001b2c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000fd4:	f000 fe48 	bl	8001c68 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000fd8:	f000 fb36 	bl	8001648 <MX_I2C1_Init>
	MX_SPI2_Init();
 8000fdc:	f000 fc2c 	bl	8001838 <MX_SPI2_Init>
	MX_TIM2_Init();
 8000fe0:	f000 fd2e 	bl	8001a40 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000fe4:	f000 fc80 	bl	80018e8 <MX_TIM1_Init>
	MX_ADC3_Init();
 8000fe8:	f000 fa6a 	bl	80014c0 <MX_ADC3_Init>
	MX_ADC1_Init();
 8000fec:	f000 f946 	bl	800127c <MX_ADC1_Init>
	MX_DAC1_Init();
 8000ff0:	f000 faf8 	bl	80015e4 <MX_DAC1_Init>
	MX_SPI1_Init();
 8000ff4:	f000 fbc8 	bl	8001788 <MX_SPI1_Init>
	MX_RTC_Init();
 8000ff8:	f000 fb68 	bl	80016cc <MX_RTC_Init>
	MX_TIM4_Init();
 8000ffc:	f000 fde6 	bl	8001bcc <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001000:	f012 f846 	bl	8013090 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8001004:	2200      	movs	r2, #0
 8001006:	2108      	movs	r1, #8
 8001008:	2080      	movs	r0, #128	; 0x80
 800100a:	f012 fab6 	bl	801357a <osMessageQueueNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <main+0xf8>)
 8001012:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of PMT_task */
	PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <main+0xfc>)
 8001016:	2100      	movs	r1, #0
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <main+0x100>)
 800101a:	f012 f883 	bl	8013124 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a26      	ldr	r2, [pc, #152]	; (80010bc <main+0x104>)
 8001022:	6013      	str	r3, [r2, #0]

	/* creation of ERPA_task */
	ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <main+0x108>)
 8001026:	2100      	movs	r1, #0
 8001028:	4826      	ldr	r0, [pc, #152]	; (80010c4 <main+0x10c>)
 800102a:	f012 f87b 	bl	8013124 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <main+0x110>)
 8001032:	6013      	str	r3, [r2, #0]

	/* creation of HK_task */
	HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001034:	4a25      	ldr	r2, [pc, #148]	; (80010cc <main+0x114>)
 8001036:	2100      	movs	r1, #0
 8001038:	4825      	ldr	r0, [pc, #148]	; (80010d0 <main+0x118>)
 800103a:	f012 f873 	bl	8013124 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <main+0x11c>)
 8001042:	6013      	str	r3, [r2, #0]

	/* creation of GPIO_on_task */
	GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL,
 8001044:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <main+0x120>)
 8001046:	2100      	movs	r1, #0
 8001048:	4824      	ldr	r0, [pc, #144]	; (80010dc <main+0x124>)
 800104a:	f012 f86b 	bl	8013124 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <main+0x128>)
 8001052:	6013      	str	r3, [r2, #0]
			&GPIO_on_task_attributes);

	/* creation of GPIO_off_task */
	GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL,
 8001054:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <main+0x12c>)
 8001056:	2100      	movs	r1, #0
 8001058:	4823      	ldr	r0, [pc, #140]	; (80010e8 <main+0x130>)
 800105a:	f012 f863 	bl	8013124 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <main+0x134>)
 8001062:	6013      	str	r3, [r2, #0]
			&GPIO_off_task_attributes);

	/* creation of UART_TX_task */
	UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL,
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <main+0x138>)
 8001066:	2100      	movs	r1, #0
 8001068:	4822      	ldr	r0, [pc, #136]	; (80010f4 <main+0x13c>)
 800106a:	f012 f85b 	bl	8013124 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <main+0x140>)
 8001072:	6013      	str	r3, [r2, #0]
			&UART_TX_task_attributes);

	/* creation of Voltage_Monitor */
	Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL,
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <main+0x144>)
 8001076:	2100      	movs	r1, #0
 8001078:	4821      	ldr	r0, [pc, #132]	; (8001100 <main+0x148>)
 800107a:	f012 f853 	bl	8013124 <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a20      	ldr	r2, [pc, #128]	; (8001104 <main+0x14c>)
 8001082:	6013      	str	r3, [r2, #0]
			&Voltage_Monitor_attributes);

	/* creation of FLAG_task */
	FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001084:	4a20      	ldr	r2, [pc, #128]	; (8001108 <main+0x150>)
 8001086:	2100      	movs	r1, #0
 8001088:	4820      	ldr	r0, [pc, #128]	; (800110c <main+0x154>)
 800108a:	f012 f84b 	bl	8013124 <osThreadNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <main+0x158>)
 8001092:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001094:	2000      	movs	r0, #0
 8001096:	f012 f933 	bl	8013300 <osEventFlagsNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <main+0x15c>)
 800109e:	6013      	str	r3, [r2, #0]
	system_setup();
 80010a0:	f001 fa40 	bl	8002524 <system_setup>
	printf("Starting kernal...\n");
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <main+0x160>)
 80010a6:	f015 feaf 	bl	8016e08 <puts>

	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80010aa:	f012 f815 	bl	80130d8 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010ae:	e7fe      	b.n	80010ae <main+0xf6>
 80010b0:	24000c48 	.word	0x24000c48
 80010b4:	080177f0 	.word	0x080177f0
 80010b8:	08002ce9 	.word	0x08002ce9
 80010bc:	24000744 	.word	0x24000744
 80010c0:	08017814 	.word	0x08017814
 80010c4:	08002d2d 	.word	0x08002d2d
 80010c8:	24000748 	.word	0x24000748
 80010cc:	08017838 	.word	0x08017838
 80010d0:	08002d6d 	.word	0x08002d6d
 80010d4:	2400074c 	.word	0x2400074c
 80010d8:	0801785c 	.word	0x0801785c
 80010dc:	08002db1 	.word	0x08002db1
 80010e0:	24000750 	.word	0x24000750
 80010e4:	08017880 	.word	0x08017880
 80010e8:	08002e59 	.word	0x08002e59
 80010ec:	240009b0 	.word	0x240009b0
 80010f0:	080178a4 	.word	0x080178a4
 80010f4:	08002f01 	.word	0x08002f01
 80010f8:	24000c10 	.word	0x24000c10
 80010fc:	080178c8 	.word	0x080178c8
 8001100:	08002fb9 	.word	0x08002fb9
 8001104:	24000c14 	.word	0x24000c14
 8001108:	080178ec 	.word	0x080178ec
 800110c:	080030b1 	.word	0x080030b1
 8001110:	24000c18 	.word	0x24000c18
 8001114:	24000c64 	.word	0x24000c64
 8001118:	080177a4 	.word	0x080177a4

0800111c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b09c      	sub	sp, #112	; 0x70
 8001120:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	224c      	movs	r2, #76	; 0x4c
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f015 fd16 	bl	8016b5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2220      	movs	r2, #32
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f015 fd10 	bl	8016b5c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800113c:	2002      	movs	r0, #2
 800113e:	f008 ff13 	bl	8009f68 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <SystemClock_Config+0xf8>)
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <SystemClock_Config+0xf8>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <SystemClock_Config+0xf8>)
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <SystemClock_Config+0xfc>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001164:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <SystemClock_Config+0xfc>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <SystemClock_Config+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001178:	bf00      	nop
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <SystemClock_Config+0xfc>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001186:	d1f8      	bne.n	800117a <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001188:	2303      	movs	r3, #3
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001192:	2309      	movs	r3, #9
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119e:	2302      	movs	r3, #2
 80011a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 32;
 80011a6:	2320      	movs	r3, #32
 80011a8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80011ae:	2304      	movs	r3, #4
 80011b0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011b6:	2308      	movs	r3, #8
 80011b8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 ff08 	bl	8009fdc <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xba>
		Error_Handler();
 80011d2:	f001 ff9d 	bl	8003110 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011d6:	233f      	movs	r3, #63	; 0x3f
 80011d8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2303      	movs	r3, #3
 80011dc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f009 fb48 	bl	800a890 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xee>
		Error_Handler();
 8001206:	f001 ff83 	bl	8003110 <Error_Handler>
	}
}
 800120a:	bf00      	nop
 800120c:	3770      	adds	r7, #112	; 0x70
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	58000400 	.word	0x58000400
 8001218:	58024800 	.word	0x58024800

0800121c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b0b0      	sub	sp, #192	; 0xc0
 8001220:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001222:	463b      	mov	r3, r7
 8001224:	22c0      	movs	r2, #192	; 0xc0
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f015 fc97 	bl	8016b5c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 32;
 800123e:	2320      	movs	r3, #32
 8001240:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001242:	2308      	movs	r3, #8
 8001244:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001246:	2304      	movs	r3, #4
 8001248:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001260:	463b      	mov	r3, r7
 8001262:	4618      	mov	r0, r3
 8001264:	f009 fee2 	bl	800b02c <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <PeriphCommonClock_Config+0x56>
		Error_Handler();
 800126e:	f001 ff4f 	bl	8003110 <Error_Handler>
	}
}
 8001272:	bf00      	nop
 8001274:	37c0      	adds	r7, #192	; 0xc0
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012a0:	4b7a      	ldr	r3, [pc, #488]	; (800148c <MX_ADC1_Init+0x210>)
 80012a2:	4a7b      	ldr	r2, [pc, #492]	; (8001490 <MX_ADC1_Init+0x214>)
 80012a4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <MX_ADC1_Init+0x210>)
 80012a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ac:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <MX_ADC1_Init+0x210>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b4:	4b75      	ldr	r3, [pc, #468]	; (800148c <MX_ADC1_Init+0x210>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ba:	4b74      	ldr	r3, [pc, #464]	; (800148c <MX_ADC1_Init+0x210>)
 80012bc:	2204      	movs	r2, #4
 80012be:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c0:	4b72      	ldr	r3, [pc, #456]	; (800148c <MX_ADC1_Init+0x210>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <MX_ADC1_Init+0x210>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 11;
 80012cc:	4b6f      	ldr	r3, [pc, #444]	; (800148c <MX_ADC1_Init+0x210>)
 80012ce:	220b      	movs	r2, #11
 80012d0:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	4b6e      	ldr	r3, [pc, #440]	; (800148c <MX_ADC1_Init+0x210>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d8:	4b6c      	ldr	r3, [pc, #432]	; (800148c <MX_ADC1_Init+0x210>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012de:	4b6b      	ldr	r3, [pc, #428]	; (800148c <MX_ADC1_Init+0x210>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <MX_ADC1_Init+0x210>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <MX_ADC1_Init+0x210>)
 80012ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012f2:	4b66      	ldr	r3, [pc, #408]	; (800148c <MX_ADC1_Init+0x210>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80012f8:	4b64      	ldr	r3, [pc, #400]	; (800148c <MX_ADC1_Init+0x210>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001300:	4862      	ldr	r0, [pc, #392]	; (800148c <MX_ADC1_Init+0x210>)
 8001302:	f003 f8d3 	bl	80044ac <HAL_ADC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0x94>
		Error_Handler();
 800130c:	f001 ff00 	bl	8003110 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	485c      	ldr	r0, [pc, #368]	; (800148c <MX_ADC1_Init+0x210>)
 800131c:	f004 f9ee 	bl	80056fc <HAL_ADCEx_MultiModeConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0xae>
		Error_Handler();
 8001326:	f001 fef3 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <MX_ADC1_Init+0x218>)
 800132c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800132e:	2306      	movs	r3, #6
 8001330:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001332:	2307      	movs	r3, #7
 8001334:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001336:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800133a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800133c:	2304      	movs	r3, #4
 800133e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	484f      	ldr	r0, [pc, #316]	; (800148c <MX_ADC1_Init+0x210>)
 800134e:	f003 fb31 	bl	80049b4 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0xe0>
		Error_Handler();
 8001358:	f001 feda 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <MX_ADC1_Init+0x21c>)
 800135e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001360:	230c      	movs	r3, #12
 8001362:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4848      	ldr	r0, [pc, #288]	; (800148c <MX_ADC1_Init+0x210>)
 800136a:	f003 fb23 	bl	80049b4 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0xfc>
		Error_Handler();
 8001374:	f001 fecc 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <MX_ADC1_Init+0x220>)
 800137a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800137c:	2312      	movs	r3, #18
 800137e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4841      	ldr	r0, [pc, #260]	; (800148c <MX_ADC1_Init+0x210>)
 8001386:	f003 fb15 	bl	80049b4 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x118>
		Error_Handler();
 8001390:	f001 febe 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001394:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <MX_ADC1_Init+0x224>)
 8001396:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001398:	2318      	movs	r3, #24
 800139a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	483a      	ldr	r0, [pc, #232]	; (800148c <MX_ADC1_Init+0x210>)
 80013a2:	f003 fb07 	bl	80049b4 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x134>
		Error_Handler();
 80013ac:	f001 feb0 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_ADC1_Init+0x228>)
 80013b2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 80013b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	4833      	ldr	r0, [pc, #204]	; (800148c <MX_ADC1_Init+0x210>)
 80013c0:	f003 faf8 	bl	80049b4 <HAL_ADC_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_ADC1_Init+0x152>
		Error_Handler();
 80013ca:	f001 fea1 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <MX_ADC1_Init+0x22c>)
 80013d0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 80013d2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013d6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	482b      	ldr	r0, [pc, #172]	; (800148c <MX_ADC1_Init+0x210>)
 80013de:	f003 fae9 	bl	80049b4 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0x170>
		Error_Handler();
 80013e8:	f001 fe92 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <MX_ADC1_Init+0x230>)
 80013ee:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 80013f0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013f4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4824      	ldr	r0, [pc, #144]	; (800148c <MX_ADC1_Init+0x210>)
 80013fc:	f003 fada 	bl	80049b4 <HAL_ADC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ADC1_Init+0x18e>
		Error_Handler();
 8001406:	f001 fe83 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <MX_ADC1_Init+0x234>)
 800140c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_8;
 800140e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001412:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <MX_ADC1_Init+0x210>)
 800141a:	f003 facb 	bl	80049b4 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x1ac>
		Error_Handler();
 8001424:	f001 fe74 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_ADC1_Init+0x238>)
 800142a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_9;
 800142c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001430:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <MX_ADC1_Init+0x210>)
 8001438:	f003 fabc 	bl	80049b4 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0x1ca>
		Error_Handler();
 8001442:	f001 fe65 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_ADC1_Init+0x23c>)
 8001448:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_10;
 800144a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_ADC1_Init+0x210>)
 8001456:	f003 faad 	bl	80049b4 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x1e8>
		Error_Handler();
 8001460:	f001 fe56 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_17;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_ADC1_Init+0x240>)
 8001466:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_11;
 8001468:	f240 2306 	movw	r3, #518	; 0x206
 800146c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_ADC1_Init+0x210>)
 8001474:	f003 fa9e 	bl	80049b4 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0x206>
		Error_Handler();
 800147e:	f001 fe47 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2400013c 	.word	0x2400013c
 8001490:	40022000 	.word	0x40022000
 8001494:	0c900008 	.word	0x0c900008
 8001498:	10c00010 	.word	0x10c00010
 800149c:	14f00020 	.word	0x14f00020
 80014a0:	1d500080 	.word	0x1d500080
 80014a4:	21800100 	.word	0x21800100
 80014a8:	25b00200 	.word	0x25b00200
 80014ac:	2a000400 	.word	0x2a000400
 80014b0:	2e300800 	.word	0x2e300800
 80014b4:	3ac04000 	.word	0x3ac04000
 80014b8:	3ef08000 	.word	0x3ef08000
 80014bc:	47520000 	.word	0x47520000

080014c0 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 80014d8:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014da:	4a3e      	ldr	r2, [pc, #248]	; (80015d4 <MX_ADC3_Init+0x114>)
 80014dc:	601a      	str	r2, [r3, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014e0:	2208      	movs	r2, #8
 80014e2:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	60da      	str	r2, [r3, #12]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014ec:	2204      	movs	r2, #4
 80014ee:	611a      	str	r2, [r3, #16]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	751a      	strb	r2, [r3, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	755a      	strb	r2, [r3, #21]
	hadc3.Init.NbrOfConversion = 4;
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014fe:	2204      	movs	r2, #4
 8001500:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001504:	2200      	movs	r2, #0
 8001506:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <MX_ADC3_Init+0x110>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001516:	2203      	movs	r2, #3
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <MX_ADC3_Init+0x110>)
 800151c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC3_Init+0x110>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001532:	f002 ffbb 	bl	80044ac <HAL_ADC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC3_Init+0x80>
		Error_Handler();
 800153c:	f001 fde8 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_ADC3_Init+0x118>)
 8001542:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001544:	2306      	movs	r3, #6
 8001546:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001548:	2307      	movs	r3, #7
 800154a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001550:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001552:	2304      	movs	r3, #4
 8001554:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	481b      	ldr	r0, [pc, #108]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001564:	f003 fa26 	bl	80049b4 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC3_Init+0xb2>
		Error_Handler();
 800156e:	f001 fdcf 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_ADC3_Init+0x11c>)
 8001574:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001576:	230c      	movs	r3, #12
 8001578:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4814      	ldr	r0, [pc, #80]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001580:	f003 fa18 	bl	80049b4 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC3_Init+0xce>
		Error_Handler();
 800158a:	f001 fdc1 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800158e:	2301      	movs	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001592:	2312      	movs	r3, #18
 8001594:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_ADC3_Init+0x110>)
 800159c:	f003 fa0a 	bl	80049b4 <HAL_ADC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC3_Init+0xea>
		Error_Handler();
 80015a6:	f001 fdb3 	bl	8003110 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_ADC3_Init+0x120>)
 80015ac:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80015ae:	2318      	movs	r3, #24
 80015b0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC3_Init+0x110>)
 80015b8:	f003 f9fc 	bl	80049b4 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC3_Init+0x106>
		Error_Handler();
 80015c2:	f001 fda5 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	240001a0 	.word	0x240001a0
 80015d4:	58026000 	.word	0x58026000
 80015d8:	cb840000 	.word	0xcb840000
 80015dc:	cfb80000 	.word	0xcfb80000
 80015e0:	04300002 	.word	0x04300002

080015e4 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2224      	movs	r2, #36	; 0x24
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f015 fab3 	bl	8016b5c <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_DAC1_Init+0x60>)
 80015fa:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015fe:	f004 fa3b 	bl	8005a78 <HAL_DAC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_DAC1_Init+0x28>
		Error_Handler();
 8001608:	f001 fd82 	bl	8003110 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001610:	230a      	movs	r3, #10
 8001612:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_DAC1_Init+0x5c>)
 8001628:	f004 fc56 	bl	8005ed8 <HAL_DAC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_DAC1_Init+0x52>
		Error_Handler();
 8001632:	f001 fd6d 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	240002f4 	.word	0x240002f4
 8001644:	40007400 	.word	0x40007400

08001648 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_I2C1_Init+0x78>)
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <MX_I2C1_Init+0x7c>)
 8001650:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0020081F;
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <MX_I2C1_Init+0x80>)
 8001656:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_I2C1_Init+0x78>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001660:	2201      	movs	r2, #1
 8001662:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_I2C1_Init+0x78>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_I2C1_Init+0x78>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001684:	f007 fe28 	bl	80092d8 <HAL_I2C_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800168e:	f001 fd3f 	bl	8003110 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001692:	2100      	movs	r1, #0
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001696:	f008 fb6f 	bl	8009d78 <HAL_I2CEx_ConfigAnalogFilter>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80016a0:	f001 fd36 	bl	8003110 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80016a4:	2100      	movs	r1, #0
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_I2C1_Init+0x78>)
 80016a8:	f008 fbb1 	bl	8009e0e <HAL_I2CEx_ConfigDigitalFilter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80016b2:	f001 fd2d 	bl	8003110 <Error_Handler>
	}

	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f008 fbf6 	bl	8009ea8 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	24000380 	.word	0x24000380
 80016c4:	40005400 	.word	0x40005400
 80016c8:	0020081f 	.word	0x0020081f

080016cc <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80016e0:	2300      	movs	r3, #0
 80016e2:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_RTC_Init+0xb4>)
 80016e6:	4a27      	ldr	r2, [pc, #156]	; (8001784 <MX_RTC_Init+0xb8>)
 80016e8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ea:	4b25      	ldr	r3, [pc, #148]	; (8001780 <MX_RTC_Init+0xb4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 100 - 1;
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_RTC_Init+0xb4>)
 80016f2:	2263      	movs	r2, #99	; 0x63
 80016f4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 10000 - 1;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_RTC_Init+0xb4>)
 80016f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016fc:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_RTC_Init+0xb4>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_RTC_Init+0xb4>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_RTC_Init+0xb4>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_RTC_Init+0xb4>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001716:	481a      	ldr	r0, [pc, #104]	; (8001780 <MX_RTC_Init+0xb4>)
 8001718:	f00c f986 	bl	800da28 <HAL_RTC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_RTC_Init+0x5a>
		Error_Handler();
 8001722:	f001 fcf5 	bl	8003110 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001726:	2300      	movs	r3, #0
 8001728:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800172a:	2300      	movs	r3, #0
 800172c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800172e:	2300      	movs	r3, #0
 8001730:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <MX_RTC_Init+0xb4>)
 8001742:	f00c f9f3 	bl	800db2c <HAL_RTC_SetTime>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_RTC_Init+0x84>
		Error_Handler();
 800174c:	f001 fce0 	bl	8003110 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001750:	2301      	movs	r3, #1
 8001752:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001754:	2301      	movs	r3, #1
 8001756:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001758:	2301      	movs	r3, #1
 800175a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 800175c:	2300      	movs	r3, #0
 800175e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001760:	463b      	mov	r3, r7
 8001762:	2201      	movs	r2, #1
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_RTC_Init+0xb4>)
 8001768:	f00c fada 	bl	800dd20 <HAL_RTC_SetDate>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_RTC_Init+0xaa>
		Error_Handler();
 8001772:	f001 fccd 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	240003d4 	.word	0x240003d4
 8001784:	58004000 	.word	0x58004000

08001788 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <MX_SPI1_Init+0xa8>)
 800178e:	4a29      	ldr	r2, [pc, #164]	; (8001834 <MX_SPI1_Init+0xac>)
 8001790:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001794:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001798:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <MX_SPI1_Init+0xa8>)
 800179c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017a0:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017a4:	220f      	movs	r2, #15
 80017a6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ba:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017be:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017c2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_SPI1_Init+0xa8>)
 800180a:	2200      	movs	r2, #0
 800180c:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001816:	2200      	movs	r2, #0
 8001818:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_SPI1_Init+0xa8>)
 800181c:	f00c fc26 	bl	800e06c <HAL_SPI_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_SPI1_Init+0xa2>
		Error_Handler();
 8001826:	f001 fc73 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	240003f8 	.word	0x240003f8
 8001834:	40013000 	.word	0x40013000

08001838 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800183e:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <MX_SPI2_Init+0xac>)
 8001840:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001844:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001848:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800184c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001850:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001854:	220f      	movs	r2, #15
 8001856:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001866:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800186a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800186e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001872:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001888:	2200      	movs	r2, #0
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800188e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800189c:	2200      	movs	r2, #0
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018cc:	f00c fbce 	bl	800e06c <HAL_SPI_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_SPI2_Init+0xa2>
		Error_Handler();
 80018d6:	f001 fc1b 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	24000480 	.word	0x24000480
 80018e4:	40003800 	.word	0x40003800

080018e8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b09a      	sub	sp, #104	; 0x68
 80018ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	222c      	movs	r2, #44	; 0x2c
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f015 f91a 	bl	8016b5c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001928:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <MX_TIM1_Init+0x150>)
 800192a:	4a44      	ldr	r2, [pc, #272]	; (8001a3c <MX_TIM1_Init+0x154>)
 800192c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 50 - 1;
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001930:	2231      	movs	r2, #49	; 0x31
 8001932:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62500 - 1;
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <MX_TIM1_Init+0x150>)
 800193c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001940:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <MX_TIM1_Init+0x150>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001954:	4838      	ldr	r0, [pc, #224]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001956:	f00c ffda 	bl	800e90e <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001960:	f001 fbd6 	bl	8003110 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800196a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800196e:	4619      	mov	r1, r3
 8001970:	4831      	ldr	r0, [pc, #196]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001972:	f00d fd55 	bl	800f420 <HAL_TIM_ConfigClockSource>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0x98>
		Error_Handler();
 800197c:	f001 fbc8 	bl	8003110 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001980:	482d      	ldr	r0, [pc, #180]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001982:	f00d fad1 	bl	800ef28 <HAL_TIM_PWM_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0xa8>
		Error_Handler();
 800198c:	f001 fbc0 	bl	8003110 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800199c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019a0:	4619      	mov	r1, r3
 80019a2:	4825      	ldr	r0, [pc, #148]	; (8001a38 <MX_TIM1_Init+0x150>)
 80019a4:	f00e fa92 	bl	800fecc <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80019ae:	f001 fbaf 	bl	8003110 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b2:	2360      	movs	r3, #96	; 0x60
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80019ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM1_Init+0x150>)
 80019d8:	f00d fc0e 	bl	800f1f8 <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 80019e2:	f001 fb95 	bl	8003110 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001a1c:	f00e fae4 	bl	800ffe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8001a26:	f001 fb73 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001a2c:	f001 ff20 	bl	8003870 <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3768      	adds	r7, #104	; 0x68
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000508 	.word	0x24000508
 8001a3c:	40010000 	.word	0x40010000

08001a40 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a60:	463b      	mov	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a78:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 50 - 1;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a7c:	2231      	movs	r2, #49	; 0x31
 8001a7e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3125 - 1;
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a88:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a8c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001a9a:	4823      	ldr	r0, [pc, #140]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a9c:	f00c ff37 	bl	800e90e <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001aa6:	f001 fb33 	bl	8003110 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481c      	ldr	r0, [pc, #112]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ab8:	f00d fcb2 	bl	800f420 <HAL_TIM_ConfigClockSource>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001ac2:	f001 fb25 	bl	8003110 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001ac6:	4818      	ldr	r0, [pc, #96]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ac8:	f00d fa2e 	bl	800ef28 <HAL_TIM_PWM_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0x96>
		Error_Handler();
 8001ad2:	f001 fb1d 	bl	8003110 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4810      	ldr	r0, [pc, #64]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ae6:	f00e f9f1 	bl	800fecc <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001af0:	f001 fb0e 	bl	8003110 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af4:	2360      	movs	r3, #96	; 0x60
 8001af6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8001b04:	463b      	mov	r3, r7
 8001b06:	220c      	movs	r2, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001b0c:	f00d fb74 	bl	800f1f8 <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8001b16:	f001 fafb 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001b1c:	f001 fea8 	bl	8003870 <HAL_TIM_MspPostInit>

}
 8001b20:	bf00      	nop
 8001b22:	3738      	adds	r7, #56	; 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	24000554 	.word	0x24000554

08001b2c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <MX_TIM3_Init+0x9c>)
 8001b4e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10000 - 1;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b52:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b56:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 50000 - 1;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b60:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b64:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001b72:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b74:	f00c fecb 	bl	800e90e <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM3_Init+0x56>
		Error_Handler();
 8001b7e:	f001 fac7 	bl	8003110 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b90:	f00d fc46 	bl	800f420 <HAL_TIM_ConfigClockSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0x72>
		Error_Handler();
 8001b9a:	f001 fab9 	bl	8003110 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001bac:	f00e f98e 	bl	800fecc <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM3_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001bb6:	f001 faab 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	240005a0 	.word	0x240005a0
 8001bc8:	40000400 	.word	0x40000400

08001bcc <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001bec:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <MX_TIM4_Init+0x98>)
 8001bee:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 100 - 1;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001bf2:	2263      	movs	r2, #99	; 0x63
 8001bf4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 50000 - 1;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001bfe:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c02:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001c10:	4813      	ldr	r0, [pc, #76]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c12:	f00c fe7c 	bl	800e90e <HAL_TIM_Base_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM4_Init+0x54>
		Error_Handler();
 8001c1c:	f001 fa78 	bl	8003110 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c24:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c2e:	f00d fbf7 	bl	800f420 <HAL_TIM_ConfigClockSource>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM4_Init+0x70>
		Error_Handler();
 8001c38:	f001 fa6a 	bl	8003110 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c4a:	f00e f93f 	bl	800fecc <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM4_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001c54:	f001 fa5c 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	240005ec 	.word	0x240005ec
 8001c64:	40000800 	.word	0x40000800

08001c68 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c6c:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c6e:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <MX_USART1_UART_Init+0xcc>)
 8001c70:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c74:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c78:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001cb0:	481f      	ldr	r0, [pc, #124]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cb2:	f00e fa35 	bl	8010120 <HAL_UART_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001cbc:	f001 fa28 	bl	8003110 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	481b      	ldr	r0, [pc, #108]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cc4:	f011 f8d5 	bl	8012e72 <HAL_UARTEx_SetTxFifoThreshold>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001cce:	f001 fa1f 	bl	8003110 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cd6:	f011 f90a 	bl	8012eee <HAL_UARTEx_SetRxFifoThreshold>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001ce0:	f001 fa16 	bl	8003110 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001ce4:	4812      	ldr	r0, [pc, #72]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001ce6:	f011 f88b 	bl	8012e00 <HAL_UARTEx_DisableFifoMode>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001cf0:	f001 fa0e 	bl	8003110 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cfa:	f011 f8f8 	bl	8012eee <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001cfe:	480c      	ldr	r0, [pc, #48]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d00:	f011 f843 	bl	8012d8a <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001d04:	480a      	ldr	r0, [pc, #40]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d06:	f011 f80d 	bl	8012d24 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d18:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d28:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
	/* USER CODE END USART1_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	24000638 	.word	0x24000638
 8001d34:	40011000 	.word	0x40011000

08001d38 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_DMA_Init+0x6c>)
 8001d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <MX_DMA_Init+0x6c>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_DMA_Init+0x6c>)
 8001d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2105      	movs	r1, #5
 8001d60:	200b      	movs	r0, #11
 8001d62:	f003 fe61 	bl	8005a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d66:	200b      	movs	r0, #11
 8001d68:	f003 fe78 	bl	8005a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2105      	movs	r1, #5
 8001d70:	200c      	movs	r0, #12
 8001d72:	f003 fe59 	bl	8005a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d76:	200c      	movs	r0, #12
 8001d78:	f003 fe70 	bl	8005a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2105      	movs	r1, #5
 8001d80:	200d      	movs	r0, #13
 8001d82:	f003 fe51 	bl	8005a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d86:	200d      	movs	r0, #13
 8001d88:	f003 fe68 	bl	8005a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2105      	movs	r1, #5
 8001d90:	2010      	movs	r0, #16
 8001d92:	f003 fe49 	bl	8005a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d96:	2010      	movs	r0, #16
 8001d98:	f003 fe60 	bl	8005a5c <HAL_NVIC_EnableIRQ>

}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	58024400 	.word	0x58024400

08001da8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ddc:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1e:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e3c:	4815      	ldr	r0, [pc, #84]	; (8001e94 <MX_GPIO_Init+0xec>)
 8001e3e:	f007 fa31 	bl	80092a4 <HAL_GPIO_WritePin>
			GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
					| GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6,
 8001e42:	2200      	movs	r2, #0
 8001e44:	2164      	movs	r1, #100	; 0x64
 8001e46:	4814      	ldr	r0, [pc, #80]	; (8001e98 <MX_GPIO_Init+0xf0>)
 8001e48:	f007 fa2c 	bl	80092a4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC6 PC7 PC8
	 PC9 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8001e4c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e50:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <MX_GPIO_Init+0xec>)
 8001e66:	f007 f855 	bl	8008f14 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6;
 8001e6a:	2364      	movs	r3, #100	; 0x64
 8001e6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_GPIO_Init+0xf0>)
 8001e82:	f007 f847 	bl	8008f14 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58020800 	.word	0x58020800
 8001e98:	58020400 	.word	0x58020400

08001e9c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	b299      	uxth	r1, r3
 8001eae:	f107 0208 	add.w	r2, r7, #8
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	4817      	ldr	r0, [pc, #92]	; (8001f18 <poll_i2c_sensor+0x7c>)
 8001ebc:	f007 faa8 	bl	8009410 <HAL_I2C_Master_Transmit>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001ec4:	7b7b      	ldrb	r3, [r7, #13]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001eca:	4814      	ldr	r0, [pc, #80]	; (8001f1c <poll_i2c_sensor+0x80>)
 8001ecc:	f014 ff9c 	bl	8016e08 <puts>
 8001ed0:	e01c      	b.n	8001f0c <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	b299      	uxth	r1, r3
 8001ed6:	f107 0208 	add.w	r2, r7, #8
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	480d      	ldr	r0, [pc, #52]	; (8001f18 <poll_i2c_sensor+0x7c>)
 8001ee4:	f007 fbac 	bl	8009640 <HAL_I2C_Master_Receive>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <poll_i2c_sensor+0x84>)
 8001ef4:	f014 ff88 	bl	8016e08 <puts>
 8001ef8:	e008      	b.n	8001f0c <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001efa:	7a3b      	ldrb	r3, [r7, #8]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001f00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f04:	7a7a      	ldrb	r2, [r7, #9]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	10db      	asrs	r3, r3, #3
 8001f0a:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001f0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	24000380 	.word	0x24000380
 8001f1c:	080177b8 	.word	0x080177b8
 8001f20:	080177c8 	.word	0x080177c8

08001f24 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001f2c:	f107 010c 	add.w	r1, r7, #12
 8001f30:	2301      	movs	r3, #1
 8001f32:	2201      	movs	r2, #1
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <receive_pmt_spi+0x44>)
 8001f36:	f00c f9bd 	bl	800e2b4 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f3e:	7b7b      	ldrb	r3, [r7, #13]
 8001f40:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <receive_pmt_spi+0x44>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <receive_pmt_spi+0x44>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f50:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7bba      	ldrb	r2, [r7, #14]
 8001f56:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	701a      	strb	r2, [r3, #0]
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	240003f8 	.word	0x240003f8

08001f6c <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f74:	f107 010c 	add.w	r1, r7, #12
 8001f78:	2364      	movs	r3, #100	; 0x64
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <receive_erpa_spi+0x44>)
 8001f7e:	f00c f999 	bl	800e2b4 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f86:	7b7b      	ldrb	r3, [r7, #13]
 8001f88:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <receive_erpa_spi+0x44>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <receive_erpa_spi+0x44>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f98:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7bba      	ldrb	r2, [r7, #14]
 8001f9e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	701a      	strb	r2, [r3, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	24000480 	.word	0x24000480

08001fb4 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <receive_erpa_adc+0x20>)
 8001fbe:	885b      	ldrh	r3, [r3, #2]
 8001fc0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	89fa      	ldrh	r2, [r7, #14]
 8001fc6:	801a      	strh	r2, [r3, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	24000cc0 	.word	0x24000cc0

08001fd8 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001fe0:	2390      	movs	r3, #144	; 0x90
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff5a 	bl	8001e9c <poll_i2c_sensor>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001fec:	2394      	movs	r3, #148	; 0x94
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff54 	bl	8001e9c <poll_i2c_sensor>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001ff8:	2392      	movs	r3, #146	; 0x92
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff4e 	bl	8001e9c <poll_i2c_sensor>
 8002000:	4603      	mov	r3, r0
 8002002:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002004:	2396      	movs	r3, #150	; 0x96
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff48 	bl	8001e9c <poll_i2c_sensor>
 800200c:	4603      	mov	r3, r0
 800200e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	89fa      	ldrh	r2, [r7, #14]
 8002014:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3302      	adds	r3, #2
 800201a:	89ba      	ldrh	r2, [r7, #12]
 800201c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	897a      	ldrh	r2, [r7, #10]
 8002024:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3306      	adds	r3, #6
 800202a:	893a      	ldrh	r2, [r7, #8]
 800202c:	801a      	strh	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002042:	8a9b      	ldrh	r3, [r3, #20]
 8002044:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002048:	8a1b      	ldrh	r3, [r3, #16]
 800204a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <receive_hk_adc1+0xa0>)
 800204e:	899b      	ldrh	r3, [r3, #12]
 8002050:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002054:	8a5b      	ldrh	r3, [r3, #18]
 8002056:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <receive_hk_adc1+0xa0>)
 800205a:	889b      	ldrh	r3, [r3, #4]
 800205c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002060:	88db      	ldrh	r3, [r3, #6]
 8002062:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002066:	89db      	ldrh	r3, [r3, #14]
 8002068:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <receive_hk_adc1+0xa0>)
 800206c:	891b      	ldrh	r3, [r3, #8]
 800206e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002078:	895b      	ldrh	r3, [r3, #10]
 800207a:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8bfa      	ldrh	r2, [r7, #30]
 8002080:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3302      	adds	r3, #2
 8002086:	8bba      	ldrh	r2, [r7, #28]
 8002088:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	8b7a      	ldrh	r2, [r7, #26]
 8002090:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3306      	adds	r3, #6
 8002096:	8b3a      	ldrh	r2, [r7, #24]
 8002098:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3308      	adds	r3, #8
 800209e:	8afa      	ldrh	r2, [r7, #22]
 80020a0:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	330a      	adds	r3, #10
 80020a6:	8aba      	ldrh	r2, [r7, #20]
 80020a8:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	330c      	adds	r3, #12
 80020ae:	8a7a      	ldrh	r2, [r7, #18]
 80020b0:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	330e      	adds	r3, #14
 80020b6:	8a3a      	ldrh	r2, [r7, #16]
 80020b8:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3310      	adds	r3, #16
 80020be:	89fa      	ldrh	r2, [r7, #14]
 80020c0:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3312      	adds	r3, #18
 80020c6:	89ba      	ldrh	r2, [r7, #12]
 80020c8:	801a      	strh	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	24000cc0 	.word	0x24000cc0

080020dc <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <receive_hk_adc3+0x4c>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <receive_hk_adc3+0x4c>)
 80020ec:	885b      	ldrh	r3, [r3, #2]
 80020ee:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <receive_hk_adc3+0x4c>)
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <receive_hk_adc3+0x4c>)
 80020f8:	88db      	ldrh	r3, [r3, #6]
 80020fa:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	89fa      	ldrh	r2, [r7, #14]
 8002100:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3302      	adds	r3, #2
 8002106:	89ba      	ldrh	r2, [r7, #12]
 8002108:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	897a      	ldrh	r2, [r7, #10]
 8002110:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3306      	adds	r3, #6
 8002116:	893a      	ldrh	r2, [r7, #8]
 8002118:	801a      	strh	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	24000ce0 	.word	0x24000ce0

0800212c <enter_flight_mode>:
 *
 * This function resumes the GPIO task, enables voltage rails, starts the DAC
 * in DMA mode, and starts various timers for packet transmission. It also sets
 * the relevant status flags.
 */
void enter_flight_mode() {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af02      	add	r7, sp, #8
	xTaskResumeFromISR(GPIO_on_taskHandle);										// Auto Init
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <enter_flight_mode+0x90>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f012 fec8 	bl	8014ecc <xTaskResumeFromISR>
	HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);				// Enable n200v
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <enter_flight_mode+0x94>)
 800213e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002142:	2201      	movs	r2, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f007 f8ad 	bl	80092a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);				// Enable n800v
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <enter_flight_mode+0x98>)
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	2201      	movs	r2, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f007 f8a7 	bl	80092a4 <HAL_GPIO_WritePin>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);		// Enable auto sweep (doesn't start until ERPA timer is started)
 8002156:	2300      	movs	r3, #0
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2320      	movs	r3, #32
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <enter_flight_mode+0x9c>)
 800215e:	2100      	movs	r1, #0
 8002160:	481a      	ldr	r0, [pc, #104]	; (80021cc <enter_flight_mode+0xa0>)
 8002162:	f003 fd03 	bl	8005b6c <HAL_DAC_Start_DMA>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);									// ERPA packet on
 8002166:	210c      	movs	r1, #12
 8002168:	4819      	ldr	r0, [pc, #100]	; (80021d0 <enter_flight_mode+0xa4>)
 800216a:	f00c fc9f 	bl	800eaac <HAL_TIM_OC_Start_IT>
	ERPA_ON = 1;
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <enter_flight_mode+0xa8>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <enter_flight_mode+0xac>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f011 f900 	bl	8013380 <osEventFlagsSet>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);									// PMT packet on
 8002180:	2100      	movs	r1, #0
 8002182:	4816      	ldr	r0, [pc, #88]	; (80021dc <enter_flight_mode+0xb0>)
 8002184:	f00c fc92 	bl	800eaac <HAL_TIM_OC_Start_IT>
	PMT_ON = 1;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <enter_flight_mode+0xb4>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, PMT_FLAG_ID);
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <enter_flight_mode+0xac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2101      	movs	r1, #1
 8002194:	4618      	mov	r0, r3
 8002196:	f011 f8f3 	bl	8013380 <osEventFlagsSet>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);									// HK packet on
 800219a:	2100      	movs	r1, #0
 800219c:	4811      	ldr	r0, [pc, #68]	; (80021e4 <enter_flight_mode+0xb8>)
 800219e:	f00c fc85 	bl	800eaac <HAL_TIM_OC_Start_IT>
	HK_ON = 1;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <enter_flight_mode+0xbc>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, HK_FLAG_ID);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <enter_flight_mode+0xac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2104      	movs	r1, #4
 80021ae:	4618      	mov	r0, r3
 80021b0:	f011 f8e6 	bl	8013380 <osEventFlagsSet>

}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	24000750 	.word	0x24000750
 80021c0:	58020800 	.word	0x58020800
 80021c4:	58020400 	.word	0x58020400
 80021c8:	24000010 	.word	0x24000010
 80021cc:	240002f4 	.word	0x240002f4
 80021d0:	24000554 	.word	0x24000554
 80021d4:	24000c5f 	.word	0x24000c5f
 80021d8:	24000c64 	.word	0x24000c64
 80021dc:	24000508 	.word	0x24000508
 80021e0:	24000c5e 	.word	0x24000c5e
 80021e4:	240005a0 	.word	0x240005a0
 80021e8:	24000c60 	.word	0x24000c60

080021ec <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80021f2:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <get_current_step+0xc0>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021fe:	4293      	cmp	r3, r2
 8002200:	d04a      	beq.n	8002298 <get_current_step+0xac>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002208:	da48      	bge.n	800229c <get_current_step+0xb0>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002210:	4293      	cmp	r3, r2
 8002212:	d03f      	beq.n	8002294 <get_current_step+0xa8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f640 628b 	movw	r2, #3723	; 0xe8b
 800221a:	4293      	cmp	r3, r2
 800221c:	dc3e      	bgt.n	800229c <get_current_step+0xb0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002224:	4293      	cmp	r3, r2
 8002226:	d033      	beq.n	8002290 <get_current_step+0xa4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800222e:	da35      	bge.n	800229c <get_current_step+0xb0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002236:	4293      	cmp	r3, r2
 8002238:	d028      	beq.n	800228c <get_current_step+0xa0>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002240:	4293      	cmp	r3, r2
 8002242:	dc2b      	bgt.n	800229c <get_current_step+0xb0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f240 7245 	movw	r2, #1861	; 0x745
 800224a:	4293      	cmp	r3, r2
 800224c:	d01c      	beq.n	8002288 <get_current_step+0x9c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f240 7245 	movw	r2, #1861	; 0x745
 8002254:	4293      	cmp	r3, r2
 8002256:	dc21      	bgt.n	800229c <get_current_step+0xb0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800225e:	4293      	cmp	r3, r2
 8002260:	d010      	beq.n	8002284 <get_current_step+0x98>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002268:	4293      	cmp	r3, r2
 800226a:	dc17      	bgt.n	800229c <get_current_step+0xb0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <get_current_step+0x90>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002278:	d002      	beq.n	8002280 <get_current_step+0x94>
 800227a:	e00f      	b.n	800229c <get_current_step+0xb0>
	case 0:
		return 0;
 800227c:	2300      	movs	r3, #0
 800227e:	e00e      	b.n	800229e <get_current_step+0xb2>
	case 620:
		return 1;
 8002280:	2301      	movs	r3, #1
 8002282:	e00c      	b.n	800229e <get_current_step+0xb2>
	case 1241:
		return 2;
 8002284:	2302      	movs	r3, #2
 8002286:	e00a      	b.n	800229e <get_current_step+0xb2>
	case 1861:
		return 3;
 8002288:	2303      	movs	r3, #3
 800228a:	e008      	b.n	800229e <get_current_step+0xb2>
	case 2482:
		return 4;
 800228c:	2304      	movs	r3, #4
 800228e:	e006      	b.n	800229e <get_current_step+0xb2>
	case 3103:
		return 5;
 8002290:	2305      	movs	r3, #5
 8002292:	e004      	b.n	800229e <get_current_step+0xb2>
	case 3723:
		return 6;
 8002294:	2306      	movs	r3, #6
 8002296:	e002      	b.n	800229e <get_current_step+0xb2>
	case 4095:
		return 7;
 8002298:	2307      	movs	r3, #7
 800229a:	e000      	b.n	800229e <get_current_step+0xb2>
	default:
		return -1;
 800229c:	23ff      	movs	r3, #255	; 0xff
	}
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40007400 	.word	0x40007400

080022b0 <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 80022b4:	f000 f8f2 	bl	800249c <send_ACK>

	vTaskSuspendAll();
 80022b8:	f012 fee0 	bl	801507c <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80022bc:	2101      	movs	r1, #1
 80022be:	2001      	movs	r0, #1
 80022c0:	f007 fe16 	bl	8009ef0 <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 80022c4:	f012 fee8 	bl	8015098 <xTaskResumeAll>
	SystemClock_Config();
 80022c8:	f7fe ff28 	bl	800111c <SystemClock_Config>
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <RTC_SetTime>:
void RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format) {
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d051      	beq.n	800238a <RTC_SetTime+0xba>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	22ca      	movs	r2, #202	; 0xca
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2253      	movs	r2, #83	; 0x53
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f00b fe04 	bl	800df14 <RTC_EnterInitMode>
 800230c:	4603      	mov	r3, r0
 800230e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK)
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d129      	bne.n	800236a <RTC_SetTime+0x9a>
	{

		sTime->TimeFormat = 0x00U;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2200      	movs	r2, #0
 800231a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f00b fe69 	bl	800dff8 <RTC_ByteToBcd2>
 8002326:	4603      	mov	r3, r0
 8002328:	041c      	lsls	r4, r3, #16
				((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	4618      	mov	r0, r3
 8002330:	f00b fe62 	bl	800dff8 <RTC_ByteToBcd2>
 8002334:	4603      	mov	r3, r0
 8002336:	021b      	lsls	r3, r3, #8
		tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002338:	431c      	orrs	r4, r3
				((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	789b      	ldrb	r3, [r3, #2]
 800233e:	4618      	mov	r0, r3
 8002340:	f00b fe5a 	bl	800dff8 <RTC_ByteToBcd2>
 8002344:	4603      	mov	r3, r0
				((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002346:	ea44 0203 	orr.w	r2, r4, r3
				(((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	78db      	ldrb	r3, [r3, #3]
 800234e:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]


		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	6939      	ldr	r1, [r7, #16]
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <RTC_SetTime+0xc4>)
 800235c:	400b      	ands	r3, r1
 800235e:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f00b fe0b 	bl	800df7c <RTC_ExitInitMode>
 8002366:	4603      	mov	r3, r0
 8002368:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK)
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <RTC_SetTime+0xb0>
	{
		hrtc->State = HAL_RTC_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2020 	strb.w	r2, [r3, #32]
 8002388:	e000      	b.n	800238c <RTC_SetTime+0xbc>
	__HAL_LOCK(hrtc);
 800238a:	bf00      	nop

}
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd90      	pop	{r4, r7, pc}
 8002392:	bf00      	nop
 8002394:	007f7f7f 	.word	0x007f7f7f

08002398 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	785b      	ldrb	r3, [r3, #1]
 80023a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	789b      	ldrb	r3, [r3, #2]
 80023ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	78db      	ldrb	r3, [r3, #3]
 80023b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	791b      	ldrb	r3, [r3, #4]
 80023bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	795b      	ldrb	r3, [r3, #5]
 80023c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	799b      	ldrb	r3, [r3, #6]
 80023cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3307      	adds	r3, #7
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b21a      	sxth	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3308      	adds	r3, #8
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80023e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80023f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80023f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8002400:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002404:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8002406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800240a:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 800240c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002410:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8002412:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002414:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8002416:	f107 0320 	add.w	r3, r7, #32
 800241a:	2200      	movs	r2, #0
 800241c:	4619      	mov	r1, r3
 800241e:	480b      	ldr	r0, [pc, #44]	; (800244c <calibrateRTC+0xb4>)
 8002420:	f00b fc7e 	bl	800dd20 <HAL_RTC_SetDate>
 8002424:	4603      	mov	r3, r0
 8002426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 800242a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <calibrateRTC+0x9e>
		Error_Handler();
 8002432:	f000 fe6d 	bl	8003110 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	2200      	movs	r2, #0
 800243c:	4619      	mov	r1, r3
 800243e:	4803      	ldr	r0, [pc, #12]	; (800244c <calibrateRTC+0xb4>)
 8002440:	f7ff ff46 	bl	80022d0 <RTC_SetTime>

//	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
//	if (status != HAL_OK) {
//		Error_Handler();
//	}
}
 8002444:	bf00      	nop
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	240003d4 	.word	0x240003d4

08002450 <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
	send_ACK();
 8002456:	f000 f821 	bl	800249c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800245a:	480e      	ldr	r0, [pc, #56]	; (8002494 <sync+0x44>)
 800245c:	f00e f8d2 	bl	8010604 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002460:	2364      	movs	r3, #100	; 0x64
 8002462:	2209      	movs	r2, #9
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <sync+0x48>)
 8002466:	480b      	ldr	r0, [pc, #44]	; (8002494 <sync+0x44>)
 8002468:	f00d ff38 	bl	80102dc <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <sync+0x48>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2bff      	cmp	r3, #255	; 0xff
 8002476:	d1f3      	bne.n	8002460 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 8002478:	4807      	ldr	r0, [pc, #28]	; (8002498 <sync+0x48>)
 800247a:	f7ff ff8d 	bl	8002398 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800247e:	2201      	movs	r2, #1
 8002480:	4905      	ldr	r1, [pc, #20]	; (8002498 <sync+0x48>)
 8002482:	4804      	ldr	r0, [pc, #16]	; (8002494 <sync+0x44>)
 8002484:	f00d fff2 	bl	801046c <HAL_UART_Receive_IT>

	send_ACK();
 8002488:	f000 f808 	bl	800249c <send_ACK>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	24000638 	.word	0x24000638
 8002498:	24000c68 	.word	0x24000c68

0800249c <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <send_ACK+0x1c>)
 80024a2:	22ff      	movs	r2, #255	; 0xff
 80024a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80024a6:	2364      	movs	r3, #100	; 0x64
 80024a8:	2201      	movs	r2, #1
 80024aa:	4903      	ldr	r1, [pc, #12]	; (80024b8 <send_ACK+0x1c>)
 80024ac:	4803      	ldr	r0, [pc, #12]	; (80024bc <send_ACK+0x20>)
 80024ae:	f00d fe87 	bl	80101c0 <HAL_UART_Transmit>
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	24000ce8 	.word	0x24000ce8
 80024bc:	24000638 	.word	0x24000638

080024c0 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <HAL_UART_TxCpltCallback+0x1c>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	24000000 	.word	0x24000000

080024e0 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f014 fb15 	bl	8016b20 <malloc>
 80024f6:	4603      	mov	r3, r0
 80024f8:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	88fa      	ldrh	r2, [r7, #6]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	4618      	mov	r0, r3
 8002502:	f014 fb1d 	bl	8016b40 <memcpy>
	packet.size = size;
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	82bb      	strh	r3, [r7, #20]
	return packet;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	461a      	mov	r2, r3
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002516:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002528:	2100      	movs	r1, #0
 800252a:	481d      	ldr	r0, [pc, #116]	; (80025a0 <system_setup+0x7c>)
 800252c:	f00c fabe 	bl	800eaac <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8002530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002534:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800253a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800253e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002542:	4818      	ldr	r0, [pc, #96]	; (80025a4 <system_setup+0x80>)
 8002544:	f003 f876 	bl	8005634 <HAL_ADCEx_Calibration_Start>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800254e:	f000 fddf 	bl	8003110 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002552:	220b      	movs	r2, #11
 8002554:	4914      	ldr	r1, [pc, #80]	; (80025a8 <system_setup+0x84>)
 8002556:	4813      	ldr	r0, [pc, #76]	; (80025a4 <system_setup+0x80>)
 8002558:	f002 f94a 	bl	80047f0 <HAL_ADC_Start_DMA>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002562:	f000 fdd5 	bl	8003110 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002566:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800256a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800256e:	480f      	ldr	r0, [pc, #60]	; (80025ac <system_setup+0x88>)
 8002570:	f003 f860 	bl	8005634 <HAL_ADCEx_Calibration_Start>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800257a:	f000 fdc9 	bl	8003110 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800257e:	2204      	movs	r2, #4
 8002580:	490b      	ldr	r1, [pc, #44]	; (80025b0 <system_setup+0x8c>)
 8002582:	480a      	ldr	r0, [pc, #40]	; (80025ac <system_setup+0x88>)
 8002584:	f002 f934 	bl	80047f0 <HAL_ADC_Start_DMA>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800258e:	f000 fdbf 	bl	8003110 <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002592:	2201      	movs	r2, #1
 8002594:	4907      	ldr	r1, [pc, #28]	; (80025b4 <system_setup+0x90>)
 8002596:	4808      	ldr	r0, [pc, #32]	; (80025b8 <system_setup+0x94>)
 8002598:	f00d ff68 	bl	801046c <HAL_UART_Receive_IT>
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	240005ec 	.word	0x240005ec
 80025a4:	2400013c 	.word	0x2400013c
 80025a8:	24000cc0 	.word	0x24000cc0
 80025ac:	240001a0 	.word	0x240001a0
 80025b0:	24000ce0 	.word	0x24000ce0
 80025b4:	24000c68 	.word	0x24000c68
 80025b8:	24000638 	.word	0x24000638

080025bc <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 80025c8:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <get_uptime+0x88>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <get_uptime+0x8c>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <get_uptime+0x88>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d005      	beq.n	80025ea <get_uptime+0x2e>
		ms = uptime_millis;
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <get_uptime+0x88>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <get_uptime+0x8c>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025f0:	fb03 f202 	mul.w	r2, r3, r2
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <get_uptime+0x8c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4914      	ldr	r1, [pc, #80]	; (800264c <get_uptime+0x90>)
 80025fc:	fba1 1303 	umull	r1, r3, r1, r3
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	6939      	ldr	r1, [r7, #16]
 8002604:	fbb1 f3f3 	udiv	r3, r1, r3
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	0e1b      	lsrs	r3, r3, #24
 8002610:	b2da      	uxtb	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	0c1a      	lsrs	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3301      	adds	r3, #1
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	0a1a      	lsrs	r2, r3, #8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3302      	adds	r3, #2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3303      	adds	r3, #3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	24000c44 	.word	0x24000c44
 8002648:	e000e010 	.word	0xe000e010
 800264c:	10624dd3 	.word	0x10624dd3

08002650 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	2200      	movs	r2, #0
 800265e:	4619      	mov	r1, r3
 8002660:	4821      	ldr	r0, [pc, #132]	; (80026e8 <getTimestamp+0x98>)
 8002662:	f00b fb01 	bl	800dc68 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8002666:	f107 030c 	add.w	r3, r7, #12
 800266a:	2200      	movs	r2, #0
 800266c:	4619      	mov	r1, r3
 800266e:	481e      	ldr	r0, [pc, #120]	; (80026e8 <getTimestamp+0x98>)
 8002670:	f00b fbde 	bl	800de30 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2264      	movs	r2, #100	; 0x64
 8002678:	fb03 f202 	mul.w	r2, r3, r2
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <getTimestamp+0x9c>)
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3301      	adds	r3, #1
 800268c:	7b7a      	ldrb	r2, [r7, #13]
 800268e:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3302      	adds	r3, #2
 8002694:	7bba      	ldrb	r2, [r7, #14]
 8002696:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3303      	adds	r3, #3
 800269c:	7c3a      	ldrb	r2, [r7, #16]
 800269e:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	7c7a      	ldrb	r2, [r7, #17]
 80026a6:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3305      	adds	r3, #5
 80026ac:	7cba      	ldrb	r2, [r7, #18]
 80026ae:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	0e1a      	lsrs	r2, r3, #24
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3306      	adds	r3, #6
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	0c1a      	lsrs	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3307      	adds	r3, #7
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	0a1a      	lsrs	r2, r3, #8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3308      	adds	r3, #8
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3309      	adds	r3, #9
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]
}
 80026de:	bf00      	nop
 80026e0:	3728      	adds	r7, #40	; 0x28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	240003d4 	.word	0x240003d4
 80026ec:	000f4240 	.word	0x000f4240

080026f0 <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80026f6:	bf00      	nop
 80026f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026fc:	4833      	ldr	r0, [pc, #204]	; (80027cc <sample_pmt+0xdc>)
 80026fe:	f006 fdb9 	bl	8009274 <HAL_GPIO_ReadPin>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f7      	bne.n	80026f8 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002708:	200a      	movs	r0, #10
 800270a:	f014 fa09 	bl	8016b20 <malloc>
 800270e:	4603      	mov	r3, r0
 8002710:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002712:	2002      	movs	r0, #2
 8002714:	f014 fa04 	bl	8016b20 <malloc>
 8002718:	4603      	mov	r3, r0
 800271a:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800271c:	2004      	movs	r0, #4
 800271e:	f014 f9ff 	bl	8016b20 <malloc>
 8002722:	4603      	mov	r3, r0
 8002724:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7ff ff48 	bl	80025bc <get_uptime>

	receive_pmt_spi(pmt_spi);
 800272c:	6938      	ldr	r0, [r7, #16]
 800272e:	f7ff fbf9 	bl	8001f24 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	22bb      	movs	r2, #187	; 0xbb
 8002736:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3301      	adds	r3, #1
 800273c:	22bb      	movs	r2, #187	; 0xbb
 800273e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <sample_pmt+0xe0>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	b29a      	uxth	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3302      	adds	r3, #2
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <sample_pmt+0xe0>)
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3303      	adds	r3, #3
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3304      	adds	r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	7812      	ldrb	r2, [r2, #0]
 8002764:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3305      	adds	r3, #5
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	7852      	ldrb	r2, [r2, #1]
 800276e:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3306      	adds	r3, #6
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3307      	adds	r3, #7
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	7852      	ldrb	r2, [r2, #1]
 8002782:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3308      	adds	r3, #8
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	7892      	ldrb	r2, [r2, #2]
 800278c:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3309      	adds	r3, #9
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	78d2      	ldrb	r2, [r2, #3]
 8002796:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	220a      	movs	r2, #10
 800279c:	6979      	ldr	r1, [r7, #20]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fe9e 	bl	80024e0 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <sample_pmt+0xe4>)
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	1d39      	adds	r1, r7, #4
 80027aa:	2300      	movs	r3, #0
 80027ac:	2200      	movs	r2, #0
 80027ae:	f010 ff57 	bl	8013660 <osMessageQueuePut>
	free(buffer);
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f014 f9bc 	bl	8016b30 <free>
	free(pmt_spi);
 80027b8:	6938      	ldr	r0, [r7, #16]
 80027ba:	f014 f9b9 	bl	8016b30 <free>
	free(uptime);
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f014 f9b6 	bl	8016b30 <free>
}
 80027c4:	bf00      	nop
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	58020000 	.word	0x58020000
 80027d0:	24000c54 	.word	0x24000c54
 80027d4:	24000c48 	.word	0x24000c48

080027d8 <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80027de:	bf00      	nop
 80027e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027e4:	4848      	ldr	r0, [pc, #288]	; (8002908 <sample_erpa+0x130>)
 80027e6:	f006 fd45 	bl	8009274 <HAL_GPIO_ReadPin>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f7      	bne.n	80027e0 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80027f0:	200e      	movs	r0, #14
 80027f2:	f014 f995 	bl	8016b20 <malloc>
 80027f6:	4603      	mov	r3, r0
 80027f8:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80027fa:	2002      	movs	r0, #2
 80027fc:	f014 f990 	bl	8016b20 <malloc>
 8002800:	4603      	mov	r3, r0
 8002802:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002804:	2002      	movs	r0, #2
 8002806:	f014 f98b 	bl	8016b20 <malloc>
 800280a:	4603      	mov	r3, r0
 800280c:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800280e:	2004      	movs	r0, #4
 8002810:	f014 f986 	bl	8016b20 <malloc>
 8002814:	4603      	mov	r3, r0
 8002816:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002818:	23ff      	movs	r3, #255	; 0xff
 800281a:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 800281c:	6938      	ldr	r0, [r7, #16]
 800281e:	f7ff fecd 	bl	80025bc <get_uptime>
	sweep_step = get_current_step();
 8002822:	f7ff fce3 	bl	80021ec <get_current_step>
 8002826:	4603      	mov	r3, r0
 8002828:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 800282a:	69b8      	ldr	r0, [r7, #24]
 800282c:	f7ff fb9e 	bl	8001f6c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f7ff fbbf 	bl	8001fb4 <receive_erpa_adc>


	buffer[0] = ERPA_SYNC;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	22aa      	movs	r2, #170	; 0xaa
 800283a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3301      	adds	r3, #1
 8002840:	22aa      	movs	r2, #170	; 0xaa
 8002842:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002844:	4b31      	ldr	r3, [pc, #196]	; (800290c <sample_erpa+0x134>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0c1a      	lsrs	r2, r3, #16
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3302      	adds	r3, #2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <sample_erpa+0x134>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	0a1a      	lsrs	r2, r3, #8
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3303      	adds	r3, #3
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <sample_erpa+0x134>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3304      	adds	r3, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3305      	adds	r3, #5
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	b29a      	uxth	r2, r3
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	3306      	adds	r3, #6
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	3307      	adds	r3, #7
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3308      	adds	r3, #8
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	7812      	ldrb	r2, [r2, #0]
 8002898:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3309      	adds	r3, #9
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	7852      	ldrb	r2, [r2, #1]
 80028a2:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	330a      	adds	r3, #10
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	7812      	ldrb	r2, [r2, #0]
 80028ac:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	330b      	adds	r3, #11
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	7852      	ldrb	r2, [r2, #1]
 80028b6:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	330c      	adds	r3, #12
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	7892      	ldrb	r2, [r2, #2]
 80028c0:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	330d      	adds	r3, #13
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	78d2      	ldrb	r2, [r2, #3]
 80028ca:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	220e      	movs	r2, #14
 80028d0:	69f9      	ldr	r1, [r7, #28]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fe04 	bl	80024e0 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <sample_erpa+0x138>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	1d39      	adds	r1, r7, #4
 80028de:	2300      	movs	r3, #0
 80028e0:	2200      	movs	r2, #0
 80028e2:	f010 febd 	bl	8013660 <osMessageQueuePut>
	free(buffer);
 80028e6:	69f8      	ldr	r0, [r7, #28]
 80028e8:	f014 f922 	bl	8016b30 <free>
	free(erpa_spi);
 80028ec:	69b8      	ldr	r0, [r7, #24]
 80028ee:	f014 f91f 	bl	8016b30 <free>
	free(erpa_adc);
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f014 f91c 	bl	8016b30 <free>
	free(uptime);
 80028f8:	6938      	ldr	r0, [r7, #16]
 80028fa:	f014 f919 	bl	8016b30 <free>
}
 80028fe:	bf00      	nop
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	58020400 	.word	0x58020400
 800290c:	24000c58 	.word	0x24000c58
 8002910:	24000c48 	.word	0x24000c48

08002914 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 800291a:	2032      	movs	r0, #50	; 0x32
 800291c:	f014 f900 	bl	8016b20 <malloc>
 8002920:	4603      	mov	r3, r0
 8002922:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002924:	2008      	movs	r0, #8
 8002926:	f014 f8fb 	bl	8016b20 <malloc>
 800292a:	4603      	mov	r3, r0
 800292c:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 800292e:	200a      	movs	r0, #10
 8002930:	f014 f8f6 	bl	8016b20 <malloc>
 8002934:	4603      	mov	r3, r0
 8002936:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff fe89 	bl	8002650 <getTimestamp>


	if (TEMPERATURE_COUNTER > 999) {
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <sample_hk+0x78>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002946:	db25      	blt.n	8002994 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002948:	6938      	ldr	r0, [r7, #16]
 800294a:	f7ff fb45 	bl	8001fd8 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <sample_hk+0x7c>)
 8002958:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	3302      	adds	r3, #2
 800295e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002962:	b29a      	uxth	r2, r3
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <sample_hk+0x7c>)
 8002966:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	3304      	adds	r3, #4
 800296c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002970:	b29a      	uxth	r2, r3
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <sample_hk+0x7c>)
 8002974:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	3306      	adds	r3, #6
 800297a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297e:	b29a      	uxth	r2, r3
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <sample_hk+0x7c>)
 8002982:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002984:	4b01      	ldr	r3, [pc, #4]	; (800298c <sample_hk+0x78>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e01f      	b.n	80029cc <sample_hk+0xb8>
 800298c:	24000004 	.word	0x24000004
 8002990:	24000cec 	.word	0x24000cec
	} else {
		TEMPERATURE_COUNTER++;
 8002994:	4b9f      	ldr	r3, [pc, #636]	; (8002c14 <sample_hk+0x300>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	4a9e      	ldr	r2, [pc, #632]	; (8002c14 <sample_hk+0x300>)
 800299c:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 800299e:	4b9e      	ldr	r3, [pc, #632]	; (8002c18 <sample_hk+0x304>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80029a8:	4b9b      	ldr	r3, [pc, #620]	; (8002c18 <sample_hk+0x304>)
 80029aa:	885a      	ldrh	r2, [r3, #2]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	3302      	adds	r3, #2
 80029b0:	b212      	sxth	r2, r2
 80029b2:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80029b4:	4b98      	ldr	r3, [pc, #608]	; (8002c18 <sample_hk+0x304>)
 80029b6:	889a      	ldrh	r2, [r3, #4]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	3304      	adds	r3, #4
 80029bc:	b212      	sxth	r2, r2
 80029be:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80029c0:	4b95      	ldr	r3, [pc, #596]	; (8002c18 <sample_hk+0x304>)
 80029c2:	88da      	ldrh	r2, [r3, #6]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	3306      	adds	r3, #6
 80029c8:	b212      	sxth	r2, r2
 80029ca:	801a      	strh	r2, [r3, #0]
	}

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	22cc      	movs	r2, #204	; 0xcc
 80029d0:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3301      	adds	r3, #1
 80029d6:	22cc      	movs	r2, #204	; 0xcc
 80029d8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80029da:	4b90      	ldr	r3, [pc, #576]	; (8002c1c <sample_hk+0x308>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3302      	adds	r3, #2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80029ea:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <sample_hk+0x308>)
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3303      	adds	r3, #3
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 80029f6:	4b8a      	ldr	r3, [pc, #552]	; (8002c20 <sample_hk+0x30c>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3304      	adds	r3, #4
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 8002a06:	4b86      	ldr	r3, [pc, #536]	; (8002c20 <sample_hk+0x30c>)
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3305      	adds	r3, #5
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 8002a12:	4b84      	ldr	r3, [pc, #528]	; (8002c24 <sample_hk+0x310>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3306      	adds	r3, #6
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 8002a22:	4b80      	ldr	r3, [pc, #512]	; (8002c24 <sample_hk+0x310>)
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3307      	adds	r3, #7
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a34:	121a      	asrs	r2, r3, #8
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3308      	adds	r3, #8
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3309      	adds	r3, #9
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	3302      	adds	r3, #2
 8002a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a54:	121a      	asrs	r2, r3, #8
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	330a      	adds	r3, #10
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	3302      	adds	r3, #2
 8002a62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	330b      	adds	r3, #11
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	3304      	adds	r3, #4
 8002a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a76:	121a      	asrs	r2, r3, #8
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	3304      	adds	r3, #4
 8002a84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	330d      	adds	r3, #13
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	3306      	adds	r3, #6
 8002a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a98:	121a      	asrs	r2, r3, #8
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	330e      	adds	r3, #14
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	3306      	adds	r3, #6
 8002aa6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	330f      	adds	r3, #15
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002ab2:	4b5d      	ldr	r3, [pc, #372]	; (8002c28 <sample_hk+0x314>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3310      	adds	r3, #16
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002ac2:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <sample_hk+0x314>)
 8002ac4:	881a      	ldrh	r2, [r3, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3311      	adds	r3, #17
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 8002ace:	4b57      	ldr	r3, [pc, #348]	; (8002c2c <sample_hk+0x318>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3312      	adds	r3, #18
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 8002ade:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <sample_hk+0x318>)
 8002ae0:	881a      	ldrh	r2, [r3, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3313      	adds	r3, #19
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002aea:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <sample_hk+0x31c>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3314      	adds	r3, #20
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002afa:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <sample_hk+0x31c>)
 8002afc:	881a      	ldrh	r2, [r3, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3315      	adds	r3, #21
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002b06:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <sample_hk+0x320>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3316      	adds	r3, #22
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <sample_hk+0x320>)
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3317      	adds	r3, #23
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002b22:	4b45      	ldr	r3, [pc, #276]	; (8002c38 <sample_hk+0x324>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3318      	adds	r3, #24
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <sample_hk+0x324>)
 8002b34:	881a      	ldrh	r2, [r3, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3319      	adds	r3, #25
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <sample_hk+0x328>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	331a      	adds	r3, #26
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <sample_hk+0x328>)
 8002b50:	881a      	ldrh	r2, [r3, #0]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	331b      	adds	r3, #27
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <sample_hk+0x32c>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	331c      	adds	r3, #28
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002b6a:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <sample_hk+0x32c>)
 8002b6c:	881a      	ldrh	r2, [r3, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	331d      	adds	r3, #29
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002b76:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <sample_hk+0x330>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	331e      	adds	r3, #30
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002b86:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <sample_hk+0x330>)
 8002b88:	881a      	ldrh	r2, [r3, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	331f      	adds	r3, #31
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <sample_hk+0x334>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3320      	adds	r3, #32
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <sample_hk+0x334>)
 8002ba4:	881a      	ldrh	r2, [r3, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3321      	adds	r3, #33	; 0x21
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 8002bae:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <sample_hk+0x338>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3322      	adds	r3, #34	; 0x22
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 8002bbe:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <sample_hk+0x338>)
 8002bc0:	881a      	ldrh	r2, [r3, #0]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3323      	adds	r3, #35	; 0x23
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002bca:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <sample_hk+0x33c>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3324      	adds	r3, #36	; 0x24
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <sample_hk+0x33c>)
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3325      	adds	r3, #37	; 0x25
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <sample_hk+0x340>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3326      	adds	r3, #38	; 0x26
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <sample_hk+0x340>)
 8002bf8:	881a      	ldrh	r2, [r3, #0]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3327      	adds	r3, #39	; 0x27
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

	buffer[40] = timestamp[0];
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3328      	adds	r3, #40	; 0x28
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	7812      	ldrb	r2, [r2, #0]
 8002c0a:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	3329      	adds	r3, #41	; 0x29
 8002c10:	e022      	b.n	8002c58 <sample_hk+0x344>
 8002c12:	bf00      	nop
 8002c14:	24000004 	.word	0x24000004
 8002c18:	24000cec 	.word	0x24000cec
 8002c1c:	24000c5c 	.word	0x24000c5c
 8002c20:	24000c26 	.word	0x24000c26
 8002c24:	24000c28 	.word	0x24000c28
 8002c28:	24000c2a 	.word	0x24000c2a
 8002c2c:	24000c2c 	.word	0x24000c2c
 8002c30:	24000c2e 	.word	0x24000c2e
 8002c34:	24000c30 	.word	0x24000c30
 8002c38:	24000c32 	.word	0x24000c32
 8002c3c:	24000c34 	.word	0x24000c34
 8002c40:	24000c36 	.word	0x24000c36
 8002c44:	24000c38 	.word	0x24000c38
 8002c48:	24000c3a 	.word	0x24000c3a
 8002c4c:	24000c3c 	.word	0x24000c3c
 8002c50:	24000c3e 	.word	0x24000c3e
 8002c54:	24000c40 	.word	0x24000c40
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	7852      	ldrb	r2, [r2, #1]
 8002c5c:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	332a      	adds	r3, #42	; 0x2a
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	7892      	ldrb	r2, [r2, #2]
 8002c66:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	332b      	adds	r3, #43	; 0x2b
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	78d2      	ldrb	r2, [r2, #3]
 8002c70:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	332c      	adds	r3, #44	; 0x2c
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	7912      	ldrb	r2, [r2, #4]
 8002c7a:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	332d      	adds	r3, #45	; 0x2d
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	7952      	ldrb	r2, [r2, #5]
 8002c84:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	332e      	adds	r3, #46	; 0x2e
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	7992      	ldrb	r2, [r2, #6]
 8002c8e:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	332f      	adds	r3, #47	; 0x2f
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	79d2      	ldrb	r2, [r2, #7]
 8002c98:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	3330      	adds	r3, #48	; 0x30
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	7a12      	ldrb	r2, [r2, #8]
 8002ca2:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3331      	adds	r3, #49	; 0x31
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	7a52      	ldrb	r2, [r2, #9]
 8002cac:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	2232      	movs	r2, #50	; 0x32
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fc13 	bl	80024e0 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <sample_hk+0x3d0>)
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	1d39      	adds	r1, r7, #4
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f010 fccc 	bl	8013660 <osMessageQueuePut>

	free(buffer);
 8002cc8:	6978      	ldr	r0, [r7, #20]
 8002cca:	f013 ff31 	bl	8016b30 <free>
	free(hk_i2c);
 8002cce:	6938      	ldr	r0, [r7, #16]
 8002cd0:	f013 ff2e 	bl	8016b30 <free>
	free(timestamp);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f013 ff2b 	bl	8016b30 <free>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	24000c48 	.word	0x24000c48

08002ce8 <PMT_init>:
 * @brief  Function implementing the PMT_task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <PMT_init+0x38>)
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	f010 fbd7 	bl	80134ae <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <PMT_init+0x3c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <PMT_init+0x30>
			sample_pmt();
 8002d08:	f7ff fcf2 	bl	80026f0 <sample_pmt>
			pmt_seq++;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <PMT_init+0x40>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <PMT_init+0x40>)
 8002d16:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002d18:	f010 fa96 	bl	8013248 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002d1c:	e7e8      	b.n	8002cf0 <PMT_init+0x8>
 8002d1e:	bf00      	nop
 8002d20:	24000c64 	.word	0x24000c64
 8002d24:	24000c5e 	.word	0x24000c5e
 8002d28:	24000c54 	.word	0x24000c54

08002d2c <ERPA_init>:
 * @brief Function implementing the ERPA_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <ERPA_init+0x34>)
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2102      	movs	r1, #2
 8002d40:	f010 fbb5 	bl	80134ae <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <ERPA_init+0x38>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <ERPA_init+0x2e>
			sample_erpa();
 8002d4c:	f7ff fd44 	bl	80027d8 <sample_erpa>
			erpa_seq++;
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <ERPA_init+0x3c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <ERPA_init+0x3c>)
 8002d58:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002d5a:	f010 fa75 	bl	8013248 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002d5e:	e7e9      	b.n	8002d34 <ERPA_init+0x8>
 8002d60:	24000c64 	.word	0x24000c64
 8002d64:	24000c5f 	.word	0x24000c5f
 8002d68:	24000c58 	.word	0x24000c58

08002d6c <HK_init>:
 * @brief Function implementing the HK_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HK_init+0x38>)
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2104      	movs	r1, #4
 8002d80:	f010 fb95 	bl	80134ae <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HK_init+0x3c>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HK_init+0x30>
			sample_hk();
 8002d8c:	f7ff fdc2 	bl	8002914 <sample_hk>
			hk_seq++;
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HK_init+0x40>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <HK_init+0x40>)
 8002d9a:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002d9c:	f010 fa54 	bl	8013248 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002da0:	e7e8      	b.n	8002d74 <HK_init+0x8>
 8002da2:	bf00      	nop
 8002da4:	24000c64 	.word	0x24000c64
 8002da8:	24000c60 	.word	0x24000c60
 8002dac:	24000c5c 	.word	0x24000c5c

08002db0 <GPIO_on_init>:
 * @brief Function implementing the GPIO_on_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002db8:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <GPIO_on_init+0x9c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f010 fa63 	bl	8013288 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <GPIO_on_init+0xa0>)
 8002dc4:	2104      	movs	r1, #4
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f006 fa6b 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dce:	2064      	movs	r0, #100	; 0x64
 8002dd0:	f010 fa7b 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002dd4:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <GPIO_on_init+0xa0>)
 8002dd6:	2120      	movs	r1, #32
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f006 fa62 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002de0:	2064      	movs	r0, #100	; 0x64
 8002de2:	f010 fa72 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <GPIO_on_init+0xa4>)
 8002de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dec:	2201      	movs	r2, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f006 fa58 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002df4:	2064      	movs	r0, #100	; 0x64
 8002df6:	f010 fa68 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002dfa:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <GPIO_on_init+0xa4>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f006 fa4f 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e06:	2064      	movs	r0, #100	; 0x64
 8002e08:	f010 fa5f 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <GPIO_on_init+0xa4>)
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	2201      	movs	r2, #1
 8002e12:	4618      	mov	r0, r3
 8002e14:	f006 fa46 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e18:	2064      	movs	r0, #100	; 0x64
 8002e1a:	f010 fa56 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <GPIO_on_init+0xa4>)
 8002e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e24:	2201      	movs	r2, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f006 fa3c 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e2c:	2064      	movs	r0, #100	; 0x64
 8002e2e:	f010 fa4c 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <GPIO_on_init+0xa4>)
 8002e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f006 fa32 	bl	80092a4 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002e40:	4b02      	ldr	r3, [pc, #8]	; (8002e4c <GPIO_on_init+0x9c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f010 fa1f 	bl	8013288 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002e4a:	e7ba      	b.n	8002dc2 <GPIO_on_init+0x12>
 8002e4c:	24000750 	.word	0x24000750
 8002e50:	58020400 	.word	0x58020400
 8002e54:	58020800 	.word	0x58020800

08002e58 <GPIO_off_init>:
 * @brief Function implementing the GPIO_off_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002e60:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <GPIO_off_init+0x9c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f010 fa0f 	bl	8013288 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <GPIO_off_init+0xa0>)
 8002e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e70:	2200      	movs	r2, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f006 fa16 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e78:	2064      	movs	r0, #100	; 0x64
 8002e7a:	f010 fa26 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <GPIO_off_init+0xa0>)
 8002e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e84:	2200      	movs	r2, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f006 fa0c 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e8c:	2064      	movs	r0, #100	; 0x64
 8002e8e:	f010 fa1c 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <GPIO_off_init+0xa0>)
 8002e94:	2140      	movs	r1, #64	; 0x40
 8002e96:	2200      	movs	r2, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f006 fa03 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e9e:	2064      	movs	r0, #100	; 0x64
 8002ea0:	f010 fa13 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <GPIO_off_init+0xa0>)
 8002ea6:	2180      	movs	r1, #128	; 0x80
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f006 f9fa 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002eb0:	2064      	movs	r0, #100	; 0x64
 8002eb2:	f010 fa0a 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <GPIO_off_init+0xa0>)
 8002eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f006 f9f0 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ec4:	2064      	movs	r0, #100	; 0x64
 8002ec6:	f010 fa00 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <GPIO_off_init+0xa4>)
 8002ecc:	2120      	movs	r1, #32
 8002ece:	2200      	movs	r2, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f006 f9e7 	bl	80092a4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ed6:	2064      	movs	r0, #100	; 0x64
 8002ed8:	f010 f9f7 	bl	80132ca <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <GPIO_off_init+0xa4>)
 8002ede:	2104      	movs	r1, #4
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f006 f9de 	bl	80092a4 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002ee8:	4b02      	ldr	r3, [pc, #8]	; (8002ef4 <GPIO_off_init+0x9c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f010 f9cb 	bl	8013288 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002ef2:	e7ba      	b.n	8002e6a <GPIO_off_init+0x12>
 8002ef4:	240009b0 	.word	0x240009b0
 8002ef8:	58020800 	.word	0x58020800
 8002efc:	58020400 	.word	0x58020400

08002f00 <UART_TX_init>:
 * and transmitting data as long as the task is running.
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <UART_TX_init+0xa4>)
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f18:	2200      	movs	r2, #0
 8002f1a:	4923      	ldr	r1, [pc, #140]	; (8002fa8 <UART_TX_init+0xa8>)
 8002f1c:	f010 fc00 	bl	8013720 <osMessageQueueGet>
 8002f20:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d121      	bne.n	8002f6c <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002f28:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <UART_TX_init+0xa8>)
 8002f2a:	889b      	ldrh	r3, [r3, #4]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f36:	d219      	bcs.n	8002f6c <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <UART_TX_init+0xac>)
 8002f3c:	4413      	add	r3, r2
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <UART_TX_init+0xa8>)
 8002f40:	6811      	ldr	r1, [r2, #0]
 8002f42:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <UART_TX_init+0xa8>)
 8002f44:	8892      	ldrh	r2, [r2, #4]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f013 fdfa 	bl	8016b40 <memcpy>
					free(msg.array);
 8002f4c:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <UART_TX_init+0xa8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f013 fded 	bl	8016b30 <free>
					total_size += msg.size;
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <UART_TX_init+0xa8>)
 8002f58:	889b      	ldrh	r3, [r3, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f240 32b5 	movw	r2, #949	; 0x3b5
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d803      	bhi.n	8002f74 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ce      	beq.n	8002f10 <UART_TX_init+0x10>
 8002f72:	e000      	b.n	8002f76 <UART_TX_init+0x76>
						break;
 8002f74:	bf00      	nop

		if (total_size > 0) {
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	490a      	ldr	r1, [pc, #40]	; (8002fac <UART_TX_init+0xac>)
 8002f84:	480a      	ldr	r0, [pc, #40]	; (8002fb0 <UART_TX_init+0xb0>)
 8002f86:	f00d fabd 	bl	8010504 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002f8a:	e001      	b.n	8002f90 <UART_TX_init+0x90>
				osThreadYield();
 8002f8c:	f010 f95c 	bl	8013248 <osThreadYield>
			while (tx_flag == 0) {
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <UART_TX_init+0xb4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f9      	beq.n	8002f8c <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <UART_TX_init+0xb4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002f9e:	f010 f953 	bl	8013248 <osThreadYield>
		total_size = 0;
 8002fa2:	e7b3      	b.n	8002f0c <UART_TX_init+0xc>
 8002fa4:	24000c48 	.word	0x24000c48
 8002fa8:	24000c4c 	.word	0x24000c4c
 8002fac:	24000cf4 	.word	0x24000cf4
 8002fb0:	24000638 	.word	0x24000638
 8002fb4:	24000000 	.word	0x24000000

08002fb8 <Voltage_Monitor_init>:
 * @brief Function implementing the Voltage_Monitor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002fc0:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <Voltage_Monitor_init+0xbc>)
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2108      	movs	r1, #8
 8002fcc:	f010 fa6f 	bl	80134ae <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002fd0:	2014      	movs	r0, #20
 8002fd2:	f013 fda5 	bl	8016b20 <malloc>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002fda:	2008      	movs	r0, #8
 8002fdc:	f013 fda0 	bl	8016b20 <malloc>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff f827 	bl	8002038 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002fea:	68b8      	ldr	r0, [r7, #8]
 8002fec:	f7ff f876 	bl	80020dc <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	885a      	ldrh	r2, [r3, #2]
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <Voltage_Monitor_init+0xc0>)
 8002ff6:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	881a      	ldrh	r2, [r3, #0]
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	; (800307c <Voltage_Monitor_init+0xc4>)
 8002ffe:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	881a      	ldrh	r2, [r3, #0]
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <Voltage_Monitor_init+0xc8>)
 8003006:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	885a      	ldrh	r2, [r3, #2]
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <Voltage_Monitor_init+0xcc>)
 800300e:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	889a      	ldrh	r2, [r3, #4]
 8003014:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <Voltage_Monitor_init+0xd0>)
 8003016:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	88da      	ldrh	r2, [r3, #6]
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <Voltage_Monitor_init+0xd4>)
 800301e:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	899a      	ldrh	r2, [r3, #12]
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <Voltage_Monitor_init+0xd8>)
 8003026:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88da      	ldrh	r2, [r3, #6]
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <Voltage_Monitor_init+0xdc>)
 800302e:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	889a      	ldrh	r2, [r3, #4]
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <Voltage_Monitor_init+0xe0>)
 8003036:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	89da      	ldrh	r2, [r3, #14]
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <Voltage_Monitor_init+0xe4>)
 800303e:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8a1a      	ldrh	r2, [r3, #16]
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <Voltage_Monitor_init+0xe8>)
 8003046:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	891a      	ldrh	r2, [r3, #8]
 800304c:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <Voltage_Monitor_init+0xec>)
 800304e:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	895a      	ldrh	r2, [r3, #10]
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <Voltage_Monitor_init+0xf0>)
 8003056:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8a5a      	ldrh	r2, [r3, #18]
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <Voltage_Monitor_init+0xf4>)
 800305e:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f013 fd65 	bl	8016b30 <free>
		free(hk_adc3);
 8003066:	68b8      	ldr	r0, [r7, #8]
 8003068:	f013 fd62 	bl	8016b30 <free>

		osThreadYield();
 800306c:	f010 f8ec 	bl	8013248 <osThreadYield>
	for (;;) {
 8003070:	e7a6      	b.n	8002fc0 <Voltage_Monitor_init+0x8>
 8003072:	bf00      	nop
 8003074:	24000c64 	.word	0x24000c64
 8003078:	24000c26 	.word	0x24000c26
 800307c:	24000c28 	.word	0x24000c28
 8003080:	24000c2a 	.word	0x24000c2a
 8003084:	24000c2c 	.word	0x24000c2c
 8003088:	24000c2e 	.word	0x24000c2e
 800308c:	24000c30 	.word	0x24000c30
 8003090:	24000c32 	.word	0x24000c32
 8003094:	24000c34 	.word	0x24000c34
 8003098:	24000c36 	.word	0x24000c36
 800309c:	24000c38 	.word	0x24000c38
 80030a0:	24000c3a 	.word	0x24000c3a
 80030a4:	24000c3c 	.word	0x24000c3c
 80030a8:	24000c3e 	.word	0x24000c3e
 80030ac:	24000c40 	.word	0x24000c40

080030b0 <FLAG_init>:
 * @brief Function implementing the FLAG_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <FLAG_init+0x38>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f010 f9d5 	bl	801346c <osEventFlagsGet>
 80030c2:	4603      	mov	r3, r0
 80030c4:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0316 	and.w	r3, r3, #22
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <FLAG_init+0x38>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2116      	movs	r1, #22
 80030d6:	4618      	mov	r0, r3
 80030d8:	f010 f996 	bl	8013408 <osEventFlagsClear>
			enter_stop();
 80030dc:	f7ff f8e8 	bl	80022b0 <enter_stop>
		}
		osDelay(1);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f010 f8f2 	bl	80132ca <osDelay>
	for (;;) {
 80030e6:	e7e7      	b.n	80030b8 <FLAG_init+0x8>
 80030e8:	24000c64 	.word	0x24000c64

080030ec <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80030fe:	f000 ff85 	bl	800400c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40001000 	.word	0x40001000

08003110 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003114:	b672      	cpsid	i
}
 8003116:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003118:	e7fe      	b.n	8003118 <Error_Handler+0x8>
	...

0800311c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_MspInit+0x38>)
 8003124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_MspInit+0x38>)
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_MspInit+0x38>)
 8003134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003140:	2200      	movs	r2, #0
 8003142:	210f      	movs	r1, #15
 8003144:	f06f 0001 	mvn.w	r0, #1
 8003148:	f002 fc6e 	bl	8005a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	58024400 	.word	0x58024400

08003158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08e      	sub	sp, #56	; 0x38
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a7b      	ldr	r2, [pc, #492]	; (8003364 <HAL_ADC_MspInit+0x20c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	f040 8091 	bne.w	800329e <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800317c:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <HAL_ADC_MspInit+0x210>)
 800317e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003182:	4a79      	ldr	r2, [pc, #484]	; (8003368 <HAL_ADC_MspInit+0x210>)
 8003184:	f043 0320 	orr.w	r3, r3, #32
 8003188:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800318c:	4b76      	ldr	r3, [pc, #472]	; (8003368 <HAL_ADC_MspInit+0x210>)
 800318e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800319a:	4b73      	ldr	r3, [pc, #460]	; (8003368 <HAL_ADC_MspInit+0x210>)
 800319c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a0:	4a71      	ldr	r2, [pc, #452]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031aa:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80031ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b8:	4b6b      	ldr	r3, [pc, #428]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80031ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031be:	4a6a      	ldr	r2, [pc, #424]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c8:	4b67      	ldr	r3, [pc, #412]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80031ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d6:	4b64      	ldr	r3, [pc, #400]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80031d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031dc:	4a62      	ldr	r2, [pc, #392]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e6:	4b60      	ldr	r3, [pc, #384]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80031e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80031f4:	2333      	movs	r3, #51	; 0x33
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031f8:	2303      	movs	r3, #3
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003204:	4619      	mov	r1, r3
 8003206:	4859      	ldr	r0, [pc, #356]	; (800336c <HAL_ADC_MspInit+0x214>)
 8003208:	f005 fe84 	bl	8008f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800320c:	23ce      	movs	r3, #206	; 0xce
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003210:	2303      	movs	r3, #3
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321c:	4619      	mov	r1, r3
 800321e:	4854      	ldr	r0, [pc, #336]	; (8003370 <HAL_ADC_MspInit+0x218>)
 8003220:	f005 fe78 	bl	8008f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003224:	2303      	movs	r3, #3
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003228:	2303      	movs	r3, #3
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003234:	4619      	mov	r1, r3
 8003236:	484f      	ldr	r0, [pc, #316]	; (8003374 <HAL_ADC_MspInit+0x21c>)
 8003238:	f005 fe6c 	bl	8008f14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800323c:	4b4e      	ldr	r3, [pc, #312]	; (8003378 <HAL_ADC_MspInit+0x220>)
 800323e:	4a4f      	ldr	r2, [pc, #316]	; (800337c <HAL_ADC_MspInit+0x224>)
 8003240:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003242:	4b4d      	ldr	r3, [pc, #308]	; (8003378 <HAL_ADC_MspInit+0x220>)
 8003244:	2209      	movs	r2, #9
 8003246:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003248:	4b4b      	ldr	r3, [pc, #300]	; (8003378 <HAL_ADC_MspInit+0x220>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800324e:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_ADC_MspInit+0x220>)
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003254:	4b48      	ldr	r3, [pc, #288]	; (8003378 <HAL_ADC_MspInit+0x220>)
 8003256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800325c:	4b46      	ldr	r3, [pc, #280]	; (8003378 <HAL_ADC_MspInit+0x220>)
 800325e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003262:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003264:	4b44      	ldr	r3, [pc, #272]	; (8003378 <HAL_ADC_MspInit+0x220>)
 8003266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800326a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800326c:	4b42      	ldr	r3, [pc, #264]	; (8003378 <HAL_ADC_MspInit+0x220>)
 800326e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003272:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003274:	4b40      	ldr	r3, [pc, #256]	; (8003378 <HAL_ADC_MspInit+0x220>)
 8003276:	2200      	movs	r2, #0
 8003278:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800327a:	4b3f      	ldr	r3, [pc, #252]	; (8003378 <HAL_ADC_MspInit+0x220>)
 800327c:	2200      	movs	r2, #0
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003280:	483d      	ldr	r0, [pc, #244]	; (8003378 <HAL_ADC_MspInit+0x220>)
 8003282:	f002 ffff 	bl	8006284 <HAL_DMA_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 800328c:	f7ff ff40 	bl	8003110 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a39      	ldr	r2, [pc, #228]	; (8003378 <HAL_ADC_MspInit+0x220>)
 8003294:	64da      	str	r2, [r3, #76]	; 0x4c
 8003296:	4a38      	ldr	r2, [pc, #224]	; (8003378 <HAL_ADC_MspInit+0x220>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800329c:	e05e      	b.n	800335c <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a37      	ldr	r2, [pc, #220]	; (8003380 <HAL_ADC_MspInit+0x228>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d159      	bne.n	800335c <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80032a8:	4b2f      	ldr	r3, [pc, #188]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80032aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ae:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80032b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b8:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80032ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c6:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80032c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032cc:	4a26      	ldr	r2, [pc, #152]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d6:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_ADC_MspInit+0x210>)
 80032d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80032e4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80032e8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80032ec:	f000 feba 	bl	8004064 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80032f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80032f4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80032f8:	f000 feb4 	bl	8004064 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 80032fe:	4a22      	ldr	r2, [pc, #136]	; (8003388 <HAL_ADC_MspInit+0x230>)
 8003300:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 8003304:	2273      	movs	r2, #115	; 0x73
 8003306:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003308:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 8003310:	2200      	movs	r2, #0
 8003312:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 8003316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 800331e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003322:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 8003326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800332a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800332c:	4b15      	ldr	r3, [pc, #84]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 800332e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003332:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 8003336:	2200      	movs	r2, #0
 8003338:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 800333c:	2200      	movs	r2, #0
 800333e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003340:	4810      	ldr	r0, [pc, #64]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 8003342:	f002 ff9f 	bl	8006284 <HAL_DMA_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 800334c:	f7ff fee0 	bl	8003110 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 8003354:	64da      	str	r2, [r3, #76]	; 0x4c
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <HAL_ADC_MspInit+0x22c>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800335c:	bf00      	nop
 800335e:	3738      	adds	r7, #56	; 0x38
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40022000 	.word	0x40022000
 8003368:	58024400 	.word	0x58024400
 800336c:	58020800 	.word	0x58020800
 8003370:	58020000 	.word	0x58020000
 8003374:	58020400 	.word	0x58020400
 8003378:	24000204 	.word	0x24000204
 800337c:	40020010 	.word	0x40020010
 8003380:	58026000 	.word	0x58026000
 8003384:	2400027c 	.word	0x2400027c
 8003388:	40020028 	.word	0x40020028

0800338c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	; 0x28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a34      	ldr	r2, [pc, #208]	; (800347c <HAL_DAC_MspInit+0xf0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d161      	bne.n	8003472 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80033ae:	4b34      	ldr	r3, [pc, #208]	; (8003480 <HAL_DAC_MspInit+0xf4>)
 80033b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b4:	4a32      	ldr	r2, [pc, #200]	; (8003480 <HAL_DAC_MspInit+0xf4>)
 80033b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033be:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_DAC_MspInit+0xf4>)
 80033c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033cc:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <HAL_DAC_MspInit+0xf4>)
 80033ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d2:	4a2b      	ldr	r2, [pc, #172]	; (8003480 <HAL_DAC_MspInit+0xf4>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_DAC_MspInit+0xf4>)
 80033de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033ea:	2310      	movs	r3, #16
 80033ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ee:	2303      	movs	r3, #3
 80033f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f6:	f107 0314 	add.w	r3, r7, #20
 80033fa:	4619      	mov	r1, r3
 80033fc:	4821      	ldr	r0, [pc, #132]	; (8003484 <HAL_DAC_MspInit+0xf8>)
 80033fe:	f005 fd89 	bl	8008f14 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8003402:	4b21      	ldr	r3, [pc, #132]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 8003404:	4a21      	ldr	r2, [pc, #132]	; (800348c <HAL_DAC_MspInit+0x100>)
 8003406:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 800340a:	2243      	movs	r2, #67	; 0x43
 800340c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800340e:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 8003410:	2240      	movs	r2, #64	; 0x40
 8003412:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003414:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 800341c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003420:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003422:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 8003424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003428:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 800342c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003430:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 8003434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003438:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003446:	4810      	ldr	r0, [pc, #64]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 8003448:	f002 ff1c 	bl	8006284 <HAL_DMA_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8003452:	f7ff fe5d 	bl	8003110 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a0b      	ldr	r2, [pc, #44]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_DAC_MspInit+0xfc>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003462:	2200      	movs	r2, #0
 8003464:	2105      	movs	r1, #5
 8003466:	2036      	movs	r0, #54	; 0x36
 8003468:	f002 fade 	bl	8005a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800346c:	2036      	movs	r0, #54	; 0x36
 800346e:	f002 faf5 	bl	8005a5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003472:	bf00      	nop
 8003474:	3728      	adds	r7, #40	; 0x28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40007400 	.word	0x40007400
 8003480:	58024400 	.word	0x58024400
 8003484:	58020000 	.word	0x58020000
 8003488:	24000308 	.word	0x24000308
 800348c:	40020088 	.word	0x40020088

08003490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b0ba      	sub	sp, #232	; 0xe8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	22c0      	movs	r2, #192	; 0xc0
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f013 fb53 	bl	8016b5c <memset>
  if(hi2c->Instance==I2C1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a27      	ldr	r2, [pc, #156]	; (8003558 <HAL_I2C_MspInit+0xc8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d146      	bne.n	800354e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80034c0:	f04f 0208 	mov.w	r2, #8
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d2:	f107 0310 	add.w	r3, r7, #16
 80034d6:	4618      	mov	r0, r3
 80034d8:	f007 fda8 	bl	800b02c <HAL_RCCEx_PeriphCLKConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80034e2:	f7ff fe15 	bl	8003110 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_I2C_MspInit+0xcc>)
 80034e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ec:	4a1b      	ldr	r2, [pc, #108]	; (800355c <HAL_I2C_MspInit+0xcc>)
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_I2C_MspInit+0xcc>)
 80034f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800350c:	2312      	movs	r3, #18
 800350e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800351e:	2304      	movs	r3, #4
 8003520:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003524:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003528:	4619      	mov	r1, r3
 800352a:	480d      	ldr	r0, [pc, #52]	; (8003560 <HAL_I2C_MspInit+0xd0>)
 800352c:	f005 fcf2 	bl	8008f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_I2C_MspInit+0xcc>)
 8003532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_I2C_MspInit+0xcc>)
 8003538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800353c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_I2C_MspInit+0xcc>)
 8003542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800354e:	bf00      	nop
 8003550:	37e8      	adds	r7, #232	; 0xe8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40005400 	.word	0x40005400
 800355c:	58024400 	.word	0x58024400
 8003560:	58020400 	.word	0x58020400

08003564 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b0b2      	sub	sp, #200	; 0xc8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800356c:	f107 0308 	add.w	r3, r7, #8
 8003570:	22c0      	movs	r2, #192	; 0xc0
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f013 faf1 	bl	8016b5c <memset>
  if(hrtc->Instance==RTC)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a10      	ldr	r2, [pc, #64]	; (80035c0 <HAL_RTC_MspInit+0x5c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d118      	bne.n	80035b6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003584:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <HAL_RTC_MspInit+0x60>)
 8003592:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003596:	f107 0308 	add.w	r3, r7, #8
 800359a:	4618      	mov	r0, r3
 800359c:	f007 fd46 	bl	800b02c <HAL_RCCEx_PeriphCLKConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80035a6:	f7ff fdb3 	bl	8003110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_RTC_MspInit+0x64>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <HAL_RTC_MspInit+0x64>)
 80035b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80035b6:	bf00      	nop
 80035b8:	37c8      	adds	r7, #200	; 0xc8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	58004000 	.word	0x58004000
 80035c4:	00019300 	.word	0x00019300
 80035c8:	58024400 	.word	0x58024400

080035cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b0bc      	sub	sp, #240	; 0xf0
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e4:	f107 0318 	add.w	r3, r7, #24
 80035e8:	22c0      	movs	r2, #192	; 0xc0
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f013 fab5 	bl	8016b5c <memset>
  if(hspi->Instance==SPI1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a4c      	ldr	r2, [pc, #304]	; (8003728 <HAL_SPI_MspInit+0x15c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d145      	bne.n	8003688 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80035fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003608:	2300      	movs	r3, #0
 800360a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800360c:	f107 0318 	add.w	r3, r7, #24
 8003610:	4618      	mov	r0, r3
 8003612:	f007 fd0b 	bl	800b02c <HAL_RCCEx_PeriphCLKConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800361c:	f7ff fd78 	bl	8003110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003620:	4b42      	ldr	r3, [pc, #264]	; (800372c <HAL_SPI_MspInit+0x160>)
 8003622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003626:	4a41      	ldr	r2, [pc, #260]	; (800372c <HAL_SPI_MspInit+0x160>)
 8003628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800362c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003630:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_SPI_MspInit+0x160>)
 8003632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363e:	4b3b      	ldr	r3, [pc, #236]	; (800372c <HAL_SPI_MspInit+0x160>)
 8003640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003644:	4a39      	ldr	r2, [pc, #228]	; (800372c <HAL_SPI_MspInit+0x160>)
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800364e:	4b37      	ldr	r3, [pc, #220]	; (800372c <HAL_SPI_MspInit+0x160>)
 8003650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800365c:	2318      	movs	r3, #24
 800365e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003674:	2305      	movs	r3, #5
 8003676:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800367e:	4619      	mov	r1, r3
 8003680:	482b      	ldr	r0, [pc, #172]	; (8003730 <HAL_SPI_MspInit+0x164>)
 8003682:	f005 fc47 	bl	8008f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003686:	e04a      	b.n	800371e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a29      	ldr	r2, [pc, #164]	; (8003734 <HAL_SPI_MspInit+0x168>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d145      	bne.n	800371e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800369e:	2300      	movs	r3, #0
 80036a0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a2:	f107 0318 	add.w	r3, r7, #24
 80036a6:	4618      	mov	r0, r3
 80036a8:	f007 fcc0 	bl	800b02c <HAL_RCCEx_PeriphCLKConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80036b2:	f7ff fd2d 	bl	8003110 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_SPI_MspInit+0x160>)
 80036b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036bc:	4a1b      	ldr	r2, [pc, #108]	; (800372c <HAL_SPI_MspInit+0x160>)
 80036be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_SPI_MspInit+0x160>)
 80036c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d4:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_SPI_MspInit+0x160>)
 80036d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036da:	4a14      	ldr	r2, [pc, #80]	; (800372c <HAL_SPI_MspInit+0x160>)
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_SPI_MspInit+0x160>)
 80036e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80036f2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80036f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003706:	2300      	movs	r3, #0
 8003708:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800370c:	2305      	movs	r3, #5
 800370e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003712:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003716:	4619      	mov	r1, r3
 8003718:	4805      	ldr	r0, [pc, #20]	; (8003730 <HAL_SPI_MspInit+0x164>)
 800371a:	f005 fbfb 	bl	8008f14 <HAL_GPIO_Init>
}
 800371e:	bf00      	nop
 8003720:	37f0      	adds	r7, #240	; 0xf0
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40013000 	.word	0x40013000
 800372c:	58024400 	.word	0x58024400
 8003730:	58020400 	.word	0x58020400
 8003734:	40003800 	.word	0x40003800

08003738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a46      	ldr	r2, [pc, #280]	; (8003860 <HAL_TIM_Base_MspInit+0x128>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d12f      	bne.n	80037aa <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800374a:	4b46      	ldr	r3, [pc, #280]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 800374c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003750:	4a44      	ldr	r2, [pc, #272]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800375a:	4b42      	ldr	r3, [pc, #264]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 800375c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003768:	2200      	movs	r2, #0
 800376a:	2105      	movs	r1, #5
 800376c:	2018      	movs	r0, #24
 800376e:	f002 f95b 	bl	8005a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003772:	2018      	movs	r0, #24
 8003774:	f002 f972 	bl	8005a5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003778:	2200      	movs	r2, #0
 800377a:	2105      	movs	r1, #5
 800377c:	2019      	movs	r0, #25
 800377e:	f002 f953 	bl	8005a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003782:	2019      	movs	r0, #25
 8003784:	f002 f96a 	bl	8005a5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003788:	2200      	movs	r2, #0
 800378a:	2105      	movs	r1, #5
 800378c:	201a      	movs	r0, #26
 800378e:	f002 f94b 	bl	8005a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003792:	201a      	movs	r0, #26
 8003794:	f002 f962 	bl	8005a5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003798:	2200      	movs	r2, #0
 800379a:	2105      	movs	r1, #5
 800379c:	201b      	movs	r0, #27
 800379e:	f002 f943 	bl	8005a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80037a2:	201b      	movs	r0, #27
 80037a4:	f002 f95a 	bl	8005a5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037a8:	e055      	b.n	8003856 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b2:	d117      	bne.n	80037e4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 80037b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ba:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 80037c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2105      	movs	r1, #5
 80037d6:	201c      	movs	r0, #28
 80037d8:	f002 f926 	bl	8005a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037dc:	201c      	movs	r0, #28
 80037de:	f002 f93d 	bl	8005a5c <HAL_NVIC_EnableIRQ>
}
 80037e2:	e038      	b.n	8003856 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_TIM_Base_MspInit+0x130>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d117      	bne.n	800381e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 80037f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 80037f6:	f043 0302 	orr.w	r3, r3, #2
 80037fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 8003800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	2105      	movs	r1, #5
 8003810:	201d      	movs	r0, #29
 8003812:	f002 f909 	bl	8005a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003816:	201d      	movs	r0, #29
 8003818:	f002 f920 	bl	8005a5c <HAL_NVIC_EnableIRQ>
}
 800381c:	e01b      	b.n	8003856 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a12      	ldr	r2, [pc, #72]	; (800386c <HAL_TIM_Base_MspInit+0x134>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d116      	bne.n	8003856 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 800382a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800382e:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 8003830:	f043 0304 	orr.w	r3, r3, #4
 8003834:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_TIM_Base_MspInit+0x12c>)
 800383a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003846:	2200      	movs	r2, #0
 8003848:	2105      	movs	r1, #5
 800384a:	201e      	movs	r0, #30
 800384c:	f002 f8ec 	bl	8005a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003850:	201e      	movs	r0, #30
 8003852:	f002 f903 	bl	8005a5c <HAL_NVIC_EnableIRQ>
}
 8003856:	bf00      	nop
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	58024400 	.word	0x58024400
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800

08003870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <HAL_TIM_MspPostInit+0xb8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d120      	bne.n	80038d4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003892:	4b26      	ldr	r3, [pc, #152]	; (800392c <HAL_TIM_MspPostInit+0xbc>)
 8003894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003898:	4a24      	ldr	r2, [pc, #144]	; (800392c <HAL_TIM_MspPostInit+0xbc>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_TIM_MspPostInit+0xbc>)
 80038a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038be:	2300      	movs	r3, #0
 80038c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	4619      	mov	r1, r3
 80038cc:	4818      	ldr	r0, [pc, #96]	; (8003930 <HAL_TIM_MspPostInit+0xc0>)
 80038ce:	f005 fb21 	bl	8008f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038d2:	e024      	b.n	800391e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038dc:	d11f      	bne.n	800391e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <HAL_TIM_MspPostInit+0xbc>)
 80038e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e4:	4a11      	ldr	r2, [pc, #68]	; (800392c <HAL_TIM_MspPostInit+0xbc>)
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ee:	4b0f      	ldr	r3, [pc, #60]	; (800392c <HAL_TIM_MspPostInit+0xbc>)
 80038f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800390e:	2301      	movs	r3, #1
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003912:	f107 0314 	add.w	r3, r7, #20
 8003916:	4619      	mov	r1, r3
 8003918:	4806      	ldr	r0, [pc, #24]	; (8003934 <HAL_TIM_MspPostInit+0xc4>)
 800391a:	f005 fafb 	bl	8008f14 <HAL_GPIO_Init>
}
 800391e:	bf00      	nop
 8003920:	3728      	adds	r7, #40	; 0x28
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	58024400 	.word	0x58024400
 8003930:	58020000 	.word	0x58020000
 8003934:	58020400 	.word	0x58020400

08003938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b0ba      	sub	sp, #232	; 0xe8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	22c0      	movs	r2, #192	; 0xc0
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f013 f8ff 	bl	8016b5c <memset>
  if(huart->Instance==USART1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a41      	ldr	r2, [pc, #260]	; (8003a68 <HAL_UART_MspInit+0x130>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d17b      	bne.n	8003a60 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003968:	f04f 0201 	mov.w	r2, #1
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003974:	2318      	movs	r3, #24
 8003976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800397a:	f107 0310 	add.w	r3, r7, #16
 800397e:	4618      	mov	r0, r3
 8003980:	f007 fb54 	bl	800b02c <HAL_RCCEx_PeriphCLKConfig>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800398a:	f7ff fbc1 	bl	8003110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800398e:	4b37      	ldr	r3, [pc, #220]	; (8003a6c <HAL_UART_MspInit+0x134>)
 8003990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003994:	4a35      	ldr	r2, [pc, #212]	; (8003a6c <HAL_UART_MspInit+0x134>)
 8003996:	f043 0310 	orr.w	r3, r3, #16
 800399a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800399e:	4b33      	ldr	r3, [pc, #204]	; (8003a6c <HAL_UART_MspInit+0x134>)
 80039a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ac:	4b2f      	ldr	r3, [pc, #188]	; (8003a6c <HAL_UART_MspInit+0x134>)
 80039ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b2:	4a2e      	ldr	r2, [pc, #184]	; (8003a6c <HAL_UART_MspInit+0x134>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039bc:	4b2b      	ldr	r3, [pc, #172]	; (8003a6c <HAL_UART_MspInit+0x134>)
 80039be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039e4:	2307      	movs	r3, #7
 80039e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ee:	4619      	mov	r1, r3
 80039f0:	481f      	ldr	r0, [pc, #124]	; (8003a70 <HAL_UART_MspInit+0x138>)
 80039f2:	f005 fa8f 	bl	8008f14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80039f6:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 80039f8:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <HAL_UART_MspInit+0x140>)
 80039fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80039fc:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 80039fe:	222a      	movs	r2, #42	; 0x2a
 8003a00:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a02:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a04:	2240      	movs	r2, #64	; 0x40
 8003a06:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a08:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0e:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a14:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a34:	480f      	ldr	r0, [pc, #60]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a36:	f002 fc25 	bl	8006284 <HAL_DMA_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003a40:	f7ff fb66 	bl	8003110 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a48:	67da      	str	r2, [r3, #124]	; 0x7c
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <HAL_UART_MspInit+0x13c>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2105      	movs	r1, #5
 8003a54:	2025      	movs	r0, #37	; 0x25
 8003a56:	f001 ffe7 	bl	8005a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a5a:	2025      	movs	r0, #37	; 0x25
 8003a5c:	f001 fffe 	bl	8005a5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a60:	bf00      	nop
 8003a62:	37e8      	adds	r7, #232	; 0xe8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40011000 	.word	0x40011000
 8003a6c:	58024400 	.word	0x58024400
 8003a70:	58020000 	.word	0x58020000
 8003a74:	240006cc 	.word	0x240006cc
 8003a78:	40020040 	.word	0x40020040

08003a7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b090      	sub	sp, #64	; 0x40
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	d827      	bhi.n	8003ada <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	2036      	movs	r0, #54	; 0x36
 8003a90:	f001 ffca 	bl	8005a28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a94:	2036      	movs	r0, #54	; 0x36
 8003a96:	f001 ffe1 	bl	8005a5c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003a9a:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <HAL_InitTick+0xc4>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003aa0:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <HAL_InitTick+0xc8>)
 8003aa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aa6:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_InitTick+0xc8>)
 8003aa8:	f043 0310 	orr.w	r3, r3, #16
 8003aac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_InitTick+0xc8>)
 8003ab2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003abe:	f107 0210 	add.w	r2, r7, #16
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f007 fa6d 	bl	800afa8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <HAL_InitTick+0x6a>
 8003ad8:	e001      	b.n	8003ade <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e02b      	b.n	8003b36 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ade:	f007 fa37 	bl	800af50 <HAL_RCC_GetPCLK1Freq>
 8003ae2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003ae4:	e004      	b.n	8003af0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003ae6:	f007 fa33 	bl	800af50 <HAL_RCC_GetPCLK1Freq>
 8003aea:	4603      	mov	r3, r0
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af2:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <HAL_InitTick+0xcc>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	0c9b      	lsrs	r3, r3, #18
 8003afa:	3b01      	subs	r3, #1
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <HAL_InitTick+0xd0>)
 8003b00:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <HAL_InitTick+0xd4>)
 8003b02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_InitTick+0xd0>)
 8003b06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <HAL_InitTick+0xd0>)
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_InitTick+0xd0>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_InitTick+0xd0>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b1e:	480b      	ldr	r0, [pc, #44]	; (8003b4c <HAL_InitTick+0xd0>)
 8003b20:	f00a fef5 	bl	800e90e <HAL_TIM_Base_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b2a:	4808      	ldr	r0, [pc, #32]	; (8003b4c <HAL_InitTick+0xd0>)
 8003b2c:	f00a ff46 	bl	800e9bc <HAL_TIM_Base_Start_IT>
 8003b30:	4603      	mov	r3, r0
 8003b32:	e000      	b.n	8003b36 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3740      	adds	r7, #64	; 0x40
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	24000098 	.word	0x24000098
 8003b44:	58024400 	.word	0x58024400
 8003b48:	431bde83 	.word	0x431bde83
 8003b4c:	240010dc 	.word	0x240010dc
 8003b50:	40001000 	.word	0x40001000

08003b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003b58:	e7fe      	b.n	8003b58 <NMI_Handler+0x4>

08003b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b5e:	e7fe      	b.n	8003b5e <HardFault_Handler+0x4>

08003b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b64:	e7fe      	b.n	8003b64 <MemManage_Handler+0x4>

08003b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b6a:	e7fe      	b.n	8003b6a <BusFault_Handler+0x4>

08003b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <UsageFault_Handler+0x4>

08003b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b84:	4802      	ldr	r0, [pc, #8]	; (8003b90 <DMA1_Stream0_IRQHandler+0x10>)
 8003b86:	f003 fea7 	bl	80078d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	24000204 	.word	0x24000204

08003b94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <DMA1_Stream1_IRQHandler+0x10>)
 8003b9a:	f003 fe9d 	bl	80078d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2400027c 	.word	0x2400027c

08003ba8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <DMA1_Stream2_IRQHandler+0x10>)
 8003bae:	f003 fe93 	bl	80078d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	240006cc 	.word	0x240006cc

08003bbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <DMA1_Stream5_IRQHandler+0x10>)
 8003bc2:	f003 fe89 	bl	80078d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	24000308 	.word	0x24000308

08003bd0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <TIM1_BRK_IRQHandler+0x10>)
 8003bd6:	f00b fa08 	bl	800efea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	24000508 	.word	0x24000508

08003be4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <TIM1_UP_IRQHandler+0x10>)
 8003bea:	f00b f9fe 	bl	800efea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	24000508 	.word	0x24000508

08003bf8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bfc:	4802      	ldr	r0, [pc, #8]	; (8003c08 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003bfe:	f00b f9f4 	bl	800efea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	24000508 	.word	0x24000508

08003c0c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c10:	4802      	ldr	r0, [pc, #8]	; (8003c1c <TIM1_CC_IRQHandler+0x10>)
 8003c12:	f00b f9ea 	bl	800efea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	24000508 	.word	0x24000508

08003c20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <TIM2_IRQHandler+0x10>)
 8003c26:	f00b f9e0 	bl	800efea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	24000554 	.word	0x24000554

08003c34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <TIM3_IRQHandler+0x10>)
 8003c3a:	f00b f9d6 	bl	800efea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	240005a0 	.word	0x240005a0

08003c48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <TIM4_IRQHandler+0x10>)
 8003c4e:	f00b f9cc 	bl	800efea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	240005ec 	.word	0x240005ec

08003c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <USART1_IRQHandler+0x10>)
 8003c62:	f00c fd85 	bl	8010770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	24000638 	.word	0x24000638

08003c70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <TIM6_DAC_IRQHandler+0x20>)
 8003c76:	791b      	ldrb	r3, [r3, #4]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003c7e:	4804      	ldr	r0, [pc, #16]	; (8003c90 <TIM6_DAC_IRQHandler+0x20>)
 8003c80:	f002 f881 	bl	8005d86 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003c84:	4803      	ldr	r0, [pc, #12]	; (8003c94 <TIM6_DAC_IRQHandler+0x24>)
 8003c86:	f00b f9b0 	bl	800efea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	240002f4 	.word	0x240002f4
 8003c94:	240010dc 	.word	0x240010dc

08003c98 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <ITM_SendChar+0x48>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <ITM_SendChar+0x48>)
 8003ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cac:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <ITM_SendChar+0x4c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ce4 <ITM_SendChar+0x4c>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003cba:	bf00      	nop
 8003cbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f8      	beq.n	8003cbc <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003cca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	6013      	str	r3, [r2, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	e000edfc 	.word	0xe000edfc
 8003ce4:	e0000e00 	.word	0xe0000e00

08003ce8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e00a      	b.n	8003d10 <_read+0x28>
		*ptr++ = __io_getchar();
 8003cfa:	f3af 8000 	nop.w
 8003cfe:	4601      	mov	r1, r0
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	60ba      	str	r2, [r7, #8]
 8003d06:	b2ca      	uxtb	r2, r1
 8003d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	dbf0      	blt.n	8003cfa <_read+0x12>
	}

	return len;
 8003d18:	687b      	ldr	r3, [r7, #4]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e009      	b.n	8003d48 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	60ba      	str	r2, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ffab 	bl	8003c98 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	dbf1      	blt.n	8003d34 <_write+0x12>
	}
	return len;
 8003d50:	687b      	ldr	r3, [r7, #4]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_close>:

int _close(int file) {
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_fstat>:

int _fstat(int file, struct stat *st) {
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d82:	605a      	str	r2, [r3, #4]
	return 0;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_isatty>:

int _isatty(int file) {
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003dcc:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <_sbrk+0x64>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <_sbrk+0x64>)
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <_sbrk+0x68>)
 8003de4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <_sbrk+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d207      	bcs.n	8003e04 <_sbrk+0x40>
		errno = ENOMEM;
 8003df4:	f012 fe6a 	bl	8016acc <__errno>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e02:	e009      	b.n	8003e18 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003e04:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <_sbrk+0x64>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <_sbrk+0x64>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <_sbrk+0x64>)
 8003e14:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	24080000 	.word	0x24080000
 8003e24:	00000400 	.word	0x00000400
 8003e28:	24001128 	.word	0x24001128
 8003e2c:	24005a90 	.word	0x24005a90

08003e30 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003e34:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <SystemInit+0xe4>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	4a36      	ldr	r2, [pc, #216]	; (8003f14 <SystemInit+0xe4>)
 8003e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003e44:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <SystemInit+0xe8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	2b06      	cmp	r3, #6
 8003e4e:	d807      	bhi.n	8003e60 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <SystemInit+0xe8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 030f 	bic.w	r3, r3, #15
 8003e58:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <SystemInit+0xe8>)
 8003e5a:	f043 0307 	orr.w	r3, r3, #7
 8003e5e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003e60:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <SystemInit+0xec>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <SystemInit+0xec>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <SystemInit+0xec>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003e72:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <SystemInit+0xec>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4929      	ldr	r1, [pc, #164]	; (8003f1c <SystemInit+0xec>)
 8003e78:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <SystemInit+0xf0>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003e7e:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <SystemInit+0xe8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003e8a:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <SystemInit+0xe8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 030f 	bic.w	r3, r3, #15
 8003e92:	4a21      	ldr	r2, [pc, #132]	; (8003f18 <SystemInit+0xe8>)
 8003e94:	f043 0307 	orr.w	r3, r3, #7
 8003e98:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003e9a:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <SystemInit+0xec>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003ea0:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <SystemInit+0xec>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <SystemInit+0xec>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <SystemInit+0xec>)
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <SystemInit+0xf4>)
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <SystemInit+0xec>)
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <SystemInit+0xf8>)
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003eb8:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <SystemInit+0xec>)
 8003eba:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <SystemInit+0xfc>)
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <SystemInit+0xec>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <SystemInit+0xec>)
 8003ec6:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <SystemInit+0xfc>)
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <SystemInit+0xec>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <SystemInit+0xec>)
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <SystemInit+0xfc>)
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <SystemInit+0xec>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <SystemInit+0xec>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <SystemInit+0xec>)
 8003ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <SystemInit+0xec>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <SystemInit+0x100>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <SystemInit+0x104>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efa:	d202      	bcs.n	8003f02 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003efc:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <SystemInit+0x108>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f02:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <SystemInit+0x10c>)
 8003f04:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f08:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	e000ed00 	.word	0xe000ed00
 8003f18:	52002000 	.word	0x52002000
 8003f1c:	58024400 	.word	0x58024400
 8003f20:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f24:	02020200 	.word	0x02020200
 8003f28:	01ff0000 	.word	0x01ff0000
 8003f2c:	01010280 	.word	0x01010280
 8003f30:	5c001000 	.word	0x5c001000
 8003f34:	ffff0000 	.word	0xffff0000
 8003f38:	51008108 	.word	0x51008108
 8003f3c:	52004000 	.word	0x52004000

08003f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f44:	f7ff ff74 	bl	8003e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f48:	480c      	ldr	r0, [pc, #48]	; (8003f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f4a:	490d      	ldr	r1, [pc, #52]	; (8003f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f50:	e002      	b.n	8003f58 <LoopCopyDataInit>

08003f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f56:	3304      	adds	r3, #4

08003f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f5c:	d3f9      	bcc.n	8003f52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f60:	4c0a      	ldr	r4, [pc, #40]	; (8003f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f64:	e001      	b.n	8003f6a <LoopFillZerobss>

08003f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f68:	3204      	adds	r2, #4

08003f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f6c:	d3fb      	bcc.n	8003f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f6e:	f012 fdb3 	bl	8016ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f72:	f7fd f821 	bl	8000fb8 <main>
  bx  lr
 8003f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003f7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f80:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8003f84:	080179c4 	.word	0x080179c4
  ldr r2, =_sbss
 8003f88:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8003f8c:	24005a90 	.word	0x24005a90

08003f90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f90:	e7fe      	b.n	8003f90 <ADC3_IRQHandler>
	...

08003f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f9a:	2003      	movs	r0, #3
 8003f9c:	f001 fd39 	bl	8005a12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fa0:	f006 fe2c 	bl	800abfc <HAL_RCC_GetSysClockFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_Init+0x68>)
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	4913      	ldr	r1, [pc, #76]	; (8004000 <HAL_Init+0x6c>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <HAL_Init+0x68>)
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <HAL_Init+0x6c>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <HAL_Init+0x70>)
 8003fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fd8:	4a0b      	ldr	r2, [pc, #44]	; (8004008 <HAL_Init+0x74>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fde:	2005      	movs	r0, #5
 8003fe0:	f7ff fd4c 	bl	8003a7c <HAL_InitTick>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e002      	b.n	8003ff4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fee:	f7ff f895 	bl	800311c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	58024400 	.word	0x58024400
 8004000:	08017910 	.word	0x08017910
 8004004:	24000094 	.word	0x24000094
 8004008:	24000090 	.word	0x24000090

0800400c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_IncTick+0x20>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_IncTick+0x24>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4413      	add	r3, r2
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_IncTick+0x24>)
 800401e:	6013      	str	r3, [r2, #0]
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	2400009c 	.word	0x2400009c
 8004030:	2400112c 	.word	0x2400112c

08004034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return uwTick;
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_GetTick+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	2400112c 	.word	0x2400112c

0800404c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_GetREVID+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	0c1b      	lsrs	r3, r3, #16
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	5c001000 	.word	0x5c001000

08004064 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	43db      	mvns	r3, r3
 8004076:	401a      	ands	r2, r3
 8004078:	4904      	ldr	r1, [pc, #16]	; (800408c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	58000400 	.word	0x58000400

08004090 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3360      	adds	r3, #96	; 0x60
 800410a:	461a      	mov	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	430b      	orrs	r3, r1
 8004126:	431a      	orrs	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	431a      	orrs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	611a      	str	r2, [r3, #16]
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3360      	adds	r3, #96	; 0x60
 800417a:	461a      	mov	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	431a      	orrs	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	601a      	str	r2, [r3, #0]
  }
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b087      	sub	sp, #28
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3330      	adds	r3, #48	; 0x30
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	4413      	add	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	211f      	movs	r1, #31
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	401a      	ands	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	f003 011f 	and.w	r1, r3, #31
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	431a      	orrs	r2, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f023 0203 	bic.w	r2, r3, #3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	60da      	str	r2, [r3, #12]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3314      	adds	r3, #20
 8004254:	461a      	mov	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	0e5b      	lsrs	r3, r3, #25
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	4413      	add	r3, r2
 8004262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	0d1b      	lsrs	r3, r3, #20
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2107      	movs	r1, #7
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	401a      	ands	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	0d1b      	lsrs	r3, r3, #20
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	431a      	orrs	r2, r3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b4:	43db      	mvns	r3, r3
 80042b6:	401a      	ands	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0318 	and.w	r3, r3, #24
 80042be:	4908      	ldr	r1, [pc, #32]	; (80042e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042c0:	40d9      	lsrs	r1, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	400b      	ands	r3, r1
 80042c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ca:	431a      	orrs	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	000fffff 	.word	0x000fffff

080042e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 031f 	and.w	r3, r3, #31
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <LL_ADC_DisableDeepPowerDown+0x20>)
 800430e:	4013      	ands	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6093      	str	r3, [r2, #8]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	5fffffc0 	.word	0x5fffffc0

08004324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004338:	d101      	bne.n	800433e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <LL_ADC_EnableInternalRegulator+0x24>)
 800435a:	4013      	ands	r3, r2
 800435c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	6fffffc0 	.word	0x6fffffc0

08004374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004388:	d101      	bne.n	800438e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <LL_ADC_Enable+0x24>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	f043 0201 	orr.w	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	7fffffc0 	.word	0x7fffffc0

080043c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <LL_ADC_Disable+0x24>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	f043 0202 	orr.w	r2, r3, #2
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	7fffffc0 	.word	0x7fffffc0

080043ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <LL_ADC_IsEnabled+0x18>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <LL_ADC_IsEnabled+0x1a>
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d101      	bne.n	800442a <LL_ADC_IsDisableOngoing+0x18>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <LL_ADC_IsDisableOngoing+0x1a>
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <LL_ADC_REG_StartConversion+0x24>)
 8004446:	4013      	ands	r3, r2
 8004448:	f043 0204 	orr.w	r2, r3, #4
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	7fffffc0 	.word	0x7fffffc0

08004460 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b04      	cmp	r3, #4
 8004472:	d101      	bne.n	8004478 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b08      	cmp	r3, #8
 8004498:	d101      	bne.n	800449e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e18f      	b.n	80047e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fe fe3f 	bl	8003158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff19 	bl	8004324 <LL_ADC_IsDeepPowerDownEnabled>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff feff 	bl	8004300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff34 	bl	8004374 <LL_ADC_IsInternalRegulatorEnabled>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d114      	bne.n	800453c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff ff18 	bl	800434c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800451c:	4b87      	ldr	r3, [pc, #540]	; (800473c <HAL_ADC_Init+0x290>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	4a87      	ldr	r2, [pc, #540]	; (8004740 <HAL_ADC_Init+0x294>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	099b      	lsrs	r3, r3, #6
 800452a:	3301      	adds	r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800452e:	e002      	b.n	8004536 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	3b01      	subs	r3, #1
 8004534:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f9      	bne.n	8004530 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff17 	bl	8004374 <LL_ADC_IsInternalRegulatorEnabled>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10d      	bne.n	8004568 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	f043 0210 	orr.w	r2, r3, #16
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff77 	bl	8004460 <LL_ADC_REG_IsConversionOngoing>
 8004572:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 8129 	bne.w	80047d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f040 8125 	bne.w	80047d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004592:	f043 0202 	orr.w	r2, r3, #2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff ff24 	bl	80043ec <LL_ADC_IsEnabled>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d136      	bne.n	8004618 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a65      	ldr	r2, [pc, #404]	; (8004744 <HAL_ADC_Init+0x298>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_ADC_Init+0x112>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a63      	ldr	r2, [pc, #396]	; (8004748 <HAL_ADC_Init+0x29c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d10e      	bne.n	80045dc <HAL_ADC_Init+0x130>
 80045be:	4861      	ldr	r0, [pc, #388]	; (8004744 <HAL_ADC_Init+0x298>)
 80045c0:	f7ff ff14 	bl	80043ec <LL_ADC_IsEnabled>
 80045c4:	4604      	mov	r4, r0
 80045c6:	4860      	ldr	r0, [pc, #384]	; (8004748 <HAL_ADC_Init+0x29c>)
 80045c8:	f7ff ff10 	bl	80043ec <LL_ADC_IsEnabled>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4323      	orrs	r3, r4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e008      	b.n	80045ee <HAL_ADC_Init+0x142>
 80045dc:	485b      	ldr	r0, [pc, #364]	; (800474c <HAL_ADC_Init+0x2a0>)
 80045de:	f7ff ff05 	bl	80043ec <LL_ADC_IsEnabled>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d012      	beq.n	8004618 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a53      	ldr	r2, [pc, #332]	; (8004744 <HAL_ADC_Init+0x298>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_ADC_Init+0x15a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a51      	ldr	r2, [pc, #324]	; (8004748 <HAL_ADC_Init+0x29c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_ADC_Init+0x15e>
 8004606:	4a52      	ldr	r2, [pc, #328]	; (8004750 <HAL_ADC_Init+0x2a4>)
 8004608:	e000      	b.n	800460c <HAL_ADC_Init+0x160>
 800460a:	4a52      	ldr	r2, [pc, #328]	; (8004754 <HAL_ADC_Init+0x2a8>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f7ff fd3c 	bl	8004090 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004618:	f7ff fd18 	bl	800404c <HAL_GetREVID>
 800461c:	4603      	mov	r3, r0
 800461e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004622:	4293      	cmp	r3, r2
 8004624:	d914      	bls.n	8004650 <HAL_ADC_Init+0x1a4>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b10      	cmp	r3, #16
 800462c:	d110      	bne.n	8004650 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	7d5b      	ldrb	r3, [r3, #21]
 8004632:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004638:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800463e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7f1b      	ldrb	r3, [r3, #28]
 8004644:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004646:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004648:	f043 030c 	orr.w	r3, r3, #12
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e00d      	b.n	800466c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	7d5b      	ldrb	r3, [r3, #21]
 8004654:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800465a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004660:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	7f1b      	ldrb	r3, [r3, #28]
 8004666:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004668:	4313      	orrs	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	7f1b      	ldrb	r3, [r3, #28]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d106      	bne.n	8004682 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	3b01      	subs	r3, #1
 800467a:	045b      	lsls	r3, r3, #17
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <HAL_ADC_Init+0x2ac>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	69b9      	ldr	r1, [r7, #24]
 80046ae:	430b      	orrs	r3, r1
 80046b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fed2 	bl	8004460 <LL_ADC_REG_IsConversionOngoing>
 80046bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fedf 	bl	8004486 <LL_ADC_INJ_IsConversionOngoing>
 80046c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d15f      	bne.n	8004790 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d15c      	bne.n	8004790 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7d1b      	ldrb	r3, [r3, #20]
 80046da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4b1c      	ldr	r3, [pc, #112]	; (800475c <HAL_ADC_Init+0x2b0>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	69b9      	ldr	r1, [r7, #24]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d130      	bne.n	8004764 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <HAL_ADC_Init+0x2b4>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004716:	3a01      	subs	r2, #1
 8004718:	0411      	lsls	r1, r2, #16
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800471e:	4311      	orrs	r1, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004724:	4311      	orrs	r1, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800472a:	430a      	orrs	r2, r1
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	611a      	str	r2, [r3, #16]
 8004738:	e01c      	b.n	8004774 <HAL_ADC_Init+0x2c8>
 800473a:	bf00      	nop
 800473c:	24000090 	.word	0x24000090
 8004740:	053e2d63 	.word	0x053e2d63
 8004744:	40022000 	.word	0x40022000
 8004748:	40022100 	.word	0x40022100
 800474c:	58026000 	.word	0x58026000
 8004750:	40022300 	.word	0x40022300
 8004754:	58026300 	.word	0x58026300
 8004758:	fff0c003 	.word	0xfff0c003
 800475c:	ffffbffc 	.word	0xffffbffc
 8004760:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fdec 	bl	8005368 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10c      	bne.n	80047b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f023 010f 	bic.w	r1, r3, #15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	1e5a      	subs	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
 80047b0:	e007      	b.n	80047c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 020f 	bic.w	r2, r2, #15
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
 80047d2:	e007      	b.n	80047e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	f043 0210 	orr.w	r2, r3, #16
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3724      	adds	r7, #36	; 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	bf00      	nop

080047f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a55      	ldr	r2, [pc, #340]	; (8004958 <HAL_ADC_Start_DMA+0x168>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_ADC_Start_DMA+0x20>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a54      	ldr	r2, [pc, #336]	; (800495c <HAL_ADC_Start_DMA+0x16c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <HAL_ADC_Start_DMA+0x24>
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_ADC_Start_DMA+0x170>)
 8004812:	e000      	b.n	8004816 <HAL_ADC_Start_DMA+0x26>
 8004814:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_ADC_Start_DMA+0x174>)
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fd64 	bl	80042e4 <LL_ADC_GetMultimode>
 800481c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fe1c 	bl	8004460 <LL_ADC_REG_IsConversionOngoing>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 808c 	bne.w	8004948 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_ADC_Start_DMA+0x4e>
 800483a:	2302      	movs	r3, #2
 800483c:	e087      	b.n	800494e <HAL_ADC_Start_DMA+0x15e>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b05      	cmp	r3, #5
 8004850:	d002      	beq.n	8004858 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b09      	cmp	r3, #9
 8004856:	d170      	bne.n	800493a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fc07 	bl	800506c <ADC_Enable>
 800485e:	4603      	mov	r3, r0
 8004860:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d163      	bne.n	8004930 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800486c:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <HAL_ADC_Start_DMA+0x178>)
 800486e:	4013      	ands	r3, r2
 8004870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a37      	ldr	r2, [pc, #220]	; (800495c <HAL_ADC_Start_DMA+0x16c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d002      	beq.n	8004888 <HAL_ADC_Start_DMA+0x98>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	e000      	b.n	800488a <HAL_ADC_Start_DMA+0x9a>
 8004888:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_ADC_Start_DMA+0x168>)
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	4293      	cmp	r3, r2
 8004890:	d002      	beq.n	8004898 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d006      	beq.n	80048be <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	f023 0206 	bic.w	r2, r3, #6
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	659a      	str	r2, [r3, #88]	; 0x58
 80048bc:	e002      	b.n	80048c4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c8:	4a28      	ldr	r2, [pc, #160]	; (800496c <HAL_ADC_Start_DMA+0x17c>)
 80048ca:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	4a27      	ldr	r2, [pc, #156]	; (8004970 <HAL_ADC_Start_DMA+0x180>)
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d8:	4a26      	ldr	r2, [pc, #152]	; (8004974 <HAL_ADC_Start_DMA+0x184>)
 80048da:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	221c      	movs	r2, #28
 80048e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0210 	orr.w	r2, r2, #16
 80048fa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f7ff fc89 	bl	800421e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3340      	adds	r3, #64	; 0x40
 8004916:	4619      	mov	r1, r3
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f002 f80e 	bl	800693c <HAL_DMA_Start_IT>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fd85 	bl	8004438 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800492e:	e00d      	b.n	800494c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004938:	e008      	b.n	800494c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004946:	e001      	b.n	800494c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004948:	2302      	movs	r3, #2
 800494a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800494c:	7dfb      	ldrb	r3, [r7, #23]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40022000 	.word	0x40022000
 800495c:	40022100 	.word	0x40022100
 8004960:	40022300 	.word	0x40022300
 8004964:	58026300 	.word	0x58026300
 8004968:	fffff0fe 	.word	0xfffff0fe
 800496c:	0800523f 	.word	0x0800523f
 8004970:	08005317 	.word	0x08005317
 8004974:	08005333 	.word	0x08005333

08004978 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b0a1      	sub	sp, #132	; 0x84
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a65      	ldr	r2, [pc, #404]	; (8004b64 <HAL_ADC_ConfigChannel+0x1b0>)
 80049ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_ADC_ConfigChannel+0x2a>
 80049da:	2302      	movs	r3, #2
 80049dc:	e32e      	b.n	800503c <HAL_ADC_ConfigChannel+0x688>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fd38 	bl	8004460 <LL_ADC_REG_IsConversionOngoing>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f040 8313 	bne.w	800501e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	db2c      	blt.n	8004a5a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x6a>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0e9b      	lsrs	r3, r3, #26
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	2201      	movs	r2, #1
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	e016      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x98>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a2e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004a36:	2320      	movs	r3, #32
 8004a38:	e003      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	2201      	movs	r2, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	69d1      	ldr	r1, [r2, #28]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	430b      	orrs	r3, r1
 8004a58:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6859      	ldr	r1, [r3, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f7ff fbad 	bl	80041c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fcf5 	bl	8004460 <LL_ADC_REG_IsConversionOngoing>
 8004a76:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fd02 	bl	8004486 <LL_ADC_INJ_IsConversionOngoing>
 8004a82:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 80b8 	bne.w	8004bfc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 80b4 	bne.w	8004bfc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6819      	ldr	r1, [r3, #0]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f7ff fbcf 	bl	8004244 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004aa6:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <HAL_ADC_ConfigChannel+0x1b4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab2:	d10b      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x118>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	e01d      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x154>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x13e>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	089b      	lsrs	r3, r3, #2
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	e00a      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x154>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d02c      	beq.n	8004b6c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6919      	ldr	r1, [r3, #16]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b20:	f7ff faea 	bl	80040f8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	6919      	ldr	r1, [r3, #16]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	7e5b      	ldrb	r3, [r3, #25]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d102      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x186>
 8004b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b38:	e000      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x188>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f7ff fb14 	bl	800416a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6919      	ldr	r1, [r3, #16]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	7e1b      	ldrb	r3, [r3, #24]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d102      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x1a4>
 8004b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b56:	e000      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x1a6>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f7ff faec 	bl	8004138 <LL_ADC_SetDataRightShift>
 8004b60:	e04c      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x248>
 8004b62:	bf00      	nop
 8004b64:	47ff0000 	.word	0x47ff0000
 8004b68:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	069b      	lsls	r3, r3, #26
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d107      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b8e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	069b      	lsls	r3, r3, #26
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bb2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	069b      	lsls	r3, r3, #26
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d107      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bd6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	069b      	lsls	r3, r3, #26
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d107      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bfa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fbf3 	bl	80043ec <LL_ADC_IsEnabled>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f040 8211 	bne.w	8005030 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6819      	ldr	r1, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f7ff fb3e 	bl	800429c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4aa1      	ldr	r2, [pc, #644]	; (8004eac <HAL_ADC_ConfigChannel+0x4f8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	f040 812e 	bne.w	8004e88 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x2a0>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	0e9b      	lsrs	r3, r3, #26
 8004c42:	3301      	adds	r3, #1
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2b09      	cmp	r3, #9
 8004c4a:	bf94      	ite	ls
 8004c4c:	2301      	movls	r3, #1
 8004c4e:	2300      	movhi	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e019      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x2d4>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c64:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	e003      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c72:	fab3 f383 	clz	r3, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2b09      	cmp	r3, #9
 8004c80:	bf94      	ite	ls
 8004c82:	2301      	movls	r3, #1
 8004c84:	2300      	movhi	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d079      	beq.n	8004d80 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d107      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x2f4>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	0e9b      	lsrs	r3, r3, #26
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	069b      	lsls	r3, r3, #26
 8004ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ca6:	e015      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x320>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004cc0:	2320      	movs	r3, #32
 8004cc2:	e003      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc6:	fab3 f383 	clz	r3, r3
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	3301      	adds	r3, #1
 8004cce:	069b      	lsls	r3, r3, #26
 8004cd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x340>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	0e9b      	lsrs	r3, r3, #26
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2101      	movs	r1, #1
 8004cee:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf2:	e017      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x370>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d04:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004d0c:	2320      	movs	r3, #32
 8004d0e:	e003      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d12:	fab3 f383 	clz	r3, r3
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	3301      	adds	r3, #1
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	2101      	movs	r1, #1
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	ea42 0103 	orr.w	r1, r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x396>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	0e9b      	lsrs	r3, r3, #26
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	f003 021f 	and.w	r2, r3, #31
 8004d40:	4613      	mov	r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	051b      	lsls	r3, r3, #20
 8004d48:	e018      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x3c8>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d52:	fa93 f3a3 	rbit	r3, r3
 8004d56:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004d62:	2320      	movs	r3, #32
 8004d64:	e003      	b.n	8004d6e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	fab3 f383 	clz	r3, r3
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	3301      	adds	r3, #1
 8004d70:	f003 021f 	and.w	r2, r3, #31
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	e07e      	b.n	8004e7e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x3e8>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	0e9b      	lsrs	r3, r3, #26
 8004d92:	3301      	adds	r3, #1
 8004d94:	069b      	lsls	r3, r3, #26
 8004d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9a:	e015      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0x414>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004db4:	2320      	movs	r3, #32
 8004db6:	e003      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	069b      	lsls	r3, r3, #26
 8004dc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x434>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	0e9b      	lsrs	r3, r3, #26
 8004dda:	3301      	adds	r3, #1
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	2101      	movs	r1, #1
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	e017      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x464>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	61bb      	str	r3, [r7, #24]
  return result;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004e00:	2320      	movs	r3, #32
 8004e02:	e003      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2101      	movs	r1, #1
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	ea42 0103 	orr.w	r1, r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x490>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	0e9b      	lsrs	r3, r3, #26
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f003 021f 	and.w	r2, r3, #31
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	3b1e      	subs	r3, #30
 8004e3c:	051b      	lsls	r3, r3, #20
 8004e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e42:	e01b      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x4c8>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	fa93 f3a3 	rbit	r3, r3
 8004e50:	60fb      	str	r3, [r7, #12]
  return result;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004e5c:	2320      	movs	r3, #32
 8004e5e:	e003      	b.n	8004e68 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	3301      	adds	r3, #1
 8004e6a:	f003 021f 	and.w	r2, r3, #31
 8004e6e:	4613      	mov	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	4413      	add	r3, r2
 8004e74:	3b1e      	subs	r3, #30
 8004e76:	051b      	lsls	r3, r3, #20
 8004e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	6892      	ldr	r2, [r2, #8]
 8004e82:	4619      	mov	r1, r3
 8004e84:	f7ff f9de 	bl	8004244 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f280 80cf 	bge.w	8005030 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <HAL_ADC_ConfigChannel+0x4fc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_ADC_ConfigChannel+0x4f2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <HAL_ADC_ConfigChannel+0x500>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d10a      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x508>
 8004ea6:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <HAL_ADC_ConfigChannel+0x504>)
 8004ea8:	e009      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x50a>
 8004eaa:	bf00      	nop
 8004eac:	47ff0000 	.word	0x47ff0000
 8004eb0:	40022000 	.word	0x40022000
 8004eb4:	40022100 	.word	0x40022100
 8004eb8:	40022300 	.word	0x40022300
 8004ebc:	4b61      	ldr	r3, [pc, #388]	; (8005044 <HAL_ADC_ConfigChannel+0x690>)
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff f90c 	bl	80040dc <LL_ADC_GetCommonPathInternalCh>
 8004ec4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a5f      	ldr	r2, [pc, #380]	; (8005048 <HAL_ADC_ConfigChannel+0x694>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_ADC_ConfigChannel+0x526>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a5d      	ldr	r2, [pc, #372]	; (800504c <HAL_ADC_ConfigChannel+0x698>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x544>
 8004eda:	485b      	ldr	r0, [pc, #364]	; (8005048 <HAL_ADC_ConfigChannel+0x694>)
 8004edc:	f7ff fa86 	bl	80043ec <LL_ADC_IsEnabled>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	485a      	ldr	r0, [pc, #360]	; (800504c <HAL_ADC_ConfigChannel+0x698>)
 8004ee4:	f7ff fa82 	bl	80043ec <LL_ADC_IsEnabled>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	4323      	orrs	r3, r4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf0c      	ite	eq
 8004ef0:	2301      	moveq	r3, #1
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e008      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x556>
 8004ef8:	4855      	ldr	r0, [pc, #340]	; (8005050 <HAL_ADC_ConfigChannel+0x69c>)
 8004efa:	f7ff fa77 	bl	80043ec <LL_ADC_IsEnabled>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d07d      	beq.n	800500a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a50      	ldr	r2, [pc, #320]	; (8005054 <HAL_ADC_ConfigChannel+0x6a0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d130      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x5c6>
 8004f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d12b      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a4a      	ldr	r2, [pc, #296]	; (8005050 <HAL_ADC_ConfigChannel+0x69c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	f040 8081 	bne.w	8005030 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a45      	ldr	r2, [pc, #276]	; (8005048 <HAL_ADC_ConfigChannel+0x694>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_ADC_ConfigChannel+0x58e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a43      	ldr	r2, [pc, #268]	; (800504c <HAL_ADC_ConfigChannel+0x698>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x592>
 8004f42:	4a45      	ldr	r2, [pc, #276]	; (8005058 <HAL_ADC_ConfigChannel+0x6a4>)
 8004f44:	e000      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x594>
 8004f46:	4a3f      	ldr	r2, [pc, #252]	; (8005044 <HAL_ADC_ConfigChannel+0x690>)
 8004f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f7ff f8b0 	bl	80040b6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f56:	4b41      	ldr	r3, [pc, #260]	; (800505c <HAL_ADC_ConfigChannel+0x6a8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	099b      	lsrs	r3, r3, #6
 8004f5c:	4a40      	ldr	r2, [pc, #256]	; (8005060 <HAL_ADC_ConfigChannel+0x6ac>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	099b      	lsrs	r3, r3, #6
 8004f64:	3301      	adds	r3, #1
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f6a:	e002      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f9      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f78:	e05a      	b.n	8005030 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a39      	ldr	r2, [pc, #228]	; (8005064 <HAL_ADC_ConfigChannel+0x6b0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d11e      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x60e>
 8004f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d119      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2f      	ldr	r2, [pc, #188]	; (8005050 <HAL_ADC_ConfigChannel+0x69c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d14b      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <HAL_ADC_ConfigChannel+0x694>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <HAL_ADC_ConfigChannel+0x5f8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a29      	ldr	r2, [pc, #164]	; (800504c <HAL_ADC_ConfigChannel+0x698>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x5fc>
 8004fac:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <HAL_ADC_ConfigChannel+0x6a4>)
 8004fae:	e000      	b.n	8004fb2 <HAL_ADC_ConfigChannel+0x5fe>
 8004fb0:	4a24      	ldr	r2, [pc, #144]	; (8005044 <HAL_ADC_ConfigChannel+0x690>)
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7ff f87b 	bl	80040b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fc0:	e036      	b.n	8005030 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a28      	ldr	r2, [pc, #160]	; (8005068 <HAL_ADC_ConfigChannel+0x6b4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d131      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x67c>
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d12c      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_ADC_ConfigChannel+0x69c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d127      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	; (8005048 <HAL_ADC_ConfigChannel+0x694>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_ADC_ConfigChannel+0x640>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a17      	ldr	r2, [pc, #92]	; (800504c <HAL_ADC_ConfigChannel+0x698>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d101      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x644>
 8004ff4:	4a18      	ldr	r2, [pc, #96]	; (8005058 <HAL_ADC_ConfigChannel+0x6a4>)
 8004ff6:	e000      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x646>
 8004ff8:	4a12      	ldr	r2, [pc, #72]	; (8005044 <HAL_ADC_ConfigChannel+0x690>)
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f7ff f857 	bl	80040b6 <LL_ADC_SetCommonPathInternalCh>
 8005008:	e012      	b.n	8005030 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	f043 0220 	orr.w	r2, r3, #32
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800501c:	e008      	b.n	8005030 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005022:	f043 0220 	orr.w	r2, r3, #32
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005038:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800503c:	4618      	mov	r0, r3
 800503e:	3784      	adds	r7, #132	; 0x84
 8005040:	46bd      	mov	sp, r7
 8005042:	bd90      	pop	{r4, r7, pc}
 8005044:	58026300 	.word	0x58026300
 8005048:	40022000 	.word	0x40022000
 800504c:	40022100 	.word	0x40022100
 8005050:	58026000 	.word	0x58026000
 8005054:	cb840000 	.word	0xcb840000
 8005058:	40022300 	.word	0x40022300
 800505c:	24000090 	.word	0x24000090
 8005060:	053e2d63 	.word	0x053e2d63
 8005064:	c7520000 	.word	0xc7520000
 8005068:	cfb80000 	.word	0xcfb80000

0800506c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff f9b7 	bl	80043ec <LL_ADC_IsEnabled>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d16e      	bne.n	8005162 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	4b38      	ldr	r3, [pc, #224]	; (800516c <ADC_Enable+0x100>)
 800508c:	4013      	ands	r3, r2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	f043 0210 	orr.w	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a2:	f043 0201 	orr.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e05a      	b.n	8005164 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff f972 	bl	800439c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050b8:	f7fe ffbc 	bl	8004034 <HAL_GetTick>
 80050bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2b      	ldr	r2, [pc, #172]	; (8005170 <ADC_Enable+0x104>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <ADC_Enable+0x66>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a29      	ldr	r2, [pc, #164]	; (8005174 <ADC_Enable+0x108>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d101      	bne.n	80050d6 <ADC_Enable+0x6a>
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <ADC_Enable+0x10c>)
 80050d4:	e000      	b.n	80050d8 <ADC_Enable+0x6c>
 80050d6:	4b29      	ldr	r3, [pc, #164]	; (800517c <ADC_Enable+0x110>)
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff f903 	bl	80042e4 <LL_ADC_GetMultimode>
 80050de:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a23      	ldr	r2, [pc, #140]	; (8005174 <ADC_Enable+0x108>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d002      	beq.n	80050f0 <ADC_Enable+0x84>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	e000      	b.n	80050f2 <ADC_Enable+0x86>
 80050f0:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <ADC_Enable+0x104>)
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d02c      	beq.n	8005154 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d130      	bne.n	8005162 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005100:	e028      	b.n	8005154 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff f970 	bl	80043ec <LL_ADC_IsEnabled>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d104      	bne.n	800511c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff f940 	bl	800439c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800511c:	f7fe ff8a 	bl	8004034 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d914      	bls.n	8005154 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b01      	cmp	r3, #1
 8005136:	d00d      	beq.n	8005154 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	f043 0210 	orr.w	r2, r3, #16
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005148:	f043 0201 	orr.w	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e007      	b.n	8005164 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b01      	cmp	r3, #1
 8005160:	d1cf      	bne.n	8005102 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	8000003f 	.word	0x8000003f
 8005170:	40022000 	.word	0x40022000
 8005174:	40022100 	.word	0x40022100
 8005178:	40022300 	.word	0x40022300
 800517c:	58026300 	.word	0x58026300

08005180 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff f940 	bl	8004412 <LL_ADC_IsDisableOngoing>
 8005192:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff f927 	bl	80043ec <LL_ADC_IsEnabled>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d047      	beq.n	8005234 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d144      	bne.n	8005234 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 030d 	and.w	r3, r3, #13
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d10c      	bne.n	80051d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff f901 	bl	80043c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2203      	movs	r2, #3
 80051c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051ca:	f7fe ff33 	bl	8004034 <HAL_GetTick>
 80051ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051d0:	e029      	b.n	8005226 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	f043 0210 	orr.w	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e023      	b.n	8005236 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051ee:	f7fe ff21 	bl	8004034 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d914      	bls.n	8005226 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00d      	beq.n	8005226 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f043 0210 	orr.w	r2, r3, #16
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	f043 0201 	orr.w	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e007      	b.n	8005236 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1dc      	bne.n	80051ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005254:	2b00      	cmp	r3, #0
 8005256:	d14b      	bne.n	80052f0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d021      	beq.n	80052b6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe ff92 	bl	80041a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d032      	beq.n	80052e8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d12b      	bne.n	80052e8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11f      	bne.n	80052e8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ac:	f043 0201 	orr.w	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
 80052b4:	e018      	b.n	80052e8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d111      	bne.n	80052e8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	f043 0201 	orr.w	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff fb45 	bl	8004978 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052ee:	e00e      	b.n	800530e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f7ff fb4f 	bl	80049a0 <HAL_ADC_ErrorCallback>
}
 8005302:	e004      	b.n	800530e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
}
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff fb31 	bl	800498c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	f043 0204 	orr.w	r2, r3, #4
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff fb21 	bl	80049a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a7a      	ldr	r2, [pc, #488]	; (8005560 <ADC_ConfigureBoostMode+0x1f8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <ADC_ConfigureBoostMode+0x1c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a79      	ldr	r2, [pc, #484]	; (8005564 <ADC_ConfigureBoostMode+0x1fc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d109      	bne.n	8005398 <ADC_ConfigureBoostMode+0x30>
 8005384:	4b78      	ldr	r3, [pc, #480]	; (8005568 <ADC_ConfigureBoostMode+0x200>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	e008      	b.n	80053aa <ADC_ConfigureBoostMode+0x42>
 8005398:	4b74      	ldr	r3, [pc, #464]	; (800556c <ADC_ConfigureBoostMode+0x204>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01c      	beq.n	80053e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80053ae:	f005 fd9f 	bl	800aef0 <HAL_RCC_GetHCLKFreq>
 80053b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053bc:	d010      	beq.n	80053e0 <ADC_ConfigureBoostMode+0x78>
 80053be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053c2:	d873      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x144>
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c8:	d002      	beq.n	80053d0 <ADC_ConfigureBoostMode+0x68>
 80053ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ce:	d16d      	bne.n	80054ac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	0c1b      	lsrs	r3, r3, #16
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	60fb      	str	r3, [r7, #12]
        break;
 80053de:	e068      	b.n	80054b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	089b      	lsrs	r3, r3, #2
 80053e4:	60fb      	str	r3, [r7, #12]
        break;
 80053e6:	e064      	b.n	80054b2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80053e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	f007 f826 	bl	800c440 <HAL_RCCEx_GetPeriphCLKFreq>
 80053f4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80053fe:	d051      	beq.n	80054a4 <ADC_ConfigureBoostMode+0x13c>
 8005400:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005404:	d854      	bhi.n	80054b0 <ADC_ConfigureBoostMode+0x148>
 8005406:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800540a:	d047      	beq.n	800549c <ADC_ConfigureBoostMode+0x134>
 800540c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005410:	d84e      	bhi.n	80054b0 <ADC_ConfigureBoostMode+0x148>
 8005412:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005416:	d03d      	beq.n	8005494 <ADC_ConfigureBoostMode+0x12c>
 8005418:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800541c:	d848      	bhi.n	80054b0 <ADC_ConfigureBoostMode+0x148>
 800541e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005422:	d033      	beq.n	800548c <ADC_ConfigureBoostMode+0x124>
 8005424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005428:	d842      	bhi.n	80054b0 <ADC_ConfigureBoostMode+0x148>
 800542a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800542e:	d029      	beq.n	8005484 <ADC_ConfigureBoostMode+0x11c>
 8005430:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005434:	d83c      	bhi.n	80054b0 <ADC_ConfigureBoostMode+0x148>
 8005436:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800543a:	d01a      	beq.n	8005472 <ADC_ConfigureBoostMode+0x10a>
 800543c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005440:	d836      	bhi.n	80054b0 <ADC_ConfigureBoostMode+0x148>
 8005442:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005446:	d014      	beq.n	8005472 <ADC_ConfigureBoostMode+0x10a>
 8005448:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800544c:	d830      	bhi.n	80054b0 <ADC_ConfigureBoostMode+0x148>
 800544e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005452:	d00e      	beq.n	8005472 <ADC_ConfigureBoostMode+0x10a>
 8005454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005458:	d82a      	bhi.n	80054b0 <ADC_ConfigureBoostMode+0x148>
 800545a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800545e:	d008      	beq.n	8005472 <ADC_ConfigureBoostMode+0x10a>
 8005460:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005464:	d824      	bhi.n	80054b0 <ADC_ConfigureBoostMode+0x148>
 8005466:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800546a:	d002      	beq.n	8005472 <ADC_ConfigureBoostMode+0x10a>
 800546c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005470:	d11e      	bne.n	80054b0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	0c9b      	lsrs	r3, r3, #18
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	60fb      	str	r3, [r7, #12]
        break;
 8005482:	e016      	b.n	80054b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	60fb      	str	r3, [r7, #12]
        break;
 800548a:	e012      	b.n	80054b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	60fb      	str	r3, [r7, #12]
        break;
 8005492:	e00e      	b.n	80054b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	60fb      	str	r3, [r7, #12]
        break;
 800549a:	e00a      	b.n	80054b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	09db      	lsrs	r3, r3, #7
 80054a0:	60fb      	str	r3, [r7, #12]
        break;
 80054a2:	e006      	b.n	80054b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	60fb      	str	r3, [r7, #12]
        break;
 80054aa:	e002      	b.n	80054b2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80054b0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80054b2:	f7fe fdcb 	bl	800404c <HAL_GetREVID>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80054bc:	4293      	cmp	r3, r2
 80054be:	d815      	bhi.n	80054ec <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a2b      	ldr	r2, [pc, #172]	; (8005570 <ADC_ConfigureBoostMode+0x208>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d908      	bls.n	80054da <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80054d8:	e03e      	b.n	8005558 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e8:	609a      	str	r2, [r3, #8]
}
 80054ea:	e035      	b.n	8005558 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <ADC_ConfigureBoostMode+0x20c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d808      	bhi.n	800550c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005508:	609a      	str	r2, [r3, #8]
}
 800550a:	e025      	b.n	8005558 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4a1a      	ldr	r2, [pc, #104]	; (8005578 <ADC_ConfigureBoostMode+0x210>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d80a      	bhi.n	800552a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005526:	609a      	str	r2, [r3, #8]
}
 8005528:	e016      	b.n	8005558 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a13      	ldr	r2, [pc, #76]	; (800557c <ADC_ConfigureBoostMode+0x214>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d80a      	bhi.n	8005548 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005544:	609a      	str	r2, [r3, #8]
}
 8005546:	e007      	b.n	8005558 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40022000 	.word	0x40022000
 8005564:	40022100 	.word	0x40022100
 8005568:	40022300 	.word	0x40022300
 800556c:	58026300 	.word	0x58026300
 8005570:	01312d00 	.word	0x01312d00
 8005574:	005f5e10 	.word	0x005f5e10
 8005578:	00bebc20 	.word	0x00bebc20
 800557c:	017d7840 	.word	0x017d7840

08005580 <LL_ADC_IsEnabled>:
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <LL_ADC_IsEnabled+0x18>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <LL_ADC_IsEnabled+0x1a>
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <LL_ADC_StartCalibration>:
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <LL_ADC_StartCalibration+0x38>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055c8:	430a      	orrs	r2, r1
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	3ffeffc0 	.word	0x3ffeffc0

080055e4 <LL_ADC_IsCalibrationOnGoing>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f8:	d101      	bne.n	80055fe <LL_ADC_IsCalibrationOnGoing+0x1a>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <LL_ADC_REG_IsConversionOngoing>:
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b04      	cmp	r3, #4
 800561e:	d101      	bne.n	8005624 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_ADCEx_Calibration_Start+0x1e>
 800564e:	2302      	movs	r3, #2
 8005650:	e04c      	b.n	80056ec <HAL_ADCEx_Calibration_Start+0xb8>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fd90 	bl	8005180 <ADC_Disable>
 8005660:	4603      	mov	r3, r0
 8005662:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d135      	bne.n	80056d6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800566e:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005670:	4013      	ands	r3, r2
 8005672:	f043 0202 	orr.w	r2, r3, #2
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff ff90 	bl	80055a8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005688:	e014      	b.n	80056b4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3301      	adds	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d30d      	bcc.n	80056b4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	f023 0312 	bic.w	r3, r3, #18
 80056a0:	f043 0210 	orr.w	r2, r3, #16
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e01b      	b.n	80056ec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff ff93 	bl	80055e4 <LL_ADC_IsCalibrationOnGoing>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e2      	bne.n	800568a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c8:	f023 0303 	bic.w	r3, r3, #3
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
 80056d4:	e005      	b.n	80056e2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	f043 0210 	orr.w	r2, r3, #16
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	ffffeefd 	.word	0xffffeefd
 80056f8:	25c3f800 	.word	0x25c3f800

080056fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b09f      	sub	sp, #124	; 0x7c
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005716:	2302      	movs	r3, #2
 8005718:	e0be      	b.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005722:	2300      	movs	r3, #0
 8005724:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005726:	2300      	movs	r3, #0
 8005728:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a5c      	ldr	r2, [pc, #368]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d102      	bne.n	800573a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005734:	4b5b      	ldr	r3, [pc, #364]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	e001      	b.n	800573e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10b      	bne.n	800575c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005748:	f043 0220 	orr.w	r2, r3, #32
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e09d      	b.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff ff54 	bl	800560c <LL_ADC_REG_IsConversionOngoing>
 8005764:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff ff4e 	bl	800560c <LL_ADC_REG_IsConversionOngoing>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d17f      	bne.n	8005876 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005778:	2b00      	cmp	r3, #0
 800577a:	d17c      	bne.n	8005876 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a47      	ldr	r2, [pc, #284]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a46      	ldr	r2, [pc, #280]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d101      	bne.n	8005794 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005790:	4b45      	ldr	r3, [pc, #276]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005792:	e000      	b.n	8005796 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005794:	4b45      	ldr	r3, [pc, #276]	; (80058ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005796:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d039      	beq.n	8005814 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80057a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	431a      	orrs	r2, r3
 80057ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3a      	ldr	r2, [pc, #232]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a38      	ldr	r2, [pc, #224]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d10e      	bne.n	80057e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80057c6:	4836      	ldr	r0, [pc, #216]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057c8:	f7ff feda 	bl	8005580 <LL_ADC_IsEnabled>
 80057cc:	4604      	mov	r4, r0
 80057ce:	4835      	ldr	r0, [pc, #212]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057d0:	f7ff fed6 	bl	8005580 <LL_ADC_IsEnabled>
 80057d4:	4603      	mov	r3, r0
 80057d6:	4323      	orrs	r3, r4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e008      	b.n	80057f6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80057e4:	4832      	ldr	r0, [pc, #200]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80057e6:	f7ff fecb 	bl	8005580 <LL_ADC_IsEnabled>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d047      	beq.n	800588a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80057fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	4b2d      	ldr	r3, [pc, #180]	; (80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005800:	4013      	ands	r3, r2
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	6811      	ldr	r1, [r2, #0]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	6892      	ldr	r2, [r2, #8]
 800580a:	430a      	orrs	r2, r1
 800580c:	431a      	orrs	r2, r3
 800580e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005810:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005812:	e03a      	b.n	800588a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800581c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d10e      	bne.n	8005852 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005834:	481a      	ldr	r0, [pc, #104]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005836:	f7ff fea3 	bl	8005580 <LL_ADC_IsEnabled>
 800583a:	4604      	mov	r4, r0
 800583c:	4819      	ldr	r0, [pc, #100]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800583e:	f7ff fe9f 	bl	8005580 <LL_ADC_IsEnabled>
 8005842:	4603      	mov	r3, r0
 8005844:	4323      	orrs	r3, r4
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf0c      	ite	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	2300      	movne	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	e008      	b.n	8005864 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005852:	4817      	ldr	r0, [pc, #92]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005854:	f7ff fe94 	bl	8005580 <LL_ADC_IsEnabled>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf0c      	ite	eq
 800585e:	2301      	moveq	r3, #1
 8005860:	2300      	movne	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d010      	beq.n	800588a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800586e:	4013      	ands	r3, r2
 8005870:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005872:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005874:	e009      	b.n	800588a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587a:	f043 0220 	orr.w	r2, r3, #32
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005888:	e000      	b.n	800588c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800588a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005894:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005898:	4618      	mov	r0, r3
 800589a:	377c      	adds	r7, #124	; 0x7c
 800589c:	46bd      	mov	sp, r7
 800589e:	bd90      	pop	{r4, r7, pc}
 80058a0:	40022000 	.word	0x40022000
 80058a4:	40022100 	.word	0x40022100
 80058a8:	40022300 	.word	0x40022300
 80058ac:	58026300 	.word	0x58026300
 80058b0:	58026000 	.word	0x58026000
 80058b4:	fffff0e0 	.word	0xfffff0e0

080058b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <__NVIC_SetPriorityGrouping+0x40>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058d4:	4013      	ands	r3, r2
 80058d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058e0:	4b06      	ldr	r3, [pc, #24]	; (80058fc <__NVIC_SetPriorityGrouping+0x44>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058e6:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <__NVIC_SetPriorityGrouping+0x40>)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	60d3      	str	r3, [r2, #12]
}
 80058ec:	bf00      	nop
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	e000ed00 	.word	0xe000ed00
 80058fc:	05fa0000 	.word	0x05fa0000

08005900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005904:	4b04      	ldr	r3, [pc, #16]	; (8005918 <__NVIC_GetPriorityGrouping+0x18>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	0a1b      	lsrs	r3, r3, #8
 800590a:	f003 0307 	and.w	r3, r3, #7
}
 800590e:	4618      	mov	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	e000ed00 	.word	0xe000ed00

0800591c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800592a:	2b00      	cmp	r3, #0
 800592c:	db0b      	blt.n	8005946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	f003 021f 	and.w	r2, r3, #31
 8005934:	4907      	ldr	r1, [pc, #28]	; (8005954 <__NVIC_EnableIRQ+0x38>)
 8005936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	2001      	movs	r0, #1
 800593e:	fa00 f202 	lsl.w	r2, r0, r2
 8005942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	e000e100 	.word	0xe000e100

08005958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005968:	2b00      	cmp	r3, #0
 800596a:	db0a      	blt.n	8005982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	b2da      	uxtb	r2, r3
 8005970:	490c      	ldr	r1, [pc, #48]	; (80059a4 <__NVIC_SetPriority+0x4c>)
 8005972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005976:	0112      	lsls	r2, r2, #4
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	440b      	add	r3, r1
 800597c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005980:	e00a      	b.n	8005998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	b2da      	uxtb	r2, r3
 8005986:	4908      	ldr	r1, [pc, #32]	; (80059a8 <__NVIC_SetPriority+0x50>)
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	3b04      	subs	r3, #4
 8005990:	0112      	lsls	r2, r2, #4
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	440b      	add	r3, r1
 8005996:	761a      	strb	r2, [r3, #24]
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	e000e100 	.word	0xe000e100
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b089      	sub	sp, #36	; 0x24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f1c3 0307 	rsb	r3, r3, #7
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	bf28      	it	cs
 80059ca:	2304      	movcs	r3, #4
 80059cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3304      	adds	r3, #4
 80059d2:	2b06      	cmp	r3, #6
 80059d4:	d902      	bls.n	80059dc <NVIC_EncodePriority+0x30>
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3b03      	subs	r3, #3
 80059da:	e000      	b.n	80059de <NVIC_EncodePriority+0x32>
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43da      	mvns	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	401a      	ands	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	43d9      	mvns	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a04:	4313      	orrs	r3, r2
         );
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3724      	adds	r7, #36	; 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff ff4c 	bl	80058b8 <__NVIC_SetPriorityGrouping>
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a36:	f7ff ff63 	bl	8005900 <__NVIC_GetPriorityGrouping>
 8005a3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	6978      	ldr	r0, [r7, #20]
 8005a42:	f7ff ffb3 	bl	80059ac <NVIC_EncodePriority>
 8005a46:	4602      	mov	r2, r0
 8005a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff ff82 	bl	8005958 <__NVIC_SetPriority>
}
 8005a54:	bf00      	nop
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff ff56 	bl	800591c <__NVIC_EnableIRQ>
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e014      	b.n	8005ab4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	791b      	ldrb	r3, [r3, #4]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fd fc76 	bl	800338c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e046      	b.n	8005b5e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	795b      	ldrb	r3, [r3, #5]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_DAC_Start+0x20>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e040      	b.n	8005b5e <HAL_DAC_Start+0xa2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6819      	ldr	r1, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2201      	movs	r2, #1
 8005af6:	409a      	lsls	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10f      	bne.n	8005b26 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d11d      	bne.n	8005b50 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	605a      	str	r2, [r3, #4]
 8005b24:	e014      	b.n	8005b50 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2102      	movs	r1, #2
 8005b38:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d107      	bne.n	8005b50 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0202 	orr.w	r2, r2, #2
 8005b4e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0a2      	b.n	8005cca <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	795b      	ldrb	r3, [r3, #5]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_DAC_Start_DMA+0x24>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e09c      	b.n	8005cca <HAL_DAC_Start_DMA+0x15e>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d129      	bne.n	8005bf6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	4a4b      	ldr	r2, [pc, #300]	; (8005cd4 <HAL_DAC_Start_DMA+0x168>)
 8005ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	4a4a      	ldr	r2, [pc, #296]	; (8005cd8 <HAL_DAC_Start_DMA+0x16c>)
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4a49      	ldr	r2, [pc, #292]	; (8005cdc <HAL_DAC_Start_DMA+0x170>)
 8005bb8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bc8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_DAC_Start_DMA+0x6c>
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d005      	beq.n	8005be2 <HAL_DAC_Start_DMA+0x76>
 8005bd6:	e009      	b.n	8005bec <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	613b      	str	r3, [r7, #16]
        break;
 8005be0:	e033      	b.n	8005c4a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	330c      	adds	r3, #12
 8005be8:	613b      	str	r3, [r7, #16]
        break;
 8005bea:	e02e      	b.n	8005c4a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3310      	adds	r3, #16
 8005bf2:	613b      	str	r3, [r7, #16]
        break;
 8005bf4:	e029      	b.n	8005c4a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4a39      	ldr	r2, [pc, #228]	; (8005ce0 <HAL_DAC_Start_DMA+0x174>)
 8005bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <HAL_DAC_Start_DMA+0x178>)
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	4a37      	ldr	r2, [pc, #220]	; (8005ce8 <HAL_DAC_Start_DMA+0x17c>)
 8005c0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c1c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_DAC_Start_DMA+0xc0>
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d005      	beq.n	8005c36 <HAL_DAC_Start_DMA+0xca>
 8005c2a:	e009      	b.n	8005c40 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3314      	adds	r3, #20
 8005c32:	613b      	str	r3, [r7, #16]
        break;
 8005c34:	e009      	b.n	8005c4a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3318      	adds	r3, #24
 8005c3c:	613b      	str	r3, [r7, #16]
        break;
 8005c3e:	e004      	b.n	8005c4a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	331c      	adds	r3, #28
 8005c46:	613b      	str	r3, [r7, #16]
        break;
 8005c48:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d111      	bne.n	8005c74 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6898      	ldr	r0, [r3, #8]
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	f000 fe67 	bl	800693c <HAL_DMA_Start_IT>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	75fb      	strb	r3, [r7, #23]
 8005c72:	e010      	b.n	8005c96 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005c82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68d8      	ldr	r0, [r3, #12]
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	f000 fe55 	bl	800693c <HAL_DMA_Start_IT>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10c      	bne.n	8005cbc <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6819      	ldr	r1, [r3, #0]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2201      	movs	r2, #1
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	e005      	b.n	8005cc8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f043 0204 	orr.w	r2, r3, #4
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	0800615d 	.word	0x0800615d
 8005cd8:	0800617f 	.word	0x0800617f
 8005cdc:	0800619b 	.word	0x0800619b
 8005ce0:	08006219 	.word	0x08006219
 8005ce4:	0800623b 	.word	0x0800623b
 8005ce8:	08006257 	.word	0x08006257

08005cec <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e03e      	b.n	8005d7e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6819      	ldr	r1, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43da      	mvns	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	400a      	ands	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6819      	ldr	r1, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	43da      	mvns	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	400a      	ands	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10d      	bne.n	8005d5c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 f863 	bl	8006e10 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e00c      	b.n	8005d76 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 f855 	bl	8006e10 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005d74:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01d      	beq.n	8005de4 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d018      	beq.n	8005de4 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2204      	movs	r2, #4
 8005db6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f043 0201 	orr.w	r2, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ddc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f86f 	bl	8005ec2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d01d      	beq.n	8005e2a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d018      	beq.n	8005e2a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f043 0202 	orr.w	r2, r3, #2
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f9ed 	bl	8006204 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b087      	sub	sp, #28
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e015      	b.n	8005e7a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d105      	bne.n	8005e66 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4413      	add	r3, r2
 8005e60:	3308      	adds	r3, #8
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	e004      	b.n	8005e70 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	461a      	mov	r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_DAC_ConfigChannel+0x1e>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e12a      	b.n	8006150 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	795b      	ldrb	r3, [r3, #5]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <HAL_DAC_ConfigChannel+0x2e>
 8005f02:	2302      	movs	r3, #2
 8005f04:	e124      	b.n	8006150 <HAL_DAC_ConfigChannel+0x278>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d17a      	bne.n	8006010 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005f1a:	f7fe f88b 	bl	8004034 <HAL_GetTick>
 8005f1e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d13d      	bne.n	8005fa2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f26:	e018      	b.n	8005f5a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f28:	f7fe f884 	bl	8004034 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d911      	bls.n	8005f5a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3c:	4b86      	ldr	r3, [pc, #536]	; (8006158 <HAL_DAC_ConfigChannel+0x280>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f043 0208 	orr.w	r2, r3, #8
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2203      	movs	r2, #3
 8005f54:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e0fa      	b.n	8006150 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f60:	4b7d      	ldr	r3, [pc, #500]	; (8006158 <HAL_DAC_ConfigChannel+0x280>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1df      	bne.n	8005f28 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	6992      	ldr	r2, [r2, #24]
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
 8005f72:	e020      	b.n	8005fb6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f74:	f7fe f85e 	bl	8004034 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d90f      	bls.n	8005fa2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da0a      	bge.n	8005fa2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f043 0208 	orr.w	r2, r3, #8
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e0d6      	b.n	8006150 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dbe3      	blt.n	8005f74 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	6992      	ldr	r2, [r2, #24]
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	ea02 0103 	and.w	r1, r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f003 0310 	and.w	r3, r3, #16
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	21ff      	movs	r1, #255	; 0xff
 8005ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	ea02 0103 	and.w	r1, r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	6a1a      	ldr	r2, [r3, #32]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	409a      	lsls	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d11d      	bne.n	8006054 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	221f      	movs	r2, #31
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4313      	orrs	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2207      	movs	r2, #7
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	43db      	mvns	r3, r3
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4013      	ands	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d102      	bne.n	800607e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006078:	2300      	movs	r3, #0
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
 800607c:	e00f      	b.n	800609e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d102      	bne.n	800608c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006086:	2301      	movs	r3, #1
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
 800608a:	e008      	b.n	800609e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006094:	2301      	movs	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
 8006098:	e001      	b.n	800609e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800609a:	2300      	movs	r3, #0
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	4313      	orrs	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6819      	ldr	r1, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	43da      	mvns	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	400a      	ands	r2, r1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	4313      	orrs	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6819      	ldr	r1, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f003 0310 	and.w	r3, r3, #16
 8006130:	22c0      	movs	r2, #192	; 0xc0
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43da      	mvns	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	400a      	ands	r2, r1
 800613e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800614c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20008000 	.word	0x20008000

0800615c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff fe8b 	bl	8005e86 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	711a      	strb	r2, [r3, #4]
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff fe84 	bl	8005e9a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f043 0204 	orr.w	r2, r3, #4
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fe7a 	bl	8005eae <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	711a      	strb	r2, [r3, #4]
}
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff ffce 	bl	80061c8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	711a      	strb	r2, [r3, #4]
}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff ffc7 	bl	80061dc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800624e:	bf00      	nop
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f043 0204 	orr.w	r2, r3, #4
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff ffbd 	bl	80061f0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	711a      	strb	r2, [r3, #4]
}
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800628c:	f7fd fed2 	bl	8004034 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e316      	b.n	80068ca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a66      	ldr	r2, [pc, #408]	; (800643c <HAL_DMA_Init+0x1b8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d04a      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a65      	ldr	r2, [pc, #404]	; (8006440 <HAL_DMA_Init+0x1bc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d045      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a63      	ldr	r2, [pc, #396]	; (8006444 <HAL_DMA_Init+0x1c0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d040      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a62      	ldr	r2, [pc, #392]	; (8006448 <HAL_DMA_Init+0x1c4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d03b      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a60      	ldr	r2, [pc, #384]	; (800644c <HAL_DMA_Init+0x1c8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d036      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a5f      	ldr	r2, [pc, #380]	; (8006450 <HAL_DMA_Init+0x1cc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d031      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a5d      	ldr	r2, [pc, #372]	; (8006454 <HAL_DMA_Init+0x1d0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d02c      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a5c      	ldr	r2, [pc, #368]	; (8006458 <HAL_DMA_Init+0x1d4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d027      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a5a      	ldr	r2, [pc, #360]	; (800645c <HAL_DMA_Init+0x1d8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d022      	beq.n	800633c <HAL_DMA_Init+0xb8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a59      	ldr	r2, [pc, #356]	; (8006460 <HAL_DMA_Init+0x1dc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d01d      	beq.n	800633c <HAL_DMA_Init+0xb8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a57      	ldr	r2, [pc, #348]	; (8006464 <HAL_DMA_Init+0x1e0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d018      	beq.n	800633c <HAL_DMA_Init+0xb8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a56      	ldr	r2, [pc, #344]	; (8006468 <HAL_DMA_Init+0x1e4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <HAL_DMA_Init+0xb8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a54      	ldr	r2, [pc, #336]	; (800646c <HAL_DMA_Init+0x1e8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00e      	beq.n	800633c <HAL_DMA_Init+0xb8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a53      	ldr	r2, [pc, #332]	; (8006470 <HAL_DMA_Init+0x1ec>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d009      	beq.n	800633c <HAL_DMA_Init+0xb8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a51      	ldr	r2, [pc, #324]	; (8006474 <HAL_DMA_Init+0x1f0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_DMA_Init+0xb8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a50      	ldr	r2, [pc, #320]	; (8006478 <HAL_DMA_Init+0x1f4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d101      	bne.n	8006340 <HAL_DMA_Init+0xbc>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_DMA_Init+0xbe>
 8006340:	2300      	movs	r3, #0
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 813b 	beq.w	80065be <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a37      	ldr	r2, [pc, #220]	; (800643c <HAL_DMA_Init+0x1b8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d04a      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a36      	ldr	r2, [pc, #216]	; (8006440 <HAL_DMA_Init+0x1bc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d045      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a34      	ldr	r2, [pc, #208]	; (8006444 <HAL_DMA_Init+0x1c0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d040      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a33      	ldr	r2, [pc, #204]	; (8006448 <HAL_DMA_Init+0x1c4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d03b      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a31      	ldr	r2, [pc, #196]	; (800644c <HAL_DMA_Init+0x1c8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d036      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a30      	ldr	r2, [pc, #192]	; (8006450 <HAL_DMA_Init+0x1cc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d031      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2e      	ldr	r2, [pc, #184]	; (8006454 <HAL_DMA_Init+0x1d0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d02c      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2d      	ldr	r2, [pc, #180]	; (8006458 <HAL_DMA_Init+0x1d4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d027      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2b      	ldr	r2, [pc, #172]	; (800645c <HAL_DMA_Init+0x1d8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d022      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <HAL_DMA_Init+0x1dc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d01d      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a28      	ldr	r2, [pc, #160]	; (8006464 <HAL_DMA_Init+0x1e0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a27      	ldr	r2, [pc, #156]	; (8006468 <HAL_DMA_Init+0x1e4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a25      	ldr	r2, [pc, #148]	; (800646c <HAL_DMA_Init+0x1e8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a24      	ldr	r2, [pc, #144]	; (8006470 <HAL_DMA_Init+0x1ec>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a22      	ldr	r2, [pc, #136]	; (8006474 <HAL_DMA_Init+0x1f0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_DMA_Init+0x174>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a21      	ldr	r2, [pc, #132]	; (8006478 <HAL_DMA_Init+0x1f4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d108      	bne.n	800640a <HAL_DMA_Init+0x186>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e007      	b.n	800641a <HAL_DMA_Init+0x196>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0201 	bic.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800641a:	e02f      	b.n	800647c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800641c:	f7fd fe0a 	bl	8004034 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b05      	cmp	r3, #5
 8006428:	d928      	bls.n	800647c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2203      	movs	r2, #3
 8006434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e246      	b.n	80068ca <HAL_DMA_Init+0x646>
 800643c:	40020010 	.word	0x40020010
 8006440:	40020028 	.word	0x40020028
 8006444:	40020040 	.word	0x40020040
 8006448:	40020058 	.word	0x40020058
 800644c:	40020070 	.word	0x40020070
 8006450:	40020088 	.word	0x40020088
 8006454:	400200a0 	.word	0x400200a0
 8006458:	400200b8 	.word	0x400200b8
 800645c:	40020410 	.word	0x40020410
 8006460:	40020428 	.word	0x40020428
 8006464:	40020440 	.word	0x40020440
 8006468:	40020458 	.word	0x40020458
 800646c:	40020470 	.word	0x40020470
 8006470:	40020488 	.word	0x40020488
 8006474:	400204a0 	.word	0x400204a0
 8006478:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1c8      	bne.n	800641c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4b83      	ldr	r3, [pc, #524]	; (80066a4 <HAL_DMA_Init+0x420>)
 8006496:	4013      	ands	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80064a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d107      	bne.n	80064e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	4313      	orrs	r3, r2
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80064e0:	4b71      	ldr	r3, [pc, #452]	; (80066a8 <HAL_DMA_Init+0x424>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	4b71      	ldr	r3, [pc, #452]	; (80066ac <HAL_DMA_Init+0x428>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ec:	d328      	bcc.n	8006540 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b28      	cmp	r3, #40	; 0x28
 80064f4:	d903      	bls.n	80064fe <HAL_DMA_Init+0x27a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b2e      	cmp	r3, #46	; 0x2e
 80064fc:	d917      	bls.n	800652e <HAL_DMA_Init+0x2aa>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b3e      	cmp	r3, #62	; 0x3e
 8006504:	d903      	bls.n	800650e <HAL_DMA_Init+0x28a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b42      	cmp	r3, #66	; 0x42
 800650c:	d90f      	bls.n	800652e <HAL_DMA_Init+0x2aa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b46      	cmp	r3, #70	; 0x46
 8006514:	d903      	bls.n	800651e <HAL_DMA_Init+0x29a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b48      	cmp	r3, #72	; 0x48
 800651c:	d907      	bls.n	800652e <HAL_DMA_Init+0x2aa>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b4e      	cmp	r3, #78	; 0x4e
 8006524:	d905      	bls.n	8006532 <HAL_DMA_Init+0x2ae>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b52      	cmp	r3, #82	; 0x52
 800652c:	d801      	bhi.n	8006532 <HAL_DMA_Init+0x2ae>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <HAL_DMA_Init+0x2b0>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800653e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 0307 	bic.w	r3, r3, #7
 8006556:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2b04      	cmp	r3, #4
 8006568:	d117      	bne.n	800659a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00e      	beq.n	800659a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 fb3f 	bl	8008c00 <DMA_CheckFifoParam>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2240      	movs	r2, #64	; 0x40
 800658c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e197      	b.n	80068ca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f002 fa7a 	bl	8008a9c <DMA_CalcBaseAndBitshift>
 80065a8:	4603      	mov	r3, r0
 80065aa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	223f      	movs	r2, #63	; 0x3f
 80065b6:	409a      	lsls	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	609a      	str	r2, [r3, #8]
 80065bc:	e0cd      	b.n	800675a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a3b      	ldr	r2, [pc, #236]	; (80066b0 <HAL_DMA_Init+0x42c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d022      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a39      	ldr	r2, [pc, #228]	; (80066b4 <HAL_DMA_Init+0x430>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01d      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a38      	ldr	r2, [pc, #224]	; (80066b8 <HAL_DMA_Init+0x434>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d018      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a36      	ldr	r2, [pc, #216]	; (80066bc <HAL_DMA_Init+0x438>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d013      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a35      	ldr	r2, [pc, #212]	; (80066c0 <HAL_DMA_Init+0x43c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00e      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a33      	ldr	r2, [pc, #204]	; (80066c4 <HAL_DMA_Init+0x440>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d009      	beq.n	800660e <HAL_DMA_Init+0x38a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a32      	ldr	r2, [pc, #200]	; (80066c8 <HAL_DMA_Init+0x444>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d004      	beq.n	800660e <HAL_DMA_Init+0x38a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a30      	ldr	r2, [pc, #192]	; (80066cc <HAL_DMA_Init+0x448>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d101      	bne.n	8006612 <HAL_DMA_Init+0x38e>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <HAL_DMA_Init+0x390>
 8006612:	2300      	movs	r3, #0
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8097 	beq.w	8006748 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a24      	ldr	r2, [pc, #144]	; (80066b0 <HAL_DMA_Init+0x42c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d021      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a22      	ldr	r2, [pc, #136]	; (80066b4 <HAL_DMA_Init+0x430>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01c      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a21      	ldr	r2, [pc, #132]	; (80066b8 <HAL_DMA_Init+0x434>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d017      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1f      	ldr	r2, [pc, #124]	; (80066bc <HAL_DMA_Init+0x438>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d012      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <HAL_DMA_Init+0x43c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00d      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <HAL_DMA_Init+0x440>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d008      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <HAL_DMA_Init+0x444>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <HAL_DMA_Init+0x3e4>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a19      	ldr	r2, [pc, #100]	; (80066cc <HAL_DMA_Init+0x448>)
 8006666:	4293      	cmp	r3, r2
 8006668:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <HAL_DMA_Init+0x44c>)
 8006686:	4013      	ands	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d020      	beq.n	80066d4 <HAL_DMA_Init+0x450>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	2b80      	cmp	r3, #128	; 0x80
 8006698:	d102      	bne.n	80066a0 <HAL_DMA_Init+0x41c>
 800669a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800669e:	e01a      	b.n	80066d6 <HAL_DMA_Init+0x452>
 80066a0:	2300      	movs	r3, #0
 80066a2:	e018      	b.n	80066d6 <HAL_DMA_Init+0x452>
 80066a4:	fe10803f 	.word	0xfe10803f
 80066a8:	5c001000 	.word	0x5c001000
 80066ac:	ffff0000 	.word	0xffff0000
 80066b0:	58025408 	.word	0x58025408
 80066b4:	5802541c 	.word	0x5802541c
 80066b8:	58025430 	.word	0x58025430
 80066bc:	58025444 	.word	0x58025444
 80066c0:	58025458 	.word	0x58025458
 80066c4:	5802546c 	.word	0x5802546c
 80066c8:	58025480 	.word	0x58025480
 80066cc:	58025494 	.word	0x58025494
 80066d0:	fffe000f 	.word	0xfffe000f
 80066d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68d2      	ldr	r2, [r2, #12]
 80066da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006704:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	4b6e      	ldr	r3, [pc, #440]	; (80068d4 <HAL_DMA_Init+0x650>)
 800671c:	4413      	add	r3, r2
 800671e:	4a6e      	ldr	r2, [pc, #440]	; (80068d8 <HAL_DMA_Init+0x654>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	009a      	lsls	r2, r3, #2
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f002 f9b5 	bl	8008a9c <DMA_CalcBaseAndBitshift>
 8006732:	4603      	mov	r3, r0
 8006734:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	2201      	movs	r2, #1
 8006740:	409a      	lsls	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	e008      	b.n	800675a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2240      	movs	r2, #64	; 0x40
 800674c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2203      	movs	r2, #3
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e0b7      	b.n	80068ca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a5f      	ldr	r2, [pc, #380]	; (80068dc <HAL_DMA_Init+0x658>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d072      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a5d      	ldr	r2, [pc, #372]	; (80068e0 <HAL_DMA_Init+0x65c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d06d      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a5c      	ldr	r2, [pc, #368]	; (80068e4 <HAL_DMA_Init+0x660>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d068      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a5a      	ldr	r2, [pc, #360]	; (80068e8 <HAL_DMA_Init+0x664>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d063      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a59      	ldr	r2, [pc, #356]	; (80068ec <HAL_DMA_Init+0x668>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d05e      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a57      	ldr	r2, [pc, #348]	; (80068f0 <HAL_DMA_Init+0x66c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d059      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a56      	ldr	r2, [pc, #344]	; (80068f4 <HAL_DMA_Init+0x670>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d054      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a54      	ldr	r2, [pc, #336]	; (80068f8 <HAL_DMA_Init+0x674>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04f      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a53      	ldr	r2, [pc, #332]	; (80068fc <HAL_DMA_Init+0x678>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d04a      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a51      	ldr	r2, [pc, #324]	; (8006900 <HAL_DMA_Init+0x67c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d045      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a50      	ldr	r2, [pc, #320]	; (8006904 <HAL_DMA_Init+0x680>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d040      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a4e      	ldr	r2, [pc, #312]	; (8006908 <HAL_DMA_Init+0x684>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d03b      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a4d      	ldr	r2, [pc, #308]	; (800690c <HAL_DMA_Init+0x688>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d036      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a4b      	ldr	r2, [pc, #300]	; (8006910 <HAL_DMA_Init+0x68c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d031      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a4a      	ldr	r2, [pc, #296]	; (8006914 <HAL_DMA_Init+0x690>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d02c      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a48      	ldr	r2, [pc, #288]	; (8006918 <HAL_DMA_Init+0x694>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d027      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a47      	ldr	r2, [pc, #284]	; (800691c <HAL_DMA_Init+0x698>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d022      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a45      	ldr	r2, [pc, #276]	; (8006920 <HAL_DMA_Init+0x69c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01d      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a44      	ldr	r2, [pc, #272]	; (8006924 <HAL_DMA_Init+0x6a0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d018      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a42      	ldr	r2, [pc, #264]	; (8006928 <HAL_DMA_Init+0x6a4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a41      	ldr	r2, [pc, #260]	; (800692c <HAL_DMA_Init+0x6a8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00e      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a3f      	ldr	r2, [pc, #252]	; (8006930 <HAL_DMA_Init+0x6ac>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d009      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a3e      	ldr	r2, [pc, #248]	; (8006934 <HAL_DMA_Init+0x6b0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d004      	beq.n	800684a <HAL_DMA_Init+0x5c6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a3c      	ldr	r2, [pc, #240]	; (8006938 <HAL_DMA_Init+0x6b4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <HAL_DMA_Init+0x5ca>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <HAL_DMA_Init+0x5cc>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d032      	beq.n	80068ba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f002 fa4f 	bl	8008cf8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b80      	cmp	r3, #128	; 0x80
 8006860:	d102      	bne.n	8006868 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800687c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d010      	beq.n	80068a8 <HAL_DMA_Init+0x624>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b08      	cmp	r3, #8
 800688c:	d80c      	bhi.n	80068a8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f002 facc 	bl	8008e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068a4:	605a      	str	r2, [r3, #4]
 80068a6:	e008      	b.n	80068ba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	a7fdabf8 	.word	0xa7fdabf8
 80068d8:	cccccccd 	.word	0xcccccccd
 80068dc:	40020010 	.word	0x40020010
 80068e0:	40020028 	.word	0x40020028
 80068e4:	40020040 	.word	0x40020040
 80068e8:	40020058 	.word	0x40020058
 80068ec:	40020070 	.word	0x40020070
 80068f0:	40020088 	.word	0x40020088
 80068f4:	400200a0 	.word	0x400200a0
 80068f8:	400200b8 	.word	0x400200b8
 80068fc:	40020410 	.word	0x40020410
 8006900:	40020428 	.word	0x40020428
 8006904:	40020440 	.word	0x40020440
 8006908:	40020458 	.word	0x40020458
 800690c:	40020470 	.word	0x40020470
 8006910:	40020488 	.word	0x40020488
 8006914:	400204a0 	.word	0x400204a0
 8006918:	400204b8 	.word	0x400204b8
 800691c:	58025408 	.word	0x58025408
 8006920:	5802541c 	.word	0x5802541c
 8006924:	58025430 	.word	0x58025430
 8006928:	58025444 	.word	0x58025444
 800692c:	58025458 	.word	0x58025458
 8006930:	5802546c 	.word	0x5802546c
 8006934:	58025480 	.word	0x58025480
 8006938:	58025494 	.word	0x58025494

0800693c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e226      	b.n	8006da6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_DMA_Start_IT+0x2a>
 8006962:	2302      	movs	r3, #2
 8006964:	e21f      	b.n	8006da6 <HAL_DMA_Start_IT+0x46a>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b01      	cmp	r3, #1
 8006978:	f040 820a 	bne.w	8006d90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a68      	ldr	r2, [pc, #416]	; (8006b30 <HAL_DMA_Start_IT+0x1f4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d04a      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a66      	ldr	r2, [pc, #408]	; (8006b34 <HAL_DMA_Start_IT+0x1f8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d045      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a65      	ldr	r2, [pc, #404]	; (8006b38 <HAL_DMA_Start_IT+0x1fc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d040      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a63      	ldr	r2, [pc, #396]	; (8006b3c <HAL_DMA_Start_IT+0x200>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d03b      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a62      	ldr	r2, [pc, #392]	; (8006b40 <HAL_DMA_Start_IT+0x204>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d036      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a60      	ldr	r2, [pc, #384]	; (8006b44 <HAL_DMA_Start_IT+0x208>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d031      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a5f      	ldr	r2, [pc, #380]	; (8006b48 <HAL_DMA_Start_IT+0x20c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d02c      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a5d      	ldr	r2, [pc, #372]	; (8006b4c <HAL_DMA_Start_IT+0x210>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d027      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a5c      	ldr	r2, [pc, #368]	; (8006b50 <HAL_DMA_Start_IT+0x214>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d022      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a5a      	ldr	r2, [pc, #360]	; (8006b54 <HAL_DMA_Start_IT+0x218>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01d      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a59      	ldr	r2, [pc, #356]	; (8006b58 <HAL_DMA_Start_IT+0x21c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d018      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a57      	ldr	r2, [pc, #348]	; (8006b5c <HAL_DMA_Start_IT+0x220>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d013      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a56      	ldr	r2, [pc, #344]	; (8006b60 <HAL_DMA_Start_IT+0x224>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00e      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a54      	ldr	r2, [pc, #336]	; (8006b64 <HAL_DMA_Start_IT+0x228>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a53      	ldr	r2, [pc, #332]	; (8006b68 <HAL_DMA_Start_IT+0x22c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_DMA_Start_IT+0xee>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a51      	ldr	r2, [pc, #324]	; (8006b6c <HAL_DMA_Start_IT+0x230>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d108      	bne.n	8006a3c <HAL_DMA_Start_IT+0x100>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0201 	bic.w	r2, r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e007      	b.n	8006a4c <HAL_DMA_Start_IT+0x110>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0201 	bic.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f001 fe76 	bl	8008744 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a34      	ldr	r2, [pc, #208]	; (8006b30 <HAL_DMA_Start_IT+0x1f4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d04a      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a33      	ldr	r2, [pc, #204]	; (8006b34 <HAL_DMA_Start_IT+0x1f8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d045      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a31      	ldr	r2, [pc, #196]	; (8006b38 <HAL_DMA_Start_IT+0x1fc>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d040      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a30      	ldr	r2, [pc, #192]	; (8006b3c <HAL_DMA_Start_IT+0x200>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d03b      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2e      	ldr	r2, [pc, #184]	; (8006b40 <HAL_DMA_Start_IT+0x204>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d036      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2d      	ldr	r2, [pc, #180]	; (8006b44 <HAL_DMA_Start_IT+0x208>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d031      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a2b      	ldr	r2, [pc, #172]	; (8006b48 <HAL_DMA_Start_IT+0x20c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d02c      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <HAL_DMA_Start_IT+0x210>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d027      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a28      	ldr	r2, [pc, #160]	; (8006b50 <HAL_DMA_Start_IT+0x214>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d022      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a27      	ldr	r2, [pc, #156]	; (8006b54 <HAL_DMA_Start_IT+0x218>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d01d      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a25      	ldr	r2, [pc, #148]	; (8006b58 <HAL_DMA_Start_IT+0x21c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d018      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <HAL_DMA_Start_IT+0x220>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <HAL_DMA_Start_IT+0x224>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00e      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <HAL_DMA_Start_IT+0x228>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d009      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <HAL_DMA_Start_IT+0x22c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_DMA_Start_IT+0x1bc>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1e      	ldr	r2, [pc, #120]	; (8006b6c <HAL_DMA_Start_IT+0x230>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d101      	bne.n	8006afc <HAL_DMA_Start_IT+0x1c0>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <HAL_DMA_Start_IT+0x1c2>
 8006afc:	2300      	movs	r3, #0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d036      	beq.n	8006b70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f023 021e 	bic.w	r2, r3, #30
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0216 	orr.w	r2, r2, #22
 8006b14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d03e      	beq.n	8006b9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0208 	orr.w	r2, r2, #8
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e035      	b.n	8006b9c <HAL_DMA_Start_IT+0x260>
 8006b30:	40020010 	.word	0x40020010
 8006b34:	40020028 	.word	0x40020028
 8006b38:	40020040 	.word	0x40020040
 8006b3c:	40020058 	.word	0x40020058
 8006b40:	40020070 	.word	0x40020070
 8006b44:	40020088 	.word	0x40020088
 8006b48:	400200a0 	.word	0x400200a0
 8006b4c:	400200b8 	.word	0x400200b8
 8006b50:	40020410 	.word	0x40020410
 8006b54:	40020428 	.word	0x40020428
 8006b58:	40020440 	.word	0x40020440
 8006b5c:	40020458 	.word	0x40020458
 8006b60:	40020470 	.word	0x40020470
 8006b64:	40020488 	.word	0x40020488
 8006b68:	400204a0 	.word	0x400204a0
 8006b6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 020e 	bic.w	r2, r3, #14
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 020a 	orr.w	r2, r2, #10
 8006b82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0204 	orr.w	r2, r2, #4
 8006b9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a83      	ldr	r2, [pc, #524]	; (8006db0 <HAL_DMA_Start_IT+0x474>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d072      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a82      	ldr	r2, [pc, #520]	; (8006db4 <HAL_DMA_Start_IT+0x478>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d06d      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a80      	ldr	r2, [pc, #512]	; (8006db8 <HAL_DMA_Start_IT+0x47c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d068      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a7f      	ldr	r2, [pc, #508]	; (8006dbc <HAL_DMA_Start_IT+0x480>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d063      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a7d      	ldr	r2, [pc, #500]	; (8006dc0 <HAL_DMA_Start_IT+0x484>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d05e      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a7c      	ldr	r2, [pc, #496]	; (8006dc4 <HAL_DMA_Start_IT+0x488>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d059      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a7a      	ldr	r2, [pc, #488]	; (8006dc8 <HAL_DMA_Start_IT+0x48c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d054      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a79      	ldr	r2, [pc, #484]	; (8006dcc <HAL_DMA_Start_IT+0x490>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d04f      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a77      	ldr	r2, [pc, #476]	; (8006dd0 <HAL_DMA_Start_IT+0x494>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d04a      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a76      	ldr	r2, [pc, #472]	; (8006dd4 <HAL_DMA_Start_IT+0x498>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d045      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a74      	ldr	r2, [pc, #464]	; (8006dd8 <HAL_DMA_Start_IT+0x49c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d040      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a73      	ldr	r2, [pc, #460]	; (8006ddc <HAL_DMA_Start_IT+0x4a0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d03b      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a71      	ldr	r2, [pc, #452]	; (8006de0 <HAL_DMA_Start_IT+0x4a4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d036      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a70      	ldr	r2, [pc, #448]	; (8006de4 <HAL_DMA_Start_IT+0x4a8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d031      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6e      	ldr	r2, [pc, #440]	; (8006de8 <HAL_DMA_Start_IT+0x4ac>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02c      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a6d      	ldr	r2, [pc, #436]	; (8006dec <HAL_DMA_Start_IT+0x4b0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d027      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a6b      	ldr	r2, [pc, #428]	; (8006df0 <HAL_DMA_Start_IT+0x4b4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d022      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a6a      	ldr	r2, [pc, #424]	; (8006df4 <HAL_DMA_Start_IT+0x4b8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d01d      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a68      	ldr	r2, [pc, #416]	; (8006df8 <HAL_DMA_Start_IT+0x4bc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d018      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a67      	ldr	r2, [pc, #412]	; (8006dfc <HAL_DMA_Start_IT+0x4c0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d013      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a65      	ldr	r2, [pc, #404]	; (8006e00 <HAL_DMA_Start_IT+0x4c4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00e      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a64      	ldr	r2, [pc, #400]	; (8006e04 <HAL_DMA_Start_IT+0x4c8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d009      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a62      	ldr	r2, [pc, #392]	; (8006e08 <HAL_DMA_Start_IT+0x4cc>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_DMA_Start_IT+0x350>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a61      	ldr	r2, [pc, #388]	; (8006e0c <HAL_DMA_Start_IT+0x4d0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d101      	bne.n	8006c90 <HAL_DMA_Start_IT+0x354>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <HAL_DMA_Start_IT+0x356>
 8006c90:	2300      	movs	r3, #0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01a      	beq.n	8006ccc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a37      	ldr	r2, [pc, #220]	; (8006db0 <HAL_DMA_Start_IT+0x474>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d04a      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a36      	ldr	r2, [pc, #216]	; (8006db4 <HAL_DMA_Start_IT+0x478>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d045      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a34      	ldr	r2, [pc, #208]	; (8006db8 <HAL_DMA_Start_IT+0x47c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d040      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a33      	ldr	r2, [pc, #204]	; (8006dbc <HAL_DMA_Start_IT+0x480>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d03b      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a31      	ldr	r2, [pc, #196]	; (8006dc0 <HAL_DMA_Start_IT+0x484>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d036      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a30      	ldr	r2, [pc, #192]	; (8006dc4 <HAL_DMA_Start_IT+0x488>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d031      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2e      	ldr	r2, [pc, #184]	; (8006dc8 <HAL_DMA_Start_IT+0x48c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d02c      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2d      	ldr	r2, [pc, #180]	; (8006dcc <HAL_DMA_Start_IT+0x490>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d027      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a2b      	ldr	r2, [pc, #172]	; (8006dd0 <HAL_DMA_Start_IT+0x494>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d022      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <HAL_DMA_Start_IT+0x498>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d01d      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a28      	ldr	r2, [pc, #160]	; (8006dd8 <HAL_DMA_Start_IT+0x49c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d018      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <HAL_DMA_Start_IT+0x4a0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d013      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a25      	ldr	r2, [pc, #148]	; (8006de0 <HAL_DMA_Start_IT+0x4a4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00e      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a24      	ldr	r2, [pc, #144]	; (8006de4 <HAL_DMA_Start_IT+0x4a8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d009      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a22      	ldr	r2, [pc, #136]	; (8006de8 <HAL_DMA_Start_IT+0x4ac>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d004      	beq.n	8006d6c <HAL_DMA_Start_IT+0x430>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a21      	ldr	r2, [pc, #132]	; (8006dec <HAL_DMA_Start_IT+0x4b0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d108      	bne.n	8006d7e <HAL_DMA_Start_IT+0x442>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e012      	b.n	8006da4 <HAL_DMA_Start_IT+0x468>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0201 	orr.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e009      	b.n	8006da4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	40020010 	.word	0x40020010
 8006db4:	40020028 	.word	0x40020028
 8006db8:	40020040 	.word	0x40020040
 8006dbc:	40020058 	.word	0x40020058
 8006dc0:	40020070 	.word	0x40020070
 8006dc4:	40020088 	.word	0x40020088
 8006dc8:	400200a0 	.word	0x400200a0
 8006dcc:	400200b8 	.word	0x400200b8
 8006dd0:	40020410 	.word	0x40020410
 8006dd4:	40020428 	.word	0x40020428
 8006dd8:	40020440 	.word	0x40020440
 8006ddc:	40020458 	.word	0x40020458
 8006de0:	40020470 	.word	0x40020470
 8006de4:	40020488 	.word	0x40020488
 8006de8:	400204a0 	.word	0x400204a0
 8006dec:	400204b8 	.word	0x400204b8
 8006df0:	58025408 	.word	0x58025408
 8006df4:	5802541c 	.word	0x5802541c
 8006df8:	58025430 	.word	0x58025430
 8006dfc:	58025444 	.word	0x58025444
 8006e00:	58025458 	.word	0x58025458
 8006e04:	5802546c 	.word	0x5802546c
 8006e08:	58025480 	.word	0x58025480
 8006e0c:	58025494 	.word	0x58025494

08006e10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e18:	f7fd f90c 	bl	8004034 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e2dc      	b.n	80073e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d008      	beq.n	8006e46 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2280      	movs	r2, #128	; 0x80
 8006e38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e2cd      	b.n	80073e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a76      	ldr	r2, [pc, #472]	; (8007024 <HAL_DMA_Abort+0x214>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d04a      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a74      	ldr	r2, [pc, #464]	; (8007028 <HAL_DMA_Abort+0x218>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d045      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a73      	ldr	r2, [pc, #460]	; (800702c <HAL_DMA_Abort+0x21c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d040      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a71      	ldr	r2, [pc, #452]	; (8007030 <HAL_DMA_Abort+0x220>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d03b      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a70      	ldr	r2, [pc, #448]	; (8007034 <HAL_DMA_Abort+0x224>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d036      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6e      	ldr	r2, [pc, #440]	; (8007038 <HAL_DMA_Abort+0x228>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d031      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6d      	ldr	r2, [pc, #436]	; (800703c <HAL_DMA_Abort+0x22c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d02c      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6b      	ldr	r2, [pc, #428]	; (8007040 <HAL_DMA_Abort+0x230>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d027      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6a      	ldr	r2, [pc, #424]	; (8007044 <HAL_DMA_Abort+0x234>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d022      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a68      	ldr	r2, [pc, #416]	; (8007048 <HAL_DMA_Abort+0x238>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01d      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a67      	ldr	r2, [pc, #412]	; (800704c <HAL_DMA_Abort+0x23c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d018      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a65      	ldr	r2, [pc, #404]	; (8007050 <HAL_DMA_Abort+0x240>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d013      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a64      	ldr	r2, [pc, #400]	; (8007054 <HAL_DMA_Abort+0x244>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a62      	ldr	r2, [pc, #392]	; (8007058 <HAL_DMA_Abort+0x248>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d009      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a61      	ldr	r2, [pc, #388]	; (800705c <HAL_DMA_Abort+0x24c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <HAL_DMA_Abort+0xd6>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5f      	ldr	r2, [pc, #380]	; (8007060 <HAL_DMA_Abort+0x250>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d101      	bne.n	8006eea <HAL_DMA_Abort+0xda>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <HAL_DMA_Abort+0xdc>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d013      	beq.n	8006f18 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 021e 	bic.w	r2, r2, #30
 8006efe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695a      	ldr	r2, [r3, #20]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f0e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	e00a      	b.n	8006f2e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 020e 	bic.w	r2, r2, #14
 8006f26:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a3c      	ldr	r2, [pc, #240]	; (8007024 <HAL_DMA_Abort+0x214>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d072      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a3a      	ldr	r2, [pc, #232]	; (8007028 <HAL_DMA_Abort+0x218>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d06d      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a39      	ldr	r2, [pc, #228]	; (800702c <HAL_DMA_Abort+0x21c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d068      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a37      	ldr	r2, [pc, #220]	; (8007030 <HAL_DMA_Abort+0x220>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d063      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a36      	ldr	r2, [pc, #216]	; (8007034 <HAL_DMA_Abort+0x224>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d05e      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a34      	ldr	r2, [pc, #208]	; (8007038 <HAL_DMA_Abort+0x228>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d059      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a33      	ldr	r2, [pc, #204]	; (800703c <HAL_DMA_Abort+0x22c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d054      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a31      	ldr	r2, [pc, #196]	; (8007040 <HAL_DMA_Abort+0x230>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d04f      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a30      	ldr	r2, [pc, #192]	; (8007044 <HAL_DMA_Abort+0x234>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d04a      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a2e      	ldr	r2, [pc, #184]	; (8007048 <HAL_DMA_Abort+0x238>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d045      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a2d      	ldr	r2, [pc, #180]	; (800704c <HAL_DMA_Abort+0x23c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d040      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a2b      	ldr	r2, [pc, #172]	; (8007050 <HAL_DMA_Abort+0x240>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d03b      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a2a      	ldr	r2, [pc, #168]	; (8007054 <HAL_DMA_Abort+0x244>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d036      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a28      	ldr	r2, [pc, #160]	; (8007058 <HAL_DMA_Abort+0x248>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d031      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a27      	ldr	r2, [pc, #156]	; (800705c <HAL_DMA_Abort+0x24c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d02c      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a25      	ldr	r2, [pc, #148]	; (8007060 <HAL_DMA_Abort+0x250>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d027      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a24      	ldr	r2, [pc, #144]	; (8007064 <HAL_DMA_Abort+0x254>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d022      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a22      	ldr	r2, [pc, #136]	; (8007068 <HAL_DMA_Abort+0x258>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a21      	ldr	r2, [pc, #132]	; (800706c <HAL_DMA_Abort+0x25c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d018      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1f      	ldr	r2, [pc, #124]	; (8007070 <HAL_DMA_Abort+0x260>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <HAL_DMA_Abort+0x264>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <HAL_DMA_Abort+0x268>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1b      	ldr	r2, [pc, #108]	; (800707c <HAL_DMA_Abort+0x26c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_DMA_Abort+0x20e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a19      	ldr	r2, [pc, #100]	; (8007080 <HAL_DMA_Abort+0x270>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d132      	bne.n	8007084 <HAL_DMA_Abort+0x274>
 800701e:	2301      	movs	r3, #1
 8007020:	e031      	b.n	8007086 <HAL_DMA_Abort+0x276>
 8007022:	bf00      	nop
 8007024:	40020010 	.word	0x40020010
 8007028:	40020028 	.word	0x40020028
 800702c:	40020040 	.word	0x40020040
 8007030:	40020058 	.word	0x40020058
 8007034:	40020070 	.word	0x40020070
 8007038:	40020088 	.word	0x40020088
 800703c:	400200a0 	.word	0x400200a0
 8007040:	400200b8 	.word	0x400200b8
 8007044:	40020410 	.word	0x40020410
 8007048:	40020428 	.word	0x40020428
 800704c:	40020440 	.word	0x40020440
 8007050:	40020458 	.word	0x40020458
 8007054:	40020470 	.word	0x40020470
 8007058:	40020488 	.word	0x40020488
 800705c:	400204a0 	.word	0x400204a0
 8007060:	400204b8 	.word	0x400204b8
 8007064:	58025408 	.word	0x58025408
 8007068:	5802541c 	.word	0x5802541c
 800706c:	58025430 	.word	0x58025430
 8007070:	58025444 	.word	0x58025444
 8007074:	58025458 	.word	0x58025458
 8007078:	5802546c 	.word	0x5802546c
 800707c:	58025480 	.word	0x58025480
 8007080:	58025494 	.word	0x58025494
 8007084:	2300      	movs	r3, #0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d007      	beq.n	800709a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007098:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a6d      	ldr	r2, [pc, #436]	; (8007254 <HAL_DMA_Abort+0x444>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d04a      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a6b      	ldr	r2, [pc, #428]	; (8007258 <HAL_DMA_Abort+0x448>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d045      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a6a      	ldr	r2, [pc, #424]	; (800725c <HAL_DMA_Abort+0x44c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d040      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a68      	ldr	r2, [pc, #416]	; (8007260 <HAL_DMA_Abort+0x450>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d03b      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a67      	ldr	r2, [pc, #412]	; (8007264 <HAL_DMA_Abort+0x454>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d036      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a65      	ldr	r2, [pc, #404]	; (8007268 <HAL_DMA_Abort+0x458>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d031      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a64      	ldr	r2, [pc, #400]	; (800726c <HAL_DMA_Abort+0x45c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d02c      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a62      	ldr	r2, [pc, #392]	; (8007270 <HAL_DMA_Abort+0x460>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d027      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a61      	ldr	r2, [pc, #388]	; (8007274 <HAL_DMA_Abort+0x464>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d022      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a5f      	ldr	r2, [pc, #380]	; (8007278 <HAL_DMA_Abort+0x468>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01d      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a5e      	ldr	r2, [pc, #376]	; (800727c <HAL_DMA_Abort+0x46c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d018      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a5c      	ldr	r2, [pc, #368]	; (8007280 <HAL_DMA_Abort+0x470>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a5b      	ldr	r2, [pc, #364]	; (8007284 <HAL_DMA_Abort+0x474>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00e      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a59      	ldr	r2, [pc, #356]	; (8007288 <HAL_DMA_Abort+0x478>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d009      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a58      	ldr	r2, [pc, #352]	; (800728c <HAL_DMA_Abort+0x47c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d004      	beq.n	800713a <HAL_DMA_Abort+0x32a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a56      	ldr	r2, [pc, #344]	; (8007290 <HAL_DMA_Abort+0x480>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d108      	bne.n	800714c <HAL_DMA_Abort+0x33c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e007      	b.n	800715c <HAL_DMA_Abort+0x34c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800715c:	e013      	b.n	8007186 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800715e:	f7fc ff69 	bl	8004034 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b05      	cmp	r3, #5
 800716a:	d90c      	bls.n	8007186 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2203      	movs	r2, #3
 8007176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e12d      	b.n	80073e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e5      	bne.n	800715e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a2f      	ldr	r2, [pc, #188]	; (8007254 <HAL_DMA_Abort+0x444>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d04a      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a2d      	ldr	r2, [pc, #180]	; (8007258 <HAL_DMA_Abort+0x448>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d045      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a2c      	ldr	r2, [pc, #176]	; (800725c <HAL_DMA_Abort+0x44c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d040      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a2a      	ldr	r2, [pc, #168]	; (8007260 <HAL_DMA_Abort+0x450>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d03b      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a29      	ldr	r2, [pc, #164]	; (8007264 <HAL_DMA_Abort+0x454>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d036      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a27      	ldr	r2, [pc, #156]	; (8007268 <HAL_DMA_Abort+0x458>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d031      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a26      	ldr	r2, [pc, #152]	; (800726c <HAL_DMA_Abort+0x45c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d02c      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a24      	ldr	r2, [pc, #144]	; (8007270 <HAL_DMA_Abort+0x460>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d027      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a23      	ldr	r2, [pc, #140]	; (8007274 <HAL_DMA_Abort+0x464>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d022      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a21      	ldr	r2, [pc, #132]	; (8007278 <HAL_DMA_Abort+0x468>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01d      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a20      	ldr	r2, [pc, #128]	; (800727c <HAL_DMA_Abort+0x46c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d018      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <HAL_DMA_Abort+0x470>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <HAL_DMA_Abort+0x474>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00e      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <HAL_DMA_Abort+0x478>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d009      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1a      	ldr	r2, [pc, #104]	; (800728c <HAL_DMA_Abort+0x47c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_DMA_Abort+0x422>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a18      	ldr	r2, [pc, #96]	; (8007290 <HAL_DMA_Abort+0x480>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d101      	bne.n	8007236 <HAL_DMA_Abort+0x426>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <HAL_DMA_Abort+0x428>
 8007236:	2300      	movs	r3, #0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02b      	beq.n	8007294 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007240:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	223f      	movs	r2, #63	; 0x3f
 800724c:	409a      	lsls	r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	609a      	str	r2, [r3, #8]
 8007252:	e02a      	b.n	80072aa <HAL_DMA_Abort+0x49a>
 8007254:	40020010 	.word	0x40020010
 8007258:	40020028 	.word	0x40020028
 800725c:	40020040 	.word	0x40020040
 8007260:	40020058 	.word	0x40020058
 8007264:	40020070 	.word	0x40020070
 8007268:	40020088 	.word	0x40020088
 800726c:	400200a0 	.word	0x400200a0
 8007270:	400200b8 	.word	0x400200b8
 8007274:	40020410 	.word	0x40020410
 8007278:	40020428 	.word	0x40020428
 800727c:	40020440 	.word	0x40020440
 8007280:	40020458 	.word	0x40020458
 8007284:	40020470 	.word	0x40020470
 8007288:	40020488 	.word	0x40020488
 800728c:	400204a0 	.word	0x400204a0
 8007290:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007298:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729e:	f003 031f 	and.w	r3, r3, #31
 80072a2:	2201      	movs	r2, #1
 80072a4:	409a      	lsls	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a4f      	ldr	r2, [pc, #316]	; (80073ec <HAL_DMA_Abort+0x5dc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d072      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a4d      	ldr	r2, [pc, #308]	; (80073f0 <HAL_DMA_Abort+0x5e0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d06d      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a4c      	ldr	r2, [pc, #304]	; (80073f4 <HAL_DMA_Abort+0x5e4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d068      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a4a      	ldr	r2, [pc, #296]	; (80073f8 <HAL_DMA_Abort+0x5e8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d063      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a49      	ldr	r2, [pc, #292]	; (80073fc <HAL_DMA_Abort+0x5ec>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d05e      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a47      	ldr	r2, [pc, #284]	; (8007400 <HAL_DMA_Abort+0x5f0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d059      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a46      	ldr	r2, [pc, #280]	; (8007404 <HAL_DMA_Abort+0x5f4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d054      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a44      	ldr	r2, [pc, #272]	; (8007408 <HAL_DMA_Abort+0x5f8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d04f      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a43      	ldr	r2, [pc, #268]	; (800740c <HAL_DMA_Abort+0x5fc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d04a      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a41      	ldr	r2, [pc, #260]	; (8007410 <HAL_DMA_Abort+0x600>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d045      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a40      	ldr	r2, [pc, #256]	; (8007414 <HAL_DMA_Abort+0x604>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d040      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a3e      	ldr	r2, [pc, #248]	; (8007418 <HAL_DMA_Abort+0x608>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d03b      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a3d      	ldr	r2, [pc, #244]	; (800741c <HAL_DMA_Abort+0x60c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d036      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a3b      	ldr	r2, [pc, #236]	; (8007420 <HAL_DMA_Abort+0x610>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d031      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a3a      	ldr	r2, [pc, #232]	; (8007424 <HAL_DMA_Abort+0x614>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d02c      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a38      	ldr	r2, [pc, #224]	; (8007428 <HAL_DMA_Abort+0x618>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d027      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a37      	ldr	r2, [pc, #220]	; (800742c <HAL_DMA_Abort+0x61c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a35      	ldr	r2, [pc, #212]	; (8007430 <HAL_DMA_Abort+0x620>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01d      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a34      	ldr	r2, [pc, #208]	; (8007434 <HAL_DMA_Abort+0x624>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a32      	ldr	r2, [pc, #200]	; (8007438 <HAL_DMA_Abort+0x628>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a31      	ldr	r2, [pc, #196]	; (800743c <HAL_DMA_Abort+0x62c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a2f      	ldr	r2, [pc, #188]	; (8007440 <HAL_DMA_Abort+0x630>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2e      	ldr	r2, [pc, #184]	; (8007444 <HAL_DMA_Abort+0x634>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_DMA_Abort+0x58a>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2c      	ldr	r2, [pc, #176]	; (8007448 <HAL_DMA_Abort+0x638>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d101      	bne.n	800739e <HAL_DMA_Abort+0x58e>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <HAL_DMA_Abort+0x590>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d015      	beq.n	80073d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00c      	beq.n	80073d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40020010 	.word	0x40020010
 80073f0:	40020028 	.word	0x40020028
 80073f4:	40020040 	.word	0x40020040
 80073f8:	40020058 	.word	0x40020058
 80073fc:	40020070 	.word	0x40020070
 8007400:	40020088 	.word	0x40020088
 8007404:	400200a0 	.word	0x400200a0
 8007408:	400200b8 	.word	0x400200b8
 800740c:	40020410 	.word	0x40020410
 8007410:	40020428 	.word	0x40020428
 8007414:	40020440 	.word	0x40020440
 8007418:	40020458 	.word	0x40020458
 800741c:	40020470 	.word	0x40020470
 8007420:	40020488 	.word	0x40020488
 8007424:	400204a0 	.word	0x400204a0
 8007428:	400204b8 	.word	0x400204b8
 800742c:	58025408 	.word	0x58025408
 8007430:	5802541c 	.word	0x5802541c
 8007434:	58025430 	.word	0x58025430
 8007438:	58025444 	.word	0x58025444
 800743c:	58025458 	.word	0x58025458
 8007440:	5802546c 	.word	0x5802546c
 8007444:	58025480 	.word	0x58025480
 8007448:	58025494 	.word	0x58025494

0800744c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e237      	b.n	80078ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d004      	beq.n	8007474 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e22c      	b.n	80078ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a5c      	ldr	r2, [pc, #368]	; (80075ec <HAL_DMA_Abort_IT+0x1a0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d04a      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a5b      	ldr	r2, [pc, #364]	; (80075f0 <HAL_DMA_Abort_IT+0x1a4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d045      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a59      	ldr	r2, [pc, #356]	; (80075f4 <HAL_DMA_Abort_IT+0x1a8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d040      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a58      	ldr	r2, [pc, #352]	; (80075f8 <HAL_DMA_Abort_IT+0x1ac>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d03b      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a56      	ldr	r2, [pc, #344]	; (80075fc <HAL_DMA_Abort_IT+0x1b0>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d036      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a55      	ldr	r2, [pc, #340]	; (8007600 <HAL_DMA_Abort_IT+0x1b4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d031      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a53      	ldr	r2, [pc, #332]	; (8007604 <HAL_DMA_Abort_IT+0x1b8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d02c      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a52      	ldr	r2, [pc, #328]	; (8007608 <HAL_DMA_Abort_IT+0x1bc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d027      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a50      	ldr	r2, [pc, #320]	; (800760c <HAL_DMA_Abort_IT+0x1c0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d022      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a4f      	ldr	r2, [pc, #316]	; (8007610 <HAL_DMA_Abort_IT+0x1c4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d01d      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a4d      	ldr	r2, [pc, #308]	; (8007614 <HAL_DMA_Abort_IT+0x1c8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d018      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a4c      	ldr	r2, [pc, #304]	; (8007618 <HAL_DMA_Abort_IT+0x1cc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a4a      	ldr	r2, [pc, #296]	; (800761c <HAL_DMA_Abort_IT+0x1d0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00e      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a49      	ldr	r2, [pc, #292]	; (8007620 <HAL_DMA_Abort_IT+0x1d4>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d009      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a47      	ldr	r2, [pc, #284]	; (8007624 <HAL_DMA_Abort_IT+0x1d8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <HAL_DMA_Abort_IT+0xc8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a46      	ldr	r2, [pc, #280]	; (8007628 <HAL_DMA_Abort_IT+0x1dc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d101      	bne.n	8007518 <HAL_DMA_Abort_IT+0xcc>
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <HAL_DMA_Abort_IT+0xce>
 8007518:	2300      	movs	r3, #0
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8086 	beq.w	800762c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2204      	movs	r2, #4
 8007524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a2f      	ldr	r2, [pc, #188]	; (80075ec <HAL_DMA_Abort_IT+0x1a0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d04a      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a2e      	ldr	r2, [pc, #184]	; (80075f0 <HAL_DMA_Abort_IT+0x1a4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d045      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a2c      	ldr	r2, [pc, #176]	; (80075f4 <HAL_DMA_Abort_IT+0x1a8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d040      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a2b      	ldr	r2, [pc, #172]	; (80075f8 <HAL_DMA_Abort_IT+0x1ac>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d03b      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a29      	ldr	r2, [pc, #164]	; (80075fc <HAL_DMA_Abort_IT+0x1b0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d036      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a28      	ldr	r2, [pc, #160]	; (8007600 <HAL_DMA_Abort_IT+0x1b4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d031      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a26      	ldr	r2, [pc, #152]	; (8007604 <HAL_DMA_Abort_IT+0x1b8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d02c      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a25      	ldr	r2, [pc, #148]	; (8007608 <HAL_DMA_Abort_IT+0x1bc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d027      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a23      	ldr	r2, [pc, #140]	; (800760c <HAL_DMA_Abort_IT+0x1c0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d022      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a22      	ldr	r2, [pc, #136]	; (8007610 <HAL_DMA_Abort_IT+0x1c4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d01d      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a20      	ldr	r2, [pc, #128]	; (8007614 <HAL_DMA_Abort_IT+0x1c8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d018      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a1f      	ldr	r2, [pc, #124]	; (8007618 <HAL_DMA_Abort_IT+0x1cc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d013      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a1d      	ldr	r2, [pc, #116]	; (800761c <HAL_DMA_Abort_IT+0x1d0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00e      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a1c      	ldr	r2, [pc, #112]	; (8007620 <HAL_DMA_Abort_IT+0x1d4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d009      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a1a      	ldr	r2, [pc, #104]	; (8007624 <HAL_DMA_Abort_IT+0x1d8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d004      	beq.n	80075c8 <HAL_DMA_Abort_IT+0x17c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a19      	ldr	r2, [pc, #100]	; (8007628 <HAL_DMA_Abort_IT+0x1dc>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d108      	bne.n	80075da <HAL_DMA_Abort_IT+0x18e>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	e178      	b.n	80078cc <HAL_DMA_Abort_IT+0x480>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0201 	bic.w	r2, r2, #1
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e16f      	b.n	80078cc <HAL_DMA_Abort_IT+0x480>
 80075ec:	40020010 	.word	0x40020010
 80075f0:	40020028 	.word	0x40020028
 80075f4:	40020040 	.word	0x40020040
 80075f8:	40020058 	.word	0x40020058
 80075fc:	40020070 	.word	0x40020070
 8007600:	40020088 	.word	0x40020088
 8007604:	400200a0 	.word	0x400200a0
 8007608:	400200b8 	.word	0x400200b8
 800760c:	40020410 	.word	0x40020410
 8007610:	40020428 	.word	0x40020428
 8007614:	40020440 	.word	0x40020440
 8007618:	40020458 	.word	0x40020458
 800761c:	40020470 	.word	0x40020470
 8007620:	40020488 	.word	0x40020488
 8007624:	400204a0 	.word	0x400204a0
 8007628:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 020e 	bic.w	r2, r2, #14
 800763a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a6c      	ldr	r2, [pc, #432]	; (80077f4 <HAL_DMA_Abort_IT+0x3a8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d04a      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a6b      	ldr	r2, [pc, #428]	; (80077f8 <HAL_DMA_Abort_IT+0x3ac>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d045      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a69      	ldr	r2, [pc, #420]	; (80077fc <HAL_DMA_Abort_IT+0x3b0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d040      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a68      	ldr	r2, [pc, #416]	; (8007800 <HAL_DMA_Abort_IT+0x3b4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d03b      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a66      	ldr	r2, [pc, #408]	; (8007804 <HAL_DMA_Abort_IT+0x3b8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d036      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a65      	ldr	r2, [pc, #404]	; (8007808 <HAL_DMA_Abort_IT+0x3bc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d031      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a63      	ldr	r2, [pc, #396]	; (800780c <HAL_DMA_Abort_IT+0x3c0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d02c      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a62      	ldr	r2, [pc, #392]	; (8007810 <HAL_DMA_Abort_IT+0x3c4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d027      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a60      	ldr	r2, [pc, #384]	; (8007814 <HAL_DMA_Abort_IT+0x3c8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d022      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a5f      	ldr	r2, [pc, #380]	; (8007818 <HAL_DMA_Abort_IT+0x3cc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d01d      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a5d      	ldr	r2, [pc, #372]	; (800781c <HAL_DMA_Abort_IT+0x3d0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d018      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a5c      	ldr	r2, [pc, #368]	; (8007820 <HAL_DMA_Abort_IT+0x3d4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d013      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a5a      	ldr	r2, [pc, #360]	; (8007824 <HAL_DMA_Abort_IT+0x3d8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00e      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a59      	ldr	r2, [pc, #356]	; (8007828 <HAL_DMA_Abort_IT+0x3dc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d009      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a57      	ldr	r2, [pc, #348]	; (800782c <HAL_DMA_Abort_IT+0x3e0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d004      	beq.n	80076dc <HAL_DMA_Abort_IT+0x290>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a56      	ldr	r2, [pc, #344]	; (8007830 <HAL_DMA_Abort_IT+0x3e4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d108      	bne.n	80076ee <HAL_DMA_Abort_IT+0x2a2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	e007      	b.n	80076fe <HAL_DMA_Abort_IT+0x2b2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0201 	bic.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a3c      	ldr	r2, [pc, #240]	; (80077f4 <HAL_DMA_Abort_IT+0x3a8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d072      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a3a      	ldr	r2, [pc, #232]	; (80077f8 <HAL_DMA_Abort_IT+0x3ac>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d06d      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a39      	ldr	r2, [pc, #228]	; (80077fc <HAL_DMA_Abort_IT+0x3b0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d068      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a37      	ldr	r2, [pc, #220]	; (8007800 <HAL_DMA_Abort_IT+0x3b4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d063      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a36      	ldr	r2, [pc, #216]	; (8007804 <HAL_DMA_Abort_IT+0x3b8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d05e      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a34      	ldr	r2, [pc, #208]	; (8007808 <HAL_DMA_Abort_IT+0x3bc>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d059      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a33      	ldr	r2, [pc, #204]	; (800780c <HAL_DMA_Abort_IT+0x3c0>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d054      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a31      	ldr	r2, [pc, #196]	; (8007810 <HAL_DMA_Abort_IT+0x3c4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d04f      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a30      	ldr	r2, [pc, #192]	; (8007814 <HAL_DMA_Abort_IT+0x3c8>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d04a      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a2e      	ldr	r2, [pc, #184]	; (8007818 <HAL_DMA_Abort_IT+0x3cc>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d045      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2d      	ldr	r2, [pc, #180]	; (800781c <HAL_DMA_Abort_IT+0x3d0>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d040      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a2b      	ldr	r2, [pc, #172]	; (8007820 <HAL_DMA_Abort_IT+0x3d4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d03b      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a2a      	ldr	r2, [pc, #168]	; (8007824 <HAL_DMA_Abort_IT+0x3d8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d036      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a28      	ldr	r2, [pc, #160]	; (8007828 <HAL_DMA_Abort_IT+0x3dc>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d031      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a27      	ldr	r2, [pc, #156]	; (800782c <HAL_DMA_Abort_IT+0x3e0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d02c      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a25      	ldr	r2, [pc, #148]	; (8007830 <HAL_DMA_Abort_IT+0x3e4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d027      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a24      	ldr	r2, [pc, #144]	; (8007834 <HAL_DMA_Abort_IT+0x3e8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d022      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a22      	ldr	r2, [pc, #136]	; (8007838 <HAL_DMA_Abort_IT+0x3ec>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01d      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a21      	ldr	r2, [pc, #132]	; (800783c <HAL_DMA_Abort_IT+0x3f0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d018      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1f      	ldr	r2, [pc, #124]	; (8007840 <HAL_DMA_Abort_IT+0x3f4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1e      	ldr	r2, [pc, #120]	; (8007844 <HAL_DMA_Abort_IT+0x3f8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00e      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1c      	ldr	r2, [pc, #112]	; (8007848 <HAL_DMA_Abort_IT+0x3fc>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d009      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a1b      	ldr	r2, [pc, #108]	; (800784c <HAL_DMA_Abort_IT+0x400>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d004      	beq.n	80077ee <HAL_DMA_Abort_IT+0x3a2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a19      	ldr	r2, [pc, #100]	; (8007850 <HAL_DMA_Abort_IT+0x404>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d132      	bne.n	8007854 <HAL_DMA_Abort_IT+0x408>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e031      	b.n	8007856 <HAL_DMA_Abort_IT+0x40a>
 80077f2:	bf00      	nop
 80077f4:	40020010 	.word	0x40020010
 80077f8:	40020028 	.word	0x40020028
 80077fc:	40020040 	.word	0x40020040
 8007800:	40020058 	.word	0x40020058
 8007804:	40020070 	.word	0x40020070
 8007808:	40020088 	.word	0x40020088
 800780c:	400200a0 	.word	0x400200a0
 8007810:	400200b8 	.word	0x400200b8
 8007814:	40020410 	.word	0x40020410
 8007818:	40020428 	.word	0x40020428
 800781c:	40020440 	.word	0x40020440
 8007820:	40020458 	.word	0x40020458
 8007824:	40020470 	.word	0x40020470
 8007828:	40020488 	.word	0x40020488
 800782c:	400204a0 	.word	0x400204a0
 8007830:	400204b8 	.word	0x400204b8
 8007834:	58025408 	.word	0x58025408
 8007838:	5802541c 	.word	0x5802541c
 800783c:	58025430 	.word	0x58025430
 8007840:	58025444 	.word	0x58025444
 8007844:	58025458 	.word	0x58025458
 8007848:	5802546c 	.word	0x5802546c
 800784c:	58025480 	.word	0x58025480
 8007850:	58025494 	.word	0x58025494
 8007854:	2300      	movs	r3, #0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d028      	beq.n	80078ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007868:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	2201      	movs	r2, #1
 800787a:	409a      	lsls	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007888:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00c      	beq.n	80078ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800789c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop

080078d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80078e4:	4b67      	ldr	r3, [pc, #412]	; (8007a84 <HAL_DMA_IRQHandler+0x1ac>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a67      	ldr	r2, [pc, #412]	; (8007a88 <HAL_DMA_IRQHandler+0x1b0>)
 80078ea:	fba2 2303 	umull	r2, r3, r2, r3
 80078ee:	0a9b      	lsrs	r3, r3, #10
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a5f      	ldr	r2, [pc, #380]	; (8007a8c <HAL_DMA_IRQHandler+0x1b4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d04a      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a5d      	ldr	r2, [pc, #372]	; (8007a90 <HAL_DMA_IRQHandler+0x1b8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d045      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a5c      	ldr	r2, [pc, #368]	; (8007a94 <HAL_DMA_IRQHandler+0x1bc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d040      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a5a      	ldr	r2, [pc, #360]	; (8007a98 <HAL_DMA_IRQHandler+0x1c0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d03b      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a59      	ldr	r2, [pc, #356]	; (8007a9c <HAL_DMA_IRQHandler+0x1c4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d036      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a57      	ldr	r2, [pc, #348]	; (8007aa0 <HAL_DMA_IRQHandler+0x1c8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d031      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a56      	ldr	r2, [pc, #344]	; (8007aa4 <HAL_DMA_IRQHandler+0x1cc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d02c      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a54      	ldr	r2, [pc, #336]	; (8007aa8 <HAL_DMA_IRQHandler+0x1d0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d027      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a53      	ldr	r2, [pc, #332]	; (8007aac <HAL_DMA_IRQHandler+0x1d4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d022      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a51      	ldr	r2, [pc, #324]	; (8007ab0 <HAL_DMA_IRQHandler+0x1d8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d01d      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a50      	ldr	r2, [pc, #320]	; (8007ab4 <HAL_DMA_IRQHandler+0x1dc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d018      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a4e      	ldr	r2, [pc, #312]	; (8007ab8 <HAL_DMA_IRQHandler+0x1e0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d013      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a4d      	ldr	r2, [pc, #308]	; (8007abc <HAL_DMA_IRQHandler+0x1e4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00e      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a4b      	ldr	r2, [pc, #300]	; (8007ac0 <HAL_DMA_IRQHandler+0x1e8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d009      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a4a      	ldr	r2, [pc, #296]	; (8007ac4 <HAL_DMA_IRQHandler+0x1ec>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d004      	beq.n	80079aa <HAL_DMA_IRQHandler+0xd2>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a48      	ldr	r2, [pc, #288]	; (8007ac8 <HAL_DMA_IRQHandler+0x1f0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d101      	bne.n	80079ae <HAL_DMA_IRQHandler+0xd6>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <HAL_DMA_IRQHandler+0xd8>
 80079ae:	2300      	movs	r3, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 842b 	beq.w	800820c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ba:	f003 031f 	and.w	r3, r3, #31
 80079be:	2208      	movs	r2, #8
 80079c0:	409a      	lsls	r2, r3
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	4013      	ands	r3, r2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 80a2 	beq.w	8007b10 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a2e      	ldr	r2, [pc, #184]	; (8007a8c <HAL_DMA_IRQHandler+0x1b4>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d04a      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2d      	ldr	r2, [pc, #180]	; (8007a90 <HAL_DMA_IRQHandler+0x1b8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d045      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a2b      	ldr	r2, [pc, #172]	; (8007a94 <HAL_DMA_IRQHandler+0x1bc>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d040      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2a      	ldr	r2, [pc, #168]	; (8007a98 <HAL_DMA_IRQHandler+0x1c0>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d03b      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a28      	ldr	r2, [pc, #160]	; (8007a9c <HAL_DMA_IRQHandler+0x1c4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d036      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a27      	ldr	r2, [pc, #156]	; (8007aa0 <HAL_DMA_IRQHandler+0x1c8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d031      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a25      	ldr	r2, [pc, #148]	; (8007aa4 <HAL_DMA_IRQHandler+0x1cc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d02c      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a24      	ldr	r2, [pc, #144]	; (8007aa8 <HAL_DMA_IRQHandler+0x1d0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d027      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a22      	ldr	r2, [pc, #136]	; (8007aac <HAL_DMA_IRQHandler+0x1d4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d022      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a21      	ldr	r2, [pc, #132]	; (8007ab0 <HAL_DMA_IRQHandler+0x1d8>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d01d      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1f      	ldr	r2, [pc, #124]	; (8007ab4 <HAL_DMA_IRQHandler+0x1dc>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d018      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1e      	ldr	r2, [pc, #120]	; (8007ab8 <HAL_DMA_IRQHandler+0x1e0>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <HAL_DMA_IRQHandler+0x1e4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00e      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <HAL_DMA_IRQHandler+0x1e8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d009      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a19      	ldr	r2, [pc, #100]	; (8007ac4 <HAL_DMA_IRQHandler+0x1ec>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d004      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x194>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <HAL_DMA_IRQHandler+0x1f0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d12f      	bne.n	8007acc <HAL_DMA_IRQHandler+0x1f4>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	bf14      	ite	ne
 8007a7a:	2301      	movne	r3, #1
 8007a7c:	2300      	moveq	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	e02e      	b.n	8007ae0 <HAL_DMA_IRQHandler+0x208>
 8007a82:	bf00      	nop
 8007a84:	24000090 	.word	0x24000090
 8007a88:	1b4e81b5 	.word	0x1b4e81b5
 8007a8c:	40020010 	.word	0x40020010
 8007a90:	40020028 	.word	0x40020028
 8007a94:	40020040 	.word	0x40020040
 8007a98:	40020058 	.word	0x40020058
 8007a9c:	40020070 	.word	0x40020070
 8007aa0:	40020088 	.word	0x40020088
 8007aa4:	400200a0 	.word	0x400200a0
 8007aa8:	400200b8 	.word	0x400200b8
 8007aac:	40020410 	.word	0x40020410
 8007ab0:	40020428 	.word	0x40020428
 8007ab4:	40020440 	.word	0x40020440
 8007ab8:	40020458 	.word	0x40020458
 8007abc:	40020470 	.word	0x40020470
 8007ac0:	40020488 	.word	0x40020488
 8007ac4:	400204a0 	.word	0x400204a0
 8007ac8:	400204b8 	.word	0x400204b8
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bf14      	ite	ne
 8007ada:	2301      	movne	r3, #1
 8007adc:	2300      	moveq	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d015      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0204 	bic.w	r2, r2, #4
 8007af2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af8:	f003 031f 	and.w	r3, r3, #31
 8007afc:	2208      	movs	r2, #8
 8007afe:	409a      	lsls	r2, r3
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b08:	f043 0201 	orr.w	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d06e      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a69      	ldr	r2, [pc, #420]	; (8007cd0 <HAL_DMA_IRQHandler+0x3f8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d04a      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a67      	ldr	r2, [pc, #412]	; (8007cd4 <HAL_DMA_IRQHandler+0x3fc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d045      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a66      	ldr	r2, [pc, #408]	; (8007cd8 <HAL_DMA_IRQHandler+0x400>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d040      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a64      	ldr	r2, [pc, #400]	; (8007cdc <HAL_DMA_IRQHandler+0x404>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d03b      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a63      	ldr	r2, [pc, #396]	; (8007ce0 <HAL_DMA_IRQHandler+0x408>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d036      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a61      	ldr	r2, [pc, #388]	; (8007ce4 <HAL_DMA_IRQHandler+0x40c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d031      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a60      	ldr	r2, [pc, #384]	; (8007ce8 <HAL_DMA_IRQHandler+0x410>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d02c      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a5e      	ldr	r2, [pc, #376]	; (8007cec <HAL_DMA_IRQHandler+0x414>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d027      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a5d      	ldr	r2, [pc, #372]	; (8007cf0 <HAL_DMA_IRQHandler+0x418>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d022      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a5b      	ldr	r2, [pc, #364]	; (8007cf4 <HAL_DMA_IRQHandler+0x41c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d01d      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a5a      	ldr	r2, [pc, #360]	; (8007cf8 <HAL_DMA_IRQHandler+0x420>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d018      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a58      	ldr	r2, [pc, #352]	; (8007cfc <HAL_DMA_IRQHandler+0x424>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d013      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a57      	ldr	r2, [pc, #348]	; (8007d00 <HAL_DMA_IRQHandler+0x428>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00e      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a55      	ldr	r2, [pc, #340]	; (8007d04 <HAL_DMA_IRQHandler+0x42c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d009      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a54      	ldr	r2, [pc, #336]	; (8007d08 <HAL_DMA_IRQHandler+0x430>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d004      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x2ee>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a52      	ldr	r2, [pc, #328]	; (8007d0c <HAL_DMA_IRQHandler+0x434>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d10a      	bne.n	8007bdc <HAL_DMA_IRQHandler+0x304>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bf14      	ite	ne
 8007bd4:	2301      	movne	r3, #1
 8007bd6:	2300      	moveq	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	e003      	b.n	8007be4 <HAL_DMA_IRQHandler+0x30c>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00d      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bec:	f003 031f 	and.w	r3, r3, #31
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	409a      	lsls	r2, r3
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfc:	f043 0202 	orr.w	r2, r3, #2
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c08:	f003 031f 	and.w	r3, r3, #31
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 808f 	beq.w	8007d38 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a2c      	ldr	r2, [pc, #176]	; (8007cd0 <HAL_DMA_IRQHandler+0x3f8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d04a      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a2a      	ldr	r2, [pc, #168]	; (8007cd4 <HAL_DMA_IRQHandler+0x3fc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d045      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a29      	ldr	r2, [pc, #164]	; (8007cd8 <HAL_DMA_IRQHandler+0x400>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d040      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a27      	ldr	r2, [pc, #156]	; (8007cdc <HAL_DMA_IRQHandler+0x404>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d03b      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a26      	ldr	r2, [pc, #152]	; (8007ce0 <HAL_DMA_IRQHandler+0x408>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d036      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a24      	ldr	r2, [pc, #144]	; (8007ce4 <HAL_DMA_IRQHandler+0x40c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d031      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a23      	ldr	r2, [pc, #140]	; (8007ce8 <HAL_DMA_IRQHandler+0x410>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d02c      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a21      	ldr	r2, [pc, #132]	; (8007cec <HAL_DMA_IRQHandler+0x414>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d027      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a20      	ldr	r2, [pc, #128]	; (8007cf0 <HAL_DMA_IRQHandler+0x418>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d022      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a1e      	ldr	r2, [pc, #120]	; (8007cf4 <HAL_DMA_IRQHandler+0x41c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d01d      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <HAL_DMA_IRQHandler+0x420>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d018      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a1b      	ldr	r2, [pc, #108]	; (8007cfc <HAL_DMA_IRQHandler+0x424>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d013      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a1a      	ldr	r2, [pc, #104]	; (8007d00 <HAL_DMA_IRQHandler+0x428>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00e      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a18      	ldr	r2, [pc, #96]	; (8007d04 <HAL_DMA_IRQHandler+0x42c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d009      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a17      	ldr	r2, [pc, #92]	; (8007d08 <HAL_DMA_IRQHandler+0x430>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d004      	beq.n	8007cba <HAL_DMA_IRQHandler+0x3e2>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a15      	ldr	r2, [pc, #84]	; (8007d0c <HAL_DMA_IRQHandler+0x434>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d12a      	bne.n	8007d10 <HAL_DMA_IRQHandler+0x438>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bf14      	ite	ne
 8007cc8:	2301      	movne	r3, #1
 8007cca:	2300      	moveq	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	e023      	b.n	8007d18 <HAL_DMA_IRQHandler+0x440>
 8007cd0:	40020010 	.word	0x40020010
 8007cd4:	40020028 	.word	0x40020028
 8007cd8:	40020040 	.word	0x40020040
 8007cdc:	40020058 	.word	0x40020058
 8007ce0:	40020070 	.word	0x40020070
 8007ce4:	40020088 	.word	0x40020088
 8007ce8:	400200a0 	.word	0x400200a0
 8007cec:	400200b8 	.word	0x400200b8
 8007cf0:	40020410 	.word	0x40020410
 8007cf4:	40020428 	.word	0x40020428
 8007cf8:	40020440 	.word	0x40020440
 8007cfc:	40020458 	.word	0x40020458
 8007d00:	40020470 	.word	0x40020470
 8007d04:	40020488 	.word	0x40020488
 8007d08:	400204a0 	.word	0x400204a0
 8007d0c:	400204b8 	.word	0x400204b8
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2300      	movs	r3, #0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d20:	f003 031f 	and.w	r3, r3, #31
 8007d24:	2204      	movs	r2, #4
 8007d26:	409a      	lsls	r2, r3
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d30:	f043 0204 	orr.w	r2, r3, #4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3c:	f003 031f 	and.w	r3, r3, #31
 8007d40:	2210      	movs	r2, #16
 8007d42:	409a      	lsls	r2, r3
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	4013      	ands	r3, r2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 80a6 	beq.w	8007e9a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a85      	ldr	r2, [pc, #532]	; (8007f68 <HAL_DMA_IRQHandler+0x690>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d04a      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a83      	ldr	r2, [pc, #524]	; (8007f6c <HAL_DMA_IRQHandler+0x694>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d045      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a82      	ldr	r2, [pc, #520]	; (8007f70 <HAL_DMA_IRQHandler+0x698>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d040      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a80      	ldr	r2, [pc, #512]	; (8007f74 <HAL_DMA_IRQHandler+0x69c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d03b      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a7f      	ldr	r2, [pc, #508]	; (8007f78 <HAL_DMA_IRQHandler+0x6a0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d036      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a7d      	ldr	r2, [pc, #500]	; (8007f7c <HAL_DMA_IRQHandler+0x6a4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d031      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a7c      	ldr	r2, [pc, #496]	; (8007f80 <HAL_DMA_IRQHandler+0x6a8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d02c      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a7a      	ldr	r2, [pc, #488]	; (8007f84 <HAL_DMA_IRQHandler+0x6ac>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d027      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a79      	ldr	r2, [pc, #484]	; (8007f88 <HAL_DMA_IRQHandler+0x6b0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d022      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a77      	ldr	r2, [pc, #476]	; (8007f8c <HAL_DMA_IRQHandler+0x6b4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d01d      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a76      	ldr	r2, [pc, #472]	; (8007f90 <HAL_DMA_IRQHandler+0x6b8>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d018      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a74      	ldr	r2, [pc, #464]	; (8007f94 <HAL_DMA_IRQHandler+0x6bc>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d013      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a73      	ldr	r2, [pc, #460]	; (8007f98 <HAL_DMA_IRQHandler+0x6c0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00e      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a71      	ldr	r2, [pc, #452]	; (8007f9c <HAL_DMA_IRQHandler+0x6c4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d009      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a70      	ldr	r2, [pc, #448]	; (8007fa0 <HAL_DMA_IRQHandler+0x6c8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d004      	beq.n	8007dee <HAL_DMA_IRQHandler+0x516>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a6e      	ldr	r2, [pc, #440]	; (8007fa4 <HAL_DMA_IRQHandler+0x6cc>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d10a      	bne.n	8007e04 <HAL_DMA_IRQHandler+0x52c>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	bf14      	ite	ne
 8007dfc:	2301      	movne	r3, #1
 8007dfe:	2300      	moveq	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	e009      	b.n	8007e18 <HAL_DMA_IRQHandler+0x540>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bf14      	ite	ne
 8007e12:	2301      	movne	r3, #1
 8007e14:	2300      	moveq	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d03e      	beq.n	8007e9a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e20:	f003 031f 	and.w	r3, r3, #31
 8007e24:	2210      	movs	r2, #16
 8007e26:	409a      	lsls	r2, r3
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d018      	beq.n	8007e6c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d108      	bne.n	8007e5a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d024      	beq.n	8007e9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	4798      	blx	r3
 8007e58:	e01f      	b.n	8007e9a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d01b      	beq.n	8007e9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
 8007e6a:	e016      	b.n	8007e9a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d107      	bne.n	8007e8a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0208 	bic.w	r2, r2, #8
 8007e88:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9e:	f003 031f 	and.w	r3, r3, #31
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	409a      	lsls	r2, r3
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 8110 	beq.w	80080d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a2c      	ldr	r2, [pc, #176]	; (8007f68 <HAL_DMA_IRQHandler+0x690>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d04a      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a2b      	ldr	r2, [pc, #172]	; (8007f6c <HAL_DMA_IRQHandler+0x694>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d045      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a29      	ldr	r2, [pc, #164]	; (8007f70 <HAL_DMA_IRQHandler+0x698>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d040      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a28      	ldr	r2, [pc, #160]	; (8007f74 <HAL_DMA_IRQHandler+0x69c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d03b      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a26      	ldr	r2, [pc, #152]	; (8007f78 <HAL_DMA_IRQHandler+0x6a0>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d036      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a25      	ldr	r2, [pc, #148]	; (8007f7c <HAL_DMA_IRQHandler+0x6a4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d031      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a23      	ldr	r2, [pc, #140]	; (8007f80 <HAL_DMA_IRQHandler+0x6a8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d02c      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a22      	ldr	r2, [pc, #136]	; (8007f84 <HAL_DMA_IRQHandler+0x6ac>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d027      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a20      	ldr	r2, [pc, #128]	; (8007f88 <HAL_DMA_IRQHandler+0x6b0>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d022      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1f      	ldr	r2, [pc, #124]	; (8007f8c <HAL_DMA_IRQHandler+0x6b4>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d01d      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1d      	ldr	r2, [pc, #116]	; (8007f90 <HAL_DMA_IRQHandler+0x6b8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d018      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1c      	ldr	r2, [pc, #112]	; (8007f94 <HAL_DMA_IRQHandler+0x6bc>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d013      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1a      	ldr	r2, [pc, #104]	; (8007f98 <HAL_DMA_IRQHandler+0x6c0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00e      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a19      	ldr	r2, [pc, #100]	; (8007f9c <HAL_DMA_IRQHandler+0x6c4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d009      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a17      	ldr	r2, [pc, #92]	; (8007fa0 <HAL_DMA_IRQHandler+0x6c8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x678>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a16      	ldr	r2, [pc, #88]	; (8007fa4 <HAL_DMA_IRQHandler+0x6cc>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d12b      	bne.n	8007fa8 <HAL_DMA_IRQHandler+0x6d0>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0310 	and.w	r3, r3, #16
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	bf14      	ite	ne
 8007f5e:	2301      	movne	r3, #1
 8007f60:	2300      	moveq	r3, #0
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	e02a      	b.n	8007fbc <HAL_DMA_IRQHandler+0x6e4>
 8007f66:	bf00      	nop
 8007f68:	40020010 	.word	0x40020010
 8007f6c:	40020028 	.word	0x40020028
 8007f70:	40020040 	.word	0x40020040
 8007f74:	40020058 	.word	0x40020058
 8007f78:	40020070 	.word	0x40020070
 8007f7c:	40020088 	.word	0x40020088
 8007f80:	400200a0 	.word	0x400200a0
 8007f84:	400200b8 	.word	0x400200b8
 8007f88:	40020410 	.word	0x40020410
 8007f8c:	40020428 	.word	0x40020428
 8007f90:	40020440 	.word	0x40020440
 8007f94:	40020458 	.word	0x40020458
 8007f98:	40020470 	.word	0x40020470
 8007f9c:	40020488 	.word	0x40020488
 8007fa0:	400204a0 	.word	0x400204a0
 8007fa4:	400204b8 	.word	0x400204b8
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	bf14      	ite	ne
 8007fb6:	2301      	movne	r3, #1
 8007fb8:	2300      	moveq	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 8087 	beq.w	80080d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	2220      	movs	r2, #32
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d139      	bne.n	8008052 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0216 	bic.w	r2, r2, #22
 8007fec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	695a      	ldr	r2, [r3, #20]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ffc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <HAL_DMA_IRQHandler+0x736>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0208 	bic.w	r2, r2, #8
 800801c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008022:	f003 031f 	and.w	r3, r3, #31
 8008026:	223f      	movs	r2, #63	; 0x3f
 8008028:	409a      	lsls	r2, r3
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 834a 	beq.w	80086dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	4798      	blx	r3
          }
          return;
 8008050:	e344      	b.n	80086dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d018      	beq.n	8008092 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d108      	bne.n	8008080 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008072:	2b00      	cmp	r3, #0
 8008074:	d02c      	beq.n	80080d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	4798      	blx	r3
 800807e:	e027      	b.n	80080d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d023      	beq.n	80080d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
 8008090:	e01e      	b.n	80080d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10f      	bne.n	80080c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0210 	bic.w	r2, r2, #16
 80080ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 8306 	beq.w	80086e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8088 	beq.w	80081f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2204      	movs	r2, #4
 80080ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a7a      	ldr	r2, [pc, #488]	; (80082e0 <HAL_DMA_IRQHandler+0xa08>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d04a      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a79      	ldr	r2, [pc, #484]	; (80082e4 <HAL_DMA_IRQHandler+0xa0c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d045      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a77      	ldr	r2, [pc, #476]	; (80082e8 <HAL_DMA_IRQHandler+0xa10>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d040      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a76      	ldr	r2, [pc, #472]	; (80082ec <HAL_DMA_IRQHandler+0xa14>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d03b      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a74      	ldr	r2, [pc, #464]	; (80082f0 <HAL_DMA_IRQHandler+0xa18>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d036      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a73      	ldr	r2, [pc, #460]	; (80082f4 <HAL_DMA_IRQHandler+0xa1c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d031      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a71      	ldr	r2, [pc, #452]	; (80082f8 <HAL_DMA_IRQHandler+0xa20>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d02c      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a70      	ldr	r2, [pc, #448]	; (80082fc <HAL_DMA_IRQHandler+0xa24>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d027      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a6e      	ldr	r2, [pc, #440]	; (8008300 <HAL_DMA_IRQHandler+0xa28>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d022      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a6d      	ldr	r2, [pc, #436]	; (8008304 <HAL_DMA_IRQHandler+0xa2c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d01d      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a6b      	ldr	r2, [pc, #428]	; (8008308 <HAL_DMA_IRQHandler+0xa30>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d018      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a6a      	ldr	r2, [pc, #424]	; (800830c <HAL_DMA_IRQHandler+0xa34>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d013      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a68      	ldr	r2, [pc, #416]	; (8008310 <HAL_DMA_IRQHandler+0xa38>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d00e      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a67      	ldr	r2, [pc, #412]	; (8008314 <HAL_DMA_IRQHandler+0xa3c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d009      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a65      	ldr	r2, [pc, #404]	; (8008318 <HAL_DMA_IRQHandler+0xa40>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d004      	beq.n	8008190 <HAL_DMA_IRQHandler+0x8b8>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a64      	ldr	r2, [pc, #400]	; (800831c <HAL_DMA_IRQHandler+0xa44>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d108      	bne.n	80081a2 <HAL_DMA_IRQHandler+0x8ca>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0201 	bic.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e007      	b.n	80081b2 <HAL_DMA_IRQHandler+0x8da>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0201 	bic.w	r2, r2, #1
 80081b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3301      	adds	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d307      	bcc.n	80081ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1f2      	bne.n	80081b2 <HAL_DMA_IRQHandler+0x8da>
 80081cc:	e000      	b.n	80081d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80081ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d004      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2203      	movs	r2, #3
 80081e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80081e6:	e003      	b.n	80081f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8272 	beq.w	80086e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
 800820a:	e26c      	b.n	80086e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a43      	ldr	r2, [pc, #268]	; (8008320 <HAL_DMA_IRQHandler+0xa48>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d022      	beq.n	800825c <HAL_DMA_IRQHandler+0x984>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a42      	ldr	r2, [pc, #264]	; (8008324 <HAL_DMA_IRQHandler+0xa4c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d01d      	beq.n	800825c <HAL_DMA_IRQHandler+0x984>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a40      	ldr	r2, [pc, #256]	; (8008328 <HAL_DMA_IRQHandler+0xa50>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d018      	beq.n	800825c <HAL_DMA_IRQHandler+0x984>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a3f      	ldr	r2, [pc, #252]	; (800832c <HAL_DMA_IRQHandler+0xa54>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <HAL_DMA_IRQHandler+0x984>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a3d      	ldr	r2, [pc, #244]	; (8008330 <HAL_DMA_IRQHandler+0xa58>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00e      	beq.n	800825c <HAL_DMA_IRQHandler+0x984>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a3c      	ldr	r2, [pc, #240]	; (8008334 <HAL_DMA_IRQHandler+0xa5c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d009      	beq.n	800825c <HAL_DMA_IRQHandler+0x984>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a3a      	ldr	r2, [pc, #232]	; (8008338 <HAL_DMA_IRQHandler+0xa60>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_DMA_IRQHandler+0x984>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a39      	ldr	r2, [pc, #228]	; (800833c <HAL_DMA_IRQHandler+0xa64>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d101      	bne.n	8008260 <HAL_DMA_IRQHandler+0x988>
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <HAL_DMA_IRQHandler+0x98a>
 8008260:	2300      	movs	r3, #0
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 823f 	beq.w	80086e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008274:	f003 031f 	and.w	r3, r3, #31
 8008278:	2204      	movs	r2, #4
 800827a:	409a      	lsls	r2, r3
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 80cd 	beq.w	8008420 <HAL_DMA_IRQHandler+0xb48>
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80c7 	beq.w	8008420 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008296:	f003 031f 	and.w	r3, r3, #31
 800829a:	2204      	movs	r2, #4
 800829c:	409a      	lsls	r2, r3
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d049      	beq.n	8008340 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 8210 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082c8:	e20a      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 8206 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082dc:	e200      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe08>
 80082de:	bf00      	nop
 80082e0:	40020010 	.word	0x40020010
 80082e4:	40020028 	.word	0x40020028
 80082e8:	40020040 	.word	0x40020040
 80082ec:	40020058 	.word	0x40020058
 80082f0:	40020070 	.word	0x40020070
 80082f4:	40020088 	.word	0x40020088
 80082f8:	400200a0 	.word	0x400200a0
 80082fc:	400200b8 	.word	0x400200b8
 8008300:	40020410 	.word	0x40020410
 8008304:	40020428 	.word	0x40020428
 8008308:	40020440 	.word	0x40020440
 800830c:	40020458 	.word	0x40020458
 8008310:	40020470 	.word	0x40020470
 8008314:	40020488 	.word	0x40020488
 8008318:	400204a0 	.word	0x400204a0
 800831c:	400204b8 	.word	0x400204b8
 8008320:	58025408 	.word	0x58025408
 8008324:	5802541c 	.word	0x5802541c
 8008328:	58025430 	.word	0x58025430
 800832c:	58025444 	.word	0x58025444
 8008330:	58025458 	.word	0x58025458
 8008334:	5802546c 	.word	0x5802546c
 8008338:	58025480 	.word	0x58025480
 800833c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	f003 0320 	and.w	r3, r3, #32
 8008346:	2b00      	cmp	r3, #0
 8008348:	d160      	bne.n	800840c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a7f      	ldr	r2, [pc, #508]	; (800854c <HAL_DMA_IRQHandler+0xc74>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d04a      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a7d      	ldr	r2, [pc, #500]	; (8008550 <HAL_DMA_IRQHandler+0xc78>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d045      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a7c      	ldr	r2, [pc, #496]	; (8008554 <HAL_DMA_IRQHandler+0xc7c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d040      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a7a      	ldr	r2, [pc, #488]	; (8008558 <HAL_DMA_IRQHandler+0xc80>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d03b      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a79      	ldr	r2, [pc, #484]	; (800855c <HAL_DMA_IRQHandler+0xc84>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d036      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a77      	ldr	r2, [pc, #476]	; (8008560 <HAL_DMA_IRQHandler+0xc88>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d031      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a76      	ldr	r2, [pc, #472]	; (8008564 <HAL_DMA_IRQHandler+0xc8c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d02c      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a74      	ldr	r2, [pc, #464]	; (8008568 <HAL_DMA_IRQHandler+0xc90>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d027      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a73      	ldr	r2, [pc, #460]	; (800856c <HAL_DMA_IRQHandler+0xc94>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d022      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a71      	ldr	r2, [pc, #452]	; (8008570 <HAL_DMA_IRQHandler+0xc98>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d01d      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a70      	ldr	r2, [pc, #448]	; (8008574 <HAL_DMA_IRQHandler+0xc9c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d018      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a6e      	ldr	r2, [pc, #440]	; (8008578 <HAL_DMA_IRQHandler+0xca0>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d013      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a6d      	ldr	r2, [pc, #436]	; (800857c <HAL_DMA_IRQHandler+0xca4>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00e      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a6b      	ldr	r2, [pc, #428]	; (8008580 <HAL_DMA_IRQHandler+0xca8>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d009      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a6a      	ldr	r2, [pc, #424]	; (8008584 <HAL_DMA_IRQHandler+0xcac>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d004      	beq.n	80083ea <HAL_DMA_IRQHandler+0xb12>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a68      	ldr	r2, [pc, #416]	; (8008588 <HAL_DMA_IRQHandler+0xcb0>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d108      	bne.n	80083fc <HAL_DMA_IRQHandler+0xb24>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f022 0208 	bic.w	r2, r2, #8
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	e007      	b.n	800840c <HAL_DMA_IRQHandler+0xb34>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0204 	bic.w	r2, r2, #4
 800840a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8165 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800841e:	e15f      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008424:	f003 031f 	and.w	r3, r3, #31
 8008428:	2202      	movs	r2, #2
 800842a:	409a      	lsls	r2, r3
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	4013      	ands	r3, r2
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 80c5 	beq.w	80085c0 <HAL_DMA_IRQHandler+0xce8>
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 80bf 	beq.w	80085c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008446:	f003 031f 	and.w	r3, r3, #31
 800844a:	2202      	movs	r2, #2
 800844c:	409a      	lsls	r2, r3
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d018      	beq.n	800848e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d109      	bne.n	800847a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 813a 	beq.w	80086e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008478:	e134      	b.n	80086e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 8130 	beq.w	80086e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800848c:	e12a      	b.n	80086e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f003 0320 	and.w	r3, r3, #32
 8008494:	2b00      	cmp	r3, #0
 8008496:	f040 8089 	bne.w	80085ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a2b      	ldr	r2, [pc, #172]	; (800854c <HAL_DMA_IRQHandler+0xc74>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d04a      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a29      	ldr	r2, [pc, #164]	; (8008550 <HAL_DMA_IRQHandler+0xc78>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d045      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a28      	ldr	r2, [pc, #160]	; (8008554 <HAL_DMA_IRQHandler+0xc7c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d040      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a26      	ldr	r2, [pc, #152]	; (8008558 <HAL_DMA_IRQHandler+0xc80>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d03b      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a25      	ldr	r2, [pc, #148]	; (800855c <HAL_DMA_IRQHandler+0xc84>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d036      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a23      	ldr	r2, [pc, #140]	; (8008560 <HAL_DMA_IRQHandler+0xc88>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d031      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a22      	ldr	r2, [pc, #136]	; (8008564 <HAL_DMA_IRQHandler+0xc8c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d02c      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a20      	ldr	r2, [pc, #128]	; (8008568 <HAL_DMA_IRQHandler+0xc90>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d027      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1f      	ldr	r2, [pc, #124]	; (800856c <HAL_DMA_IRQHandler+0xc94>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d022      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a1d      	ldr	r2, [pc, #116]	; (8008570 <HAL_DMA_IRQHandler+0xc98>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d01d      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1c      	ldr	r2, [pc, #112]	; (8008574 <HAL_DMA_IRQHandler+0xc9c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d018      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1a      	ldr	r2, [pc, #104]	; (8008578 <HAL_DMA_IRQHandler+0xca0>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a19      	ldr	r2, [pc, #100]	; (800857c <HAL_DMA_IRQHandler+0xca4>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00e      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a17      	ldr	r2, [pc, #92]	; (8008580 <HAL_DMA_IRQHandler+0xca8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d009      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a16      	ldr	r2, [pc, #88]	; (8008584 <HAL_DMA_IRQHandler+0xcac>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d004      	beq.n	800853a <HAL_DMA_IRQHandler+0xc62>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a14      	ldr	r2, [pc, #80]	; (8008588 <HAL_DMA_IRQHandler+0xcb0>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d128      	bne.n	800858c <HAL_DMA_IRQHandler+0xcb4>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0214 	bic.w	r2, r2, #20
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	e027      	b.n	800859c <HAL_DMA_IRQHandler+0xcc4>
 800854c:	40020010 	.word	0x40020010
 8008550:	40020028 	.word	0x40020028
 8008554:	40020040 	.word	0x40020040
 8008558:	40020058 	.word	0x40020058
 800855c:	40020070 	.word	0x40020070
 8008560:	40020088 	.word	0x40020088
 8008564:	400200a0 	.word	0x400200a0
 8008568:	400200b8 	.word	0x400200b8
 800856c:	40020410 	.word	0x40020410
 8008570:	40020428 	.word	0x40020428
 8008574:	40020440 	.word	0x40020440
 8008578:	40020458 	.word	0x40020458
 800857c:	40020470 	.word	0x40020470
 8008580:	40020488 	.word	0x40020488
 8008584:	400204a0 	.word	0x400204a0
 8008588:	400204b8 	.word	0x400204b8
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 020a 	bic.w	r2, r2, #10
 800859a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 8097 	beq.w	80086e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085be:	e091      	b.n	80086e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c4:	f003 031f 	and.w	r3, r3, #31
 80085c8:	2208      	movs	r2, #8
 80085ca:	409a      	lsls	r2, r3
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	4013      	ands	r3, r2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 8088 	beq.w	80086e6 <HAL_DMA_IRQHandler+0xe0e>
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8082 	beq.w	80086e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a41      	ldr	r2, [pc, #260]	; (80086ec <HAL_DMA_IRQHandler+0xe14>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d04a      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a3f      	ldr	r2, [pc, #252]	; (80086f0 <HAL_DMA_IRQHandler+0xe18>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d045      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a3e      	ldr	r2, [pc, #248]	; (80086f4 <HAL_DMA_IRQHandler+0xe1c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d040      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a3c      	ldr	r2, [pc, #240]	; (80086f8 <HAL_DMA_IRQHandler+0xe20>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d03b      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a3b      	ldr	r2, [pc, #236]	; (80086fc <HAL_DMA_IRQHandler+0xe24>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d036      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a39      	ldr	r2, [pc, #228]	; (8008700 <HAL_DMA_IRQHandler+0xe28>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d031      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a38      	ldr	r2, [pc, #224]	; (8008704 <HAL_DMA_IRQHandler+0xe2c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d02c      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a36      	ldr	r2, [pc, #216]	; (8008708 <HAL_DMA_IRQHandler+0xe30>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d027      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a35      	ldr	r2, [pc, #212]	; (800870c <HAL_DMA_IRQHandler+0xe34>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d022      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a33      	ldr	r2, [pc, #204]	; (8008710 <HAL_DMA_IRQHandler+0xe38>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01d      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a32      	ldr	r2, [pc, #200]	; (8008714 <HAL_DMA_IRQHandler+0xe3c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d018      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a30      	ldr	r2, [pc, #192]	; (8008718 <HAL_DMA_IRQHandler+0xe40>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d013      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a2f      	ldr	r2, [pc, #188]	; (800871c <HAL_DMA_IRQHandler+0xe44>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00e      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a2d      	ldr	r2, [pc, #180]	; (8008720 <HAL_DMA_IRQHandler+0xe48>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d009      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a2c      	ldr	r2, [pc, #176]	; (8008724 <HAL_DMA_IRQHandler+0xe4c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d004      	beq.n	8008682 <HAL_DMA_IRQHandler+0xdaa>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a2a      	ldr	r2, [pc, #168]	; (8008728 <HAL_DMA_IRQHandler+0xe50>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d108      	bne.n	8008694 <HAL_DMA_IRQHandler+0xdbc>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 021c 	bic.w	r2, r2, #28
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	e007      	b.n	80086a4 <HAL_DMA_IRQHandler+0xdcc>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 020e 	bic.w	r2, r2, #14
 80086a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	2201      	movs	r2, #1
 80086ae:	409a      	lsls	r2, r3
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d009      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
 80086da:	e004      	b.n	80086e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80086dc:	bf00      	nop
 80086de:	e002      	b.n	80086e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086e0:	bf00      	nop
 80086e2:	e000      	b.n	80086e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80086e6:	3728      	adds	r7, #40	; 0x28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	40020010 	.word	0x40020010
 80086f0:	40020028 	.word	0x40020028
 80086f4:	40020040 	.word	0x40020040
 80086f8:	40020058 	.word	0x40020058
 80086fc:	40020070 	.word	0x40020070
 8008700:	40020088 	.word	0x40020088
 8008704:	400200a0 	.word	0x400200a0
 8008708:	400200b8 	.word	0x400200b8
 800870c:	40020410 	.word	0x40020410
 8008710:	40020428 	.word	0x40020428
 8008714:	40020440 	.word	0x40020440
 8008718:	40020458 	.word	0x40020458
 800871c:	40020470 	.word	0x40020470
 8008720:	40020488 	.word	0x40020488
 8008724:	400204a0 	.word	0x400204a0
 8008728:	400204b8 	.word	0x400204b8

0800872c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008756:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a7f      	ldr	r2, [pc, #508]	; (8008960 <DMA_SetConfig+0x21c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d072      	beq.n	800884e <DMA_SetConfig+0x10a>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a7d      	ldr	r2, [pc, #500]	; (8008964 <DMA_SetConfig+0x220>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d06d      	beq.n	800884e <DMA_SetConfig+0x10a>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a7c      	ldr	r2, [pc, #496]	; (8008968 <DMA_SetConfig+0x224>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d068      	beq.n	800884e <DMA_SetConfig+0x10a>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a7a      	ldr	r2, [pc, #488]	; (800896c <DMA_SetConfig+0x228>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d063      	beq.n	800884e <DMA_SetConfig+0x10a>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a79      	ldr	r2, [pc, #484]	; (8008970 <DMA_SetConfig+0x22c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d05e      	beq.n	800884e <DMA_SetConfig+0x10a>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a77      	ldr	r2, [pc, #476]	; (8008974 <DMA_SetConfig+0x230>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d059      	beq.n	800884e <DMA_SetConfig+0x10a>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a76      	ldr	r2, [pc, #472]	; (8008978 <DMA_SetConfig+0x234>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d054      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a74      	ldr	r2, [pc, #464]	; (800897c <DMA_SetConfig+0x238>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d04f      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a73      	ldr	r2, [pc, #460]	; (8008980 <DMA_SetConfig+0x23c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d04a      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a71      	ldr	r2, [pc, #452]	; (8008984 <DMA_SetConfig+0x240>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d045      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a70      	ldr	r2, [pc, #448]	; (8008988 <DMA_SetConfig+0x244>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d040      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a6e      	ldr	r2, [pc, #440]	; (800898c <DMA_SetConfig+0x248>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d03b      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a6d      	ldr	r2, [pc, #436]	; (8008990 <DMA_SetConfig+0x24c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d036      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a6b      	ldr	r2, [pc, #428]	; (8008994 <DMA_SetConfig+0x250>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d031      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a6a      	ldr	r2, [pc, #424]	; (8008998 <DMA_SetConfig+0x254>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d02c      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a68      	ldr	r2, [pc, #416]	; (800899c <DMA_SetConfig+0x258>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d027      	beq.n	800884e <DMA_SetConfig+0x10a>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a67      	ldr	r2, [pc, #412]	; (80089a0 <DMA_SetConfig+0x25c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d022      	beq.n	800884e <DMA_SetConfig+0x10a>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a65      	ldr	r2, [pc, #404]	; (80089a4 <DMA_SetConfig+0x260>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d01d      	beq.n	800884e <DMA_SetConfig+0x10a>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a64      	ldr	r2, [pc, #400]	; (80089a8 <DMA_SetConfig+0x264>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d018      	beq.n	800884e <DMA_SetConfig+0x10a>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a62      	ldr	r2, [pc, #392]	; (80089ac <DMA_SetConfig+0x268>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d013      	beq.n	800884e <DMA_SetConfig+0x10a>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a61      	ldr	r2, [pc, #388]	; (80089b0 <DMA_SetConfig+0x26c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00e      	beq.n	800884e <DMA_SetConfig+0x10a>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a5f      	ldr	r2, [pc, #380]	; (80089b4 <DMA_SetConfig+0x270>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d009      	beq.n	800884e <DMA_SetConfig+0x10a>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a5e      	ldr	r2, [pc, #376]	; (80089b8 <DMA_SetConfig+0x274>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d004      	beq.n	800884e <DMA_SetConfig+0x10a>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a5c      	ldr	r2, [pc, #368]	; (80089bc <DMA_SetConfig+0x278>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d101      	bne.n	8008852 <DMA_SetConfig+0x10e>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <DMA_SetConfig+0x110>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00d      	beq.n	8008874 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008860:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d004      	beq.n	8008874 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008872:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a39      	ldr	r2, [pc, #228]	; (8008960 <DMA_SetConfig+0x21c>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d04a      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a38      	ldr	r2, [pc, #224]	; (8008964 <DMA_SetConfig+0x220>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d045      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a36      	ldr	r2, [pc, #216]	; (8008968 <DMA_SetConfig+0x224>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d040      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a35      	ldr	r2, [pc, #212]	; (800896c <DMA_SetConfig+0x228>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d03b      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a33      	ldr	r2, [pc, #204]	; (8008970 <DMA_SetConfig+0x22c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d036      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a32      	ldr	r2, [pc, #200]	; (8008974 <DMA_SetConfig+0x230>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d031      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a30      	ldr	r2, [pc, #192]	; (8008978 <DMA_SetConfig+0x234>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d02c      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a2f      	ldr	r2, [pc, #188]	; (800897c <DMA_SetConfig+0x238>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d027      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a2d      	ldr	r2, [pc, #180]	; (8008980 <DMA_SetConfig+0x23c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d022      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a2c      	ldr	r2, [pc, #176]	; (8008984 <DMA_SetConfig+0x240>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d01d      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a2a      	ldr	r2, [pc, #168]	; (8008988 <DMA_SetConfig+0x244>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d018      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a29      	ldr	r2, [pc, #164]	; (800898c <DMA_SetConfig+0x248>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d013      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a27      	ldr	r2, [pc, #156]	; (8008990 <DMA_SetConfig+0x24c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00e      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a26      	ldr	r2, [pc, #152]	; (8008994 <DMA_SetConfig+0x250>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d009      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a24      	ldr	r2, [pc, #144]	; (8008998 <DMA_SetConfig+0x254>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d004      	beq.n	8008914 <DMA_SetConfig+0x1d0>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a23      	ldr	r2, [pc, #140]	; (800899c <DMA_SetConfig+0x258>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d101      	bne.n	8008918 <DMA_SetConfig+0x1d4>
 8008914:	2301      	movs	r3, #1
 8008916:	e000      	b.n	800891a <DMA_SetConfig+0x1d6>
 8008918:	2300      	movs	r3, #0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d059      	beq.n	80089d2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008922:	f003 031f 	and.w	r3, r3, #31
 8008926:	223f      	movs	r2, #63	; 0x3f
 8008928:	409a      	lsls	r2, r3
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800893c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	2b40      	cmp	r3, #64	; 0x40
 800894c:	d138      	bne.n	80089c0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800895e:	e086      	b.n	8008a6e <DMA_SetConfig+0x32a>
 8008960:	40020010 	.word	0x40020010
 8008964:	40020028 	.word	0x40020028
 8008968:	40020040 	.word	0x40020040
 800896c:	40020058 	.word	0x40020058
 8008970:	40020070 	.word	0x40020070
 8008974:	40020088 	.word	0x40020088
 8008978:	400200a0 	.word	0x400200a0
 800897c:	400200b8 	.word	0x400200b8
 8008980:	40020410 	.word	0x40020410
 8008984:	40020428 	.word	0x40020428
 8008988:	40020440 	.word	0x40020440
 800898c:	40020458 	.word	0x40020458
 8008990:	40020470 	.word	0x40020470
 8008994:	40020488 	.word	0x40020488
 8008998:	400204a0 	.word	0x400204a0
 800899c:	400204b8 	.word	0x400204b8
 80089a0:	58025408 	.word	0x58025408
 80089a4:	5802541c 	.word	0x5802541c
 80089a8:	58025430 	.word	0x58025430
 80089ac:	58025444 	.word	0x58025444
 80089b0:	58025458 	.word	0x58025458
 80089b4:	5802546c 	.word	0x5802546c
 80089b8:	58025480 	.word	0x58025480
 80089bc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	60da      	str	r2, [r3, #12]
}
 80089d0:	e04d      	b.n	8008a6e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a29      	ldr	r2, [pc, #164]	; (8008a7c <DMA_SetConfig+0x338>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d022      	beq.n	8008a22 <DMA_SetConfig+0x2de>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a27      	ldr	r2, [pc, #156]	; (8008a80 <DMA_SetConfig+0x33c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d01d      	beq.n	8008a22 <DMA_SetConfig+0x2de>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a26      	ldr	r2, [pc, #152]	; (8008a84 <DMA_SetConfig+0x340>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d018      	beq.n	8008a22 <DMA_SetConfig+0x2de>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a24      	ldr	r2, [pc, #144]	; (8008a88 <DMA_SetConfig+0x344>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d013      	beq.n	8008a22 <DMA_SetConfig+0x2de>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a23      	ldr	r2, [pc, #140]	; (8008a8c <DMA_SetConfig+0x348>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00e      	beq.n	8008a22 <DMA_SetConfig+0x2de>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a21      	ldr	r2, [pc, #132]	; (8008a90 <DMA_SetConfig+0x34c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d009      	beq.n	8008a22 <DMA_SetConfig+0x2de>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a20      	ldr	r2, [pc, #128]	; (8008a94 <DMA_SetConfig+0x350>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d004      	beq.n	8008a22 <DMA_SetConfig+0x2de>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1e      	ldr	r2, [pc, #120]	; (8008a98 <DMA_SetConfig+0x354>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d101      	bne.n	8008a26 <DMA_SetConfig+0x2e2>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <DMA_SetConfig+0x2e4>
 8008a26:	2300      	movs	r3, #0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d020      	beq.n	8008a6e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a30:	f003 031f 	and.w	r3, r3, #31
 8008a34:	2201      	movs	r2, #1
 8008a36:	409a      	lsls	r2, r3
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	2b40      	cmp	r3, #64	; 0x40
 8008a4a:	d108      	bne.n	8008a5e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	60da      	str	r2, [r3, #12]
}
 8008a5c:	e007      	b.n	8008a6e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	60da      	str	r2, [r3, #12]
}
 8008a6e:	bf00      	nop
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	58025408 	.word	0x58025408
 8008a80:	5802541c 	.word	0x5802541c
 8008a84:	58025430 	.word	0x58025430
 8008a88:	58025444 	.word	0x58025444
 8008a8c:	58025458 	.word	0x58025458
 8008a90:	5802546c 	.word	0x5802546c
 8008a94:	58025480 	.word	0x58025480
 8008a98:	58025494 	.word	0x58025494

08008a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a42      	ldr	r2, [pc, #264]	; (8008bb4 <DMA_CalcBaseAndBitshift+0x118>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d04a      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a41      	ldr	r2, [pc, #260]	; (8008bb8 <DMA_CalcBaseAndBitshift+0x11c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d045      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a3f      	ldr	r2, [pc, #252]	; (8008bbc <DMA_CalcBaseAndBitshift+0x120>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d040      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a3e      	ldr	r2, [pc, #248]	; (8008bc0 <DMA_CalcBaseAndBitshift+0x124>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d03b      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a3c      	ldr	r2, [pc, #240]	; (8008bc4 <DMA_CalcBaseAndBitshift+0x128>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d036      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a3b      	ldr	r2, [pc, #236]	; (8008bc8 <DMA_CalcBaseAndBitshift+0x12c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d031      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a39      	ldr	r2, [pc, #228]	; (8008bcc <DMA_CalcBaseAndBitshift+0x130>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d02c      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a38      	ldr	r2, [pc, #224]	; (8008bd0 <DMA_CalcBaseAndBitshift+0x134>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d027      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a36      	ldr	r2, [pc, #216]	; (8008bd4 <DMA_CalcBaseAndBitshift+0x138>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d022      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a35      	ldr	r2, [pc, #212]	; (8008bd8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d01d      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a33      	ldr	r2, [pc, #204]	; (8008bdc <DMA_CalcBaseAndBitshift+0x140>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d018      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a32      	ldr	r2, [pc, #200]	; (8008be0 <DMA_CalcBaseAndBitshift+0x144>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d013      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a30      	ldr	r2, [pc, #192]	; (8008be4 <DMA_CalcBaseAndBitshift+0x148>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00e      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a2f      	ldr	r2, [pc, #188]	; (8008be8 <DMA_CalcBaseAndBitshift+0x14c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d009      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a2d      	ldr	r2, [pc, #180]	; (8008bec <DMA_CalcBaseAndBitshift+0x150>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a2c      	ldr	r2, [pc, #176]	; (8008bf0 <DMA_CalcBaseAndBitshift+0x154>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d101      	bne.n	8008b48 <DMA_CalcBaseAndBitshift+0xac>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e000      	b.n	8008b4a <DMA_CalcBaseAndBitshift+0xae>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d024      	beq.n	8008b98 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	3b10      	subs	r3, #16
 8008b56:	4a27      	ldr	r2, [pc, #156]	; (8008bf4 <DMA_CalcBaseAndBitshift+0x158>)
 8008b58:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5c:	091b      	lsrs	r3, r3, #4
 8008b5e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	4a24      	ldr	r2, [pc, #144]	; (8008bf8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008b68:	5cd3      	ldrb	r3, [r2, r3]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d908      	bls.n	8008b88 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4b1f      	ldr	r3, [pc, #124]	; (8008bfc <DMA_CalcBaseAndBitshift+0x160>)
 8008b7e:	4013      	ands	r3, r2
 8008b80:	1d1a      	adds	r2, r3, #4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	659a      	str	r2, [r3, #88]	; 0x58
 8008b86:	e00d      	b.n	8008ba4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4b1b      	ldr	r3, [pc, #108]	; (8008bfc <DMA_CalcBaseAndBitshift+0x160>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6593      	str	r3, [r2, #88]	; 0x58
 8008b96:	e005      	b.n	8008ba4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	40020010 	.word	0x40020010
 8008bb8:	40020028 	.word	0x40020028
 8008bbc:	40020040 	.word	0x40020040
 8008bc0:	40020058 	.word	0x40020058
 8008bc4:	40020070 	.word	0x40020070
 8008bc8:	40020088 	.word	0x40020088
 8008bcc:	400200a0 	.word	0x400200a0
 8008bd0:	400200b8 	.word	0x400200b8
 8008bd4:	40020410 	.word	0x40020410
 8008bd8:	40020428 	.word	0x40020428
 8008bdc:	40020440 	.word	0x40020440
 8008be0:	40020458 	.word	0x40020458
 8008be4:	40020470 	.word	0x40020470
 8008be8:	40020488 	.word	0x40020488
 8008bec:	400204a0 	.word	0x400204a0
 8008bf0:	400204b8 	.word	0x400204b8
 8008bf4:	aaaaaaab 	.word	0xaaaaaaab
 8008bf8:	08017920 	.word	0x08017920
 8008bfc:	fffffc00 	.word	0xfffffc00

08008c00 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d120      	bne.n	8008c56 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d858      	bhi.n	8008cce <DMA_CheckFifoParam+0xce>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <DMA_CheckFifoParam+0x24>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c35 	.word	0x08008c35
 8008c28:	08008c47 	.word	0x08008c47
 8008c2c:	08008c35 	.word	0x08008c35
 8008c30:	08008ccf 	.word	0x08008ccf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d048      	beq.n	8008cd2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c44:	e045      	b.n	8008cd2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c4e:	d142      	bne.n	8008cd6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c54:	e03f      	b.n	8008cd6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c5e:	d123      	bne.n	8008ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d838      	bhi.n	8008cda <DMA_CheckFifoParam+0xda>
 8008c68:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <DMA_CheckFifoParam+0x70>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008c81 	.word	0x08008c81
 8008c74:	08008c87 	.word	0x08008c87
 8008c78:	08008c81 	.word	0x08008c81
 8008c7c:	08008c99 	.word	0x08008c99
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	73fb      	strb	r3, [r7, #15]
        break;
 8008c84:	e030      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d025      	beq.n	8008cde <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c96:	e022      	b.n	8008cde <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ca0:	d11f      	bne.n	8008ce2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ca6:	e01c      	b.n	8008ce2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d902      	bls.n	8008cb6 <DMA_CheckFifoParam+0xb6>
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d003      	beq.n	8008cbc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008cb4:	e018      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8008cba:	e015      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00e      	beq.n	8008ce6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ccc:	e00b      	b.n	8008ce6 <DMA_CheckFifoParam+0xe6>
        break;
 8008cce:	bf00      	nop
 8008cd0:	e00a      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008cd2:	bf00      	nop
 8008cd4:	e008      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008cd6:	bf00      	nop
 8008cd8:	e006      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008cda:	bf00      	nop
 8008cdc:	e004      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008cde:	bf00      	nop
 8008ce0:	e002      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008ce2:	bf00      	nop
 8008ce4:	e000      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
    break;
 8008ce6:	bf00      	nop
    }
  }

  return status;
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop

08008cf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a38      	ldr	r2, [pc, #224]	; (8008dec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d022      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a36      	ldr	r2, [pc, #216]	; (8008df0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d01d      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a35      	ldr	r2, [pc, #212]	; (8008df4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d018      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a33      	ldr	r2, [pc, #204]	; (8008df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d013      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a32      	ldr	r2, [pc, #200]	; (8008dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00e      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a30      	ldr	r2, [pc, #192]	; (8008e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d009      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a2f      	ldr	r2, [pc, #188]	; (8008e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d004      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a2d      	ldr	r2, [pc, #180]	; (8008e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d101      	bne.n	8008d5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008d56:	2301      	movs	r3, #1
 8008d58:	e000      	b.n	8008d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01a      	beq.n	8008d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	3b08      	subs	r3, #8
 8008d68:	4a28      	ldr	r2, [pc, #160]	; (8008e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6e:	091b      	lsrs	r3, r3, #4
 8008d70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4b26      	ldr	r3, [pc, #152]	; (8008e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a24      	ldr	r2, [pc, #144]	; (8008e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008d84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	409a      	lsls	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008d94:	e024      	b.n	8008de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	3b10      	subs	r3, #16
 8008d9e:	4a1e      	ldr	r2, [pc, #120]	; (8008e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008da0:	fba2 2303 	umull	r2, r3, r2, r3
 8008da4:	091b      	lsrs	r3, r3, #4
 8008da6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	4a1c      	ldr	r2, [pc, #112]	; (8008e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d806      	bhi.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4a1b      	ldr	r2, [pc, #108]	; (8008e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d902      	bls.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3308      	adds	r3, #8
 8008dbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	4b18      	ldr	r3, [pc, #96]	; (8008e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a16      	ldr	r2, [pc, #88]	; (8008e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008dd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f003 031f 	and.w	r3, r3, #31
 8008dd8:	2201      	movs	r2, #1
 8008dda:	409a      	lsls	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008de0:	bf00      	nop
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	58025408 	.word	0x58025408
 8008df0:	5802541c 	.word	0x5802541c
 8008df4:	58025430 	.word	0x58025430
 8008df8:	58025444 	.word	0x58025444
 8008dfc:	58025458 	.word	0x58025458
 8008e00:	5802546c 	.word	0x5802546c
 8008e04:	58025480 	.word	0x58025480
 8008e08:	58025494 	.word	0x58025494
 8008e0c:	cccccccd 	.word	0xcccccccd
 8008e10:	16009600 	.word	0x16009600
 8008e14:	58025880 	.word	0x58025880
 8008e18:	aaaaaaab 	.word	0xaaaaaaab
 8008e1c:	400204b8 	.word	0x400204b8
 8008e20:	4002040f 	.word	0x4002040f
 8008e24:	10008200 	.word	0x10008200
 8008e28:	40020880 	.word	0x40020880

08008e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d04a      	beq.n	8008ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d847      	bhi.n	8008ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a25      	ldr	r2, [pc, #148]	; (8008ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d022      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a24      	ldr	r2, [pc, #144]	; (8008ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d01d      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a22      	ldr	r2, [pc, #136]	; (8008eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d018      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a21      	ldr	r2, [pc, #132]	; (8008ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d013      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1f      	ldr	r2, [pc, #124]	; (8008ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00e      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d009      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1c      	ldr	r2, [pc, #112]	; (8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d004      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1b      	ldr	r2, [pc, #108]	; (8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d101      	bne.n	8008e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e000      	b.n	8008e9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4b17      	ldr	r3, [pc, #92]	; (8008f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	461a      	mov	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a15      	ldr	r2, [pc, #84]	; (8008f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008eb4:	671a      	str	r2, [r3, #112]	; 0x70
 8008eb6:	e009      	b.n	8008ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4b14      	ldr	r3, [pc, #80]	; (8008f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a11      	ldr	r2, [pc, #68]	; (8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008eca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	409a      	lsls	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	58025408 	.word	0x58025408
 8008ee8:	5802541c 	.word	0x5802541c
 8008eec:	58025430 	.word	0x58025430
 8008ef0:	58025444 	.word	0x58025444
 8008ef4:	58025458 	.word	0x58025458
 8008ef8:	5802546c 	.word	0x5802546c
 8008efc:	58025480 	.word	0x58025480
 8008f00:	58025494 	.word	0x58025494
 8008f04:	1600963f 	.word	0x1600963f
 8008f08:	58025940 	.word	0x58025940
 8008f0c:	1000823f 	.word	0x1000823f
 8008f10:	40020940 	.word	0x40020940

08008f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b089      	sub	sp, #36	; 0x24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f22:	4b89      	ldr	r3, [pc, #548]	; (8009148 <HAL_GPIO_Init+0x234>)
 8008f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f26:	e194      	b.n	8009252 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	fa01 f303 	lsl.w	r3, r1, r3
 8008f34:	4013      	ands	r3, r2
 8008f36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 8186 	beq.w	800924c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f003 0303 	and.w	r3, r3, #3
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d005      	beq.n	8008f58 <HAL_GPIO_Init+0x44>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d130      	bne.n	8008fba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	2203      	movs	r2, #3
 8008f64:	fa02 f303 	lsl.w	r3, r2, r3
 8008f68:	43db      	mvns	r3, r3
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f8e:	2201      	movs	r2, #1
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	fa02 f303 	lsl.w	r3, r2, r3
 8008f96:	43db      	mvns	r3, r3
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	091b      	lsrs	r3, r3, #4
 8008fa4:	f003 0201 	and.w	r2, r3, #1
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f003 0303 	and.w	r3, r3, #3
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d017      	beq.n	8008ff6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	2203      	movs	r2, #3
 8008fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd6:	43db      	mvns	r3, r3
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	689a      	ldr	r2, [r3, #8]
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d123      	bne.n	800904a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	08da      	lsrs	r2, r3, #3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3208      	adds	r2, #8
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	220f      	movs	r2, #15
 800901a:	fa02 f303 	lsl.w	r3, r2, r3
 800901e:	43db      	mvns	r3, r3
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	4013      	ands	r3, r2
 8009024:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	691a      	ldr	r2, [r3, #16]
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	fa02 f303 	lsl.w	r3, r2, r3
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	4313      	orrs	r3, r2
 800903a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	08da      	lsrs	r2, r3, #3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3208      	adds	r2, #8
 8009044:	69b9      	ldr	r1, [r7, #24]
 8009046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	2203      	movs	r2, #3
 8009056:	fa02 f303 	lsl.w	r3, r2, r3
 800905a:	43db      	mvns	r3, r3
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	4013      	ands	r3, r2
 8009060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f003 0203 	and.w	r2, r3, #3
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	fa02 f303 	lsl.w	r3, r2, r3
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	4313      	orrs	r3, r2
 8009076:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 80e0 	beq.w	800924c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800908c:	4b2f      	ldr	r3, [pc, #188]	; (800914c <HAL_GPIO_Init+0x238>)
 800908e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009092:	4a2e      	ldr	r2, [pc, #184]	; (800914c <HAL_GPIO_Init+0x238>)
 8009094:	f043 0302 	orr.w	r3, r3, #2
 8009098:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800909c:	4b2b      	ldr	r3, [pc, #172]	; (800914c <HAL_GPIO_Init+0x238>)
 800909e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090aa:	4a29      	ldr	r2, [pc, #164]	; (8009150 <HAL_GPIO_Init+0x23c>)
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	089b      	lsrs	r3, r3, #2
 80090b0:	3302      	adds	r3, #2
 80090b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	220f      	movs	r2, #15
 80090c2:	fa02 f303 	lsl.w	r3, r2, r3
 80090c6:	43db      	mvns	r3, r3
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	4013      	ands	r3, r2
 80090cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a20      	ldr	r2, [pc, #128]	; (8009154 <HAL_GPIO_Init+0x240>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d052      	beq.n	800917c <HAL_GPIO_Init+0x268>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a1f      	ldr	r2, [pc, #124]	; (8009158 <HAL_GPIO_Init+0x244>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d031      	beq.n	8009142 <HAL_GPIO_Init+0x22e>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a1e      	ldr	r2, [pc, #120]	; (800915c <HAL_GPIO_Init+0x248>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d02b      	beq.n	800913e <HAL_GPIO_Init+0x22a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a1d      	ldr	r2, [pc, #116]	; (8009160 <HAL_GPIO_Init+0x24c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d025      	beq.n	800913a <HAL_GPIO_Init+0x226>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a1c      	ldr	r2, [pc, #112]	; (8009164 <HAL_GPIO_Init+0x250>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d01f      	beq.n	8009136 <HAL_GPIO_Init+0x222>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a1b      	ldr	r2, [pc, #108]	; (8009168 <HAL_GPIO_Init+0x254>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d019      	beq.n	8009132 <HAL_GPIO_Init+0x21e>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a1a      	ldr	r2, [pc, #104]	; (800916c <HAL_GPIO_Init+0x258>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d013      	beq.n	800912e <HAL_GPIO_Init+0x21a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a19      	ldr	r2, [pc, #100]	; (8009170 <HAL_GPIO_Init+0x25c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00d      	beq.n	800912a <HAL_GPIO_Init+0x216>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a18      	ldr	r2, [pc, #96]	; (8009174 <HAL_GPIO_Init+0x260>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d007      	beq.n	8009126 <HAL_GPIO_Init+0x212>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a17      	ldr	r2, [pc, #92]	; (8009178 <HAL_GPIO_Init+0x264>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d101      	bne.n	8009122 <HAL_GPIO_Init+0x20e>
 800911e:	2309      	movs	r3, #9
 8009120:	e02d      	b.n	800917e <HAL_GPIO_Init+0x26a>
 8009122:	230a      	movs	r3, #10
 8009124:	e02b      	b.n	800917e <HAL_GPIO_Init+0x26a>
 8009126:	2308      	movs	r3, #8
 8009128:	e029      	b.n	800917e <HAL_GPIO_Init+0x26a>
 800912a:	2307      	movs	r3, #7
 800912c:	e027      	b.n	800917e <HAL_GPIO_Init+0x26a>
 800912e:	2306      	movs	r3, #6
 8009130:	e025      	b.n	800917e <HAL_GPIO_Init+0x26a>
 8009132:	2305      	movs	r3, #5
 8009134:	e023      	b.n	800917e <HAL_GPIO_Init+0x26a>
 8009136:	2304      	movs	r3, #4
 8009138:	e021      	b.n	800917e <HAL_GPIO_Init+0x26a>
 800913a:	2303      	movs	r3, #3
 800913c:	e01f      	b.n	800917e <HAL_GPIO_Init+0x26a>
 800913e:	2302      	movs	r3, #2
 8009140:	e01d      	b.n	800917e <HAL_GPIO_Init+0x26a>
 8009142:	2301      	movs	r3, #1
 8009144:	e01b      	b.n	800917e <HAL_GPIO_Init+0x26a>
 8009146:	bf00      	nop
 8009148:	58000080 	.word	0x58000080
 800914c:	58024400 	.word	0x58024400
 8009150:	58000400 	.word	0x58000400
 8009154:	58020000 	.word	0x58020000
 8009158:	58020400 	.word	0x58020400
 800915c:	58020800 	.word	0x58020800
 8009160:	58020c00 	.word	0x58020c00
 8009164:	58021000 	.word	0x58021000
 8009168:	58021400 	.word	0x58021400
 800916c:	58021800 	.word	0x58021800
 8009170:	58021c00 	.word	0x58021c00
 8009174:	58022000 	.word	0x58022000
 8009178:	58022400 	.word	0x58022400
 800917c:	2300      	movs	r3, #0
 800917e:	69fa      	ldr	r2, [r7, #28]
 8009180:	f002 0203 	and.w	r2, r2, #3
 8009184:	0092      	lsls	r2, r2, #2
 8009186:	4093      	lsls	r3, r2
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	4313      	orrs	r3, r2
 800918c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800918e:	4938      	ldr	r1, [pc, #224]	; (8009270 <HAL_GPIO_Init+0x35c>)
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	089b      	lsrs	r3, r3, #2
 8009194:	3302      	adds	r3, #2
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800919c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	43db      	mvns	r3, r3
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	4013      	ands	r3, r2
 80091ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	4313      	orrs	r3, r2
 80091c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80091c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80091ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	43db      	mvns	r3, r3
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	4013      	ands	r3, r2
 80091da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80091f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	43db      	mvns	r3, r3
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	4013      	ands	r3, r2
 8009206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	4313      	orrs	r3, r2
 800921a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	43db      	mvns	r3, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4013      	ands	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	4313      	orrs	r3, r2
 8009244:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	3301      	adds	r3, #1
 8009250:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	fa22 f303 	lsr.w	r3, r2, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	f47f ae63 	bne.w	8008f28 <HAL_GPIO_Init+0x14>
  }
}
 8009262:	bf00      	nop
 8009264:	bf00      	nop
 8009266:	3724      	adds	r7, #36	; 0x24
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	58000400 	.word	0x58000400

08009274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691a      	ldr	r2, [r3, #16]
 8009284:	887b      	ldrh	r3, [r7, #2]
 8009286:	4013      	ands	r3, r2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800928c:	2301      	movs	r3, #1
 800928e:	73fb      	strb	r3, [r7, #15]
 8009290:	e001      	b.n	8009296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	807b      	strh	r3, [r7, #2]
 80092b0:	4613      	mov	r3, r2
 80092b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092b4:	787b      	ldrb	r3, [r7, #1]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80092ba:	887a      	ldrh	r2, [r7, #2]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80092c0:	e003      	b.n	80092ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80092c2:	887b      	ldrh	r3, [r7, #2]
 80092c4:	041a      	lsls	r2, r3, #16
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	619a      	str	r2, [r3, #24]
}
 80092ca:	bf00      	nop
 80092cc:	370c      	adds	r7, #12
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
	...

080092d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d101      	bne.n	80092ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e08b      	b.n	8009402 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7fa f8c6 	bl	8003490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2224      	movs	r2, #36	; 0x24
 8009308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 0201 	bic.w	r2, r2, #1
 800931a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009328:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689a      	ldr	r2, [r3, #8]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009338:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d107      	bne.n	8009352 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	689a      	ldr	r2, [r3, #8]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800934e:	609a      	str	r2, [r3, #8]
 8009350:	e006      	b.n	8009360 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689a      	ldr	r2, [r3, #8]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800935e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d108      	bne.n	800937a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009376:	605a      	str	r2, [r3, #4]
 8009378:	e007      	b.n	800938a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009388:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	6859      	ldr	r1, [r3, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	4b1d      	ldr	r3, [pc, #116]	; (800940c <HAL_I2C_Init+0x134>)
 8009396:	430b      	orrs	r3, r1
 8009398:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	430a      	orrs	r2, r1
 80093c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	69d9      	ldr	r1, [r3, #28]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a1a      	ldr	r2, [r3, #32]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0201 	orr.w	r2, r2, #1
 80093e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	02008000 	.word	0x02008000

08009410 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	607a      	str	r2, [r7, #4]
 800941a:	461a      	mov	r2, r3
 800941c:	460b      	mov	r3, r1
 800941e:	817b      	strh	r3, [r7, #10]
 8009420:	4613      	mov	r3, r2
 8009422:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b20      	cmp	r3, #32
 800942e:	f040 80fd 	bne.w	800962c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_I2C_Master_Transmit+0x30>
 800943c:	2302      	movs	r3, #2
 800943e:	e0f6      	b.n	800962e <HAL_I2C_Master_Transmit+0x21e>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009448:	f7fa fdf4 	bl	8004034 <HAL_GetTick>
 800944c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	2319      	movs	r3, #25
 8009454:	2201      	movs	r2, #1
 8009456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fa0a 	bl	8009874 <I2C_WaitOnFlagUntilTimeout>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e0e1      	b.n	800962e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2221      	movs	r2, #33	; 0x21
 800946e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2210      	movs	r2, #16
 8009476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	893a      	ldrh	r2, [r7, #8]
 800948a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009496:	b29b      	uxth	r3, r3
 8009498:	2bff      	cmp	r3, #255	; 0xff
 800949a:	d906      	bls.n	80094aa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	22ff      	movs	r2, #255	; 0xff
 80094a0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80094a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	e007      	b.n	80094ba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80094b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094b8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d024      	beq.n	800950c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c6:	781a      	ldrb	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	3301      	adds	r3, #1
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	8979      	ldrh	r1, [r7, #10]
 80094fe:	4b4e      	ldr	r3, [pc, #312]	; (8009638 <HAL_I2C_Master_Transmit+0x228>)
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fc05 	bl	8009d14 <I2C_TransferConfig>
 800950a:	e066      	b.n	80095da <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009510:	b2da      	uxtb	r2, r3
 8009512:	8979      	ldrh	r1, [r7, #10]
 8009514:	4b48      	ldr	r3, [pc, #288]	; (8009638 <HAL_I2C_Master_Transmit+0x228>)
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f000 fbfa 	bl	8009d14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009520:	e05b      	b.n	80095da <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	6a39      	ldr	r1, [r7, #32]
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 f9fd 	bl	8009926 <I2C_WaitOnTXISFlagUntilTimeout>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e07b      	b.n	800962e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	1c5a      	adds	r2, r3, #1
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009550:	b29b      	uxth	r3, r3
 8009552:	3b01      	subs	r3, #1
 8009554:	b29a      	uxth	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800955e:	3b01      	subs	r3, #1
 8009560:	b29a      	uxth	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956a:	b29b      	uxth	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d034      	beq.n	80095da <HAL_I2C_Master_Transmit+0x1ca>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009574:	2b00      	cmp	r3, #0
 8009576:	d130      	bne.n	80095da <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	2200      	movs	r2, #0
 8009580:	2180      	movs	r1, #128	; 0x80
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 f976 	bl	8009874 <I2C_WaitOnFlagUntilTimeout>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e04d      	b.n	800962e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009596:	b29b      	uxth	r3, r3
 8009598:	2bff      	cmp	r3, #255	; 0xff
 800959a:	d90e      	bls.n	80095ba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	22ff      	movs	r2, #255	; 0xff
 80095a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	8979      	ldrh	r1, [r7, #10]
 80095aa:	2300      	movs	r3, #0
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 fbae 	bl	8009d14 <I2C_TransferConfig>
 80095b8:	e00f      	b.n	80095da <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095be:	b29a      	uxth	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	8979      	ldrh	r1, [r7, #10]
 80095cc:	2300      	movs	r3, #0
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 fb9d 	bl	8009d14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095de:	b29b      	uxth	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d19e      	bne.n	8009522 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	6a39      	ldr	r1, [r7, #32]
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 f9e3 	bl	80099b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e01a      	b.n	800962e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2220      	movs	r2, #32
 80095fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6859      	ldr	r1, [r3, #4]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b0c      	ldr	r3, [pc, #48]	; (800963c <HAL_I2C_Master_Transmit+0x22c>)
 800960c:	400b      	ands	r3, r1
 800960e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2220      	movs	r2, #32
 8009614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	e000      	b.n	800962e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800962c:	2302      	movs	r3, #2
  }
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	80002000 	.word	0x80002000
 800963c:	fe00e800 	.word	0xfe00e800

08009640 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af02      	add	r7, sp, #8
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	607a      	str	r2, [r7, #4]
 800964a:	461a      	mov	r2, r3
 800964c:	460b      	mov	r3, r1
 800964e:	817b      	strh	r3, [r7, #10]
 8009650:	4613      	mov	r3, r2
 8009652:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b20      	cmp	r3, #32
 800965e:	f040 80db 	bne.w	8009818 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009668:	2b01      	cmp	r3, #1
 800966a:	d101      	bne.n	8009670 <HAL_I2C_Master_Receive+0x30>
 800966c:	2302      	movs	r3, #2
 800966e:	e0d4      	b.n	800981a <HAL_I2C_Master_Receive+0x1da>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009678:	f7fa fcdc 	bl	8004034 <HAL_GetTick>
 800967c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	2319      	movs	r3, #25
 8009684:	2201      	movs	r2, #1
 8009686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 f8f2 	bl	8009874 <I2C_WaitOnFlagUntilTimeout>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e0bf      	b.n	800981a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2222      	movs	r2, #34	; 0x22
 800969e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2210      	movs	r2, #16
 80096a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	893a      	ldrh	r2, [r7, #8]
 80096ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2bff      	cmp	r3, #255	; 0xff
 80096ca:	d90e      	bls.n	80096ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	22ff      	movs	r2, #255	; 0xff
 80096d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	8979      	ldrh	r1, [r7, #10]
 80096da:	4b52      	ldr	r3, [pc, #328]	; (8009824 <HAL_I2C_Master_Receive+0x1e4>)
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 fb16 	bl	8009d14 <I2C_TransferConfig>
 80096e8:	e06d      	b.n	80097c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	8979      	ldrh	r1, [r7, #10]
 80096fc:	4b49      	ldr	r3, [pc, #292]	; (8009824 <HAL_I2C_Master_Receive+0x1e4>)
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 fb05 	bl	8009d14 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800970a:	e05c      	b.n	80097c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	6a39      	ldr	r1, [r7, #32]
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 f993 	bl	8009a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e07c      	b.n	800981a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	b2d2      	uxtb	r2, r2
 800972c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009748:	b29b      	uxth	r3, r3
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009756:	b29b      	uxth	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d034      	beq.n	80097c6 <HAL_I2C_Master_Receive+0x186>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009760:	2b00      	cmp	r3, #0
 8009762:	d130      	bne.n	80097c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	2200      	movs	r2, #0
 800976c:	2180      	movs	r1, #128	; 0x80
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f880 	bl	8009874 <I2C_WaitOnFlagUntilTimeout>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e04d      	b.n	800981a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009782:	b29b      	uxth	r3, r3
 8009784:	2bff      	cmp	r3, #255	; 0xff
 8009786:	d90e      	bls.n	80097a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	22ff      	movs	r2, #255	; 0xff
 800978c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009792:	b2da      	uxtb	r2, r3
 8009794:	8979      	ldrh	r1, [r7, #10]
 8009796:	2300      	movs	r3, #0
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 fab8 	bl	8009d14 <I2C_TransferConfig>
 80097a4:	e00f      	b.n	80097c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	8979      	ldrh	r1, [r7, #10]
 80097b8:	2300      	movs	r3, #0
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 faa7 	bl	8009d14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d19d      	bne.n	800970c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	6a39      	ldr	r1, [r7, #32]
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 f8ed 	bl	80099b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e01a      	b.n	800981a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2220      	movs	r2, #32
 80097ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6859      	ldr	r1, [r3, #4]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <HAL_I2C_Master_Receive+0x1e8>)
 80097f8:	400b      	ands	r3, r1
 80097fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2220      	movs	r2, #32
 8009800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	e000      	b.n	800981a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009818:	2302      	movs	r3, #2
  }
}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	80002400 	.word	0x80002400
 8009828:	fe00e800 	.word	0xfe00e800

0800982c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b02      	cmp	r3, #2
 8009840:	d103      	bne.n	800984a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2200      	movs	r2, #0
 8009848:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b01      	cmp	r3, #1
 8009856:	d007      	beq.n	8009868 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	699a      	ldr	r2, [r3, #24]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0201 	orr.w	r2, r2, #1
 8009866:	619a      	str	r2, [r3, #24]
  }
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	4613      	mov	r3, r2
 8009882:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009884:	e03b      	b.n	80098fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f000 f962 	bl	8009b54 <I2C_IsErrorOccurred>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e041      	b.n	800991e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a0:	d02d      	beq.n	80098fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098a2:	f7fa fbc7 	bl	8004034 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d302      	bcc.n	80098b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d122      	bne.n	80098fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	699a      	ldr	r2, [r3, #24]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	4013      	ands	r3, r2
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	bf0c      	ite	eq
 80098c8:	2301      	moveq	r3, #1
 80098ca:	2300      	movne	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	461a      	mov	r2, r3
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d113      	bne.n	80098fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098da:	f043 0220 	orr.w	r2, r3, #32
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2220      	movs	r2, #32
 80098e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e00f      	b.n	800991e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	699a      	ldr	r2, [r3, #24]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4013      	ands	r3, r2
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	429a      	cmp	r2, r3
 800990c:	bf0c      	ite	eq
 800990e:	2301      	moveq	r3, #1
 8009910:	2300      	movne	r3, #0
 8009912:	b2db      	uxtb	r3, r3
 8009914:	461a      	mov	r2, r3
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	429a      	cmp	r2, r3
 800991a:	d0b4      	beq.n	8009886 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	60b9      	str	r1, [r7, #8]
 8009930:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009932:	e033      	b.n	800999c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	68b9      	ldr	r1, [r7, #8]
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 f90b 	bl	8009b54 <I2C_IsErrorOccurred>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e031      	b.n	80099ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800994e:	d025      	beq.n	800999c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009950:	f7fa fb70 	bl	8004034 <HAL_GetTick>
 8009954:	4602      	mov	r2, r0
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	429a      	cmp	r2, r3
 800995e:	d302      	bcc.n	8009966 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d11a      	bne.n	800999c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	2b02      	cmp	r3, #2
 8009972:	d013      	beq.n	800999c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009978:	f043 0220 	orr.w	r2, r3, #32
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2220      	movs	r2, #32
 8009984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e007      	b.n	80099ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d1c4      	bne.n	8009934 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099c0:	e02f      	b.n	8009a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	68b9      	ldr	r1, [r7, #8]
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 f8c4 	bl	8009b54 <I2C_IsErrorOccurred>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e02d      	b.n	8009a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099d6:	f7fa fb2d 	bl	8004034 <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d302      	bcc.n	80099ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d11a      	bne.n	8009a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	f003 0320 	and.w	r3, r3, #32
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	d013      	beq.n	8009a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099fe:	f043 0220 	orr.w	r2, r3, #32
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e007      	b.n	8009a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	f003 0320 	and.w	r3, r3, #32
 8009a2c:	2b20      	cmp	r3, #32
 8009a2e:	d1c8      	bne.n	80099c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009a4c:	e071      	b.n	8009b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f87e 	bl	8009b54 <I2C_IsErrorOccurred>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d13b      	bne.n	8009ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d138      	bne.n	8009ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	d105      	bne.n	8009a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	f003 0310 	and.w	r3, r3, #16
 8009a9a:	2b10      	cmp	r3, #16
 8009a9c:	d121      	bne.n	8009ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2210      	movs	r2, #16
 8009aa4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2204      	movs	r2, #4
 8009aaa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6859      	ldr	r1, [r3, #4]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4b24      	ldr	r3, [pc, #144]	; (8009b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009ac0:	400b      	ands	r3, r1
 8009ac2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	75fb      	strb	r3, [r7, #23]
 8009ae0:	e002      	b.n	8009ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009ae8:	f7fa faa4 	bl	8004034 <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d302      	bcc.n	8009afe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d119      	bne.n	8009b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d116      	bne.n	8009b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d00f      	beq.n	8009b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b16:	f043 0220 	orr.w	r2, r3, #32
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2220      	movs	r2, #32
 8009b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d002      	beq.n	8009b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d083      	beq.n	8009a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3718      	adds	r7, #24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	fe00e800 	.word	0xfe00e800

08009b54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	f003 0310 	and.w	r3, r3, #16
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d068      	beq.n	8009c52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2210      	movs	r2, #16
 8009b86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b88:	e049      	b.n	8009c1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b90:	d045      	beq.n	8009c1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b92:	f7fa fa4f 	bl	8004034 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d302      	bcc.n	8009ba8 <I2C_IsErrorOccurred+0x54>
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d13a      	bne.n	8009c1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bca:	d121      	bne.n	8009c10 <I2C_IsErrorOccurred+0xbc>
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bd2:	d01d      	beq.n	8009c10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009bd4:	7cfb      	ldrb	r3, [r7, #19]
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	d01a      	beq.n	8009c10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009be8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009bea:	f7fa fa23 	bl	8004034 <HAL_GetTick>
 8009bee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bf0:	e00e      	b.n	8009c10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009bf2:	f7fa fa1f 	bl	8004034 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b19      	cmp	r3, #25
 8009bfe:	d907      	bls.n	8009c10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	f043 0320 	orr.w	r3, r3, #32
 8009c06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009c0e:	e006      	b.n	8009c1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d1e9      	bne.n	8009bf2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	d003      	beq.n	8009c34 <I2C_IsErrorOccurred+0xe0>
 8009c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0aa      	beq.n	8009b8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2220      	movs	r2, #32
 8009c42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	f043 0304 	orr.w	r3, r3, #4
 8009c4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00b      	beq.n	8009c7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	f043 0301 	orr.w	r3, r3, #1
 8009c6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	f043 0308 	orr.w	r3, r3, #8
 8009c8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	f043 0302 	orr.w	r3, r3, #2
 8009cae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01c      	beq.n	8009d02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7ff fdaf 	bl	800982c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6859      	ldr	r1, [r3, #4]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	4b0d      	ldr	r3, [pc, #52]	; (8009d10 <I2C_IsErrorOccurred+0x1bc>)
 8009cda:	400b      	ands	r3, r1
 8009cdc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3728      	adds	r7, #40	; 0x28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	fe00e800 	.word	0xfe00e800

08009d14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	607b      	str	r3, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	817b      	strh	r3, [r7, #10]
 8009d22:	4613      	mov	r3, r2
 8009d24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d26:	897b      	ldrh	r3, [r7, #10]
 8009d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d2c:	7a7b      	ldrb	r3, [r7, #9]
 8009d2e:	041b      	lsls	r3, r3, #16
 8009d30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	0d5b      	lsrs	r3, r3, #21
 8009d4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009d52:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <I2C_TransferConfig+0x60>)
 8009d54:	430b      	orrs	r3, r1
 8009d56:	43db      	mvns	r3, r3
 8009d58:	ea02 0103 	and.w	r1, r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d66:	bf00      	nop
 8009d68:	371c      	adds	r7, #28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	03ff63ff 	.word	0x03ff63ff

08009d78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b20      	cmp	r3, #32
 8009d8c:	d138      	bne.n	8009e00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e032      	b.n	8009e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2224      	movs	r2, #36	; 0x24
 8009da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f022 0201 	bic.w	r2, r2, #1
 8009dba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6819      	ldr	r1, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0201 	orr.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2220      	movs	r2, #32
 8009df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	e000      	b.n	8009e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e00:	2302      	movs	r3, #2
  }
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d139      	bne.n	8009e98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d101      	bne.n	8009e32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e2e:	2302      	movs	r3, #2
 8009e30:	e033      	b.n	8009e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2224      	movs	r2, #36	; 0x24
 8009e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 0201 	bic.w	r2, r2, #1
 8009e50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	021b      	lsls	r3, r3, #8
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f042 0201 	orr.w	r2, r2, #1
 8009e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2220      	movs	r2, #32
 8009e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	e000      	b.n	8009e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e98:	2302      	movs	r3, #2
  }
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
	...

08009ea8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009eb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009eb6:	4a0c      	ldr	r2, [pc, #48]	; (8009ee8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009eb8:	f043 0302 	orr.w	r3, r3, #2
 8009ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009ec0:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009ece:	4b07      	ldr	r3, [pc, #28]	; (8009eec <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	4906      	ldr	r1, [pc, #24]	; (8009eec <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	604b      	str	r3, [r1, #4]
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	58024400 	.word	0x58024400
 8009eec:	58000400 	.word	0x58000400

08009ef0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009efc:	4b18      	ldr	r3, [pc, #96]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x70>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f023 0201 	bic.w	r2, r3, #1
 8009f04:	4916      	ldr	r1, [pc, #88]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009f0c:	4b14      	ldr	r3, [pc, #80]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	4a13      	ldr	r2, [pc, #76]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f12:	f023 0305 	bic.w	r3, r3, #5
 8009f16:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009f18:	4b11      	ldr	r3, [pc, #68]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	4a10      	ldr	r2, [pc, #64]	; (8009f60 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f1e:	f023 0302 	bic.w	r3, r3, #2
 8009f22:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009f24:	4b0f      	ldr	r3, [pc, #60]	; (8009f64 <HAL_PWR_EnterSTOPMode+0x74>)
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	4a0e      	ldr	r2, [pc, #56]	; (8009f64 <HAL_PWR_EnterSTOPMode+0x74>)
 8009f2a:	f043 0304 	orr.w	r3, r3, #4
 8009f2e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f30:	f3bf 8f4f 	dsb	sy
}
 8009f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f36:	f3bf 8f6f 	isb	sy
}
 8009f3a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009f3c:	78fb      	ldrb	r3, [r7, #3]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d101      	bne.n	8009f46 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009f42:	bf30      	wfi
 8009f44:	e000      	b.n	8009f48 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009f46:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <HAL_PWR_EnterSTOPMode+0x74>)
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	4a05      	ldr	r2, [pc, #20]	; (8009f64 <HAL_PWR_EnterSTOPMode+0x74>)
 8009f4e:	f023 0304 	bic.w	r3, r3, #4
 8009f52:	6113      	str	r3, [r2, #16]
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	58024800 	.word	0x58024800
 8009f64:	e000ed00 	.word	0xe000ed00

08009f68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f70:	4b19      	ldr	r3, [pc, #100]	; (8009fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d00a      	beq.n	8009f92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f7c:	4b16      	ldr	r3, [pc, #88]	; (8009fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f003 0307 	and.w	r3, r3, #7
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d001      	beq.n	8009f8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e01f      	b.n	8009fce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	e01d      	b.n	8009fce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f92:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f023 0207 	bic.w	r2, r3, #7
 8009f9a:	490f      	ldr	r1, [pc, #60]	; (8009fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009fa2:	f7fa f847 	bl	8004034 <HAL_GetTick>
 8009fa6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fa8:	e009      	b.n	8009fbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009faa:	f7fa f843 	bl	8004034 <HAL_GetTick>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fb8:	d901      	bls.n	8009fbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e007      	b.n	8009fce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fbe:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fca:	d1ee      	bne.n	8009faa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	58024800 	.word	0x58024800

08009fdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08c      	sub	sp, #48	; 0x30
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d102      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	f000 bc48 	b.w	800a880 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 8088 	beq.w	800a10e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ffe:	4b99      	ldr	r3, [pc, #612]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a006:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a008:	4b96      	ldr	r3, [pc, #600]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	2b10      	cmp	r3, #16
 800a012:	d007      	beq.n	800a024 <HAL_RCC_OscConfig+0x48>
 800a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a016:	2b18      	cmp	r3, #24
 800a018:	d111      	bne.n	800a03e <HAL_RCC_OscConfig+0x62>
 800a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	2b02      	cmp	r3, #2
 800a022:	d10c      	bne.n	800a03e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a024:	4b8f      	ldr	r3, [pc, #572]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d06d      	beq.n	800a10c <HAL_RCC_OscConfig+0x130>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d169      	bne.n	800a10c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	f000 bc21 	b.w	800a880 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a046:	d106      	bne.n	800a056 <HAL_RCC_OscConfig+0x7a>
 800a048:	4b86      	ldr	r3, [pc, #536]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a85      	ldr	r2, [pc, #532]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a04e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	e02e      	b.n	800a0b4 <HAL_RCC_OscConfig+0xd8>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10c      	bne.n	800a078 <HAL_RCC_OscConfig+0x9c>
 800a05e:	4b81      	ldr	r3, [pc, #516]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a80      	ldr	r2, [pc, #512]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	4b7e      	ldr	r3, [pc, #504]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a7d      	ldr	r2, [pc, #500]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	e01d      	b.n	800a0b4 <HAL_RCC_OscConfig+0xd8>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a080:	d10c      	bne.n	800a09c <HAL_RCC_OscConfig+0xc0>
 800a082:	4b78      	ldr	r3, [pc, #480]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a77      	ldr	r2, [pc, #476]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	4b75      	ldr	r3, [pc, #468]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a74      	ldr	r2, [pc, #464]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	e00b      	b.n	800a0b4 <HAL_RCC_OscConfig+0xd8>
 800a09c:	4b71      	ldr	r3, [pc, #452]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a70      	ldr	r2, [pc, #448]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a0a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	4b6e      	ldr	r3, [pc, #440]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a6d      	ldr	r2, [pc, #436]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a0ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d013      	beq.n	800a0e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0bc:	f7f9 ffba 	bl	8004034 <HAL_GetTick>
 800a0c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0c2:	e008      	b.n	800a0d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0c4:	f7f9 ffb6 	bl	8004034 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	2b64      	cmp	r3, #100	; 0x64
 800a0d0:	d901      	bls.n	800a0d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e3d4      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0d6:	4b63      	ldr	r3, [pc, #396]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d0f0      	beq.n	800a0c4 <HAL_RCC_OscConfig+0xe8>
 800a0e2:	e014      	b.n	800a10e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e4:	f7f9 ffa6 	bl	8004034 <HAL_GetTick>
 800a0e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0ea:	e008      	b.n	800a0fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0ec:	f7f9 ffa2 	bl	8004034 <HAL_GetTick>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	2b64      	cmp	r3, #100	; 0x64
 800a0f8:	d901      	bls.n	800a0fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e3c0      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0fe:	4b59      	ldr	r3, [pc, #356]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1f0      	bne.n	800a0ec <HAL_RCC_OscConfig+0x110>
 800a10a:	e000      	b.n	800a10e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a10c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 0302 	and.w	r3, r3, #2
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 80ca 	beq.w	800a2b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a11c:	4b51      	ldr	r3, [pc, #324]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a124:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a126:	4b4f      	ldr	r3, [pc, #316]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d007      	beq.n	800a142 <HAL_RCC_OscConfig+0x166>
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	2b18      	cmp	r3, #24
 800a136:	d156      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x20a>
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d151      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a142:	4b48      	ldr	r3, [pc, #288]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0304 	and.w	r3, r3, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d005      	beq.n	800a15a <HAL_RCC_OscConfig+0x17e>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e392      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a15a:	4b42      	ldr	r3, [pc, #264]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f023 0219 	bic.w	r2, r3, #25
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	493f      	ldr	r1, [pc, #252]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a16c:	f7f9 ff62 	bl	8004034 <HAL_GetTick>
 800a170:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a172:	e008      	b.n	800a186 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a174:	f7f9 ff5e 	bl	8004034 <HAL_GetTick>
 800a178:	4602      	mov	r2, r0
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d901      	bls.n	800a186 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e37c      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a186:	4b37      	ldr	r3, [pc, #220]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0304 	and.w	r3, r3, #4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0f0      	beq.n	800a174 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a192:	f7f9 ff5b 	bl	800404c <HAL_GetREVID>
 800a196:	4603      	mov	r3, r0
 800a198:	f241 0203 	movw	r2, #4099	; 0x1003
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d817      	bhi.n	800a1d0 <HAL_RCC_OscConfig+0x1f4>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	2b40      	cmp	r3, #64	; 0x40
 800a1a6:	d108      	bne.n	800a1ba <HAL_RCC_OscConfig+0x1de>
 800a1a8:	4b2e      	ldr	r3, [pc, #184]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1b0:	4a2c      	ldr	r2, [pc, #176]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a1b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1b8:	e07a      	b.n	800a2b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ba:	4b2a      	ldr	r3, [pc, #168]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	031b      	lsls	r3, r3, #12
 800a1c8:	4926      	ldr	r1, [pc, #152]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1ce:	e06f      	b.n	800a2b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1d0:	4b24      	ldr	r3, [pc, #144]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	061b      	lsls	r3, r3, #24
 800a1de:	4921      	ldr	r1, [pc, #132]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1e4:	e064      	b.n	800a2b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d047      	beq.n	800a27e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1ee:	4b1d      	ldr	r3, [pc, #116]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f023 0219 	bic.w	r2, r3, #25
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	491a      	ldr	r1, [pc, #104]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a200:	f7f9 ff18 	bl	8004034 <HAL_GetTick>
 800a204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a206:	e008      	b.n	800a21a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a208:	f7f9 ff14 	bl	8004034 <HAL_GetTick>
 800a20c:	4602      	mov	r2, r0
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	2b02      	cmp	r3, #2
 800a214:	d901      	bls.n	800a21a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a216:	2303      	movs	r3, #3
 800a218:	e332      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a21a:	4b12      	ldr	r3, [pc, #72]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0304 	and.w	r3, r3, #4
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0f0      	beq.n	800a208 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a226:	f7f9 ff11 	bl	800404c <HAL_GetREVID>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a230:	4293      	cmp	r3, r2
 800a232:	d819      	bhi.n	800a268 <HAL_RCC_OscConfig+0x28c>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	2b40      	cmp	r3, #64	; 0x40
 800a23a:	d108      	bne.n	800a24e <HAL_RCC_OscConfig+0x272>
 800a23c:	4b09      	ldr	r3, [pc, #36]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a244:	4a07      	ldr	r2, [pc, #28]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a24a:	6053      	str	r3, [r2, #4]
 800a24c:	e030      	b.n	800a2b0 <HAL_RCC_OscConfig+0x2d4>
 800a24e:	4b05      	ldr	r3, [pc, #20]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	031b      	lsls	r3, r3, #12
 800a25c:	4901      	ldr	r1, [pc, #4]	; (800a264 <HAL_RCC_OscConfig+0x288>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	604b      	str	r3, [r1, #4]
 800a262:	e025      	b.n	800a2b0 <HAL_RCC_OscConfig+0x2d4>
 800a264:	58024400 	.word	0x58024400
 800a268:	4b9a      	ldr	r3, [pc, #616]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	061b      	lsls	r3, r3, #24
 800a276:	4997      	ldr	r1, [pc, #604]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a278:	4313      	orrs	r3, r2
 800a27a:	604b      	str	r3, [r1, #4]
 800a27c:	e018      	b.n	800a2b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a27e:	4b95      	ldr	r3, [pc, #596]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a94      	ldr	r2, [pc, #592]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a284:	f023 0301 	bic.w	r3, r3, #1
 800a288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28a:	f7f9 fed3 	bl	8004034 <HAL_GetTick>
 800a28e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a290:	e008      	b.n	800a2a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a292:	f7f9 fecf 	bl	8004034 <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d901      	bls.n	800a2a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e2ed      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a2a4:	4b8b      	ldr	r3, [pc, #556]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1f0      	bne.n	800a292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0310 	and.w	r3, r3, #16
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 80a9 	beq.w	800a410 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2be:	4b85      	ldr	r3, [pc, #532]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2c8:	4b82      	ldr	r3, [pc, #520]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	d007      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x308>
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	2b18      	cmp	r3, #24
 800a2d8:	d13a      	bne.n	800a350 <HAL_RCC_OscConfig+0x374>
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f003 0303 	and.w	r3, r3, #3
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d135      	bne.n	800a350 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2e4:	4b7b      	ldr	r3, [pc, #492]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d005      	beq.n	800a2fc <HAL_RCC_OscConfig+0x320>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	2b80      	cmp	r3, #128	; 0x80
 800a2f6:	d001      	beq.n	800a2fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e2c1      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2fc:	f7f9 fea6 	bl	800404c <HAL_GetREVID>
 800a300:	4603      	mov	r3, r0
 800a302:	f241 0203 	movw	r2, #4099	; 0x1003
 800a306:	4293      	cmp	r3, r2
 800a308:	d817      	bhi.n	800a33a <HAL_RCC_OscConfig+0x35e>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	2b20      	cmp	r3, #32
 800a310:	d108      	bne.n	800a324 <HAL_RCC_OscConfig+0x348>
 800a312:	4b70      	ldr	r3, [pc, #448]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a31a:	4a6e      	ldr	r2, [pc, #440]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a31c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a320:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a322:	e075      	b.n	800a410 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a324:	4b6b      	ldr	r3, [pc, #428]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	069b      	lsls	r3, r3, #26
 800a332:	4968      	ldr	r1, [pc, #416]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a334:	4313      	orrs	r3, r2
 800a336:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a338:	e06a      	b.n	800a410 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a33a:	4b66      	ldr	r3, [pc, #408]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	061b      	lsls	r3, r3, #24
 800a348:	4962      	ldr	r1, [pc, #392]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a34e:	e05f      	b.n	800a410 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d042      	beq.n	800a3de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a358:	4b5e      	ldr	r3, [pc, #376]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a5d      	ldr	r2, [pc, #372]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a364:	f7f9 fe66 	bl	8004034 <HAL_GetTick>
 800a368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a36a:	e008      	b.n	800a37e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a36c:	f7f9 fe62 	bl	8004034 <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	2b02      	cmp	r3, #2
 800a378:	d901      	bls.n	800a37e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e280      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a37e:	4b55      	ldr	r3, [pc, #340]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0f0      	beq.n	800a36c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a38a:	f7f9 fe5f 	bl	800404c <HAL_GetREVID>
 800a38e:	4603      	mov	r3, r0
 800a390:	f241 0203 	movw	r2, #4099	; 0x1003
 800a394:	4293      	cmp	r3, r2
 800a396:	d817      	bhi.n	800a3c8 <HAL_RCC_OscConfig+0x3ec>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	d108      	bne.n	800a3b2 <HAL_RCC_OscConfig+0x3d6>
 800a3a0:	4b4c      	ldr	r3, [pc, #304]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a3a8:	4a4a      	ldr	r2, [pc, #296]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a3aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3ae:	6053      	str	r3, [r2, #4]
 800a3b0:	e02e      	b.n	800a410 <HAL_RCC_OscConfig+0x434>
 800a3b2:	4b48      	ldr	r3, [pc, #288]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	069b      	lsls	r3, r3, #26
 800a3c0:	4944      	ldr	r1, [pc, #272]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	604b      	str	r3, [r1, #4]
 800a3c6:	e023      	b.n	800a410 <HAL_RCC_OscConfig+0x434>
 800a3c8:	4b42      	ldr	r3, [pc, #264]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a1b      	ldr	r3, [r3, #32]
 800a3d4:	061b      	lsls	r3, r3, #24
 800a3d6:	493f      	ldr	r1, [pc, #252]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60cb      	str	r3, [r1, #12]
 800a3dc:	e018      	b.n	800a410 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a3de:	4b3d      	ldr	r3, [pc, #244]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a3c      	ldr	r2, [pc, #240]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a3e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ea:	f7f9 fe23 	bl	8004034 <HAL_GetTick>
 800a3ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3f0:	e008      	b.n	800a404 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3f2:	f7f9 fe1f 	bl	8004034 <HAL_GetTick>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d901      	bls.n	800a404 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e23d      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a404:	4b33      	ldr	r3, [pc, #204]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1f0      	bne.n	800a3f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0308 	and.w	r3, r3, #8
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d036      	beq.n	800a48a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d019      	beq.n	800a458 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a424:	4b2b      	ldr	r3, [pc, #172]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a428:	4a2a      	ldr	r2, [pc, #168]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a42a:	f043 0301 	orr.w	r3, r3, #1
 800a42e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a430:	f7f9 fe00 	bl	8004034 <HAL_GetTick>
 800a434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a436:	e008      	b.n	800a44a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a438:	f7f9 fdfc 	bl	8004034 <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	2b02      	cmp	r3, #2
 800a444:	d901      	bls.n	800a44a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e21a      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a44a:	4b22      	ldr	r3, [pc, #136]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a44c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0f0      	beq.n	800a438 <HAL_RCC_OscConfig+0x45c>
 800a456:	e018      	b.n	800a48a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a458:	4b1e      	ldr	r3, [pc, #120]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a45a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a45c:	4a1d      	ldr	r2, [pc, #116]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a45e:	f023 0301 	bic.w	r3, r3, #1
 800a462:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a464:	f7f9 fde6 	bl	8004034 <HAL_GetTick>
 800a468:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a46a:	e008      	b.n	800a47e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a46c:	f7f9 fde2 	bl	8004034 <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b02      	cmp	r3, #2
 800a478:	d901      	bls.n	800a47e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e200      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a47e:	4b15      	ldr	r3, [pc, #84]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1f0      	bne.n	800a46c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0320 	and.w	r3, r3, #32
 800a492:	2b00      	cmp	r3, #0
 800a494:	d039      	beq.n	800a50a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d01c      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a49e:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a0c      	ldr	r2, [pc, #48]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a4a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4aa:	f7f9 fdc3 	bl	8004034 <HAL_GetTick>
 800a4ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4b0:	e008      	b.n	800a4c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4b2:	f7f9 fdbf 	bl	8004034 <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d901      	bls.n	800a4c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e1dd      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4c4:	4b03      	ldr	r3, [pc, #12]	; (800a4d4 <HAL_RCC_OscConfig+0x4f8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d0f0      	beq.n	800a4b2 <HAL_RCC_OscConfig+0x4d6>
 800a4d0:	e01b      	b.n	800a50a <HAL_RCC_OscConfig+0x52e>
 800a4d2:	bf00      	nop
 800a4d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a4d8:	4b9b      	ldr	r3, [pc, #620]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a9a      	ldr	r2, [pc, #616]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4e4:	f7f9 fda6 	bl	8004034 <HAL_GetTick>
 800a4e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4ea:	e008      	b.n	800a4fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4ec:	f7f9 fda2 	bl	8004034 <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d901      	bls.n	800a4fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	e1c0      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4fe:	4b92      	ldr	r3, [pc, #584]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1f0      	bne.n	800a4ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0304 	and.w	r3, r3, #4
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 8081 	beq.w	800a61a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a518:	4b8c      	ldr	r3, [pc, #560]	; (800a74c <HAL_RCC_OscConfig+0x770>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a8b      	ldr	r2, [pc, #556]	; (800a74c <HAL_RCC_OscConfig+0x770>)
 800a51e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a524:	f7f9 fd86 	bl	8004034 <HAL_GetTick>
 800a528:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a52a:	e008      	b.n	800a53e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a52c:	f7f9 fd82 	bl	8004034 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	2b64      	cmp	r3, #100	; 0x64
 800a538:	d901      	bls.n	800a53e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e1a0      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a53e:	4b83      	ldr	r3, [pc, #524]	; (800a74c <HAL_RCC_OscConfig+0x770>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0f0      	beq.n	800a52c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d106      	bne.n	800a560 <HAL_RCC_OscConfig+0x584>
 800a552:	4b7d      	ldr	r3, [pc, #500]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	4a7c      	ldr	r2, [pc, #496]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a558:	f043 0301 	orr.w	r3, r3, #1
 800a55c:	6713      	str	r3, [r2, #112]	; 0x70
 800a55e:	e02d      	b.n	800a5bc <HAL_RCC_OscConfig+0x5e0>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10c      	bne.n	800a582 <HAL_RCC_OscConfig+0x5a6>
 800a568:	4b77      	ldr	r3, [pc, #476]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a56a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a56c:	4a76      	ldr	r2, [pc, #472]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a56e:	f023 0301 	bic.w	r3, r3, #1
 800a572:	6713      	str	r3, [r2, #112]	; 0x70
 800a574:	4b74      	ldr	r3, [pc, #464]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a578:	4a73      	ldr	r2, [pc, #460]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a57a:	f023 0304 	bic.w	r3, r3, #4
 800a57e:	6713      	str	r3, [r2, #112]	; 0x70
 800a580:	e01c      	b.n	800a5bc <HAL_RCC_OscConfig+0x5e0>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	2b05      	cmp	r3, #5
 800a588:	d10c      	bne.n	800a5a4 <HAL_RCC_OscConfig+0x5c8>
 800a58a:	4b6f      	ldr	r3, [pc, #444]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a58e:	4a6e      	ldr	r2, [pc, #440]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a590:	f043 0304 	orr.w	r3, r3, #4
 800a594:	6713      	str	r3, [r2, #112]	; 0x70
 800a596:	4b6c      	ldr	r3, [pc, #432]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59a:	4a6b      	ldr	r2, [pc, #428]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a59c:	f043 0301 	orr.w	r3, r3, #1
 800a5a0:	6713      	str	r3, [r2, #112]	; 0x70
 800a5a2:	e00b      	b.n	800a5bc <HAL_RCC_OscConfig+0x5e0>
 800a5a4:	4b68      	ldr	r3, [pc, #416]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a5a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a8:	4a67      	ldr	r2, [pc, #412]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a5aa:	f023 0301 	bic.w	r3, r3, #1
 800a5ae:	6713      	str	r3, [r2, #112]	; 0x70
 800a5b0:	4b65      	ldr	r3, [pc, #404]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b4:	4a64      	ldr	r2, [pc, #400]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a5b6:	f023 0304 	bic.w	r3, r3, #4
 800a5ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d015      	beq.n	800a5f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c4:	f7f9 fd36 	bl	8004034 <HAL_GetTick>
 800a5c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5ca:	e00a      	b.n	800a5e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5cc:	f7f9 fd32 	bl	8004034 <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e14e      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5e2:	4b59      	ldr	r3, [pc, #356]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e6:	f003 0302 	and.w	r3, r3, #2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0ee      	beq.n	800a5cc <HAL_RCC_OscConfig+0x5f0>
 800a5ee:	e014      	b.n	800a61a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5f0:	f7f9 fd20 	bl	8004034 <HAL_GetTick>
 800a5f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5f6:	e00a      	b.n	800a60e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5f8:	f7f9 fd1c 	bl	8004034 <HAL_GetTick>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	f241 3288 	movw	r2, #5000	; 0x1388
 800a606:	4293      	cmp	r3, r2
 800a608:	d901      	bls.n	800a60e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e138      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a60e:	4b4e      	ldr	r3, [pc, #312]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1ee      	bne.n	800a5f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 812d 	beq.w	800a87e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a624:	4b48      	ldr	r3, [pc, #288]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a62c:	2b18      	cmp	r3, #24
 800a62e:	f000 80bd 	beq.w	800a7ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	2b02      	cmp	r3, #2
 800a638:	f040 809e 	bne.w	800a778 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a63c:	4b42      	ldr	r3, [pc, #264]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a41      	ldr	r2, [pc, #260]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a648:	f7f9 fcf4 	bl	8004034 <HAL_GetTick>
 800a64c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a64e:	e008      	b.n	800a662 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a650:	f7f9 fcf0 	bl	8004034 <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d901      	bls.n	800a662 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e10e      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a662:	4b39      	ldr	r3, [pc, #228]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1f0      	bne.n	800a650 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a66e:	4b36      	ldr	r3, [pc, #216]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a672:	4b37      	ldr	r3, [pc, #220]	; (800a750 <HAL_RCC_OscConfig+0x774>)
 800a674:	4013      	ands	r3, r2
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a67e:	0112      	lsls	r2, r2, #4
 800a680:	430a      	orrs	r2, r1
 800a682:	4931      	ldr	r1, [pc, #196]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a684:	4313      	orrs	r3, r2
 800a686:	628b      	str	r3, [r1, #40]	; 0x28
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68c:	3b01      	subs	r3, #1
 800a68e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a696:	3b01      	subs	r3, #1
 800a698:	025b      	lsls	r3, r3, #9
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	431a      	orrs	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	041b      	lsls	r3, r3, #16
 800a6a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	061b      	lsls	r3, r3, #24
 800a6b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6b8:	4923      	ldr	r1, [pc, #140]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a6be:	4b22      	ldr	r3, [pc, #136]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c2:	4a21      	ldr	r2, [pc, #132]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a6c4:	f023 0301 	bic.w	r3, r3, #1
 800a6c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6ca:	4b1f      	ldr	r3, [pc, #124]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a6cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6ce:	4b21      	ldr	r3, [pc, #132]	; (800a754 <HAL_RCC_OscConfig+0x778>)
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a6d6:	00d2      	lsls	r2, r2, #3
 800a6d8:	491b      	ldr	r1, [pc, #108]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a6de:	4b1a      	ldr	r3, [pc, #104]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e2:	f023 020c 	bic.w	r2, r3, #12
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ea:	4917      	ldr	r1, [pc, #92]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a6f0:	4b15      	ldr	r3, [pc, #84]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	f023 0202 	bic.w	r2, r3, #2
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fc:	4912      	ldr	r1, [pc, #72]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a702:	4b11      	ldr	r3, [pc, #68]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a706:	4a10      	ldr	r2, [pc, #64]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a70c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a70e:	4b0e      	ldr	r3, [pc, #56]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a712:	4a0d      	ldr	r2, [pc, #52]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a718:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a71a:	4b0b      	ldr	r3, [pc, #44]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71e:	4a0a      	ldr	r2, [pc, #40]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a724:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a726:	4b08      	ldr	r3, [pc, #32]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72a:	4a07      	ldr	r2, [pc, #28]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a72c:	f043 0301 	orr.w	r3, r3, #1
 800a730:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a732:	4b05      	ldr	r3, [pc, #20]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a04      	ldr	r2, [pc, #16]	; (800a748 <HAL_RCC_OscConfig+0x76c>)
 800a738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a73c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a73e:	f7f9 fc79 	bl	8004034 <HAL_GetTick>
 800a742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a744:	e011      	b.n	800a76a <HAL_RCC_OscConfig+0x78e>
 800a746:	bf00      	nop
 800a748:	58024400 	.word	0x58024400
 800a74c:	58024800 	.word	0x58024800
 800a750:	fffffc0c 	.word	0xfffffc0c
 800a754:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a758:	f7f9 fc6c 	bl	8004034 <HAL_GetTick>
 800a75c:	4602      	mov	r2, r0
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	2b02      	cmp	r3, #2
 800a764:	d901      	bls.n	800a76a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e08a      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a76a:	4b47      	ldr	r3, [pc, #284]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0f0      	beq.n	800a758 <HAL_RCC_OscConfig+0x77c>
 800a776:	e082      	b.n	800a87e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a778:	4b43      	ldr	r3, [pc, #268]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a42      	ldr	r2, [pc, #264]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a77e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a784:	f7f9 fc56 	bl	8004034 <HAL_GetTick>
 800a788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a78a:	e008      	b.n	800a79e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a78c:	f7f9 fc52 	bl	8004034 <HAL_GetTick>
 800a790:	4602      	mov	r2, r0
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	2b02      	cmp	r3, #2
 800a798:	d901      	bls.n	800a79e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e070      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a79e:	4b3a      	ldr	r3, [pc, #232]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1f0      	bne.n	800a78c <HAL_RCC_OscConfig+0x7b0>
 800a7aa:	e068      	b.n	800a87e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a7ac:	4b36      	ldr	r3, [pc, #216]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a7b2:	4b35      	ldr	r3, [pc, #212]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d031      	beq.n	800a824 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f003 0203 	and.w	r2, r3, #3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d12a      	bne.n	800a824 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	091b      	lsrs	r3, r3, #4
 800a7d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d122      	bne.n	800a824 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d11a      	bne.n	800a824 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	0a5b      	lsrs	r3, r3, #9
 800a7f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d111      	bne.n	800a824 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	0c1b      	lsrs	r3, r3, #16
 800a804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a80e:	429a      	cmp	r2, r3
 800a810:	d108      	bne.n	800a824 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	0e1b      	lsrs	r3, r3, #24
 800a816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a820:	429a      	cmp	r2, r3
 800a822:	d001      	beq.n	800a828 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e02b      	b.n	800a880 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a828:	4b17      	ldr	r3, [pc, #92]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82c:	08db      	lsrs	r3, r3, #3
 800a82e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a832:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d01f      	beq.n	800a87e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a83e:	4b12      	ldr	r3, [pc, #72]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a842:	4a11      	ldr	r2, [pc, #68]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a844:	f023 0301 	bic.w	r3, r3, #1
 800a848:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a84a:	f7f9 fbf3 	bl	8004034 <HAL_GetTick>
 800a84e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a850:	bf00      	nop
 800a852:	f7f9 fbef 	bl	8004034 <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d0f9      	beq.n	800a852 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a85e:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a862:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <HAL_RCC_OscConfig+0x8b0>)
 800a864:	4013      	ands	r3, r2
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a86a:	00d2      	lsls	r2, r2, #3
 800a86c:	4906      	ldr	r1, [pc, #24]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a872:	4b05      	ldr	r3, [pc, #20]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a876:	4a04      	ldr	r2, [pc, #16]	; (800a888 <HAL_RCC_OscConfig+0x8ac>)
 800a878:	f043 0301 	orr.w	r3, r3, #1
 800a87c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3730      	adds	r7, #48	; 0x30
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	58024400 	.word	0x58024400
 800a88c:	ffff0007 	.word	0xffff0007

0800a890 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d101      	bne.n	800a8a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e19c      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8a4:	4b8a      	ldr	r3, [pc, #552]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 030f 	and.w	r3, r3, #15
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d910      	bls.n	800a8d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8b2:	4b87      	ldr	r3, [pc, #540]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f023 020f 	bic.w	r2, r3, #15
 800a8ba:	4985      	ldr	r1, [pc, #532]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8c2:	4b83      	ldr	r3, [pc, #524]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d001      	beq.n	800a8d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e184      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d010      	beq.n	800a902 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691a      	ldr	r2, [r3, #16]
 800a8e4:	4b7b      	ldr	r3, [pc, #492]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d908      	bls.n	800a902 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8f0:	4b78      	ldr	r3, [pc, #480]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	4975      	ldr	r1, [pc, #468]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0308 	and.w	r3, r3, #8
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d010      	beq.n	800a930 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	695a      	ldr	r2, [r3, #20]
 800a912:	4b70      	ldr	r3, [pc, #448]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d908      	bls.n	800a930 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a91e:	4b6d      	ldr	r3, [pc, #436]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	496a      	ldr	r1, [pc, #424]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0310 	and.w	r3, r3, #16
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d010      	beq.n	800a95e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699a      	ldr	r2, [r3, #24]
 800a940:	4b64      	ldr	r3, [pc, #400]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a948:	429a      	cmp	r2, r3
 800a94a:	d908      	bls.n	800a95e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a94c:	4b61      	ldr	r3, [pc, #388]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	495e      	ldr	r1, [pc, #376]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a95a:	4313      	orrs	r3, r2
 800a95c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0320 	and.w	r3, r3, #32
 800a966:	2b00      	cmp	r3, #0
 800a968:	d010      	beq.n	800a98c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	69da      	ldr	r2, [r3, #28]
 800a96e:	4b59      	ldr	r3, [pc, #356]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a976:	429a      	cmp	r2, r3
 800a978:	d908      	bls.n	800a98c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a97a:	4b56      	ldr	r3, [pc, #344]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	69db      	ldr	r3, [r3, #28]
 800a986:	4953      	ldr	r1, [pc, #332]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 0302 	and.w	r3, r3, #2
 800a994:	2b00      	cmp	r3, #0
 800a996:	d010      	beq.n	800a9ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	4b4d      	ldr	r3, [pc, #308]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	f003 030f 	and.w	r3, r3, #15
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d908      	bls.n	800a9ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9a8:	4b4a      	ldr	r3, [pc, #296]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	f023 020f 	bic.w	r2, r3, #15
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	4947      	ldr	r1, [pc, #284]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d055      	beq.n	800aa72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a9c6:	4b43      	ldr	r3, [pc, #268]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	4940      	ldr	r1, [pc, #256]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d107      	bne.n	800a9f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9e0:	4b3c      	ldr	r3, [pc, #240]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d121      	bne.n	800aa30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e0f6      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d107      	bne.n	800aa08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9f8:	4b36      	ldr	r3, [pc, #216]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d115      	bne.n	800aa30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e0ea      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d107      	bne.n	800aa20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa10:	4b30      	ldr	r3, [pc, #192]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d109      	bne.n	800aa30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e0de      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa20:	4b2c      	ldr	r3, [pc, #176]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e0d6      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa30:	4b28      	ldr	r3, [pc, #160]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	f023 0207 	bic.w	r2, r3, #7
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	4925      	ldr	r1, [pc, #148]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa42:	f7f9 faf7 	bl	8004034 <HAL_GetTick>
 800aa46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa48:	e00a      	b.n	800aa60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa4a:	f7f9 faf3 	bl	8004034 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d901      	bls.n	800aa60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e0be      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa60:	4b1c      	ldr	r3, [pc, #112]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d1eb      	bne.n	800aa4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d010      	beq.n	800aaa0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	4b14      	ldr	r3, [pc, #80]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	f003 030f 	and.w	r3, r3, #15
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d208      	bcs.n	800aaa0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa8e:	4b11      	ldr	r3, [pc, #68]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	f023 020f 	bic.w	r2, r3, #15
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	490e      	ldr	r1, [pc, #56]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 030f 	and.w	r3, r3, #15
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d214      	bcs.n	800aad8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaae:	4b08      	ldr	r3, [pc, #32]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f023 020f 	bic.w	r2, r3, #15
 800aab6:	4906      	ldr	r1, [pc, #24]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 030f 	and.w	r3, r3, #15
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d005      	beq.n	800aad8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e086      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
 800aad0:	52002000 	.word	0x52002000
 800aad4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d010      	beq.n	800ab06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691a      	ldr	r2, [r3, #16]
 800aae8:	4b3f      	ldr	r3, [pc, #252]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d208      	bcs.n	800ab06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aaf4:	4b3c      	ldr	r3, [pc, #240]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	4939      	ldr	r1, [pc, #228]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab02:	4313      	orrs	r3, r2
 800ab04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0308 	and.w	r3, r3, #8
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d010      	beq.n	800ab34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	695a      	ldr	r2, [r3, #20]
 800ab16:	4b34      	ldr	r3, [pc, #208]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d208      	bcs.n	800ab34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab22:	4b31      	ldr	r3, [pc, #196]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	492e      	ldr	r1, [pc, #184]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d010      	beq.n	800ab62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	699a      	ldr	r2, [r3, #24]
 800ab44:	4b28      	ldr	r3, [pc, #160]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d208      	bcs.n	800ab62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab50:	4b25      	ldr	r3, [pc, #148]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	4922      	ldr	r1, [pc, #136]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d010      	beq.n	800ab90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	69da      	ldr	r2, [r3, #28]
 800ab72:	4b1d      	ldr	r3, [pc, #116]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d208      	bcs.n	800ab90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab7e:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	4917      	ldr	r1, [pc, #92]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ab90:	f000 f834 	bl	800abfc <HAL_RCC_GetSysClockFreq>
 800ab94:	4602      	mov	r2, r0
 800ab96:	4b14      	ldr	r3, [pc, #80]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	f003 030f 	and.w	r3, r3, #15
 800aba0:	4912      	ldr	r1, [pc, #72]	; (800abec <HAL_RCC_ClockConfig+0x35c>)
 800aba2:	5ccb      	ldrb	r3, [r1, r3]
 800aba4:	f003 031f 	and.w	r3, r3, #31
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
 800abac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abae:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	f003 030f 	and.w	r3, r3, #15
 800abb6:	4a0d      	ldr	r2, [pc, #52]	; (800abec <HAL_RCC_ClockConfig+0x35c>)
 800abb8:	5cd3      	ldrb	r3, [r2, r3]
 800abba:	f003 031f 	and.w	r3, r3, #31
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	fa22 f303 	lsr.w	r3, r2, r3
 800abc4:	4a0a      	ldr	r2, [pc, #40]	; (800abf0 <HAL_RCC_ClockConfig+0x360>)
 800abc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abc8:	4a0a      	ldr	r2, [pc, #40]	; (800abf4 <HAL_RCC_ClockConfig+0x364>)
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800abce:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <HAL_RCC_ClockConfig+0x368>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7f8 ff52 	bl	8003a7c <HAL_InitTick>
 800abd8:	4603      	mov	r3, r0
 800abda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	58024400 	.word	0x58024400
 800abec:	08017910 	.word	0x08017910
 800abf0:	24000094 	.word	0x24000094
 800abf4:	24000090 	.word	0x24000090
 800abf8:	24000098 	.word	0x24000098

0800abfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b089      	sub	sp, #36	; 0x24
 800ac00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac02:	4bb3      	ldr	r3, [pc, #716]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac0a:	2b18      	cmp	r3, #24
 800ac0c:	f200 8155 	bhi.w	800aeba <HAL_RCC_GetSysClockFreq+0x2be>
 800ac10:	a201      	add	r2, pc, #4	; (adr r2, 800ac18 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ac12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac16:	bf00      	nop
 800ac18:	0800ac7d 	.word	0x0800ac7d
 800ac1c:	0800aebb 	.word	0x0800aebb
 800ac20:	0800aebb 	.word	0x0800aebb
 800ac24:	0800aebb 	.word	0x0800aebb
 800ac28:	0800aebb 	.word	0x0800aebb
 800ac2c:	0800aebb 	.word	0x0800aebb
 800ac30:	0800aebb 	.word	0x0800aebb
 800ac34:	0800aebb 	.word	0x0800aebb
 800ac38:	0800aca3 	.word	0x0800aca3
 800ac3c:	0800aebb 	.word	0x0800aebb
 800ac40:	0800aebb 	.word	0x0800aebb
 800ac44:	0800aebb 	.word	0x0800aebb
 800ac48:	0800aebb 	.word	0x0800aebb
 800ac4c:	0800aebb 	.word	0x0800aebb
 800ac50:	0800aebb 	.word	0x0800aebb
 800ac54:	0800aebb 	.word	0x0800aebb
 800ac58:	0800aca9 	.word	0x0800aca9
 800ac5c:	0800aebb 	.word	0x0800aebb
 800ac60:	0800aebb 	.word	0x0800aebb
 800ac64:	0800aebb 	.word	0x0800aebb
 800ac68:	0800aebb 	.word	0x0800aebb
 800ac6c:	0800aebb 	.word	0x0800aebb
 800ac70:	0800aebb 	.word	0x0800aebb
 800ac74:	0800aebb 	.word	0x0800aebb
 800ac78:	0800acaf 	.word	0x0800acaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac7c:	4b94      	ldr	r3, [pc, #592]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0320 	and.w	r3, r3, #32
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d009      	beq.n	800ac9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac88:	4b91      	ldr	r3, [pc, #580]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	08db      	lsrs	r3, r3, #3
 800ac8e:	f003 0303 	and.w	r3, r3, #3
 800ac92:	4a90      	ldr	r2, [pc, #576]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac94:	fa22 f303 	lsr.w	r3, r2, r3
 800ac98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ac9a:	e111      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac9c:	4b8d      	ldr	r3, [pc, #564]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac9e:	61bb      	str	r3, [r7, #24]
      break;
 800aca0:	e10e      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aca2:	4b8d      	ldr	r3, [pc, #564]	; (800aed8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aca4:	61bb      	str	r3, [r7, #24]
      break;
 800aca6:	e10b      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aca8:	4b8c      	ldr	r3, [pc, #560]	; (800aedc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800acaa:	61bb      	str	r3, [r7, #24]
      break;
 800acac:	e108      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acae:	4b88      	ldr	r3, [pc, #544]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb2:	f003 0303 	and.w	r3, r3, #3
 800acb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800acb8:	4b85      	ldr	r3, [pc, #532]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acbc:	091b      	lsrs	r3, r3, #4
 800acbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acc2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800acc4:	4b82      	ldr	r3, [pc, #520]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc8:	f003 0301 	and.w	r3, r3, #1
 800accc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800acce:	4b80      	ldr	r3, [pc, #512]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd2:	08db      	lsrs	r3, r3, #3
 800acd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	fb02 f303 	mul.w	r3, r2, r3
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 80e1 	beq.w	800aeb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	f000 8083 	beq.w	800ae00 <HAL_RCC_GetSysClockFreq+0x204>
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	f200 80a1 	bhi.w	800ae44 <HAL_RCC_GetSysClockFreq+0x248>
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <HAL_RCC_GetSysClockFreq+0x114>
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d056      	beq.n	800adbc <HAL_RCC_GetSysClockFreq+0x1c0>
 800ad0e:	e099      	b.n	800ae44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad10:	4b6f      	ldr	r3, [pc, #444]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d02d      	beq.n	800ad78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad1c:	4b6c      	ldr	r3, [pc, #432]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	08db      	lsrs	r3, r3, #3
 800ad22:	f003 0303 	and.w	r3, r3, #3
 800ad26:	4a6b      	ldr	r2, [pc, #428]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad28:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	ee07 3a90 	vmov	s15, r3
 800ad34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad46:	4b62      	ldr	r3, [pc, #392]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad56:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ad76:	e087      	b.n	800ae88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad82:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aee4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ad86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8a:	4b51      	ldr	r3, [pc, #324]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ada2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adba:	e065      	b.n	800ae88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aee8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800adca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adce:	4b40      	ldr	r3, [pc, #256]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800add0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add6:	ee07 3a90 	vmov	s15, r3
 800adda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adde:	ed97 6a02 	vldr	s12, [r7, #8]
 800ade2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ade6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adfe:	e043      	b.n	800ae88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aeec <HAL_RCC_GetSysClockFreq+0x2f0>
 800ae0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae12:	4b2f      	ldr	r3, [pc, #188]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae22:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae42:	e021      	b.n	800ae88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aee8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae56:	4b1e      	ldr	r3, [pc, #120]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5e:	ee07 3a90 	vmov	s15, r3
 800ae62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae66:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ae88:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8c:	0a5b      	lsrs	r3, r3, #9
 800ae8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae92:	3301      	adds	r3, #1
 800ae94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	ee07 3a90 	vmov	s15, r3
 800ae9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aea0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeac:	ee17 3a90 	vmov	r3, s15
 800aeb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aeb2:	e005      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	61bb      	str	r3, [r7, #24]
      break;
 800aeb8:	e002      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aebc:	61bb      	str	r3, [r7, #24]
      break;
 800aebe:	bf00      	nop
  }

  return sysclockfreq;
 800aec0:	69bb      	ldr	r3, [r7, #24]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3724      	adds	r7, #36	; 0x24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	58024400 	.word	0x58024400
 800aed4:	03d09000 	.word	0x03d09000
 800aed8:	003d0900 	.word	0x003d0900
 800aedc:	017d7840 	.word	0x017d7840
 800aee0:	46000000 	.word	0x46000000
 800aee4:	4c742400 	.word	0x4c742400
 800aee8:	4a742400 	.word	0x4a742400
 800aeec:	4bbebc20 	.word	0x4bbebc20

0800aef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aef6:	f7ff fe81 	bl	800abfc <HAL_RCC_GetSysClockFreq>
 800aefa:	4602      	mov	r2, r0
 800aefc:	4b10      	ldr	r3, [pc, #64]	; (800af40 <HAL_RCC_GetHCLKFreq+0x50>)
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	0a1b      	lsrs	r3, r3, #8
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	490f      	ldr	r1, [pc, #60]	; (800af44 <HAL_RCC_GetHCLKFreq+0x54>)
 800af08:	5ccb      	ldrb	r3, [r1, r3]
 800af0a:	f003 031f 	and.w	r3, r3, #31
 800af0e:	fa22 f303 	lsr.w	r3, r2, r3
 800af12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af14:	4b0a      	ldr	r3, [pc, #40]	; (800af40 <HAL_RCC_GetHCLKFreq+0x50>)
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	4a09      	ldr	r2, [pc, #36]	; (800af44 <HAL_RCC_GetHCLKFreq+0x54>)
 800af1e:	5cd3      	ldrb	r3, [r2, r3]
 800af20:	f003 031f 	and.w	r3, r3, #31
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	fa22 f303 	lsr.w	r3, r2, r3
 800af2a:	4a07      	ldr	r2, [pc, #28]	; (800af48 <HAL_RCC_GetHCLKFreq+0x58>)
 800af2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800af2e:	4a07      	ldr	r2, [pc, #28]	; (800af4c <HAL_RCC_GetHCLKFreq+0x5c>)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800af34:	4b04      	ldr	r3, [pc, #16]	; (800af48 <HAL_RCC_GetHCLKFreq+0x58>)
 800af36:	681b      	ldr	r3, [r3, #0]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	58024400 	.word	0x58024400
 800af44:	08017910 	.word	0x08017910
 800af48:	24000094 	.word	0x24000094
 800af4c:	24000090 	.word	0x24000090

0800af50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800af54:	f7ff ffcc 	bl	800aef0 <HAL_RCC_GetHCLKFreq>
 800af58:	4602      	mov	r2, r0
 800af5a:	4b06      	ldr	r3, [pc, #24]	; (800af74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	091b      	lsrs	r3, r3, #4
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	4904      	ldr	r1, [pc, #16]	; (800af78 <HAL_RCC_GetPCLK1Freq+0x28>)
 800af66:	5ccb      	ldrb	r3, [r1, r3]
 800af68:	f003 031f 	and.w	r3, r3, #31
 800af6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af70:	4618      	mov	r0, r3
 800af72:	bd80      	pop	{r7, pc}
 800af74:	58024400 	.word	0x58024400
 800af78:	08017910 	.word	0x08017910

0800af7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800af80:	f7ff ffb6 	bl	800aef0 <HAL_RCC_GetHCLKFreq>
 800af84:	4602      	mov	r2, r0
 800af86:	4b06      	ldr	r3, [pc, #24]	; (800afa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	0a1b      	lsrs	r3, r3, #8
 800af8c:	f003 0307 	and.w	r3, r3, #7
 800af90:	4904      	ldr	r1, [pc, #16]	; (800afa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af92:	5ccb      	ldrb	r3, [r1, r3]
 800af94:	f003 031f 	and.w	r3, r3, #31
 800af98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	58024400 	.word	0x58024400
 800afa4:	08017910 	.word	0x08017910

0800afa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	223f      	movs	r2, #63	; 0x3f
 800afb6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800afb8:	4b1a      	ldr	r3, [pc, #104]	; (800b024 <HAL_RCC_GetClockConfig+0x7c>)
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	f003 0207 	and.w	r2, r3, #7
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800afc4:	4b17      	ldr	r3, [pc, #92]	; (800b024 <HAL_RCC_GetClockConfig+0x7c>)
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800afd0:	4b14      	ldr	r3, [pc, #80]	; (800b024 <HAL_RCC_GetClockConfig+0x7c>)
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	f003 020f 	and.w	r2, r3, #15
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800afdc:	4b11      	ldr	r3, [pc, #68]	; (800b024 <HAL_RCC_GetClockConfig+0x7c>)
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800afe8:	4b0e      	ldr	r3, [pc, #56]	; (800b024 <HAL_RCC_GetClockConfig+0x7c>)
 800afea:	69db      	ldr	r3, [r3, #28]
 800afec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800aff4:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <HAL_RCC_GetClockConfig+0x7c>)
 800aff6:	69db      	ldr	r3, [r3, #28]
 800aff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b000:	4b08      	ldr	r3, [pc, #32]	; (800b024 <HAL_RCC_GetClockConfig+0x7c>)
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b00c:	4b06      	ldr	r3, [pc, #24]	; (800b028 <HAL_RCC_GetClockConfig+0x80>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 020f 	and.w	r2, r3, #15
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	601a      	str	r2, [r3, #0]
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr
 800b024:	58024400 	.word	0x58024400
 800b028:	52002000 	.word	0x52002000

0800b02c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b02c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b030:	b0ca      	sub	sp, #296	; 0x128
 800b032:	af00      	add	r7, sp, #0
 800b034:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b038:	2300      	movs	r3, #0
 800b03a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b03e:	2300      	movs	r3, #0
 800b040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b050:	2500      	movs	r5, #0
 800b052:	ea54 0305 	orrs.w	r3, r4, r5
 800b056:	d049      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b05c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b05e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b062:	d02f      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b064:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b068:	d828      	bhi.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b06a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b06e:	d01a      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b074:	d822      	bhi.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b07a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b07e:	d007      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b080:	e01c      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b082:	4bb8      	ldr	r3, [pc, #736]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	4ab7      	ldr	r2, [pc, #732]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b08c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b08e:	e01a      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b094:	3308      	adds	r3, #8
 800b096:	2102      	movs	r1, #2
 800b098:	4618      	mov	r0, r3
 800b09a:	f002 fb61 	bl	800d760 <RCCEx_PLL2_Config>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b0a4:	e00f      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0aa:	3328      	adds	r3, #40	; 0x28
 800b0ac:	2102      	movs	r1, #2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f002 fc08 	bl	800d8c4 <RCCEx_PLL3_Config>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b0ba:	e004      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0c2:	e000      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b0c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10a      	bne.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b0ce:	4ba5      	ldr	r3, [pc, #660]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0dc:	4aa1      	ldr	r2, [pc, #644]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0de:	430b      	orrs	r3, r1
 800b0e0:	6513      	str	r3, [r2, #80]	; 0x50
 800b0e2:	e003      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b0f8:	f04f 0900 	mov.w	r9, #0
 800b0fc:	ea58 0309 	orrs.w	r3, r8, r9
 800b100:	d047      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b108:	2b04      	cmp	r3, #4
 800b10a:	d82a      	bhi.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b10c:	a201      	add	r2, pc, #4	; (adr r2, 800b114 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b112:	bf00      	nop
 800b114:	0800b129 	.word	0x0800b129
 800b118:	0800b137 	.word	0x0800b137
 800b11c:	0800b14d 	.word	0x0800b14d
 800b120:	0800b16b 	.word	0x0800b16b
 800b124:	0800b16b 	.word	0x0800b16b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b128:	4b8e      	ldr	r3, [pc, #568]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12c:	4a8d      	ldr	r2, [pc, #564]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b12e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b134:	e01a      	b.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13a:	3308      	adds	r3, #8
 800b13c:	2100      	movs	r1, #0
 800b13e:	4618      	mov	r0, r3
 800b140:	f002 fb0e 	bl	800d760 <RCCEx_PLL2_Config>
 800b144:	4603      	mov	r3, r0
 800b146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b14a:	e00f      	b.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b150:	3328      	adds	r3, #40	; 0x28
 800b152:	2100      	movs	r1, #0
 800b154:	4618      	mov	r0, r3
 800b156:	f002 fbb5 	bl	800d8c4 <RCCEx_PLL3_Config>
 800b15a:	4603      	mov	r3, r0
 800b15c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b160:	e004      	b.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b168:	e000      	b.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b16a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b16c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10a      	bne.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b174:	4b7b      	ldr	r3, [pc, #492]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b178:	f023 0107 	bic.w	r1, r3, #7
 800b17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b182:	4a78      	ldr	r2, [pc, #480]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b184:	430b      	orrs	r3, r1
 800b186:	6513      	str	r3, [r2, #80]	; 0x50
 800b188:	e003      	b.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b18a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b18e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b19e:	f04f 0b00 	mov.w	fp, #0
 800b1a2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b1a6:	d04c      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1b2:	d030      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1b8:	d829      	bhi.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b1ba:	2bc0      	cmp	r3, #192	; 0xc0
 800b1bc:	d02d      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b1be:	2bc0      	cmp	r3, #192	; 0xc0
 800b1c0:	d825      	bhi.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b1c2:	2b80      	cmp	r3, #128	; 0x80
 800b1c4:	d018      	beq.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b1c6:	2b80      	cmp	r3, #128	; 0x80
 800b1c8:	d821      	bhi.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b1ce:	2b40      	cmp	r3, #64	; 0x40
 800b1d0:	d007      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b1d2:	e01c      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1d4:	4b63      	ldr	r3, [pc, #396]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	4a62      	ldr	r2, [pc, #392]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1e0:	e01c      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e6:	3308      	adds	r3, #8
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f002 fab8 	bl	800d760 <RCCEx_PLL2_Config>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1f6:	e011      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1fc:	3328      	adds	r3, #40	; 0x28
 800b1fe:	2100      	movs	r1, #0
 800b200:	4618      	mov	r0, r3
 800b202:	f002 fb5f 	bl	800d8c4 <RCCEx_PLL3_Config>
 800b206:	4603      	mov	r3, r0
 800b208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b20c:	e006      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b214:	e002      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b216:	bf00      	nop
 800b218:	e000      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b21a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b21c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10a      	bne.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b224:	4b4f      	ldr	r3, [pc, #316]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b228:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b232:	4a4c      	ldr	r2, [pc, #304]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b234:	430b      	orrs	r3, r1
 800b236:	6513      	str	r3, [r2, #80]	; 0x50
 800b238:	e003      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b23e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b24e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b252:	2300      	movs	r3, #0
 800b254:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b258:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b25c:	460b      	mov	r3, r1
 800b25e:	4313      	orrs	r3, r2
 800b260:	d053      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b26a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b26e:	d035      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b274:	d82e      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b276:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b27a:	d031      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b27c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b280:	d828      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b286:	d01a      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b28c:	d822      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b296:	d007      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b298:	e01c      	b.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b29a:	4b32      	ldr	r3, [pc, #200]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29e:	4a31      	ldr	r2, [pc, #196]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2a6:	e01c      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f002 fa55 	bl	800d760 <RCCEx_PLL2_Config>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b2bc:	e011      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c2:	3328      	adds	r3, #40	; 0x28
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f002 fafc 	bl	800d8c4 <RCCEx_PLL3_Config>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2d2:	e006      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2da:	e002      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b2dc:	bf00      	nop
 800b2de:	e000      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b2e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10b      	bne.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b2ea:	4b1e      	ldr	r3, [pc, #120]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2fa:	4a1a      	ldr	r2, [pc, #104]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	6593      	str	r3, [r2, #88]	; 0x58
 800b300:	e003      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b306:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b316:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b31a:	2300      	movs	r3, #0
 800b31c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b320:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b324:	460b      	mov	r3, r1
 800b326:	4313      	orrs	r3, r2
 800b328:	d056      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b336:	d038      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b33c:	d831      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b33e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b342:	d034      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b344:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b348:	d82b      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b34a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b34e:	d01d      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b354:	d825      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d006      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b35a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b35e:	d00a      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b360:	e01f      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b362:	bf00      	nop
 800b364:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b368:	4ba2      	ldr	r3, [pc, #648]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	4aa1      	ldr	r2, [pc, #644]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b36e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b374:	e01c      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b37a:	3308      	adds	r3, #8
 800b37c:	2100      	movs	r1, #0
 800b37e:	4618      	mov	r0, r3
 800b380:	f002 f9ee 	bl	800d760 <RCCEx_PLL2_Config>
 800b384:	4603      	mov	r3, r0
 800b386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b38a:	e011      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b390:	3328      	adds	r3, #40	; 0x28
 800b392:	2100      	movs	r1, #0
 800b394:	4618      	mov	r0, r3
 800b396:	f002 fa95 	bl	800d8c4 <RCCEx_PLL3_Config>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3a0:	e006      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3a8:	e002      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b3aa:	bf00      	nop
 800b3ac:	e000      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b3ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10b      	bne.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b3b8:	4b8e      	ldr	r3, [pc, #568]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3bc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3c8:	4a8a      	ldr	r2, [pc, #552]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b3ce:	e003      	b.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b3e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	d03a      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3fe:	2b30      	cmp	r3, #48	; 0x30
 800b400:	d01f      	beq.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b402:	2b30      	cmp	r3, #48	; 0x30
 800b404:	d819      	bhi.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b406:	2b20      	cmp	r3, #32
 800b408:	d00c      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b40a:	2b20      	cmp	r3, #32
 800b40c:	d815      	bhi.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d019      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b412:	2b10      	cmp	r3, #16
 800b414:	d111      	bne.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b416:	4b77      	ldr	r3, [pc, #476]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	4a76      	ldr	r2, [pc, #472]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b41c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b420:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b422:	e011      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b428:	3308      	adds	r3, #8
 800b42a:	2102      	movs	r1, #2
 800b42c:	4618      	mov	r0, r3
 800b42e:	f002 f997 	bl	800d760 <RCCEx_PLL2_Config>
 800b432:	4603      	mov	r3, r0
 800b434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b438:	e006      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b440:	e002      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b442:	bf00      	nop
 800b444:	e000      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b446:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10a      	bne.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b450:	4b68      	ldr	r3, [pc, #416]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b454:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45e:	4a65      	ldr	r2, [pc, #404]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b460:	430b      	orrs	r3, r1
 800b462:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b464:	e003      	b.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b46a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b47a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b47e:	2300      	movs	r3, #0
 800b480:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b484:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b488:	460b      	mov	r3, r1
 800b48a:	4313      	orrs	r3, r2
 800b48c:	d051      	beq.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b498:	d035      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b49a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b49e:	d82e      	bhi.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b4a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4a4:	d031      	beq.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b4a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4aa:	d828      	bhi.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b4ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4b0:	d01a      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b4b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4b6:	d822      	bhi.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b4bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4c0:	d007      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b4c2:	e01c      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4c4:	4b4b      	ldr	r3, [pc, #300]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	4a4a      	ldr	r2, [pc, #296]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4d0:	e01c      	b.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d6:	3308      	adds	r3, #8
 800b4d8:	2100      	movs	r1, #0
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f002 f940 	bl	800d760 <RCCEx_PLL2_Config>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4e6:	e011      	b.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ec:	3328      	adds	r3, #40	; 0x28
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f002 f9e7 	bl	800d8c4 <RCCEx_PLL3_Config>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4fc:	e006      	b.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b504:	e002      	b.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b506:	bf00      	nop
 800b508:	e000      	b.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b50a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b50c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10a      	bne.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b514:	4b37      	ldr	r3, [pc, #220]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b518:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b522:	4a34      	ldr	r2, [pc, #208]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b524:	430b      	orrs	r3, r1
 800b526:	6513      	str	r3, [r2, #80]	; 0x50
 800b528:	e003      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b52a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b52e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b53e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b542:	2300      	movs	r3, #0
 800b544:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b548:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b54c:	460b      	mov	r3, r1
 800b54e:	4313      	orrs	r3, r2
 800b550:	d056      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b55c:	d033      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b55e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b562:	d82c      	bhi.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b564:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b568:	d02f      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b56a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b56e:	d826      	bhi.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b570:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b574:	d02b      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b576:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b57a:	d820      	bhi.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b57c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b580:	d012      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b586:	d81a      	bhi.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d022      	beq.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b58c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b590:	d115      	bne.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b596:	3308      	adds	r3, #8
 800b598:	2101      	movs	r1, #1
 800b59a:	4618      	mov	r0, r3
 800b59c:	f002 f8e0 	bl	800d760 <RCCEx_PLL2_Config>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b5a6:	e015      	b.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ac:	3328      	adds	r3, #40	; 0x28
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f002 f987 	bl	800d8c4 <RCCEx_PLL3_Config>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b5bc:	e00a      	b.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5c4:	e006      	b.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b5c6:	bf00      	nop
 800b5c8:	e004      	b.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b5ca:	bf00      	nop
 800b5cc:	e002      	b.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b5ce:	bf00      	nop
 800b5d0:	e000      	b.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b5d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10d      	bne.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b5dc:	4b05      	ldr	r3, [pc, #20]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5ea:	4a02      	ldr	r2, [pc, #8]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5ec:	430b      	orrs	r3, r1
 800b5ee:	6513      	str	r3, [r2, #80]	; 0x50
 800b5f0:	e006      	b.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b5f2:	bf00      	nop
 800b5f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b60c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b610:	2300      	movs	r3, #0
 800b612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b616:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4313      	orrs	r3, r2
 800b61e:	d055      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b624:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b62c:	d033      	beq.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b62e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b632:	d82c      	bhi.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b638:	d02f      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b63a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63e:	d826      	bhi.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b640:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b644:	d02b      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b646:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b64a:	d820      	bhi.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b64c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b650:	d012      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b656:	d81a      	bhi.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d022      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b65c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b660:	d115      	bne.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b666:	3308      	adds	r3, #8
 800b668:	2101      	movs	r1, #1
 800b66a:	4618      	mov	r0, r3
 800b66c:	f002 f878 	bl	800d760 <RCCEx_PLL2_Config>
 800b670:	4603      	mov	r3, r0
 800b672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b676:	e015      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67c:	3328      	adds	r3, #40	; 0x28
 800b67e:	2101      	movs	r1, #1
 800b680:	4618      	mov	r0, r3
 800b682:	f002 f91f 	bl	800d8c4 <RCCEx_PLL3_Config>
 800b686:	4603      	mov	r3, r0
 800b688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b68c:	e00a      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b694:	e006      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b696:	bf00      	nop
 800b698:	e004      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b69a:	bf00      	nop
 800b69c:	e002      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b69e:	bf00      	nop
 800b6a0:	e000      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b6a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10b      	bne.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b6ac:	4ba3      	ldr	r3, [pc, #652]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6bc:	4a9f      	ldr	r2, [pc, #636]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6be:	430b      	orrs	r3, r1
 800b6c0:	6593      	str	r3, [r2, #88]	; 0x58
 800b6c2:	e003      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b6cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b6d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b6e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	d037      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6f6:	d00e      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b6f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6fc:	d816      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d018      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b706:	d111      	bne.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b708:	4b8c      	ldr	r3, [pc, #560]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70c:	4a8b      	ldr	r2, [pc, #556]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b70e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b714:	e00f      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b71a:	3308      	adds	r3, #8
 800b71c:	2101      	movs	r1, #1
 800b71e:	4618      	mov	r0, r3
 800b720:	f002 f81e 	bl	800d760 <RCCEx_PLL2_Config>
 800b724:	4603      	mov	r3, r0
 800b726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b72a:	e004      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b732:	e000      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b734:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10a      	bne.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b73e:	4b7f      	ldr	r3, [pc, #508]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b742:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b74c:	4a7b      	ldr	r2, [pc, #492]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b74e:	430b      	orrs	r3, r1
 800b750:	6513      	str	r3, [r2, #80]	; 0x50
 800b752:	e003      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b76c:	2300      	movs	r3, #0
 800b76e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b772:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b776:	460b      	mov	r3, r1
 800b778:	4313      	orrs	r3, r2
 800b77a:	d039      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b782:	2b03      	cmp	r3, #3
 800b784:	d81c      	bhi.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b786:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78c:	0800b7c9 	.word	0x0800b7c9
 800b790:	0800b79d 	.word	0x0800b79d
 800b794:	0800b7ab 	.word	0x0800b7ab
 800b798:	0800b7c9 	.word	0x0800b7c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b79c:	4b67      	ldr	r3, [pc, #412]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a0:	4a66      	ldr	r2, [pc, #408]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b7a8:	e00f      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	2102      	movs	r1, #2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f001 ffd4 	bl	800d760 <RCCEx_PLL2_Config>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b7be:	e004      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7c6:	e000      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b7d2:	4b5a      	ldr	r3, [pc, #360]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d6:	f023 0103 	bic.w	r1, r3, #3
 800b7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7e0:	4a56      	ldr	r2, [pc, #344]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7e2:	430b      	orrs	r3, r1
 800b7e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7e6:	e003      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b7fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b800:	2300      	movs	r3, #0
 800b802:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b806:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b80a:	460b      	mov	r3, r1
 800b80c:	4313      	orrs	r3, r2
 800b80e:	f000 809f 	beq.w	800b950 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b812:	4b4b      	ldr	r3, [pc, #300]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a4a      	ldr	r2, [pc, #296]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b81c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b81e:	f7f8 fc09 	bl	8004034 <HAL_GetTick>
 800b822:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b826:	e00b      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b828:	f7f8 fc04 	bl	8004034 <HAL_GetTick>
 800b82c:	4602      	mov	r2, r0
 800b82e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	2b64      	cmp	r3, #100	; 0x64
 800b836:	d903      	bls.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b83e:	e005      	b.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b840:	4b3f      	ldr	r3, [pc, #252]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d0ed      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b84c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b850:	2b00      	cmp	r3, #0
 800b852:	d179      	bne.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b854:	4b39      	ldr	r3, [pc, #228]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b85c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b860:	4053      	eors	r3, r2
 800b862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b866:	2b00      	cmp	r3, #0
 800b868:	d015      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b86a:	4b34      	ldr	r3, [pc, #208]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b872:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b876:	4b31      	ldr	r3, [pc, #196]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87a:	4a30      	ldr	r2, [pc, #192]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b87c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b880:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b882:	4b2e      	ldr	r3, [pc, #184]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b886:	4a2d      	ldr	r2, [pc, #180]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b88c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b88e:	4a2b      	ldr	r2, [pc, #172]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b890:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b894:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a2:	d118      	bne.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a4:	f7f8 fbc6 	bl	8004034 <HAL_GetTick>
 800b8a8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8ac:	e00d      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8ae:	f7f8 fbc1 	bl	8004034 <HAL_GetTick>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8b8:	1ad2      	subs	r2, r2, r3
 800b8ba:	f241 3388 	movw	r3, #5000	; 0x1388
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d903      	bls.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b8c8:	e005      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8ca:	4b1c      	ldr	r3, [pc, #112]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ce:	f003 0302 	and.w	r3, r3, #2
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0eb      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b8d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d129      	bne.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8ee:	d10e      	bne.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b8f0:	4b12      	ldr	r3, [pc, #72]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b900:	091a      	lsrs	r2, r3, #4
 800b902:	4b10      	ldr	r3, [pc, #64]	; (800b944 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b904:	4013      	ands	r3, r2
 800b906:	4a0d      	ldr	r2, [pc, #52]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b908:	430b      	orrs	r3, r1
 800b90a:	6113      	str	r3, [r2, #16]
 800b90c:	e005      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b90e:	4b0b      	ldr	r3, [pc, #44]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	4a0a      	ldr	r2, [pc, #40]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b914:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b918:	6113      	str	r3, [r2, #16]
 800b91a:	4b08      	ldr	r3, [pc, #32]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b91c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b92a:	4a04      	ldr	r2, [pc, #16]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b92c:	430b      	orrs	r3, r1
 800b92e:	6713      	str	r3, [r2, #112]	; 0x70
 800b930:	e00e      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b93a:	e009      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b93c:	58024400 	.word	0x58024400
 800b940:	58024800 	.word	0x58024800
 800b944:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b94c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f002 0301 	and.w	r3, r2, #1
 800b95c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b960:	2300      	movs	r3, #0
 800b962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b966:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b96a:	460b      	mov	r3, r1
 800b96c:	4313      	orrs	r3, r2
 800b96e:	f000 8089 	beq.w	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b978:	2b28      	cmp	r3, #40	; 0x28
 800b97a:	d86b      	bhi.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b97c:	a201      	add	r2, pc, #4	; (adr r2, 800b984 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b982:	bf00      	nop
 800b984:	0800ba5d 	.word	0x0800ba5d
 800b988:	0800ba55 	.word	0x0800ba55
 800b98c:	0800ba55 	.word	0x0800ba55
 800b990:	0800ba55 	.word	0x0800ba55
 800b994:	0800ba55 	.word	0x0800ba55
 800b998:	0800ba55 	.word	0x0800ba55
 800b99c:	0800ba55 	.word	0x0800ba55
 800b9a0:	0800ba55 	.word	0x0800ba55
 800b9a4:	0800ba29 	.word	0x0800ba29
 800b9a8:	0800ba55 	.word	0x0800ba55
 800b9ac:	0800ba55 	.word	0x0800ba55
 800b9b0:	0800ba55 	.word	0x0800ba55
 800b9b4:	0800ba55 	.word	0x0800ba55
 800b9b8:	0800ba55 	.word	0x0800ba55
 800b9bc:	0800ba55 	.word	0x0800ba55
 800b9c0:	0800ba55 	.word	0x0800ba55
 800b9c4:	0800ba3f 	.word	0x0800ba3f
 800b9c8:	0800ba55 	.word	0x0800ba55
 800b9cc:	0800ba55 	.word	0x0800ba55
 800b9d0:	0800ba55 	.word	0x0800ba55
 800b9d4:	0800ba55 	.word	0x0800ba55
 800b9d8:	0800ba55 	.word	0x0800ba55
 800b9dc:	0800ba55 	.word	0x0800ba55
 800b9e0:	0800ba55 	.word	0x0800ba55
 800b9e4:	0800ba5d 	.word	0x0800ba5d
 800b9e8:	0800ba55 	.word	0x0800ba55
 800b9ec:	0800ba55 	.word	0x0800ba55
 800b9f0:	0800ba55 	.word	0x0800ba55
 800b9f4:	0800ba55 	.word	0x0800ba55
 800b9f8:	0800ba55 	.word	0x0800ba55
 800b9fc:	0800ba55 	.word	0x0800ba55
 800ba00:	0800ba55 	.word	0x0800ba55
 800ba04:	0800ba5d 	.word	0x0800ba5d
 800ba08:	0800ba55 	.word	0x0800ba55
 800ba0c:	0800ba55 	.word	0x0800ba55
 800ba10:	0800ba55 	.word	0x0800ba55
 800ba14:	0800ba55 	.word	0x0800ba55
 800ba18:	0800ba55 	.word	0x0800ba55
 800ba1c:	0800ba55 	.word	0x0800ba55
 800ba20:	0800ba55 	.word	0x0800ba55
 800ba24:	0800ba5d 	.word	0x0800ba5d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	2101      	movs	r1, #1
 800ba30:	4618      	mov	r0, r3
 800ba32:	f001 fe95 	bl	800d760 <RCCEx_PLL2_Config>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba3c:	e00f      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba42:	3328      	adds	r3, #40	; 0x28
 800ba44:	2101      	movs	r1, #1
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 ff3c 	bl	800d8c4 <RCCEx_PLL3_Config>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba52:	e004      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba5a:	e000      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ba5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba66:	4bbf      	ldr	r3, [pc, #764]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ba6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba74:	4abb      	ldr	r2, [pc, #748]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba76:	430b      	orrs	r3, r1
 800ba78:	6553      	str	r3, [r2, #84]	; 0x54
 800ba7a:	e003      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f002 0302 	and.w	r3, r2, #2
 800ba90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba94:	2300      	movs	r3, #0
 800ba96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4313      	orrs	r3, r2
 800baa2:	d041      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800baa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baaa:	2b05      	cmp	r3, #5
 800baac:	d824      	bhi.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800baae:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800bb01 	.word	0x0800bb01
 800bab8:	0800bacd 	.word	0x0800bacd
 800babc:	0800bae3 	.word	0x0800bae3
 800bac0:	0800bb01 	.word	0x0800bb01
 800bac4:	0800bb01 	.word	0x0800bb01
 800bac8:	0800bb01 	.word	0x0800bb01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad0:	3308      	adds	r3, #8
 800bad2:	2101      	movs	r1, #1
 800bad4:	4618      	mov	r0, r3
 800bad6:	f001 fe43 	bl	800d760 <RCCEx_PLL2_Config>
 800bada:	4603      	mov	r3, r0
 800badc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bae0:	e00f      	b.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae6:	3328      	adds	r3, #40	; 0x28
 800bae8:	2101      	movs	r1, #1
 800baea:	4618      	mov	r0, r3
 800baec:	f001 feea 	bl	800d8c4 <RCCEx_PLL3_Config>
 800baf0:	4603      	mov	r3, r0
 800baf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800baf6:	e004      	b.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bafe:	e000      	b.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bb00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10a      	bne.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb0a:	4b96      	ldr	r3, [pc, #600]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb0e:	f023 0107 	bic.w	r1, r3, #7
 800bb12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb18:	4a92      	ldr	r2, [pc, #584]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb1a:	430b      	orrs	r3, r1
 800bb1c:	6553      	str	r3, [r2, #84]	; 0x54
 800bb1e:	e003      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bb28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb30:	f002 0304 	and.w	r3, r2, #4
 800bb34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb38:	2300      	movs	r3, #0
 800bb3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4313      	orrs	r3, r2
 800bb46:	d044      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb50:	2b05      	cmp	r3, #5
 800bb52:	d825      	bhi.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bb54:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5a:	bf00      	nop
 800bb5c:	0800bba9 	.word	0x0800bba9
 800bb60:	0800bb75 	.word	0x0800bb75
 800bb64:	0800bb8b 	.word	0x0800bb8b
 800bb68:	0800bba9 	.word	0x0800bba9
 800bb6c:	0800bba9 	.word	0x0800bba9
 800bb70:	0800bba9 	.word	0x0800bba9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb78:	3308      	adds	r3, #8
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 fdef 	bl	800d760 <RCCEx_PLL2_Config>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb88:	e00f      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8e:	3328      	adds	r3, #40	; 0x28
 800bb90:	2101      	movs	r1, #1
 800bb92:	4618      	mov	r0, r3
 800bb94:	f001 fe96 	bl	800d8c4 <RCCEx_PLL3_Config>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb9e:	e004      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bba6:	e000      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10b      	bne.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bbb2:	4b6c      	ldr	r3, [pc, #432]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbb6:	f023 0107 	bic.w	r1, r3, #7
 800bbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbc2:	4a68      	ldr	r2, [pc, #416]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	6593      	str	r3, [r2, #88]	; 0x58
 800bbc8:	e003      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f002 0320 	and.w	r3, r2, #32
 800bbde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bbec:	460b      	mov	r3, r1
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	d055      	beq.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbfe:	d033      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bc00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc04:	d82c      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0a:	d02f      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bc0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc10:	d826      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc16:	d02b      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bc18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc1c:	d820      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc22:	d012      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bc24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc28:	d81a      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d022      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bc2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc32:	d115      	bne.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc38:	3308      	adds	r3, #8
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f001 fd8f 	bl	800d760 <RCCEx_PLL2_Config>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc48:	e015      	b.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	3328      	adds	r3, #40	; 0x28
 800bc50:	2102      	movs	r1, #2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 fe36 	bl	800d8c4 <RCCEx_PLL3_Config>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc5e:	e00a      	b.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc66:	e006      	b.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc68:	bf00      	nop
 800bc6a:	e004      	b.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc6c:	bf00      	nop
 800bc6e:	e002      	b.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc70:	bf00      	nop
 800bc72:	e000      	b.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10b      	bne.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc7e:	4b39      	ldr	r3, [pc, #228]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc82:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8e:	4a35      	ldr	r2, [pc, #212]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc90:	430b      	orrs	r3, r1
 800bc92:	6553      	str	r3, [r2, #84]	; 0x54
 800bc94:	e003      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bc9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bcaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bcae:	2300      	movs	r3, #0
 800bcb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bcb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	d058      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bcbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bcca:	d033      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bccc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bcd0:	d82c      	bhi.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bcd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcd6:	d02f      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bcd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcdc:	d826      	bhi.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bcde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bce2:	d02b      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bce4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bce8:	d820      	bhi.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bcea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcee:	d012      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bcf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf4:	d81a      	bhi.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d022      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bcfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcfe:	d115      	bne.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd04:	3308      	adds	r3, #8
 800bd06:	2100      	movs	r1, #0
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f001 fd29 	bl	800d760 <RCCEx_PLL2_Config>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd14:	e015      	b.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1a:	3328      	adds	r3, #40	; 0x28
 800bd1c:	2102      	movs	r1, #2
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f001 fdd0 	bl	800d8c4 <RCCEx_PLL3_Config>
 800bd24:	4603      	mov	r3, r0
 800bd26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd2a:	e00a      	b.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd32:	e006      	b.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bd34:	bf00      	nop
 800bd36:	e004      	b.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bd38:	bf00      	nop
 800bd3a:	e002      	b.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bd3c:	bf00      	nop
 800bd3e:	e000      	b.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bd40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10e      	bne.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd4a:	4b06      	ldr	r3, [pc, #24]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd4e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bd52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd5a:	4a02      	ldr	r2, [pc, #8]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	6593      	str	r3, [r2, #88]	; 0x58
 800bd60:	e006      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bd62:	bf00      	nop
 800bd64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bd7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd80:	2300      	movs	r3, #0
 800bd82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	d055      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd9c:	d033      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bd9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bda2:	d82c      	bhi.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bda4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bda8:	d02f      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bdaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdae:	d826      	bhi.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bdb0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bdb4:	d02b      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bdb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bdba:	d820      	bhi.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bdbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdc0:	d012      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bdc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdc6:	d81a      	bhi.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d022      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bdcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdd0:	d115      	bne.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd6:	3308      	adds	r3, #8
 800bdd8:	2100      	movs	r1, #0
 800bdda:	4618      	mov	r0, r3
 800bddc:	f001 fcc0 	bl	800d760 <RCCEx_PLL2_Config>
 800bde0:	4603      	mov	r3, r0
 800bde2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bde6:	e015      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bde8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdec:	3328      	adds	r3, #40	; 0x28
 800bdee:	2102      	movs	r1, #2
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f001 fd67 	bl	800d8c4 <RCCEx_PLL3_Config>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bdfc:	e00a      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be04:	e006      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be06:	bf00      	nop
 800be08:	e004      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be0a:	bf00      	nop
 800be0c:	e002      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be0e:	bf00      	nop
 800be10:	e000      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10b      	bne.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be1c:	4ba1      	ldr	r3, [pc, #644]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be20:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800be24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be2c:	4a9d      	ldr	r2, [pc, #628]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be2e:	430b      	orrs	r3, r1
 800be30:	6593      	str	r3, [r2, #88]	; 0x58
 800be32:	e003      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800be3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f002 0308 	and.w	r3, r2, #8
 800be48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be4c:	2300      	movs	r3, #0
 800be4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800be56:	460b      	mov	r3, r1
 800be58:	4313      	orrs	r3, r2
 800be5a:	d01e      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800be5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be68:	d10c      	bne.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6e:	3328      	adds	r3, #40	; 0x28
 800be70:	2102      	movs	r1, #2
 800be72:	4618      	mov	r0, r3
 800be74:	f001 fd26 	bl	800d8c4 <RCCEx_PLL3_Config>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be84:	4b87      	ldr	r3, [pc, #540]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be94:	4a83      	ldr	r2, [pc, #524]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be96:	430b      	orrs	r3, r1
 800be98:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	f002 0310 	and.w	r3, r2, #16
 800bea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800beaa:	2300      	movs	r3, #0
 800beac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800beb0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800beb4:	460b      	mov	r3, r1
 800beb6:	4313      	orrs	r3, r2
 800beb8:	d01e      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800beba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bec6:	d10c      	bne.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800becc:	3328      	adds	r3, #40	; 0x28
 800bece:	2102      	movs	r1, #2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f001 fcf7 	bl	800d8c4 <RCCEx_PLL3_Config>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bedc:	2301      	movs	r3, #1
 800bede:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bee2:	4b70      	ldr	r3, [pc, #448]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bee6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800beea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bef2:	4a6c      	ldr	r2, [pc, #432]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bef4:	430b      	orrs	r3, r1
 800bef6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf00:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bf12:	460b      	mov	r3, r1
 800bf14:	4313      	orrs	r3, r2
 800bf16:	d03e      	beq.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bf18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf24:	d022      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bf26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf2a:	d81b      	bhi.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d003      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bf30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf34:	d00b      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bf36:	e015      	b.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3c:	3308      	adds	r3, #8
 800bf3e:	2100      	movs	r1, #0
 800bf40:	4618      	mov	r0, r3
 800bf42:	f001 fc0d 	bl	800d760 <RCCEx_PLL2_Config>
 800bf46:	4603      	mov	r3, r0
 800bf48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf4c:	e00f      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf52:	3328      	adds	r3, #40	; 0x28
 800bf54:	2102      	movs	r1, #2
 800bf56:	4618      	mov	r0, r3
 800bf58:	f001 fcb4 	bl	800d8c4 <RCCEx_PLL3_Config>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf62:	e004      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf6a:	e000      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bf6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10b      	bne.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf76:	4b4b      	ldr	r3, [pc, #300]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bf7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf86:	4a47      	ldr	r2, [pc, #284]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf88:	430b      	orrs	r3, r1
 800bf8a:	6593      	str	r3, [r2, #88]	; 0x58
 800bf8c:	e003      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bfa2:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bfa8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bfac:	460b      	mov	r3, r1
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	d03b      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfbe:	d01f      	beq.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bfc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfc4:	d818      	bhi.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bfc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfca:	d003      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bfcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfd0:	d007      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bfd2:	e011      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfd4:	4b33      	ldr	r3, [pc, #204]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd8:	4a32      	ldr	r2, [pc, #200]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bfe0:	e00f      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe6:	3328      	adds	r3, #40	; 0x28
 800bfe8:	2101      	movs	r1, #1
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 fc6a 	bl	800d8c4 <RCCEx_PLL3_Config>
 800bff0:	4603      	mov	r3, r0
 800bff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bff6:	e004      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bffe:	e000      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c000:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10b      	bne.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c00a:	4b26      	ldr	r3, [pc, #152]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c01a:	4a22      	ldr	r2, [pc, #136]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c01c:	430b      	orrs	r3, r1
 800c01e:	6553      	str	r3, [r2, #84]	; 0x54
 800c020:	e003      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c036:	673b      	str	r3, [r7, #112]	; 0x70
 800c038:	2300      	movs	r3, #0
 800c03a:	677b      	str	r3, [r7, #116]	; 0x74
 800c03c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c040:	460b      	mov	r3, r1
 800c042:	4313      	orrs	r3, r2
 800c044:	d034      	beq.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c054:	d007      	beq.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c056:	e011      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c058:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05c:	4a11      	ldr	r2, [pc, #68]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c05e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c064:	e00e      	b.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c06a:	3308      	adds	r3, #8
 800c06c:	2102      	movs	r1, #2
 800c06e:	4618      	mov	r0, r3
 800c070:	f001 fb76 	bl	800d760 <RCCEx_PLL2_Config>
 800c074:	4603      	mov	r3, r0
 800c076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c07a:	e003      	b.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c082:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10d      	bne.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c08c:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c08e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c090:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c09a:	4a02      	ldr	r2, [pc, #8]	; (800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c09c:	430b      	orrs	r3, r1
 800c09e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0a0:	e006      	b.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c0a2:	bf00      	nop
 800c0a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c0bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0be:	2300      	movs	r3, #0
 800c0c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	d00c      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d0:	3328      	adds	r3, #40	; 0x28
 800c0d2:	2102      	movs	r1, #2
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f001 fbf5 	bl	800d8c4 <RCCEx_PLL3_Config>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c0f2:	663b      	str	r3, [r7, #96]	; 0x60
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	667b      	str	r3, [r7, #100]	; 0x64
 800c0f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4313      	orrs	r3, r2
 800c100:	d038      	beq.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c10a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c10e:	d018      	beq.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c114:	d811      	bhi.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c11a:	d014      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c11c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c120:	d80b      	bhi.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c122:	2b00      	cmp	r3, #0
 800c124:	d011      	beq.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c12a:	d106      	bne.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c12c:	4bc3      	ldr	r3, [pc, #780]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c130:	4ac2      	ldr	r2, [pc, #776]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c138:	e008      	b.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c140:	e004      	b.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c142:	bf00      	nop
 800c144:	e002      	b.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c146:	bf00      	nop
 800c148:	e000      	b.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c14a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c14c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10b      	bne.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c154:	4bb9      	ldr	r3, [pc, #740]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c158:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c164:	4ab5      	ldr	r2, [pc, #724]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c166:	430b      	orrs	r3, r1
 800c168:	6553      	str	r3, [r2, #84]	; 0x54
 800c16a:	e003      	b.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c16c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c170:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c180:	65bb      	str	r3, [r7, #88]	; 0x58
 800c182:	2300      	movs	r3, #0
 800c184:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c186:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c18a:	460b      	mov	r3, r1
 800c18c:	4313      	orrs	r3, r2
 800c18e:	d009      	beq.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c190:	4baa      	ldr	r3, [pc, #680]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c194:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c19e:	4aa7      	ldr	r2, [pc, #668]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c1b0:	653b      	str	r3, [r7, #80]	; 0x50
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	657b      	str	r3, [r7, #84]	; 0x54
 800c1b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	d00a      	beq.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c1c0:	4b9e      	ldr	r3, [pc, #632]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c1d0:	4a9a      	ldr	r2, [pc, #616]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1d2:	430b      	orrs	r3, r1
 800c1d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c1e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	d009      	beq.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c1f2:	4b92      	ldr	r3, [pc, #584]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c200:	4a8e      	ldr	r2, [pc, #568]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c202:	430b      	orrs	r3, r1
 800c204:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c212:	643b      	str	r3, [r7, #64]	; 0x40
 800c214:	2300      	movs	r3, #0
 800c216:	647b      	str	r3, [r7, #68]	; 0x44
 800c218:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c21c:	460b      	mov	r3, r1
 800c21e:	4313      	orrs	r3, r2
 800c220:	d00e      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c222:	4b86      	ldr	r3, [pc, #536]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	4a85      	ldr	r2, [pc, #532]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c228:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c22c:	6113      	str	r3, [r2, #16]
 800c22e:	4b83      	ldr	r3, [pc, #524]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c230:	6919      	ldr	r1, [r3, #16]
 800c232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c236:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c23a:	4a80      	ldr	r2, [pc, #512]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c23c:	430b      	orrs	r3, r1
 800c23e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c24c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c24e:	2300      	movs	r3, #0
 800c250:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c252:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c256:	460b      	mov	r3, r1
 800c258:	4313      	orrs	r3, r2
 800c25a:	d009      	beq.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c25c:	4b77      	ldr	r3, [pc, #476]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c25e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c260:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c26a:	4a74      	ldr	r2, [pc, #464]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c26c:	430b      	orrs	r3, r1
 800c26e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c27c:	633b      	str	r3, [r7, #48]	; 0x30
 800c27e:	2300      	movs	r3, #0
 800c280:	637b      	str	r3, [r7, #52]	; 0x34
 800c282:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c286:	460b      	mov	r3, r1
 800c288:	4313      	orrs	r3, r2
 800c28a:	d00a      	beq.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c28c:	4b6b      	ldr	r3, [pc, #428]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c290:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c29c:	4a67      	ldr	r2, [pc, #412]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c29e:	430b      	orrs	r3, r1
 800c2a0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	62b9      	str	r1, [r7, #40]	; 0x28
 800c2ae:	f003 0301 	and.w	r3, r3, #1
 800c2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	d011      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c2:	3308      	adds	r3, #8
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f001 fa4a 	bl	800d760 <RCCEx_PLL2_Config>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	6239      	str	r1, [r7, #32]
 800c2ee:	f003 0302 	and.w	r3, r3, #2
 800c2f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	d011      	beq.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c302:	3308      	adds	r3, #8
 800c304:	2101      	movs	r1, #1
 800c306:	4618      	mov	r0, r3
 800c308:	f001 fa2a 	bl	800d760 <RCCEx_PLL2_Config>
 800c30c:	4603      	mov	r3, r0
 800c30e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c316:	2b00      	cmp	r3, #0
 800c318:	d003      	beq.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c31a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c31e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	2100      	movs	r1, #0
 800c32c:	61b9      	str	r1, [r7, #24]
 800c32e:	f003 0304 	and.w	r3, r3, #4
 800c332:	61fb      	str	r3, [r7, #28]
 800c334:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c338:	460b      	mov	r3, r1
 800c33a:	4313      	orrs	r3, r2
 800c33c:	d011      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c342:	3308      	adds	r3, #8
 800c344:	2102      	movs	r1, #2
 800c346:	4618      	mov	r0, r3
 800c348:	f001 fa0a 	bl	800d760 <RCCEx_PLL2_Config>
 800c34c:	4603      	mov	r3, r0
 800c34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c35e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	2100      	movs	r1, #0
 800c36c:	6139      	str	r1, [r7, #16]
 800c36e:	f003 0308 	and.w	r3, r3, #8
 800c372:	617b      	str	r3, [r7, #20]
 800c374:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c378:	460b      	mov	r3, r1
 800c37a:	4313      	orrs	r3, r2
 800c37c:	d011      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c382:	3328      	adds	r3, #40	; 0x28
 800c384:	2100      	movs	r1, #0
 800c386:	4618      	mov	r0, r3
 800c388:	f001 fa9c 	bl	800d8c4 <RCCEx_PLL3_Config>
 800c38c:	4603      	mov	r3, r0
 800c38e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c39a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c39e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	f003 0310 	and.w	r3, r3, #16
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	d011      	beq.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c2:	3328      	adds	r3, #40	; 0x28
 800c3c4:	2101      	movs	r1, #1
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f001 fa7c 	bl	800d8c4 <RCCEx_PLL3_Config>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	6039      	str	r1, [r7, #0]
 800c3ee:	f003 0320 	and.w	r3, r3, #32
 800c3f2:	607b      	str	r3, [r7, #4]
 800c3f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	d011      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c402:	3328      	adds	r3, #40	; 0x28
 800c404:	2102      	movs	r1, #2
 800c406:	4618      	mov	r0, r3
 800c408:	f001 fa5c 	bl	800d8c4 <RCCEx_PLL3_Config>
 800c40c:	4603      	mov	r3, r0
 800c40e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c41a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c41e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c422:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	e000      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
}
 800c430:	4618      	mov	r0, r3
 800c432:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c436:	46bd      	mov	sp, r7
 800c438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c43c:	58024400 	.word	0x58024400

0800c440 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b090      	sub	sp, #64	; 0x40
 800c444:	af00      	add	r7, sp, #0
 800c446:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c44a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c44e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c452:	430b      	orrs	r3, r1
 800c454:	f040 8094 	bne.w	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c458:	4b9e      	ldr	r3, [pc, #632]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45c:	f003 0307 	and.w	r3, r3, #7
 800c460:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	2b04      	cmp	r3, #4
 800c466:	f200 8087 	bhi.w	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c46a:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c470:	0800c485 	.word	0x0800c485
 800c474:	0800c4ad 	.word	0x0800c4ad
 800c478:	0800c4d5 	.word	0x0800c4d5
 800c47c:	0800c571 	.word	0x0800c571
 800c480:	0800c4fd 	.word	0x0800c4fd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c484:	4b93      	ldr	r3, [pc, #588]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c48c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c490:	d108      	bne.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c496:	4618      	mov	r0, r3
 800c498:	f001 f810 	bl	800d4bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a0:	f000 bd45 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a8:	f000 bd41 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4ac:	4b89      	ldr	r3, [pc, #548]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4b8:	d108      	bne.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4ba:	f107 0318 	add.w	r3, r7, #24
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 fd54 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c8:	f000 bd31 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d0:	f000 bd2d 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4d4:	4b7f      	ldr	r3, [pc, #508]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e0:	d108      	bne.n	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4e2:	f107 030c 	add.w	r3, r7, #12
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 fe94 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f0:	f000 bd1d 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f8:	f000 bd19 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4fc:	4b75      	ldr	r3, [pc, #468]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c504:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c506:	4b73      	ldr	r3, [pc, #460]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0304 	and.w	r3, r3, #4
 800c50e:	2b04      	cmp	r3, #4
 800c510:	d10c      	bne.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c514:	2b00      	cmp	r3, #0
 800c516:	d109      	bne.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c518:	4b6e      	ldr	r3, [pc, #440]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	08db      	lsrs	r3, r3, #3
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	4a6d      	ldr	r2, [pc, #436]	; (800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c524:	fa22 f303 	lsr.w	r3, r2, r3
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c52a:	e01f      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c52c:	4b69      	ldr	r3, [pc, #420]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c538:	d106      	bne.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c540:	d102      	bne.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c542:	4b66      	ldr	r3, [pc, #408]	; (800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c546:	e011      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c548:	4b62      	ldr	r3, [pc, #392]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c554:	d106      	bne.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c55c:	d102      	bne.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c55e:	4b60      	ldr	r3, [pc, #384]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c560:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c562:	e003      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c564:	2300      	movs	r3, #0
 800c566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c568:	f000 bce1 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c56c:	f000 bcdf 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c570:	4b5c      	ldr	r3, [pc, #368]	; (800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c574:	f000 bcdb 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c57c:	f000 bcd7 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c580:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c584:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c588:	430b      	orrs	r3, r1
 800c58a:	f040 80ad 	bne.w	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c58e:	4b51      	ldr	r3, [pc, #324]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c592:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c596:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59e:	d056      	beq.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5a6:	f200 8090 	bhi.w	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	2bc0      	cmp	r3, #192	; 0xc0
 800c5ae:	f000 8088 	beq.w	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b4:	2bc0      	cmp	r3, #192	; 0xc0
 800c5b6:	f200 8088 	bhi.w	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5bc:	2b80      	cmp	r3, #128	; 0x80
 800c5be:	d032      	beq.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c2:	2b80      	cmp	r3, #128	; 0x80
 800c5c4:	f200 8081 	bhi.w	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d003      	beq.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	2b40      	cmp	r3, #64	; 0x40
 800c5d2:	d014      	beq.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c5d4:	e079      	b.n	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5d6:	4b3f      	ldr	r3, [pc, #252]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5e2:	d108      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 ff67 	bl	800d4bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f2:	f000 bc9c 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fa:	f000 bc98 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5fe:	4b35      	ldr	r3, [pc, #212]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c60a:	d108      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c60c:	f107 0318 	add.w	r3, r7, #24
 800c610:	4618      	mov	r0, r3
 800c612:	f000 fcab 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c61a:	f000 bc88 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c622:	f000 bc84 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c626:	4b2b      	ldr	r3, [pc, #172]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c62e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c632:	d108      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c634:	f107 030c 	add.w	r3, r7, #12
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fdeb 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c642:	f000 bc74 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64a:	f000 bc70 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c64e:	4b21      	ldr	r3, [pc, #132]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c656:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c658:	4b1e      	ldr	r3, [pc, #120]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0304 	and.w	r3, r3, #4
 800c660:	2b04      	cmp	r3, #4
 800c662:	d10c      	bne.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c666:	2b00      	cmp	r3, #0
 800c668:	d109      	bne.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c66a:	4b1a      	ldr	r3, [pc, #104]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	08db      	lsrs	r3, r3, #3
 800c670:	f003 0303 	and.w	r3, r3, #3
 800c674:	4a18      	ldr	r2, [pc, #96]	; (800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c676:	fa22 f303 	lsr.w	r3, r2, r3
 800c67a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c67c:	e01f      	b.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c67e:	4b15      	ldr	r3, [pc, #84]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c68a:	d106      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c692:	d102      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c694:	4b11      	ldr	r3, [pc, #68]	; (800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c698:	e011      	b.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c69a:	4b0e      	ldr	r3, [pc, #56]	; (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6a6:	d106      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ae:	d102      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6b0:	4b0b      	ldr	r3, [pc, #44]	; (800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6b4:	e003      	b.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6ba:	f000 bc38 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6be:	f000 bc36 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6c2:	4b08      	ldr	r3, [pc, #32]	; (800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c6:	f000 bc32 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ce:	f000 bc2e 	b.w	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6d2:	bf00      	nop
 800c6d4:	58024400 	.word	0x58024400
 800c6d8:	03d09000 	.word	0x03d09000
 800c6dc:	003d0900 	.word	0x003d0900
 800c6e0:	017d7840 	.word	0x017d7840
 800c6e4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6ec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c6f0:	430b      	orrs	r3, r1
 800c6f2:	f040 809c 	bne.w	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c6f6:	4b9e      	ldr	r3, [pc, #632]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6fa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c6fe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c706:	d054      	beq.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c70e:	f200 808b 	bhi.w	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c714:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c718:	f000 8083 	beq.w	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c722:	f200 8081 	bhi.w	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c72c:	d02f      	beq.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c734:	d878      	bhi.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d004      	beq.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c742:	d012      	beq.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c744:	e070      	b.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c746:	4b8a      	ldr	r3, [pc, #552]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c74e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c752:	d107      	bne.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c758:	4618      	mov	r0, r3
 800c75a:	f000 feaf 	bl	800d4bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c762:	e3e4      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c768:	e3e1      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c76a:	4b81      	ldr	r3, [pc, #516]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c776:	d107      	bne.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c778:	f107 0318 	add.w	r3, r7, #24
 800c77c:	4618      	mov	r0, r3
 800c77e:	f000 fbf5 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c786:	e3d2      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c788:	2300      	movs	r3, #0
 800c78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c78c:	e3cf      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c78e:	4b78      	ldr	r3, [pc, #480]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c79a:	d107      	bne.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c79c:	f107 030c 	add.w	r3, r7, #12
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 fd37 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7aa:	e3c0      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b0:	e3bd      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7b2:	4b6f      	ldr	r3, [pc, #444]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7ba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7bc:	4b6c      	ldr	r3, [pc, #432]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f003 0304 	and.w	r3, r3, #4
 800c7c4:	2b04      	cmp	r3, #4
 800c7c6:	d10c      	bne.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d109      	bne.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7ce:	4b68      	ldr	r3, [pc, #416]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	08db      	lsrs	r3, r3, #3
 800c7d4:	f003 0303 	and.w	r3, r3, #3
 800c7d8:	4a66      	ldr	r2, [pc, #408]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c7da:	fa22 f303 	lsr.w	r3, r2, r3
 800c7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7e0:	e01e      	b.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7e2:	4b63      	ldr	r3, [pc, #396]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ee:	d106      	bne.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7f6:	d102      	bne.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7f8:	4b5f      	ldr	r3, [pc, #380]	; (800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7fc:	e010      	b.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7fe:	4b5c      	ldr	r3, [pc, #368]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c80a:	d106      	bne.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c80e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c812:	d102      	bne.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c814:	4b59      	ldr	r3, [pc, #356]	; (800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c816:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c818:	e002      	b.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c81e:	e386      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c820:	e385      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c822:	4b57      	ldr	r3, [pc, #348]	; (800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c826:	e382      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82c:	e37f      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c82e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c832:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c836:	430b      	orrs	r3, r1
 800c838:	f040 80a7 	bne.w	800c98a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c83c:	4b4c      	ldr	r3, [pc, #304]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c840:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c844:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c84c:	d055      	beq.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c854:	f200 8096 	bhi.w	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c85e:	f000 8084 	beq.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c864:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c868:	f200 808c 	bhi.w	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c872:	d030      	beq.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c87a:	f200 8083 	bhi.w	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c880:	2b00      	cmp	r3, #0
 800c882:	d004      	beq.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c88a:	d012      	beq.n	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c88c:	e07a      	b.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c88e:	4b38      	ldr	r3, [pc, #224]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c89a:	d107      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c89c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 fe0b 	bl	800d4bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8aa:	e340      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b0:	e33d      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8b2:	4b2f      	ldr	r3, [pc, #188]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8be:	d107      	bne.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8c0:	f107 0318 	add.w	r3, r7, #24
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 fb51 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ce:	e32e      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d4:	e32b      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8d6:	4b26      	ldr	r3, [pc, #152]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e2:	d107      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8e4:	f107 030c 	add.w	r3, r7, #12
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f000 fc93 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8f2:	e31c      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f8:	e319      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8fa:	4b1d      	ldr	r3, [pc, #116]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c902:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c904:	4b1a      	ldr	r3, [pc, #104]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f003 0304 	and.w	r3, r3, #4
 800c90c:	2b04      	cmp	r3, #4
 800c90e:	d10c      	bne.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c912:	2b00      	cmp	r3, #0
 800c914:	d109      	bne.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c916:	4b16      	ldr	r3, [pc, #88]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	08db      	lsrs	r3, r3, #3
 800c91c:	f003 0303 	and.w	r3, r3, #3
 800c920:	4a14      	ldr	r2, [pc, #80]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c922:	fa22 f303 	lsr.w	r3, r2, r3
 800c926:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c928:	e01e      	b.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c92a:	4b11      	ldr	r3, [pc, #68]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c936:	d106      	bne.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c93a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c93e:	d102      	bne.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c940:	4b0d      	ldr	r3, [pc, #52]	; (800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c942:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c944:	e010      	b.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c946:	4b0a      	ldr	r3, [pc, #40]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c94e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c952:	d106      	bne.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c95a:	d102      	bne.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c95c:	4b07      	ldr	r3, [pc, #28]	; (800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c960:	e002      	b.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c966:	e2e2      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c968:	e2e1      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c96a:	4b05      	ldr	r3, [pc, #20]	; (800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96e:	e2de      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c970:	58024400 	.word	0x58024400
 800c974:	03d09000 	.word	0x03d09000
 800c978:	003d0900 	.word	0x003d0900
 800c97c:	017d7840 	.word	0x017d7840
 800c980:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c988:	e2d1      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c98a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c98e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c992:	430b      	orrs	r3, r1
 800c994:	f040 809c 	bne.w	800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c998:	4b93      	ldr	r3, [pc, #588]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c99c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c9a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9a8:	d054      	beq.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9b0:	f200 808b 	bhi.w	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c9ba:	f000 8083 	beq.w	800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c9c4:	f200 8081 	bhi.w	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9ce:	d02f      	beq.n	800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9d6:	d878      	bhi.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d004      	beq.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9e4:	d012      	beq.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c9e6:	e070      	b.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9e8:	4b7f      	ldr	r3, [pc, #508]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9f4:	d107      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 fd5e 	bl	800d4bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca04:	e293      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca0a:	e290      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca0c:	4b76      	ldr	r3, [pc, #472]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca18:	d107      	bne.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca1a:	f107 0318 	add.w	r3, r7, #24
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 faa4 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca28:	e281      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca2e:	e27e      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca30:	4b6d      	ldr	r3, [pc, #436]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca3c:	d107      	bne.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca3e:	f107 030c 	add.w	r3, r7, #12
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 fbe6 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca4c:	e26f      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca52:	e26c      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca54:	4b64      	ldr	r3, [pc, #400]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca5e:	4b62      	ldr	r3, [pc, #392]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f003 0304 	and.w	r3, r3, #4
 800ca66:	2b04      	cmp	r3, #4
 800ca68:	d10c      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ca6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d109      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca70:	4b5d      	ldr	r3, [pc, #372]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	08db      	lsrs	r3, r3, #3
 800ca76:	f003 0303 	and.w	r3, r3, #3
 800ca7a:	4a5c      	ldr	r2, [pc, #368]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ca7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca82:	e01e      	b.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca84:	4b58      	ldr	r3, [pc, #352]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca90:	d106      	bne.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ca92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca98:	d102      	bne.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca9a:	4b55      	ldr	r3, [pc, #340]	; (800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca9e:	e010      	b.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800caa0:	4b51      	ldr	r3, [pc, #324]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caac:	d106      	bne.n	800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800caae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab4:	d102      	bne.n	800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cab6:	4b4f      	ldr	r3, [pc, #316]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caba:	e002      	b.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cac0:	e235      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cac2:	e234      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cac4:	4b4c      	ldr	r3, [pc, #304]	; (800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac8:	e231      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800caca:	2300      	movs	r3, #0
 800cacc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cace:	e22e      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cad8:	430b      	orrs	r3, r1
 800cada:	f040 808f 	bne.w	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cade:	4b42      	ldr	r3, [pc, #264]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cae2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cae6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caee:	d06b      	beq.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caf6:	d874      	bhi.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cafe:	d056      	beq.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb06:	d86c      	bhi.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb0e:	d03b      	beq.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb16:	d864      	bhi.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb1e:	d021      	beq.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb26:	d85c      	bhi.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d004      	beq.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb34:	d004      	beq.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cb36:	e054      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cb38:	f7fe fa0a 	bl	800af50 <HAL_RCC_GetPCLK1Freq>
 800cb3c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb3e:	e1f6      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb40:	4b29      	ldr	r3, [pc, #164]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb4c:	d107      	bne.n	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb4e:	f107 0318 	add.w	r3, r7, #24
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 fa0a 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb5c:	e1e7      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb62:	e1e4      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb64:	4b20      	ldr	r3, [pc, #128]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb70:	d107      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb72:	f107 030c 	add.w	r3, r7, #12
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 fb4c 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb80:	e1d5      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb86:	e1d2      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb88:	4b17      	ldr	r3, [pc, #92]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 0304 	and.w	r3, r3, #4
 800cb90:	2b04      	cmp	r3, #4
 800cb92:	d109      	bne.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb94:	4b14      	ldr	r3, [pc, #80]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	08db      	lsrs	r3, r3, #3
 800cb9a:	f003 0303 	and.w	r3, r3, #3
 800cb9e:	4a13      	ldr	r2, [pc, #76]	; (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cba0:	fa22 f303 	lsr.w	r3, r2, r3
 800cba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cba6:	e1c2      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbac:	e1bf      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cbae:	4b0e      	ldr	r3, [pc, #56]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbba:	d102      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cbbc:	4b0c      	ldr	r3, [pc, #48]	; (800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbc0:	e1b5      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc6:	e1b2      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cbc8:	4b07      	ldr	r3, [pc, #28]	; (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbd4:	d102      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cbd6:	4b07      	ldr	r3, [pc, #28]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbda:	e1a8      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe0:	e1a5      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe6:	e1a2      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cbe8:	58024400 	.word	0x58024400
 800cbec:	03d09000 	.word	0x03d09000
 800cbf0:	003d0900 	.word	0x003d0900
 800cbf4:	017d7840 	.word	0x017d7840
 800cbf8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc00:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc04:	430b      	orrs	r3, r1
 800cc06:	d173      	bne.n	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc08:	4b9c      	ldr	r3, [pc, #624]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc18:	d02f      	beq.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc20:	d863      	bhi.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d004      	beq.n	800cc32 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc2e:	d012      	beq.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cc30:	e05b      	b.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc32:	4b92      	ldr	r3, [pc, #584]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc3e:	d107      	bne.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc40:	f107 0318 	add.w	r3, r7, #24
 800cc44:	4618      	mov	r0, r3
 800cc46:	f000 f991 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4e:	e16e      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc54:	e16b      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc56:	4b89      	ldr	r3, [pc, #548]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc62:	d107      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc64:	f107 030c 	add.w	r3, r7, #12
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 fad3 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc72:	e15c      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc74:	2300      	movs	r3, #0
 800cc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc78:	e159      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc7a:	4b80      	ldr	r3, [pc, #512]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc84:	4b7d      	ldr	r3, [pc, #500]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0304 	and.w	r3, r3, #4
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	d10c      	bne.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d109      	bne.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc96:	4b79      	ldr	r3, [pc, #484]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	08db      	lsrs	r3, r3, #3
 800cc9c:	f003 0303 	and.w	r3, r3, #3
 800cca0:	4a77      	ldr	r2, [pc, #476]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cca2:	fa22 f303 	lsr.w	r3, r2, r3
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca8:	e01e      	b.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccaa:	4b74      	ldr	r3, [pc, #464]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccb6:	d106      	bne.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ccb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccbe:	d102      	bne.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ccc0:	4b70      	ldr	r3, [pc, #448]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ccc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccc4:	e010      	b.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccc6:	4b6d      	ldr	r3, [pc, #436]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccd2:	d106      	bne.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ccd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccda:	d102      	bne.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccdc:	4b6a      	ldr	r3, [pc, #424]	; (800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ccde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cce0:	e002      	b.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cce6:	e122      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cce8:	e121      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccee:	e11e      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ccf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ccf8:	430b      	orrs	r3, r1
 800ccfa:	d133      	bne.n	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ccfc:	4b5f      	ldr	r3, [pc, #380]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd04:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d004      	beq.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd12:	d012      	beq.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cd14:	e023      	b.n	800cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd16:	4b59      	ldr	r3, [pc, #356]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd22:	d107      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f000 fbc7 	bl	800d4bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd32:	e0fc      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd38:	e0f9      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd3a:	4b50      	ldr	r3, [pc, #320]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd46:	d107      	bne.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd48:	f107 0318 	add.w	r3, r7, #24
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 f90d 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd56:	e0ea      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd5c:	e0e7      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd62:	e0e4      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cd64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd68:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cd6c:	430b      	orrs	r3, r1
 800cd6e:	f040 808d 	bne.w	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cd72:	4b42      	ldr	r3, [pc, #264]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd76:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cd7a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd82:	d06b      	beq.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd8a:	d874      	bhi.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd92:	d056      	beq.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd9a:	d86c      	bhi.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cda2:	d03b      	beq.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cdaa:	d864      	bhi.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdb2:	d021      	beq.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdba:	d85c      	bhi.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d004      	beq.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdc8:	d004      	beq.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cdca:	e054      	b.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cdcc:	f000 f8b8 	bl	800cf40 <HAL_RCCEx_GetD3PCLK1Freq>
 800cdd0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cdd2:	e0ac      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdd4:	4b29      	ldr	r3, [pc, #164]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cde0:	d107      	bne.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cde2:	f107 0318 	add.w	r3, r7, #24
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 f8c0 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdf0:	e09d      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf6:	e09a      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdf8:	4b20      	ldr	r3, [pc, #128]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce04:	d107      	bne.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce06:	f107 030c 	add.w	r3, r7, #12
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 fa02 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce14:	e08b      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce1a:	e088      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce1c:	4b17      	ldr	r3, [pc, #92]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f003 0304 	and.w	r3, r3, #4
 800ce24:	2b04      	cmp	r3, #4
 800ce26:	d109      	bne.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce28:	4b14      	ldr	r3, [pc, #80]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	08db      	lsrs	r3, r3, #3
 800ce2e:	f003 0303 	and.w	r3, r3, #3
 800ce32:	4a13      	ldr	r2, [pc, #76]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ce34:	fa22 f303 	lsr.w	r3, r2, r3
 800ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce3a:	e078      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce40:	e075      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ce42:	4b0e      	ldr	r3, [pc, #56]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce4e:	d102      	bne.n	800ce56 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ce50:	4b0c      	ldr	r3, [pc, #48]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ce52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce54:	e06b      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce5a:	e068      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce5c:	4b07      	ldr	r3, [pc, #28]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce68:	d102      	bne.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ce6a:	4b07      	ldr	r3, [pc, #28]	; (800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce6e:	e05e      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce74:	e05b      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce7a:	e058      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ce7c:	58024400 	.word	0x58024400
 800ce80:	03d09000 	.word	0x03d09000
 800ce84:	003d0900 	.word	0x003d0900
 800ce88:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ce8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce90:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ce94:	430b      	orrs	r3, r1
 800ce96:	d148      	bne.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ce98:	4b27      	ldr	r3, [pc, #156]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cea0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cea8:	d02a      	beq.n	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ceaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceb0:	d838      	bhi.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d004      	beq.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cebe:	d00d      	beq.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cec0:	e030      	b.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cec2:	4b1d      	ldr	r3, [pc, #116]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cece:	d102      	bne.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ced0:	4b1a      	ldr	r3, [pc, #104]	; (800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ced2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced4:	e02b      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceda:	e028      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cedc:	4b16      	ldr	r3, [pc, #88]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cee8:	d107      	bne.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ceea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 fae4 	bl	800d4bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cef8:	e019      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cefe:	e016      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf00:	4b0d      	ldr	r3, [pc, #52]	; (800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf0c:	d107      	bne.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf0e:	f107 0318 	add.w	r3, r7, #24
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 f82a 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf1c:	e007      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf22:	e004      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf28:	e001      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cf2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3740      	adds	r7, #64	; 0x40
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	58024400 	.word	0x58024400
 800cf3c:	017d7840 	.word	0x017d7840

0800cf40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cf44:	f7fd ffd4 	bl	800aef0 <HAL_RCC_GetHCLKFreq>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	4b06      	ldr	r3, [pc, #24]	; (800cf64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	091b      	lsrs	r3, r3, #4
 800cf50:	f003 0307 	and.w	r3, r3, #7
 800cf54:	4904      	ldr	r1, [pc, #16]	; (800cf68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cf56:	5ccb      	ldrb	r3, [r1, r3]
 800cf58:	f003 031f 	and.w	r3, r3, #31
 800cf5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	58024400 	.word	0x58024400
 800cf68:	08017910 	.word	0x08017910

0800cf6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b089      	sub	sp, #36	; 0x24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf74:	4ba1      	ldr	r3, [pc, #644]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf78:	f003 0303 	and.w	r3, r3, #3
 800cf7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cf7e:	4b9f      	ldr	r3, [pc, #636]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf82:	0b1b      	lsrs	r3, r3, #12
 800cf84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cf8a:	4b9c      	ldr	r3, [pc, #624]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8e:	091b      	lsrs	r3, r3, #4
 800cf90:	f003 0301 	and.w	r3, r3, #1
 800cf94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cf96:	4b99      	ldr	r3, [pc, #612]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf9a:	08db      	lsrs	r3, r3, #3
 800cf9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfa0:	693a      	ldr	r2, [r7, #16]
 800cfa2:	fb02 f303 	mul.w	r3, r2, r3
 800cfa6:	ee07 3a90 	vmov	s15, r3
 800cfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 8111 	beq.w	800d1dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	f000 8083 	beq.w	800d0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	f200 80a1 	bhi.w	800d10c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d003      	beq.n	800cfd8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d056      	beq.n	800d084 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cfd6:	e099      	b.n	800d10c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfd8:	4b88      	ldr	r3, [pc, #544]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 0320 	and.w	r3, r3, #32
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d02d      	beq.n	800d040 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfe4:	4b85      	ldr	r3, [pc, #532]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	08db      	lsrs	r3, r3, #3
 800cfea:	f003 0303 	and.w	r3, r3, #3
 800cfee:	4a84      	ldr	r2, [pc, #528]	; (800d200 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cff0:	fa22 f303 	lsr.w	r3, r2, r3
 800cff4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	ee07 3a90 	vmov	s15, r3
 800cffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	ee07 3a90 	vmov	s15, r3
 800d006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d00e:	4b7b      	ldr	r3, [pc, #492]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d016:	ee07 3a90 	vmov	s15, r3
 800d01a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d01e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d022:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d02a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d02e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d03a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d03e:	e087      	b.n	800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	ee07 3a90 	vmov	s15, r3
 800d046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d04a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d208 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d04e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d052:	4b6a      	ldr	r3, [pc, #424]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d05a:	ee07 3a90 	vmov	s15, r3
 800d05e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d062:	ed97 6a03 	vldr	s12, [r7, #12]
 800d066:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d06a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d06e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d07a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d07e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d082:	e065      	b.n	800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	ee07 3a90 	vmov	s15, r3
 800d08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d08e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d096:	4b59      	ldr	r3, [pc, #356]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09e:	ee07 3a90 	vmov	s15, r3
 800d0a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0c6:	e043      	b.n	800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d0d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0da:	4b48      	ldr	r3, [pc, #288]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e2:	ee07 3a90 	vmov	s15, r3
 800d0e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d102:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d10a:	e021      	b.n	800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	ee07 3a90 	vmov	s15, r3
 800d112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d116:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d11e:	4b37      	ldr	r3, [pc, #220]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d126:	ee07 3a90 	vmov	s15, r3
 800d12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d12e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d132:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d13e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d14a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d14e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d150:	4b2a      	ldr	r3, [pc, #168]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d154:	0a5b      	lsrs	r3, r3, #9
 800d156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d15a:	ee07 3a90 	vmov	s15, r3
 800d15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d16a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d16e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d176:	ee17 2a90 	vmov	r2, s15
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d17e:	4b1f      	ldr	r3, [pc, #124]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d182:	0c1b      	lsrs	r3, r3, #16
 800d184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d188:	ee07 3a90 	vmov	s15, r3
 800d18c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d194:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d198:	edd7 6a07 	vldr	s13, [r7, #28]
 800d19c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1a4:	ee17 2a90 	vmov	r2, s15
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d1ac:	4b13      	ldr	r3, [pc, #76]	; (800d1fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b0:	0e1b      	lsrs	r3, r3, #24
 800d1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1b6:	ee07 3a90 	vmov	s15, r3
 800d1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1d2:	ee17 2a90 	vmov	r2, s15
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d1da:	e008      	b.n	800d1ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	609a      	str	r2, [r3, #8]
}
 800d1ee:	bf00      	nop
 800d1f0:	3724      	adds	r7, #36	; 0x24
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	58024400 	.word	0x58024400
 800d200:	03d09000 	.word	0x03d09000
 800d204:	46000000 	.word	0x46000000
 800d208:	4c742400 	.word	0x4c742400
 800d20c:	4a742400 	.word	0x4a742400
 800d210:	4bbebc20 	.word	0x4bbebc20

0800d214 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d214:	b480      	push	{r7}
 800d216:	b089      	sub	sp, #36	; 0x24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d21c:	4ba1      	ldr	r3, [pc, #644]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d220:	f003 0303 	and.w	r3, r3, #3
 800d224:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d226:	4b9f      	ldr	r3, [pc, #636]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22a:	0d1b      	lsrs	r3, r3, #20
 800d22c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d230:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d232:	4b9c      	ldr	r3, [pc, #624]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d236:	0a1b      	lsrs	r3, r3, #8
 800d238:	f003 0301 	and.w	r3, r3, #1
 800d23c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d23e:	4b99      	ldr	r3, [pc, #612]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d242:	08db      	lsrs	r3, r3, #3
 800d244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	fb02 f303 	mul.w	r3, r2, r3
 800d24e:	ee07 3a90 	vmov	s15, r3
 800d252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d256:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 8111 	beq.w	800d484 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	2b02      	cmp	r3, #2
 800d266:	f000 8083 	beq.w	800d370 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	f200 80a1 	bhi.w	800d3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d003      	beq.n	800d280 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d056      	beq.n	800d32c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d27e:	e099      	b.n	800d3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d280:	4b88      	ldr	r3, [pc, #544]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f003 0320 	and.w	r3, r3, #32
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d02d      	beq.n	800d2e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d28c:	4b85      	ldr	r3, [pc, #532]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	08db      	lsrs	r3, r3, #3
 800d292:	f003 0303 	and.w	r3, r3, #3
 800d296:	4a84      	ldr	r2, [pc, #528]	; (800d4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d298:	fa22 f303 	lsr.w	r3, r2, r3
 800d29c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	ee07 3a90 	vmov	s15, r3
 800d2a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	ee07 3a90 	vmov	s15, r3
 800d2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2b6:	4b7b      	ldr	r3, [pc, #492]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2be:	ee07 3a90 	vmov	s15, r3
 800d2c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d4ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d2e6:	e087      	b.n	800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	ee07 3a90 	vmov	s15, r3
 800d2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d2f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2fa:	4b6a      	ldr	r3, [pc, #424]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d302:	ee07 3a90 	vmov	s15, r3
 800d306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d30a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d30e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d4ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d31a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d31e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d32a:	e065      	b.n	800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	ee07 3a90 	vmov	s15, r3
 800d332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d336:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d33e:	4b59      	ldr	r3, [pc, #356]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d346:	ee07 3a90 	vmov	s15, r3
 800d34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d34e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d352:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d4ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d36a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d36e:	e043      	b.n	800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	ee07 3a90 	vmov	s15, r3
 800d376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d382:	4b48      	ldr	r3, [pc, #288]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d38a:	ee07 3a90 	vmov	s15, r3
 800d38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d392:	ed97 6a03 	vldr	s12, [r7, #12]
 800d396:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d4ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3b2:	e021      	b.n	800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	ee07 3a90 	vmov	s15, r3
 800d3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3c6:	4b37      	ldr	r3, [pc, #220]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ce:	ee07 3a90 	vmov	s15, r3
 800d3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d4ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d3f8:	4b2a      	ldr	r3, [pc, #168]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3fc:	0a5b      	lsrs	r3, r3, #9
 800d3fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d402:	ee07 3a90 	vmov	s15, r3
 800d406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d40a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d40e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d412:	edd7 6a07 	vldr	s13, [r7, #28]
 800d416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d41a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d41e:	ee17 2a90 	vmov	r2, s15
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d426:	4b1f      	ldr	r3, [pc, #124]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42a:	0c1b      	lsrs	r3, r3, #16
 800d42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d430:	ee07 3a90 	vmov	s15, r3
 800d434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d43c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d440:	edd7 6a07 	vldr	s13, [r7, #28]
 800d444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d44c:	ee17 2a90 	vmov	r2, s15
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d454:	4b13      	ldr	r3, [pc, #76]	; (800d4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d458:	0e1b      	lsrs	r3, r3, #24
 800d45a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d45e:	ee07 3a90 	vmov	s15, r3
 800d462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d46a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d46e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d47a:	ee17 2a90 	vmov	r2, s15
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d482:	e008      	b.n	800d496 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	609a      	str	r2, [r3, #8]
}
 800d496:	bf00      	nop
 800d498:	3724      	adds	r7, #36	; 0x24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	58024400 	.word	0x58024400
 800d4a8:	03d09000 	.word	0x03d09000
 800d4ac:	46000000 	.word	0x46000000
 800d4b0:	4c742400 	.word	0x4c742400
 800d4b4:	4a742400 	.word	0x4a742400
 800d4b8:	4bbebc20 	.word	0x4bbebc20

0800d4bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b089      	sub	sp, #36	; 0x24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d4c4:	4ba0      	ldr	r3, [pc, #640]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c8:	f003 0303 	and.w	r3, r3, #3
 800d4cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d4ce:	4b9e      	ldr	r3, [pc, #632]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4d2:	091b      	lsrs	r3, r3, #4
 800d4d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d4da:	4b9b      	ldr	r3, [pc, #620]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d4e4:	4b98      	ldr	r3, [pc, #608]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e8:	08db      	lsrs	r3, r3, #3
 800d4ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	fb02 f303 	mul.w	r3, r2, r3
 800d4f4:	ee07 3a90 	vmov	s15, r3
 800d4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 8111 	beq.w	800d72a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	f000 8083 	beq.w	800d616 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	2b02      	cmp	r3, #2
 800d514:	f200 80a1 	bhi.w	800d65a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d003      	beq.n	800d526 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d056      	beq.n	800d5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d524:	e099      	b.n	800d65a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d526:	4b88      	ldr	r3, [pc, #544]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f003 0320 	and.w	r3, r3, #32
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d02d      	beq.n	800d58e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d532:	4b85      	ldr	r3, [pc, #532]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	08db      	lsrs	r3, r3, #3
 800d538:	f003 0303 	and.w	r3, r3, #3
 800d53c:	4a83      	ldr	r2, [pc, #524]	; (800d74c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d53e:	fa22 f303 	lsr.w	r3, r2, r3
 800d542:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	ee07 3a90 	vmov	s15, r3
 800d54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	ee07 3a90 	vmov	s15, r3
 800d554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d55c:	4b7a      	ldr	r3, [pc, #488]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d564:	ee07 3a90 	vmov	s15, r3
 800d568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d56c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d570:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d57c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d584:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d588:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d58c:	e087      	b.n	800d69e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	ee07 3a90 	vmov	s15, r3
 800d594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d598:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d754 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d59c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5a0:	4b69      	ldr	r3, [pc, #420]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5a8:	ee07 3a90 	vmov	s15, r3
 800d5ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5d0:	e065      	b.n	800d69e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	ee07 3a90 	vmov	s15, r3
 800d5d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d758 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d5e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5e4:	4b58      	ldr	r3, [pc, #352]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ec:	ee07 3a90 	vmov	s15, r3
 800d5f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d60c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d614:	e043      	b.n	800d69e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	ee07 3a90 	vmov	s15, r3
 800d61c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d620:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d75c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d628:	4b47      	ldr	r3, [pc, #284]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d62c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d630:	ee07 3a90 	vmov	s15, r3
 800d634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d638:	ed97 6a03 	vldr	s12, [r7, #12]
 800d63c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d64c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d650:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d658:	e021      	b.n	800d69e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	ee07 3a90 	vmov	s15, r3
 800d660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d664:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d754 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d66c:	4b36      	ldr	r3, [pc, #216]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d674:	ee07 3a90 	vmov	s15, r3
 800d678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d67c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d680:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d68c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d694:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d698:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d69c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d69e:	4b2a      	ldr	r3, [pc, #168]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a2:	0a5b      	lsrs	r3, r3, #9
 800d6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6c4:	ee17 2a90 	vmov	r2, s15
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d6cc:	4b1e      	ldr	r3, [pc, #120]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d0:	0c1b      	lsrs	r3, r3, #16
 800d6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6d6:	ee07 3a90 	vmov	s15, r3
 800d6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6f2:	ee17 2a90 	vmov	r2, s15
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d6fa:	4b13      	ldr	r3, [pc, #76]	; (800d748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6fe:	0e1b      	lsrs	r3, r3, #24
 800d700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d704:	ee07 3a90 	vmov	s15, r3
 800d708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d70c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d710:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d714:	edd7 6a07 	vldr	s13, [r7, #28]
 800d718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d71c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d720:	ee17 2a90 	vmov	r2, s15
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d728:	e008      	b.n	800d73c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	609a      	str	r2, [r3, #8]
}
 800d73c:	bf00      	nop
 800d73e:	3724      	adds	r7, #36	; 0x24
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	58024400 	.word	0x58024400
 800d74c:	03d09000 	.word	0x03d09000
 800d750:	46000000 	.word	0x46000000
 800d754:	4c742400 	.word	0x4c742400
 800d758:	4a742400 	.word	0x4a742400
 800d75c:	4bbebc20 	.word	0x4bbebc20

0800d760 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d76e:	4b53      	ldr	r3, [pc, #332]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d772:	f003 0303 	and.w	r3, r3, #3
 800d776:	2b03      	cmp	r3, #3
 800d778:	d101      	bne.n	800d77e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d77a:	2301      	movs	r3, #1
 800d77c:	e099      	b.n	800d8b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d77e:	4b4f      	ldr	r3, [pc, #316]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a4e      	ldr	r2, [pc, #312]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d784:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d78a:	f7f6 fc53 	bl	8004034 <HAL_GetTick>
 800d78e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d790:	e008      	b.n	800d7a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d792:	f7f6 fc4f 	bl	8004034 <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d901      	bls.n	800d7a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	e086      	b.n	800d8b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d7a4:	4b45      	ldr	r3, [pc, #276]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1f0      	bne.n	800d792 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d7b0:	4b42      	ldr	r3, [pc, #264]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	031b      	lsls	r3, r3, #12
 800d7be:	493f      	ldr	r1, [pc, #252]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	628b      	str	r3, [r1, #40]	; 0x28
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	025b      	lsls	r3, r3, #9
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	431a      	orrs	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	68db      	ldr	r3, [r3, #12]
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	041b      	lsls	r3, r3, #16
 800d7e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7e6:	431a      	orrs	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	691b      	ldr	r3, [r3, #16]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	061b      	lsls	r3, r3, #24
 800d7f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7f4:	4931      	ldr	r1, [pc, #196]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d7fa:	4b30      	ldr	r3, [pc, #192]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	695b      	ldr	r3, [r3, #20]
 800d806:	492d      	ldr	r1, [pc, #180]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d808:	4313      	orrs	r3, r2
 800d80a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d80c:	4b2b      	ldr	r3, [pc, #172]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d810:	f023 0220 	bic.w	r2, r3, #32
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	4928      	ldr	r1, [pc, #160]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d81a:	4313      	orrs	r3, r2
 800d81c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d81e:	4b27      	ldr	r3, [pc, #156]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d822:	4a26      	ldr	r2, [pc, #152]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d824:	f023 0310 	bic.w	r3, r3, #16
 800d828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d82a:	4b24      	ldr	r3, [pc, #144]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d82c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d82e:	4b24      	ldr	r3, [pc, #144]	; (800d8c0 <RCCEx_PLL2_Config+0x160>)
 800d830:	4013      	ands	r3, r2
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	69d2      	ldr	r2, [r2, #28]
 800d836:	00d2      	lsls	r2, r2, #3
 800d838:	4920      	ldr	r1, [pc, #128]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d83a:	4313      	orrs	r3, r2
 800d83c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d83e:	4b1f      	ldr	r3, [pc, #124]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d842:	4a1e      	ldr	r2, [pc, #120]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d844:	f043 0310 	orr.w	r3, r3, #16
 800d848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d106      	bne.n	800d85e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d850:	4b1a      	ldr	r3, [pc, #104]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	4a19      	ldr	r2, [pc, #100]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d85a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d85c:	e00f      	b.n	800d87e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d106      	bne.n	800d872 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d864:	4b15      	ldr	r3, [pc, #84]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d868:	4a14      	ldr	r2, [pc, #80]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d86a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d86e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d870:	e005      	b.n	800d87e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d872:	4b12      	ldr	r3, [pc, #72]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d876:	4a11      	ldr	r2, [pc, #68]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d87c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d87e:	4b0f      	ldr	r3, [pc, #60]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a0e      	ldr	r2, [pc, #56]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d88a:	f7f6 fbd3 	bl	8004034 <HAL_GetTick>
 800d88e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d890:	e008      	b.n	800d8a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d892:	f7f6 fbcf 	bl	8004034 <HAL_GetTick>
 800d896:	4602      	mov	r2, r0
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d901      	bls.n	800d8a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e006      	b.n	800d8b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d8a4:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <RCCEx_PLL2_Config+0x15c>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d0f0      	beq.n	800d892 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	58024400 	.word	0x58024400
 800d8c0:	ffff0007 	.word	0xffff0007

0800d8c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d8d2:	4b53      	ldr	r3, [pc, #332]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d6:	f003 0303 	and.w	r3, r3, #3
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d101      	bne.n	800d8e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e099      	b.n	800da16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d8e2:	4b4f      	ldr	r3, [pc, #316]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a4e      	ldr	r2, [pc, #312]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d8e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8ee:	f7f6 fba1 	bl	8004034 <HAL_GetTick>
 800d8f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8f4:	e008      	b.n	800d908 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d8f6:	f7f6 fb9d 	bl	8004034 <HAL_GetTick>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	2b02      	cmp	r3, #2
 800d902:	d901      	bls.n	800d908 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d904:	2303      	movs	r3, #3
 800d906:	e086      	b.n	800da16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d908:	4b45      	ldr	r3, [pc, #276]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1f0      	bne.n	800d8f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d914:	4b42      	ldr	r3, [pc, #264]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d918:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	051b      	lsls	r3, r3, #20
 800d922:	493f      	ldr	r1, [pc, #252]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d924:	4313      	orrs	r3, r2
 800d926:	628b      	str	r3, [r1, #40]	; 0x28
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	3b01      	subs	r3, #1
 800d938:	025b      	lsls	r3, r3, #9
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	431a      	orrs	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	3b01      	subs	r3, #1
 800d944:	041b      	lsls	r3, r3, #16
 800d946:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d94a:	431a      	orrs	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	691b      	ldr	r3, [r3, #16]
 800d950:	3b01      	subs	r3, #1
 800d952:	061b      	lsls	r3, r3, #24
 800d954:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d958:	4931      	ldr	r1, [pc, #196]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d95a:	4313      	orrs	r3, r2
 800d95c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d95e:	4b30      	ldr	r3, [pc, #192]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d962:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	695b      	ldr	r3, [r3, #20]
 800d96a:	492d      	ldr	r1, [pc, #180]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d96c:	4313      	orrs	r3, r2
 800d96e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d970:	4b2b      	ldr	r3, [pc, #172]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d974:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	4928      	ldr	r1, [pc, #160]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d97e:	4313      	orrs	r3, r2
 800d980:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d982:	4b27      	ldr	r3, [pc, #156]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d986:	4a26      	ldr	r2, [pc, #152]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d98c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d98e:	4b24      	ldr	r3, [pc, #144]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d992:	4b24      	ldr	r3, [pc, #144]	; (800da24 <RCCEx_PLL3_Config+0x160>)
 800d994:	4013      	ands	r3, r2
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	69d2      	ldr	r2, [r2, #28]
 800d99a:	00d2      	lsls	r2, r2, #3
 800d99c:	4920      	ldr	r1, [pc, #128]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d9a2:	4b1f      	ldr	r3, [pc, #124]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a6:	4a1e      	ldr	r2, [pc, #120]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d106      	bne.n	800d9c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d9b4:	4b1a      	ldr	r3, [pc, #104]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b8:	4a19      	ldr	r2, [pc, #100]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d9be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9c0:	e00f      	b.n	800d9e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d106      	bne.n	800d9d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d9c8:	4b15      	ldr	r3, [pc, #84]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	4a14      	ldr	r2, [pc, #80]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9d4:	e005      	b.n	800d9e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d9d6:	4b12      	ldr	r3, [pc, #72]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9da:	4a11      	ldr	r2, [pc, #68]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d9e2:	4b0f      	ldr	r3, [pc, #60]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a0e      	ldr	r2, [pc, #56]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800d9e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9ee:	f7f6 fb21 	bl	8004034 <HAL_GetTick>
 800d9f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9f4:	e008      	b.n	800da08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d9f6:	f7f6 fb1d 	bl	8004034 <HAL_GetTick>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	1ad3      	subs	r3, r2, r3
 800da00:	2b02      	cmp	r3, #2
 800da02:	d901      	bls.n	800da08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da04:	2303      	movs	r3, #3
 800da06:	e006      	b.n	800da16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da08:	4b05      	ldr	r3, [pc, #20]	; (800da20 <RCCEx_PLL3_Config+0x15c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da10:	2b00      	cmp	r3, #0
 800da12:	d0f0      	beq.n	800d9f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da14:	7bfb      	ldrb	r3, [r7, #15]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	58024400 	.word	0x58024400
 800da24:	ffff0007 	.word	0xffff0007

0800da28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d071      	beq.n	800db1e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800da40:	b2db      	uxtb	r3, r3
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7f5 fd88 	bl	8003564 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2202      	movs	r2, #2
 800da58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	f003 0310 	and.w	r3, r3, #16
 800da66:	2b10      	cmp	r3, #16
 800da68:	d050      	beq.n	800db0c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	22ca      	movs	r2, #202	; 0xca
 800da70:	625a      	str	r2, [r3, #36]	; 0x24
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2253      	movs	r2, #83	; 0x53
 800da78:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fa4a 	bl	800df14 <RTC_EnterInitMode>
 800da80:	4603      	mov	r3, r0
 800da82:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800da84:	7bfb      	ldrb	r3, [r7, #15]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d124      	bne.n	800dad4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	6899      	ldr	r1, [r3, #8]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	4b24      	ldr	r3, [pc, #144]	; (800db28 <HAL_RTC_Init+0x100>)
 800da96:	400b      	ands	r3, r1
 800da98:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6899      	ldr	r1, [r3, #8]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	431a      	orrs	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	699b      	ldr	r3, [r3, #24]
 800daae:	431a      	orrs	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	430a      	orrs	r2, r1
 800dab6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	0419      	lsls	r1, r3, #16
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68da      	ldr	r2, [r3, #12]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	430a      	orrs	r2, r1
 800dac8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fa56 	bl	800df7c <RTC_ExitInitMode>
 800dad0:	4603      	mov	r3, r0
 800dad2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800dad4:	7bfb      	ldrb	r3, [r7, #15]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d113      	bne.n	800db02 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f022 0203 	bic.w	r2, r2, #3
 800dae8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	69da      	ldr	r2, [r3, #28]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	695b      	ldr	r3, [r3, #20]
 800daf8:	431a      	orrs	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	430a      	orrs	r2, r1
 800db00:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	22ff      	movs	r2, #255	; 0xff
 800db08:	625a      	str	r2, [r3, #36]	; 0x24
 800db0a:	e001      	b.n	800db10 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800db0c:	2300      	movs	r3, #0
 800db0e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800db10:	7bfb      	ldrb	r3, [r7, #15]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d103      	bne.n	800db1e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2201      	movs	r2, #1
 800db1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	ff8fffbf 	.word	0xff8fffbf

0800db2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800db2c:	b590      	push	{r4, r7, lr}
 800db2e:	b087      	sub	sp, #28
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d101      	bne.n	800db46 <HAL_RTC_SetTime+0x1a>
 800db42:	2302      	movs	r3, #2
 800db44:	e089      	b.n	800dc5a <HAL_RTC_SetTime+0x12e>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2202      	movs	r2, #2
 800db52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	22ca      	movs	r2, #202	; 0xca
 800db5c:	625a      	str	r2, [r3, #36]	; 0x24
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2253      	movs	r2, #83	; 0x53
 800db64:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f000 f9d4 	bl	800df14 <RTC_EnterInitMode>
 800db6c:	4603      	mov	r3, r0
 800db6e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800db70:	7cfb      	ldrb	r3, [r7, #19]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d161      	bne.n	800dc3a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d126      	bne.n	800dbca <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db86:	2b00      	cmp	r3, #0
 800db88:	d102      	bne.n	800db90 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2200      	movs	r2, #0
 800db8e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	4618      	mov	r0, r3
 800db96:	f000 fa2f 	bl	800dff8 <RTC_ByteToBcd2>
 800db9a:	4603      	mov	r3, r0
 800db9c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	785b      	ldrb	r3, [r3, #1]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f000 fa28 	bl	800dff8 <RTC_ByteToBcd2>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	789b      	ldrb	r3, [r3, #2]
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 fa20 	bl	800dff8 <RTC_ByteToBcd2>
 800dbb8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dbba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	78db      	ldrb	r3, [r3, #3]
 800dbc2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	617b      	str	r3, [r7, #20]
 800dbc8:	e018      	b.n	800dbfc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d102      	bne.n	800dbde <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	785b      	ldrb	r3, [r3, #1]
 800dbe8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dbf0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	78db      	ldrb	r3, [r3, #3]
 800dbf6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	6979      	ldr	r1, [r7, #20]
 800dc02:	4b18      	ldr	r3, [pc, #96]	; (800dc64 <HAL_RTC_SetTime+0x138>)
 800dc04:	400b      	ands	r3, r1
 800dc06:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	689a      	ldr	r2, [r3, #8]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dc16:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	6899      	ldr	r1, [r3, #8]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	68da      	ldr	r2, [r3, #12]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	691b      	ldr	r3, [r3, #16]
 800dc26:	431a      	orrs	r2, r3
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	430a      	orrs	r2, r1
 800dc2e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f000 f9a3 	bl	800df7c <RTC_ExitInitMode>
 800dc36:	4603      	mov	r3, r0
 800dc38:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	22ff      	movs	r2, #255	; 0xff
 800dc40:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dc42:	7cfb      	ldrb	r3, [r7, #19]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d103      	bne.n	800dc50 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dc58:	7cfb      	ldrb	r3, [r7, #19]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	371c      	adds	r7, #28
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd90      	pop	{r4, r7, pc}
 800dc62:	bf00      	nop
 800dc64:	007f7f7f 	.word	0x007f7f7f

0800dc68 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	4b22      	ldr	r3, [pc, #136]	; (800dd1c <HAL_RTC_GetTime+0xb4>)
 800dc94:	4013      	ands	r3, r2
 800dc96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	0c1b      	lsrs	r3, r3, #16
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	0a1b      	lsrs	r3, r3, #8
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	0d9b      	lsrs	r3, r3, #22
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	f003 0301 	and.w	r3, r3, #1
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d11a      	bne.n	800dd12 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f000 f9a9 	bl	800e038 <RTC_Bcd2ToByte>
 800dce6:	4603      	mov	r3, r0
 800dce8:	461a      	mov	r2, r3
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	785b      	ldrb	r3, [r3, #1]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 f9a0 	bl	800e038 <RTC_Bcd2ToByte>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	789b      	ldrb	r3, [r3, #2]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 f997 	bl	800e038 <RTC_Bcd2ToByte>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3718      	adds	r7, #24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	007f7f7f 	.word	0x007f7f7f

0800dd20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dd20:	b590      	push	{r4, r7, lr}
 800dd22:	b087      	sub	sp, #28
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d101      	bne.n	800dd3a <HAL_RTC_SetDate+0x1a>
 800dd36:	2302      	movs	r3, #2
 800dd38:	e073      	b.n	800de22 <HAL_RTC_SetDate+0x102>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2202      	movs	r2, #2
 800dd46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10e      	bne.n	800dd6e <HAL_RTC_SetDate+0x4e>
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	785b      	ldrb	r3, [r3, #1]
 800dd54:	f003 0310 	and.w	r3, r3, #16
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d008      	beq.n	800dd6e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	785b      	ldrb	r3, [r3, #1]
 800dd60:	f023 0310 	bic.w	r3, r3, #16
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	330a      	adds	r3, #10
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d11c      	bne.n	800ddae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	78db      	ldrb	r3, [r3, #3]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f000 f93d 	bl	800dff8 <RTC_ByteToBcd2>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	785b      	ldrb	r3, [r3, #1]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f000 f936 	bl	800dff8 <RTC_ByteToBcd2>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd90:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	789b      	ldrb	r3, [r3, #2]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 f92e 	bl	800dff8 <RTC_ByteToBcd2>
 800dd9c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dd9e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	e00e      	b.n	800ddcc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	78db      	ldrb	r3, [r3, #3]
 800ddb2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	785b      	ldrb	r3, [r3, #1]
 800ddb8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ddba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ddc0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	22ca      	movs	r2, #202	; 0xca
 800ddd2:	625a      	str	r2, [r3, #36]	; 0x24
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2253      	movs	r2, #83	; 0x53
 800ddda:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f000 f899 	bl	800df14 <RTC_EnterInitMode>
 800dde2:	4603      	mov	r3, r0
 800dde4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dde6:	7cfb      	ldrb	r3, [r7, #19]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10a      	bne.n	800de02 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	6979      	ldr	r1, [r7, #20]
 800ddf2:	4b0e      	ldr	r3, [pc, #56]	; (800de2c <HAL_RTC_SetDate+0x10c>)
 800ddf4:	400b      	ands	r3, r1
 800ddf6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f000 f8bf 	bl	800df7c <RTC_ExitInitMode>
 800ddfe:	4603      	mov	r3, r0
 800de00:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	22ff      	movs	r2, #255	; 0xff
 800de08:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800de0a:	7cfb      	ldrb	r3, [r7, #19]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d103      	bne.n	800de18 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800de20:	7cfb      	ldrb	r3, [r7, #19]


}
 800de22:	4618      	mov	r0, r3
 800de24:	371c      	adds	r7, #28
 800de26:	46bd      	mov	sp, r7
 800de28:	bd90      	pop	{r4, r7, pc}
 800de2a:	bf00      	nop
 800de2c:	00ffff3f 	.word	0x00ffff3f

0800de30 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	685a      	ldr	r2, [r3, #4]
 800de42:	4b21      	ldr	r3, [pc, #132]	; (800dec8 <HAL_RTC_GetDate+0x98>)
 800de44:	4013      	ands	r3, r2
 800de46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	0c1b      	lsrs	r3, r3, #16
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	0a1b      	lsrs	r3, r3, #8
 800de56:	b2db      	uxtb	r3, r3
 800de58:	f003 031f 	and.w	r3, r3, #31
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	b2db      	uxtb	r3, r3
 800de66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	0b5b      	lsrs	r3, r3, #13
 800de74:	b2db      	uxtb	r3, r3
 800de76:	f003 0307 	and.w	r3, r3, #7
 800de7a:	b2da      	uxtb	r2, r3
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d11a      	bne.n	800debc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	78db      	ldrb	r3, [r3, #3]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 f8d4 	bl	800e038 <RTC_Bcd2ToByte>
 800de90:	4603      	mov	r3, r0
 800de92:	461a      	mov	r2, r3
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	785b      	ldrb	r3, [r3, #1]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f000 f8cb 	bl	800e038 <RTC_Bcd2ToByte>
 800dea2:	4603      	mov	r3, r0
 800dea4:	461a      	mov	r2, r3
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	789b      	ldrb	r3, [r3, #2]
 800deae:	4618      	mov	r0, r3
 800deb0:	f000 f8c2 	bl	800e038 <RTC_Bcd2ToByte>
 800deb4:	4603      	mov	r3, r0
 800deb6:	461a      	mov	r2, r3
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3718      	adds	r7, #24
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	00ffff3f 	.word	0x00ffff3f

0800decc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a0d      	ldr	r2, [pc, #52]	; (800df10 <HAL_RTC_WaitForSynchro+0x44>)
 800deda:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dedc:	f7f6 f8aa 	bl	8004034 <HAL_GetTick>
 800dee0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dee2:	e009      	b.n	800def8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dee4:	f7f6 f8a6 	bl	8004034 <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800def2:	d901      	bls.n	800def8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800def4:	2303      	movs	r3, #3
 800def6:	e007      	b.n	800df08 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	f003 0320 	and.w	r3, r3, #32
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0ee      	beq.n	800dee4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3710      	adds	r7, #16
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	0003ff5f 	.word	0x0003ff5f

0800df14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d120      	bne.n	800df70 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800df38:	f7f6 f87c 	bl	8004034 <HAL_GetTick>
 800df3c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800df3e:	e00d      	b.n	800df5c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800df40:	f7f6 f878 	bl	8004034 <HAL_GetTick>
 800df44:	4602      	mov	r2, r0
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df4e:	d905      	bls.n	800df5c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800df50:	2303      	movs	r3, #3
 800df52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2203      	movs	r2, #3
 800df58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df66:	2b00      	cmp	r3, #0
 800df68:	d102      	bne.n	800df70 <RTC_EnterInitMode+0x5c>
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	2b03      	cmp	r3, #3
 800df6e:	d1e7      	bne.n	800df40 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800df70:	7bfb      	ldrb	r3, [r7, #15]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
	...

0800df7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df84:	2300      	movs	r3, #0
 800df86:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800df88:	4b1a      	ldr	r3, [pc, #104]	; (800dff4 <RTC_ExitInitMode+0x78>)
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	4a19      	ldr	r2, [pc, #100]	; (800dff4 <RTC_ExitInitMode+0x78>)
 800df8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df92:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800df94:	4b17      	ldr	r3, [pc, #92]	; (800dff4 <RTC_ExitInitMode+0x78>)
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	f003 0320 	and.w	r3, r3, #32
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d10c      	bne.n	800dfba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f7ff ff93 	bl	800decc <HAL_RTC_WaitForSynchro>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d01e      	beq.n	800dfea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2203      	movs	r2, #3
 800dfb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	73fb      	strb	r3, [r7, #15]
 800dfb8:	e017      	b.n	800dfea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dfba:	4b0e      	ldr	r3, [pc, #56]	; (800dff4 <RTC_ExitInitMode+0x78>)
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	4a0d      	ldr	r2, [pc, #52]	; (800dff4 <RTC_ExitInitMode+0x78>)
 800dfc0:	f023 0320 	bic.w	r3, r3, #32
 800dfc4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff ff80 	bl	800decc <HAL_RTC_WaitForSynchro>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d005      	beq.n	800dfde <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2203      	movs	r2, #3
 800dfd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dfda:	2303      	movs	r3, #3
 800dfdc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dfde:	4b05      	ldr	r3, [pc, #20]	; (800dff4 <RTC_ExitInitMode+0x78>)
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	4a04      	ldr	r2, [pc, #16]	; (800dff4 <RTC_ExitInitMode+0x78>)
 800dfe4:	f043 0320 	orr.w	r3, r3, #32
 800dfe8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3710      	adds	r7, #16
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	58004000 	.word	0x58004000

0800dff8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	4603      	mov	r3, r0
 800e000:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e002:	2300      	movs	r3, #0
 800e004:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e006:	79fb      	ldrb	r3, [r7, #7]
 800e008:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e00a:	e005      	b.n	800e018 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	3301      	adds	r3, #1
 800e010:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e012:	7afb      	ldrb	r3, [r7, #11]
 800e014:	3b0a      	subs	r3, #10
 800e016:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e018:	7afb      	ldrb	r3, [r7, #11]
 800e01a:	2b09      	cmp	r3, #9
 800e01c:	d8f6      	bhi.n	800e00c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	b2db      	uxtb	r3, r3
 800e022:	011b      	lsls	r3, r3, #4
 800e024:	b2da      	uxtb	r2, r3
 800e026:	7afb      	ldrb	r3, [r7, #11]
 800e028:	4313      	orrs	r3, r2
 800e02a:	b2db      	uxtb	r3, r3
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3714      	adds	r7, #20
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e038:	b480      	push	{r7}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	4603      	mov	r3, r0
 800e040:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e042:	79fb      	ldrb	r3, [r7, #7]
 800e044:	091b      	lsrs	r3, r3, #4
 800e046:	b2db      	uxtb	r3, r3
 800e048:	461a      	mov	r2, r3
 800e04a:	0092      	lsls	r2, r2, #2
 800e04c:	4413      	add	r3, r2
 800e04e:	005b      	lsls	r3, r3, #1
 800e050:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e052:	79fb      	ldrb	r3, [r7, #7]
 800e054:	f003 030f 	and.w	r3, r3, #15
 800e058:	b2da      	uxtb	r2, r3
 800e05a:	7bfb      	ldrb	r3, [r7, #15]
 800e05c:	4413      	add	r3, r2
 800e05e:	b2db      	uxtb	r3, r3
}
 800e060:	4618      	mov	r0, r3
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d101      	bne.n	800e07e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e07a:	2301      	movs	r3, #1
 800e07c:	e10f      	b.n	800e29e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2200      	movs	r2, #0
 800e082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a87      	ldr	r2, [pc, #540]	; (800e2a8 <HAL_SPI_Init+0x23c>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d00f      	beq.n	800e0ae <HAL_SPI_Init+0x42>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a86      	ldr	r2, [pc, #536]	; (800e2ac <HAL_SPI_Init+0x240>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d00a      	beq.n	800e0ae <HAL_SPI_Init+0x42>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4a84      	ldr	r2, [pc, #528]	; (800e2b0 <HAL_SPI_Init+0x244>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d005      	beq.n	800e0ae <HAL_SPI_Init+0x42>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	2b0f      	cmp	r3, #15
 800e0a8:	d901      	bls.n	800e0ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e0f7      	b.n	800e29e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fc12 	bl	800e8d8 <SPI_GetPacketSize>
 800e0b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a7b      	ldr	r2, [pc, #492]	; (800e2a8 <HAL_SPI_Init+0x23c>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d00c      	beq.n	800e0da <HAL_SPI_Init+0x6e>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a79      	ldr	r2, [pc, #484]	; (800e2ac <HAL_SPI_Init+0x240>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d007      	beq.n	800e0da <HAL_SPI_Init+0x6e>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4a78      	ldr	r2, [pc, #480]	; (800e2b0 <HAL_SPI_Init+0x244>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d002      	beq.n	800e0da <HAL_SPI_Init+0x6e>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2b08      	cmp	r3, #8
 800e0d8:	d811      	bhi.n	800e0fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e0de:	4a72      	ldr	r2, [pc, #456]	; (800e2a8 <HAL_SPI_Init+0x23c>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d009      	beq.n	800e0f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a70      	ldr	r2, [pc, #448]	; (800e2ac <HAL_SPI_Init+0x240>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d004      	beq.n	800e0f8 <HAL_SPI_Init+0x8c>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a6f      	ldr	r2, [pc, #444]	; (800e2b0 <HAL_SPI_Init+0x244>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d104      	bne.n	800e102 <HAL_SPI_Init+0x96>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2b10      	cmp	r3, #16
 800e0fc:	d901      	bls.n	800e102 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e0fe:	2301      	movs	r3, #1
 800e100:	e0cd      	b.n	800e29e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d106      	bne.n	800e11c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7f5 fa58 	bl	80035cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2202      	movs	r2, #2
 800e120:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f022 0201 	bic.w	r2, r2, #1
 800e132:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	689b      	ldr	r3, [r3, #8]
 800e13a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e13e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e148:	d119      	bne.n	800e17e <HAL_SPI_Init+0x112>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e152:	d103      	bne.n	800e15c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d008      	beq.n	800e16e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10c      	bne.n	800e17e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e16c:	d107      	bne.n	800e17e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e17c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00f      	beq.n	800e1aa <HAL_SPI_Init+0x13e>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	2b06      	cmp	r3, #6
 800e190:	d90b      	bls.n	800e1aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	430a      	orrs	r2, r1
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	e007      	b.n	800e1ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e1b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	69da      	ldr	r2, [r3, #28]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	431a      	orrs	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1cc:	ea42 0103 	orr.w	r1, r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	68da      	ldr	r2, [r3, #12]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	430a      	orrs	r2, r1
 800e1da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e4:	431a      	orrs	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ea:	431a      	orrs	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	431a      	orrs	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	431a      	orrs	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	695b      	ldr	r3, [r3, #20]
 800e1fc:	431a      	orrs	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a1b      	ldr	r3, [r3, #32]
 800e202:	431a      	orrs	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	431a      	orrs	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e20e:	431a      	orrs	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	431a      	orrs	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e21a:	ea42 0103 	orr.w	r1, r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	430a      	orrs	r2, r1
 800e228:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d113      	bne.n	800e25a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e244:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e258:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f022 0201 	bic.w	r2, r2, #1
 800e268:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00a      	beq.n	800e28c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	430a      	orrs	r2, r1
 800e28a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2201      	movs	r2, #1
 800e298:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e29c:	2300      	movs	r3, #0
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	40013000 	.word	0x40013000
 800e2ac:	40003800 	.word	0x40003800
 800e2b0:	40003c00 	.word	0x40003c00

0800e2b4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b088      	sub	sp, #32
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	60b9      	str	r1, [r7, #8]
 800e2be:	603b      	str	r3, [r7, #0]
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c8:	095b      	lsrs	r3, r3, #5
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	3330      	adds	r3, #48	; 0x30
 800e2d6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2d8:	f7f5 feac 	bl	8004034 <HAL_GetTick>
 800e2dc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d001      	beq.n	800e2ee <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e2ea:	2302      	movs	r3, #2
 800e2ec:	e250      	b.n	800e790 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <HAL_SPI_Receive+0x46>
 800e2f4:	88fb      	ldrh	r3, [r7, #6]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d101      	bne.n	800e2fe <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e248      	b.n	800e790 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e304:	2b01      	cmp	r3, #1
 800e306:	d101      	bne.n	800e30c <HAL_SPI_Receive+0x58>
 800e308:	2302      	movs	r3, #2
 800e30a:	e241      	b.n	800e790 <HAL_SPI_Receive+0x4dc>
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2204      	movs	r2, #4
 800e318:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2200      	movs	r2, #0
 800e320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	68ba      	ldr	r2, [r7, #8]
 800e328:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	88fa      	ldrh	r2, [r7, #6]
 800e32e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	88fa      	ldrh	r2, [r7, #6]
 800e336:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2200      	movs	r2, #0
 800e344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2200      	movs	r2, #0
 800e354:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2200      	movs	r2, #0
 800e35a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e364:	d108      	bne.n	800e378 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e374:	601a      	str	r2, [r3, #0]
 800e376:	e009      	b.n	800e38c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e38a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	685a      	ldr	r2, [r3, #4]
 800e392:	4b95      	ldr	r3, [pc, #596]	; (800e5e8 <HAL_SPI_Receive+0x334>)
 800e394:	4013      	ands	r3, r2
 800e396:	88f9      	ldrh	r1, [r7, #6]
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	6812      	ldr	r2, [r2, #0]
 800e39c:	430b      	orrs	r3, r1
 800e39e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f042 0201 	orr.w	r2, r2, #1
 800e3ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e3b8:	d107      	bne.n	800e3ca <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	2b0f      	cmp	r3, #15
 800e3d0:	d96c      	bls.n	800e4ac <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e3d2:	e064      	b.n	800e49e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	695b      	ldr	r3, [r3, #20]
 800e3da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	695b      	ldr	r3, [r3, #20]
 800e3e2:	f003 0301 	and.w	r3, r3, #1
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d114      	bne.n	800e414 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e3f4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3fa:	1d1a      	adds	r2, r3, #4
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e406:	b29b      	uxth	r3, r3
 800e408:	3b01      	subs	r3, #1
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e412:	e044      	b.n	800e49e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	8bfa      	ldrh	r2, [r7, #30]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d919      	bls.n	800e456 <HAL_SPI_Receive+0x1a2>
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d014      	beq.n	800e456 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e434:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e436:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e43c:	1d1a      	adds	r2, r3, #4
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3b01      	subs	r3, #1
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e454:	e023      	b.n	800e49e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e456:	f7f5 fded 	bl	8004034 <HAL_GetTick>
 800e45a:	4602      	mov	r2, r0
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	1ad3      	subs	r3, r2, r3
 800e460:	683a      	ldr	r2, [r7, #0]
 800e462:	429a      	cmp	r2, r3
 800e464:	d803      	bhi.n	800e46e <HAL_SPI_Receive+0x1ba>
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e46c:	d102      	bne.n	800e474 <HAL_SPI_Receive+0x1c0>
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d114      	bne.n	800e49e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 f98f 	bl	800e798 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e480:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2201      	movs	r2, #1
 800e48e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e49a:	2303      	movs	r3, #3
 800e49c:	e178      	b.n	800e790 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d194      	bne.n	800e3d4 <HAL_SPI_Receive+0x120>
 800e4aa:	e15e      	b.n	800e76a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	2b07      	cmp	r3, #7
 800e4b2:	f240 8153 	bls.w	800e75c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e4b6:	e08f      	b.n	800e5d8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	695b      	ldr	r3, [r3, #20]
 800e4be:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	695b      	ldr	r3, [r3, #20]
 800e4c6:	f003 0301 	and.w	r3, r3, #1
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d114      	bne.n	800e4f8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4d2:	69ba      	ldr	r2, [r7, #24]
 800e4d4:	8812      	ldrh	r2, [r2, #0]
 800e4d6:	b292      	uxth	r2, r2
 800e4d8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4de:	1c9a      	adds	r2, r3, #2
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4f6:	e06f      	b.n	800e5d8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	8bfa      	ldrh	r2, [r7, #30]
 800e502:	429a      	cmp	r2, r3
 800e504:	d924      	bls.n	800e550 <HAL_SPI_Receive+0x29c>
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d01f      	beq.n	800e550 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e514:	69ba      	ldr	r2, [r7, #24]
 800e516:	8812      	ldrh	r2, [r2, #0]
 800e518:	b292      	uxth	r2, r2
 800e51a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e520:	1c9a      	adds	r2, r3, #2
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e52a:	69ba      	ldr	r2, [r7, #24]
 800e52c:	8812      	ldrh	r2, [r2, #0]
 800e52e:	b292      	uxth	r2, r2
 800e530:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e536:	1c9a      	adds	r2, r3, #2
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e542:	b29b      	uxth	r3, r3
 800e544:	3b02      	subs	r3, #2
 800e546:	b29a      	uxth	r2, r3
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e54e:	e043      	b.n	800e5d8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e556:	b29b      	uxth	r3, r3
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d119      	bne.n	800e590 <HAL_SPI_Receive+0x2dc>
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e562:	2b00      	cmp	r3, #0
 800e564:	d014      	beq.n	800e590 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e56a:	69ba      	ldr	r2, [r7, #24]
 800e56c:	8812      	ldrh	r2, [r2, #0]
 800e56e:	b292      	uxth	r2, r2
 800e570:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e576:	1c9a      	adds	r2, r3, #2
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e582:	b29b      	uxth	r3, r3
 800e584:	3b01      	subs	r3, #1
 800e586:	b29a      	uxth	r2, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e58e:	e023      	b.n	800e5d8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e590:	f7f5 fd50 	bl	8004034 <HAL_GetTick>
 800e594:	4602      	mov	r2, r0
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d803      	bhi.n	800e5a8 <HAL_SPI_Receive+0x2f4>
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5a6:	d102      	bne.n	800e5ae <HAL_SPI_Receive+0x2fa>
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d114      	bne.n	800e5d8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f000 f8f2 	bl	800e798 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	e0db      	b.n	800e790 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f47f af69 	bne.w	800e4b8 <HAL_SPI_Receive+0x204>
 800e5e6:	e0c0      	b.n	800e76a <HAL_SPI_Receive+0x4b6>
 800e5e8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	695b      	ldr	r3, [r3, #20]
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d117      	bne.n	800e632 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e60e:	7812      	ldrb	r2, [r2, #0]
 800e610:	b2d2      	uxtb	r2, r2
 800e612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e624:	b29b      	uxth	r3, r3
 800e626:	3b01      	subs	r3, #1
 800e628:	b29a      	uxth	r2, r3
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e630:	e094      	b.n	800e75c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e638:	b29b      	uxth	r3, r3
 800e63a:	8bfa      	ldrh	r2, [r7, #30]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d946      	bls.n	800e6ce <HAL_SPI_Receive+0x41a>
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e646:	2b00      	cmp	r3, #0
 800e648:	d041      	beq.n	800e6ce <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e656:	7812      	ldrb	r2, [r2, #0]
 800e658:	b2d2      	uxtb	r2, r2
 800e65a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e672:	7812      	ldrb	r2, [r2, #0]
 800e674:	b2d2      	uxtb	r2, r2
 800e676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e67c:	1c5a      	adds	r2, r3, #1
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e68e:	7812      	ldrb	r2, [r2, #0]
 800e690:	b2d2      	uxtb	r2, r2
 800e692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6aa:	7812      	ldrb	r2, [r2, #0]
 800e6ac:	b2d2      	uxtb	r2, r2
 800e6ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	3b04      	subs	r3, #4
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6cc:	e046      	b.n	800e75c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	2b03      	cmp	r3, #3
 800e6d8:	d81c      	bhi.n	800e714 <HAL_SPI_Receive+0x460>
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d017      	beq.n	800e714 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6f0:	7812      	ldrb	r2, [r2, #0]
 800e6f2:	b2d2      	uxtb	r2, r2
 800e6f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e706:	b29b      	uxth	r3, r3
 800e708:	3b01      	subs	r3, #1
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e712:	e023      	b.n	800e75c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e714:	f7f5 fc8e 	bl	8004034 <HAL_GetTick>
 800e718:	4602      	mov	r2, r0
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	429a      	cmp	r2, r3
 800e722:	d803      	bhi.n	800e72c <HAL_SPI_Receive+0x478>
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e72a:	d102      	bne.n	800e732 <HAL_SPI_Receive+0x47e>
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d114      	bne.n	800e75c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f000 f830 	bl	800e798 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e73e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2201      	movs	r2, #1
 800e74c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2200      	movs	r2, #0
 800e754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e758:	2303      	movs	r3, #3
 800e75a:	e019      	b.n	800e790 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e762:	b29b      	uxth	r3, r3
 800e764:	2b00      	cmp	r3, #0
 800e766:	f47f af41 	bne.w	800e5ec <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f000 f814 	bl	800e798 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2201      	movs	r2, #1
 800e774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e000      	b.n	800e790 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e78e:	2300      	movs	r3, #0
  }
}
 800e790:	4618      	mov	r0, r3
 800e792:	3720      	adds	r7, #32
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	695b      	ldr	r3, [r3, #20]
 800e7a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	699a      	ldr	r2, [r3, #24]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f042 0208 	orr.w	r2, r2, #8
 800e7b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	699a      	ldr	r2, [r3, #24]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f042 0210 	orr.w	r2, r2, #16
 800e7c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f022 0201 	bic.w	r2, r2, #1
 800e7d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6919      	ldr	r1, [r3, #16]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	4b3c      	ldr	r3, [pc, #240]	; (800e8d4 <SPI_CloseTransfer+0x13c>)
 800e7e4:	400b      	ands	r3, r1
 800e7e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	689a      	ldr	r2, [r3, #8]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e7f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	2b04      	cmp	r3, #4
 800e802:	d014      	beq.n	800e82e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f003 0320 	and.w	r3, r3, #32
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00f      	beq.n	800e82e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e814:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	699a      	ldr	r2, [r3, #24]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f042 0220 	orr.w	r2, r2, #32
 800e82c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b03      	cmp	r3, #3
 800e838:	d014      	beq.n	800e864 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00f      	beq.n	800e864 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e84a:	f043 0204 	orr.w	r2, r3, #4
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	699a      	ldr	r2, [r3, #24]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e862:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00f      	beq.n	800e88e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e874:	f043 0201 	orr.w	r2, r3, #1
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	699a      	ldr	r2, [r3, #24]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e88c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00f      	beq.n	800e8b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e89e:	f043 0208 	orr.w	r2, r3, #8
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	699a      	ldr	r2, [r3, #24]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e8b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e8c8:	bf00      	nop
 800e8ca:	3714      	adds	r7, #20
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr
 800e8d4:	fffffc90 	.word	0xfffffc90

0800e8d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8e4:	095b      	lsrs	r3, r3, #5
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	3307      	adds	r3, #7
 800e8f6:	08db      	lsrs	r3, r3, #3
 800e8f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	fb02 f303 	mul.w	r3, r2, r3
}
 800e902:	4618      	mov	r0, r3
 800e904:	3714      	adds	r7, #20
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr

0800e90e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e90e:	b580      	push	{r7, lr}
 800e910:	b082      	sub	sp, #8
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d101      	bne.n	800e920 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e91c:	2301      	movs	r3, #1
 800e91e:	e049      	b.n	800e9b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d106      	bne.n	800e93a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7f4 feff 	bl	8003738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2202      	movs	r2, #2
 800e93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	3304      	adds	r3, #4
 800e94a:	4619      	mov	r1, r3
 800e94c:	4610      	mov	r0, r2
 800e94e:	f000 fe7d 	bl	800f64c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2201      	movs	r2, #1
 800e956:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2201      	movs	r2, #1
 800e95e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2201      	movs	r2, #1
 800e966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2201      	movs	r2, #1
 800e96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2201      	movs	r2, #1
 800e976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2201      	movs	r2, #1
 800e97e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2201      	movs	r2, #1
 800e986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2201      	movs	r2, #1
 800e98e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2201      	movs	r2, #1
 800e996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2201      	movs	r2, #1
 800e99e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d001      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e054      	b.n	800ea7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68da      	ldr	r2, [r3, #12]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f042 0201 	orr.w	r2, r2, #1
 800e9ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a26      	ldr	r2, [pc, #152]	; (800ea8c <HAL_TIM_Base_Start_IT+0xd0>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d022      	beq.n	800ea3c <HAL_TIM_Base_Start_IT+0x80>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9fe:	d01d      	beq.n	800ea3c <HAL_TIM_Base_Start_IT+0x80>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a22      	ldr	r2, [pc, #136]	; (800ea90 <HAL_TIM_Base_Start_IT+0xd4>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d018      	beq.n	800ea3c <HAL_TIM_Base_Start_IT+0x80>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a21      	ldr	r2, [pc, #132]	; (800ea94 <HAL_TIM_Base_Start_IT+0xd8>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d013      	beq.n	800ea3c <HAL_TIM_Base_Start_IT+0x80>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a1f      	ldr	r2, [pc, #124]	; (800ea98 <HAL_TIM_Base_Start_IT+0xdc>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d00e      	beq.n	800ea3c <HAL_TIM_Base_Start_IT+0x80>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4a1e      	ldr	r2, [pc, #120]	; (800ea9c <HAL_TIM_Base_Start_IT+0xe0>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d009      	beq.n	800ea3c <HAL_TIM_Base_Start_IT+0x80>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a1c      	ldr	r2, [pc, #112]	; (800eaa0 <HAL_TIM_Base_Start_IT+0xe4>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d004      	beq.n	800ea3c <HAL_TIM_Base_Start_IT+0x80>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4a1b      	ldr	r2, [pc, #108]	; (800eaa4 <HAL_TIM_Base_Start_IT+0xe8>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d115      	bne.n	800ea68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	689a      	ldr	r2, [r3, #8]
 800ea42:	4b19      	ldr	r3, [pc, #100]	; (800eaa8 <HAL_TIM_Base_Start_IT+0xec>)
 800ea44:	4013      	ands	r3, r2
 800ea46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b06      	cmp	r3, #6
 800ea4c:	d015      	beq.n	800ea7a <HAL_TIM_Base_Start_IT+0xbe>
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea54:	d011      	beq.n	800ea7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f042 0201 	orr.w	r2, r2, #1
 800ea64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea66:	e008      	b.n	800ea7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	681a      	ldr	r2, [r3, #0]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f042 0201 	orr.w	r2, r2, #1
 800ea76:	601a      	str	r2, [r3, #0]
 800ea78:	e000      	b.n	800ea7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3714      	adds	r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	40010000 	.word	0x40010000
 800ea90:	40000400 	.word	0x40000400
 800ea94:	40000800 	.word	0x40000800
 800ea98:	40000c00 	.word	0x40000c00
 800ea9c:	40010400 	.word	0x40010400
 800eaa0:	40001800 	.word	0x40001800
 800eaa4:	40014000 	.word	0x40014000
 800eaa8:	00010007 	.word	0x00010007

0800eaac <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eab6:	2300      	movs	r3, #0
 800eab8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d109      	bne.n	800ead4 <HAL_TIM_OC_Start_IT+0x28>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	bf14      	ite	ne
 800eacc:	2301      	movne	r3, #1
 800eace:	2300      	moveq	r3, #0
 800ead0:	b2db      	uxtb	r3, r3
 800ead2:	e03c      	b.n	800eb4e <HAL_TIM_OC_Start_IT+0xa2>
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d109      	bne.n	800eaee <HAL_TIM_OC_Start_IT+0x42>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	bf14      	ite	ne
 800eae6:	2301      	movne	r3, #1
 800eae8:	2300      	moveq	r3, #0
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	e02f      	b.n	800eb4e <HAL_TIM_OC_Start_IT+0xa2>
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	2b08      	cmp	r3, #8
 800eaf2:	d109      	bne.n	800eb08 <HAL_TIM_OC_Start_IT+0x5c>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	bf14      	ite	ne
 800eb00:	2301      	movne	r3, #1
 800eb02:	2300      	moveq	r3, #0
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	e022      	b.n	800eb4e <HAL_TIM_OC_Start_IT+0xa2>
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2b0c      	cmp	r3, #12
 800eb0c:	d109      	bne.n	800eb22 <HAL_TIM_OC_Start_IT+0x76>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	bf14      	ite	ne
 800eb1a:	2301      	movne	r3, #1
 800eb1c:	2300      	moveq	r3, #0
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	e015      	b.n	800eb4e <HAL_TIM_OC_Start_IT+0xa2>
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	2b10      	cmp	r3, #16
 800eb26:	d109      	bne.n	800eb3c <HAL_TIM_OC_Start_IT+0x90>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	bf14      	ite	ne
 800eb34:	2301      	movne	r3, #1
 800eb36:	2300      	moveq	r3, #0
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	e008      	b.n	800eb4e <HAL_TIM_OC_Start_IT+0xa2>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	bf14      	ite	ne
 800eb48:	2301      	movne	r3, #1
 800eb4a:	2300      	moveq	r3, #0
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800eb52:	2301      	movs	r3, #1
 800eb54:	e0ec      	b.n	800ed30 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d104      	bne.n	800eb66 <HAL_TIM_OC_Start_IT+0xba>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb64:	e023      	b.n	800ebae <HAL_TIM_OC_Start_IT+0x102>
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b04      	cmp	r3, #4
 800eb6a:	d104      	bne.n	800eb76 <HAL_TIM_OC_Start_IT+0xca>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2202      	movs	r2, #2
 800eb70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb74:	e01b      	b.n	800ebae <HAL_TIM_OC_Start_IT+0x102>
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	2b08      	cmp	r3, #8
 800eb7a:	d104      	bne.n	800eb86 <HAL_TIM_OC_Start_IT+0xda>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2202      	movs	r2, #2
 800eb80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb84:	e013      	b.n	800ebae <HAL_TIM_OC_Start_IT+0x102>
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	2b0c      	cmp	r3, #12
 800eb8a:	d104      	bne.n	800eb96 <HAL_TIM_OC_Start_IT+0xea>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2202      	movs	r2, #2
 800eb90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb94:	e00b      	b.n	800ebae <HAL_TIM_OC_Start_IT+0x102>
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	2b10      	cmp	r3, #16
 800eb9a:	d104      	bne.n	800eba6 <HAL_TIM_OC_Start_IT+0xfa>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2202      	movs	r2, #2
 800eba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eba4:	e003      	b.n	800ebae <HAL_TIM_OC_Start_IT+0x102>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2202      	movs	r2, #2
 800ebaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	2b0c      	cmp	r3, #12
 800ebb2:	d841      	bhi.n	800ec38 <HAL_TIM_OC_Start_IT+0x18c>
 800ebb4:	a201      	add	r2, pc, #4	; (adr r2, 800ebbc <HAL_TIM_OC_Start_IT+0x110>)
 800ebb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebba:	bf00      	nop
 800ebbc:	0800ebf1 	.word	0x0800ebf1
 800ebc0:	0800ec39 	.word	0x0800ec39
 800ebc4:	0800ec39 	.word	0x0800ec39
 800ebc8:	0800ec39 	.word	0x0800ec39
 800ebcc:	0800ec03 	.word	0x0800ec03
 800ebd0:	0800ec39 	.word	0x0800ec39
 800ebd4:	0800ec39 	.word	0x0800ec39
 800ebd8:	0800ec39 	.word	0x0800ec39
 800ebdc:	0800ec15 	.word	0x0800ec15
 800ebe0:	0800ec39 	.word	0x0800ec39
 800ebe4:	0800ec39 	.word	0x0800ec39
 800ebe8:	0800ec39 	.word	0x0800ec39
 800ebec:	0800ec27 	.word	0x0800ec27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	68da      	ldr	r2, [r3, #12]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f042 0202 	orr.w	r2, r2, #2
 800ebfe:	60da      	str	r2, [r3, #12]
      break;
 800ec00:	e01d      	b.n	800ec3e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68da      	ldr	r2, [r3, #12]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f042 0204 	orr.w	r2, r2, #4
 800ec10:	60da      	str	r2, [r3, #12]
      break;
 800ec12:	e014      	b.n	800ec3e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	68da      	ldr	r2, [r3, #12]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f042 0208 	orr.w	r2, r2, #8
 800ec22:	60da      	str	r2, [r3, #12]
      break;
 800ec24:	e00b      	b.n	800ec3e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	68da      	ldr	r2, [r3, #12]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f042 0210 	orr.w	r2, r2, #16
 800ec34:	60da      	str	r2, [r3, #12]
      break;
 800ec36:	e002      	b.n	800ec3e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ec3c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ec3e:	7bfb      	ldrb	r3, [r7, #15]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d174      	bne.n	800ed2e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2201      	movs	r2, #1
 800ec4a:	6839      	ldr	r1, [r7, #0]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f001 f917 	bl	800fe80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a38      	ldr	r2, [pc, #224]	; (800ed38 <HAL_TIM_OC_Start_IT+0x28c>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d013      	beq.n	800ec84 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a36      	ldr	r2, [pc, #216]	; (800ed3c <HAL_TIM_OC_Start_IT+0x290>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d00e      	beq.n	800ec84 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a35      	ldr	r2, [pc, #212]	; (800ed40 <HAL_TIM_OC_Start_IT+0x294>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d009      	beq.n	800ec84 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a33      	ldr	r2, [pc, #204]	; (800ed44 <HAL_TIM_OC_Start_IT+0x298>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d004      	beq.n	800ec84 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	4a32      	ldr	r2, [pc, #200]	; (800ed48 <HAL_TIM_OC_Start_IT+0x29c>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d101      	bne.n	800ec88 <HAL_TIM_OC_Start_IT+0x1dc>
 800ec84:	2301      	movs	r3, #1
 800ec86:	e000      	b.n	800ec8a <HAL_TIM_OC_Start_IT+0x1de>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d007      	beq.n	800ec9e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a25      	ldr	r2, [pc, #148]	; (800ed38 <HAL_TIM_OC_Start_IT+0x28c>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d022      	beq.n	800ecee <HAL_TIM_OC_Start_IT+0x242>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecb0:	d01d      	beq.n	800ecee <HAL_TIM_OC_Start_IT+0x242>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a25      	ldr	r2, [pc, #148]	; (800ed4c <HAL_TIM_OC_Start_IT+0x2a0>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d018      	beq.n	800ecee <HAL_TIM_OC_Start_IT+0x242>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a23      	ldr	r2, [pc, #140]	; (800ed50 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d013      	beq.n	800ecee <HAL_TIM_OC_Start_IT+0x242>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a22      	ldr	r2, [pc, #136]	; (800ed54 <HAL_TIM_OC_Start_IT+0x2a8>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d00e      	beq.n	800ecee <HAL_TIM_OC_Start_IT+0x242>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a19      	ldr	r2, [pc, #100]	; (800ed3c <HAL_TIM_OC_Start_IT+0x290>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d009      	beq.n	800ecee <HAL_TIM_OC_Start_IT+0x242>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a1e      	ldr	r2, [pc, #120]	; (800ed58 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d004      	beq.n	800ecee <HAL_TIM_OC_Start_IT+0x242>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a15      	ldr	r2, [pc, #84]	; (800ed40 <HAL_TIM_OC_Start_IT+0x294>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d115      	bne.n	800ed1a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	689a      	ldr	r2, [r3, #8]
 800ecf4:	4b19      	ldr	r3, [pc, #100]	; (800ed5c <HAL_TIM_OC_Start_IT+0x2b0>)
 800ecf6:	4013      	ands	r3, r2
 800ecf8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	2b06      	cmp	r3, #6
 800ecfe:	d015      	beq.n	800ed2c <HAL_TIM_OC_Start_IT+0x280>
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed06:	d011      	beq.n	800ed2c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f042 0201 	orr.w	r2, r2, #1
 800ed16:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed18:	e008      	b.n	800ed2c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f042 0201 	orr.w	r2, r2, #1
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	e000      	b.n	800ed2e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed2c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ed2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	40010000 	.word	0x40010000
 800ed3c:	40010400 	.word	0x40010400
 800ed40:	40014000 	.word	0x40014000
 800ed44:	40014400 	.word	0x40014400
 800ed48:	40014800 	.word	0x40014800
 800ed4c:	40000400 	.word	0x40000400
 800ed50:	40000800 	.word	0x40000800
 800ed54:	40000c00 	.word	0x40000c00
 800ed58:	40001800 	.word	0x40001800
 800ed5c:	00010007 	.word	0x00010007

0800ed60 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	2b0c      	cmp	r3, #12
 800ed72:	d841      	bhi.n	800edf8 <HAL_TIM_OC_Stop_IT+0x98>
 800ed74:	a201      	add	r2, pc, #4	; (adr r2, 800ed7c <HAL_TIM_OC_Stop_IT+0x1c>)
 800ed76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7a:	bf00      	nop
 800ed7c:	0800edb1 	.word	0x0800edb1
 800ed80:	0800edf9 	.word	0x0800edf9
 800ed84:	0800edf9 	.word	0x0800edf9
 800ed88:	0800edf9 	.word	0x0800edf9
 800ed8c:	0800edc3 	.word	0x0800edc3
 800ed90:	0800edf9 	.word	0x0800edf9
 800ed94:	0800edf9 	.word	0x0800edf9
 800ed98:	0800edf9 	.word	0x0800edf9
 800ed9c:	0800edd5 	.word	0x0800edd5
 800eda0:	0800edf9 	.word	0x0800edf9
 800eda4:	0800edf9 	.word	0x0800edf9
 800eda8:	0800edf9 	.word	0x0800edf9
 800edac:	0800ede7 	.word	0x0800ede7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f022 0202 	bic.w	r2, r2, #2
 800edbe:	60da      	str	r2, [r3, #12]
      break;
 800edc0:	e01d      	b.n	800edfe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	68da      	ldr	r2, [r3, #12]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f022 0204 	bic.w	r2, r2, #4
 800edd0:	60da      	str	r2, [r3, #12]
      break;
 800edd2:	e014      	b.n	800edfe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68da      	ldr	r2, [r3, #12]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f022 0208 	bic.w	r2, r2, #8
 800ede2:	60da      	str	r2, [r3, #12]
      break;
 800ede4:	e00b      	b.n	800edfe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68da      	ldr	r2, [r3, #12]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f022 0210 	bic.w	r2, r2, #16
 800edf4:	60da      	str	r2, [r3, #12]
      break;
 800edf6:	e002      	b.n	800edfe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	73fb      	strb	r3, [r7, #15]
      break;
 800edfc:	bf00      	nop
  }

  if (status == HAL_OK)
 800edfe:	7bfb      	ldrb	r3, [r7, #15]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f040 8081 	bne.w	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	6839      	ldr	r1, [r7, #0]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f001 f836 	bl	800fe80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a3e      	ldr	r2, [pc, #248]	; (800ef14 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d013      	beq.n	800ee46 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a3d      	ldr	r2, [pc, #244]	; (800ef18 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d00e      	beq.n	800ee46 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a3b      	ldr	r2, [pc, #236]	; (800ef1c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d009      	beq.n	800ee46 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a3a      	ldr	r2, [pc, #232]	; (800ef20 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d004      	beq.n	800ee46 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a38      	ldr	r2, [pc, #224]	; (800ef24 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d101      	bne.n	800ee4a <HAL_TIM_OC_Stop_IT+0xea>
 800ee46:	2301      	movs	r3, #1
 800ee48:	e000      	b.n	800ee4c <HAL_TIM_OC_Stop_IT+0xec>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d017      	beq.n	800ee80 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	6a1a      	ldr	r2, [r3, #32]
 800ee56:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d10f      	bne.n	800ee80 <HAL_TIM_OC_Stop_IT+0x120>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6a1a      	ldr	r2, [r3, #32]
 800ee66:	f240 4344 	movw	r3, #1092	; 0x444
 800ee6a:	4013      	ands	r3, r2
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d107      	bne.n	800ee80 <HAL_TIM_OC_Stop_IT+0x120>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ee7e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	6a1a      	ldr	r2, [r3, #32]
 800ee86:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d10f      	bne.n	800eeb0 <HAL_TIM_OC_Stop_IT+0x150>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6a1a      	ldr	r2, [r3, #32]
 800ee96:	f240 4344 	movw	r3, #1092	; 0x444
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d107      	bne.n	800eeb0 <HAL_TIM_OC_Stop_IT+0x150>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f022 0201 	bic.w	r2, r2, #1
 800eeae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d104      	bne.n	800eec0 <HAL_TIM_OC_Stop_IT+0x160>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eebe:	e023      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d104      	bne.n	800eed0 <HAL_TIM_OC_Stop_IT+0x170>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eece:	e01b      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	2b08      	cmp	r3, #8
 800eed4:	d104      	bne.n	800eee0 <HAL_TIM_OC_Stop_IT+0x180>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2201      	movs	r2, #1
 800eeda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eede:	e013      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	2b0c      	cmp	r3, #12
 800eee4:	d104      	bne.n	800eef0 <HAL_TIM_OC_Stop_IT+0x190>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eeee:	e00b      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	2b10      	cmp	r3, #16
 800eef4:	d104      	bne.n	800ef00 <HAL_TIM_OC_Stop_IT+0x1a0>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eefe:	e003      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ef08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3710      	adds	r7, #16
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	40010000 	.word	0x40010000
 800ef18:	40010400 	.word	0x40010400
 800ef1c:	40014000 	.word	0x40014000
 800ef20:	40014400 	.word	0x40014400
 800ef24:	40014800 	.word	0x40014800

0800ef28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d101      	bne.n	800ef3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ef36:	2301      	movs	r3, #1
 800ef38:	e049      	b.n	800efce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d106      	bne.n	800ef54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f841 	bl	800efd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2202      	movs	r2, #2
 800ef58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	3304      	adds	r3, #4
 800ef64:	4619      	mov	r1, r3
 800ef66:	4610      	mov	r0, r2
 800ef68:	f000 fb70 	bl	800f64c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2201      	movs	r2, #1
 800efb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2201      	movs	r2, #1
 800efc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800efcc:	2300      	movs	r3, #0
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3708      	adds	r7, #8
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800efd6:	b480      	push	{r7}
 800efd8:	b083      	sub	sp, #12
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800efde:	bf00      	nop
 800efe0:	370c      	adds	r7, #12
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr

0800efea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b084      	sub	sp, #16
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	691b      	ldr	r3, [r3, #16]
 800f000:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	f003 0302 	and.w	r3, r3, #2
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d020      	beq.n	800f04e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f003 0302 	and.w	r3, r3, #2
 800f012:	2b00      	cmp	r3, #0
 800f014:	d01b      	beq.n	800f04e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f06f 0202 	mvn.w	r2, #2
 800f01e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	699b      	ldr	r3, [r3, #24]
 800f02c:	f003 0303 	and.w	r3, r3, #3
 800f030:	2b00      	cmp	r3, #0
 800f032:	d003      	beq.n	800f03c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 faeb 	bl	800f610 <HAL_TIM_IC_CaptureCallback>
 800f03a:	e005      	b.n	800f048 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7f1 fadf 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 faee 	bl	800f624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2200      	movs	r2, #0
 800f04c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	f003 0304 	and.w	r3, r3, #4
 800f054:	2b00      	cmp	r3, #0
 800f056:	d020      	beq.n	800f09a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f003 0304 	and.w	r3, r3, #4
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d01b      	beq.n	800f09a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f06f 0204 	mvn.w	r2, #4
 800f06a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2202      	movs	r2, #2
 800f070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	699b      	ldr	r3, [r3, #24]
 800f078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d003      	beq.n	800f088 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 fac5 	bl	800f610 <HAL_TIM_IC_CaptureCallback>
 800f086:	e005      	b.n	800f094 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7f1 fab9 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 fac8 	bl	800f624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	f003 0308 	and.w	r3, r3, #8
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d020      	beq.n	800f0e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f003 0308 	and.w	r3, r3, #8
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d01b      	beq.n	800f0e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f06f 0208 	mvn.w	r2, #8
 800f0b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2204      	movs	r2, #4
 800f0bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	69db      	ldr	r3, [r3, #28]
 800f0c4:	f003 0303 	and.w	r3, r3, #3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d003      	beq.n	800f0d4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f000 fa9f 	bl	800f610 <HAL_TIM_IC_CaptureCallback>
 800f0d2:	e005      	b.n	800f0e0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7f1 fa93 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 faa2 	bl	800f624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	f003 0310 	and.w	r3, r3, #16
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d020      	beq.n	800f132 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f003 0310 	and.w	r3, r3, #16
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d01b      	beq.n	800f132 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f06f 0210 	mvn.w	r2, #16
 800f102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2208      	movs	r2, #8
 800f108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	69db      	ldr	r3, [r3, #28]
 800f110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f114:	2b00      	cmp	r3, #0
 800f116:	d003      	beq.n	800f120 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 fa79 	bl	800f610 <HAL_TIM_IC_CaptureCallback>
 800f11e:	e005      	b.n	800f12c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7f1 fa6d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 fa7c 	bl	800f624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	f003 0301 	and.w	r3, r3, #1
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00c      	beq.n	800f156 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f003 0301 	and.w	r3, r3, #1
 800f142:	2b00      	cmp	r3, #0
 800f144:	d007      	beq.n	800f156 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f06f 0201 	mvn.w	r2, #1
 800f14e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f7f3 ffcb 	bl	80030ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d104      	bne.n	800f16a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00c      	beq.n	800f184 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f170:	2b00      	cmp	r3, #0
 800f172:	d007      	beq.n	800f184 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f17c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 ffba 	bl	80100f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00c      	beq.n	800f1a8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f194:	2b00      	cmp	r3, #0
 800f196:	d007      	beq.n	800f1a8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 ffb2 	bl	801010c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d00c      	beq.n	800f1cc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d007      	beq.n	800f1cc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f1c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 fa36 	bl	800f638 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	f003 0320 	and.w	r3, r3, #32
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d00c      	beq.n	800f1f0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f003 0320 	and.w	r3, r3, #32
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d007      	beq.n	800f1f0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f06f 0220 	mvn.w	r2, #32
 800f1e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 ff7a 	bl	80100e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1f0:	bf00      	nop
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b086      	sub	sp, #24
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f204:	2300      	movs	r3, #0
 800f206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d101      	bne.n	800f216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f212:	2302      	movs	r3, #2
 800f214:	e0ff      	b.n	800f416 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2201      	movs	r2, #1
 800f21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b14      	cmp	r3, #20
 800f222:	f200 80f0 	bhi.w	800f406 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f226:	a201      	add	r2, pc, #4	; (adr r2, 800f22c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f22c:	0800f281 	.word	0x0800f281
 800f230:	0800f407 	.word	0x0800f407
 800f234:	0800f407 	.word	0x0800f407
 800f238:	0800f407 	.word	0x0800f407
 800f23c:	0800f2c1 	.word	0x0800f2c1
 800f240:	0800f407 	.word	0x0800f407
 800f244:	0800f407 	.word	0x0800f407
 800f248:	0800f407 	.word	0x0800f407
 800f24c:	0800f303 	.word	0x0800f303
 800f250:	0800f407 	.word	0x0800f407
 800f254:	0800f407 	.word	0x0800f407
 800f258:	0800f407 	.word	0x0800f407
 800f25c:	0800f343 	.word	0x0800f343
 800f260:	0800f407 	.word	0x0800f407
 800f264:	0800f407 	.word	0x0800f407
 800f268:	0800f407 	.word	0x0800f407
 800f26c:	0800f385 	.word	0x0800f385
 800f270:	0800f407 	.word	0x0800f407
 800f274:	0800f407 	.word	0x0800f407
 800f278:	0800f407 	.word	0x0800f407
 800f27c:	0800f3c5 	.word	0x0800f3c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	68b9      	ldr	r1, [r7, #8]
 800f286:	4618      	mov	r0, r3
 800f288:	f000 fa86 	bl	800f798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	699a      	ldr	r2, [r3, #24]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f042 0208 	orr.w	r2, r2, #8
 800f29a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	699a      	ldr	r2, [r3, #24]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f022 0204 	bic.w	r2, r2, #4
 800f2aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6999      	ldr	r1, [r3, #24]
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	691a      	ldr	r2, [r3, #16]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	430a      	orrs	r2, r1
 800f2bc:	619a      	str	r2, [r3, #24]
      break;
 800f2be:	e0a5      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	68b9      	ldr	r1, [r7, #8]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f000 faf6 	bl	800f8b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	699a      	ldr	r2, [r3, #24]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	699a      	ldr	r2, [r3, #24]
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6999      	ldr	r1, [r3, #24]
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	691b      	ldr	r3, [r3, #16]
 800f2f6:	021a      	lsls	r2, r3, #8
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	430a      	orrs	r2, r1
 800f2fe:	619a      	str	r2, [r3, #24]
      break;
 800f300:	e084      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68b9      	ldr	r1, [r7, #8]
 800f308:	4618      	mov	r0, r3
 800f30a:	f000 fb5f 	bl	800f9cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	69da      	ldr	r2, [r3, #28]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f042 0208 	orr.w	r2, r2, #8
 800f31c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	69da      	ldr	r2, [r3, #28]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f022 0204 	bic.w	r2, r2, #4
 800f32c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	69d9      	ldr	r1, [r3, #28]
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	691a      	ldr	r2, [r3, #16]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	430a      	orrs	r2, r1
 800f33e:	61da      	str	r2, [r3, #28]
      break;
 800f340:	e064      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	68b9      	ldr	r1, [r7, #8]
 800f348:	4618      	mov	r0, r3
 800f34a:	f000 fbc7 	bl	800fadc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	69da      	ldr	r2, [r3, #28]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f35c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	69da      	ldr	r2, [r3, #28]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f36c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	69d9      	ldr	r1, [r3, #28]
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	691b      	ldr	r3, [r3, #16]
 800f378:	021a      	lsls	r2, r3, #8
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	430a      	orrs	r2, r1
 800f380:	61da      	str	r2, [r3, #28]
      break;
 800f382:	e043      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	68b9      	ldr	r1, [r7, #8]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f000 fc10 	bl	800fbb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f042 0208 	orr.w	r2, r2, #8
 800f39e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f022 0204 	bic.w	r2, r2, #4
 800f3ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	691a      	ldr	r2, [r3, #16]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	430a      	orrs	r2, r1
 800f3c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f3c2:	e023      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68b9      	ldr	r1, [r7, #8]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f000 fc54 	bl	800fc78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	691b      	ldr	r3, [r3, #16]
 800f3fa:	021a      	lsls	r2, r3, #8
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	430a      	orrs	r2, r1
 800f402:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f404:	e002      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	75fb      	strb	r3, [r7, #23]
      break;
 800f40a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f414:	7dfb      	ldrb	r3, [r7, #23]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3718      	adds	r7, #24
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop

0800f420 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f434:	2b01      	cmp	r3, #1
 800f436:	d101      	bne.n	800f43c <HAL_TIM_ConfigClockSource+0x1c>
 800f438:	2302      	movs	r3, #2
 800f43a:	e0dc      	b.n	800f5f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2201      	movs	r2, #1
 800f440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2202      	movs	r2, #2
 800f448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	689b      	ldr	r3, [r3, #8]
 800f452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f454:	68ba      	ldr	r2, [r7, #8]
 800f456:	4b6a      	ldr	r3, [pc, #424]	; (800f600 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f458:	4013      	ands	r3, r2
 800f45a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f462:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4a64      	ldr	r2, [pc, #400]	; (800f604 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f472:	4293      	cmp	r3, r2
 800f474:	f000 80a9 	beq.w	800f5ca <HAL_TIM_ConfigClockSource+0x1aa>
 800f478:	4a62      	ldr	r2, [pc, #392]	; (800f604 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	f200 80ae 	bhi.w	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f480:	4a61      	ldr	r2, [pc, #388]	; (800f608 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f482:	4293      	cmp	r3, r2
 800f484:	f000 80a1 	beq.w	800f5ca <HAL_TIM_ConfigClockSource+0x1aa>
 800f488:	4a5f      	ldr	r2, [pc, #380]	; (800f608 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	f200 80a6 	bhi.w	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f490:	4a5e      	ldr	r2, [pc, #376]	; (800f60c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f492:	4293      	cmp	r3, r2
 800f494:	f000 8099 	beq.w	800f5ca <HAL_TIM_ConfigClockSource+0x1aa>
 800f498:	4a5c      	ldr	r2, [pc, #368]	; (800f60c <HAL_TIM_ConfigClockSource+0x1ec>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	f200 809e 	bhi.w	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f4a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f4a4:	f000 8091 	beq.w	800f5ca <HAL_TIM_ConfigClockSource+0x1aa>
 800f4a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f4ac:	f200 8096 	bhi.w	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f4b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4b4:	f000 8089 	beq.w	800f5ca <HAL_TIM_ConfigClockSource+0x1aa>
 800f4b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4bc:	f200 808e 	bhi.w	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f4c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4c4:	d03e      	beq.n	800f544 <HAL_TIM_ConfigClockSource+0x124>
 800f4c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4ca:	f200 8087 	bhi.w	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4d2:	f000 8086 	beq.w	800f5e2 <HAL_TIM_ConfigClockSource+0x1c2>
 800f4d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4da:	d87f      	bhi.n	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f4dc:	2b70      	cmp	r3, #112	; 0x70
 800f4de:	d01a      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0xf6>
 800f4e0:	2b70      	cmp	r3, #112	; 0x70
 800f4e2:	d87b      	bhi.n	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f4e4:	2b60      	cmp	r3, #96	; 0x60
 800f4e6:	d050      	beq.n	800f58a <HAL_TIM_ConfigClockSource+0x16a>
 800f4e8:	2b60      	cmp	r3, #96	; 0x60
 800f4ea:	d877      	bhi.n	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f4ec:	2b50      	cmp	r3, #80	; 0x50
 800f4ee:	d03c      	beq.n	800f56a <HAL_TIM_ConfigClockSource+0x14a>
 800f4f0:	2b50      	cmp	r3, #80	; 0x50
 800f4f2:	d873      	bhi.n	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f4f4:	2b40      	cmp	r3, #64	; 0x40
 800f4f6:	d058      	beq.n	800f5aa <HAL_TIM_ConfigClockSource+0x18a>
 800f4f8:	2b40      	cmp	r3, #64	; 0x40
 800f4fa:	d86f      	bhi.n	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f4fc:	2b30      	cmp	r3, #48	; 0x30
 800f4fe:	d064      	beq.n	800f5ca <HAL_TIM_ConfigClockSource+0x1aa>
 800f500:	2b30      	cmp	r3, #48	; 0x30
 800f502:	d86b      	bhi.n	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f504:	2b20      	cmp	r3, #32
 800f506:	d060      	beq.n	800f5ca <HAL_TIM_ConfigClockSource+0x1aa>
 800f508:	2b20      	cmp	r3, #32
 800f50a:	d867      	bhi.n	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d05c      	beq.n	800f5ca <HAL_TIM_ConfigClockSource+0x1aa>
 800f510:	2b10      	cmp	r3, #16
 800f512:	d05a      	beq.n	800f5ca <HAL_TIM_ConfigClockSource+0x1aa>
 800f514:	e062      	b.n	800f5dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6818      	ldr	r0, [r3, #0]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	6899      	ldr	r1, [r3, #8]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	685a      	ldr	r2, [r3, #4]
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	f000 fc8b 	bl	800fe40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68ba      	ldr	r2, [r7, #8]
 800f540:	609a      	str	r2, [r3, #8]
      break;
 800f542:	e04f      	b.n	800f5e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6818      	ldr	r0, [r3, #0]
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	6899      	ldr	r1, [r3, #8]
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	685a      	ldr	r2, [r3, #4]
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	f000 fc74 	bl	800fe40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	689a      	ldr	r2, [r3, #8]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f566:	609a      	str	r2, [r3, #8]
      break;
 800f568:	e03c      	b.n	800f5e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6818      	ldr	r0, [r3, #0]
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	6859      	ldr	r1, [r3, #4]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	461a      	mov	r2, r3
 800f578:	f000 fbe4 	bl	800fd44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2150      	movs	r1, #80	; 0x50
 800f582:	4618      	mov	r0, r3
 800f584:	f000 fc3e 	bl	800fe04 <TIM_ITRx_SetConfig>
      break;
 800f588:	e02c      	b.n	800f5e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6818      	ldr	r0, [r3, #0]
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	6859      	ldr	r1, [r3, #4]
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	461a      	mov	r2, r3
 800f598:	f000 fc03 	bl	800fda2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2160      	movs	r1, #96	; 0x60
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f000 fc2e 	bl	800fe04 <TIM_ITRx_SetConfig>
      break;
 800f5a8:	e01c      	b.n	800f5e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6818      	ldr	r0, [r3, #0]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	6859      	ldr	r1, [r3, #4]
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	f000 fbc4 	bl	800fd44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2140      	movs	r1, #64	; 0x40
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f000 fc1e 	bl	800fe04 <TIM_ITRx_SetConfig>
      break;
 800f5c8:	e00c      	b.n	800f5e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	4610      	mov	r0, r2
 800f5d6:	f000 fc15 	bl	800fe04 <TIM_ITRx_SetConfig>
      break;
 800f5da:	e003      	b.n	800f5e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	73fb      	strb	r3, [r7, #15]
      break;
 800f5e0:	e000      	b.n	800f5e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f5e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	ffceff88 	.word	0xffceff88
 800f604:	00100040 	.word	0x00100040
 800f608:	00100030 	.word	0x00100030
 800f60c:	00100020 	.word	0x00100020

0800f610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f618:	bf00      	nop
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f62c:	bf00      	nop
 800f62e:	370c      	adds	r7, #12
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr

0800f638 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f640:	bf00      	nop
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr

0800f64c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a46      	ldr	r2, [pc, #280]	; (800f778 <TIM_Base_SetConfig+0x12c>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d013      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f66a:	d00f      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4a43      	ldr	r2, [pc, #268]	; (800f77c <TIM_Base_SetConfig+0x130>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d00b      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4a42      	ldr	r2, [pc, #264]	; (800f780 <TIM_Base_SetConfig+0x134>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d007      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4a41      	ldr	r2, [pc, #260]	; (800f784 <TIM_Base_SetConfig+0x138>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d003      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a40      	ldr	r2, [pc, #256]	; (800f788 <TIM_Base_SetConfig+0x13c>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d108      	bne.n	800f69e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a35      	ldr	r2, [pc, #212]	; (800f778 <TIM_Base_SetConfig+0x12c>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d01f      	beq.n	800f6e6 <TIM_Base_SetConfig+0x9a>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ac:	d01b      	beq.n	800f6e6 <TIM_Base_SetConfig+0x9a>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4a32      	ldr	r2, [pc, #200]	; (800f77c <TIM_Base_SetConfig+0x130>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d017      	beq.n	800f6e6 <TIM_Base_SetConfig+0x9a>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4a31      	ldr	r2, [pc, #196]	; (800f780 <TIM_Base_SetConfig+0x134>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d013      	beq.n	800f6e6 <TIM_Base_SetConfig+0x9a>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4a30      	ldr	r2, [pc, #192]	; (800f784 <TIM_Base_SetConfig+0x138>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d00f      	beq.n	800f6e6 <TIM_Base_SetConfig+0x9a>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4a2f      	ldr	r2, [pc, #188]	; (800f788 <TIM_Base_SetConfig+0x13c>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d00b      	beq.n	800f6e6 <TIM_Base_SetConfig+0x9a>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4a2e      	ldr	r2, [pc, #184]	; (800f78c <TIM_Base_SetConfig+0x140>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d007      	beq.n	800f6e6 <TIM_Base_SetConfig+0x9a>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a2d      	ldr	r2, [pc, #180]	; (800f790 <TIM_Base_SetConfig+0x144>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d003      	beq.n	800f6e6 <TIM_Base_SetConfig+0x9a>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4a2c      	ldr	r2, [pc, #176]	; (800f794 <TIM_Base_SetConfig+0x148>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d108      	bne.n	800f6f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	695b      	ldr	r3, [r3, #20]
 800f702:	4313      	orrs	r3, r2
 800f704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	68fa      	ldr	r2, [r7, #12]
 800f70a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	689a      	ldr	r2, [r3, #8]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a16      	ldr	r2, [pc, #88]	; (800f778 <TIM_Base_SetConfig+0x12c>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d00f      	beq.n	800f744 <TIM_Base_SetConfig+0xf8>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4a18      	ldr	r2, [pc, #96]	; (800f788 <TIM_Base_SetConfig+0x13c>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d00b      	beq.n	800f744 <TIM_Base_SetConfig+0xf8>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4a17      	ldr	r2, [pc, #92]	; (800f78c <TIM_Base_SetConfig+0x140>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d007      	beq.n	800f744 <TIM_Base_SetConfig+0xf8>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	4a16      	ldr	r2, [pc, #88]	; (800f790 <TIM_Base_SetConfig+0x144>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d003      	beq.n	800f744 <TIM_Base_SetConfig+0xf8>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4a15      	ldr	r2, [pc, #84]	; (800f794 <TIM_Base_SetConfig+0x148>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d103      	bne.n	800f74c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	691a      	ldr	r2, [r3, #16]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	691b      	ldr	r3, [r3, #16]
 800f756:	f003 0301 	and.w	r3, r3, #1
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d105      	bne.n	800f76a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	691b      	ldr	r3, [r3, #16]
 800f762:	f023 0201 	bic.w	r2, r3, #1
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	611a      	str	r2, [r3, #16]
  }
}
 800f76a:	bf00      	nop
 800f76c:	3714      	adds	r7, #20
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	40010000 	.word	0x40010000
 800f77c:	40000400 	.word	0x40000400
 800f780:	40000800 	.word	0x40000800
 800f784:	40000c00 	.word	0x40000c00
 800f788:	40010400 	.word	0x40010400
 800f78c:	40014000 	.word	0x40014000
 800f790:	40014400 	.word	0x40014400
 800f794:	40014800 	.word	0x40014800

0800f798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f798:	b480      	push	{r7}
 800f79a:	b087      	sub	sp, #28
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a1b      	ldr	r3, [r3, #32]
 800f7a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6a1b      	ldr	r3, [r3, #32]
 800f7ac:	f023 0201 	bic.w	r2, r3, #1
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	699b      	ldr	r3, [r3, #24]
 800f7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	4b37      	ldr	r3, [pc, #220]	; (800f8a0 <TIM_OC1_SetConfig+0x108>)
 800f7c4:	4013      	ands	r3, r2
 800f7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f023 0303 	bic.w	r3, r3, #3
 800f7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	f023 0302 	bic.w	r3, r3, #2
 800f7e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	697a      	ldr	r2, [r7, #20]
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4a2d      	ldr	r2, [pc, #180]	; (800f8a4 <TIM_OC1_SetConfig+0x10c>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d00f      	beq.n	800f814 <TIM_OC1_SetConfig+0x7c>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4a2c      	ldr	r2, [pc, #176]	; (800f8a8 <TIM_OC1_SetConfig+0x110>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d00b      	beq.n	800f814 <TIM_OC1_SetConfig+0x7c>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4a2b      	ldr	r2, [pc, #172]	; (800f8ac <TIM_OC1_SetConfig+0x114>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d007      	beq.n	800f814 <TIM_OC1_SetConfig+0x7c>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4a2a      	ldr	r2, [pc, #168]	; (800f8b0 <TIM_OC1_SetConfig+0x118>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d003      	beq.n	800f814 <TIM_OC1_SetConfig+0x7c>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4a29      	ldr	r2, [pc, #164]	; (800f8b4 <TIM_OC1_SetConfig+0x11c>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d10c      	bne.n	800f82e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	f023 0308 	bic.w	r3, r3, #8
 800f81a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	697a      	ldr	r2, [r7, #20]
 800f822:	4313      	orrs	r3, r2
 800f824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	f023 0304 	bic.w	r3, r3, #4
 800f82c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a1c      	ldr	r2, [pc, #112]	; (800f8a4 <TIM_OC1_SetConfig+0x10c>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d00f      	beq.n	800f856 <TIM_OC1_SetConfig+0xbe>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a1b      	ldr	r2, [pc, #108]	; (800f8a8 <TIM_OC1_SetConfig+0x110>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d00b      	beq.n	800f856 <TIM_OC1_SetConfig+0xbe>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a1a      	ldr	r2, [pc, #104]	; (800f8ac <TIM_OC1_SetConfig+0x114>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d007      	beq.n	800f856 <TIM_OC1_SetConfig+0xbe>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a19      	ldr	r2, [pc, #100]	; (800f8b0 <TIM_OC1_SetConfig+0x118>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d003      	beq.n	800f856 <TIM_OC1_SetConfig+0xbe>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4a18      	ldr	r2, [pc, #96]	; (800f8b4 <TIM_OC1_SetConfig+0x11c>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d111      	bne.n	800f87a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f85c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	695b      	ldr	r3, [r3, #20]
 800f86a:	693a      	ldr	r2, [r7, #16]
 800f86c:	4313      	orrs	r3, r2
 800f86e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	699b      	ldr	r3, [r3, #24]
 800f874:	693a      	ldr	r2, [r7, #16]
 800f876:	4313      	orrs	r3, r2
 800f878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	685a      	ldr	r2, [r3, #4]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	697a      	ldr	r2, [r7, #20]
 800f892:	621a      	str	r2, [r3, #32]
}
 800f894:	bf00      	nop
 800f896:	371c      	adds	r7, #28
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr
 800f8a0:	fffeff8f 	.word	0xfffeff8f
 800f8a4:	40010000 	.word	0x40010000
 800f8a8:	40010400 	.word	0x40010400
 800f8ac:	40014000 	.word	0x40014000
 800f8b0:	40014400 	.word	0x40014400
 800f8b4:	40014800 	.word	0x40014800

0800f8b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b087      	sub	sp, #28
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a1b      	ldr	r3, [r3, #32]
 800f8c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6a1b      	ldr	r3, [r3, #32]
 800f8cc:	f023 0210 	bic.w	r2, r3, #16
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	699b      	ldr	r3, [r3, #24]
 800f8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	4b34      	ldr	r3, [pc, #208]	; (800f9b4 <TIM_OC2_SetConfig+0xfc>)
 800f8e4:	4013      	ands	r3, r2
 800f8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	021b      	lsls	r3, r3, #8
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	f023 0320 	bic.w	r3, r3, #32
 800f902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	011b      	lsls	r3, r3, #4
 800f90a:	697a      	ldr	r2, [r7, #20]
 800f90c:	4313      	orrs	r3, r2
 800f90e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4a29      	ldr	r2, [pc, #164]	; (800f9b8 <TIM_OC2_SetConfig+0x100>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d003      	beq.n	800f920 <TIM_OC2_SetConfig+0x68>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a28      	ldr	r2, [pc, #160]	; (800f9bc <TIM_OC2_SetConfig+0x104>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d10d      	bne.n	800f93c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	011b      	lsls	r3, r3, #4
 800f92e:	697a      	ldr	r2, [r7, #20]
 800f930:	4313      	orrs	r3, r2
 800f932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f93a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4a1e      	ldr	r2, [pc, #120]	; (800f9b8 <TIM_OC2_SetConfig+0x100>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d00f      	beq.n	800f964 <TIM_OC2_SetConfig+0xac>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a1d      	ldr	r2, [pc, #116]	; (800f9bc <TIM_OC2_SetConfig+0x104>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d00b      	beq.n	800f964 <TIM_OC2_SetConfig+0xac>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a1c      	ldr	r2, [pc, #112]	; (800f9c0 <TIM_OC2_SetConfig+0x108>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d007      	beq.n	800f964 <TIM_OC2_SetConfig+0xac>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a1b      	ldr	r2, [pc, #108]	; (800f9c4 <TIM_OC2_SetConfig+0x10c>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d003      	beq.n	800f964 <TIM_OC2_SetConfig+0xac>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a1a      	ldr	r2, [pc, #104]	; (800f9c8 <TIM_OC2_SetConfig+0x110>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d113      	bne.n	800f98c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f96a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	695b      	ldr	r3, [r3, #20]
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	699b      	ldr	r3, [r3, #24]
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	693a      	ldr	r2, [r7, #16]
 800f988:	4313      	orrs	r3, r2
 800f98a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	693a      	ldr	r2, [r7, #16]
 800f990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	685a      	ldr	r2, [r3, #4]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	697a      	ldr	r2, [r7, #20]
 800f9a4:	621a      	str	r2, [r3, #32]
}
 800f9a6:	bf00      	nop
 800f9a8:	371c      	adds	r7, #28
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	feff8fff 	.word	0xfeff8fff
 800f9b8:	40010000 	.word	0x40010000
 800f9bc:	40010400 	.word	0x40010400
 800f9c0:	40014000 	.word	0x40014000
 800f9c4:	40014400 	.word	0x40014400
 800f9c8:	40014800 	.word	0x40014800

0800f9cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b087      	sub	sp, #28
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6a1b      	ldr	r3, [r3, #32]
 800f9da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6a1b      	ldr	r3, [r3, #32]
 800f9e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	69db      	ldr	r3, [r3, #28]
 800f9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	4b33      	ldr	r3, [pc, #204]	; (800fac4 <TIM_OC3_SetConfig+0xf8>)
 800f9f8:	4013      	ands	r3, r2
 800f9fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f023 0303 	bic.w	r3, r3, #3
 800fa02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	689b      	ldr	r3, [r3, #8]
 800fa1a:	021b      	lsls	r3, r3, #8
 800fa1c:	697a      	ldr	r2, [r7, #20]
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a28      	ldr	r2, [pc, #160]	; (800fac8 <TIM_OC3_SetConfig+0xfc>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d003      	beq.n	800fa32 <TIM_OC3_SetConfig+0x66>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4a27      	ldr	r2, [pc, #156]	; (800facc <TIM_OC3_SetConfig+0x100>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d10d      	bne.n	800fa4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	021b      	lsls	r3, r3, #8
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4a1d      	ldr	r2, [pc, #116]	; (800fac8 <TIM_OC3_SetConfig+0xfc>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d00f      	beq.n	800fa76 <TIM_OC3_SetConfig+0xaa>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4a1c      	ldr	r2, [pc, #112]	; (800facc <TIM_OC3_SetConfig+0x100>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d00b      	beq.n	800fa76 <TIM_OC3_SetConfig+0xaa>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4a1b      	ldr	r2, [pc, #108]	; (800fad0 <TIM_OC3_SetConfig+0x104>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d007      	beq.n	800fa76 <TIM_OC3_SetConfig+0xaa>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4a1a      	ldr	r2, [pc, #104]	; (800fad4 <TIM_OC3_SetConfig+0x108>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d003      	beq.n	800fa76 <TIM_OC3_SetConfig+0xaa>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a19      	ldr	r2, [pc, #100]	; (800fad8 <TIM_OC3_SetConfig+0x10c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d113      	bne.n	800fa9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	011b      	lsls	r3, r3, #4
 800fa8c:	693a      	ldr	r2, [r7, #16]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	699b      	ldr	r3, [r3, #24]
 800fa96:	011b      	lsls	r3, r3, #4
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	693a      	ldr	r2, [r7, #16]
 800faa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	685a      	ldr	r2, [r3, #4]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	697a      	ldr	r2, [r7, #20]
 800fab6:	621a      	str	r2, [r3, #32]
}
 800fab8:	bf00      	nop
 800faba:	371c      	adds	r7, #28
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	fffeff8f 	.word	0xfffeff8f
 800fac8:	40010000 	.word	0x40010000
 800facc:	40010400 	.word	0x40010400
 800fad0:	40014000 	.word	0x40014000
 800fad4:	40014400 	.word	0x40014400
 800fad8:	40014800 	.word	0x40014800

0800fadc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fadc:	b480      	push	{r7}
 800fade:	b087      	sub	sp, #28
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6a1b      	ldr	r3, [r3, #32]
 800faea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6a1b      	ldr	r3, [r3, #32]
 800faf0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	69db      	ldr	r3, [r3, #28]
 800fb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb04:	68fa      	ldr	r2, [r7, #12]
 800fb06:	4b24      	ldr	r3, [pc, #144]	; (800fb98 <TIM_OC4_SetConfig+0xbc>)
 800fb08:	4013      	ands	r3, r2
 800fb0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	021b      	lsls	r3, r3, #8
 800fb1a:	68fa      	ldr	r2, [r7, #12]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	031b      	lsls	r3, r3, #12
 800fb2e:	693a      	ldr	r2, [r7, #16]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a19      	ldr	r2, [pc, #100]	; (800fb9c <TIM_OC4_SetConfig+0xc0>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d00f      	beq.n	800fb5c <TIM_OC4_SetConfig+0x80>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4a18      	ldr	r2, [pc, #96]	; (800fba0 <TIM_OC4_SetConfig+0xc4>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d00b      	beq.n	800fb5c <TIM_OC4_SetConfig+0x80>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a17      	ldr	r2, [pc, #92]	; (800fba4 <TIM_OC4_SetConfig+0xc8>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d007      	beq.n	800fb5c <TIM_OC4_SetConfig+0x80>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a16      	ldr	r2, [pc, #88]	; (800fba8 <TIM_OC4_SetConfig+0xcc>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d003      	beq.n	800fb5c <TIM_OC4_SetConfig+0x80>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a15      	ldr	r2, [pc, #84]	; (800fbac <TIM_OC4_SetConfig+0xd0>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d109      	bne.n	800fb70 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	695b      	ldr	r3, [r3, #20]
 800fb68:	019b      	lsls	r3, r3, #6
 800fb6a:	697a      	ldr	r2, [r7, #20]
 800fb6c:	4313      	orrs	r3, r2
 800fb6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	685a      	ldr	r2, [r3, #4]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	693a      	ldr	r2, [r7, #16]
 800fb88:	621a      	str	r2, [r3, #32]
}
 800fb8a:	bf00      	nop
 800fb8c:	371c      	adds	r7, #28
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	feff8fff 	.word	0xfeff8fff
 800fb9c:	40010000 	.word	0x40010000
 800fba0:	40010400 	.word	0x40010400
 800fba4:	40014000 	.word	0x40014000
 800fba8:	40014400 	.word	0x40014400
 800fbac:	40014800 	.word	0x40014800

0800fbb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b087      	sub	sp, #28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6a1b      	ldr	r3, [r3, #32]
 800fbbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6a1b      	ldr	r3, [r3, #32]
 800fbc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	4b21      	ldr	r3, [pc, #132]	; (800fc60 <TIM_OC5_SetConfig+0xb0>)
 800fbdc:	4013      	ands	r3, r2
 800fbde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fbf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	041b      	lsls	r3, r3, #16
 800fbf8:	693a      	ldr	r2, [r7, #16]
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4a18      	ldr	r2, [pc, #96]	; (800fc64 <TIM_OC5_SetConfig+0xb4>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d00f      	beq.n	800fc26 <TIM_OC5_SetConfig+0x76>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4a17      	ldr	r2, [pc, #92]	; (800fc68 <TIM_OC5_SetConfig+0xb8>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d00b      	beq.n	800fc26 <TIM_OC5_SetConfig+0x76>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4a16      	ldr	r2, [pc, #88]	; (800fc6c <TIM_OC5_SetConfig+0xbc>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d007      	beq.n	800fc26 <TIM_OC5_SetConfig+0x76>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	4a15      	ldr	r2, [pc, #84]	; (800fc70 <TIM_OC5_SetConfig+0xc0>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d003      	beq.n	800fc26 <TIM_OC5_SetConfig+0x76>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	4a14      	ldr	r2, [pc, #80]	; (800fc74 <TIM_OC5_SetConfig+0xc4>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d109      	bne.n	800fc3a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	695b      	ldr	r3, [r3, #20]
 800fc32:	021b      	lsls	r3, r3, #8
 800fc34:	697a      	ldr	r2, [r7, #20]
 800fc36:	4313      	orrs	r3, r2
 800fc38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	697a      	ldr	r2, [r7, #20]
 800fc3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	685a      	ldr	r2, [r3, #4]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	693a      	ldr	r2, [r7, #16]
 800fc52:	621a      	str	r2, [r3, #32]
}
 800fc54:	bf00      	nop
 800fc56:	371c      	adds	r7, #28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	fffeff8f 	.word	0xfffeff8f
 800fc64:	40010000 	.word	0x40010000
 800fc68:	40010400 	.word	0x40010400
 800fc6c:	40014000 	.word	0x40014000
 800fc70:	40014400 	.word	0x40014400
 800fc74:	40014800 	.word	0x40014800

0800fc78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b087      	sub	sp, #28
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6a1b      	ldr	r3, [r3, #32]
 800fc86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a1b      	ldr	r3, [r3, #32]
 800fc8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	4b22      	ldr	r3, [pc, #136]	; (800fd2c <TIM_OC6_SetConfig+0xb4>)
 800fca4:	4013      	ands	r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	021b      	lsls	r3, r3, #8
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fcba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	051b      	lsls	r3, r3, #20
 800fcc2:	693a      	ldr	r2, [r7, #16]
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4a19      	ldr	r2, [pc, #100]	; (800fd30 <TIM_OC6_SetConfig+0xb8>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d00f      	beq.n	800fcf0 <TIM_OC6_SetConfig+0x78>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	4a18      	ldr	r2, [pc, #96]	; (800fd34 <TIM_OC6_SetConfig+0xbc>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d00b      	beq.n	800fcf0 <TIM_OC6_SetConfig+0x78>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4a17      	ldr	r2, [pc, #92]	; (800fd38 <TIM_OC6_SetConfig+0xc0>)
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	d007      	beq.n	800fcf0 <TIM_OC6_SetConfig+0x78>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	4a16      	ldr	r2, [pc, #88]	; (800fd3c <TIM_OC6_SetConfig+0xc4>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d003      	beq.n	800fcf0 <TIM_OC6_SetConfig+0x78>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	4a15      	ldr	r2, [pc, #84]	; (800fd40 <TIM_OC6_SetConfig+0xc8>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d109      	bne.n	800fd04 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fcf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	695b      	ldr	r3, [r3, #20]
 800fcfc:	029b      	lsls	r3, r3, #10
 800fcfe:	697a      	ldr	r2, [r7, #20]
 800fd00:	4313      	orrs	r3, r2
 800fd02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	697a      	ldr	r2, [r7, #20]
 800fd08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	68fa      	ldr	r2, [r7, #12]
 800fd0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	685a      	ldr	r2, [r3, #4]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	693a      	ldr	r2, [r7, #16]
 800fd1c:	621a      	str	r2, [r3, #32]
}
 800fd1e:	bf00      	nop
 800fd20:	371c      	adds	r7, #28
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr
 800fd2a:	bf00      	nop
 800fd2c:	feff8fff 	.word	0xfeff8fff
 800fd30:	40010000 	.word	0x40010000
 800fd34:	40010400 	.word	0x40010400
 800fd38:	40014000 	.word	0x40014000
 800fd3c:	40014400 	.word	0x40014400
 800fd40:	40014800 	.word	0x40014800

0800fd44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b087      	sub	sp, #28
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	60b9      	str	r1, [r7, #8]
 800fd4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	6a1b      	ldr	r3, [r3, #32]
 800fd54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6a1b      	ldr	r3, [r3, #32]
 800fd5a:	f023 0201 	bic.w	r2, r3, #1
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	699b      	ldr	r3, [r3, #24]
 800fd66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	011b      	lsls	r3, r3, #4
 800fd74:	693a      	ldr	r2, [r7, #16]
 800fd76:	4313      	orrs	r3, r2
 800fd78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	f023 030a 	bic.w	r3, r3, #10
 800fd80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd82:	697a      	ldr	r2, [r7, #20]
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	4313      	orrs	r3, r2
 800fd88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	693a      	ldr	r2, [r7, #16]
 800fd8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	621a      	str	r2, [r3, #32]
}
 800fd96:	bf00      	nop
 800fd98:	371c      	adds	r7, #28
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr

0800fda2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fda2:	b480      	push	{r7}
 800fda4:	b087      	sub	sp, #28
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	60f8      	str	r0, [r7, #12]
 800fdaa:	60b9      	str	r1, [r7, #8]
 800fdac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6a1b      	ldr	r3, [r3, #32]
 800fdb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6a1b      	ldr	r3, [r3, #32]
 800fdb8:	f023 0210 	bic.w	r2, r3, #16
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	699b      	ldr	r3, [r3, #24]
 800fdc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fdcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	031b      	lsls	r3, r3, #12
 800fdd2:	693a      	ldr	r2, [r7, #16]
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fdde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	011b      	lsls	r3, r3, #4
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	693a      	ldr	r2, [r7, #16]
 800fdee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	697a      	ldr	r2, [r7, #20]
 800fdf4:	621a      	str	r2, [r3, #32]
}
 800fdf6:	bf00      	nop
 800fdf8:	371c      	adds	r7, #28
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
	...

0800fe04 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	4b09      	ldr	r3, [pc, #36]	; (800fe3c <TIM_ITRx_SetConfig+0x38>)
 800fe18:	4013      	ands	r3, r2
 800fe1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fe1c:	683a      	ldr	r2, [r7, #0]
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	4313      	orrs	r3, r2
 800fe22:	f043 0307 	orr.w	r3, r3, #7
 800fe26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	609a      	str	r2, [r3, #8]
}
 800fe2e:	bf00      	nop
 800fe30:	3714      	adds	r7, #20
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop
 800fe3c:	ffcfff8f 	.word	0xffcfff8f

0800fe40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b087      	sub	sp, #28
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
 800fe4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	689b      	ldr	r3, [r3, #8]
 800fe52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fe5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	021a      	lsls	r2, r3, #8
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	431a      	orrs	r2, r3
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	4313      	orrs	r3, r2
 800fe68:	697a      	ldr	r2, [r7, #20]
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	697a      	ldr	r2, [r7, #20]
 800fe72:	609a      	str	r2, [r3, #8]
}
 800fe74:	bf00      	nop
 800fe76:	371c      	adds	r7, #28
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b087      	sub	sp, #28
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	f003 031f 	and.w	r3, r3, #31
 800fe92:	2201      	movs	r2, #1
 800fe94:	fa02 f303 	lsl.w	r3, r2, r3
 800fe98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6a1a      	ldr	r2, [r3, #32]
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	43db      	mvns	r3, r3
 800fea2:	401a      	ands	r2, r3
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6a1a      	ldr	r2, [r3, #32]
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	f003 031f 	and.w	r3, r3, #31
 800feb2:	6879      	ldr	r1, [r7, #4]
 800feb4:	fa01 f303 	lsl.w	r3, r1, r3
 800feb8:	431a      	orrs	r2, r3
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	621a      	str	r2, [r3, #32]
}
 800febe:	bf00      	nop
 800fec0:	371c      	adds	r7, #28
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
	...

0800fecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fecc:	b480      	push	{r7}
 800fece:	b085      	sub	sp, #20
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d101      	bne.n	800fee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fee0:	2302      	movs	r3, #2
 800fee2:	e06d      	b.n	800ffc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2201      	movs	r2, #1
 800fee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2202      	movs	r2, #2
 800fef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	4a30      	ldr	r2, [pc, #192]	; (800ffcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d004      	beq.n	800ff18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	4a2f      	ldr	r2, [pc, #188]	; (800ffd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d108      	bne.n	800ff2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ff1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	68fa      	ldr	r2, [r7, #12]
 800ff26:	4313      	orrs	r3, r2
 800ff28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	68fa      	ldr	r2, [r7, #12]
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4a20      	ldr	r2, [pc, #128]	; (800ffcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d022      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff56:	d01d      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4a1d      	ldr	r2, [pc, #116]	; (800ffd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d018      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	4a1c      	ldr	r2, [pc, #112]	; (800ffd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d013      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a1a      	ldr	r2, [pc, #104]	; (800ffdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d00e      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4a15      	ldr	r2, [pc, #84]	; (800ffd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d009      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4a16      	ldr	r2, [pc, #88]	; (800ffe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d004      	beq.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	4a15      	ldr	r2, [pc, #84]	; (800ffe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d10c      	bne.n	800ffae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	68ba      	ldr	r2, [r7, #8]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3714      	adds	r7, #20
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr
 800ffcc:	40010000 	.word	0x40010000
 800ffd0:	40010400 	.word	0x40010400
 800ffd4:	40000400 	.word	0x40000400
 800ffd8:	40000800 	.word	0x40000800
 800ffdc:	40000c00 	.word	0x40000c00
 800ffe0:	40001800 	.word	0x40001800
 800ffe4:	40014000 	.word	0x40014000

0800ffe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fff2:	2300      	movs	r3, #0
 800fff4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d101      	bne.n	8010004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010000:	2302      	movs	r3, #2
 8010002:	e065      	b.n	80100d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2201      	movs	r2, #1
 8010008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	4313      	orrs	r3, r2
 8010018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	4313      	orrs	r3, r2
 8010026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	4313      	orrs	r3, r2
 8010034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4313      	orrs	r3, r2
 8010042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	691b      	ldr	r3, [r3, #16]
 801004e:	4313      	orrs	r3, r2
 8010050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	695b      	ldr	r3, [r3, #20]
 801005c:	4313      	orrs	r3, r2
 801005e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801006a:	4313      	orrs	r3, r2
 801006c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	699b      	ldr	r3, [r3, #24]
 8010078:	041b      	lsls	r3, r3, #16
 801007a:	4313      	orrs	r3, r2
 801007c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4a16      	ldr	r2, [pc, #88]	; (80100dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010084:	4293      	cmp	r3, r2
 8010086:	d004      	beq.n	8010092 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4a14      	ldr	r2, [pc, #80]	; (80100e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d115      	bne.n	80100be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801009c:	051b      	lsls	r3, r3, #20
 801009e:	4313      	orrs	r3, r2
 80100a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	69db      	ldr	r3, [r3, #28]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	6a1b      	ldr	r3, [r3, #32]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68fa      	ldr	r2, [r7, #12]
 80100c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr
 80100dc:	40010000 	.word	0x40010000
 80100e0:	40010400 	.word	0x40010400

080100e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b083      	sub	sp, #12
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80100ec:	bf00      	nop
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010100:	bf00      	nop
 8010102:	370c      	adds	r7, #12
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr

0801010c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010114:	bf00      	nop
 8010116:	370c      	adds	r7, #12
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801012e:	2301      	movs	r3, #1
 8010130:	e042      	b.n	80101b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010138:	2b00      	cmp	r3, #0
 801013a:	d106      	bne.n	801014a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7f3 fbf7 	bl	8003938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2224      	movs	r2, #36	; 0x24
 801014e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f022 0201 	bic.w	r2, r2, #1
 8010160:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010166:	2b00      	cmp	r3, #0
 8010168:	d002      	beq.n	8010170 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f001 fc42 	bl	80119f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 fed7 	bl	8010f24 <UART_SetConfig>
 8010176:	4603      	mov	r3, r0
 8010178:	2b01      	cmp	r3, #1
 801017a:	d101      	bne.n	8010180 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	e01b      	b.n	80101b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	685a      	ldr	r2, [r3, #4]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801018e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	689a      	ldr	r2, [r3, #8]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801019e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	681a      	ldr	r2, [r3, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f042 0201 	orr.w	r2, r2, #1
 80101ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f001 fcc1 	bl	8011b38 <UART_CheckIdleState>
 80101b6:	4603      	mov	r3, r0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b08a      	sub	sp, #40	; 0x28
 80101c4:	af02      	add	r7, sp, #8
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	603b      	str	r3, [r7, #0]
 80101cc:	4613      	mov	r3, r2
 80101ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101d6:	2b20      	cmp	r3, #32
 80101d8:	d17b      	bne.n	80102d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d002      	beq.n	80101e6 <HAL_UART_Transmit+0x26>
 80101e0:	88fb      	ldrh	r3, [r7, #6]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d101      	bne.n	80101ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80101e6:	2301      	movs	r3, #1
 80101e8:	e074      	b.n	80102d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	2200      	movs	r2, #0
 80101ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2221      	movs	r2, #33	; 0x21
 80101f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80101fa:	f7f3 ff1b 	bl	8004034 <HAL_GetTick>
 80101fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	88fa      	ldrh	r2, [r7, #6]
 8010204:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	88fa      	ldrh	r2, [r7, #6]
 801020c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010218:	d108      	bne.n	801022c <HAL_UART_Transmit+0x6c>
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	691b      	ldr	r3, [r3, #16]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d104      	bne.n	801022c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010222:	2300      	movs	r3, #0
 8010224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	61bb      	str	r3, [r7, #24]
 801022a:	e003      	b.n	8010234 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010230:	2300      	movs	r3, #0
 8010232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010234:	e030      	b.n	8010298 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	2200      	movs	r2, #0
 801023e:	2180      	movs	r1, #128	; 0x80
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f001 fd23 	bl	8011c8c <UART_WaitOnFlagUntilTimeout>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d005      	beq.n	8010258 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2220      	movs	r2, #32
 8010250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010254:	2303      	movs	r3, #3
 8010256:	e03d      	b.n	80102d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d10b      	bne.n	8010276 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	881b      	ldrh	r3, [r3, #0]
 8010262:	461a      	mov	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801026c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	3302      	adds	r3, #2
 8010272:	61bb      	str	r3, [r7, #24]
 8010274:	e007      	b.n	8010286 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	781a      	ldrb	r2, [r3, #0]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	3301      	adds	r3, #1
 8010284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801028c:	b29b      	uxth	r3, r3
 801028e:	3b01      	subs	r3, #1
 8010290:	b29a      	uxth	r2, r3
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801029e:	b29b      	uxth	r3, r3
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d1c8      	bne.n	8010236 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	2200      	movs	r2, #0
 80102ac:	2140      	movs	r1, #64	; 0x40
 80102ae:	68f8      	ldr	r0, [r7, #12]
 80102b0:	f001 fcec 	bl	8011c8c <UART_WaitOnFlagUntilTimeout>
 80102b4:	4603      	mov	r3, r0
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d005      	beq.n	80102c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2220      	movs	r2, #32
 80102be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80102c2:	2303      	movs	r3, #3
 80102c4:	e006      	b.n	80102d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2220      	movs	r2, #32
 80102ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80102ce:	2300      	movs	r3, #0
 80102d0:	e000      	b.n	80102d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80102d2:	2302      	movs	r3, #2
  }
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3720      	adds	r7, #32
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b08a      	sub	sp, #40	; 0x28
 80102e0:	af02      	add	r7, sp, #8
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	603b      	str	r3, [r7, #0]
 80102e8:	4613      	mov	r3, r2
 80102ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102f2:	2b20      	cmp	r3, #32
 80102f4:	f040 80b5 	bne.w	8010462 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d002      	beq.n	8010304 <HAL_UART_Receive+0x28>
 80102fe:	88fb      	ldrh	r3, [r7, #6]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d101      	bne.n	8010308 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010304:	2301      	movs	r3, #1
 8010306:	e0ad      	b.n	8010464 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2200      	movs	r2, #0
 801030c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2222      	movs	r2, #34	; 0x22
 8010314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2200      	movs	r2, #0
 801031c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801031e:	f7f3 fe89 	bl	8004034 <HAL_GetTick>
 8010322:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	88fa      	ldrh	r2, [r7, #6]
 8010328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	88fa      	ldrh	r2, [r7, #6]
 8010330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801033c:	d10e      	bne.n	801035c <HAL_UART_Receive+0x80>
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d105      	bne.n	8010352 <HAL_UART_Receive+0x76>
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f240 12ff 	movw	r2, #511	; 0x1ff
 801034c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010350:	e02d      	b.n	80103ae <HAL_UART_Receive+0xd2>
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	22ff      	movs	r2, #255	; 0xff
 8010356:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801035a:	e028      	b.n	80103ae <HAL_UART_Receive+0xd2>
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	689b      	ldr	r3, [r3, #8]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10d      	bne.n	8010380 <HAL_UART_Receive+0xa4>
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	691b      	ldr	r3, [r3, #16]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d104      	bne.n	8010376 <HAL_UART_Receive+0x9a>
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	22ff      	movs	r2, #255	; 0xff
 8010370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010374:	e01b      	b.n	80103ae <HAL_UART_Receive+0xd2>
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	227f      	movs	r2, #127	; 0x7f
 801037a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801037e:	e016      	b.n	80103ae <HAL_UART_Receive+0xd2>
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010388:	d10d      	bne.n	80103a6 <HAL_UART_Receive+0xca>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	691b      	ldr	r3, [r3, #16]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d104      	bne.n	801039c <HAL_UART_Receive+0xc0>
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	227f      	movs	r2, #127	; 0x7f
 8010396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801039a:	e008      	b.n	80103ae <HAL_UART_Receive+0xd2>
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	223f      	movs	r2, #63	; 0x3f
 80103a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103a4:	e003      	b.n	80103ae <HAL_UART_Receive+0xd2>
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80103b4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103be:	d108      	bne.n	80103d2 <HAL_UART_Receive+0xf6>
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	691b      	ldr	r3, [r3, #16]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d104      	bne.n	80103d2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80103c8:	2300      	movs	r3, #0
 80103ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	61bb      	str	r3, [r7, #24]
 80103d0:	e003      	b.n	80103da <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80103d6:	2300      	movs	r3, #0
 80103d8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80103da:	e036      	b.n	801044a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	2200      	movs	r2, #0
 80103e4:	2120      	movs	r1, #32
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f001 fc50 	bl	8011c8c <UART_WaitOnFlagUntilTimeout>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d005      	beq.n	80103fe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2220      	movs	r2, #32
 80103f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80103fa:	2303      	movs	r3, #3
 80103fc:	e032      	b.n	8010464 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d10c      	bne.n	801041e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040a:	b29a      	uxth	r2, r3
 801040c:	8a7b      	ldrh	r3, [r7, #18]
 801040e:	4013      	ands	r3, r2
 8010410:	b29a      	uxth	r2, r3
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	3302      	adds	r3, #2
 801041a:	61bb      	str	r3, [r7, #24]
 801041c:	e00c      	b.n	8010438 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010424:	b2da      	uxtb	r2, r3
 8010426:	8a7b      	ldrh	r3, [r7, #18]
 8010428:	b2db      	uxtb	r3, r3
 801042a:	4013      	ands	r3, r2
 801042c:	b2da      	uxtb	r2, r3
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	3301      	adds	r3, #1
 8010436:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801043e:	b29b      	uxth	r3, r3
 8010440:	3b01      	subs	r3, #1
 8010442:	b29a      	uxth	r2, r3
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010450:	b29b      	uxth	r3, r3
 8010452:	2b00      	cmp	r3, #0
 8010454:	d1c2      	bne.n	80103dc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2220      	movs	r2, #32
 801045a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801045e:	2300      	movs	r3, #0
 8010460:	e000      	b.n	8010464 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010462:	2302      	movs	r3, #2
  }
}
 8010464:	4618      	mov	r0, r3
 8010466:	3720      	adds	r7, #32
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b08a      	sub	sp, #40	; 0x28
 8010470:	af00      	add	r7, sp, #0
 8010472:	60f8      	str	r0, [r7, #12]
 8010474:	60b9      	str	r1, [r7, #8]
 8010476:	4613      	mov	r3, r2
 8010478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010480:	2b20      	cmp	r3, #32
 8010482:	d137      	bne.n	80104f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d002      	beq.n	8010490 <HAL_UART_Receive_IT+0x24>
 801048a:	88fb      	ldrh	r3, [r7, #6]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d101      	bne.n	8010494 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010490:	2301      	movs	r3, #1
 8010492:	e030      	b.n	80104f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2200      	movs	r2, #0
 8010498:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4a18      	ldr	r2, [pc, #96]	; (8010500 <HAL_UART_Receive_IT+0x94>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d01f      	beq.n	80104e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d018      	beq.n	80104e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	e853 3f00 	ldrex	r3, [r3]
 80104be:	613b      	str	r3, [r7, #16]
   return(result);
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80104c6:	627b      	str	r3, [r7, #36]	; 0x24
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	461a      	mov	r2, r3
 80104ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d0:	623b      	str	r3, [r7, #32]
 80104d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d4:	69f9      	ldr	r1, [r7, #28]
 80104d6:	6a3a      	ldr	r2, [r7, #32]
 80104d8:	e841 2300 	strex	r3, r2, [r1]
 80104dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d1e6      	bne.n	80104b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80104e4:	88fb      	ldrh	r3, [r7, #6]
 80104e6:	461a      	mov	r2, r3
 80104e8:	68b9      	ldr	r1, [r7, #8]
 80104ea:	68f8      	ldr	r0, [r7, #12]
 80104ec:	f001 fc3c 	bl	8011d68 <UART_Start_Receive_IT>
 80104f0:	4603      	mov	r3, r0
 80104f2:	e000      	b.n	80104f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80104f4:	2302      	movs	r3, #2
  }
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3728      	adds	r7, #40	; 0x28
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	58000c00 	.word	0x58000c00

08010504 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b08a      	sub	sp, #40	; 0x28
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	4613      	mov	r3, r2
 8010510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010518:	2b20      	cmp	r3, #32
 801051a:	d167      	bne.n	80105ec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d002      	beq.n	8010528 <HAL_UART_Transmit_DMA+0x24>
 8010522:	88fb      	ldrh	r3, [r7, #6]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d101      	bne.n	801052c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010528:	2301      	movs	r3, #1
 801052a:	e060      	b.n	80105ee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	68ba      	ldr	r2, [r7, #8]
 8010530:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	88fa      	ldrh	r2, [r7, #6]
 8010536:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	88fa      	ldrh	r2, [r7, #6]
 801053e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	2200      	movs	r2, #0
 8010546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2221      	movs	r2, #33	; 0x21
 801054e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010556:	2b00      	cmp	r3, #0
 8010558:	d028      	beq.n	80105ac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801055e:	4a26      	ldr	r2, [pc, #152]	; (80105f8 <HAL_UART_Transmit_DMA+0xf4>)
 8010560:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010566:	4a25      	ldr	r2, [pc, #148]	; (80105fc <HAL_UART_Transmit_DMA+0xf8>)
 8010568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801056e:	4a24      	ldr	r2, [pc, #144]	; (8010600 <HAL_UART_Transmit_DMA+0xfc>)
 8010570:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010576:	2200      	movs	r2, #0
 8010578:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010582:	4619      	mov	r1, r3
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	3328      	adds	r3, #40	; 0x28
 801058a:	461a      	mov	r2, r3
 801058c:	88fb      	ldrh	r3, [r7, #6]
 801058e:	f7f6 f9d5 	bl	800693c <HAL_DMA_Start_IT>
 8010592:	4603      	mov	r3, r0
 8010594:	2b00      	cmp	r3, #0
 8010596:	d009      	beq.n	80105ac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2210      	movs	r2, #16
 801059c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2220      	movs	r2, #32
 80105a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80105a8:	2301      	movs	r3, #1
 80105aa:	e020      	b.n	80105ee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2240      	movs	r2, #64	; 0x40
 80105b2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	3308      	adds	r3, #8
 80105ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	e853 3f00 	ldrex	r3, [r3]
 80105c2:	613b      	str	r3, [r7, #16]
   return(result);
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105ca:	627b      	str	r3, [r7, #36]	; 0x24
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3308      	adds	r3, #8
 80105d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105d4:	623a      	str	r2, [r7, #32]
 80105d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d8:	69f9      	ldr	r1, [r7, #28]
 80105da:	6a3a      	ldr	r2, [r7, #32]
 80105dc:	e841 2300 	strex	r3, r2, [r1]
 80105e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1e5      	bne.n	80105b4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80105e8:	2300      	movs	r3, #0
 80105ea:	e000      	b.n	80105ee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80105ec:	2302      	movs	r3, #2
  }
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3728      	adds	r7, #40	; 0x28
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	080120fd 	.word	0x080120fd
 80105fc:	08012193 	.word	0x08012193
 8010600:	080121af 	.word	0x080121af

08010604 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b09a      	sub	sp, #104	; 0x68
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010614:	e853 3f00 	ldrex	r3, [r3]
 8010618:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801061a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801061c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010620:	667b      	str	r3, [r7, #100]	; 0x64
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	461a      	mov	r2, r3
 8010628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801062a:	657b      	str	r3, [r7, #84]	; 0x54
 801062c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010630:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010632:	e841 2300 	strex	r3, r2, [r1]
 8010636:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1e6      	bne.n	801060c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	3308      	adds	r3, #8
 8010644:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010648:	e853 3f00 	ldrex	r3, [r3]
 801064c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801064e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010650:	4b46      	ldr	r3, [pc, #280]	; (801076c <HAL_UART_AbortReceive+0x168>)
 8010652:	4013      	ands	r3, r2
 8010654:	663b      	str	r3, [r7, #96]	; 0x60
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	3308      	adds	r3, #8
 801065c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801065e:	643a      	str	r2, [r7, #64]	; 0x40
 8010660:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010666:	e841 2300 	strex	r3, r2, [r1]
 801066a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801066c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1e5      	bne.n	801063e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010676:	2b01      	cmp	r3, #1
 8010678:	d118      	bne.n	80106ac <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	e853 3f00 	ldrex	r3, [r3]
 8010686:	61fb      	str	r3, [r7, #28]
   return(result);
 8010688:	69fb      	ldr	r3, [r7, #28]
 801068a:	f023 0310 	bic.w	r3, r3, #16
 801068e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	461a      	mov	r2, r3
 8010696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010698:	62fb      	str	r3, [r7, #44]	; 0x2c
 801069a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801069e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106a0:	e841 2300 	strex	r3, r2, [r1]
 80106a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1e6      	bne.n	801067a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	689b      	ldr	r3, [r3, #8]
 80106b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106b6:	2b40      	cmp	r3, #64	; 0x40
 80106b8:	d13b      	bne.n	8010732 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	3308      	adds	r3, #8
 80106c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	e853 3f00 	ldrex	r3, [r3]
 80106c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	3308      	adds	r3, #8
 80106d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106da:	61ba      	str	r2, [r7, #24]
 80106dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106de:	6979      	ldr	r1, [r7, #20]
 80106e0:	69ba      	ldr	r2, [r7, #24]
 80106e2:	e841 2300 	strex	r3, r2, [r1]
 80106e6:	613b      	str	r3, [r7, #16]
   return(result);
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1e5      	bne.n	80106ba <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d01c      	beq.n	8010732 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106fe:	2200      	movs	r2, #0
 8010700:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010708:	4618      	mov	r0, r3
 801070a:	f7f6 fb81 	bl	8006e10 <HAL_DMA_Abort>
 801070e:	4603      	mov	r3, r0
 8010710:	2b00      	cmp	r3, #0
 8010712:	d00e      	beq.n	8010732 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801071a:	4618      	mov	r0, r3
 801071c:	f7f8 f806 	bl	800872c <HAL_DMA_GetError>
 8010720:	4603      	mov	r3, r0
 8010722:	2b20      	cmp	r3, #32
 8010724:	d105      	bne.n	8010732 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2210      	movs	r2, #16
 801072a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801072e:	2303      	movs	r3, #3
 8010730:	e017      	b.n	8010762 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	220f      	movs	r2, #15
 8010740:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	699a      	ldr	r2, [r3, #24]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f042 0208 	orr.w	r2, r2, #8
 8010750:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2220      	movs	r2, #32
 8010756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3768      	adds	r7, #104	; 0x68
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	effffffe 	.word	0xeffffffe

08010770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b0ba      	sub	sp, #232	; 0xe8
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	69db      	ldr	r3, [r3, #28]
 801077e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	689b      	ldr	r3, [r3, #8]
 8010792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801079a:	f640 030f 	movw	r3, #2063	; 0x80f
 801079e:	4013      	ands	r3, r2
 80107a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80107a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d11b      	bne.n	80107e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80107ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107b0:	f003 0320 	and.w	r3, r3, #32
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d015      	beq.n	80107e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80107b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107bc:	f003 0320 	and.w	r3, r3, #32
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d105      	bne.n	80107d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80107c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d009      	beq.n	80107e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f000 8377 	beq.w	8010ec8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	4798      	blx	r3
      }
      return;
 80107e2:	e371      	b.n	8010ec8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80107e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f000 8123 	beq.w	8010a34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80107ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80107f2:	4b8d      	ldr	r3, [pc, #564]	; (8010a28 <HAL_UART_IRQHandler+0x2b8>)
 80107f4:	4013      	ands	r3, r2
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d106      	bne.n	8010808 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80107fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80107fe:	4b8b      	ldr	r3, [pc, #556]	; (8010a2c <HAL_UART_IRQHandler+0x2bc>)
 8010800:	4013      	ands	r3, r2
 8010802:	2b00      	cmp	r3, #0
 8010804:	f000 8116 	beq.w	8010a34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801080c:	f003 0301 	and.w	r3, r3, #1
 8010810:	2b00      	cmp	r3, #0
 8010812:	d011      	beq.n	8010838 <HAL_UART_IRQHandler+0xc8>
 8010814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00b      	beq.n	8010838 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	2201      	movs	r2, #1
 8010826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801082e:	f043 0201 	orr.w	r2, r3, #1
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801083c:	f003 0302 	and.w	r3, r3, #2
 8010840:	2b00      	cmp	r3, #0
 8010842:	d011      	beq.n	8010868 <HAL_UART_IRQHandler+0xf8>
 8010844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010848:	f003 0301 	and.w	r3, r3, #1
 801084c:	2b00      	cmp	r3, #0
 801084e:	d00b      	beq.n	8010868 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2202      	movs	r2, #2
 8010856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801085e:	f043 0204 	orr.w	r2, r3, #4
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801086c:	f003 0304 	and.w	r3, r3, #4
 8010870:	2b00      	cmp	r3, #0
 8010872:	d011      	beq.n	8010898 <HAL_UART_IRQHandler+0x128>
 8010874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010878:	f003 0301 	and.w	r3, r3, #1
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00b      	beq.n	8010898 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2204      	movs	r2, #4
 8010886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801088e:	f043 0202 	orr.w	r2, r3, #2
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801089c:	f003 0308 	and.w	r3, r3, #8
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d017      	beq.n	80108d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80108a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108a8:	f003 0320 	and.w	r3, r3, #32
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d105      	bne.n	80108bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80108b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80108b4:	4b5c      	ldr	r3, [pc, #368]	; (8010a28 <HAL_UART_IRQHandler+0x2b8>)
 80108b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d00b      	beq.n	80108d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2208      	movs	r2, #8
 80108c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108ca:	f043 0208 	orr.w	r2, r3, #8
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80108d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d012      	beq.n	8010906 <HAL_UART_IRQHandler+0x196>
 80108e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d00c      	beq.n	8010906 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80108f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108fc:	f043 0220 	orr.w	r2, r3, #32
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801090c:	2b00      	cmp	r3, #0
 801090e:	f000 82dd 	beq.w	8010ecc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010916:	f003 0320 	and.w	r3, r3, #32
 801091a:	2b00      	cmp	r3, #0
 801091c:	d013      	beq.n	8010946 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801091e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010922:	f003 0320 	and.w	r3, r3, #32
 8010926:	2b00      	cmp	r3, #0
 8010928:	d105      	bne.n	8010936 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801092a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010932:	2b00      	cmp	r3, #0
 8010934:	d007      	beq.n	8010946 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801093a:	2b00      	cmp	r3, #0
 801093c:	d003      	beq.n	8010946 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801094c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	689b      	ldr	r3, [r3, #8]
 8010956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801095a:	2b40      	cmp	r3, #64	; 0x40
 801095c:	d005      	beq.n	801096a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801095e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010962:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010966:	2b00      	cmp	r3, #0
 8010968:	d054      	beq.n	8010a14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f001 fb60 	bl	8012030 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	689b      	ldr	r3, [r3, #8]
 8010976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801097a:	2b40      	cmp	r3, #64	; 0x40
 801097c:	d146      	bne.n	8010a0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	3308      	adds	r3, #8
 8010984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801098c:	e853 3f00 	ldrex	r3, [r3]
 8010990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801099c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	3308      	adds	r3, #8
 80109a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80109aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80109ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80109b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80109ba:	e841 2300 	strex	r3, r2, [r1]
 80109be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80109c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d1d9      	bne.n	801097e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d017      	beq.n	8010a04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109da:	4a15      	ldr	r2, [pc, #84]	; (8010a30 <HAL_UART_IRQHandler+0x2c0>)
 80109dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7f6 fd31 	bl	800744c <HAL_DMA_Abort_IT>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d019      	beq.n	8010a24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80109fe:	4610      	mov	r0, r2
 8010a00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a02:	e00f      	b.n	8010a24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 fa77 	bl	8010ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a0a:	e00b      	b.n	8010a24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f000 fa73 	bl	8010ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a12:	e007      	b.n	8010a24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 fa6f 	bl	8010ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010a22:	e253      	b.n	8010ecc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a24:	bf00      	nop
    return;
 8010a26:	e251      	b.n	8010ecc <HAL_UART_IRQHandler+0x75c>
 8010a28:	10000001 	.word	0x10000001
 8010a2c:	04000120 	.word	0x04000120
 8010a30:	0801222f 	.word	0x0801222f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a38:	2b01      	cmp	r3, #1
 8010a3a:	f040 81e7 	bne.w	8010e0c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a42:	f003 0310 	and.w	r3, r3, #16
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	f000 81e0 	beq.w	8010e0c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a50:	f003 0310 	and.w	r3, r3, #16
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	f000 81d9 	beq.w	8010e0c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2210      	movs	r2, #16
 8010a60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	689b      	ldr	r3, [r3, #8]
 8010a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a6c:	2b40      	cmp	r3, #64	; 0x40
 8010a6e:	f040 8151 	bne.w	8010d14 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a96      	ldr	r2, [pc, #600]	; (8010cd4 <HAL_UART_IRQHandler+0x564>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d068      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a93      	ldr	r2, [pc, #588]	; (8010cd8 <HAL_UART_IRQHandler+0x568>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d061      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a91      	ldr	r2, [pc, #580]	; (8010cdc <HAL_UART_IRQHandler+0x56c>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d05a      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	4a8e      	ldr	r2, [pc, #568]	; (8010ce0 <HAL_UART_IRQHandler+0x570>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d053      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a8c      	ldr	r2, [pc, #560]	; (8010ce4 <HAL_UART_IRQHandler+0x574>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d04c      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4a89      	ldr	r2, [pc, #548]	; (8010ce8 <HAL_UART_IRQHandler+0x578>)
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d045      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4a87      	ldr	r2, [pc, #540]	; (8010cec <HAL_UART_IRQHandler+0x57c>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d03e      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4a84      	ldr	r2, [pc, #528]	; (8010cf0 <HAL_UART_IRQHandler+0x580>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d037      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a82      	ldr	r2, [pc, #520]	; (8010cf4 <HAL_UART_IRQHandler+0x584>)
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d030      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	4a7f      	ldr	r2, [pc, #508]	; (8010cf8 <HAL_UART_IRQHandler+0x588>)
 8010afa:	4293      	cmp	r3, r2
 8010afc:	d029      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4a7d      	ldr	r2, [pc, #500]	; (8010cfc <HAL_UART_IRQHandler+0x58c>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d022      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4a7a      	ldr	r2, [pc, #488]	; (8010d00 <HAL_UART_IRQHandler+0x590>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d01b      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4a78      	ldr	r2, [pc, #480]	; (8010d04 <HAL_UART_IRQHandler+0x594>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d014      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a75      	ldr	r2, [pc, #468]	; (8010d08 <HAL_UART_IRQHandler+0x598>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d00d      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	4a73      	ldr	r2, [pc, #460]	; (8010d0c <HAL_UART_IRQHandler+0x59c>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d006      	beq.n	8010b52 <HAL_UART_IRQHandler+0x3e2>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4a70      	ldr	r2, [pc, #448]	; (8010d10 <HAL_UART_IRQHandler+0x5a0>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d106      	bne.n	8010b60 <HAL_UART_IRQHandler+0x3f0>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	e005      	b.n	8010b6c <HAL_UART_IRQHandler+0x3fc>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010b70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f000 81ab 	beq.w	8010ed0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b84:	429a      	cmp	r2, r3
 8010b86:	f080 81a3 	bcs.w	8010ed0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b9a:	69db      	ldr	r3, [r3, #28]
 8010b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ba0:	f000 8087 	beq.w	8010cb2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bb0:	e853 3f00 	ldrex	r3, [r3]
 8010bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	461a      	mov	r2, r3
 8010bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010bd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010bde:	e841 2300 	strex	r3, r2, [r1]
 8010be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d1da      	bne.n	8010ba4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	3308      	adds	r3, #8
 8010bf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bf8:	e853 3f00 	ldrex	r3, [r3]
 8010bfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c00:	f023 0301 	bic.w	r3, r3, #1
 8010c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	3308      	adds	r3, #8
 8010c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010c12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010c16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c1e:	e841 2300 	strex	r3, r2, [r1]
 8010c22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d1e1      	bne.n	8010bee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	3308      	adds	r3, #8
 8010c30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c34:	e853 3f00 	ldrex	r3, [r3]
 8010c38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	3308      	adds	r3, #8
 8010c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010c4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010c50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010c54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010c56:	e841 2300 	strex	r3, r2, [r1]
 8010c5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d1e3      	bne.n	8010c2a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2220      	movs	r2, #32
 8010c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c78:	e853 3f00 	ldrex	r3, [r3]
 8010c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c80:	f023 0310 	bic.w	r3, r3, #16
 8010c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c9a:	e841 2300 	strex	r3, r2, [r1]
 8010c9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d1e4      	bne.n	8010c70 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7f6 f8af 	bl	8006e10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2202      	movs	r2, #2
 8010cb6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	1ad3      	subs	r3, r2, r3
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	4619      	mov	r1, r3
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 f91d 	bl	8010f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010cd2:	e0fd      	b.n	8010ed0 <HAL_UART_IRQHandler+0x760>
 8010cd4:	40020010 	.word	0x40020010
 8010cd8:	40020028 	.word	0x40020028
 8010cdc:	40020040 	.word	0x40020040
 8010ce0:	40020058 	.word	0x40020058
 8010ce4:	40020070 	.word	0x40020070
 8010ce8:	40020088 	.word	0x40020088
 8010cec:	400200a0 	.word	0x400200a0
 8010cf0:	400200b8 	.word	0x400200b8
 8010cf4:	40020410 	.word	0x40020410
 8010cf8:	40020428 	.word	0x40020428
 8010cfc:	40020440 	.word	0x40020440
 8010d00:	40020458 	.word	0x40020458
 8010d04:	40020470 	.word	0x40020470
 8010d08:	40020488 	.word	0x40020488
 8010d0c:	400204a0 	.word	0x400204a0
 8010d10:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f000 80cf 	beq.w	8010ed4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010d36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f000 80ca 	beq.w	8010ed4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d48:	e853 3f00 	ldrex	r3, [r3]
 8010d4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d62:	647b      	str	r3, [r7, #68]	; 0x44
 8010d64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d6a:	e841 2300 	strex	r3, r2, [r1]
 8010d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1e4      	bne.n	8010d40 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	3308      	adds	r3, #8
 8010d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d80:	e853 3f00 	ldrex	r3, [r3]
 8010d84:	623b      	str	r3, [r7, #32]
   return(result);
 8010d86:	6a3a      	ldr	r2, [r7, #32]
 8010d88:	4b55      	ldr	r3, [pc, #340]	; (8010ee0 <HAL_UART_IRQHandler+0x770>)
 8010d8a:	4013      	ands	r3, r2
 8010d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	3308      	adds	r3, #8
 8010d96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010d9a:	633a      	str	r2, [r7, #48]	; 0x30
 8010d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010da2:	e841 2300 	strex	r3, r2, [r1]
 8010da6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d1e3      	bne.n	8010d76 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2220      	movs	r2, #32
 8010db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2200      	movs	r2, #0
 8010dba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	e853 3f00 	ldrex	r3, [r3]
 8010dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	f023 0310 	bic.w	r3, r3, #16
 8010dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	461a      	mov	r2, r3
 8010de0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010de4:	61fb      	str	r3, [r7, #28]
 8010de6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de8:	69b9      	ldr	r1, [r7, #24]
 8010dea:	69fa      	ldr	r2, [r7, #28]
 8010dec:	e841 2300 	strex	r3, r2, [r1]
 8010df0:	617b      	str	r3, [r7, #20]
   return(result);
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d1e4      	bne.n	8010dc2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010dfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010e02:	4619      	mov	r1, r3
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f000 f881 	bl	8010f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e0a:	e063      	b.n	8010ed4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d00e      	beq.n	8010e36 <HAL_UART_IRQHandler+0x6c6>
 8010e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d008      	beq.n	8010e36 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010e2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f001 ff5a 	bl	8012ce8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e34:	e051      	b.n	8010eda <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d014      	beq.n	8010e6c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d105      	bne.n	8010e5a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d008      	beq.n	8010e6c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d03a      	beq.n	8010ed8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	4798      	blx	r3
    }
    return;
 8010e6a:	e035      	b.n	8010ed8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d009      	beq.n	8010e8c <HAL_UART_IRQHandler+0x71c>
 8010e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d003      	beq.n	8010e8c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f001 f9e8 	bl	801225a <UART_EndTransmit_IT>
    return;
 8010e8a:	e026      	b.n	8010eda <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d009      	beq.n	8010eac <HAL_UART_IRQHandler+0x73c>
 8010e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d003      	beq.n	8010eac <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f001 ff33 	bl	8012d10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010eaa:	e016      	b.n	8010eda <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d010      	beq.n	8010eda <HAL_UART_IRQHandler+0x76a>
 8010eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	da0c      	bge.n	8010eda <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f001 ff1b 	bl	8012cfc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010ec6:	e008      	b.n	8010eda <HAL_UART_IRQHandler+0x76a>
      return;
 8010ec8:	bf00      	nop
 8010eca:	e006      	b.n	8010eda <HAL_UART_IRQHandler+0x76a>
    return;
 8010ecc:	bf00      	nop
 8010ece:	e004      	b.n	8010eda <HAL_UART_IRQHandler+0x76a>
      return;
 8010ed0:	bf00      	nop
 8010ed2:	e002      	b.n	8010eda <HAL_UART_IRQHandler+0x76a>
      return;
 8010ed4:	bf00      	nop
 8010ed6:	e000      	b.n	8010eda <HAL_UART_IRQHandler+0x76a>
    return;
 8010ed8:	bf00      	nop
  }
}
 8010eda:	37e8      	adds	r7, #232	; 0xe8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	effffffe 	.word	0xeffffffe

08010ee4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010eec:	bf00      	nop
 8010eee:	370c      	adds	r7, #12
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr

08010ef8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010f00:	bf00      	nop
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b083      	sub	sp, #12
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	460b      	mov	r3, r1
 8010f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010f18:	bf00      	nop
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f28:	b092      	sub	sp, #72	; 0x48
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	689a      	ldr	r2, [r3, #8]
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	691b      	ldr	r3, [r3, #16]
 8010f3c:	431a      	orrs	r2, r3
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	431a      	orrs	r2, r3
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	69db      	ldr	r3, [r3, #28]
 8010f48:	4313      	orrs	r3, r2
 8010f4a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	4bbe      	ldr	r3, [pc, #760]	; (801124c <UART_SetConfig+0x328>)
 8010f54:	4013      	ands	r3, r2
 8010f56:	697a      	ldr	r2, [r7, #20]
 8010f58:	6812      	ldr	r2, [r2, #0]
 8010f5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f5c:	430b      	orrs	r3, r1
 8010f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	68da      	ldr	r2, [r3, #12]
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	430a      	orrs	r2, r1
 8010f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	699b      	ldr	r3, [r3, #24]
 8010f7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4ab3      	ldr	r2, [pc, #716]	; (8011250 <UART_SetConfig+0x32c>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d004      	beq.n	8010f90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	6a1b      	ldr	r3, [r3, #32]
 8010f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	689a      	ldr	r2, [r3, #8]
 8010f96:	4baf      	ldr	r3, [pc, #700]	; (8011254 <UART_SetConfig+0x330>)
 8010f98:	4013      	ands	r3, r2
 8010f9a:	697a      	ldr	r2, [r7, #20]
 8010f9c:	6812      	ldr	r2, [r2, #0]
 8010f9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fa0:	430b      	orrs	r3, r1
 8010fa2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010faa:	f023 010f 	bic.w	r1, r3, #15
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	430a      	orrs	r2, r1
 8010fb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	4aa6      	ldr	r2, [pc, #664]	; (8011258 <UART_SetConfig+0x334>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d177      	bne.n	80110b4 <UART_SetConfig+0x190>
 8010fc4:	4ba5      	ldr	r3, [pc, #660]	; (801125c <UART_SetConfig+0x338>)
 8010fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010fcc:	2b28      	cmp	r3, #40	; 0x28
 8010fce:	d86d      	bhi.n	80110ac <UART_SetConfig+0x188>
 8010fd0:	a201      	add	r2, pc, #4	; (adr r2, 8010fd8 <UART_SetConfig+0xb4>)
 8010fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd6:	bf00      	nop
 8010fd8:	0801107d 	.word	0x0801107d
 8010fdc:	080110ad 	.word	0x080110ad
 8010fe0:	080110ad 	.word	0x080110ad
 8010fe4:	080110ad 	.word	0x080110ad
 8010fe8:	080110ad 	.word	0x080110ad
 8010fec:	080110ad 	.word	0x080110ad
 8010ff0:	080110ad 	.word	0x080110ad
 8010ff4:	080110ad 	.word	0x080110ad
 8010ff8:	08011085 	.word	0x08011085
 8010ffc:	080110ad 	.word	0x080110ad
 8011000:	080110ad 	.word	0x080110ad
 8011004:	080110ad 	.word	0x080110ad
 8011008:	080110ad 	.word	0x080110ad
 801100c:	080110ad 	.word	0x080110ad
 8011010:	080110ad 	.word	0x080110ad
 8011014:	080110ad 	.word	0x080110ad
 8011018:	0801108d 	.word	0x0801108d
 801101c:	080110ad 	.word	0x080110ad
 8011020:	080110ad 	.word	0x080110ad
 8011024:	080110ad 	.word	0x080110ad
 8011028:	080110ad 	.word	0x080110ad
 801102c:	080110ad 	.word	0x080110ad
 8011030:	080110ad 	.word	0x080110ad
 8011034:	080110ad 	.word	0x080110ad
 8011038:	08011095 	.word	0x08011095
 801103c:	080110ad 	.word	0x080110ad
 8011040:	080110ad 	.word	0x080110ad
 8011044:	080110ad 	.word	0x080110ad
 8011048:	080110ad 	.word	0x080110ad
 801104c:	080110ad 	.word	0x080110ad
 8011050:	080110ad 	.word	0x080110ad
 8011054:	080110ad 	.word	0x080110ad
 8011058:	0801109d 	.word	0x0801109d
 801105c:	080110ad 	.word	0x080110ad
 8011060:	080110ad 	.word	0x080110ad
 8011064:	080110ad 	.word	0x080110ad
 8011068:	080110ad 	.word	0x080110ad
 801106c:	080110ad 	.word	0x080110ad
 8011070:	080110ad 	.word	0x080110ad
 8011074:	080110ad 	.word	0x080110ad
 8011078:	080110a5 	.word	0x080110a5
 801107c:	2301      	movs	r3, #1
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011082:	e222      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011084:	2304      	movs	r3, #4
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108a:	e21e      	b.n	80114ca <UART_SetConfig+0x5a6>
 801108c:	2308      	movs	r3, #8
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011092:	e21a      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011094:	2310      	movs	r3, #16
 8011096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109a:	e216      	b.n	80114ca <UART_SetConfig+0x5a6>
 801109c:	2320      	movs	r3, #32
 801109e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a2:	e212      	b.n	80114ca <UART_SetConfig+0x5a6>
 80110a4:	2340      	movs	r3, #64	; 0x40
 80110a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110aa:	e20e      	b.n	80114ca <UART_SetConfig+0x5a6>
 80110ac:	2380      	movs	r3, #128	; 0x80
 80110ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b2:	e20a      	b.n	80114ca <UART_SetConfig+0x5a6>
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	4a69      	ldr	r2, [pc, #420]	; (8011260 <UART_SetConfig+0x33c>)
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d130      	bne.n	8011120 <UART_SetConfig+0x1fc>
 80110be:	4b67      	ldr	r3, [pc, #412]	; (801125c <UART_SetConfig+0x338>)
 80110c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110c2:	f003 0307 	and.w	r3, r3, #7
 80110c6:	2b05      	cmp	r3, #5
 80110c8:	d826      	bhi.n	8011118 <UART_SetConfig+0x1f4>
 80110ca:	a201      	add	r2, pc, #4	; (adr r2, 80110d0 <UART_SetConfig+0x1ac>)
 80110cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110d0:	080110e9 	.word	0x080110e9
 80110d4:	080110f1 	.word	0x080110f1
 80110d8:	080110f9 	.word	0x080110f9
 80110dc:	08011101 	.word	0x08011101
 80110e0:	08011109 	.word	0x08011109
 80110e4:	08011111 	.word	0x08011111
 80110e8:	2300      	movs	r3, #0
 80110ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ee:	e1ec      	b.n	80114ca <UART_SetConfig+0x5a6>
 80110f0:	2304      	movs	r3, #4
 80110f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f6:	e1e8      	b.n	80114ca <UART_SetConfig+0x5a6>
 80110f8:	2308      	movs	r3, #8
 80110fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fe:	e1e4      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011100:	2310      	movs	r3, #16
 8011102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011106:	e1e0      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011108:	2320      	movs	r3, #32
 801110a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110e:	e1dc      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011110:	2340      	movs	r3, #64	; 0x40
 8011112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011116:	e1d8      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011118:	2380      	movs	r3, #128	; 0x80
 801111a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111e:	e1d4      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4a4f      	ldr	r2, [pc, #316]	; (8011264 <UART_SetConfig+0x340>)
 8011126:	4293      	cmp	r3, r2
 8011128:	d130      	bne.n	801118c <UART_SetConfig+0x268>
 801112a:	4b4c      	ldr	r3, [pc, #304]	; (801125c <UART_SetConfig+0x338>)
 801112c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801112e:	f003 0307 	and.w	r3, r3, #7
 8011132:	2b05      	cmp	r3, #5
 8011134:	d826      	bhi.n	8011184 <UART_SetConfig+0x260>
 8011136:	a201      	add	r2, pc, #4	; (adr r2, 801113c <UART_SetConfig+0x218>)
 8011138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801113c:	08011155 	.word	0x08011155
 8011140:	0801115d 	.word	0x0801115d
 8011144:	08011165 	.word	0x08011165
 8011148:	0801116d 	.word	0x0801116d
 801114c:	08011175 	.word	0x08011175
 8011150:	0801117d 	.word	0x0801117d
 8011154:	2300      	movs	r3, #0
 8011156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115a:	e1b6      	b.n	80114ca <UART_SetConfig+0x5a6>
 801115c:	2304      	movs	r3, #4
 801115e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011162:	e1b2      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011164:	2308      	movs	r3, #8
 8011166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116a:	e1ae      	b.n	80114ca <UART_SetConfig+0x5a6>
 801116c:	2310      	movs	r3, #16
 801116e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011172:	e1aa      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011174:	2320      	movs	r3, #32
 8011176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117a:	e1a6      	b.n	80114ca <UART_SetConfig+0x5a6>
 801117c:	2340      	movs	r3, #64	; 0x40
 801117e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011182:	e1a2      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011184:	2380      	movs	r3, #128	; 0x80
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e19e      	b.n	80114ca <UART_SetConfig+0x5a6>
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a35      	ldr	r2, [pc, #212]	; (8011268 <UART_SetConfig+0x344>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d130      	bne.n	80111f8 <UART_SetConfig+0x2d4>
 8011196:	4b31      	ldr	r3, [pc, #196]	; (801125c <UART_SetConfig+0x338>)
 8011198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801119a:	f003 0307 	and.w	r3, r3, #7
 801119e:	2b05      	cmp	r3, #5
 80111a0:	d826      	bhi.n	80111f0 <UART_SetConfig+0x2cc>
 80111a2:	a201      	add	r2, pc, #4	; (adr r2, 80111a8 <UART_SetConfig+0x284>)
 80111a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a8:	080111c1 	.word	0x080111c1
 80111ac:	080111c9 	.word	0x080111c9
 80111b0:	080111d1 	.word	0x080111d1
 80111b4:	080111d9 	.word	0x080111d9
 80111b8:	080111e1 	.word	0x080111e1
 80111bc:	080111e9 	.word	0x080111e9
 80111c0:	2300      	movs	r3, #0
 80111c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c6:	e180      	b.n	80114ca <UART_SetConfig+0x5a6>
 80111c8:	2304      	movs	r3, #4
 80111ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ce:	e17c      	b.n	80114ca <UART_SetConfig+0x5a6>
 80111d0:	2308      	movs	r3, #8
 80111d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d6:	e178      	b.n	80114ca <UART_SetConfig+0x5a6>
 80111d8:	2310      	movs	r3, #16
 80111da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111de:	e174      	b.n	80114ca <UART_SetConfig+0x5a6>
 80111e0:	2320      	movs	r3, #32
 80111e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e6:	e170      	b.n	80114ca <UART_SetConfig+0x5a6>
 80111e8:	2340      	movs	r3, #64	; 0x40
 80111ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ee:	e16c      	b.n	80114ca <UART_SetConfig+0x5a6>
 80111f0:	2380      	movs	r3, #128	; 0x80
 80111f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f6:	e168      	b.n	80114ca <UART_SetConfig+0x5a6>
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4a1b      	ldr	r2, [pc, #108]	; (801126c <UART_SetConfig+0x348>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d142      	bne.n	8011288 <UART_SetConfig+0x364>
 8011202:	4b16      	ldr	r3, [pc, #88]	; (801125c <UART_SetConfig+0x338>)
 8011204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011206:	f003 0307 	and.w	r3, r3, #7
 801120a:	2b05      	cmp	r3, #5
 801120c:	d838      	bhi.n	8011280 <UART_SetConfig+0x35c>
 801120e:	a201      	add	r2, pc, #4	; (adr r2, 8011214 <UART_SetConfig+0x2f0>)
 8011210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011214:	0801122d 	.word	0x0801122d
 8011218:	08011235 	.word	0x08011235
 801121c:	0801123d 	.word	0x0801123d
 8011220:	08011245 	.word	0x08011245
 8011224:	08011271 	.word	0x08011271
 8011228:	08011279 	.word	0x08011279
 801122c:	2300      	movs	r3, #0
 801122e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011232:	e14a      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011234:	2304      	movs	r3, #4
 8011236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123a:	e146      	b.n	80114ca <UART_SetConfig+0x5a6>
 801123c:	2308      	movs	r3, #8
 801123e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011242:	e142      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011244:	2310      	movs	r3, #16
 8011246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801124a:	e13e      	b.n	80114ca <UART_SetConfig+0x5a6>
 801124c:	cfff69f3 	.word	0xcfff69f3
 8011250:	58000c00 	.word	0x58000c00
 8011254:	11fff4ff 	.word	0x11fff4ff
 8011258:	40011000 	.word	0x40011000
 801125c:	58024400 	.word	0x58024400
 8011260:	40004400 	.word	0x40004400
 8011264:	40004800 	.word	0x40004800
 8011268:	40004c00 	.word	0x40004c00
 801126c:	40005000 	.word	0x40005000
 8011270:	2320      	movs	r3, #32
 8011272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011276:	e128      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011278:	2340      	movs	r3, #64	; 0x40
 801127a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127e:	e124      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011280:	2380      	movs	r3, #128	; 0x80
 8011282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011286:	e120      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	4acb      	ldr	r2, [pc, #812]	; (80115bc <UART_SetConfig+0x698>)
 801128e:	4293      	cmp	r3, r2
 8011290:	d176      	bne.n	8011380 <UART_SetConfig+0x45c>
 8011292:	4bcb      	ldr	r3, [pc, #812]	; (80115c0 <UART_SetConfig+0x69c>)
 8011294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801129a:	2b28      	cmp	r3, #40	; 0x28
 801129c:	d86c      	bhi.n	8011378 <UART_SetConfig+0x454>
 801129e:	a201      	add	r2, pc, #4	; (adr r2, 80112a4 <UART_SetConfig+0x380>)
 80112a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a4:	08011349 	.word	0x08011349
 80112a8:	08011379 	.word	0x08011379
 80112ac:	08011379 	.word	0x08011379
 80112b0:	08011379 	.word	0x08011379
 80112b4:	08011379 	.word	0x08011379
 80112b8:	08011379 	.word	0x08011379
 80112bc:	08011379 	.word	0x08011379
 80112c0:	08011379 	.word	0x08011379
 80112c4:	08011351 	.word	0x08011351
 80112c8:	08011379 	.word	0x08011379
 80112cc:	08011379 	.word	0x08011379
 80112d0:	08011379 	.word	0x08011379
 80112d4:	08011379 	.word	0x08011379
 80112d8:	08011379 	.word	0x08011379
 80112dc:	08011379 	.word	0x08011379
 80112e0:	08011379 	.word	0x08011379
 80112e4:	08011359 	.word	0x08011359
 80112e8:	08011379 	.word	0x08011379
 80112ec:	08011379 	.word	0x08011379
 80112f0:	08011379 	.word	0x08011379
 80112f4:	08011379 	.word	0x08011379
 80112f8:	08011379 	.word	0x08011379
 80112fc:	08011379 	.word	0x08011379
 8011300:	08011379 	.word	0x08011379
 8011304:	08011361 	.word	0x08011361
 8011308:	08011379 	.word	0x08011379
 801130c:	08011379 	.word	0x08011379
 8011310:	08011379 	.word	0x08011379
 8011314:	08011379 	.word	0x08011379
 8011318:	08011379 	.word	0x08011379
 801131c:	08011379 	.word	0x08011379
 8011320:	08011379 	.word	0x08011379
 8011324:	08011369 	.word	0x08011369
 8011328:	08011379 	.word	0x08011379
 801132c:	08011379 	.word	0x08011379
 8011330:	08011379 	.word	0x08011379
 8011334:	08011379 	.word	0x08011379
 8011338:	08011379 	.word	0x08011379
 801133c:	08011379 	.word	0x08011379
 8011340:	08011379 	.word	0x08011379
 8011344:	08011371 	.word	0x08011371
 8011348:	2301      	movs	r3, #1
 801134a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134e:	e0bc      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011350:	2304      	movs	r3, #4
 8011352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011356:	e0b8      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011358:	2308      	movs	r3, #8
 801135a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135e:	e0b4      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011360:	2310      	movs	r3, #16
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011366:	e0b0      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011368:	2320      	movs	r3, #32
 801136a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136e:	e0ac      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011370:	2340      	movs	r3, #64	; 0x40
 8011372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011376:	e0a8      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011378:	2380      	movs	r3, #128	; 0x80
 801137a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137e:	e0a4      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4a8f      	ldr	r2, [pc, #572]	; (80115c4 <UART_SetConfig+0x6a0>)
 8011386:	4293      	cmp	r3, r2
 8011388:	d130      	bne.n	80113ec <UART_SetConfig+0x4c8>
 801138a:	4b8d      	ldr	r3, [pc, #564]	; (80115c0 <UART_SetConfig+0x69c>)
 801138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801138e:	f003 0307 	and.w	r3, r3, #7
 8011392:	2b05      	cmp	r3, #5
 8011394:	d826      	bhi.n	80113e4 <UART_SetConfig+0x4c0>
 8011396:	a201      	add	r2, pc, #4	; (adr r2, 801139c <UART_SetConfig+0x478>)
 8011398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801139c:	080113b5 	.word	0x080113b5
 80113a0:	080113bd 	.word	0x080113bd
 80113a4:	080113c5 	.word	0x080113c5
 80113a8:	080113cd 	.word	0x080113cd
 80113ac:	080113d5 	.word	0x080113d5
 80113b0:	080113dd 	.word	0x080113dd
 80113b4:	2300      	movs	r3, #0
 80113b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ba:	e086      	b.n	80114ca <UART_SetConfig+0x5a6>
 80113bc:	2304      	movs	r3, #4
 80113be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c2:	e082      	b.n	80114ca <UART_SetConfig+0x5a6>
 80113c4:	2308      	movs	r3, #8
 80113c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ca:	e07e      	b.n	80114ca <UART_SetConfig+0x5a6>
 80113cc:	2310      	movs	r3, #16
 80113ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d2:	e07a      	b.n	80114ca <UART_SetConfig+0x5a6>
 80113d4:	2320      	movs	r3, #32
 80113d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113da:	e076      	b.n	80114ca <UART_SetConfig+0x5a6>
 80113dc:	2340      	movs	r3, #64	; 0x40
 80113de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e2:	e072      	b.n	80114ca <UART_SetConfig+0x5a6>
 80113e4:	2380      	movs	r3, #128	; 0x80
 80113e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ea:	e06e      	b.n	80114ca <UART_SetConfig+0x5a6>
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4a75      	ldr	r2, [pc, #468]	; (80115c8 <UART_SetConfig+0x6a4>)
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d130      	bne.n	8011458 <UART_SetConfig+0x534>
 80113f6:	4b72      	ldr	r3, [pc, #456]	; (80115c0 <UART_SetConfig+0x69c>)
 80113f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113fa:	f003 0307 	and.w	r3, r3, #7
 80113fe:	2b05      	cmp	r3, #5
 8011400:	d826      	bhi.n	8011450 <UART_SetConfig+0x52c>
 8011402:	a201      	add	r2, pc, #4	; (adr r2, 8011408 <UART_SetConfig+0x4e4>)
 8011404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011408:	08011421 	.word	0x08011421
 801140c:	08011429 	.word	0x08011429
 8011410:	08011431 	.word	0x08011431
 8011414:	08011439 	.word	0x08011439
 8011418:	08011441 	.word	0x08011441
 801141c:	08011449 	.word	0x08011449
 8011420:	2300      	movs	r3, #0
 8011422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011426:	e050      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011428:	2304      	movs	r3, #4
 801142a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142e:	e04c      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011430:	2308      	movs	r3, #8
 8011432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011436:	e048      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011438:	2310      	movs	r3, #16
 801143a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143e:	e044      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011440:	2320      	movs	r3, #32
 8011442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011446:	e040      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011448:	2340      	movs	r3, #64	; 0x40
 801144a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144e:	e03c      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011450:	2380      	movs	r3, #128	; 0x80
 8011452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011456:	e038      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	4a5b      	ldr	r2, [pc, #364]	; (80115cc <UART_SetConfig+0x6a8>)
 801145e:	4293      	cmp	r3, r2
 8011460:	d130      	bne.n	80114c4 <UART_SetConfig+0x5a0>
 8011462:	4b57      	ldr	r3, [pc, #348]	; (80115c0 <UART_SetConfig+0x69c>)
 8011464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011466:	f003 0307 	and.w	r3, r3, #7
 801146a:	2b05      	cmp	r3, #5
 801146c:	d826      	bhi.n	80114bc <UART_SetConfig+0x598>
 801146e:	a201      	add	r2, pc, #4	; (adr r2, 8011474 <UART_SetConfig+0x550>)
 8011470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011474:	0801148d 	.word	0x0801148d
 8011478:	08011495 	.word	0x08011495
 801147c:	0801149d 	.word	0x0801149d
 8011480:	080114a5 	.word	0x080114a5
 8011484:	080114ad 	.word	0x080114ad
 8011488:	080114b5 	.word	0x080114b5
 801148c:	2302      	movs	r3, #2
 801148e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011492:	e01a      	b.n	80114ca <UART_SetConfig+0x5a6>
 8011494:	2304      	movs	r3, #4
 8011496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149a:	e016      	b.n	80114ca <UART_SetConfig+0x5a6>
 801149c:	2308      	movs	r3, #8
 801149e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a2:	e012      	b.n	80114ca <UART_SetConfig+0x5a6>
 80114a4:	2310      	movs	r3, #16
 80114a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114aa:	e00e      	b.n	80114ca <UART_SetConfig+0x5a6>
 80114ac:	2320      	movs	r3, #32
 80114ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b2:	e00a      	b.n	80114ca <UART_SetConfig+0x5a6>
 80114b4:	2340      	movs	r3, #64	; 0x40
 80114b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ba:	e006      	b.n	80114ca <UART_SetConfig+0x5a6>
 80114bc:	2380      	movs	r3, #128	; 0x80
 80114be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c2:	e002      	b.n	80114ca <UART_SetConfig+0x5a6>
 80114c4:	2380      	movs	r3, #128	; 0x80
 80114c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4a3f      	ldr	r2, [pc, #252]	; (80115cc <UART_SetConfig+0x6a8>)
 80114d0:	4293      	cmp	r3, r2
 80114d2:	f040 80f8 	bne.w	80116c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80114d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114da:	2b20      	cmp	r3, #32
 80114dc:	dc46      	bgt.n	801156c <UART_SetConfig+0x648>
 80114de:	2b02      	cmp	r3, #2
 80114e0:	f2c0 8082 	blt.w	80115e8 <UART_SetConfig+0x6c4>
 80114e4:	3b02      	subs	r3, #2
 80114e6:	2b1e      	cmp	r3, #30
 80114e8:	d87e      	bhi.n	80115e8 <UART_SetConfig+0x6c4>
 80114ea:	a201      	add	r2, pc, #4	; (adr r2, 80114f0 <UART_SetConfig+0x5cc>)
 80114ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f0:	08011573 	.word	0x08011573
 80114f4:	080115e9 	.word	0x080115e9
 80114f8:	0801157b 	.word	0x0801157b
 80114fc:	080115e9 	.word	0x080115e9
 8011500:	080115e9 	.word	0x080115e9
 8011504:	080115e9 	.word	0x080115e9
 8011508:	0801158b 	.word	0x0801158b
 801150c:	080115e9 	.word	0x080115e9
 8011510:	080115e9 	.word	0x080115e9
 8011514:	080115e9 	.word	0x080115e9
 8011518:	080115e9 	.word	0x080115e9
 801151c:	080115e9 	.word	0x080115e9
 8011520:	080115e9 	.word	0x080115e9
 8011524:	080115e9 	.word	0x080115e9
 8011528:	0801159b 	.word	0x0801159b
 801152c:	080115e9 	.word	0x080115e9
 8011530:	080115e9 	.word	0x080115e9
 8011534:	080115e9 	.word	0x080115e9
 8011538:	080115e9 	.word	0x080115e9
 801153c:	080115e9 	.word	0x080115e9
 8011540:	080115e9 	.word	0x080115e9
 8011544:	080115e9 	.word	0x080115e9
 8011548:	080115e9 	.word	0x080115e9
 801154c:	080115e9 	.word	0x080115e9
 8011550:	080115e9 	.word	0x080115e9
 8011554:	080115e9 	.word	0x080115e9
 8011558:	080115e9 	.word	0x080115e9
 801155c:	080115e9 	.word	0x080115e9
 8011560:	080115e9 	.word	0x080115e9
 8011564:	080115e9 	.word	0x080115e9
 8011568:	080115db 	.word	0x080115db
 801156c:	2b40      	cmp	r3, #64	; 0x40
 801156e:	d037      	beq.n	80115e0 <UART_SetConfig+0x6bc>
 8011570:	e03a      	b.n	80115e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011572:	f7fb fce5 	bl	800cf40 <HAL_RCCEx_GetD3PCLK1Freq>
 8011576:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011578:	e03c      	b.n	80115f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801157e:	4618      	mov	r0, r3
 8011580:	f7fb fcf4 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011588:	e034      	b.n	80115f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801158a:	f107 0318 	add.w	r3, r7, #24
 801158e:	4618      	mov	r0, r3
 8011590:	f7fb fe40 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011598:	e02c      	b.n	80115f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801159a:	4b09      	ldr	r3, [pc, #36]	; (80115c0 <UART_SetConfig+0x69c>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f003 0320 	and.w	r3, r3, #32
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d016      	beq.n	80115d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115a6:	4b06      	ldr	r3, [pc, #24]	; (80115c0 <UART_SetConfig+0x69c>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	08db      	lsrs	r3, r3, #3
 80115ac:	f003 0303 	and.w	r3, r3, #3
 80115b0:	4a07      	ldr	r2, [pc, #28]	; (80115d0 <UART_SetConfig+0x6ac>)
 80115b2:	fa22 f303 	lsr.w	r3, r2, r3
 80115b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115b8:	e01c      	b.n	80115f4 <UART_SetConfig+0x6d0>
 80115ba:	bf00      	nop
 80115bc:	40011400 	.word	0x40011400
 80115c0:	58024400 	.word	0x58024400
 80115c4:	40007800 	.word	0x40007800
 80115c8:	40007c00 	.word	0x40007c00
 80115cc:	58000c00 	.word	0x58000c00
 80115d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80115d4:	4b9d      	ldr	r3, [pc, #628]	; (801184c <UART_SetConfig+0x928>)
 80115d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115d8:	e00c      	b.n	80115f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115da:	4b9d      	ldr	r3, [pc, #628]	; (8011850 <UART_SetConfig+0x92c>)
 80115dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115de:	e009      	b.n	80115f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115e6:	e005      	b.n	80115f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80115e8:	2300      	movs	r3, #0
 80115ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80115ec:	2301      	movs	r3, #1
 80115ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80115f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 81de 	beq.w	80119b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011600:	4a94      	ldr	r2, [pc, #592]	; (8011854 <UART_SetConfig+0x930>)
 8011602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011606:	461a      	mov	r2, r3
 8011608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801160a:	fbb3 f3f2 	udiv	r3, r3, r2
 801160e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	685a      	ldr	r2, [r3, #4]
 8011614:	4613      	mov	r3, r2
 8011616:	005b      	lsls	r3, r3, #1
 8011618:	4413      	add	r3, r2
 801161a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801161c:	429a      	cmp	r2, r3
 801161e:	d305      	bcc.n	801162c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011628:	429a      	cmp	r2, r3
 801162a:	d903      	bls.n	8011634 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801162c:	2301      	movs	r3, #1
 801162e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011632:	e1c1      	b.n	80119b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011636:	2200      	movs	r2, #0
 8011638:	60bb      	str	r3, [r7, #8]
 801163a:	60fa      	str	r2, [r7, #12]
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011640:	4a84      	ldr	r2, [pc, #528]	; (8011854 <UART_SetConfig+0x930>)
 8011642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011646:	b29b      	uxth	r3, r3
 8011648:	2200      	movs	r2, #0
 801164a:	603b      	str	r3, [r7, #0]
 801164c:	607a      	str	r2, [r7, #4]
 801164e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011652:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011656:	f7ee fe43 	bl	80002e0 <__aeabi_uldivmod>
 801165a:	4602      	mov	r2, r0
 801165c:	460b      	mov	r3, r1
 801165e:	4610      	mov	r0, r2
 8011660:	4619      	mov	r1, r3
 8011662:	f04f 0200 	mov.w	r2, #0
 8011666:	f04f 0300 	mov.w	r3, #0
 801166a:	020b      	lsls	r3, r1, #8
 801166c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011670:	0202      	lsls	r2, r0, #8
 8011672:	6979      	ldr	r1, [r7, #20]
 8011674:	6849      	ldr	r1, [r1, #4]
 8011676:	0849      	lsrs	r1, r1, #1
 8011678:	2000      	movs	r0, #0
 801167a:	460c      	mov	r4, r1
 801167c:	4605      	mov	r5, r0
 801167e:	eb12 0804 	adds.w	r8, r2, r4
 8011682:	eb43 0905 	adc.w	r9, r3, r5
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	469a      	mov	sl, r3
 801168e:	4693      	mov	fp, r2
 8011690:	4652      	mov	r2, sl
 8011692:	465b      	mov	r3, fp
 8011694:	4640      	mov	r0, r8
 8011696:	4649      	mov	r1, r9
 8011698:	f7ee fe22 	bl	80002e0 <__aeabi_uldivmod>
 801169c:	4602      	mov	r2, r0
 801169e:	460b      	mov	r3, r1
 80116a0:	4613      	mov	r3, r2
 80116a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80116a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80116aa:	d308      	bcc.n	80116be <UART_SetConfig+0x79a>
 80116ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80116b2:	d204      	bcs.n	80116be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116ba:	60da      	str	r2, [r3, #12]
 80116bc:	e17c      	b.n	80119b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80116be:	2301      	movs	r3, #1
 80116c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80116c4:	e178      	b.n	80119b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	69db      	ldr	r3, [r3, #28]
 80116ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80116ce:	f040 80c5 	bne.w	801185c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80116d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80116d6:	2b20      	cmp	r3, #32
 80116d8:	dc48      	bgt.n	801176c <UART_SetConfig+0x848>
 80116da:	2b00      	cmp	r3, #0
 80116dc:	db7b      	blt.n	80117d6 <UART_SetConfig+0x8b2>
 80116de:	2b20      	cmp	r3, #32
 80116e0:	d879      	bhi.n	80117d6 <UART_SetConfig+0x8b2>
 80116e2:	a201      	add	r2, pc, #4	; (adr r2, 80116e8 <UART_SetConfig+0x7c4>)
 80116e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e8:	08011773 	.word	0x08011773
 80116ec:	0801177b 	.word	0x0801177b
 80116f0:	080117d7 	.word	0x080117d7
 80116f4:	080117d7 	.word	0x080117d7
 80116f8:	08011783 	.word	0x08011783
 80116fc:	080117d7 	.word	0x080117d7
 8011700:	080117d7 	.word	0x080117d7
 8011704:	080117d7 	.word	0x080117d7
 8011708:	08011793 	.word	0x08011793
 801170c:	080117d7 	.word	0x080117d7
 8011710:	080117d7 	.word	0x080117d7
 8011714:	080117d7 	.word	0x080117d7
 8011718:	080117d7 	.word	0x080117d7
 801171c:	080117d7 	.word	0x080117d7
 8011720:	080117d7 	.word	0x080117d7
 8011724:	080117d7 	.word	0x080117d7
 8011728:	080117a3 	.word	0x080117a3
 801172c:	080117d7 	.word	0x080117d7
 8011730:	080117d7 	.word	0x080117d7
 8011734:	080117d7 	.word	0x080117d7
 8011738:	080117d7 	.word	0x080117d7
 801173c:	080117d7 	.word	0x080117d7
 8011740:	080117d7 	.word	0x080117d7
 8011744:	080117d7 	.word	0x080117d7
 8011748:	080117d7 	.word	0x080117d7
 801174c:	080117d7 	.word	0x080117d7
 8011750:	080117d7 	.word	0x080117d7
 8011754:	080117d7 	.word	0x080117d7
 8011758:	080117d7 	.word	0x080117d7
 801175c:	080117d7 	.word	0x080117d7
 8011760:	080117d7 	.word	0x080117d7
 8011764:	080117d7 	.word	0x080117d7
 8011768:	080117c9 	.word	0x080117c9
 801176c:	2b40      	cmp	r3, #64	; 0x40
 801176e:	d02e      	beq.n	80117ce <UART_SetConfig+0x8aa>
 8011770:	e031      	b.n	80117d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011772:	f7f9 fbed 	bl	800af50 <HAL_RCC_GetPCLK1Freq>
 8011776:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011778:	e033      	b.n	80117e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801177a:	f7f9 fbff 	bl	800af7c <HAL_RCC_GetPCLK2Freq>
 801177e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011780:	e02f      	b.n	80117e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011786:	4618      	mov	r0, r3
 8011788:	f7fb fbf0 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011790:	e027      	b.n	80117e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011792:	f107 0318 	add.w	r3, r7, #24
 8011796:	4618      	mov	r0, r3
 8011798:	f7fb fd3c 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801179c:	69fb      	ldr	r3, [r7, #28]
 801179e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117a0:	e01f      	b.n	80117e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80117a2:	4b2d      	ldr	r3, [pc, #180]	; (8011858 <UART_SetConfig+0x934>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	f003 0320 	and.w	r3, r3, #32
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d009      	beq.n	80117c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80117ae:	4b2a      	ldr	r3, [pc, #168]	; (8011858 <UART_SetConfig+0x934>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	08db      	lsrs	r3, r3, #3
 80117b4:	f003 0303 	and.w	r3, r3, #3
 80117b8:	4a24      	ldr	r2, [pc, #144]	; (801184c <UART_SetConfig+0x928>)
 80117ba:	fa22 f303 	lsr.w	r3, r2, r3
 80117be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117c0:	e00f      	b.n	80117e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80117c2:	4b22      	ldr	r3, [pc, #136]	; (801184c <UART_SetConfig+0x928>)
 80117c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c6:	e00c      	b.n	80117e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117c8:	4b21      	ldr	r3, [pc, #132]	; (8011850 <UART_SetConfig+0x92c>)
 80117ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117cc:	e009      	b.n	80117e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117d4:	e005      	b.n	80117e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80117d6:	2300      	movs	r3, #0
 80117d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80117da:	2301      	movs	r3, #1
 80117dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80117e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80117e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	f000 80e7 	beq.w	80119b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ee:	4a19      	ldr	r2, [pc, #100]	; (8011854 <UART_SetConfig+0x930>)
 80117f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117f4:	461a      	mov	r2, r3
 80117f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80117fc:	005a      	lsls	r2, r3, #1
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	085b      	lsrs	r3, r3, #1
 8011804:	441a      	add	r2, r3
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	fbb2 f3f3 	udiv	r3, r2, r3
 801180e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011812:	2b0f      	cmp	r3, #15
 8011814:	d916      	bls.n	8011844 <UART_SetConfig+0x920>
 8011816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801181c:	d212      	bcs.n	8011844 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801181e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011820:	b29b      	uxth	r3, r3
 8011822:	f023 030f 	bic.w	r3, r3, #15
 8011826:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182a:	085b      	lsrs	r3, r3, #1
 801182c:	b29b      	uxth	r3, r3
 801182e:	f003 0307 	and.w	r3, r3, #7
 8011832:	b29a      	uxth	r2, r3
 8011834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011836:	4313      	orrs	r3, r2
 8011838:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011840:	60da      	str	r2, [r3, #12]
 8011842:	e0b9      	b.n	80119b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011844:	2301      	movs	r3, #1
 8011846:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801184a:	e0b5      	b.n	80119b8 <UART_SetConfig+0xa94>
 801184c:	03d09000 	.word	0x03d09000
 8011850:	003d0900 	.word	0x003d0900
 8011854:	08017928 	.word	0x08017928
 8011858:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801185c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011860:	2b20      	cmp	r3, #32
 8011862:	dc49      	bgt.n	80118f8 <UART_SetConfig+0x9d4>
 8011864:	2b00      	cmp	r3, #0
 8011866:	db7c      	blt.n	8011962 <UART_SetConfig+0xa3e>
 8011868:	2b20      	cmp	r3, #32
 801186a:	d87a      	bhi.n	8011962 <UART_SetConfig+0xa3e>
 801186c:	a201      	add	r2, pc, #4	; (adr r2, 8011874 <UART_SetConfig+0x950>)
 801186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011872:	bf00      	nop
 8011874:	080118ff 	.word	0x080118ff
 8011878:	08011907 	.word	0x08011907
 801187c:	08011963 	.word	0x08011963
 8011880:	08011963 	.word	0x08011963
 8011884:	0801190f 	.word	0x0801190f
 8011888:	08011963 	.word	0x08011963
 801188c:	08011963 	.word	0x08011963
 8011890:	08011963 	.word	0x08011963
 8011894:	0801191f 	.word	0x0801191f
 8011898:	08011963 	.word	0x08011963
 801189c:	08011963 	.word	0x08011963
 80118a0:	08011963 	.word	0x08011963
 80118a4:	08011963 	.word	0x08011963
 80118a8:	08011963 	.word	0x08011963
 80118ac:	08011963 	.word	0x08011963
 80118b0:	08011963 	.word	0x08011963
 80118b4:	0801192f 	.word	0x0801192f
 80118b8:	08011963 	.word	0x08011963
 80118bc:	08011963 	.word	0x08011963
 80118c0:	08011963 	.word	0x08011963
 80118c4:	08011963 	.word	0x08011963
 80118c8:	08011963 	.word	0x08011963
 80118cc:	08011963 	.word	0x08011963
 80118d0:	08011963 	.word	0x08011963
 80118d4:	08011963 	.word	0x08011963
 80118d8:	08011963 	.word	0x08011963
 80118dc:	08011963 	.word	0x08011963
 80118e0:	08011963 	.word	0x08011963
 80118e4:	08011963 	.word	0x08011963
 80118e8:	08011963 	.word	0x08011963
 80118ec:	08011963 	.word	0x08011963
 80118f0:	08011963 	.word	0x08011963
 80118f4:	08011955 	.word	0x08011955
 80118f8:	2b40      	cmp	r3, #64	; 0x40
 80118fa:	d02e      	beq.n	801195a <UART_SetConfig+0xa36>
 80118fc:	e031      	b.n	8011962 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80118fe:	f7f9 fb27 	bl	800af50 <HAL_RCC_GetPCLK1Freq>
 8011902:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011904:	e033      	b.n	801196e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011906:	f7f9 fb39 	bl	800af7c <HAL_RCC_GetPCLK2Freq>
 801190a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801190c:	e02f      	b.n	801196e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011912:	4618      	mov	r0, r3
 8011914:	f7fb fb2a 	bl	800cf6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801191c:	e027      	b.n	801196e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801191e:	f107 0318 	add.w	r3, r7, #24
 8011922:	4618      	mov	r0, r3
 8011924:	f7fb fc76 	bl	800d214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011928:	69fb      	ldr	r3, [r7, #28]
 801192a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801192c:	e01f      	b.n	801196e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801192e:	4b2d      	ldr	r3, [pc, #180]	; (80119e4 <UART_SetConfig+0xac0>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f003 0320 	and.w	r3, r3, #32
 8011936:	2b00      	cmp	r3, #0
 8011938:	d009      	beq.n	801194e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801193a:	4b2a      	ldr	r3, [pc, #168]	; (80119e4 <UART_SetConfig+0xac0>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	08db      	lsrs	r3, r3, #3
 8011940:	f003 0303 	and.w	r3, r3, #3
 8011944:	4a28      	ldr	r2, [pc, #160]	; (80119e8 <UART_SetConfig+0xac4>)
 8011946:	fa22 f303 	lsr.w	r3, r2, r3
 801194a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801194c:	e00f      	b.n	801196e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801194e:	4b26      	ldr	r3, [pc, #152]	; (80119e8 <UART_SetConfig+0xac4>)
 8011950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011952:	e00c      	b.n	801196e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011954:	4b25      	ldr	r3, [pc, #148]	; (80119ec <UART_SetConfig+0xac8>)
 8011956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011958:	e009      	b.n	801196e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801195a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801195e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011960:	e005      	b.n	801196e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011962:	2300      	movs	r3, #0
 8011964:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011966:	2301      	movs	r3, #1
 8011968:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801196c:	bf00      	nop
    }

    if (pclk != 0U)
 801196e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011970:	2b00      	cmp	r3, #0
 8011972:	d021      	beq.n	80119b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011978:	4a1d      	ldr	r2, [pc, #116]	; (80119f0 <UART_SetConfig+0xacc>)
 801197a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801197e:	461a      	mov	r2, r3
 8011980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011982:	fbb3 f2f2 	udiv	r2, r3, r2
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	085b      	lsrs	r3, r3, #1
 801198c:	441a      	add	r2, r3
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	fbb2 f3f3 	udiv	r3, r2, r3
 8011996:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199a:	2b0f      	cmp	r3, #15
 801199c:	d909      	bls.n	80119b2 <UART_SetConfig+0xa8e>
 801199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119a4:	d205      	bcs.n	80119b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80119a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	60da      	str	r2, [r3, #12]
 80119b0:	e002      	b.n	80119b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80119b2:	2301      	movs	r3, #1
 80119b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2201      	movs	r2, #1
 80119bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	2201      	movs	r2, #1
 80119c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	2200      	movs	r2, #0
 80119cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	2200      	movs	r2, #0
 80119d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80119d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3748      	adds	r7, #72	; 0x48
 80119dc:	46bd      	mov	sp, r7
 80119de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80119e2:	bf00      	nop
 80119e4:	58024400 	.word	0x58024400
 80119e8:	03d09000 	.word	0x03d09000
 80119ec:	003d0900 	.word	0x003d0900
 80119f0:	08017928 	.word	0x08017928

080119f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b083      	sub	sp, #12
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a00:	f003 0308 	and.w	r3, r3, #8
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00a      	beq.n	8011a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	430a      	orrs	r2, r1
 8011a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a22:	f003 0301 	and.w	r3, r3, #1
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d00a      	beq.n	8011a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	430a      	orrs	r2, r1
 8011a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a44:	f003 0302 	and.w	r3, r3, #2
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d00a      	beq.n	8011a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	430a      	orrs	r2, r1
 8011a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a66:	f003 0304 	and.w	r3, r3, #4
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d00a      	beq.n	8011a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	430a      	orrs	r2, r1
 8011a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a88:	f003 0310 	and.w	r3, r3, #16
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d00a      	beq.n	8011aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	689b      	ldr	r3, [r3, #8]
 8011a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	430a      	orrs	r2, r1
 8011aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aaa:	f003 0320 	and.w	r3, r3, #32
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d00a      	beq.n	8011ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	689b      	ldr	r3, [r3, #8]
 8011ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	430a      	orrs	r2, r1
 8011ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d01a      	beq.n	8011b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	430a      	orrs	r2, r1
 8011ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011af2:	d10a      	bne.n	8011b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	430a      	orrs	r2, r1
 8011b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00a      	beq.n	8011b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	430a      	orrs	r2, r1
 8011b2a:	605a      	str	r2, [r3, #4]
  }
}
 8011b2c:	bf00      	nop
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b098      	sub	sp, #96	; 0x60
 8011b3c:	af02      	add	r7, sp, #8
 8011b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2200      	movs	r2, #0
 8011b44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011b48:	f7f2 fa74 	bl	8004034 <HAL_GetTick>
 8011b4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f003 0308 	and.w	r3, r3, #8
 8011b58:	2b08      	cmp	r3, #8
 8011b5a:	d12f      	bne.n	8011bbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b60:	9300      	str	r3, [sp, #0]
 8011b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b64:	2200      	movs	r2, #0
 8011b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 f88e 	bl	8011c8c <UART_WaitOnFlagUntilTimeout>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d022      	beq.n	8011bbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b7e:	e853 3f00 	ldrex	r3, [r3]
 8011b82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	461a      	mov	r2, r3
 8011b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b94:	647b      	str	r3, [r7, #68]	; 0x44
 8011b96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b9c:	e841 2300 	strex	r3, r2, [r1]
 8011ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d1e6      	bne.n	8011b76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2220      	movs	r2, #32
 8011bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011bb8:	2303      	movs	r3, #3
 8011bba:	e063      	b.n	8011c84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f003 0304 	and.w	r3, r3, #4
 8011bc6:	2b04      	cmp	r3, #4
 8011bc8:	d149      	bne.n	8011c5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011bca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f000 f857 	bl	8011c8c <UART_WaitOnFlagUntilTimeout>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d03c      	beq.n	8011c5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bec:	e853 3f00 	ldrex	r3, [r3]
 8011bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8011bf2:	6a3b      	ldr	r3, [r7, #32]
 8011bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	461a      	mov	r2, r3
 8011c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c02:	633b      	str	r3, [r7, #48]	; 0x30
 8011c04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c0a:	e841 2300 	strex	r3, r2, [r1]
 8011c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d1e6      	bne.n	8011be4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	3308      	adds	r3, #8
 8011c1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	e853 3f00 	ldrex	r3, [r3]
 8011c24:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f023 0301 	bic.w	r3, r3, #1
 8011c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	3308      	adds	r3, #8
 8011c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c36:	61fa      	str	r2, [r7, #28]
 8011c38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c3a:	69b9      	ldr	r1, [r7, #24]
 8011c3c:	69fa      	ldr	r2, [r7, #28]
 8011c3e:	e841 2300 	strex	r3, r2, [r1]
 8011c42:	617b      	str	r3, [r7, #20]
   return(result);
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d1e5      	bne.n	8011c16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2220      	movs	r2, #32
 8011c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2200      	movs	r2, #0
 8011c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c5a:	2303      	movs	r3, #3
 8011c5c:	e012      	b.n	8011c84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2220      	movs	r2, #32
 8011c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2220      	movs	r2, #32
 8011c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2200      	movs	r2, #0
 8011c72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2200      	movs	r2, #0
 8011c78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c82:	2300      	movs	r3, #0
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3758      	adds	r7, #88	; 0x58
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	60f8      	str	r0, [r7, #12]
 8011c94:	60b9      	str	r1, [r7, #8]
 8011c96:	603b      	str	r3, [r7, #0]
 8011c98:	4613      	mov	r3, r2
 8011c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c9c:	e04f      	b.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c9e:	69bb      	ldr	r3, [r7, #24]
 8011ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ca4:	d04b      	beq.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ca6:	f7f2 f9c5 	bl	8004034 <HAL_GetTick>
 8011caa:	4602      	mov	r2, r0
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	69ba      	ldr	r2, [r7, #24]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d302      	bcc.n	8011cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8011cb6:	69bb      	ldr	r3, [r7, #24]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d101      	bne.n	8011cc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011cbc:	2303      	movs	r3, #3
 8011cbe:	e04e      	b.n	8011d5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f003 0304 	and.w	r3, r3, #4
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d037      	beq.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	2b80      	cmp	r3, #128	; 0x80
 8011cd2:	d034      	beq.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	2b40      	cmp	r3, #64	; 0x40
 8011cd8:	d031      	beq.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	69db      	ldr	r3, [r3, #28]
 8011ce0:	f003 0308 	and.w	r3, r3, #8
 8011ce4:	2b08      	cmp	r3, #8
 8011ce6:	d110      	bne.n	8011d0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2208      	movs	r2, #8
 8011cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f000 f99d 	bl	8012030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	2208      	movs	r2, #8
 8011cfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2200      	movs	r2, #0
 8011d02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011d06:	2301      	movs	r3, #1
 8011d08:	e029      	b.n	8011d5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	69db      	ldr	r3, [r3, #28]
 8011d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011d18:	d111      	bne.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011d24:	68f8      	ldr	r0, [r7, #12]
 8011d26:	f000 f983 	bl	8012030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2220      	movs	r2, #32
 8011d2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2200      	movs	r2, #0
 8011d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	e00f      	b.n	8011d5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	69da      	ldr	r2, [r3, #28]
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	4013      	ands	r3, r2
 8011d48:	68ba      	ldr	r2, [r7, #8]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	bf0c      	ite	eq
 8011d4e:	2301      	moveq	r3, #1
 8011d50:	2300      	movne	r3, #0
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	461a      	mov	r2, r3
 8011d56:	79fb      	ldrb	r3, [r7, #7]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d0a0      	beq.n	8011c9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d5c:	2300      	movs	r3, #0
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3710      	adds	r7, #16
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
	...

08011d68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b0a3      	sub	sp, #140	; 0x8c
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	4613      	mov	r3, r2
 8011d74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	68ba      	ldr	r2, [r7, #8]
 8011d7a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	88fa      	ldrh	r2, [r7, #6]
 8011d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	88fa      	ldrh	r2, [r7, #6]
 8011d88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	689b      	ldr	r3, [r3, #8]
 8011d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d9a:	d10e      	bne.n	8011dba <UART_Start_Receive_IT+0x52>
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	691b      	ldr	r3, [r3, #16]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d105      	bne.n	8011db0 <UART_Start_Receive_IT+0x48>
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011daa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011dae:	e02d      	b.n	8011e0c <UART_Start_Receive_IT+0xa4>
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	22ff      	movs	r2, #255	; 0xff
 8011db4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011db8:	e028      	b.n	8011e0c <UART_Start_Receive_IT+0xa4>
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	689b      	ldr	r3, [r3, #8]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d10d      	bne.n	8011dde <UART_Start_Receive_IT+0x76>
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	691b      	ldr	r3, [r3, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d104      	bne.n	8011dd4 <UART_Start_Receive_IT+0x6c>
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	22ff      	movs	r2, #255	; 0xff
 8011dce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011dd2:	e01b      	b.n	8011e0c <UART_Start_Receive_IT+0xa4>
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	227f      	movs	r2, #127	; 0x7f
 8011dd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ddc:	e016      	b.n	8011e0c <UART_Start_Receive_IT+0xa4>
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	689b      	ldr	r3, [r3, #8]
 8011de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011de6:	d10d      	bne.n	8011e04 <UART_Start_Receive_IT+0x9c>
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	691b      	ldr	r3, [r3, #16]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d104      	bne.n	8011dfa <UART_Start_Receive_IT+0x92>
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	227f      	movs	r2, #127	; 0x7f
 8011df4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011df8:	e008      	b.n	8011e0c <UART_Start_Receive_IT+0xa4>
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	223f      	movs	r2, #63	; 0x3f
 8011dfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e02:	e003      	b.n	8011e0c <UART_Start_Receive_IT+0xa4>
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2200      	movs	r2, #0
 8011e08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2222      	movs	r2, #34	; 0x22
 8011e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	3308      	adds	r3, #8
 8011e22:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e26:	e853 3f00 	ldrex	r3, [r3]
 8011e2a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e2e:	f043 0301 	orr.w	r3, r3, #1
 8011e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	3308      	adds	r3, #8
 8011e3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011e40:	673a      	str	r2, [r7, #112]	; 0x70
 8011e42:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e44:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011e46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e48:	e841 2300 	strex	r3, r2, [r1]
 8011e4c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d1e3      	bne.n	8011e1c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e5c:	d14f      	bne.n	8011efe <UART_Start_Receive_IT+0x196>
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e64:	88fa      	ldrh	r2, [r7, #6]
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d349      	bcc.n	8011efe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e72:	d107      	bne.n	8011e84 <UART_Start_Receive_IT+0x11c>
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	691b      	ldr	r3, [r3, #16]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d103      	bne.n	8011e84 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	4a47      	ldr	r2, [pc, #284]	; (8011f9c <UART_Start_Receive_IT+0x234>)
 8011e80:	675a      	str	r2, [r3, #116]	; 0x74
 8011e82:	e002      	b.n	8011e8a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	4a46      	ldr	r2, [pc, #280]	; (8011fa0 <UART_Start_Receive_IT+0x238>)
 8011e88:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	691b      	ldr	r3, [r3, #16]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d01a      	beq.n	8011ec8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e9a:	e853 3f00 	ldrex	r3, [r3]
 8011e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	461a      	mov	r2, r3
 8011eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011eb6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011eba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ebc:	e841 2300 	strex	r3, r2, [r1]
 8011ec0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d1e4      	bne.n	8011e92 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	3308      	adds	r3, #8
 8011ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ed2:	e853 3f00 	ldrex	r3, [r3]
 8011ed6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ede:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	3308      	adds	r3, #8
 8011ee6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011ee8:	64ba      	str	r2, [r7, #72]	; 0x48
 8011eea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ef0:	e841 2300 	strex	r3, r2, [r1]
 8011ef4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d1e5      	bne.n	8011ec8 <UART_Start_Receive_IT+0x160>
 8011efc:	e046      	b.n	8011f8c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f06:	d107      	bne.n	8011f18 <UART_Start_Receive_IT+0x1b0>
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	691b      	ldr	r3, [r3, #16]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d103      	bne.n	8011f18 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	4a24      	ldr	r2, [pc, #144]	; (8011fa4 <UART_Start_Receive_IT+0x23c>)
 8011f14:	675a      	str	r2, [r3, #116]	; 0x74
 8011f16:	e002      	b.n	8011f1e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	4a23      	ldr	r2, [pc, #140]	; (8011fa8 <UART_Start_Receive_IT+0x240>)
 8011f1c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	691b      	ldr	r3, [r3, #16]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d019      	beq.n	8011f5a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2e:	e853 3f00 	ldrex	r3, [r3]
 8011f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f36:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011f3a:	677b      	str	r3, [r7, #116]	; 0x74
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	461a      	mov	r2, r3
 8011f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f44:	637b      	str	r3, [r7, #52]	; 0x34
 8011f46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f4c:	e841 2300 	strex	r3, r2, [r1]
 8011f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d1e6      	bne.n	8011f26 <UART_Start_Receive_IT+0x1be>
 8011f58:	e018      	b.n	8011f8c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	e853 3f00 	ldrex	r3, [r3]
 8011f66:	613b      	str	r3, [r7, #16]
   return(result);
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	f043 0320 	orr.w	r3, r3, #32
 8011f6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	461a      	mov	r2, r3
 8011f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f78:	623b      	str	r3, [r7, #32]
 8011f7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f7c:	69f9      	ldr	r1, [r7, #28]
 8011f7e:	6a3a      	ldr	r2, [r7, #32]
 8011f80:	e841 2300 	strex	r3, r2, [r1]
 8011f84:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f86:	69bb      	ldr	r3, [r7, #24]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d1e6      	bne.n	8011f5a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011f8c:	2300      	movs	r3, #0
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	378c      	adds	r7, #140	; 0x8c
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr
 8011f9a:	bf00      	nop
 8011f9c:	08012981 	.word	0x08012981
 8011fa0:	08012621 	.word	0x08012621
 8011fa4:	08012469 	.word	0x08012469
 8011fa8:	080122b1 	.word	0x080122b1

08011fac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011fac:	b480      	push	{r7}
 8011fae:	b08f      	sub	sp, #60	; 0x3c
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fba:	6a3b      	ldr	r3, [r7, #32]
 8011fbc:	e853 3f00 	ldrex	r3, [r3]
 8011fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	461a      	mov	r2, r3
 8011fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fd4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fda:	e841 2300 	strex	r3, r2, [r1]
 8011fde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d1e6      	bne.n	8011fb4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	3308      	adds	r3, #8
 8011fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	e853 3f00 	ldrex	r3, [r3]
 8011ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	3308      	adds	r3, #8
 8012004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012006:	61ba      	str	r2, [r7, #24]
 8012008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801200a:	6979      	ldr	r1, [r7, #20]
 801200c:	69ba      	ldr	r2, [r7, #24]
 801200e:	e841 2300 	strex	r3, r2, [r1]
 8012012:	613b      	str	r3, [r7, #16]
   return(result);
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d1e5      	bne.n	8011fe6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2220      	movs	r2, #32
 801201e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8012022:	bf00      	nop
 8012024:	373c      	adds	r7, #60	; 0x3c
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr
	...

08012030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012030:	b480      	push	{r7}
 8012032:	b095      	sub	sp, #84	; 0x54
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012040:	e853 3f00 	ldrex	r3, [r3]
 8012044:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801204c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	461a      	mov	r2, r3
 8012054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012056:	643b      	str	r3, [r7, #64]	; 0x40
 8012058:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801205a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801205c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801205e:	e841 2300 	strex	r3, r2, [r1]
 8012062:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012066:	2b00      	cmp	r3, #0
 8012068:	d1e6      	bne.n	8012038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	3308      	adds	r3, #8
 8012070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012072:	6a3b      	ldr	r3, [r7, #32]
 8012074:	e853 3f00 	ldrex	r3, [r3]
 8012078:	61fb      	str	r3, [r7, #28]
   return(result);
 801207a:	69fa      	ldr	r2, [r7, #28]
 801207c:	4b1e      	ldr	r3, [pc, #120]	; (80120f8 <UART_EndRxTransfer+0xc8>)
 801207e:	4013      	ands	r3, r2
 8012080:	64bb      	str	r3, [r7, #72]	; 0x48
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	3308      	adds	r3, #8
 8012088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801208a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801208c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801208e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012092:	e841 2300 	strex	r3, r2, [r1]
 8012096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209a:	2b00      	cmp	r3, #0
 801209c:	d1e5      	bne.n	801206a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d118      	bne.n	80120d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	e853 3f00 	ldrex	r3, [r3]
 80120b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	f023 0310 	bic.w	r3, r3, #16
 80120ba:	647b      	str	r3, [r7, #68]	; 0x44
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	461a      	mov	r2, r3
 80120c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120c4:	61bb      	str	r3, [r7, #24]
 80120c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c8:	6979      	ldr	r1, [r7, #20]
 80120ca:	69ba      	ldr	r2, [r7, #24]
 80120cc:	e841 2300 	strex	r3, r2, [r1]
 80120d0:	613b      	str	r3, [r7, #16]
   return(result);
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d1e6      	bne.n	80120a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2220      	movs	r2, #32
 80120dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2200      	movs	r2, #0
 80120e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 80120ec:	bf00      	nop
 80120ee:	3754      	adds	r7, #84	; 0x54
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr
 80120f8:	effffffe 	.word	0xeffffffe

080120fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b090      	sub	sp, #64	; 0x40
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012108:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	69db      	ldr	r3, [r3, #28]
 801210e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012112:	d037      	beq.n	8012184 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8012114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012116:	2200      	movs	r2, #0
 8012118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801211c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	3308      	adds	r3, #8
 8012122:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	e853 3f00 	ldrex	r3, [r3]
 801212a:	623b      	str	r3, [r7, #32]
   return(result);
 801212c:	6a3b      	ldr	r3, [r7, #32]
 801212e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012132:	63bb      	str	r3, [r7, #56]	; 0x38
 8012134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	3308      	adds	r3, #8
 801213a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801213c:	633a      	str	r2, [r7, #48]	; 0x30
 801213e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012140:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012144:	e841 2300 	strex	r3, r2, [r1]
 8012148:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1e5      	bne.n	801211c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	e853 3f00 	ldrex	r3, [r3]
 801215c:	60fb      	str	r3, [r7, #12]
   return(result);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012164:	637b      	str	r3, [r7, #52]	; 0x34
 8012166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	461a      	mov	r2, r3
 801216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801216e:	61fb      	str	r3, [r7, #28]
 8012170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012172:	69b9      	ldr	r1, [r7, #24]
 8012174:	69fa      	ldr	r2, [r7, #28]
 8012176:	e841 2300 	strex	r3, r2, [r1]
 801217a:	617b      	str	r3, [r7, #20]
   return(result);
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d1e6      	bne.n	8012150 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012182:	e002      	b.n	801218a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8012184:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012186:	f7f0 f99b 	bl	80024c0 <HAL_UART_TxCpltCallback>
}
 801218a:	bf00      	nop
 801218c:	3740      	adds	r7, #64	; 0x40
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b084      	sub	sp, #16
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801219e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80121a0:	68f8      	ldr	r0, [r7, #12]
 80121a2:	f7fe fe9f 	bl	8010ee4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121a6:	bf00      	nop
 80121a8:	3710      	adds	r7, #16
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}

080121ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80121ae:	b580      	push	{r7, lr}
 80121b0:	b086      	sub	sp, #24
 80121b2:	af00      	add	r7, sp, #0
 80121b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80121c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	689b      	ldr	r3, [r3, #8]
 80121d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121d6:	2b80      	cmp	r3, #128	; 0x80
 80121d8:	d109      	bne.n	80121ee <UART_DMAError+0x40>
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	2b21      	cmp	r3, #33	; 0x21
 80121de:	d106      	bne.n	80121ee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	2200      	movs	r2, #0
 80121e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80121e8:	6978      	ldr	r0, [r7, #20]
 80121ea:	f7ff fedf 	bl	8011fac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	689b      	ldr	r3, [r3, #8]
 80121f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121f8:	2b40      	cmp	r3, #64	; 0x40
 80121fa:	d109      	bne.n	8012210 <UART_DMAError+0x62>
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2b22      	cmp	r3, #34	; 0x22
 8012200:	d106      	bne.n	8012210 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	2200      	movs	r2, #0
 8012206:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801220a:	6978      	ldr	r0, [r7, #20]
 801220c:	f7ff ff10 	bl	8012030 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012216:	f043 0210 	orr.w	r2, r3, #16
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012220:	6978      	ldr	r0, [r7, #20]
 8012222:	f7fe fe69 	bl	8010ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012226:	bf00      	nop
 8012228:	3718      	adds	r7, #24
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b084      	sub	sp, #16
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801223a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2200      	movs	r2, #0
 8012240:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2200      	movs	r2, #0
 8012248:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801224c:	68f8      	ldr	r0, [r7, #12]
 801224e:	f7fe fe53 	bl	8010ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012252:	bf00      	nop
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801225a:	b580      	push	{r7, lr}
 801225c:	b088      	sub	sp, #32
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	e853 3f00 	ldrex	r3, [r3]
 801226e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012276:	61fb      	str	r3, [r7, #28]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	461a      	mov	r2, r3
 801227e:	69fb      	ldr	r3, [r7, #28]
 8012280:	61bb      	str	r3, [r7, #24]
 8012282:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012284:	6979      	ldr	r1, [r7, #20]
 8012286:	69ba      	ldr	r2, [r7, #24]
 8012288:	e841 2300 	strex	r3, r2, [r1]
 801228c:	613b      	str	r3, [r7, #16]
   return(result);
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d1e6      	bne.n	8012262 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2220      	movs	r2, #32
 8012298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2200      	movs	r2, #0
 80122a0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7f0 f90c 	bl	80024c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122a8:	bf00      	nop
 80122aa:	3720      	adds	r7, #32
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b09c      	sub	sp, #112	; 0x70
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122c8:	2b22      	cmp	r3, #34	; 0x22
 80122ca:	f040 80be 	bne.w	801244a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80122d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80122dc:	b2d9      	uxtb	r1, r3
 80122de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80122e2:	b2da      	uxtb	r2, r3
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122e8:	400a      	ands	r2, r1
 80122ea:	b2d2      	uxtb	r2, r2
 80122ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122f2:	1c5a      	adds	r2, r3, #1
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122fe:	b29b      	uxth	r3, r3
 8012300:	3b01      	subs	r3, #1
 8012302:	b29a      	uxth	r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012310:	b29b      	uxth	r3, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	f040 80a1 	bne.w	801245a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801231e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012320:	e853 3f00 	ldrex	r3, [r3]
 8012324:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801232c:	66bb      	str	r3, [r7, #104]	; 0x68
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	461a      	mov	r2, r3
 8012334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012336:	65bb      	str	r3, [r7, #88]	; 0x58
 8012338:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801233a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801233c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801233e:	e841 2300 	strex	r3, r2, [r1]
 8012342:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012346:	2b00      	cmp	r3, #0
 8012348:	d1e6      	bne.n	8012318 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	3308      	adds	r3, #8
 8012350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012354:	e853 3f00 	ldrex	r3, [r3]
 8012358:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801235a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801235c:	f023 0301 	bic.w	r3, r3, #1
 8012360:	667b      	str	r3, [r7, #100]	; 0x64
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	3308      	adds	r3, #8
 8012368:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801236a:	647a      	str	r2, [r7, #68]	; 0x44
 801236c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801236e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012372:	e841 2300 	strex	r3, r2, [r1]
 8012376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801237a:	2b00      	cmp	r3, #0
 801237c:	d1e5      	bne.n	801234a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2220      	movs	r2, #32
 8012382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2200      	movs	r2, #0
 801238a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2200      	movs	r2, #0
 8012390:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	4a33      	ldr	r2, [pc, #204]	; (8012464 <UART_RxISR_8BIT+0x1b4>)
 8012398:	4293      	cmp	r3, r2
 801239a:	d01f      	beq.n	80123dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d018      	beq.n	80123dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b2:	e853 3f00 	ldrex	r3, [r3]
 80123b6:	623b      	str	r3, [r7, #32]
   return(result);
 80123b8:	6a3b      	ldr	r3, [r7, #32]
 80123ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80123be:	663b      	str	r3, [r7, #96]	; 0x60
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	461a      	mov	r2, r3
 80123c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80123c8:	633b      	str	r3, [r7, #48]	; 0x30
 80123ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80123ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123d0:	e841 2300 	strex	r3, r2, [r1]
 80123d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80123d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d1e6      	bne.n	80123aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123e0:	2b01      	cmp	r3, #1
 80123e2:	d12e      	bne.n	8012442 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	e853 3f00 	ldrex	r3, [r3]
 80123f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	f023 0310 	bic.w	r3, r3, #16
 80123fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	461a      	mov	r2, r3
 8012406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012408:	61fb      	str	r3, [r7, #28]
 801240a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801240c:	69b9      	ldr	r1, [r7, #24]
 801240e:	69fa      	ldr	r2, [r7, #28]
 8012410:	e841 2300 	strex	r3, r2, [r1]
 8012414:	617b      	str	r3, [r7, #20]
   return(result);
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d1e6      	bne.n	80123ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	69db      	ldr	r3, [r3, #28]
 8012422:	f003 0310 	and.w	r3, r3, #16
 8012426:	2b10      	cmp	r3, #16
 8012428:	d103      	bne.n	8012432 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	2210      	movs	r2, #16
 8012430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012438:	4619      	mov	r1, r3
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f7fe fd66 	bl	8010f0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012440:	e00b      	b.n	801245a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f7ee f920 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012448:	e007      	b.n	801245a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	699a      	ldr	r2, [r3, #24]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f042 0208 	orr.w	r2, r2, #8
 8012458:	619a      	str	r2, [r3, #24]
}
 801245a:	bf00      	nop
 801245c:	3770      	adds	r7, #112	; 0x70
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
 8012462:	bf00      	nop
 8012464:	58000c00 	.word	0x58000c00

08012468 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b09c      	sub	sp, #112	; 0x70
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012476:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012480:	2b22      	cmp	r3, #34	; 0x22
 8012482:	f040 80be 	bne.w	8012602 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801248c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012494:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012496:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801249a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801249e:	4013      	ands	r3, r2
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124aa:	1c9a      	adds	r2, r3, #2
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	3b01      	subs	r3, #1
 80124ba:	b29a      	uxth	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	f040 80a1 	bne.w	8012612 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124d8:	e853 3f00 	ldrex	r3, [r3]
 80124dc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80124de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80124e4:	667b      	str	r3, [r7, #100]	; 0x64
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	461a      	mov	r2, r3
 80124ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124ee:	657b      	str	r3, [r7, #84]	; 0x54
 80124f0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80124f6:	e841 2300 	strex	r3, r2, [r1]
 80124fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80124fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d1e6      	bne.n	80124d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	3308      	adds	r3, #8
 8012508:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801250c:	e853 3f00 	ldrex	r3, [r3]
 8012510:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012514:	f023 0301 	bic.w	r3, r3, #1
 8012518:	663b      	str	r3, [r7, #96]	; 0x60
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	3308      	adds	r3, #8
 8012520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012522:	643a      	str	r2, [r7, #64]	; 0x40
 8012524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801252a:	e841 2300 	strex	r3, r2, [r1]
 801252e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012532:	2b00      	cmp	r3, #0
 8012534:	d1e5      	bne.n	8012502 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2220      	movs	r2, #32
 801253a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2200      	movs	r2, #0
 8012542:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2200      	movs	r2, #0
 8012548:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	4a33      	ldr	r2, [pc, #204]	; (801261c <UART_RxISR_16BIT+0x1b4>)
 8012550:	4293      	cmp	r3, r2
 8012552:	d01f      	beq.n	8012594 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801255e:	2b00      	cmp	r3, #0
 8012560:	d018      	beq.n	8012594 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012568:	6a3b      	ldr	r3, [r7, #32]
 801256a:	e853 3f00 	ldrex	r3, [r3]
 801256e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012570:	69fb      	ldr	r3, [r7, #28]
 8012572:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	461a      	mov	r2, r3
 801257e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012582:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012588:	e841 2300 	strex	r3, r2, [r1]
 801258c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012590:	2b00      	cmp	r3, #0
 8012592:	d1e6      	bne.n	8012562 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012598:	2b01      	cmp	r3, #1
 801259a:	d12e      	bne.n	80125fa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2200      	movs	r2, #0
 80125a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	e853 3f00 	ldrex	r3, [r3]
 80125ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	f023 0310 	bic.w	r3, r3, #16
 80125b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	461a      	mov	r2, r3
 80125be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80125c0:	61bb      	str	r3, [r7, #24]
 80125c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125c4:	6979      	ldr	r1, [r7, #20]
 80125c6:	69ba      	ldr	r2, [r7, #24]
 80125c8:	e841 2300 	strex	r3, r2, [r1]
 80125cc:	613b      	str	r3, [r7, #16]
   return(result);
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d1e6      	bne.n	80125a2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	69db      	ldr	r3, [r3, #28]
 80125da:	f003 0310 	and.w	r3, r3, #16
 80125de:	2b10      	cmp	r3, #16
 80125e0:	d103      	bne.n	80125ea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2210      	movs	r2, #16
 80125e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80125f0:	4619      	mov	r1, r3
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f7fe fc8a 	bl	8010f0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80125f8:	e00b      	b.n	8012612 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7ee f844 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012600:	e007      	b.n	8012612 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	699a      	ldr	r2, [r3, #24]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f042 0208 	orr.w	r2, r2, #8
 8012610:	619a      	str	r2, [r3, #24]
}
 8012612:	bf00      	nop
 8012614:	3770      	adds	r7, #112	; 0x70
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	58000c00 	.word	0x58000c00

08012620 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b0ac      	sub	sp, #176	; 0xb0
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801262e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	69db      	ldr	r3, [r3, #28]
 8012638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	689b      	ldr	r3, [r3, #8]
 801264c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012656:	2b22      	cmp	r3, #34	; 0x22
 8012658:	f040 8180 	bne.w	801295c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012662:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012666:	e123      	b.n	80128b0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801266e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012672:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012676:	b2d9      	uxtb	r1, r3
 8012678:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801267c:	b2da      	uxtb	r2, r3
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012682:	400a      	ands	r2, r1
 8012684:	b2d2      	uxtb	r2, r2
 8012686:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801268c:	1c5a      	adds	r2, r3, #1
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012698:	b29b      	uxth	r3, r3
 801269a:	3b01      	subs	r3, #1
 801269c:	b29a      	uxth	r2, r3
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	69db      	ldr	r3, [r3, #28]
 80126aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80126ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126b2:	f003 0307 	and.w	r3, r3, #7
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d053      	beq.n	8012762 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80126ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126be:	f003 0301 	and.w	r3, r3, #1
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d011      	beq.n	80126ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80126c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80126ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d00b      	beq.n	80126ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2201      	movs	r2, #1
 80126d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126e0:	f043 0201 	orr.w	r2, r3, #1
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126ee:	f003 0302 	and.w	r3, r3, #2
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d011      	beq.n	801271a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80126f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80126fa:	f003 0301 	and.w	r3, r3, #1
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d00b      	beq.n	801271a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2202      	movs	r2, #2
 8012708:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012710:	f043 0204 	orr.w	r2, r3, #4
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801271a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801271e:	f003 0304 	and.w	r3, r3, #4
 8012722:	2b00      	cmp	r3, #0
 8012724:	d011      	beq.n	801274a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801272a:	f003 0301 	and.w	r3, r3, #1
 801272e:	2b00      	cmp	r3, #0
 8012730:	d00b      	beq.n	801274a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	2204      	movs	r2, #4
 8012738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012740:	f043 0202 	orr.w	r2, r3, #2
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012750:	2b00      	cmp	r3, #0
 8012752:	d006      	beq.n	8012762 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f7fe fbcf 	bl	8010ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2200      	movs	r2, #0
 801275e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012768:	b29b      	uxth	r3, r3
 801276a:	2b00      	cmp	r3, #0
 801276c:	f040 80a0 	bne.w	80128b0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012778:	e853 3f00 	ldrex	r3, [r3]
 801277c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801277e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	461a      	mov	r2, r3
 801278e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012792:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012794:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012796:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012798:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801279a:	e841 2300 	strex	r3, r2, [r1]
 801279e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80127a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d1e4      	bne.n	8012770 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	3308      	adds	r3, #8
 80127ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80127b0:	e853 3f00 	ldrex	r3, [r3]
 80127b4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80127b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80127b8:	4b6e      	ldr	r3, [pc, #440]	; (8012974 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80127ba:	4013      	ands	r3, r2
 80127bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	3308      	adds	r3, #8
 80127c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80127ca:	66ba      	str	r2, [r7, #104]	; 0x68
 80127cc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80127d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80127d2:	e841 2300 	strex	r3, r2, [r1]
 80127d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80127d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d1e3      	bne.n	80127a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2220      	movs	r2, #32
 80127e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2200      	movs	r2, #0
 80127ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2200      	movs	r2, #0
 80127f0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4a60      	ldr	r2, [pc, #384]	; (8012978 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80127f8:	4293      	cmp	r3, r2
 80127fa:	d021      	beq.n	8012840 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012806:	2b00      	cmp	r3, #0
 8012808:	d01a      	beq.n	8012840 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012812:	e853 3f00 	ldrex	r3, [r3]
 8012816:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801281a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801281e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	461a      	mov	r2, r3
 8012828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801282c:	657b      	str	r3, [r7, #84]	; 0x54
 801282e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012830:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012832:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012834:	e841 2300 	strex	r3, r2, [r1]
 8012838:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801283a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801283c:	2b00      	cmp	r3, #0
 801283e:	d1e4      	bne.n	801280a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012844:	2b01      	cmp	r3, #1
 8012846:	d130      	bne.n	80128aa <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2200      	movs	r2, #0
 801284c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012856:	e853 3f00 	ldrex	r3, [r3]
 801285a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285e:	f023 0310 	bic.w	r3, r3, #16
 8012862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	461a      	mov	r2, r3
 801286c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012870:	643b      	str	r3, [r7, #64]	; 0x40
 8012872:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012878:	e841 2300 	strex	r3, r2, [r1]
 801287c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012880:	2b00      	cmp	r3, #0
 8012882:	d1e4      	bne.n	801284e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	69db      	ldr	r3, [r3, #28]
 801288a:	f003 0310 	and.w	r3, r3, #16
 801288e:	2b10      	cmp	r3, #16
 8012890:	d103      	bne.n	801289a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2210      	movs	r2, #16
 8012898:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80128a0:	4619      	mov	r1, r3
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f7fe fb32 	bl	8010f0c <HAL_UARTEx_RxEventCallback>
 80128a8:	e002      	b.n	80128b0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f7ed feec 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80128b0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d006      	beq.n	80128c6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80128b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128bc:	f003 0320 	and.w	r3, r3, #32
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f47f aed1 	bne.w	8012668 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80128d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d049      	beq.n	801296c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80128de:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d242      	bcs.n	801296c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	3308      	adds	r3, #8
 80128ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ee:	6a3b      	ldr	r3, [r7, #32]
 80128f0:	e853 3f00 	ldrex	r3, [r3]
 80128f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80128fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	3308      	adds	r3, #8
 8012906:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801290a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801290c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801290e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012912:	e841 2300 	strex	r3, r2, [r1]
 8012916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	2b00      	cmp	r3, #0
 801291c:	d1e3      	bne.n	80128e6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	4a16      	ldr	r2, [pc, #88]	; (801297c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012922:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	e853 3f00 	ldrex	r3, [r3]
 8012930:	60bb      	str	r3, [r7, #8]
   return(result);
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	f043 0320 	orr.w	r3, r3, #32
 8012938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	461a      	mov	r2, r3
 8012942:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012946:	61bb      	str	r3, [r7, #24]
 8012948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801294a:	6979      	ldr	r1, [r7, #20]
 801294c:	69ba      	ldr	r2, [r7, #24]
 801294e:	e841 2300 	strex	r3, r2, [r1]
 8012952:	613b      	str	r3, [r7, #16]
   return(result);
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1e4      	bne.n	8012924 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801295a:	e007      	b.n	801296c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	699a      	ldr	r2, [r3, #24]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f042 0208 	orr.w	r2, r2, #8
 801296a:	619a      	str	r2, [r3, #24]
}
 801296c:	bf00      	nop
 801296e:	37b0      	adds	r7, #176	; 0xb0
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	effffffe 	.word	0xeffffffe
 8012978:	58000c00 	.word	0x58000c00
 801297c:	080122b1 	.word	0x080122b1

08012980 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b0ae      	sub	sp, #184	; 0xb8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801298e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	69db      	ldr	r3, [r3, #28]
 8012998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	689b      	ldr	r3, [r3, #8]
 80129ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80129b6:	2b22      	cmp	r3, #34	; 0x22
 80129b8:	f040 8184 	bne.w	8012cc4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80129c2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129c6:	e127      	b.n	8012c18 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80129da:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80129de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80129e2:	4013      	ands	r3, r2
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80129ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129f0:	1c9a      	adds	r2, r3, #2
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	3b01      	subs	r3, #1
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	69db      	ldr	r3, [r3, #28]
 8012a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a16:	f003 0307 	and.w	r3, r3, #7
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d053      	beq.n	8012ac6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012a1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a22:	f003 0301 	and.w	r3, r3, #1
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d011      	beq.n	8012a4e <UART_RxISR_16BIT_FIFOEN+0xce>
 8012a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d00b      	beq.n	8012a4e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a44:	f043 0201 	orr.w	r2, r3, #1
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a52:	f003 0302 	and.w	r3, r3, #2
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d011      	beq.n	8012a7e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a5e:	f003 0301 	and.w	r3, r3, #1
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d00b      	beq.n	8012a7e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	2202      	movs	r2, #2
 8012a6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a74:	f043 0204 	orr.w	r2, r3, #4
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a82:	f003 0304 	and.w	r3, r3, #4
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d011      	beq.n	8012aae <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a8e:	f003 0301 	and.w	r3, r3, #1
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d00b      	beq.n	8012aae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	2204      	movs	r2, #4
 8012a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012aa4:	f043 0202 	orr.w	r2, r3, #2
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d006      	beq.n	8012ac6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f7fe fa1d 	bl	8010ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f040 80a2 	bne.w	8012c18 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012adc:	e853 3f00 	ldrex	r3, [r3]
 8012ae0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	461a      	mov	r2, r3
 8012af2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012af6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012afa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012afc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012afe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012b02:	e841 2300 	strex	r3, r2, [r1]
 8012b06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d1e2      	bne.n	8012ad4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	3308      	adds	r3, #8
 8012b14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b18:	e853 3f00 	ldrex	r3, [r3]
 8012b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012b1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012b20:	4b6e      	ldr	r3, [pc, #440]	; (8012cdc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012b22:	4013      	ands	r3, r2
 8012b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	3308      	adds	r3, #8
 8012b2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012b32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012b34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012b38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012b3a:	e841 2300 	strex	r3, r2, [r1]
 8012b3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1e3      	bne.n	8012b0e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2220      	movs	r2, #32
 8012b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2200      	movs	r2, #0
 8012b52:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2200      	movs	r2, #0
 8012b58:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	4a60      	ldr	r2, [pc, #384]	; (8012ce0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d021      	beq.n	8012ba8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d01a      	beq.n	8012ba8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b7a:	e853 3f00 	ldrex	r3, [r3]
 8012b7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	461a      	mov	r2, r3
 8012b90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8012b96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012b9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b9c:	e841 2300 	strex	r3, r2, [r1]
 8012ba0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d1e4      	bne.n	8012b72 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bac:	2b01      	cmp	r3, #1
 8012bae:	d130      	bne.n	8012c12 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbe:	e853 3f00 	ldrex	r3, [r3]
 8012bc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bc6:	f023 0310 	bic.w	r3, r3, #16
 8012bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8012bda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012be0:	e841 2300 	strex	r3, r2, [r1]
 8012be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d1e4      	bne.n	8012bb6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	69db      	ldr	r3, [r3, #28]
 8012bf2:	f003 0310 	and.w	r3, r3, #16
 8012bf6:	2b10      	cmp	r3, #16
 8012bf8:	d103      	bne.n	8012c02 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2210      	movs	r2, #16
 8012c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c08:	4619      	mov	r1, r3
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f7fe f97e 	bl	8010f0c <HAL_UARTEx_RxEventCallback>
 8012c10:	e002      	b.n	8012c18 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7ed fd38 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c18:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d006      	beq.n	8012c2e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012c20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c24:	f003 0320 	and.w	r3, r3, #32
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	f47f aecd 	bne.w	80129c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c34:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012c38:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d049      	beq.n	8012cd4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c46:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d242      	bcs.n	8012cd4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	3308      	adds	r3, #8
 8012c54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c58:	e853 3f00 	ldrex	r3, [r3]
 8012c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8012c5e:	6a3b      	ldr	r3, [r7, #32]
 8012c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	3308      	adds	r3, #8
 8012c6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012c72:	633a      	str	r2, [r7, #48]	; 0x30
 8012c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c7a:	e841 2300 	strex	r3, r2, [r1]
 8012c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d1e3      	bne.n	8012c4e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	4a16      	ldr	r2, [pc, #88]	; (8012ce4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012c8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	e853 3f00 	ldrex	r3, [r3]
 8012c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	f043 0320 	orr.w	r3, r3, #32
 8012ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	461a      	mov	r2, r3
 8012caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012cae:	61fb      	str	r3, [r7, #28]
 8012cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cb2:	69b9      	ldr	r1, [r7, #24]
 8012cb4:	69fa      	ldr	r2, [r7, #28]
 8012cb6:	e841 2300 	strex	r3, r2, [r1]
 8012cba:	617b      	str	r3, [r7, #20]
   return(result);
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d1e4      	bne.n	8012c8c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012cc2:	e007      	b.n	8012cd4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	699a      	ldr	r2, [r3, #24]
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	f042 0208 	orr.w	r2, r2, #8
 8012cd2:	619a      	str	r2, [r3, #24]
}
 8012cd4:	bf00      	nop
 8012cd6:	37b8      	adds	r7, #184	; 0xb8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	effffffe 	.word	0xeffffffe
 8012ce0:	58000c00 	.word	0x58000c00
 8012ce4:	08012469 	.word	0x08012469

08012ce8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b083      	sub	sp, #12
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012cf0:	bf00      	nop
 8012cf2:	370c      	adds	r7, #12
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr

08012cfc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b083      	sub	sp, #12
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012d04:	bf00      	nop
 8012d06:	370c      	adds	r7, #12
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr

08012d10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012d10:	b480      	push	{r7}
 8012d12:	b083      	sub	sp, #12
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012d18:	bf00      	nop
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012d24:	b480      	push	{r7}
 8012d26:	b089      	sub	sp, #36	; 0x24
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d101      	bne.n	8012d3a <HAL_UARTEx_EnableStopMode+0x16>
 8012d36:	2302      	movs	r3, #2
 8012d38:	e021      	b.n	8012d7e <HAL_UARTEx_EnableStopMode+0x5a>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	e853 3f00 	ldrex	r3, [r3]
 8012d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	f043 0302 	orr.w	r3, r3, #2
 8012d56:	61fb      	str	r3, [r7, #28]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	61bb      	str	r3, [r7, #24]
 8012d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d64:	6979      	ldr	r1, [r7, #20]
 8012d66:	69ba      	ldr	r2, [r7, #24]
 8012d68:	e841 2300 	strex	r3, r2, [r1]
 8012d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d1e6      	bne.n	8012d42 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2200      	movs	r2, #0
 8012d78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d7c:	2300      	movs	r3, #0
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3724      	adds	r7, #36	; 0x24
 8012d82:	46bd      	mov	sp, r7
 8012d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d88:	4770      	bx	lr

08012d8a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012d8a:	b580      	push	{r7, lr}
 8012d8c:	b084      	sub	sp, #16
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d98:	2b01      	cmp	r3, #1
 8012d9a:	d101      	bne.n	8012da0 <HAL_UARTEx_EnableFifoMode+0x16>
 8012d9c:	2302      	movs	r3, #2
 8012d9e:	e02b      	b.n	8012df8 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2201      	movs	r2, #1
 8012da4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2224      	movs	r2, #36	; 0x24
 8012dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	681a      	ldr	r2, [r3, #0]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f022 0201 	bic.w	r2, r2, #1
 8012dc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012dce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012dd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	68fa      	ldr	r2, [r7, #12]
 8012dde:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012de0:	6878      	ldr	r0, [r7, #4]
 8012de2:	f000 f8c3 	bl	8012f6c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2220      	movs	r2, #32
 8012dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2200      	movs	r2, #0
 8012df2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012df6:	2300      	movs	r3, #0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3710      	adds	r7, #16
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b085      	sub	sp, #20
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e0e:	2b01      	cmp	r3, #1
 8012e10:	d101      	bne.n	8012e16 <HAL_UARTEx_DisableFifoMode+0x16>
 8012e12:	2302      	movs	r3, #2
 8012e14:	e027      	b.n	8012e66 <HAL_UARTEx_DisableFifoMode+0x66>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2201      	movs	r2, #1
 8012e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2224      	movs	r2, #36	; 0x24
 8012e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	681a      	ldr	r2, [r3, #0]
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f022 0201 	bic.w	r2, r2, #1
 8012e3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012e44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2200      	movs	r2, #0
 8012e4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2220      	movs	r2, #32
 8012e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e64:	2300      	movs	r3, #0
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3714      	adds	r7, #20
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e70:	4770      	bx	lr

08012e72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e72:	b580      	push	{r7, lr}
 8012e74:	b084      	sub	sp, #16
 8012e76:	af00      	add	r7, sp, #0
 8012e78:	6078      	str	r0, [r7, #4]
 8012e7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e82:	2b01      	cmp	r3, #1
 8012e84:	d101      	bne.n	8012e8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012e86:	2302      	movs	r3, #2
 8012e88:	e02d      	b.n	8012ee6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2224      	movs	r2, #36	; 0x24
 8012e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	f022 0201 	bic.w	r2, r2, #1
 8012eb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	689b      	ldr	r3, [r3, #8]
 8012eb8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	683a      	ldr	r2, [r7, #0]
 8012ec2:	430a      	orrs	r2, r1
 8012ec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f000 f850 	bl	8012f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	68fa      	ldr	r2, [r7, #12]
 8012ed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2220      	movs	r2, #32
 8012ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ee4:	2300      	movs	r3, #0
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3710      	adds	r7, #16
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b084      	sub	sp, #16
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	6078      	str	r0, [r7, #4]
 8012ef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d101      	bne.n	8012f06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012f02:	2302      	movs	r3, #2
 8012f04:	e02d      	b.n	8012f62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2201      	movs	r2, #1
 8012f0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2224      	movs	r2, #36	; 0x24
 8012f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	681a      	ldr	r2, [r3, #0]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	f022 0201 	bic.w	r2, r2, #1
 8012f2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	689b      	ldr	r3, [r3, #8]
 8012f34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	683a      	ldr	r2, [r7, #0]
 8012f3e:	430a      	orrs	r2, r1
 8012f40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f000 f812 	bl	8012f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	68fa      	ldr	r2, [r7, #12]
 8012f4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2220      	movs	r2, #32
 8012f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
	...

08012f6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b085      	sub	sp, #20
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d108      	bne.n	8012f8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2201      	movs	r2, #1
 8012f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	2201      	movs	r2, #1
 8012f88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012f8c:	e031      	b.n	8012ff2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012f8e:	2310      	movs	r3, #16
 8012f90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012f92:	2310      	movs	r3, #16
 8012f94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	689b      	ldr	r3, [r3, #8]
 8012f9c:	0e5b      	lsrs	r3, r3, #25
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	f003 0307 	and.w	r3, r3, #7
 8012fa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	689b      	ldr	r3, [r3, #8]
 8012fac:	0f5b      	lsrs	r3, r3, #29
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	f003 0307 	and.w	r3, r3, #7
 8012fb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012fb6:	7bbb      	ldrb	r3, [r7, #14]
 8012fb8:	7b3a      	ldrb	r2, [r7, #12]
 8012fba:	4911      	ldr	r1, [pc, #68]	; (8013000 <UARTEx_SetNbDataToProcess+0x94>)
 8012fbc:	5c8a      	ldrb	r2, [r1, r2]
 8012fbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012fc2:	7b3a      	ldrb	r2, [r7, #12]
 8012fc4:	490f      	ldr	r1, [pc, #60]	; (8013004 <UARTEx_SetNbDataToProcess+0x98>)
 8012fc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012fd4:	7bfb      	ldrb	r3, [r7, #15]
 8012fd6:	7b7a      	ldrb	r2, [r7, #13]
 8012fd8:	4909      	ldr	r1, [pc, #36]	; (8013000 <UARTEx_SetNbDataToProcess+0x94>)
 8012fda:	5c8a      	ldrb	r2, [r1, r2]
 8012fdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012fe0:	7b7a      	ldrb	r2, [r7, #13]
 8012fe2:	4908      	ldr	r1, [pc, #32]	; (8013004 <UARTEx_SetNbDataToProcess+0x98>)
 8012fe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012fe6:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012ff2:	bf00      	nop
 8012ff4:	3714      	adds	r7, #20
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffc:	4770      	bx	lr
 8012ffe:	bf00      	nop
 8013000:	08017940 	.word	0x08017940
 8013004:	08017948 	.word	0x08017948

08013008 <__NVIC_SetPriority>:
{
 8013008:	b480      	push	{r7}
 801300a:	b083      	sub	sp, #12
 801300c:	af00      	add	r7, sp, #0
 801300e:	4603      	mov	r3, r0
 8013010:	6039      	str	r1, [r7, #0]
 8013012:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013018:	2b00      	cmp	r3, #0
 801301a:	db0a      	blt.n	8013032 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	b2da      	uxtb	r2, r3
 8013020:	490c      	ldr	r1, [pc, #48]	; (8013054 <__NVIC_SetPriority+0x4c>)
 8013022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013026:	0112      	lsls	r2, r2, #4
 8013028:	b2d2      	uxtb	r2, r2
 801302a:	440b      	add	r3, r1
 801302c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013030:	e00a      	b.n	8013048 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	b2da      	uxtb	r2, r3
 8013036:	4908      	ldr	r1, [pc, #32]	; (8013058 <__NVIC_SetPriority+0x50>)
 8013038:	88fb      	ldrh	r3, [r7, #6]
 801303a:	f003 030f 	and.w	r3, r3, #15
 801303e:	3b04      	subs	r3, #4
 8013040:	0112      	lsls	r2, r2, #4
 8013042:	b2d2      	uxtb	r2, r2
 8013044:	440b      	add	r3, r1
 8013046:	761a      	strb	r2, [r3, #24]
}
 8013048:	bf00      	nop
 801304a:	370c      	adds	r7, #12
 801304c:	46bd      	mov	sp, r7
 801304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013052:	4770      	bx	lr
 8013054:	e000e100 	.word	0xe000e100
 8013058:	e000ed00 	.word	0xe000ed00

0801305c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801305c:	b580      	push	{r7, lr}
 801305e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013060:	4b05      	ldr	r3, [pc, #20]	; (8013078 <SysTick_Handler+0x1c>)
 8013062:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013064:	f002 fc92 	bl	801598c <xTaskGetSchedulerState>
 8013068:	4603      	mov	r3, r0
 801306a:	2b01      	cmp	r3, #1
 801306c:	d001      	beq.n	8013072 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801306e:	f003 fab3 	bl	80165d8 <xPortSysTickHandler>
  }
}
 8013072:	bf00      	nop
 8013074:	bd80      	pop	{r7, pc}
 8013076:	bf00      	nop
 8013078:	e000e010 	.word	0xe000e010

0801307c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801307c:	b580      	push	{r7, lr}
 801307e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013080:	2100      	movs	r1, #0
 8013082:	f06f 0004 	mvn.w	r0, #4
 8013086:	f7ff ffbf 	bl	8013008 <__NVIC_SetPriority>
#endif
}
 801308a:	bf00      	nop
 801308c:	bd80      	pop	{r7, pc}
	...

08013090 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013090:	b480      	push	{r7}
 8013092:	b083      	sub	sp, #12
 8013094:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013096:	f3ef 8305 	mrs	r3, IPSR
 801309a:	603b      	str	r3, [r7, #0]
  return(result);
 801309c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d003      	beq.n	80130aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80130a2:	f06f 0305 	mvn.w	r3, #5
 80130a6:	607b      	str	r3, [r7, #4]
 80130a8:	e00c      	b.n	80130c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80130aa:	4b0a      	ldr	r3, [pc, #40]	; (80130d4 <osKernelInitialize+0x44>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d105      	bne.n	80130be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80130b2:	4b08      	ldr	r3, [pc, #32]	; (80130d4 <osKernelInitialize+0x44>)
 80130b4:	2201      	movs	r2, #1
 80130b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80130b8:	2300      	movs	r3, #0
 80130ba:	607b      	str	r3, [r7, #4]
 80130bc:	e002      	b.n	80130c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80130be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80130c4:	687b      	ldr	r3, [r7, #4]
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	370c      	adds	r7, #12
 80130ca:	46bd      	mov	sp, r7
 80130cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d0:	4770      	bx	lr
 80130d2:	bf00      	nop
 80130d4:	24001130 	.word	0x24001130

080130d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130de:	f3ef 8305 	mrs	r3, IPSR
 80130e2:	603b      	str	r3, [r7, #0]
  return(result);
 80130e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d003      	beq.n	80130f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80130ea:	f06f 0305 	mvn.w	r3, #5
 80130ee:	607b      	str	r3, [r7, #4]
 80130f0:	e010      	b.n	8013114 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80130f2:	4b0b      	ldr	r3, [pc, #44]	; (8013120 <osKernelStart+0x48>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2b01      	cmp	r3, #1
 80130f8:	d109      	bne.n	801310e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80130fa:	f7ff ffbf 	bl	801307c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80130fe:	4b08      	ldr	r3, [pc, #32]	; (8013120 <osKernelStart+0x48>)
 8013100:	2202      	movs	r2, #2
 8013102:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013104:	f001 ff54 	bl	8014fb0 <vTaskStartScheduler>
      stat = osOK;
 8013108:	2300      	movs	r3, #0
 801310a:	607b      	str	r3, [r7, #4]
 801310c:	e002      	b.n	8013114 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801310e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013112:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013114:	687b      	ldr	r3, [r7, #4]
}
 8013116:	4618      	mov	r0, r3
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	24001130 	.word	0x24001130

08013124 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013124:	b580      	push	{r7, lr}
 8013126:	b08e      	sub	sp, #56	; 0x38
 8013128:	af04      	add	r7, sp, #16
 801312a:	60f8      	str	r0, [r7, #12]
 801312c:	60b9      	str	r1, [r7, #8]
 801312e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013130:	2300      	movs	r3, #0
 8013132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013134:	f3ef 8305 	mrs	r3, IPSR
 8013138:	617b      	str	r3, [r7, #20]
  return(result);
 801313a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801313c:	2b00      	cmp	r3, #0
 801313e:	d17e      	bne.n	801323e <osThreadNew+0x11a>
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d07b      	beq.n	801323e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013146:	2380      	movs	r3, #128	; 0x80
 8013148:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801314a:	2318      	movs	r3, #24
 801314c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801314e:	2300      	movs	r3, #0
 8013150:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8013152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013156:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d045      	beq.n	80131ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d002      	beq.n	801316c <osThreadNew+0x48>
        name = attr->name;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	699b      	ldr	r3, [r3, #24]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d002      	beq.n	801317a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	699b      	ldr	r3, [r3, #24]
 8013178:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d008      	beq.n	8013192 <osThreadNew+0x6e>
 8013180:	69fb      	ldr	r3, [r7, #28]
 8013182:	2b38      	cmp	r3, #56	; 0x38
 8013184:	d805      	bhi.n	8013192 <osThreadNew+0x6e>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	f003 0301 	and.w	r3, r3, #1
 801318e:	2b00      	cmp	r3, #0
 8013190:	d001      	beq.n	8013196 <osThreadNew+0x72>
        return (NULL);
 8013192:	2300      	movs	r3, #0
 8013194:	e054      	b.n	8013240 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	695b      	ldr	r3, [r3, #20]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d003      	beq.n	80131a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	695b      	ldr	r3, [r3, #20]
 80131a2:	089b      	lsrs	r3, r3, #2
 80131a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	689b      	ldr	r3, [r3, #8]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d00e      	beq.n	80131cc <osThreadNew+0xa8>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	2b5b      	cmp	r3, #91	; 0x5b
 80131b4:	d90a      	bls.n	80131cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d006      	beq.n	80131cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	695b      	ldr	r3, [r3, #20]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d002      	beq.n	80131cc <osThreadNew+0xa8>
        mem = 1;
 80131c6:	2301      	movs	r3, #1
 80131c8:	61bb      	str	r3, [r7, #24]
 80131ca:	e010      	b.n	80131ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	689b      	ldr	r3, [r3, #8]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d10c      	bne.n	80131ee <osThreadNew+0xca>
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	68db      	ldr	r3, [r3, #12]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d108      	bne.n	80131ee <osThreadNew+0xca>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	691b      	ldr	r3, [r3, #16]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d104      	bne.n	80131ee <osThreadNew+0xca>
          mem = 0;
 80131e4:	2300      	movs	r3, #0
 80131e6:	61bb      	str	r3, [r7, #24]
 80131e8:	e001      	b.n	80131ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80131ea:	2300      	movs	r3, #0
 80131ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80131ee:	69bb      	ldr	r3, [r7, #24]
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d110      	bne.n	8013216 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80131f8:	687a      	ldr	r2, [r7, #4]
 80131fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80131fc:	9202      	str	r2, [sp, #8]
 80131fe:	9301      	str	r3, [sp, #4]
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	6a3a      	ldr	r2, [r7, #32]
 8013208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801320a:	68f8      	ldr	r0, [r7, #12]
 801320c:	f001 fbe0 	bl	80149d0 <xTaskCreateStatic>
 8013210:	4603      	mov	r3, r0
 8013212:	613b      	str	r3, [r7, #16]
 8013214:	e013      	b.n	801323e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013216:	69bb      	ldr	r3, [r7, #24]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d110      	bne.n	801323e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801321c:	6a3b      	ldr	r3, [r7, #32]
 801321e:	b29a      	uxth	r2, r3
 8013220:	f107 0310 	add.w	r3, r7, #16
 8013224:	9301      	str	r3, [sp, #4]
 8013226:	69fb      	ldr	r3, [r7, #28]
 8013228:	9300      	str	r3, [sp, #0]
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801322e:	68f8      	ldr	r0, [r7, #12]
 8013230:	f001 fc2b 	bl	8014a8a <xTaskCreate>
 8013234:	4603      	mov	r3, r0
 8013236:	2b01      	cmp	r3, #1
 8013238:	d001      	beq.n	801323e <osThreadNew+0x11a>
            hTask = NULL;
 801323a:	2300      	movs	r3, #0
 801323c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801323e:	693b      	ldr	r3, [r7, #16]
}
 8013240:	4618      	mov	r0, r3
 8013242:	3728      	adds	r7, #40	; 0x28
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}

08013248 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013248:	b480      	push	{r7}
 801324a:	b083      	sub	sp, #12
 801324c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801324e:	f3ef 8305 	mrs	r3, IPSR
 8013252:	603b      	str	r3, [r7, #0]
  return(result);
 8013254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013256:	2b00      	cmp	r3, #0
 8013258:	d003      	beq.n	8013262 <osThreadYield+0x1a>
    stat = osErrorISR;
 801325a:	f06f 0305 	mvn.w	r3, #5
 801325e:	607b      	str	r3, [r7, #4]
 8013260:	e009      	b.n	8013276 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8013262:	2300      	movs	r3, #0
 8013264:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8013266:	4b07      	ldr	r3, [pc, #28]	; (8013284 <osThreadYield+0x3c>)
 8013268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801326c:	601a      	str	r2, [r3, #0]
 801326e:	f3bf 8f4f 	dsb	sy
 8013272:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013276:	687b      	ldr	r3, [r7, #4]
}
 8013278:	4618      	mov	r0, r3
 801327a:	370c      	adds	r7, #12
 801327c:	46bd      	mov	sp, r7
 801327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013282:	4770      	bx	lr
 8013284:	e000ed04 	.word	0xe000ed04

08013288 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8013288:	b580      	push	{r7, lr}
 801328a:	b086      	sub	sp, #24
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013294:	f3ef 8305 	mrs	r3, IPSR
 8013298:	60fb      	str	r3, [r7, #12]
  return(result);
 801329a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801329c:	2b00      	cmp	r3, #0
 801329e:	d003      	beq.n	80132a8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80132a0:	f06f 0305 	mvn.w	r3, #5
 80132a4:	617b      	str	r3, [r7, #20]
 80132a6:	e00b      	b.n	80132c0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d103      	bne.n	80132b6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80132ae:	f06f 0303 	mvn.w	r3, #3
 80132b2:	617b      	str	r3, [r7, #20]
 80132b4:	e004      	b.n	80132c0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80132b6:	2300      	movs	r3, #0
 80132b8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80132ba:	6938      	ldr	r0, [r7, #16]
 80132bc:	f001 fd5e 	bl	8014d7c <vTaskSuspend>
  }

  return (stat);
 80132c0:	697b      	ldr	r3, [r7, #20]
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3718      	adds	r7, #24
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}

080132ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b084      	sub	sp, #16
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132d2:	f3ef 8305 	mrs	r3, IPSR
 80132d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80132d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d003      	beq.n	80132e6 <osDelay+0x1c>
    stat = osErrorISR;
 80132de:	f06f 0305 	mvn.w	r3, #5
 80132e2:	60fb      	str	r3, [r7, #12]
 80132e4:	e007      	b.n	80132f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80132e6:	2300      	movs	r3, #0
 80132e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d002      	beq.n	80132f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f001 fd0f 	bl	8014d14 <vTaskDelay>
    }
  }

  return (stat);
 80132f6:	68fb      	ldr	r3, [r7, #12]
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3710      	adds	r7, #16
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8013300:	b580      	push	{r7, lr}
 8013302:	b086      	sub	sp, #24
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8013308:	2300      	movs	r3, #0
 801330a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801330c:	f3ef 8305 	mrs	r3, IPSR
 8013310:	60fb      	str	r3, [r7, #12]
  return(result);
 8013312:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8013314:	2b00      	cmp	r3, #0
 8013316:	d12d      	bne.n	8013374 <osEventFlagsNew+0x74>
    mem = -1;
 8013318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801331c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d015      	beq.n	8013350 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d006      	beq.n	801333a <osEventFlagsNew+0x3a>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	68db      	ldr	r3, [r3, #12]
 8013330:	2b1f      	cmp	r3, #31
 8013332:	d902      	bls.n	801333a <osEventFlagsNew+0x3a>
        mem = 1;
 8013334:	2301      	movs	r3, #1
 8013336:	613b      	str	r3, [r7, #16]
 8013338:	e00c      	b.n	8013354 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	689b      	ldr	r3, [r3, #8]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d108      	bne.n	8013354 <osEventFlagsNew+0x54>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	68db      	ldr	r3, [r3, #12]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d104      	bne.n	8013354 <osEventFlagsNew+0x54>
          mem = 0;
 801334a:	2300      	movs	r3, #0
 801334c:	613b      	str	r3, [r7, #16]
 801334e:	e001      	b.n	8013354 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8013350:	2300      	movs	r3, #0
 8013352:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	2b01      	cmp	r3, #1
 8013358:	d106      	bne.n	8013368 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	689b      	ldr	r3, [r3, #8]
 801335e:	4618      	mov	r0, r3
 8013360:	f000 fa70 	bl	8013844 <xEventGroupCreateStatic>
 8013364:	6178      	str	r0, [r7, #20]
 8013366:	e005      	b.n	8013374 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d102      	bne.n	8013374 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801336e:	f000 faa0 	bl	80138b2 <xEventGroupCreate>
 8013372:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013374:	697b      	ldr	r3, [r7, #20]
}
 8013376:	4618      	mov	r0, r3
 8013378:	3718      	adds	r7, #24
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
	...

08013380 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d004      	beq.n	801339e <osEventFlagsSet+0x1e>
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801339a:	2b00      	cmp	r3, #0
 801339c:	d003      	beq.n	80133a6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801339e:	f06f 0303 	mvn.w	r3, #3
 80133a2:	617b      	str	r3, [r7, #20]
 80133a4:	e028      	b.n	80133f8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133a6:	f3ef 8305 	mrs	r3, IPSR
 80133aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80133ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d01d      	beq.n	80133ee <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80133b2:	2300      	movs	r3, #0
 80133b4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80133b6:	f107 0308 	add.w	r3, r7, #8
 80133ba:	461a      	mov	r2, r3
 80133bc:	6839      	ldr	r1, [r7, #0]
 80133be:	6938      	ldr	r0, [r7, #16]
 80133c0:	f000 fc98 	bl	8013cf4 <xEventGroupSetBitsFromISR>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d103      	bne.n	80133d2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80133ca:	f06f 0302 	mvn.w	r3, #2
 80133ce:	617b      	str	r3, [r7, #20]
 80133d0:	e012      	b.n	80133f8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d00d      	beq.n	80133f8 <osEventFlagsSet+0x78>
 80133dc:	4b09      	ldr	r3, [pc, #36]	; (8013404 <osEventFlagsSet+0x84>)
 80133de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133e2:	601a      	str	r2, [r3, #0]
 80133e4:	f3bf 8f4f 	dsb	sy
 80133e8:	f3bf 8f6f 	isb	sy
 80133ec:	e004      	b.n	80133f8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80133ee:	6839      	ldr	r1, [r7, #0]
 80133f0:	6938      	ldr	r0, [r7, #16]
 80133f2:	f000 fbb7 	bl	8013b64 <xEventGroupSetBits>
 80133f6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80133f8:	697b      	ldr	r3, [r7, #20]
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3718      	adds	r7, #24
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
 8013402:	bf00      	nop
 8013404:	e000ed04 	.word	0xe000ed04

08013408 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8013408:	b580      	push	{r7, lr}
 801340a:	b086      	sub	sp, #24
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d004      	beq.n	8013426 <osEventFlagsClear+0x1e>
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013422:	2b00      	cmp	r3, #0
 8013424:	d003      	beq.n	801342e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013426:	f06f 0303 	mvn.w	r3, #3
 801342a:	617b      	str	r3, [r7, #20]
 801342c:	e019      	b.n	8013462 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801342e:	f3ef 8305 	mrs	r3, IPSR
 8013432:	60fb      	str	r3, [r7, #12]
  return(result);
 8013434:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00e      	beq.n	8013458 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801343a:	6938      	ldr	r0, [r7, #16]
 801343c:	f000 fb6e 	bl	8013b1c <xEventGroupGetBitsFromISR>
 8013440:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8013442:	6839      	ldr	r1, [r7, #0]
 8013444:	6938      	ldr	r0, [r7, #16]
 8013446:	f000 fb55 	bl	8013af4 <xEventGroupClearBitsFromISR>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d108      	bne.n	8013462 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8013450:	f06f 0302 	mvn.w	r3, #2
 8013454:	617b      	str	r3, [r7, #20]
 8013456:	e004      	b.n	8013462 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8013458:	6839      	ldr	r1, [r7, #0]
 801345a:	6938      	ldr	r0, [r7, #16]
 801345c:	f000 fb12 	bl	8013a84 <xEventGroupClearBits>
 8013460:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013462:	697b      	ldr	r3, [r7, #20]
}
 8013464:	4618      	mov	r0, r3
 8013466:	3718      	adds	r7, #24
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}

0801346c <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 801346c:	b580      	push	{r7, lr}
 801346e:	b086      	sub	sp, #24
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d102      	bne.n	8013484 <osEventFlagsGet+0x18>
    rflags = 0U;
 801347e:	2300      	movs	r3, #0
 8013480:	617b      	str	r3, [r7, #20]
 8013482:	e00f      	b.n	80134a4 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013484:	f3ef 8305 	mrs	r3, IPSR
 8013488:	60fb      	str	r3, [r7, #12]
  return(result);
 801348a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801348c:	2b00      	cmp	r3, #0
 801348e:	d004      	beq.n	801349a <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013490:	6938      	ldr	r0, [r7, #16]
 8013492:	f000 fb43 	bl	8013b1c <xEventGroupGetBitsFromISR>
 8013496:	6178      	str	r0, [r7, #20]
 8013498:	e004      	b.n	80134a4 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 801349a:	2100      	movs	r1, #0
 801349c:	6938      	ldr	r0, [r7, #16]
 801349e:	f000 faf1 	bl	8013a84 <xEventGroupClearBits>
 80134a2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80134a4:	697b      	ldr	r3, [r7, #20]
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3718      	adds	r7, #24
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}

080134ae <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80134ae:	b580      	push	{r7, lr}
 80134b0:	b08c      	sub	sp, #48	; 0x30
 80134b2:	af02      	add	r7, sp, #8
 80134b4:	60f8      	str	r0, [r7, #12]
 80134b6:	60b9      	str	r1, [r7, #8]
 80134b8:	607a      	str	r2, [r7, #4]
 80134ba:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d004      	beq.n	80134d0 <osEventFlagsWait+0x22>
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d003      	beq.n	80134d8 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80134d0:	f06f 0303 	mvn.w	r3, #3
 80134d4:	61fb      	str	r3, [r7, #28]
 80134d6:	e04b      	b.n	8013570 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134d8:	f3ef 8305 	mrs	r3, IPSR
 80134dc:	617b      	str	r3, [r7, #20]
  return(result);
 80134de:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d003      	beq.n	80134ec <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80134e4:	f06f 0305 	mvn.w	r3, #5
 80134e8:	61fb      	str	r3, [r7, #28]
 80134ea:	e041      	b.n	8013570 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f003 0301 	and.w	r3, r3, #1
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d002      	beq.n	80134fc <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80134f6:	2301      	movs	r3, #1
 80134f8:	627b      	str	r3, [r7, #36]	; 0x24
 80134fa:	e001      	b.n	8013500 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80134fc:	2300      	movs	r3, #0
 80134fe:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f003 0302 	and.w	r3, r3, #2
 8013506:	2b00      	cmp	r3, #0
 8013508:	d002      	beq.n	8013510 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 801350a:	2300      	movs	r3, #0
 801350c:	623b      	str	r3, [r7, #32]
 801350e:	e001      	b.n	8013514 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013510:	2301      	movs	r3, #1
 8013512:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	9300      	str	r3, [sp, #0]
 8013518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351a:	6a3a      	ldr	r2, [r7, #32]
 801351c:	68b9      	ldr	r1, [r7, #8]
 801351e:	69b8      	ldr	r0, [r7, #24]
 8013520:	f000 f9e2 	bl	80138e8 <xEventGroupWaitBits>
 8013524:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f003 0301 	and.w	r3, r3, #1
 801352c:	2b00      	cmp	r3, #0
 801352e:	d010      	beq.n	8013552 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013530:	68ba      	ldr	r2, [r7, #8]
 8013532:	69fb      	ldr	r3, [r7, #28]
 8013534:	4013      	ands	r3, r2
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	429a      	cmp	r2, r3
 801353a:	d019      	beq.n	8013570 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d003      	beq.n	801354a <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013542:	f06f 0301 	mvn.w	r3, #1
 8013546:	61fb      	str	r3, [r7, #28]
 8013548:	e012      	b.n	8013570 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801354a:	f06f 0302 	mvn.w	r3, #2
 801354e:	61fb      	str	r3, [r7, #28]
 8013550:	e00e      	b.n	8013570 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	69fb      	ldr	r3, [r7, #28]
 8013556:	4013      	ands	r3, r2
 8013558:	2b00      	cmp	r3, #0
 801355a:	d109      	bne.n	8013570 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d003      	beq.n	801356a <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8013562:	f06f 0301 	mvn.w	r3, #1
 8013566:	61fb      	str	r3, [r7, #28]
 8013568:	e002      	b.n	8013570 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801356a:	f06f 0302 	mvn.w	r3, #2
 801356e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013570:	69fb      	ldr	r3, [r7, #28]
}
 8013572:	4618      	mov	r0, r3
 8013574:	3728      	adds	r7, #40	; 0x28
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}

0801357a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801357a:	b580      	push	{r7, lr}
 801357c:	b08a      	sub	sp, #40	; 0x28
 801357e:	af02      	add	r7, sp, #8
 8013580:	60f8      	str	r0, [r7, #12]
 8013582:	60b9      	str	r1, [r7, #8]
 8013584:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013586:	2300      	movs	r3, #0
 8013588:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801358a:	f3ef 8305 	mrs	r3, IPSR
 801358e:	613b      	str	r3, [r7, #16]
  return(result);
 8013590:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013592:	2b00      	cmp	r3, #0
 8013594:	d15f      	bne.n	8013656 <osMessageQueueNew+0xdc>
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d05c      	beq.n	8013656 <osMessageQueueNew+0xdc>
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d059      	beq.n	8013656 <osMessageQueueNew+0xdc>
    mem = -1;
 80135a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d029      	beq.n	8013602 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	689b      	ldr	r3, [r3, #8]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d012      	beq.n	80135dc <osMessageQueueNew+0x62>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	68db      	ldr	r3, [r3, #12]
 80135ba:	2b4f      	cmp	r3, #79	; 0x4f
 80135bc:	d90e      	bls.n	80135dc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d00a      	beq.n	80135dc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	695a      	ldr	r2, [r3, #20]
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	68b9      	ldr	r1, [r7, #8]
 80135ce:	fb01 f303 	mul.w	r3, r1, r3
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d302      	bcc.n	80135dc <osMessageQueueNew+0x62>
        mem = 1;
 80135d6:	2301      	movs	r3, #1
 80135d8:	61bb      	str	r3, [r7, #24]
 80135da:	e014      	b.n	8013606 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	689b      	ldr	r3, [r3, #8]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d110      	bne.n	8013606 <osMessageQueueNew+0x8c>
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	68db      	ldr	r3, [r3, #12]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d10c      	bne.n	8013606 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d108      	bne.n	8013606 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	695b      	ldr	r3, [r3, #20]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d104      	bne.n	8013606 <osMessageQueueNew+0x8c>
          mem = 0;
 80135fc:	2300      	movs	r3, #0
 80135fe:	61bb      	str	r3, [r7, #24]
 8013600:	e001      	b.n	8013606 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8013602:	2300      	movs	r3, #0
 8013604:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	2b01      	cmp	r3, #1
 801360a:	d10b      	bne.n	8013624 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	691a      	ldr	r2, [r3, #16]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	2100      	movs	r1, #0
 8013616:	9100      	str	r1, [sp, #0]
 8013618:	68b9      	ldr	r1, [r7, #8]
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f000 fc9a 	bl	8013f54 <xQueueGenericCreateStatic>
 8013620:	61f8      	str	r0, [r7, #28]
 8013622:	e008      	b.n	8013636 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8013624:	69bb      	ldr	r3, [r7, #24]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d105      	bne.n	8013636 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801362a:	2200      	movs	r2, #0
 801362c:	68b9      	ldr	r1, [r7, #8]
 801362e:	68f8      	ldr	r0, [r7, #12]
 8013630:	f000 fd08 	bl	8014044 <xQueueGenericCreate>
 8013634:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013636:	69fb      	ldr	r3, [r7, #28]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d00c      	beq.n	8013656 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d003      	beq.n	801364a <osMessageQueueNew+0xd0>
        name = attr->name;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	617b      	str	r3, [r7, #20]
 8013648:	e001      	b.n	801364e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801364a:	2300      	movs	r3, #0
 801364c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801364e:	6979      	ldr	r1, [r7, #20]
 8013650:	69f8      	ldr	r0, [r7, #28]
 8013652:	f001 f95f 	bl	8014914 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013656:	69fb      	ldr	r3, [r7, #28]
}
 8013658:	4618      	mov	r0, r3
 801365a:	3720      	adds	r7, #32
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013660:	b580      	push	{r7, lr}
 8013662:	b088      	sub	sp, #32
 8013664:	af00      	add	r7, sp, #0
 8013666:	60f8      	str	r0, [r7, #12]
 8013668:	60b9      	str	r1, [r7, #8]
 801366a:	603b      	str	r3, [r7, #0]
 801366c:	4613      	mov	r3, r2
 801366e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013674:	2300      	movs	r3, #0
 8013676:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013678:	f3ef 8305 	mrs	r3, IPSR
 801367c:	617b      	str	r3, [r7, #20]
  return(result);
 801367e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013680:	2b00      	cmp	r3, #0
 8013682:	d028      	beq.n	80136d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d005      	beq.n	8013696 <osMessageQueuePut+0x36>
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d002      	beq.n	8013696 <osMessageQueuePut+0x36>
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d003      	beq.n	801369e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8013696:	f06f 0303 	mvn.w	r3, #3
 801369a:	61fb      	str	r3, [r7, #28]
 801369c:	e038      	b.n	8013710 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801369e:	2300      	movs	r3, #0
 80136a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80136a2:	f107 0210 	add.w	r2, r7, #16
 80136a6:	2300      	movs	r3, #0
 80136a8:	68b9      	ldr	r1, [r7, #8]
 80136aa:	69b8      	ldr	r0, [r7, #24]
 80136ac:	f000 fe26 	bl	80142fc <xQueueGenericSendFromISR>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d003      	beq.n	80136be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80136b6:	f06f 0302 	mvn.w	r3, #2
 80136ba:	61fb      	str	r3, [r7, #28]
 80136bc:	e028      	b.n	8013710 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d025      	beq.n	8013710 <osMessageQueuePut+0xb0>
 80136c4:	4b15      	ldr	r3, [pc, #84]	; (801371c <osMessageQueuePut+0xbc>)
 80136c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136ca:	601a      	str	r2, [r3, #0]
 80136cc:	f3bf 8f4f 	dsb	sy
 80136d0:	f3bf 8f6f 	isb	sy
 80136d4:	e01c      	b.n	8013710 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d002      	beq.n	80136e2 <osMessageQueuePut+0x82>
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d103      	bne.n	80136ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80136e2:	f06f 0303 	mvn.w	r3, #3
 80136e6:	61fb      	str	r3, [r7, #28]
 80136e8:	e012      	b.n	8013710 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80136ea:	2300      	movs	r3, #0
 80136ec:	683a      	ldr	r2, [r7, #0]
 80136ee:	68b9      	ldr	r1, [r7, #8]
 80136f0:	69b8      	ldr	r0, [r7, #24]
 80136f2:	f000 fd05 	bl	8014100 <xQueueGenericSend>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	d009      	beq.n	8013710 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d003      	beq.n	801370a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8013702:	f06f 0301 	mvn.w	r3, #1
 8013706:	61fb      	str	r3, [r7, #28]
 8013708:	e002      	b.n	8013710 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801370a:	f06f 0302 	mvn.w	r3, #2
 801370e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013710:	69fb      	ldr	r3, [r7, #28]
}
 8013712:	4618      	mov	r0, r3
 8013714:	3720      	adds	r7, #32
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	e000ed04 	.word	0xe000ed04

08013720 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013720:	b580      	push	{r7, lr}
 8013722:	b088      	sub	sp, #32
 8013724:	af00      	add	r7, sp, #0
 8013726:	60f8      	str	r0, [r7, #12]
 8013728:	60b9      	str	r1, [r7, #8]
 801372a:	607a      	str	r2, [r7, #4]
 801372c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013732:	2300      	movs	r3, #0
 8013734:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013736:	f3ef 8305 	mrs	r3, IPSR
 801373a:	617b      	str	r3, [r7, #20]
  return(result);
 801373c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801373e:	2b00      	cmp	r3, #0
 8013740:	d028      	beq.n	8013794 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013742:	69bb      	ldr	r3, [r7, #24]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d005      	beq.n	8013754 <osMessageQueueGet+0x34>
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d002      	beq.n	8013754 <osMessageQueueGet+0x34>
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d003      	beq.n	801375c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013754:	f06f 0303 	mvn.w	r3, #3
 8013758:	61fb      	str	r3, [r7, #28]
 801375a:	e037      	b.n	80137cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801375c:	2300      	movs	r3, #0
 801375e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013760:	f107 0310 	add.w	r3, r7, #16
 8013764:	461a      	mov	r2, r3
 8013766:	68b9      	ldr	r1, [r7, #8]
 8013768:	69b8      	ldr	r0, [r7, #24]
 801376a:	f000 ff43 	bl	80145f4 <xQueueReceiveFromISR>
 801376e:	4603      	mov	r3, r0
 8013770:	2b01      	cmp	r3, #1
 8013772:	d003      	beq.n	801377c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013774:	f06f 0302 	mvn.w	r3, #2
 8013778:	61fb      	str	r3, [r7, #28]
 801377a:	e027      	b.n	80137cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d024      	beq.n	80137cc <osMessageQueueGet+0xac>
 8013782:	4b15      	ldr	r3, [pc, #84]	; (80137d8 <osMessageQueueGet+0xb8>)
 8013784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013788:	601a      	str	r2, [r3, #0]
 801378a:	f3bf 8f4f 	dsb	sy
 801378e:	f3bf 8f6f 	isb	sy
 8013792:	e01b      	b.n	80137cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013794:	69bb      	ldr	r3, [r7, #24]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d002      	beq.n	80137a0 <osMessageQueueGet+0x80>
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d103      	bne.n	80137a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80137a0:	f06f 0303 	mvn.w	r3, #3
 80137a4:	61fb      	str	r3, [r7, #28]
 80137a6:	e011      	b.n	80137cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80137a8:	683a      	ldr	r2, [r7, #0]
 80137aa:	68b9      	ldr	r1, [r7, #8]
 80137ac:	69b8      	ldr	r0, [r7, #24]
 80137ae:	f000 fe41 	bl	8014434 <xQueueReceive>
 80137b2:	4603      	mov	r3, r0
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d009      	beq.n	80137cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d003      	beq.n	80137c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80137be:	f06f 0301 	mvn.w	r3, #1
 80137c2:	61fb      	str	r3, [r7, #28]
 80137c4:	e002      	b.n	80137cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80137c6:	f06f 0302 	mvn.w	r3, #2
 80137ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80137cc:	69fb      	ldr	r3, [r7, #28]
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3720      	adds	r7, #32
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	e000ed04 	.word	0xe000ed04

080137dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80137dc:	b480      	push	{r7}
 80137de:	b085      	sub	sp, #20
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	4a07      	ldr	r2, [pc, #28]	; (8013808 <vApplicationGetIdleTaskMemory+0x2c>)
 80137ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	4a06      	ldr	r2, [pc, #24]	; (801380c <vApplicationGetIdleTaskMemory+0x30>)
 80137f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2280      	movs	r2, #128	; 0x80
 80137f8:	601a      	str	r2, [r3, #0]
}
 80137fa:	bf00      	nop
 80137fc:	3714      	adds	r7, #20
 80137fe:	46bd      	mov	sp, r7
 8013800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013804:	4770      	bx	lr
 8013806:	bf00      	nop
 8013808:	24001134 	.word	0x24001134
 801380c:	24001190 	.word	0x24001190

08013810 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013810:	b480      	push	{r7}
 8013812:	b085      	sub	sp, #20
 8013814:	af00      	add	r7, sp, #0
 8013816:	60f8      	str	r0, [r7, #12]
 8013818:	60b9      	str	r1, [r7, #8]
 801381a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	4a07      	ldr	r2, [pc, #28]	; (801383c <vApplicationGetTimerTaskMemory+0x2c>)
 8013820:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	4a06      	ldr	r2, [pc, #24]	; (8013840 <vApplicationGetTimerTaskMemory+0x30>)
 8013826:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801382e:	601a      	str	r2, [r3, #0]
}
 8013830:	bf00      	nop
 8013832:	3714      	adds	r7, #20
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr
 801383c:	24001390 	.word	0x24001390
 8013840:	240013ec 	.word	0x240013ec

08013844 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013844:	b580      	push	{r7, lr}
 8013846:	b086      	sub	sp, #24
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d10a      	bne.n	8013868 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013856:	f383 8811 	msr	BASEPRI, r3
 801385a:	f3bf 8f6f 	isb	sy
 801385e:	f3bf 8f4f 	dsb	sy
 8013862:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013864:	bf00      	nop
 8013866:	e7fe      	b.n	8013866 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013868:	2320      	movs	r3, #32
 801386a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	2b20      	cmp	r3, #32
 8013870:	d00a      	beq.n	8013888 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013876:	f383 8811 	msr	BASEPRI, r3
 801387a:	f3bf 8f6f 	isb	sy
 801387e:	f3bf 8f4f 	dsb	sy
 8013882:	60fb      	str	r3, [r7, #12]
}
 8013884:	bf00      	nop
 8013886:	e7fe      	b.n	8013886 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d00a      	beq.n	80138a8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	2200      	movs	r2, #0
 8013896:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	3304      	adds	r3, #4
 801389c:	4618      	mov	r0, r3
 801389e:	f000 fa3d 	bl	8013d1c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	2201      	movs	r2, #1
 80138a6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80138a8:	697b      	ldr	r3, [r7, #20]
	}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3718      	adds	r7, #24
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}

080138b2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80138b2:	b580      	push	{r7, lr}
 80138b4:	b082      	sub	sp, #8
 80138b6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80138b8:	2020      	movs	r0, #32
 80138ba:	f002 ff1d 	bl	80166f8 <pvPortMalloc>
 80138be:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d00a      	beq.n	80138dc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2200      	movs	r2, #0
 80138ca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	3304      	adds	r3, #4
 80138d0:	4618      	mov	r0, r3
 80138d2:	f000 fa23 	bl	8013d1c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2200      	movs	r2, #0
 80138da:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80138dc:	687b      	ldr	r3, [r7, #4]
	}
 80138de:	4618      	mov	r0, r3
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
	...

080138e8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b090      	sub	sp, #64	; 0x40
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	607a      	str	r2, [r7, #4]
 80138f4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80138fa:	2300      	movs	r3, #0
 80138fc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80138fe:	2300      	movs	r3, #0
 8013900:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d10a      	bne.n	801391e <xEventGroupWaitBits+0x36>
	__asm volatile
 8013908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801390c:	f383 8811 	msr	BASEPRI, r3
 8013910:	f3bf 8f6f 	isb	sy
 8013914:	f3bf 8f4f 	dsb	sy
 8013918:	623b      	str	r3, [r7, #32]
}
 801391a:	bf00      	nop
 801391c:	e7fe      	b.n	801391c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013924:	2b00      	cmp	r3, #0
 8013926:	d00a      	beq.n	801393e <xEventGroupWaitBits+0x56>
	__asm volatile
 8013928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392c:	f383 8811 	msr	BASEPRI, r3
 8013930:	f3bf 8f6f 	isb	sy
 8013934:	f3bf 8f4f 	dsb	sy
 8013938:	61fb      	str	r3, [r7, #28]
}
 801393a:	bf00      	nop
 801393c:	e7fe      	b.n	801393c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d10a      	bne.n	801395a <xEventGroupWaitBits+0x72>
	__asm volatile
 8013944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013948:	f383 8811 	msr	BASEPRI, r3
 801394c:	f3bf 8f6f 	isb	sy
 8013950:	f3bf 8f4f 	dsb	sy
 8013954:	61bb      	str	r3, [r7, #24]
}
 8013956:	bf00      	nop
 8013958:	e7fe      	b.n	8013958 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801395a:	f002 f817 	bl	801598c <xTaskGetSchedulerState>
 801395e:	4603      	mov	r3, r0
 8013960:	2b00      	cmp	r3, #0
 8013962:	d102      	bne.n	801396a <xEventGroupWaitBits+0x82>
 8013964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013966:	2b00      	cmp	r3, #0
 8013968:	d101      	bne.n	801396e <xEventGroupWaitBits+0x86>
 801396a:	2301      	movs	r3, #1
 801396c:	e000      	b.n	8013970 <xEventGroupWaitBits+0x88>
 801396e:	2300      	movs	r3, #0
 8013970:	2b00      	cmp	r3, #0
 8013972:	d10a      	bne.n	801398a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013978:	f383 8811 	msr	BASEPRI, r3
 801397c:	f3bf 8f6f 	isb	sy
 8013980:	f3bf 8f4f 	dsb	sy
 8013984:	617b      	str	r3, [r7, #20]
}
 8013986:	bf00      	nop
 8013988:	e7fe      	b.n	8013988 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801398a:	f001 fb77 	bl	801507c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013994:	683a      	ldr	r2, [r7, #0]
 8013996:	68b9      	ldr	r1, [r7, #8]
 8013998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801399a:	f000 f988 	bl	8013cae <prvTestWaitCondition>
 801399e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80139a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d00e      	beq.n	80139c4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80139a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80139aa:	2300      	movs	r3, #0
 80139ac:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d028      	beq.n	8013a06 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80139b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139b6:	681a      	ldr	r2, [r3, #0]
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	43db      	mvns	r3, r3
 80139bc:	401a      	ands	r2, r3
 80139be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139c0:	601a      	str	r2, [r3, #0]
 80139c2:	e020      	b.n	8013a06 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80139c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d104      	bne.n	80139d4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80139ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80139ce:	2301      	movs	r3, #1
 80139d0:	633b      	str	r3, [r7, #48]	; 0x30
 80139d2:	e018      	b.n	8013a06 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d003      	beq.n	80139e2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80139da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80139e0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d003      	beq.n	80139f0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80139e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80139ee:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80139f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139f2:	1d18      	adds	r0, r3, #4
 80139f4:	68ba      	ldr	r2, [r7, #8]
 80139f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f8:	4313      	orrs	r3, r2
 80139fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139fc:	4619      	mov	r1, r3
 80139fe:	f001 fd3d 	bl	801547c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013a06:	f001 fb47 	bl	8015098 <xTaskResumeAll>
 8013a0a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d031      	beq.n	8013a76 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d107      	bne.n	8013a28 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013a18:	4b19      	ldr	r3, [pc, #100]	; (8013a80 <xEventGroupWaitBits+0x198>)
 8013a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a1e:	601a      	str	r2, [r3, #0]
 8013a20:	f3bf 8f4f 	dsb	sy
 8013a24:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013a28:	f002 f83c 	bl	8015aa4 <uxTaskResetEventItemValue>
 8013a2c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d11a      	bne.n	8013a6e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013a38:	f002 fd3c 	bl	80164b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013a42:	683a      	ldr	r2, [r7, #0]
 8013a44:	68b9      	ldr	r1, [r7, #8]
 8013a46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a48:	f000 f931 	bl	8013cae <prvTestWaitCondition>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d009      	beq.n	8013a66 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d006      	beq.n	8013a66 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a5a:	681a      	ldr	r2, [r3, #0]
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	43db      	mvns	r3, r3
 8013a60:	401a      	ands	r2, r3
 8013a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a64:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013a66:	2301      	movs	r3, #1
 8013a68:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013a6a:	f002 fd53 	bl	8016514 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013a74:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3740      	adds	r7, #64	; 0x40
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	e000ed04 	.word	0xe000ed04

08013a84 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b086      	sub	sp, #24
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d10a      	bne.n	8013aae <xEventGroupClearBits+0x2a>
	__asm volatile
 8013a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9c:	f383 8811 	msr	BASEPRI, r3
 8013aa0:	f3bf 8f6f 	isb	sy
 8013aa4:	f3bf 8f4f 	dsb	sy
 8013aa8:	60fb      	str	r3, [r7, #12]
}
 8013aaa:	bf00      	nop
 8013aac:	e7fe      	b.n	8013aac <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d00a      	beq.n	8013ace <xEventGroupClearBits+0x4a>
	__asm volatile
 8013ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013abc:	f383 8811 	msr	BASEPRI, r3
 8013ac0:	f3bf 8f6f 	isb	sy
 8013ac4:	f3bf 8f4f 	dsb	sy
 8013ac8:	60bb      	str	r3, [r7, #8]
}
 8013aca:	bf00      	nop
 8013acc:	e7fe      	b.n	8013acc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013ace:	f002 fcf1 	bl	80164b4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	43db      	mvns	r3, r3
 8013ae0:	401a      	ands	r2, r3
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013ae6:	f002 fd15 	bl	8016514 <vPortExitCritical>

	return uxReturn;
 8013aea:	693b      	ldr	r3, [r7, #16]
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3718      	adds	r7, #24
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b084      	sub	sp, #16
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013afe:	2300      	movs	r3, #0
 8013b00:	683a      	ldr	r2, [r7, #0]
 8013b02:	6879      	ldr	r1, [r7, #4]
 8013b04:	4804      	ldr	r0, [pc, #16]	; (8013b18 <xEventGroupClearBitsFromISR+0x24>)
 8013b06:	f002 fb87 	bl	8016218 <xTimerPendFunctionCallFromISR>
 8013b0a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
	}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3710      	adds	r7, #16
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
 8013b16:	bf00      	nop
 8013b18:	08013c95 	.word	0x08013c95

08013b1c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b089      	sub	sp, #36	; 0x24
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b28:	f3ef 8211 	mrs	r2, BASEPRI
 8013b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b30:	f383 8811 	msr	BASEPRI, r3
 8013b34:	f3bf 8f6f 	isb	sy
 8013b38:	f3bf 8f4f 	dsb	sy
 8013b3c:	60fa      	str	r2, [r7, #12]
 8013b3e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013b40:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b42:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	617b      	str	r3, [r7, #20]
 8013b4a:	69bb      	ldr	r3, [r7, #24]
 8013b4c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013b54:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013b56:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3724      	adds	r7, #36	; 0x24
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr

08013b64 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b08e      	sub	sp, #56	; 0x38
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013b76:	2300      	movs	r3, #0
 8013b78:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d10a      	bne.n	8013b96 <xEventGroupSetBits+0x32>
	__asm volatile
 8013b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b84:	f383 8811 	msr	BASEPRI, r3
 8013b88:	f3bf 8f6f 	isb	sy
 8013b8c:	f3bf 8f4f 	dsb	sy
 8013b90:	613b      	str	r3, [r7, #16]
}
 8013b92:	bf00      	nop
 8013b94:	e7fe      	b.n	8013b94 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d00a      	beq.n	8013bb6 <xEventGroupSetBits+0x52>
	__asm volatile
 8013ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba4:	f383 8811 	msr	BASEPRI, r3
 8013ba8:	f3bf 8f6f 	isb	sy
 8013bac:	f3bf 8f4f 	dsb	sy
 8013bb0:	60fb      	str	r3, [r7, #12]
}
 8013bb2:	bf00      	nop
 8013bb4:	e7fe      	b.n	8013bb4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb8:	3304      	adds	r3, #4
 8013bba:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bbe:	3308      	adds	r3, #8
 8013bc0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013bc2:	f001 fa5b 	bl	801507c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bce:	681a      	ldr	r2, [r3, #0]
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	431a      	orrs	r2, r3
 8013bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013bd8:	e03c      	b.n	8013c54 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bdc:	685b      	ldr	r3, [r3, #4]
 8013bde:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013be6:	2300      	movs	r3, #0
 8013be8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013bea:	69bb      	ldr	r3, [r7, #24]
 8013bec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013bf0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013bf2:	69bb      	ldr	r3, [r7, #24]
 8013bf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013bf8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d108      	bne.n	8013c16 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	4013      	ands	r3, r2
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d00b      	beq.n	8013c28 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013c10:	2301      	movs	r3, #1
 8013c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c14:	e008      	b.n	8013c28 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c18:	681a      	ldr	r2, [r3, #0]
 8013c1a:	69bb      	ldr	r3, [r7, #24]
 8013c1c:	4013      	ands	r3, r2
 8013c1e:	69ba      	ldr	r2, [r7, #24]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d101      	bne.n	8013c28 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013c24:	2301      	movs	r3, #1
 8013c26:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d010      	beq.n	8013c50 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d003      	beq.n	8013c40 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013c48:	4619      	mov	r1, r3
 8013c4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c4c:	f001 fce2 	bl	8015614 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013c50:	69fb      	ldr	r3, [r7, #28]
 8013c52:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d1be      	bne.n	8013bda <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c62:	43db      	mvns	r3, r3
 8013c64:	401a      	ands	r2, r3
 8013c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c68:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013c6a:	f001 fa15 	bl	8015098 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c70:	681b      	ldr	r3, [r3, #0]
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3738      	adds	r7, #56	; 0x38
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	b082      	sub	sp, #8
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
 8013c82:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013c84:	6839      	ldr	r1, [r7, #0]
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f7ff ff6c 	bl	8013b64 <xEventGroupSetBits>
}
 8013c8c:	bf00      	nop
 8013c8e:	3708      	adds	r7, #8
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}

08013c94 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013c9e:	6839      	ldr	r1, [r7, #0]
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f7ff feef 	bl	8013a84 <xEventGroupClearBits>
}
 8013ca6:	bf00      	nop
 8013ca8:	3708      	adds	r7, #8
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}

08013cae <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013cae:	b480      	push	{r7}
 8013cb0:	b087      	sub	sp, #28
 8013cb2:	af00      	add	r7, sp, #0
 8013cb4:	60f8      	str	r0, [r7, #12]
 8013cb6:	60b9      	str	r1, [r7, #8]
 8013cb8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d107      	bne.n	8013cd4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013cc4:	68fa      	ldr	r2, [r7, #12]
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	4013      	ands	r3, r2
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d00a      	beq.n	8013ce4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	617b      	str	r3, [r7, #20]
 8013cd2:	e007      	b.n	8013ce4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013cd4:	68fa      	ldr	r2, [r7, #12]
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	4013      	ands	r3, r2
 8013cda:	68ba      	ldr	r2, [r7, #8]
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d101      	bne.n	8013ce4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013ce0:	2301      	movs	r3, #1
 8013ce2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013ce4:	697b      	ldr	r3, [r7, #20]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	371c      	adds	r7, #28
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr
	...

08013cf4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b086      	sub	sp, #24
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	68ba      	ldr	r2, [r7, #8]
 8013d04:	68f9      	ldr	r1, [r7, #12]
 8013d06:	4804      	ldr	r0, [pc, #16]	; (8013d18 <xEventGroupSetBitsFromISR+0x24>)
 8013d08:	f002 fa86 	bl	8016218 <xTimerPendFunctionCallFromISR>
 8013d0c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013d0e:	697b      	ldr	r3, [r7, #20]
	}
 8013d10:	4618      	mov	r0, r3
 8013d12:	3718      	adds	r7, #24
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}
 8013d18:	08013c7b 	.word	0x08013c7b

08013d1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b083      	sub	sp, #12
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f103 0208 	add.w	r2, r3, #8
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f103 0208 	add.w	r2, r3, #8
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f103 0208 	add.w	r2, r3, #8
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013d50:	bf00      	nop
 8013d52:	370c      	adds	r7, #12
 8013d54:	46bd      	mov	sp, r7
 8013d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5a:	4770      	bx	lr

08013d5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b083      	sub	sp, #12
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2200      	movs	r2, #0
 8013d68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013d6a:	bf00      	nop
 8013d6c:	370c      	adds	r7, #12
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d74:	4770      	bx	lr

08013d76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013d76:	b480      	push	{r7}
 8013d78:	b085      	sub	sp, #20
 8013d7a:	af00      	add	r7, sp, #0
 8013d7c:	6078      	str	r0, [r7, #4]
 8013d7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	68fa      	ldr	r2, [r7, #12]
 8013d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	689a      	ldr	r2, [r3, #8]
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	689b      	ldr	r3, [r3, #8]
 8013d98:	683a      	ldr	r2, [r7, #0]
 8013d9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	683a      	ldr	r2, [r7, #0]
 8013da0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	687a      	ldr	r2, [r7, #4]
 8013da6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	1c5a      	adds	r2, r3, #1
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	601a      	str	r2, [r3, #0]
}
 8013db2:	bf00      	nop
 8013db4:	3714      	adds	r7, #20
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr

08013dbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013dbe:	b480      	push	{r7}
 8013dc0:	b085      	sub	sp, #20
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
 8013dc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dd4:	d103      	bne.n	8013dde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	691b      	ldr	r3, [r3, #16]
 8013dda:	60fb      	str	r3, [r7, #12]
 8013ddc:	e00c      	b.n	8013df8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	3308      	adds	r3, #8
 8013de2:	60fb      	str	r3, [r7, #12]
 8013de4:	e002      	b.n	8013dec <vListInsert+0x2e>
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	685b      	ldr	r3, [r3, #4]
 8013dea:	60fb      	str	r3, [r7, #12]
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	685b      	ldr	r3, [r3, #4]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	68ba      	ldr	r2, [r7, #8]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d2f6      	bcs.n	8013de6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	685a      	ldr	r2, [r3, #4]
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	685b      	ldr	r3, [r3, #4]
 8013e04:	683a      	ldr	r2, [r7, #0]
 8013e06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	68fa      	ldr	r2, [r7, #12]
 8013e0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	683a      	ldr	r2, [r7, #0]
 8013e12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	687a      	ldr	r2, [r7, #4]
 8013e18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	1c5a      	adds	r2, r3, #1
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	601a      	str	r2, [r3, #0]
}
 8013e24:	bf00      	nop
 8013e26:	3714      	adds	r7, #20
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013e30:	b480      	push	{r7}
 8013e32:	b085      	sub	sp, #20
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	691b      	ldr	r3, [r3, #16]
 8013e3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	685b      	ldr	r3, [r3, #4]
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	6892      	ldr	r2, [r2, #8]
 8013e46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	689b      	ldr	r3, [r3, #8]
 8013e4c:	687a      	ldr	r2, [r7, #4]
 8013e4e:	6852      	ldr	r2, [r2, #4]
 8013e50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	687a      	ldr	r2, [r7, #4]
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d103      	bne.n	8013e64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	689a      	ldr	r2, [r3, #8]
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2200      	movs	r2, #0
 8013e68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	1e5a      	subs	r2, r3, #1
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	681b      	ldr	r3, [r3, #0]
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3714      	adds	r7, #20
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr

08013e84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
 8013e8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d10a      	bne.n	8013eae <xQueueGenericReset+0x2a>
	__asm volatile
 8013e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e9c:	f383 8811 	msr	BASEPRI, r3
 8013ea0:	f3bf 8f6f 	isb	sy
 8013ea4:	f3bf 8f4f 	dsb	sy
 8013ea8:	60bb      	str	r3, [r7, #8]
}
 8013eaa:	bf00      	nop
 8013eac:	e7fe      	b.n	8013eac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013eae:	f002 fb01 	bl	80164b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	681a      	ldr	r2, [r3, #0]
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eba:	68f9      	ldr	r1, [r7, #12]
 8013ebc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013ebe:	fb01 f303 	mul.w	r3, r1, r3
 8013ec2:	441a      	add	r2, r3
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	681a      	ldr	r2, [r3, #0]
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	681a      	ldr	r2, [r3, #0]
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ede:	3b01      	subs	r3, #1
 8013ee0:	68f9      	ldr	r1, [r7, #12]
 8013ee2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013ee4:	fb01 f303 	mul.w	r3, r1, r3
 8013ee8:	441a      	add	r2, r3
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	22ff      	movs	r2, #255	; 0xff
 8013ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	22ff      	movs	r2, #255	; 0xff
 8013efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d114      	bne.n	8013f2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	691b      	ldr	r3, [r3, #16]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d01a      	beq.n	8013f42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	3310      	adds	r3, #16
 8013f10:	4618      	mov	r0, r3
 8013f12:	f001 fb1b 	bl	801554c <xTaskRemoveFromEventList>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d012      	beq.n	8013f42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013f1c:	4b0c      	ldr	r3, [pc, #48]	; (8013f50 <xQueueGenericReset+0xcc>)
 8013f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f22:	601a      	str	r2, [r3, #0]
 8013f24:	f3bf 8f4f 	dsb	sy
 8013f28:	f3bf 8f6f 	isb	sy
 8013f2c:	e009      	b.n	8013f42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	3310      	adds	r3, #16
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7ff fef2 	bl	8013d1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	3324      	adds	r3, #36	; 0x24
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7ff feed 	bl	8013d1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013f42:	f002 fae7 	bl	8016514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013f46:	2301      	movs	r3, #1
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3710      	adds	r7, #16
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	e000ed04 	.word	0xe000ed04

08013f54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08e      	sub	sp, #56	; 0x38
 8013f58:	af02      	add	r7, sp, #8
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	607a      	str	r2, [r7, #4]
 8013f60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d10a      	bne.n	8013f7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f6c:	f383 8811 	msr	BASEPRI, r3
 8013f70:	f3bf 8f6f 	isb	sy
 8013f74:	f3bf 8f4f 	dsb	sy
 8013f78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013f7a:	bf00      	nop
 8013f7c:	e7fe      	b.n	8013f7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d10a      	bne.n	8013f9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f88:	f383 8811 	msr	BASEPRI, r3
 8013f8c:	f3bf 8f6f 	isb	sy
 8013f90:	f3bf 8f4f 	dsb	sy
 8013f94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013f96:	bf00      	nop
 8013f98:	e7fe      	b.n	8013f98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d002      	beq.n	8013fa6 <xQueueGenericCreateStatic+0x52>
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d001      	beq.n	8013faa <xQueueGenericCreateStatic+0x56>
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	e000      	b.n	8013fac <xQueueGenericCreateStatic+0x58>
 8013faa:	2300      	movs	r3, #0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d10a      	bne.n	8013fc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	623b      	str	r3, [r7, #32]
}
 8013fc2:	bf00      	nop
 8013fc4:	e7fe      	b.n	8013fc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d102      	bne.n	8013fd2 <xQueueGenericCreateStatic+0x7e>
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d101      	bne.n	8013fd6 <xQueueGenericCreateStatic+0x82>
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	e000      	b.n	8013fd8 <xQueueGenericCreateStatic+0x84>
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d10a      	bne.n	8013ff2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe0:	f383 8811 	msr	BASEPRI, r3
 8013fe4:	f3bf 8f6f 	isb	sy
 8013fe8:	f3bf 8f4f 	dsb	sy
 8013fec:	61fb      	str	r3, [r7, #28]
}
 8013fee:	bf00      	nop
 8013ff0:	e7fe      	b.n	8013ff0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013ff2:	2350      	movs	r3, #80	; 0x50
 8013ff4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	2b50      	cmp	r3, #80	; 0x50
 8013ffa:	d00a      	beq.n	8014012 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014000:	f383 8811 	msr	BASEPRI, r3
 8014004:	f3bf 8f6f 	isb	sy
 8014008:	f3bf 8f4f 	dsb	sy
 801400c:	61bb      	str	r3, [r7, #24]
}
 801400e:	bf00      	nop
 8014010:	e7fe      	b.n	8014010 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014012:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401a:	2b00      	cmp	r3, #0
 801401c:	d00d      	beq.n	801403a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014020:	2201      	movs	r2, #1
 8014022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014026:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801402c:	9300      	str	r3, [sp, #0]
 801402e:	4613      	mov	r3, r2
 8014030:	687a      	ldr	r2, [r7, #4]
 8014032:	68b9      	ldr	r1, [r7, #8]
 8014034:	68f8      	ldr	r0, [r7, #12]
 8014036:	f000 f83f 	bl	80140b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801403c:	4618      	mov	r0, r3
 801403e:	3730      	adds	r7, #48	; 0x30
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014044:	b580      	push	{r7, lr}
 8014046:	b08a      	sub	sp, #40	; 0x28
 8014048:	af02      	add	r7, sp, #8
 801404a:	60f8      	str	r0, [r7, #12]
 801404c:	60b9      	str	r1, [r7, #8]
 801404e:	4613      	mov	r3, r2
 8014050:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d10a      	bne.n	801406e <xQueueGenericCreate+0x2a>
	__asm volatile
 8014058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405c:	f383 8811 	msr	BASEPRI, r3
 8014060:	f3bf 8f6f 	isb	sy
 8014064:	f3bf 8f4f 	dsb	sy
 8014068:	613b      	str	r3, [r7, #16]
}
 801406a:	bf00      	nop
 801406c:	e7fe      	b.n	801406c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	68ba      	ldr	r2, [r7, #8]
 8014072:	fb02 f303 	mul.w	r3, r2, r3
 8014076:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014078:	69fb      	ldr	r3, [r7, #28]
 801407a:	3350      	adds	r3, #80	; 0x50
 801407c:	4618      	mov	r0, r3
 801407e:	f002 fb3b 	bl	80166f8 <pvPortMalloc>
 8014082:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d011      	beq.n	80140ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801408a:	69bb      	ldr	r3, [r7, #24]
 801408c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	3350      	adds	r3, #80	; 0x50
 8014092:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	2200      	movs	r2, #0
 8014098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801409c:	79fa      	ldrb	r2, [r7, #7]
 801409e:	69bb      	ldr	r3, [r7, #24]
 80140a0:	9300      	str	r3, [sp, #0]
 80140a2:	4613      	mov	r3, r2
 80140a4:	697a      	ldr	r2, [r7, #20]
 80140a6:	68b9      	ldr	r1, [r7, #8]
 80140a8:	68f8      	ldr	r0, [r7, #12]
 80140aa:	f000 f805 	bl	80140b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80140ae:	69bb      	ldr	r3, [r7, #24]
	}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3720      	adds	r7, #32
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}

080140b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b084      	sub	sp, #16
 80140bc:	af00      	add	r7, sp, #0
 80140be:	60f8      	str	r0, [r7, #12]
 80140c0:	60b9      	str	r1, [r7, #8]
 80140c2:	607a      	str	r2, [r7, #4]
 80140c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d103      	bne.n	80140d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	69ba      	ldr	r2, [r7, #24]
 80140d0:	601a      	str	r2, [r3, #0]
 80140d2:	e002      	b.n	80140da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	68ba      	ldr	r2, [r7, #8]
 80140e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80140e6:	2101      	movs	r1, #1
 80140e8:	69b8      	ldr	r0, [r7, #24]
 80140ea:	f7ff fecb 	bl	8013e84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80140ee:	69bb      	ldr	r3, [r7, #24]
 80140f0:	78fa      	ldrb	r2, [r7, #3]
 80140f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80140f6:	bf00      	nop
 80140f8:	3710      	adds	r7, #16
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
	...

08014100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b08e      	sub	sp, #56	; 0x38
 8014104:	af00      	add	r7, sp, #0
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	607a      	str	r2, [r7, #4]
 801410c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801410e:	2300      	movs	r3, #0
 8014110:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014118:	2b00      	cmp	r3, #0
 801411a:	d10a      	bne.n	8014132 <xQueueGenericSend+0x32>
	__asm volatile
 801411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014120:	f383 8811 	msr	BASEPRI, r3
 8014124:	f3bf 8f6f 	isb	sy
 8014128:	f3bf 8f4f 	dsb	sy
 801412c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801412e:	bf00      	nop
 8014130:	e7fe      	b.n	8014130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d103      	bne.n	8014140 <xQueueGenericSend+0x40>
 8014138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801413c:	2b00      	cmp	r3, #0
 801413e:	d101      	bne.n	8014144 <xQueueGenericSend+0x44>
 8014140:	2301      	movs	r3, #1
 8014142:	e000      	b.n	8014146 <xQueueGenericSend+0x46>
 8014144:	2300      	movs	r3, #0
 8014146:	2b00      	cmp	r3, #0
 8014148:	d10a      	bne.n	8014160 <xQueueGenericSend+0x60>
	__asm volatile
 801414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801414e:	f383 8811 	msr	BASEPRI, r3
 8014152:	f3bf 8f6f 	isb	sy
 8014156:	f3bf 8f4f 	dsb	sy
 801415a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801415c:	bf00      	nop
 801415e:	e7fe      	b.n	801415e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014160:	683b      	ldr	r3, [r7, #0]
 8014162:	2b02      	cmp	r3, #2
 8014164:	d103      	bne.n	801416e <xQueueGenericSend+0x6e>
 8014166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801416a:	2b01      	cmp	r3, #1
 801416c:	d101      	bne.n	8014172 <xQueueGenericSend+0x72>
 801416e:	2301      	movs	r3, #1
 8014170:	e000      	b.n	8014174 <xQueueGenericSend+0x74>
 8014172:	2300      	movs	r3, #0
 8014174:	2b00      	cmp	r3, #0
 8014176:	d10a      	bne.n	801418e <xQueueGenericSend+0x8e>
	__asm volatile
 8014178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801417c:	f383 8811 	msr	BASEPRI, r3
 8014180:	f3bf 8f6f 	isb	sy
 8014184:	f3bf 8f4f 	dsb	sy
 8014188:	623b      	str	r3, [r7, #32]
}
 801418a:	bf00      	nop
 801418c:	e7fe      	b.n	801418c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801418e:	f001 fbfd 	bl	801598c <xTaskGetSchedulerState>
 8014192:	4603      	mov	r3, r0
 8014194:	2b00      	cmp	r3, #0
 8014196:	d102      	bne.n	801419e <xQueueGenericSend+0x9e>
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d101      	bne.n	80141a2 <xQueueGenericSend+0xa2>
 801419e:	2301      	movs	r3, #1
 80141a0:	e000      	b.n	80141a4 <xQueueGenericSend+0xa4>
 80141a2:	2300      	movs	r3, #0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d10a      	bne.n	80141be <xQueueGenericSend+0xbe>
	__asm volatile
 80141a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ac:	f383 8811 	msr	BASEPRI, r3
 80141b0:	f3bf 8f6f 	isb	sy
 80141b4:	f3bf 8f4f 	dsb	sy
 80141b8:	61fb      	str	r3, [r7, #28]
}
 80141ba:	bf00      	nop
 80141bc:	e7fe      	b.n	80141bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80141be:	f002 f979 	bl	80164b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80141c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80141c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d302      	bcc.n	80141d4 <xQueueGenericSend+0xd4>
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	2b02      	cmp	r3, #2
 80141d2:	d129      	bne.n	8014228 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80141d4:	683a      	ldr	r2, [r7, #0]
 80141d6:	68b9      	ldr	r1, [r7, #8]
 80141d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141da:	f000 fa8b 	bl	80146f4 <prvCopyDataToQueue>
 80141de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80141e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d010      	beq.n	801420a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80141e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ea:	3324      	adds	r3, #36	; 0x24
 80141ec:	4618      	mov	r0, r3
 80141ee:	f001 f9ad 	bl	801554c <xTaskRemoveFromEventList>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d013      	beq.n	8014220 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80141f8:	4b3f      	ldr	r3, [pc, #252]	; (80142f8 <xQueueGenericSend+0x1f8>)
 80141fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141fe:	601a      	str	r2, [r3, #0]
 8014200:	f3bf 8f4f 	dsb	sy
 8014204:	f3bf 8f6f 	isb	sy
 8014208:	e00a      	b.n	8014220 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801420c:	2b00      	cmp	r3, #0
 801420e:	d007      	beq.n	8014220 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014210:	4b39      	ldr	r3, [pc, #228]	; (80142f8 <xQueueGenericSend+0x1f8>)
 8014212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014216:	601a      	str	r2, [r3, #0]
 8014218:	f3bf 8f4f 	dsb	sy
 801421c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014220:	f002 f978 	bl	8016514 <vPortExitCritical>
				return pdPASS;
 8014224:	2301      	movs	r3, #1
 8014226:	e063      	b.n	80142f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d103      	bne.n	8014236 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801422e:	f002 f971 	bl	8016514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014232:	2300      	movs	r3, #0
 8014234:	e05c      	b.n	80142f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014238:	2b00      	cmp	r3, #0
 801423a:	d106      	bne.n	801424a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801423c:	f107 0314 	add.w	r3, r7, #20
 8014240:	4618      	mov	r0, r3
 8014242:	f001 fa49 	bl	80156d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014246:	2301      	movs	r3, #1
 8014248:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801424a:	f002 f963 	bl	8016514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801424e:	f000 ff15 	bl	801507c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014252:	f002 f92f 	bl	80164b4 <vPortEnterCritical>
 8014256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801425c:	b25b      	sxtb	r3, r3
 801425e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014262:	d103      	bne.n	801426c <xQueueGenericSend+0x16c>
 8014264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014266:	2200      	movs	r2, #0
 8014268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014272:	b25b      	sxtb	r3, r3
 8014274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014278:	d103      	bne.n	8014282 <xQueueGenericSend+0x182>
 801427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427c:	2200      	movs	r2, #0
 801427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014282:	f002 f947 	bl	8016514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014286:	1d3a      	adds	r2, r7, #4
 8014288:	f107 0314 	add.w	r3, r7, #20
 801428c:	4611      	mov	r1, r2
 801428e:	4618      	mov	r0, r3
 8014290:	f001 fa38 	bl	8015704 <xTaskCheckForTimeOut>
 8014294:	4603      	mov	r3, r0
 8014296:	2b00      	cmp	r3, #0
 8014298:	d124      	bne.n	80142e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801429a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801429c:	f000 fb22 	bl	80148e4 <prvIsQueueFull>
 80142a0:	4603      	mov	r3, r0
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d018      	beq.n	80142d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80142a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a8:	3310      	adds	r3, #16
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	4611      	mov	r1, r2
 80142ae:	4618      	mov	r0, r3
 80142b0:	f001 f8c0 	bl	8015434 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80142b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142b6:	f000 faad 	bl	8014814 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80142ba:	f000 feed 	bl	8015098 <xTaskResumeAll>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	f47f af7c 	bne.w	80141be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80142c6:	4b0c      	ldr	r3, [pc, #48]	; (80142f8 <xQueueGenericSend+0x1f8>)
 80142c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142cc:	601a      	str	r2, [r3, #0]
 80142ce:	f3bf 8f4f 	dsb	sy
 80142d2:	f3bf 8f6f 	isb	sy
 80142d6:	e772      	b.n	80141be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80142d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142da:	f000 fa9b 	bl	8014814 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142de:	f000 fedb 	bl	8015098 <xTaskResumeAll>
 80142e2:	e76c      	b.n	80141be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80142e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142e6:	f000 fa95 	bl	8014814 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80142ea:	f000 fed5 	bl	8015098 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80142ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3738      	adds	r7, #56	; 0x38
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	e000ed04 	.word	0xe000ed04

080142fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b090      	sub	sp, #64	; 0x40
 8014300:	af00      	add	r7, sp, #0
 8014302:	60f8      	str	r0, [r7, #12]
 8014304:	60b9      	str	r1, [r7, #8]
 8014306:	607a      	str	r2, [r7, #4]
 8014308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014310:	2b00      	cmp	r3, #0
 8014312:	d10a      	bne.n	801432a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014318:	f383 8811 	msr	BASEPRI, r3
 801431c:	f3bf 8f6f 	isb	sy
 8014320:	f3bf 8f4f 	dsb	sy
 8014324:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014326:	bf00      	nop
 8014328:	e7fe      	b.n	8014328 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d103      	bne.n	8014338 <xQueueGenericSendFromISR+0x3c>
 8014330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014334:	2b00      	cmp	r3, #0
 8014336:	d101      	bne.n	801433c <xQueueGenericSendFromISR+0x40>
 8014338:	2301      	movs	r3, #1
 801433a:	e000      	b.n	801433e <xQueueGenericSendFromISR+0x42>
 801433c:	2300      	movs	r3, #0
 801433e:	2b00      	cmp	r3, #0
 8014340:	d10a      	bne.n	8014358 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014346:	f383 8811 	msr	BASEPRI, r3
 801434a:	f3bf 8f6f 	isb	sy
 801434e:	f3bf 8f4f 	dsb	sy
 8014352:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014354:	bf00      	nop
 8014356:	e7fe      	b.n	8014356 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	2b02      	cmp	r3, #2
 801435c:	d103      	bne.n	8014366 <xQueueGenericSendFromISR+0x6a>
 801435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014362:	2b01      	cmp	r3, #1
 8014364:	d101      	bne.n	801436a <xQueueGenericSendFromISR+0x6e>
 8014366:	2301      	movs	r3, #1
 8014368:	e000      	b.n	801436c <xQueueGenericSendFromISR+0x70>
 801436a:	2300      	movs	r3, #0
 801436c:	2b00      	cmp	r3, #0
 801436e:	d10a      	bne.n	8014386 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014374:	f383 8811 	msr	BASEPRI, r3
 8014378:	f3bf 8f6f 	isb	sy
 801437c:	f3bf 8f4f 	dsb	sy
 8014380:	623b      	str	r3, [r7, #32]
}
 8014382:	bf00      	nop
 8014384:	e7fe      	b.n	8014384 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014386:	f002 f977 	bl	8016678 <vPortValidateInterruptPriority>
	__asm volatile
 801438a:	f3ef 8211 	mrs	r2, BASEPRI
 801438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014392:	f383 8811 	msr	BASEPRI, r3
 8014396:	f3bf 8f6f 	isb	sy
 801439a:	f3bf 8f4f 	dsb	sy
 801439e:	61fa      	str	r2, [r7, #28]
 80143a0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80143a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80143a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80143a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143ae:	429a      	cmp	r2, r3
 80143b0:	d302      	bcc.n	80143b8 <xQueueGenericSendFromISR+0xbc>
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	2b02      	cmp	r3, #2
 80143b6:	d12f      	bne.n	8014418 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80143b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80143be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80143c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80143c8:	683a      	ldr	r2, [r7, #0]
 80143ca:	68b9      	ldr	r1, [r7, #8]
 80143cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80143ce:	f000 f991 	bl	80146f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80143d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80143d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143da:	d112      	bne.n	8014402 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80143dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d016      	beq.n	8014412 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80143e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e6:	3324      	adds	r3, #36	; 0x24
 80143e8:	4618      	mov	r0, r3
 80143ea:	f001 f8af 	bl	801554c <xTaskRemoveFromEventList>
 80143ee:	4603      	mov	r3, r0
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d00e      	beq.n	8014412 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d00b      	beq.n	8014412 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2201      	movs	r2, #1
 80143fe:	601a      	str	r2, [r3, #0]
 8014400:	e007      	b.n	8014412 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014402:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014406:	3301      	adds	r3, #1
 8014408:	b2db      	uxtb	r3, r3
 801440a:	b25a      	sxtb	r2, r3
 801440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801440e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014412:	2301      	movs	r3, #1
 8014414:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014416:	e001      	b.n	801441c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014418:	2300      	movs	r3, #0
 801441a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801441e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8014420:	697b      	ldr	r3, [r7, #20]
 8014422:	f383 8811 	msr	BASEPRI, r3
}
 8014426:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801442a:	4618      	mov	r0, r3
 801442c:	3740      	adds	r7, #64	; 0x40
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
	...

08014434 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b08c      	sub	sp, #48	; 0x30
 8014438:	af00      	add	r7, sp, #0
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014440:	2300      	movs	r3, #0
 8014442:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444a:	2b00      	cmp	r3, #0
 801444c:	d10a      	bne.n	8014464 <xQueueReceive+0x30>
	__asm volatile
 801444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014452:	f383 8811 	msr	BASEPRI, r3
 8014456:	f3bf 8f6f 	isb	sy
 801445a:	f3bf 8f4f 	dsb	sy
 801445e:	623b      	str	r3, [r7, #32]
}
 8014460:	bf00      	nop
 8014462:	e7fe      	b.n	8014462 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d103      	bne.n	8014472 <xQueueReceive+0x3e>
 801446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801446e:	2b00      	cmp	r3, #0
 8014470:	d101      	bne.n	8014476 <xQueueReceive+0x42>
 8014472:	2301      	movs	r3, #1
 8014474:	e000      	b.n	8014478 <xQueueReceive+0x44>
 8014476:	2300      	movs	r3, #0
 8014478:	2b00      	cmp	r3, #0
 801447a:	d10a      	bne.n	8014492 <xQueueReceive+0x5e>
	__asm volatile
 801447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014480:	f383 8811 	msr	BASEPRI, r3
 8014484:	f3bf 8f6f 	isb	sy
 8014488:	f3bf 8f4f 	dsb	sy
 801448c:	61fb      	str	r3, [r7, #28]
}
 801448e:	bf00      	nop
 8014490:	e7fe      	b.n	8014490 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014492:	f001 fa7b 	bl	801598c <xTaskGetSchedulerState>
 8014496:	4603      	mov	r3, r0
 8014498:	2b00      	cmp	r3, #0
 801449a:	d102      	bne.n	80144a2 <xQueueReceive+0x6e>
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d101      	bne.n	80144a6 <xQueueReceive+0x72>
 80144a2:	2301      	movs	r3, #1
 80144a4:	e000      	b.n	80144a8 <xQueueReceive+0x74>
 80144a6:	2300      	movs	r3, #0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d10a      	bne.n	80144c2 <xQueueReceive+0x8e>
	__asm volatile
 80144ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b0:	f383 8811 	msr	BASEPRI, r3
 80144b4:	f3bf 8f6f 	isb	sy
 80144b8:	f3bf 8f4f 	dsb	sy
 80144bc:	61bb      	str	r3, [r7, #24]
}
 80144be:	bf00      	nop
 80144c0:	e7fe      	b.n	80144c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80144c2:	f001 fff7 	bl	80164b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80144c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80144cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d01f      	beq.n	8014512 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80144d2:	68b9      	ldr	r1, [r7, #8]
 80144d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144d6:	f000 f977 	bl	80147c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80144da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144dc:	1e5a      	subs	r2, r3, #1
 80144de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e4:	691b      	ldr	r3, [r3, #16]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d00f      	beq.n	801450a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144ec:	3310      	adds	r3, #16
 80144ee:	4618      	mov	r0, r3
 80144f0:	f001 f82c 	bl	801554c <xTaskRemoveFromEventList>
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d007      	beq.n	801450a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80144fa:	4b3d      	ldr	r3, [pc, #244]	; (80145f0 <xQueueReceive+0x1bc>)
 80144fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014500:	601a      	str	r2, [r3, #0]
 8014502:	f3bf 8f4f 	dsb	sy
 8014506:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801450a:	f002 f803 	bl	8016514 <vPortExitCritical>
				return pdPASS;
 801450e:	2301      	movs	r3, #1
 8014510:	e069      	b.n	80145e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d103      	bne.n	8014520 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014518:	f001 fffc 	bl	8016514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801451c:	2300      	movs	r3, #0
 801451e:	e062      	b.n	80145e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014522:	2b00      	cmp	r3, #0
 8014524:	d106      	bne.n	8014534 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014526:	f107 0310 	add.w	r3, r7, #16
 801452a:	4618      	mov	r0, r3
 801452c:	f001 f8d4 	bl	80156d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014530:	2301      	movs	r3, #1
 8014532:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014534:	f001 ffee 	bl	8016514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014538:	f000 fda0 	bl	801507c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801453c:	f001 ffba 	bl	80164b4 <vPortEnterCritical>
 8014540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014546:	b25b      	sxtb	r3, r3
 8014548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801454c:	d103      	bne.n	8014556 <xQueueReceive+0x122>
 801454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014550:	2200      	movs	r2, #0
 8014552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801455c:	b25b      	sxtb	r3, r3
 801455e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014562:	d103      	bne.n	801456c <xQueueReceive+0x138>
 8014564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014566:	2200      	movs	r2, #0
 8014568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801456c:	f001 ffd2 	bl	8016514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014570:	1d3a      	adds	r2, r7, #4
 8014572:	f107 0310 	add.w	r3, r7, #16
 8014576:	4611      	mov	r1, r2
 8014578:	4618      	mov	r0, r3
 801457a:	f001 f8c3 	bl	8015704 <xTaskCheckForTimeOut>
 801457e:	4603      	mov	r3, r0
 8014580:	2b00      	cmp	r3, #0
 8014582:	d123      	bne.n	80145cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014586:	f000 f997 	bl	80148b8 <prvIsQueueEmpty>
 801458a:	4603      	mov	r3, r0
 801458c:	2b00      	cmp	r3, #0
 801458e:	d017      	beq.n	80145c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014592:	3324      	adds	r3, #36	; 0x24
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	4611      	mov	r1, r2
 8014598:	4618      	mov	r0, r3
 801459a:	f000 ff4b 	bl	8015434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801459e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145a0:	f000 f938 	bl	8014814 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80145a4:	f000 fd78 	bl	8015098 <xTaskResumeAll>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d189      	bne.n	80144c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80145ae:	4b10      	ldr	r3, [pc, #64]	; (80145f0 <xQueueReceive+0x1bc>)
 80145b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145b4:	601a      	str	r2, [r3, #0]
 80145b6:	f3bf 8f4f 	dsb	sy
 80145ba:	f3bf 8f6f 	isb	sy
 80145be:	e780      	b.n	80144c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80145c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145c2:	f000 f927 	bl	8014814 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80145c6:	f000 fd67 	bl	8015098 <xTaskResumeAll>
 80145ca:	e77a      	b.n	80144c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80145cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145ce:	f000 f921 	bl	8014814 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80145d2:	f000 fd61 	bl	8015098 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145d8:	f000 f96e 	bl	80148b8 <prvIsQueueEmpty>
 80145dc:	4603      	mov	r3, r0
 80145de:	2b00      	cmp	r3, #0
 80145e0:	f43f af6f 	beq.w	80144c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80145e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3730      	adds	r7, #48	; 0x30
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
 80145ee:	bf00      	nop
 80145f0:	e000ed04 	.word	0xe000ed04

080145f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b08e      	sub	sp, #56	; 0x38
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	60f8      	str	r0, [r7, #12]
 80145fc:	60b9      	str	r1, [r7, #8]
 80145fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014606:	2b00      	cmp	r3, #0
 8014608:	d10a      	bne.n	8014620 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801460e:	f383 8811 	msr	BASEPRI, r3
 8014612:	f3bf 8f6f 	isb	sy
 8014616:	f3bf 8f4f 	dsb	sy
 801461a:	623b      	str	r3, [r7, #32]
}
 801461c:	bf00      	nop
 801461e:	e7fe      	b.n	801461e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d103      	bne.n	801462e <xQueueReceiveFromISR+0x3a>
 8014626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801462a:	2b00      	cmp	r3, #0
 801462c:	d101      	bne.n	8014632 <xQueueReceiveFromISR+0x3e>
 801462e:	2301      	movs	r3, #1
 8014630:	e000      	b.n	8014634 <xQueueReceiveFromISR+0x40>
 8014632:	2300      	movs	r3, #0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d10a      	bne.n	801464e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801463c:	f383 8811 	msr	BASEPRI, r3
 8014640:	f3bf 8f6f 	isb	sy
 8014644:	f3bf 8f4f 	dsb	sy
 8014648:	61fb      	str	r3, [r7, #28]
}
 801464a:	bf00      	nop
 801464c:	e7fe      	b.n	801464c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801464e:	f002 f813 	bl	8016678 <vPortValidateInterruptPriority>
	__asm volatile
 8014652:	f3ef 8211 	mrs	r2, BASEPRI
 8014656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801465a:	f383 8811 	msr	BASEPRI, r3
 801465e:	f3bf 8f6f 	isb	sy
 8014662:	f3bf 8f4f 	dsb	sy
 8014666:	61ba      	str	r2, [r7, #24]
 8014668:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801466a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801466c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014672:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014676:	2b00      	cmp	r3, #0
 8014678:	d02f      	beq.n	80146da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014684:	68b9      	ldr	r1, [r7, #8]
 8014686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014688:	f000 f89e 	bl	80147c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801468e:	1e5a      	subs	r2, r3, #1
 8014690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014692:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801469c:	d112      	bne.n	80146c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a0:	691b      	ldr	r3, [r3, #16]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d016      	beq.n	80146d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a8:	3310      	adds	r3, #16
 80146aa:	4618      	mov	r0, r3
 80146ac:	f000 ff4e 	bl	801554c <xTaskRemoveFromEventList>
 80146b0:	4603      	mov	r3, r0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d00e      	beq.n	80146d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d00b      	beq.n	80146d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2201      	movs	r2, #1
 80146c0:	601a      	str	r2, [r3, #0]
 80146c2:	e007      	b.n	80146d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80146c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146c8:	3301      	adds	r3, #1
 80146ca:	b2db      	uxtb	r3, r3
 80146cc:	b25a      	sxtb	r2, r3
 80146ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80146d4:	2301      	movs	r3, #1
 80146d6:	637b      	str	r3, [r7, #52]	; 0x34
 80146d8:	e001      	b.n	80146de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80146da:	2300      	movs	r3, #0
 80146dc:	637b      	str	r3, [r7, #52]	; 0x34
 80146de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	f383 8811 	msr	BASEPRI, r3
}
 80146e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80146ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	3738      	adds	r7, #56	; 0x38
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b086      	sub	sp, #24
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	60f8      	str	r0, [r7, #12]
 80146fc:	60b9      	str	r1, [r7, #8]
 80146fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014700:	2300      	movs	r3, #0
 8014702:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014708:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801470e:	2b00      	cmp	r3, #0
 8014710:	d10d      	bne.n	801472e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d14d      	bne.n	80147b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	689b      	ldr	r3, [r3, #8]
 801471e:	4618      	mov	r0, r3
 8014720:	f001 f952 	bl	80159c8 <xTaskPriorityDisinherit>
 8014724:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	2200      	movs	r2, #0
 801472a:	609a      	str	r2, [r3, #8]
 801472c:	e043      	b.n	80147b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d119      	bne.n	8014768 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	6858      	ldr	r0, [r3, #4]
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801473c:	461a      	mov	r2, r3
 801473e:	68b9      	ldr	r1, [r7, #8]
 8014740:	f002 f9fe 	bl	8016b40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	685a      	ldr	r2, [r3, #4]
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801474c:	441a      	add	r2, r3
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	685a      	ldr	r2, [r3, #4]
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	689b      	ldr	r3, [r3, #8]
 801475a:	429a      	cmp	r2, r3
 801475c:	d32b      	bcc.n	80147b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	681a      	ldr	r2, [r3, #0]
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	605a      	str	r2, [r3, #4]
 8014766:	e026      	b.n	80147b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	68d8      	ldr	r0, [r3, #12]
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014770:	461a      	mov	r2, r3
 8014772:	68b9      	ldr	r1, [r7, #8]
 8014774:	f002 f9e4 	bl	8016b40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	68da      	ldr	r2, [r3, #12]
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014780:	425b      	negs	r3, r3
 8014782:	441a      	add	r2, r3
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	68da      	ldr	r2, [r3, #12]
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	429a      	cmp	r2, r3
 8014792:	d207      	bcs.n	80147a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	689a      	ldr	r2, [r3, #8]
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801479c:	425b      	negs	r3, r3
 801479e:	441a      	add	r2, r3
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2b02      	cmp	r3, #2
 80147a8:	d105      	bne.n	80147b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80147aa:	693b      	ldr	r3, [r7, #16]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d002      	beq.n	80147b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80147b0:	693b      	ldr	r3, [r7, #16]
 80147b2:	3b01      	subs	r3, #1
 80147b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147b6:	693b      	ldr	r3, [r7, #16]
 80147b8:	1c5a      	adds	r2, r3, #1
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80147be:	697b      	ldr	r3, [r7, #20]
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	3718      	adds	r7, #24
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d018      	beq.n	801480c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	68da      	ldr	r2, [r3, #12]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147e2:	441a      	add	r2, r3
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	68da      	ldr	r2, [r3, #12]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	689b      	ldr	r3, [r3, #8]
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d303      	bcc.n	80147fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681a      	ldr	r2, [r3, #0]
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	68d9      	ldr	r1, [r3, #12]
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014804:	461a      	mov	r2, r3
 8014806:	6838      	ldr	r0, [r7, #0]
 8014808:	f002 f99a 	bl	8016b40 <memcpy>
	}
}
 801480c:	bf00      	nop
 801480e:	3708      	adds	r7, #8
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}

08014814 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b084      	sub	sp, #16
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801481c:	f001 fe4a 	bl	80164b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014826:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014828:	e011      	b.n	801484e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801482e:	2b00      	cmp	r3, #0
 8014830:	d012      	beq.n	8014858 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	3324      	adds	r3, #36	; 0x24
 8014836:	4618      	mov	r0, r3
 8014838:	f000 fe88 	bl	801554c <xTaskRemoveFromEventList>
 801483c:	4603      	mov	r3, r0
 801483e:	2b00      	cmp	r3, #0
 8014840:	d001      	beq.n	8014846 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014842:	f000 ffc1 	bl	80157c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014846:	7bfb      	ldrb	r3, [r7, #15]
 8014848:	3b01      	subs	r3, #1
 801484a:	b2db      	uxtb	r3, r3
 801484c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801484e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014852:	2b00      	cmp	r3, #0
 8014854:	dce9      	bgt.n	801482a <prvUnlockQueue+0x16>
 8014856:	e000      	b.n	801485a <prvUnlockQueue+0x46>
					break;
 8014858:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	22ff      	movs	r2, #255	; 0xff
 801485e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014862:	f001 fe57 	bl	8016514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014866:	f001 fe25 	bl	80164b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014870:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014872:	e011      	b.n	8014898 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	691b      	ldr	r3, [r3, #16]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d012      	beq.n	80148a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	3310      	adds	r3, #16
 8014880:	4618      	mov	r0, r3
 8014882:	f000 fe63 	bl	801554c <xTaskRemoveFromEventList>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d001      	beq.n	8014890 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801488c:	f000 ff9c 	bl	80157c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014890:	7bbb      	ldrb	r3, [r7, #14]
 8014892:	3b01      	subs	r3, #1
 8014894:	b2db      	uxtb	r3, r3
 8014896:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014898:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801489c:	2b00      	cmp	r3, #0
 801489e:	dce9      	bgt.n	8014874 <prvUnlockQueue+0x60>
 80148a0:	e000      	b.n	80148a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80148a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	22ff      	movs	r2, #255	; 0xff
 80148a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80148ac:	f001 fe32 	bl	8016514 <vPortExitCritical>
}
 80148b0:	bf00      	nop
 80148b2:	3710      	adds	r7, #16
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80148c0:	f001 fdf8 	bl	80164b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d102      	bne.n	80148d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80148cc:	2301      	movs	r3, #1
 80148ce:	60fb      	str	r3, [r7, #12]
 80148d0:	e001      	b.n	80148d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80148d2:	2300      	movs	r3, #0
 80148d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80148d6:	f001 fe1d 	bl	8016514 <vPortExitCritical>

	return xReturn;
 80148da:	68fb      	ldr	r3, [r7, #12]
}
 80148dc:	4618      	mov	r0, r3
 80148de:	3710      	adds	r7, #16
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}

080148e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80148ec:	f001 fde2 	bl	80164b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148f8:	429a      	cmp	r2, r3
 80148fa:	d102      	bne.n	8014902 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80148fc:	2301      	movs	r3, #1
 80148fe:	60fb      	str	r3, [r7, #12]
 8014900:	e001      	b.n	8014906 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014902:	2300      	movs	r3, #0
 8014904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014906:	f001 fe05 	bl	8016514 <vPortExitCritical>

	return xReturn;
 801490a:	68fb      	ldr	r3, [r7, #12]
}
 801490c:	4618      	mov	r0, r3
 801490e:	3710      	adds	r7, #16
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014914:	b480      	push	{r7}
 8014916:	b085      	sub	sp, #20
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
 801491c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801491e:	2300      	movs	r3, #0
 8014920:	60fb      	str	r3, [r7, #12]
 8014922:	e014      	b.n	801494e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014924:	4a0f      	ldr	r2, [pc, #60]	; (8014964 <vQueueAddToRegistry+0x50>)
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d10b      	bne.n	8014948 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014930:	490c      	ldr	r1, [pc, #48]	; (8014964 <vQueueAddToRegistry+0x50>)
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	683a      	ldr	r2, [r7, #0]
 8014936:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801493a:	4a0a      	ldr	r2, [pc, #40]	; (8014964 <vQueueAddToRegistry+0x50>)
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	00db      	lsls	r3, r3, #3
 8014940:	4413      	add	r3, r2
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014946:	e006      	b.n	8014956 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	3301      	adds	r3, #1
 801494c:	60fb      	str	r3, [r7, #12]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	2b07      	cmp	r3, #7
 8014952:	d9e7      	bls.n	8014924 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014954:	bf00      	nop
 8014956:	bf00      	nop
 8014958:	3714      	adds	r7, #20
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr
 8014962:	bf00      	nop
 8014964:	240017ec 	.word	0x240017ec

08014968 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014968:	b580      	push	{r7, lr}
 801496a:	b086      	sub	sp, #24
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014978:	f001 fd9c 	bl	80164b4 <vPortEnterCritical>
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014982:	b25b      	sxtb	r3, r3
 8014984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014988:	d103      	bne.n	8014992 <vQueueWaitForMessageRestricted+0x2a>
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	2200      	movs	r2, #0
 801498e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014992:	697b      	ldr	r3, [r7, #20]
 8014994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014998:	b25b      	sxtb	r3, r3
 801499a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801499e:	d103      	bne.n	80149a8 <vQueueWaitForMessageRestricted+0x40>
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	2200      	movs	r2, #0
 80149a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80149a8:	f001 fdb4 	bl	8016514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80149ac:	697b      	ldr	r3, [r7, #20]
 80149ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d106      	bne.n	80149c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	3324      	adds	r3, #36	; 0x24
 80149b8:	687a      	ldr	r2, [r7, #4]
 80149ba:	68b9      	ldr	r1, [r7, #8]
 80149bc:	4618      	mov	r0, r3
 80149be:	f000 fd99 	bl	80154f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80149c2:	6978      	ldr	r0, [r7, #20]
 80149c4:	f7ff ff26 	bl	8014814 <prvUnlockQueue>
	}
 80149c8:	bf00      	nop
 80149ca:	3718      	adds	r7, #24
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b08e      	sub	sp, #56	; 0x38
 80149d4:	af04      	add	r7, sp, #16
 80149d6:	60f8      	str	r0, [r7, #12]
 80149d8:	60b9      	str	r1, [r7, #8]
 80149da:	607a      	str	r2, [r7, #4]
 80149dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80149de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d10a      	bne.n	80149fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80149e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e8:	f383 8811 	msr	BASEPRI, r3
 80149ec:	f3bf 8f6f 	isb	sy
 80149f0:	f3bf 8f4f 	dsb	sy
 80149f4:	623b      	str	r3, [r7, #32]
}
 80149f6:	bf00      	nop
 80149f8:	e7fe      	b.n	80149f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80149fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d10a      	bne.n	8014a16 <xTaskCreateStatic+0x46>
	__asm volatile
 8014a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a04:	f383 8811 	msr	BASEPRI, r3
 8014a08:	f3bf 8f6f 	isb	sy
 8014a0c:	f3bf 8f4f 	dsb	sy
 8014a10:	61fb      	str	r3, [r7, #28]
}
 8014a12:	bf00      	nop
 8014a14:	e7fe      	b.n	8014a14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014a16:	235c      	movs	r3, #92	; 0x5c
 8014a18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	2b5c      	cmp	r3, #92	; 0x5c
 8014a1e:	d00a      	beq.n	8014a36 <xTaskCreateStatic+0x66>
	__asm volatile
 8014a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a24:	f383 8811 	msr	BASEPRI, r3
 8014a28:	f3bf 8f6f 	isb	sy
 8014a2c:	f3bf 8f4f 	dsb	sy
 8014a30:	61bb      	str	r3, [r7, #24]
}
 8014a32:	bf00      	nop
 8014a34:	e7fe      	b.n	8014a34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014a36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d01e      	beq.n	8014a7c <xTaskCreateStatic+0xac>
 8014a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d01b      	beq.n	8014a7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a50:	2202      	movs	r2, #2
 8014a52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014a56:	2300      	movs	r3, #0
 8014a58:	9303      	str	r3, [sp, #12]
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a5c:	9302      	str	r3, [sp, #8]
 8014a5e:	f107 0314 	add.w	r3, r7, #20
 8014a62:	9301      	str	r3, [sp, #4]
 8014a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a66:	9300      	str	r3, [sp, #0]
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	68b9      	ldr	r1, [r7, #8]
 8014a6e:	68f8      	ldr	r0, [r7, #12]
 8014a70:	f000 f850 	bl	8014b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a76:	f000 f8dd 	bl	8014c34 <prvAddNewTaskToReadyList>
 8014a7a:	e001      	b.n	8014a80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014a80:	697b      	ldr	r3, [r7, #20]
	}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3728      	adds	r7, #40	; 0x28
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}

08014a8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014a8a:	b580      	push	{r7, lr}
 8014a8c:	b08c      	sub	sp, #48	; 0x30
 8014a8e:	af04      	add	r7, sp, #16
 8014a90:	60f8      	str	r0, [r7, #12]
 8014a92:	60b9      	str	r1, [r7, #8]
 8014a94:	603b      	str	r3, [r7, #0]
 8014a96:	4613      	mov	r3, r2
 8014a98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014a9a:	88fb      	ldrh	r3, [r7, #6]
 8014a9c:	009b      	lsls	r3, r3, #2
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f001 fe2a 	bl	80166f8 <pvPortMalloc>
 8014aa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d00e      	beq.n	8014aca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014aac:	205c      	movs	r0, #92	; 0x5c
 8014aae:	f001 fe23 	bl	80166f8 <pvPortMalloc>
 8014ab2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d003      	beq.n	8014ac2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	697a      	ldr	r2, [r7, #20]
 8014abe:	631a      	str	r2, [r3, #48]	; 0x30
 8014ac0:	e005      	b.n	8014ace <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014ac2:	6978      	ldr	r0, [r7, #20]
 8014ac4:	f001 fee4 	bl	8016890 <vPortFree>
 8014ac8:	e001      	b.n	8014ace <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014aca:	2300      	movs	r3, #0
 8014acc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014ace:	69fb      	ldr	r3, [r7, #28]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d017      	beq.n	8014b04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014adc:	88fa      	ldrh	r2, [r7, #6]
 8014ade:	2300      	movs	r3, #0
 8014ae0:	9303      	str	r3, [sp, #12]
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	9302      	str	r3, [sp, #8]
 8014ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae8:	9301      	str	r3, [sp, #4]
 8014aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aec:	9300      	str	r3, [sp, #0]
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	68b9      	ldr	r1, [r7, #8]
 8014af2:	68f8      	ldr	r0, [r7, #12]
 8014af4:	f000 f80e 	bl	8014b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014af8:	69f8      	ldr	r0, [r7, #28]
 8014afa:	f000 f89b 	bl	8014c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014afe:	2301      	movs	r3, #1
 8014b00:	61bb      	str	r3, [r7, #24]
 8014b02:	e002      	b.n	8014b0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3720      	adds	r7, #32
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}

08014b14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b088      	sub	sp, #32
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	607a      	str	r2, [r7, #4]
 8014b20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	21a5      	movs	r1, #165	; 0xa5
 8014b2e:	f002 f815 	bl	8016b5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b36:	6879      	ldr	r1, [r7, #4]
 8014b38:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014b3c:	440b      	add	r3, r1
 8014b3e:	009b      	lsls	r3, r3, #2
 8014b40:	4413      	add	r3, r2
 8014b42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	f023 0307 	bic.w	r3, r3, #7
 8014b4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014b4c:	69bb      	ldr	r3, [r7, #24]
 8014b4e:	f003 0307 	and.w	r3, r3, #7
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d00a      	beq.n	8014b6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b5a:	f383 8811 	msr	BASEPRI, r3
 8014b5e:	f3bf 8f6f 	isb	sy
 8014b62:	f3bf 8f4f 	dsb	sy
 8014b66:	617b      	str	r3, [r7, #20]
}
 8014b68:	bf00      	nop
 8014b6a:	e7fe      	b.n	8014b6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d01f      	beq.n	8014bb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b72:	2300      	movs	r3, #0
 8014b74:	61fb      	str	r3, [r7, #28]
 8014b76:	e012      	b.n	8014b9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014b78:	68ba      	ldr	r2, [r7, #8]
 8014b7a:	69fb      	ldr	r3, [r7, #28]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	7819      	ldrb	r1, [r3, #0]
 8014b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	4413      	add	r3, r2
 8014b86:	3334      	adds	r3, #52	; 0x34
 8014b88:	460a      	mov	r2, r1
 8014b8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014b8c:	68ba      	ldr	r2, [r7, #8]
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	4413      	add	r3, r2
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d006      	beq.n	8014ba6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	61fb      	str	r3, [r7, #28]
 8014b9e:	69fb      	ldr	r3, [r7, #28]
 8014ba0:	2b0f      	cmp	r3, #15
 8014ba2:	d9e9      	bls.n	8014b78 <prvInitialiseNewTask+0x64>
 8014ba4:	e000      	b.n	8014ba8 <prvInitialiseNewTask+0x94>
			{
				break;
 8014ba6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014baa:	2200      	movs	r2, #0
 8014bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014bb0:	e003      	b.n	8014bba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bbc:	2b37      	cmp	r3, #55	; 0x37
 8014bbe:	d901      	bls.n	8014bc4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014bc0:	2337      	movs	r3, #55	; 0x37
 8014bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd8:	3304      	adds	r3, #4
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7ff f8be 	bl	8013d5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be2:	3318      	adds	r3, #24
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7ff f8b9 	bl	8013d5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c02:	2200      	movs	r2, #0
 8014c04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c08:	2200      	movs	r2, #0
 8014c0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014c0e:	683a      	ldr	r2, [r7, #0]
 8014c10:	68f9      	ldr	r1, [r7, #12]
 8014c12:	69b8      	ldr	r0, [r7, #24]
 8014c14:	f001 fb20 	bl	8016258 <pxPortInitialiseStack>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d002      	beq.n	8014c2a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c2a:	bf00      	nop
 8014c2c:	3720      	adds	r7, #32
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
	...

08014c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b082      	sub	sp, #8
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014c3c:	f001 fc3a 	bl	80164b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014c40:	4b2d      	ldr	r3, [pc, #180]	; (8014cf8 <prvAddNewTaskToReadyList+0xc4>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	3301      	adds	r3, #1
 8014c46:	4a2c      	ldr	r2, [pc, #176]	; (8014cf8 <prvAddNewTaskToReadyList+0xc4>)
 8014c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014c4a:	4b2c      	ldr	r3, [pc, #176]	; (8014cfc <prvAddNewTaskToReadyList+0xc8>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d109      	bne.n	8014c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014c52:	4a2a      	ldr	r2, [pc, #168]	; (8014cfc <prvAddNewTaskToReadyList+0xc8>)
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014c58:	4b27      	ldr	r3, [pc, #156]	; (8014cf8 <prvAddNewTaskToReadyList+0xc4>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d110      	bne.n	8014c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014c60:	f000 fdd6 	bl	8015810 <prvInitialiseTaskLists>
 8014c64:	e00d      	b.n	8014c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014c66:	4b26      	ldr	r3, [pc, #152]	; (8014d00 <prvAddNewTaskToReadyList+0xcc>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d109      	bne.n	8014c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014c6e:	4b23      	ldr	r3, [pc, #140]	; (8014cfc <prvAddNewTaskToReadyList+0xc8>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d802      	bhi.n	8014c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014c7c:	4a1f      	ldr	r2, [pc, #124]	; (8014cfc <prvAddNewTaskToReadyList+0xc8>)
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014c82:	4b20      	ldr	r3, [pc, #128]	; (8014d04 <prvAddNewTaskToReadyList+0xd0>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	3301      	adds	r3, #1
 8014c88:	4a1e      	ldr	r2, [pc, #120]	; (8014d04 <prvAddNewTaskToReadyList+0xd0>)
 8014c8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014c8c:	4b1d      	ldr	r3, [pc, #116]	; (8014d04 <prvAddNewTaskToReadyList+0xd0>)
 8014c8e:	681a      	ldr	r2, [r3, #0]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c98:	4b1b      	ldr	r3, [pc, #108]	; (8014d08 <prvAddNewTaskToReadyList+0xd4>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d903      	bls.n	8014ca8 <prvAddNewTaskToReadyList+0x74>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca4:	4a18      	ldr	r2, [pc, #96]	; (8014d08 <prvAddNewTaskToReadyList+0xd4>)
 8014ca6:	6013      	str	r3, [r2, #0]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cac:	4613      	mov	r3, r2
 8014cae:	009b      	lsls	r3, r3, #2
 8014cb0:	4413      	add	r3, r2
 8014cb2:	009b      	lsls	r3, r3, #2
 8014cb4:	4a15      	ldr	r2, [pc, #84]	; (8014d0c <prvAddNewTaskToReadyList+0xd8>)
 8014cb6:	441a      	add	r2, r3
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	3304      	adds	r3, #4
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	4610      	mov	r0, r2
 8014cc0:	f7ff f859 	bl	8013d76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014cc4:	f001 fc26 	bl	8016514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014cc8:	4b0d      	ldr	r3, [pc, #52]	; (8014d00 <prvAddNewTaskToReadyList+0xcc>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d00e      	beq.n	8014cee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014cd0:	4b0a      	ldr	r3, [pc, #40]	; (8014cfc <prvAddNewTaskToReadyList+0xc8>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cda:	429a      	cmp	r2, r3
 8014cdc:	d207      	bcs.n	8014cee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014cde:	4b0c      	ldr	r3, [pc, #48]	; (8014d10 <prvAddNewTaskToReadyList+0xdc>)
 8014ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ce4:	601a      	str	r2, [r3, #0]
 8014ce6:	f3bf 8f4f 	dsb	sy
 8014cea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014cee:	bf00      	nop
 8014cf0:	3708      	adds	r7, #8
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	bf00      	nop
 8014cf8:	24001d00 	.word	0x24001d00
 8014cfc:	2400182c 	.word	0x2400182c
 8014d00:	24001d0c 	.word	0x24001d0c
 8014d04:	24001d1c 	.word	0x24001d1c
 8014d08:	24001d08 	.word	0x24001d08
 8014d0c:	24001830 	.word	0x24001830
 8014d10:	e000ed04 	.word	0xe000ed04

08014d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b084      	sub	sp, #16
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d017      	beq.n	8014d56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014d26:	4b13      	ldr	r3, [pc, #76]	; (8014d74 <vTaskDelay+0x60>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d00a      	beq.n	8014d44 <vTaskDelay+0x30>
	__asm volatile
 8014d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d32:	f383 8811 	msr	BASEPRI, r3
 8014d36:	f3bf 8f6f 	isb	sy
 8014d3a:	f3bf 8f4f 	dsb	sy
 8014d3e:	60bb      	str	r3, [r7, #8]
}
 8014d40:	bf00      	nop
 8014d42:	e7fe      	b.n	8014d42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014d44:	f000 f99a 	bl	801507c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014d48:	2100      	movs	r1, #0
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f000 fec2 	bl	8015ad4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014d50:	f000 f9a2 	bl	8015098 <xTaskResumeAll>
 8014d54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d107      	bne.n	8014d6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014d5c:	4b06      	ldr	r3, [pc, #24]	; (8014d78 <vTaskDelay+0x64>)
 8014d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d62:	601a      	str	r2, [r3, #0]
 8014d64:	f3bf 8f4f 	dsb	sy
 8014d68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014d6c:	bf00      	nop
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}
 8014d74:	24001d28 	.word	0x24001d28
 8014d78:	e000ed04 	.word	0xe000ed04

08014d7c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014d84:	f001 fb96 	bl	80164b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d102      	bne.n	8014d94 <vTaskSuspend+0x18>
 8014d8e:	4b30      	ldr	r3, [pc, #192]	; (8014e50 <vTaskSuspend+0xd4>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	e000      	b.n	8014d96 <vTaskSuspend+0x1a>
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	3304      	adds	r3, #4
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7ff f847 	bl	8013e30 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d004      	beq.n	8014db4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	3318      	adds	r3, #24
 8014dae:	4618      	mov	r0, r3
 8014db0:	f7ff f83e 	bl	8013e30 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	3304      	adds	r3, #4
 8014db8:	4619      	mov	r1, r3
 8014dba:	4826      	ldr	r0, [pc, #152]	; (8014e54 <vTaskSuspend+0xd8>)
 8014dbc:	f7fe ffdb 	bl	8013d76 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014dc6:	b2db      	uxtb	r3, r3
 8014dc8:	2b01      	cmp	r3, #1
 8014dca:	d103      	bne.n	8014dd4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014dd4:	f001 fb9e 	bl	8016514 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014dd8:	4b1f      	ldr	r3, [pc, #124]	; (8014e58 <vTaskSuspend+0xdc>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d005      	beq.n	8014dec <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014de0:	f001 fb68 	bl	80164b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014de4:	f000 fdb2 	bl	801594c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014de8:	f001 fb94 	bl	8016514 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014dec:	4b18      	ldr	r3, [pc, #96]	; (8014e50 <vTaskSuspend+0xd4>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	68fa      	ldr	r2, [r7, #12]
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d127      	bne.n	8014e46 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014df6:	4b18      	ldr	r3, [pc, #96]	; (8014e58 <vTaskSuspend+0xdc>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d017      	beq.n	8014e2e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014dfe:	4b17      	ldr	r3, [pc, #92]	; (8014e5c <vTaskSuspend+0xe0>)
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d00a      	beq.n	8014e1c <vTaskSuspend+0xa0>
	__asm volatile
 8014e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e0a:	f383 8811 	msr	BASEPRI, r3
 8014e0e:	f3bf 8f6f 	isb	sy
 8014e12:	f3bf 8f4f 	dsb	sy
 8014e16:	60bb      	str	r3, [r7, #8]
}
 8014e18:	bf00      	nop
 8014e1a:	e7fe      	b.n	8014e1a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014e1c:	4b10      	ldr	r3, [pc, #64]	; (8014e60 <vTaskSuspend+0xe4>)
 8014e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e22:	601a      	str	r2, [r3, #0]
 8014e24:	f3bf 8f4f 	dsb	sy
 8014e28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014e2c:	e00b      	b.n	8014e46 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014e2e:	4b09      	ldr	r3, [pc, #36]	; (8014e54 <vTaskSuspend+0xd8>)
 8014e30:	681a      	ldr	r2, [r3, #0]
 8014e32:	4b0c      	ldr	r3, [pc, #48]	; (8014e64 <vTaskSuspend+0xe8>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d103      	bne.n	8014e42 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014e3a:	4b05      	ldr	r3, [pc, #20]	; (8014e50 <vTaskSuspend+0xd4>)
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	601a      	str	r2, [r3, #0]
	}
 8014e40:	e001      	b.n	8014e46 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014e42:	f000 fa99 	bl	8015378 <vTaskSwitchContext>
	}
 8014e46:	bf00      	nop
 8014e48:	3710      	adds	r7, #16
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	2400182c 	.word	0x2400182c
 8014e54:	24001cec 	.word	0x24001cec
 8014e58:	24001d0c 	.word	0x24001d0c
 8014e5c:	24001d28 	.word	0x24001d28
 8014e60:	e000ed04 	.word	0xe000ed04
 8014e64:	24001d00 	.word	0x24001d00

08014e68 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014e68:	b480      	push	{r7}
 8014e6a:	b087      	sub	sp, #28
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014e70:	2300      	movs	r3, #0
 8014e72:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d10a      	bne.n	8014e94 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e82:	f383 8811 	msr	BASEPRI, r3
 8014e86:	f3bf 8f6f 	isb	sy
 8014e8a:	f3bf 8f4f 	dsb	sy
 8014e8e:	60fb      	str	r3, [r7, #12]
}
 8014e90:	bf00      	nop
 8014e92:	e7fe      	b.n	8014e92 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	695b      	ldr	r3, [r3, #20]
 8014e98:	4a0a      	ldr	r2, [pc, #40]	; (8014ec4 <prvTaskIsTaskSuspended+0x5c>)
 8014e9a:	4293      	cmp	r3, r2
 8014e9c:	d10a      	bne.n	8014eb4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014e9e:	693b      	ldr	r3, [r7, #16]
 8014ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ea2:	4a09      	ldr	r2, [pc, #36]	; (8014ec8 <prvTaskIsTaskSuspended+0x60>)
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d005      	beq.n	8014eb4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d101      	bne.n	8014eb4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014eb4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	371c      	adds	r7, #28
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec0:	4770      	bx	lr
 8014ec2:	bf00      	nop
 8014ec4:	24001cec 	.word	0x24001cec
 8014ec8:	24001cc0 	.word	0x24001cc0

08014ecc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b08a      	sub	sp, #40	; 0x28
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d10a      	bne.n	8014ef8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee6:	f383 8811 	msr	BASEPRI, r3
 8014eea:	f3bf 8f6f 	isb	sy
 8014eee:	f3bf 8f4f 	dsb	sy
 8014ef2:	61bb      	str	r3, [r7, #24]
}
 8014ef4:	bf00      	nop
 8014ef6:	e7fe      	b.n	8014ef6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ef8:	f001 fbbe 	bl	8016678 <vPortValidateInterruptPriority>
	__asm volatile
 8014efc:	f3ef 8211 	mrs	r2, BASEPRI
 8014f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f04:	f383 8811 	msr	BASEPRI, r3
 8014f08:	f3bf 8f6f 	isb	sy
 8014f0c:	f3bf 8f4f 	dsb	sy
 8014f10:	617a      	str	r2, [r7, #20]
 8014f12:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014f14:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014f16:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014f18:	6a38      	ldr	r0, [r7, #32]
 8014f1a:	f7ff ffa5 	bl	8014e68 <prvTaskIsTaskSuspended>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d030      	beq.n	8014f86 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f24:	4b1d      	ldr	r3, [pc, #116]	; (8014f9c <xTaskResumeFromISR+0xd0>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d126      	bne.n	8014f7a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014f2c:	6a3b      	ldr	r3, [r7, #32]
 8014f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f30:	4b1b      	ldr	r3, [pc, #108]	; (8014fa0 <xTaskResumeFromISR+0xd4>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d301      	bcc.n	8014f3e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f3e:	6a3b      	ldr	r3, [r7, #32]
 8014f40:	3304      	adds	r3, #4
 8014f42:	4618      	mov	r0, r3
 8014f44:	f7fe ff74 	bl	8013e30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014f48:	6a3b      	ldr	r3, [r7, #32]
 8014f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f4c:	4b15      	ldr	r3, [pc, #84]	; (8014fa4 <xTaskResumeFromISR+0xd8>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d903      	bls.n	8014f5c <xTaskResumeFromISR+0x90>
 8014f54:	6a3b      	ldr	r3, [r7, #32]
 8014f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f58:	4a12      	ldr	r2, [pc, #72]	; (8014fa4 <xTaskResumeFromISR+0xd8>)
 8014f5a:	6013      	str	r3, [r2, #0]
 8014f5c:	6a3b      	ldr	r3, [r7, #32]
 8014f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f60:	4613      	mov	r3, r2
 8014f62:	009b      	lsls	r3, r3, #2
 8014f64:	4413      	add	r3, r2
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	4a0f      	ldr	r2, [pc, #60]	; (8014fa8 <xTaskResumeFromISR+0xdc>)
 8014f6a:	441a      	add	r2, r3
 8014f6c:	6a3b      	ldr	r3, [r7, #32]
 8014f6e:	3304      	adds	r3, #4
 8014f70:	4619      	mov	r1, r3
 8014f72:	4610      	mov	r0, r2
 8014f74:	f7fe feff 	bl	8013d76 <vListInsertEnd>
 8014f78:	e005      	b.n	8014f86 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014f7a:	6a3b      	ldr	r3, [r7, #32]
 8014f7c:	3318      	adds	r3, #24
 8014f7e:	4619      	mov	r1, r3
 8014f80:	480a      	ldr	r0, [pc, #40]	; (8014fac <xTaskResumeFromISR+0xe0>)
 8014f82:	f7fe fef8 	bl	8013d76 <vListInsertEnd>
 8014f86:	69fb      	ldr	r3, [r7, #28]
 8014f88:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	f383 8811 	msr	BASEPRI, r3
}
 8014f90:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014f94:	4618      	mov	r0, r3
 8014f96:	3728      	adds	r7, #40	; 0x28
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	24001d28 	.word	0x24001d28
 8014fa0:	2400182c 	.word	0x2400182c
 8014fa4:	24001d08 	.word	0x24001d08
 8014fa8:	24001830 	.word	0x24001830
 8014fac:	24001cc0 	.word	0x24001cc0

08014fb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b08a      	sub	sp, #40	; 0x28
 8014fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014fbe:	463a      	mov	r2, r7
 8014fc0:	1d39      	adds	r1, r7, #4
 8014fc2:	f107 0308 	add.w	r3, r7, #8
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7fe fc08 	bl	80137dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014fcc:	6839      	ldr	r1, [r7, #0]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	68ba      	ldr	r2, [r7, #8]
 8014fd2:	9202      	str	r2, [sp, #8]
 8014fd4:	9301      	str	r3, [sp, #4]
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	9300      	str	r3, [sp, #0]
 8014fda:	2300      	movs	r3, #0
 8014fdc:	460a      	mov	r2, r1
 8014fde:	4921      	ldr	r1, [pc, #132]	; (8015064 <vTaskStartScheduler+0xb4>)
 8014fe0:	4821      	ldr	r0, [pc, #132]	; (8015068 <vTaskStartScheduler+0xb8>)
 8014fe2:	f7ff fcf5 	bl	80149d0 <xTaskCreateStatic>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	4a20      	ldr	r2, [pc, #128]	; (801506c <vTaskStartScheduler+0xbc>)
 8014fea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014fec:	4b1f      	ldr	r3, [pc, #124]	; (801506c <vTaskStartScheduler+0xbc>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d002      	beq.n	8014ffa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	617b      	str	r3, [r7, #20]
 8014ff8:	e001      	b.n	8014ffe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	2b01      	cmp	r3, #1
 8015002:	d102      	bne.n	801500a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015004:	f000 fdba 	bl	8015b7c <xTimerCreateTimerTask>
 8015008:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	2b01      	cmp	r3, #1
 801500e:	d116      	bne.n	801503e <vTaskStartScheduler+0x8e>
	__asm volatile
 8015010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015014:	f383 8811 	msr	BASEPRI, r3
 8015018:	f3bf 8f6f 	isb	sy
 801501c:	f3bf 8f4f 	dsb	sy
 8015020:	613b      	str	r3, [r7, #16]
}
 8015022:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015024:	4b12      	ldr	r3, [pc, #72]	; (8015070 <vTaskStartScheduler+0xc0>)
 8015026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801502a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801502c:	4b11      	ldr	r3, [pc, #68]	; (8015074 <vTaskStartScheduler+0xc4>)
 801502e:	2201      	movs	r2, #1
 8015030:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015032:	4b11      	ldr	r3, [pc, #68]	; (8015078 <vTaskStartScheduler+0xc8>)
 8015034:	2200      	movs	r2, #0
 8015036:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015038:	f001 f99a 	bl	8016370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801503c:	e00e      	b.n	801505c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015044:	d10a      	bne.n	801505c <vTaskStartScheduler+0xac>
	__asm volatile
 8015046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801504a:	f383 8811 	msr	BASEPRI, r3
 801504e:	f3bf 8f6f 	isb	sy
 8015052:	f3bf 8f4f 	dsb	sy
 8015056:	60fb      	str	r3, [r7, #12]
}
 8015058:	bf00      	nop
 801505a:	e7fe      	b.n	801505a <vTaskStartScheduler+0xaa>
}
 801505c:	bf00      	nop
 801505e:	3718      	adds	r7, #24
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}
 8015064:	080177d8 	.word	0x080177d8
 8015068:	080157e1 	.word	0x080157e1
 801506c:	24001d24 	.word	0x24001d24
 8015070:	24001d20 	.word	0x24001d20
 8015074:	24001d0c 	.word	0x24001d0c
 8015078:	24001d04 	.word	0x24001d04

0801507c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801507c:	b480      	push	{r7}
 801507e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015080:	4b04      	ldr	r3, [pc, #16]	; (8015094 <vTaskSuspendAll+0x18>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	3301      	adds	r3, #1
 8015086:	4a03      	ldr	r2, [pc, #12]	; (8015094 <vTaskSuspendAll+0x18>)
 8015088:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801508a:	bf00      	nop
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr
 8015094:	24001d28 	.word	0x24001d28

08015098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801509e:	2300      	movs	r3, #0
 80150a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80150a2:	2300      	movs	r3, #0
 80150a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80150a6:	4b42      	ldr	r3, [pc, #264]	; (80151b0 <xTaskResumeAll+0x118>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d10a      	bne.n	80150c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80150ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150b2:	f383 8811 	msr	BASEPRI, r3
 80150b6:	f3bf 8f6f 	isb	sy
 80150ba:	f3bf 8f4f 	dsb	sy
 80150be:	603b      	str	r3, [r7, #0]
}
 80150c0:	bf00      	nop
 80150c2:	e7fe      	b.n	80150c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80150c4:	f001 f9f6 	bl	80164b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80150c8:	4b39      	ldr	r3, [pc, #228]	; (80151b0 <xTaskResumeAll+0x118>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	3b01      	subs	r3, #1
 80150ce:	4a38      	ldr	r2, [pc, #224]	; (80151b0 <xTaskResumeAll+0x118>)
 80150d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150d2:	4b37      	ldr	r3, [pc, #220]	; (80151b0 <xTaskResumeAll+0x118>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d162      	bne.n	80151a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80150da:	4b36      	ldr	r3, [pc, #216]	; (80151b4 <xTaskResumeAll+0x11c>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d05e      	beq.n	80151a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80150e2:	e02f      	b.n	8015144 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150e4:	4b34      	ldr	r3, [pc, #208]	; (80151b8 <xTaskResumeAll+0x120>)
 80150e6:	68db      	ldr	r3, [r3, #12]
 80150e8:	68db      	ldr	r3, [r3, #12]
 80150ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	3318      	adds	r3, #24
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7fe fe9d 	bl	8013e30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	3304      	adds	r3, #4
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7fe fe98 	bl	8013e30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015104:	4b2d      	ldr	r3, [pc, #180]	; (80151bc <xTaskResumeAll+0x124>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	429a      	cmp	r2, r3
 801510a:	d903      	bls.n	8015114 <xTaskResumeAll+0x7c>
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015110:	4a2a      	ldr	r2, [pc, #168]	; (80151bc <xTaskResumeAll+0x124>)
 8015112:	6013      	str	r3, [r2, #0]
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015118:	4613      	mov	r3, r2
 801511a:	009b      	lsls	r3, r3, #2
 801511c:	4413      	add	r3, r2
 801511e:	009b      	lsls	r3, r3, #2
 8015120:	4a27      	ldr	r2, [pc, #156]	; (80151c0 <xTaskResumeAll+0x128>)
 8015122:	441a      	add	r2, r3
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	3304      	adds	r3, #4
 8015128:	4619      	mov	r1, r3
 801512a:	4610      	mov	r0, r2
 801512c:	f7fe fe23 	bl	8013d76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015134:	4b23      	ldr	r3, [pc, #140]	; (80151c4 <xTaskResumeAll+0x12c>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801513a:	429a      	cmp	r2, r3
 801513c:	d302      	bcc.n	8015144 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801513e:	4b22      	ldr	r3, [pc, #136]	; (80151c8 <xTaskResumeAll+0x130>)
 8015140:	2201      	movs	r2, #1
 8015142:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015144:	4b1c      	ldr	r3, [pc, #112]	; (80151b8 <xTaskResumeAll+0x120>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d1cb      	bne.n	80150e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d001      	beq.n	8015156 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015152:	f000 fbfb 	bl	801594c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015156:	4b1d      	ldr	r3, [pc, #116]	; (80151cc <xTaskResumeAll+0x134>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d010      	beq.n	8015184 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015162:	f000 f847 	bl	80151f4 <xTaskIncrementTick>
 8015166:	4603      	mov	r3, r0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d002      	beq.n	8015172 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801516c:	4b16      	ldr	r3, [pc, #88]	; (80151c8 <xTaskResumeAll+0x130>)
 801516e:	2201      	movs	r2, #1
 8015170:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	3b01      	subs	r3, #1
 8015176:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d1f1      	bne.n	8015162 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801517e:	4b13      	ldr	r3, [pc, #76]	; (80151cc <xTaskResumeAll+0x134>)
 8015180:	2200      	movs	r2, #0
 8015182:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015184:	4b10      	ldr	r3, [pc, #64]	; (80151c8 <xTaskResumeAll+0x130>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d009      	beq.n	80151a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801518c:	2301      	movs	r3, #1
 801518e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015190:	4b0f      	ldr	r3, [pc, #60]	; (80151d0 <xTaskResumeAll+0x138>)
 8015192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015196:	601a      	str	r2, [r3, #0]
 8015198:	f3bf 8f4f 	dsb	sy
 801519c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80151a0:	f001 f9b8 	bl	8016514 <vPortExitCritical>

	return xAlreadyYielded;
 80151a4:	68bb      	ldr	r3, [r7, #8]
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3710      	adds	r7, #16
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	24001d28 	.word	0x24001d28
 80151b4:	24001d00 	.word	0x24001d00
 80151b8:	24001cc0 	.word	0x24001cc0
 80151bc:	24001d08 	.word	0x24001d08
 80151c0:	24001830 	.word	0x24001830
 80151c4:	2400182c 	.word	0x2400182c
 80151c8:	24001d14 	.word	0x24001d14
 80151cc:	24001d10 	.word	0x24001d10
 80151d0:	e000ed04 	.word	0xe000ed04

080151d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80151d4:	b480      	push	{r7}
 80151d6:	b083      	sub	sp, #12
 80151d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80151da:	4b05      	ldr	r3, [pc, #20]	; (80151f0 <xTaskGetTickCount+0x1c>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80151e0:	687b      	ldr	r3, [r7, #4]
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	370c      	adds	r7, #12
 80151e6:	46bd      	mov	sp, r7
 80151e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ec:	4770      	bx	lr
 80151ee:	bf00      	nop
 80151f0:	24001d04 	.word	0x24001d04

080151f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b086      	sub	sp, #24
 80151f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80151fa:	2300      	movs	r3, #0
 80151fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80151fe:	4b53      	ldr	r3, [pc, #332]	; (801534c <xTaskIncrementTick+0x158>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	f040 8095 	bne.w	8015332 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015208:	4b51      	ldr	r3, [pc, #324]	; (8015350 <xTaskIncrementTick+0x15c>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	3301      	adds	r3, #1
 801520e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015210:	4a4f      	ldr	r2, [pc, #316]	; (8015350 <xTaskIncrementTick+0x15c>)
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d120      	bne.n	801525e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801521c:	4b4d      	ldr	r3, [pc, #308]	; (8015354 <xTaskIncrementTick+0x160>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d00a      	beq.n	801523c <xTaskIncrementTick+0x48>
	__asm volatile
 8015226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801522a:	f383 8811 	msr	BASEPRI, r3
 801522e:	f3bf 8f6f 	isb	sy
 8015232:	f3bf 8f4f 	dsb	sy
 8015236:	603b      	str	r3, [r7, #0]
}
 8015238:	bf00      	nop
 801523a:	e7fe      	b.n	801523a <xTaskIncrementTick+0x46>
 801523c:	4b45      	ldr	r3, [pc, #276]	; (8015354 <xTaskIncrementTick+0x160>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	60fb      	str	r3, [r7, #12]
 8015242:	4b45      	ldr	r3, [pc, #276]	; (8015358 <xTaskIncrementTick+0x164>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	4a43      	ldr	r2, [pc, #268]	; (8015354 <xTaskIncrementTick+0x160>)
 8015248:	6013      	str	r3, [r2, #0]
 801524a:	4a43      	ldr	r2, [pc, #268]	; (8015358 <xTaskIncrementTick+0x164>)
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	6013      	str	r3, [r2, #0]
 8015250:	4b42      	ldr	r3, [pc, #264]	; (801535c <xTaskIncrementTick+0x168>)
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	3301      	adds	r3, #1
 8015256:	4a41      	ldr	r2, [pc, #260]	; (801535c <xTaskIncrementTick+0x168>)
 8015258:	6013      	str	r3, [r2, #0]
 801525a:	f000 fb77 	bl	801594c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801525e:	4b40      	ldr	r3, [pc, #256]	; (8015360 <xTaskIncrementTick+0x16c>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	693a      	ldr	r2, [r7, #16]
 8015264:	429a      	cmp	r2, r3
 8015266:	d349      	bcc.n	80152fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015268:	4b3a      	ldr	r3, [pc, #232]	; (8015354 <xTaskIncrementTick+0x160>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d104      	bne.n	801527c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015272:	4b3b      	ldr	r3, [pc, #236]	; (8015360 <xTaskIncrementTick+0x16c>)
 8015274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015278:	601a      	str	r2, [r3, #0]
					break;
 801527a:	e03f      	b.n	80152fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801527c:	4b35      	ldr	r3, [pc, #212]	; (8015354 <xTaskIncrementTick+0x160>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	68db      	ldr	r3, [r3, #12]
 8015282:	68db      	ldr	r3, [r3, #12]
 8015284:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801528c:	693a      	ldr	r2, [r7, #16]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	429a      	cmp	r2, r3
 8015292:	d203      	bcs.n	801529c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015294:	4a32      	ldr	r2, [pc, #200]	; (8015360 <xTaskIncrementTick+0x16c>)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801529a:	e02f      	b.n	80152fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	3304      	adds	r3, #4
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7fe fdc5 	bl	8013e30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d004      	beq.n	80152b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152ae:	68bb      	ldr	r3, [r7, #8]
 80152b0:	3318      	adds	r3, #24
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7fe fdbc 	bl	8013e30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80152b8:	68bb      	ldr	r3, [r7, #8]
 80152ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152bc:	4b29      	ldr	r3, [pc, #164]	; (8015364 <xTaskIncrementTick+0x170>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d903      	bls.n	80152cc <xTaskIncrementTick+0xd8>
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152c8:	4a26      	ldr	r2, [pc, #152]	; (8015364 <xTaskIncrementTick+0x170>)
 80152ca:	6013      	str	r3, [r2, #0]
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152d0:	4613      	mov	r3, r2
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	4413      	add	r3, r2
 80152d6:	009b      	lsls	r3, r3, #2
 80152d8:	4a23      	ldr	r2, [pc, #140]	; (8015368 <xTaskIncrementTick+0x174>)
 80152da:	441a      	add	r2, r3
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	3304      	adds	r3, #4
 80152e0:	4619      	mov	r1, r3
 80152e2:	4610      	mov	r0, r2
 80152e4:	f7fe fd47 	bl	8013d76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152ec:	4b1f      	ldr	r3, [pc, #124]	; (801536c <xTaskIncrementTick+0x178>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f2:	429a      	cmp	r2, r3
 80152f4:	d3b8      	bcc.n	8015268 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80152f6:	2301      	movs	r3, #1
 80152f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152fa:	e7b5      	b.n	8015268 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80152fc:	4b1b      	ldr	r3, [pc, #108]	; (801536c <xTaskIncrementTick+0x178>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015302:	4919      	ldr	r1, [pc, #100]	; (8015368 <xTaskIncrementTick+0x174>)
 8015304:	4613      	mov	r3, r2
 8015306:	009b      	lsls	r3, r3, #2
 8015308:	4413      	add	r3, r2
 801530a:	009b      	lsls	r3, r3, #2
 801530c:	440b      	add	r3, r1
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	2b01      	cmp	r3, #1
 8015312:	d901      	bls.n	8015318 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015314:	2301      	movs	r3, #1
 8015316:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8015318:	4b15      	ldr	r3, [pc, #84]	; (8015370 <xTaskIncrementTick+0x17c>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d101      	bne.n	8015324 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8015320:	f7eb f960 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015324:	4b13      	ldr	r3, [pc, #76]	; (8015374 <xTaskIncrementTick+0x180>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d009      	beq.n	8015340 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 801532c:	2301      	movs	r3, #1
 801532e:	617b      	str	r3, [r7, #20]
 8015330:	e006      	b.n	8015340 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015332:	4b0f      	ldr	r3, [pc, #60]	; (8015370 <xTaskIncrementTick+0x17c>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	3301      	adds	r3, #1
 8015338:	4a0d      	ldr	r2, [pc, #52]	; (8015370 <xTaskIncrementTick+0x17c>)
 801533a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 801533c:	f7eb f952 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8015340:	697b      	ldr	r3, [r7, #20]
}
 8015342:	4618      	mov	r0, r3
 8015344:	3718      	adds	r7, #24
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
 801534a:	bf00      	nop
 801534c:	24001d28 	.word	0x24001d28
 8015350:	24001d04 	.word	0x24001d04
 8015354:	24001cb8 	.word	0x24001cb8
 8015358:	24001cbc 	.word	0x24001cbc
 801535c:	24001d18 	.word	0x24001d18
 8015360:	24001d20 	.word	0x24001d20
 8015364:	24001d08 	.word	0x24001d08
 8015368:	24001830 	.word	0x24001830
 801536c:	2400182c 	.word	0x2400182c
 8015370:	24001d10 	.word	0x24001d10
 8015374:	24001d14 	.word	0x24001d14

08015378 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015378:	b480      	push	{r7}
 801537a:	b085      	sub	sp, #20
 801537c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801537e:	4b28      	ldr	r3, [pc, #160]	; (8015420 <vTaskSwitchContext+0xa8>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d003      	beq.n	801538e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015386:	4b27      	ldr	r3, [pc, #156]	; (8015424 <vTaskSwitchContext+0xac>)
 8015388:	2201      	movs	r2, #1
 801538a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801538c:	e041      	b.n	8015412 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801538e:	4b25      	ldr	r3, [pc, #148]	; (8015424 <vTaskSwitchContext+0xac>)
 8015390:	2200      	movs	r2, #0
 8015392:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015394:	4b24      	ldr	r3, [pc, #144]	; (8015428 <vTaskSwitchContext+0xb0>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	60fb      	str	r3, [r7, #12]
 801539a:	e010      	b.n	80153be <vTaskSwitchContext+0x46>
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d10a      	bne.n	80153b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80153a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a6:	f383 8811 	msr	BASEPRI, r3
 80153aa:	f3bf 8f6f 	isb	sy
 80153ae:	f3bf 8f4f 	dsb	sy
 80153b2:	607b      	str	r3, [r7, #4]
}
 80153b4:	bf00      	nop
 80153b6:	e7fe      	b.n	80153b6 <vTaskSwitchContext+0x3e>
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	3b01      	subs	r3, #1
 80153bc:	60fb      	str	r3, [r7, #12]
 80153be:	491b      	ldr	r1, [pc, #108]	; (801542c <vTaskSwitchContext+0xb4>)
 80153c0:	68fa      	ldr	r2, [r7, #12]
 80153c2:	4613      	mov	r3, r2
 80153c4:	009b      	lsls	r3, r3, #2
 80153c6:	4413      	add	r3, r2
 80153c8:	009b      	lsls	r3, r3, #2
 80153ca:	440b      	add	r3, r1
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d0e4      	beq.n	801539c <vTaskSwitchContext+0x24>
 80153d2:	68fa      	ldr	r2, [r7, #12]
 80153d4:	4613      	mov	r3, r2
 80153d6:	009b      	lsls	r3, r3, #2
 80153d8:	4413      	add	r3, r2
 80153da:	009b      	lsls	r3, r3, #2
 80153dc:	4a13      	ldr	r2, [pc, #76]	; (801542c <vTaskSwitchContext+0xb4>)
 80153de:	4413      	add	r3, r2
 80153e0:	60bb      	str	r3, [r7, #8]
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	685a      	ldr	r2, [r3, #4]
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	605a      	str	r2, [r3, #4]
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	685a      	ldr	r2, [r3, #4]
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	3308      	adds	r3, #8
 80153f4:	429a      	cmp	r2, r3
 80153f6:	d104      	bne.n	8015402 <vTaskSwitchContext+0x8a>
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	685b      	ldr	r3, [r3, #4]
 80153fc:	685a      	ldr	r2, [r3, #4]
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	605a      	str	r2, [r3, #4]
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	685b      	ldr	r3, [r3, #4]
 8015406:	68db      	ldr	r3, [r3, #12]
 8015408:	4a09      	ldr	r2, [pc, #36]	; (8015430 <vTaskSwitchContext+0xb8>)
 801540a:	6013      	str	r3, [r2, #0]
 801540c:	4a06      	ldr	r2, [pc, #24]	; (8015428 <vTaskSwitchContext+0xb0>)
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	6013      	str	r3, [r2, #0]
}
 8015412:	bf00      	nop
 8015414:	3714      	adds	r7, #20
 8015416:	46bd      	mov	sp, r7
 8015418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541c:	4770      	bx	lr
 801541e:	bf00      	nop
 8015420:	24001d28 	.word	0x24001d28
 8015424:	24001d14 	.word	0x24001d14
 8015428:	24001d08 	.word	0x24001d08
 801542c:	24001830 	.word	0x24001830
 8015430:	2400182c 	.word	0x2400182c

08015434 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b084      	sub	sp, #16
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d10a      	bne.n	801545a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015448:	f383 8811 	msr	BASEPRI, r3
 801544c:	f3bf 8f6f 	isb	sy
 8015450:	f3bf 8f4f 	dsb	sy
 8015454:	60fb      	str	r3, [r7, #12]
}
 8015456:	bf00      	nop
 8015458:	e7fe      	b.n	8015458 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801545a:	4b07      	ldr	r3, [pc, #28]	; (8015478 <vTaskPlaceOnEventList+0x44>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	3318      	adds	r3, #24
 8015460:	4619      	mov	r1, r3
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	f7fe fcab 	bl	8013dbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015468:	2101      	movs	r1, #1
 801546a:	6838      	ldr	r0, [r7, #0]
 801546c:	f000 fb32 	bl	8015ad4 <prvAddCurrentTaskToDelayedList>
}
 8015470:	bf00      	nop
 8015472:	3710      	adds	r7, #16
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}
 8015478:	2400182c 	.word	0x2400182c

0801547c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b086      	sub	sp, #24
 8015480:	af00      	add	r7, sp, #0
 8015482:	60f8      	str	r0, [r7, #12]
 8015484:	60b9      	str	r1, [r7, #8]
 8015486:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d10a      	bne.n	80154a4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015492:	f383 8811 	msr	BASEPRI, r3
 8015496:	f3bf 8f6f 	isb	sy
 801549a:	f3bf 8f4f 	dsb	sy
 801549e:	617b      	str	r3, [r7, #20]
}
 80154a0:	bf00      	nop
 80154a2:	e7fe      	b.n	80154a2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80154a4:	4b11      	ldr	r3, [pc, #68]	; (80154ec <vTaskPlaceOnUnorderedEventList+0x70>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d10a      	bne.n	80154c2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80154ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b0:	f383 8811 	msr	BASEPRI, r3
 80154b4:	f3bf 8f6f 	isb	sy
 80154b8:	f3bf 8f4f 	dsb	sy
 80154bc:	613b      	str	r3, [r7, #16]
}
 80154be:	bf00      	nop
 80154c0:	e7fe      	b.n	80154c0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80154c2:	4b0b      	ldr	r3, [pc, #44]	; (80154f0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	68ba      	ldr	r2, [r7, #8]
 80154c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80154cc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80154ce:	4b08      	ldr	r3, [pc, #32]	; (80154f0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	3318      	adds	r3, #24
 80154d4:	4619      	mov	r1, r3
 80154d6:	68f8      	ldr	r0, [r7, #12]
 80154d8:	f7fe fc4d 	bl	8013d76 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80154dc:	2101      	movs	r1, #1
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f000 faf8 	bl	8015ad4 <prvAddCurrentTaskToDelayedList>
}
 80154e4:	bf00      	nop
 80154e6:	3718      	adds	r7, #24
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	24001d28 	.word	0x24001d28
 80154f0:	2400182c 	.word	0x2400182c

080154f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b086      	sub	sp, #24
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d10a      	bne.n	801551c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8015506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801550a:	f383 8811 	msr	BASEPRI, r3
 801550e:	f3bf 8f6f 	isb	sy
 8015512:	f3bf 8f4f 	dsb	sy
 8015516:	617b      	str	r3, [r7, #20]
}
 8015518:	bf00      	nop
 801551a:	e7fe      	b.n	801551a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801551c:	4b0a      	ldr	r3, [pc, #40]	; (8015548 <vTaskPlaceOnEventListRestricted+0x54>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	3318      	adds	r3, #24
 8015522:	4619      	mov	r1, r3
 8015524:	68f8      	ldr	r0, [r7, #12]
 8015526:	f7fe fc26 	bl	8013d76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d002      	beq.n	8015536 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8015530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015534:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015536:	6879      	ldr	r1, [r7, #4]
 8015538:	68b8      	ldr	r0, [r7, #8]
 801553a:	f000 facb 	bl	8015ad4 <prvAddCurrentTaskToDelayedList>
	}
 801553e:	bf00      	nop
 8015540:	3718      	adds	r7, #24
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}
 8015546:	bf00      	nop
 8015548:	2400182c 	.word	0x2400182c

0801554c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b086      	sub	sp, #24
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	68db      	ldr	r3, [r3, #12]
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d10a      	bne.n	8015578 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015566:	f383 8811 	msr	BASEPRI, r3
 801556a:	f3bf 8f6f 	isb	sy
 801556e:	f3bf 8f4f 	dsb	sy
 8015572:	60fb      	str	r3, [r7, #12]
}
 8015574:	bf00      	nop
 8015576:	e7fe      	b.n	8015576 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	3318      	adds	r3, #24
 801557c:	4618      	mov	r0, r3
 801557e:	f7fe fc57 	bl	8013e30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015582:	4b1e      	ldr	r3, [pc, #120]	; (80155fc <xTaskRemoveFromEventList+0xb0>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d11d      	bne.n	80155c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	3304      	adds	r3, #4
 801558e:	4618      	mov	r0, r3
 8015590:	f7fe fc4e 	bl	8013e30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015598:	4b19      	ldr	r3, [pc, #100]	; (8015600 <xTaskRemoveFromEventList+0xb4>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	429a      	cmp	r2, r3
 801559e:	d903      	bls.n	80155a8 <xTaskRemoveFromEventList+0x5c>
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155a4:	4a16      	ldr	r2, [pc, #88]	; (8015600 <xTaskRemoveFromEventList+0xb4>)
 80155a6:	6013      	str	r3, [r2, #0]
 80155a8:	693b      	ldr	r3, [r7, #16]
 80155aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155ac:	4613      	mov	r3, r2
 80155ae:	009b      	lsls	r3, r3, #2
 80155b0:	4413      	add	r3, r2
 80155b2:	009b      	lsls	r3, r3, #2
 80155b4:	4a13      	ldr	r2, [pc, #76]	; (8015604 <xTaskRemoveFromEventList+0xb8>)
 80155b6:	441a      	add	r2, r3
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	3304      	adds	r3, #4
 80155bc:	4619      	mov	r1, r3
 80155be:	4610      	mov	r0, r2
 80155c0:	f7fe fbd9 	bl	8013d76 <vListInsertEnd>
 80155c4:	e005      	b.n	80155d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80155c6:	693b      	ldr	r3, [r7, #16]
 80155c8:	3318      	adds	r3, #24
 80155ca:	4619      	mov	r1, r3
 80155cc:	480e      	ldr	r0, [pc, #56]	; (8015608 <xTaskRemoveFromEventList+0xbc>)
 80155ce:	f7fe fbd2 	bl	8013d76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155d6:	4b0d      	ldr	r3, [pc, #52]	; (801560c <xTaskRemoveFromEventList+0xc0>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155dc:	429a      	cmp	r2, r3
 80155de:	d905      	bls.n	80155ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80155e0:	2301      	movs	r3, #1
 80155e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80155e4:	4b0a      	ldr	r3, [pc, #40]	; (8015610 <xTaskRemoveFromEventList+0xc4>)
 80155e6:	2201      	movs	r2, #1
 80155e8:	601a      	str	r2, [r3, #0]
 80155ea:	e001      	b.n	80155f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80155ec:	2300      	movs	r3, #0
 80155ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80155f0:	697b      	ldr	r3, [r7, #20]
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3718      	adds	r7, #24
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}
 80155fa:	bf00      	nop
 80155fc:	24001d28 	.word	0x24001d28
 8015600:	24001d08 	.word	0x24001d08
 8015604:	24001830 	.word	0x24001830
 8015608:	24001cc0 	.word	0x24001cc0
 801560c:	2400182c 	.word	0x2400182c
 8015610:	24001d14 	.word	0x24001d14

08015614 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b086      	sub	sp, #24
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
 801561c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801561e:	4b29      	ldr	r3, [pc, #164]	; (80156c4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d10a      	bne.n	801563c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8015626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801562a:	f383 8811 	msr	BASEPRI, r3
 801562e:	f3bf 8f6f 	isb	sy
 8015632:	f3bf 8f4f 	dsb	sy
 8015636:	613b      	str	r3, [r7, #16]
}
 8015638:	bf00      	nop
 801563a:	e7fe      	b.n	801563a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	68db      	ldr	r3, [r3, #12]
 801564a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d10a      	bne.n	8015668 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8015652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015656:	f383 8811 	msr	BASEPRI, r3
 801565a:	f3bf 8f6f 	isb	sy
 801565e:	f3bf 8f4f 	dsb	sy
 8015662:	60fb      	str	r3, [r7, #12]
}
 8015664:	bf00      	nop
 8015666:	e7fe      	b.n	8015666 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8015668:	6878      	ldr	r0, [r7, #4]
 801566a:	f7fe fbe1 	bl	8013e30 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	3304      	adds	r3, #4
 8015672:	4618      	mov	r0, r3
 8015674:	f7fe fbdc 	bl	8013e30 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015678:	697b      	ldr	r3, [r7, #20]
 801567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801567c:	4b12      	ldr	r3, [pc, #72]	; (80156c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	429a      	cmp	r2, r3
 8015682:	d903      	bls.n	801568c <vTaskRemoveFromUnorderedEventList+0x78>
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015688:	4a0f      	ldr	r2, [pc, #60]	; (80156c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801568a:	6013      	str	r3, [r2, #0]
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015690:	4613      	mov	r3, r2
 8015692:	009b      	lsls	r3, r3, #2
 8015694:	4413      	add	r3, r2
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	4a0c      	ldr	r2, [pc, #48]	; (80156cc <vTaskRemoveFromUnorderedEventList+0xb8>)
 801569a:	441a      	add	r2, r3
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	3304      	adds	r3, #4
 80156a0:	4619      	mov	r1, r3
 80156a2:	4610      	mov	r0, r2
 80156a4:	f7fe fb67 	bl	8013d76 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80156a8:	697b      	ldr	r3, [r7, #20]
 80156aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156ac:	4b08      	ldr	r3, [pc, #32]	; (80156d0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d902      	bls.n	80156bc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80156b6:	4b07      	ldr	r3, [pc, #28]	; (80156d4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80156b8:	2201      	movs	r2, #1
 80156ba:	601a      	str	r2, [r3, #0]
	}
}
 80156bc:	bf00      	nop
 80156be:	3718      	adds	r7, #24
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	24001d28 	.word	0x24001d28
 80156c8:	24001d08 	.word	0x24001d08
 80156cc:	24001830 	.word	0x24001830
 80156d0:	2400182c 	.word	0x2400182c
 80156d4:	24001d14 	.word	0x24001d14

080156d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80156e0:	4b06      	ldr	r3, [pc, #24]	; (80156fc <vTaskInternalSetTimeOutState+0x24>)
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80156e8:	4b05      	ldr	r3, [pc, #20]	; (8015700 <vTaskInternalSetTimeOutState+0x28>)
 80156ea:	681a      	ldr	r2, [r3, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	605a      	str	r2, [r3, #4]
}
 80156f0:	bf00      	nop
 80156f2:	370c      	adds	r7, #12
 80156f4:	46bd      	mov	sp, r7
 80156f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fa:	4770      	bx	lr
 80156fc:	24001d18 	.word	0x24001d18
 8015700:	24001d04 	.word	0x24001d04

08015704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b088      	sub	sp, #32
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
 801570c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d10a      	bne.n	801572a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015718:	f383 8811 	msr	BASEPRI, r3
 801571c:	f3bf 8f6f 	isb	sy
 8015720:	f3bf 8f4f 	dsb	sy
 8015724:	613b      	str	r3, [r7, #16]
}
 8015726:	bf00      	nop
 8015728:	e7fe      	b.n	8015728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d10a      	bne.n	8015746 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015734:	f383 8811 	msr	BASEPRI, r3
 8015738:	f3bf 8f6f 	isb	sy
 801573c:	f3bf 8f4f 	dsb	sy
 8015740:	60fb      	str	r3, [r7, #12]
}
 8015742:	bf00      	nop
 8015744:	e7fe      	b.n	8015744 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015746:	f000 feb5 	bl	80164b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801574a:	4b1d      	ldr	r3, [pc, #116]	; (80157c0 <xTaskCheckForTimeOut+0xbc>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	685b      	ldr	r3, [r3, #4]
 8015754:	69ba      	ldr	r2, [r7, #24]
 8015756:	1ad3      	subs	r3, r2, r3
 8015758:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015762:	d102      	bne.n	801576a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015764:	2300      	movs	r3, #0
 8015766:	61fb      	str	r3, [r7, #28]
 8015768:	e023      	b.n	80157b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	681a      	ldr	r2, [r3, #0]
 801576e:	4b15      	ldr	r3, [pc, #84]	; (80157c4 <xTaskCheckForTimeOut+0xc0>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	429a      	cmp	r2, r3
 8015774:	d007      	beq.n	8015786 <xTaskCheckForTimeOut+0x82>
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	69ba      	ldr	r2, [r7, #24]
 801577c:	429a      	cmp	r2, r3
 801577e:	d302      	bcc.n	8015786 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015780:	2301      	movs	r3, #1
 8015782:	61fb      	str	r3, [r7, #28]
 8015784:	e015      	b.n	80157b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	697a      	ldr	r2, [r7, #20]
 801578c:	429a      	cmp	r2, r3
 801578e:	d20b      	bcs.n	80157a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	681a      	ldr	r2, [r3, #0]
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	1ad2      	subs	r2, r2, r3
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801579c:	6878      	ldr	r0, [r7, #4]
 801579e:	f7ff ff9b 	bl	80156d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80157a2:	2300      	movs	r3, #0
 80157a4:	61fb      	str	r3, [r7, #28]
 80157a6:	e004      	b.n	80157b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80157a8:	683b      	ldr	r3, [r7, #0]
 80157aa:	2200      	movs	r2, #0
 80157ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80157ae:	2301      	movs	r3, #1
 80157b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80157b2:	f000 feaf 	bl	8016514 <vPortExitCritical>

	return xReturn;
 80157b6:	69fb      	ldr	r3, [r7, #28]
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3720      	adds	r7, #32
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	24001d04 	.word	0x24001d04
 80157c4:	24001d18 	.word	0x24001d18

080157c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80157c8:	b480      	push	{r7}
 80157ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80157cc:	4b03      	ldr	r3, [pc, #12]	; (80157dc <vTaskMissedYield+0x14>)
 80157ce:	2201      	movs	r2, #1
 80157d0:	601a      	str	r2, [r3, #0]
}
 80157d2:	bf00      	nop
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr
 80157dc:	24001d14 	.word	0x24001d14

080157e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80157e8:	f000 f852 	bl	8015890 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80157ec:	4b06      	ldr	r3, [pc, #24]	; (8015808 <prvIdleTask+0x28>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d9f9      	bls.n	80157e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80157f4:	4b05      	ldr	r3, [pc, #20]	; (801580c <prvIdleTask+0x2c>)
 80157f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157fa:	601a      	str	r2, [r3, #0]
 80157fc:	f3bf 8f4f 	dsb	sy
 8015800:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015804:	e7f0      	b.n	80157e8 <prvIdleTask+0x8>
 8015806:	bf00      	nop
 8015808:	24001830 	.word	0x24001830
 801580c:	e000ed04 	.word	0xe000ed04

08015810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015816:	2300      	movs	r3, #0
 8015818:	607b      	str	r3, [r7, #4]
 801581a:	e00c      	b.n	8015836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	4613      	mov	r3, r2
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	4413      	add	r3, r2
 8015824:	009b      	lsls	r3, r3, #2
 8015826:	4a12      	ldr	r2, [pc, #72]	; (8015870 <prvInitialiseTaskLists+0x60>)
 8015828:	4413      	add	r3, r2
 801582a:	4618      	mov	r0, r3
 801582c:	f7fe fa76 	bl	8013d1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	3301      	adds	r3, #1
 8015834:	607b      	str	r3, [r7, #4]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2b37      	cmp	r3, #55	; 0x37
 801583a:	d9ef      	bls.n	801581c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801583c:	480d      	ldr	r0, [pc, #52]	; (8015874 <prvInitialiseTaskLists+0x64>)
 801583e:	f7fe fa6d 	bl	8013d1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015842:	480d      	ldr	r0, [pc, #52]	; (8015878 <prvInitialiseTaskLists+0x68>)
 8015844:	f7fe fa6a 	bl	8013d1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015848:	480c      	ldr	r0, [pc, #48]	; (801587c <prvInitialiseTaskLists+0x6c>)
 801584a:	f7fe fa67 	bl	8013d1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801584e:	480c      	ldr	r0, [pc, #48]	; (8015880 <prvInitialiseTaskLists+0x70>)
 8015850:	f7fe fa64 	bl	8013d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015854:	480b      	ldr	r0, [pc, #44]	; (8015884 <prvInitialiseTaskLists+0x74>)
 8015856:	f7fe fa61 	bl	8013d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801585a:	4b0b      	ldr	r3, [pc, #44]	; (8015888 <prvInitialiseTaskLists+0x78>)
 801585c:	4a05      	ldr	r2, [pc, #20]	; (8015874 <prvInitialiseTaskLists+0x64>)
 801585e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015860:	4b0a      	ldr	r3, [pc, #40]	; (801588c <prvInitialiseTaskLists+0x7c>)
 8015862:	4a05      	ldr	r2, [pc, #20]	; (8015878 <prvInitialiseTaskLists+0x68>)
 8015864:	601a      	str	r2, [r3, #0]
}
 8015866:	bf00      	nop
 8015868:	3708      	adds	r7, #8
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}
 801586e:	bf00      	nop
 8015870:	24001830 	.word	0x24001830
 8015874:	24001c90 	.word	0x24001c90
 8015878:	24001ca4 	.word	0x24001ca4
 801587c:	24001cc0 	.word	0x24001cc0
 8015880:	24001cd4 	.word	0x24001cd4
 8015884:	24001cec 	.word	0x24001cec
 8015888:	24001cb8 	.word	0x24001cb8
 801588c:	24001cbc 	.word	0x24001cbc

08015890 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b082      	sub	sp, #8
 8015894:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015896:	e019      	b.n	80158cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015898:	f000 fe0c 	bl	80164b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801589c:	4b10      	ldr	r3, [pc, #64]	; (80158e0 <prvCheckTasksWaitingTermination+0x50>)
 801589e:	68db      	ldr	r3, [r3, #12]
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	3304      	adds	r3, #4
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7fe fac1 	bl	8013e30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80158ae:	4b0d      	ldr	r3, [pc, #52]	; (80158e4 <prvCheckTasksWaitingTermination+0x54>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	3b01      	subs	r3, #1
 80158b4:	4a0b      	ldr	r2, [pc, #44]	; (80158e4 <prvCheckTasksWaitingTermination+0x54>)
 80158b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80158b8:	4b0b      	ldr	r3, [pc, #44]	; (80158e8 <prvCheckTasksWaitingTermination+0x58>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	3b01      	subs	r3, #1
 80158be:	4a0a      	ldr	r2, [pc, #40]	; (80158e8 <prvCheckTasksWaitingTermination+0x58>)
 80158c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80158c2:	f000 fe27 	bl	8016514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f000 f810 	bl	80158ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80158cc:	4b06      	ldr	r3, [pc, #24]	; (80158e8 <prvCheckTasksWaitingTermination+0x58>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1e1      	bne.n	8015898 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80158d4:	bf00      	nop
 80158d6:	bf00      	nop
 80158d8:	3708      	adds	r7, #8
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}
 80158de:	bf00      	nop
 80158e0:	24001cd4 	.word	0x24001cd4
 80158e4:	24001d00 	.word	0x24001d00
 80158e8:	24001ce8 	.word	0x24001ce8

080158ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d108      	bne.n	8015910 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015902:	4618      	mov	r0, r3
 8015904:	f000 ffc4 	bl	8016890 <vPortFree>
				vPortFree( pxTCB );
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f000 ffc1 	bl	8016890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801590e:	e018      	b.n	8015942 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015916:	2b01      	cmp	r3, #1
 8015918:	d103      	bne.n	8015922 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f000 ffb8 	bl	8016890 <vPortFree>
	}
 8015920:	e00f      	b.n	8015942 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015928:	2b02      	cmp	r3, #2
 801592a:	d00a      	beq.n	8015942 <prvDeleteTCB+0x56>
	__asm volatile
 801592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015930:	f383 8811 	msr	BASEPRI, r3
 8015934:	f3bf 8f6f 	isb	sy
 8015938:	f3bf 8f4f 	dsb	sy
 801593c:	60fb      	str	r3, [r7, #12]
}
 801593e:	bf00      	nop
 8015940:	e7fe      	b.n	8015940 <prvDeleteTCB+0x54>
	}
 8015942:	bf00      	nop
 8015944:	3710      	adds	r7, #16
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
	...

0801594c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801594c:	b480      	push	{r7}
 801594e:	b083      	sub	sp, #12
 8015950:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015952:	4b0c      	ldr	r3, [pc, #48]	; (8015984 <prvResetNextTaskUnblockTime+0x38>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d104      	bne.n	8015966 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801595c:	4b0a      	ldr	r3, [pc, #40]	; (8015988 <prvResetNextTaskUnblockTime+0x3c>)
 801595e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015962:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015964:	e008      	b.n	8015978 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015966:	4b07      	ldr	r3, [pc, #28]	; (8015984 <prvResetNextTaskUnblockTime+0x38>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	68db      	ldr	r3, [r3, #12]
 801596c:	68db      	ldr	r3, [r3, #12]
 801596e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	4a04      	ldr	r2, [pc, #16]	; (8015988 <prvResetNextTaskUnblockTime+0x3c>)
 8015976:	6013      	str	r3, [r2, #0]
}
 8015978:	bf00      	nop
 801597a:	370c      	adds	r7, #12
 801597c:	46bd      	mov	sp, r7
 801597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015982:	4770      	bx	lr
 8015984:	24001cb8 	.word	0x24001cb8
 8015988:	24001d20 	.word	0x24001d20

0801598c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801598c:	b480      	push	{r7}
 801598e:	b083      	sub	sp, #12
 8015990:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015992:	4b0b      	ldr	r3, [pc, #44]	; (80159c0 <xTaskGetSchedulerState+0x34>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d102      	bne.n	80159a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801599a:	2301      	movs	r3, #1
 801599c:	607b      	str	r3, [r7, #4]
 801599e:	e008      	b.n	80159b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80159a0:	4b08      	ldr	r3, [pc, #32]	; (80159c4 <xTaskGetSchedulerState+0x38>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d102      	bne.n	80159ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80159a8:	2302      	movs	r3, #2
 80159aa:	607b      	str	r3, [r7, #4]
 80159ac:	e001      	b.n	80159b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80159ae:	2300      	movs	r3, #0
 80159b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80159b2:	687b      	ldr	r3, [r7, #4]
	}
 80159b4:	4618      	mov	r0, r3
 80159b6:	370c      	adds	r7, #12
 80159b8:	46bd      	mov	sp, r7
 80159ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159be:	4770      	bx	lr
 80159c0:	24001d0c 	.word	0x24001d0c
 80159c4:	24001d28 	.word	0x24001d28

080159c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b086      	sub	sp, #24
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80159d4:	2300      	movs	r3, #0
 80159d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d056      	beq.n	8015a8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80159de:	4b2e      	ldr	r3, [pc, #184]	; (8015a98 <xTaskPriorityDisinherit+0xd0>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	693a      	ldr	r2, [r7, #16]
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d00a      	beq.n	80159fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80159e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ec:	f383 8811 	msr	BASEPRI, r3
 80159f0:	f3bf 8f6f 	isb	sy
 80159f4:	f3bf 8f4f 	dsb	sy
 80159f8:	60fb      	str	r3, [r7, #12]
}
 80159fa:	bf00      	nop
 80159fc:	e7fe      	b.n	80159fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80159fe:	693b      	ldr	r3, [r7, #16]
 8015a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d10a      	bne.n	8015a1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a0a:	f383 8811 	msr	BASEPRI, r3
 8015a0e:	f3bf 8f6f 	isb	sy
 8015a12:	f3bf 8f4f 	dsb	sy
 8015a16:	60bb      	str	r3, [r7, #8]
}
 8015a18:	bf00      	nop
 8015a1a:	e7fe      	b.n	8015a1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a20:	1e5a      	subs	r2, r3, #1
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015a26:	693b      	ldr	r3, [r7, #16]
 8015a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d02c      	beq.n	8015a8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015a32:	693b      	ldr	r3, [r7, #16]
 8015a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d128      	bne.n	8015a8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	3304      	adds	r3, #4
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7fe f9f6 	bl	8013e30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015a48:	693b      	ldr	r3, [r7, #16]
 8015a4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015a54:	693b      	ldr	r3, [r7, #16]
 8015a56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015a58:	693b      	ldr	r3, [r7, #16]
 8015a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a5c:	4b0f      	ldr	r3, [pc, #60]	; (8015a9c <xTaskPriorityDisinherit+0xd4>)
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d903      	bls.n	8015a6c <xTaskPriorityDisinherit+0xa4>
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a68:	4a0c      	ldr	r2, [pc, #48]	; (8015a9c <xTaskPriorityDisinherit+0xd4>)
 8015a6a:	6013      	str	r3, [r2, #0]
 8015a6c:	693b      	ldr	r3, [r7, #16]
 8015a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a70:	4613      	mov	r3, r2
 8015a72:	009b      	lsls	r3, r3, #2
 8015a74:	4413      	add	r3, r2
 8015a76:	009b      	lsls	r3, r3, #2
 8015a78:	4a09      	ldr	r2, [pc, #36]	; (8015aa0 <xTaskPriorityDisinherit+0xd8>)
 8015a7a:	441a      	add	r2, r3
 8015a7c:	693b      	ldr	r3, [r7, #16]
 8015a7e:	3304      	adds	r3, #4
 8015a80:	4619      	mov	r1, r3
 8015a82:	4610      	mov	r0, r2
 8015a84:	f7fe f977 	bl	8013d76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015a88:	2301      	movs	r3, #1
 8015a8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015a8c:	697b      	ldr	r3, [r7, #20]
	}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3718      	adds	r7, #24
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	2400182c 	.word	0x2400182c
 8015a9c:	24001d08 	.word	0x24001d08
 8015aa0:	24001830 	.word	0x24001830

08015aa4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b083      	sub	sp, #12
 8015aa8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015aaa:	4b09      	ldr	r3, [pc, #36]	; (8015ad0 <uxTaskResetEventItemValue+0x2c>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	699b      	ldr	r3, [r3, #24]
 8015ab0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ab2:	4b07      	ldr	r3, [pc, #28]	; (8015ad0 <uxTaskResetEventItemValue+0x2c>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ab8:	4b05      	ldr	r3, [pc, #20]	; (8015ad0 <uxTaskResetEventItemValue+0x2c>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015ac0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015ac2:	687b      	ldr	r3, [r7, #4]
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	370c      	adds	r7, #12
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ace:	4770      	bx	lr
 8015ad0:	2400182c 	.word	0x2400182c

08015ad4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
 8015adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015ade:	4b21      	ldr	r3, [pc, #132]	; (8015b64 <prvAddCurrentTaskToDelayedList+0x90>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ae4:	4b20      	ldr	r3, [pc, #128]	; (8015b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	3304      	adds	r3, #4
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7fe f9a0 	bl	8013e30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015af6:	d10a      	bne.n	8015b0e <prvAddCurrentTaskToDelayedList+0x3a>
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d007      	beq.n	8015b0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015afe:	4b1a      	ldr	r3, [pc, #104]	; (8015b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	3304      	adds	r3, #4
 8015b04:	4619      	mov	r1, r3
 8015b06:	4819      	ldr	r0, [pc, #100]	; (8015b6c <prvAddCurrentTaskToDelayedList+0x98>)
 8015b08:	f7fe f935 	bl	8013d76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015b0c:	e026      	b.n	8015b5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015b0e:	68fa      	ldr	r2, [r7, #12]
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	4413      	add	r3, r2
 8015b14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015b16:	4b14      	ldr	r3, [pc, #80]	; (8015b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	68ba      	ldr	r2, [r7, #8]
 8015b1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015b1e:	68ba      	ldr	r2, [r7, #8]
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	429a      	cmp	r2, r3
 8015b24:	d209      	bcs.n	8015b3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b26:	4b12      	ldr	r3, [pc, #72]	; (8015b70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	4b0f      	ldr	r3, [pc, #60]	; (8015b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	3304      	adds	r3, #4
 8015b30:	4619      	mov	r1, r3
 8015b32:	4610      	mov	r0, r2
 8015b34:	f7fe f943 	bl	8013dbe <vListInsert>
}
 8015b38:	e010      	b.n	8015b5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b3a:	4b0e      	ldr	r3, [pc, #56]	; (8015b74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015b3c:	681a      	ldr	r2, [r3, #0]
 8015b3e:	4b0a      	ldr	r3, [pc, #40]	; (8015b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	3304      	adds	r3, #4
 8015b44:	4619      	mov	r1, r3
 8015b46:	4610      	mov	r0, r2
 8015b48:	f7fe f939 	bl	8013dbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015b4c:	4b0a      	ldr	r3, [pc, #40]	; (8015b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	68ba      	ldr	r2, [r7, #8]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d202      	bcs.n	8015b5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015b56:	4a08      	ldr	r2, [pc, #32]	; (8015b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	6013      	str	r3, [r2, #0]
}
 8015b5c:	bf00      	nop
 8015b5e:	3710      	adds	r7, #16
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	24001d04 	.word	0x24001d04
 8015b68:	2400182c 	.word	0x2400182c
 8015b6c:	24001cec 	.word	0x24001cec
 8015b70:	24001cbc 	.word	0x24001cbc
 8015b74:	24001cb8 	.word	0x24001cb8
 8015b78:	24001d20 	.word	0x24001d20

08015b7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b08a      	sub	sp, #40	; 0x28
 8015b80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015b82:	2300      	movs	r3, #0
 8015b84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015b86:	f000 fb07 	bl	8016198 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015b8a:	4b1c      	ldr	r3, [pc, #112]	; (8015bfc <xTimerCreateTimerTask+0x80>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d021      	beq.n	8015bd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015b92:	2300      	movs	r3, #0
 8015b94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015b96:	2300      	movs	r3, #0
 8015b98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015b9a:	1d3a      	adds	r2, r7, #4
 8015b9c:	f107 0108 	add.w	r1, r7, #8
 8015ba0:	f107 030c 	add.w	r3, r7, #12
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7fd fe33 	bl	8013810 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015baa:	6879      	ldr	r1, [r7, #4]
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	68fa      	ldr	r2, [r7, #12]
 8015bb0:	9202      	str	r2, [sp, #8]
 8015bb2:	9301      	str	r3, [sp, #4]
 8015bb4:	2302      	movs	r3, #2
 8015bb6:	9300      	str	r3, [sp, #0]
 8015bb8:	2300      	movs	r3, #0
 8015bba:	460a      	mov	r2, r1
 8015bbc:	4910      	ldr	r1, [pc, #64]	; (8015c00 <xTimerCreateTimerTask+0x84>)
 8015bbe:	4811      	ldr	r0, [pc, #68]	; (8015c04 <xTimerCreateTimerTask+0x88>)
 8015bc0:	f7fe ff06 	bl	80149d0 <xTaskCreateStatic>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	4a10      	ldr	r2, [pc, #64]	; (8015c08 <xTimerCreateTimerTask+0x8c>)
 8015bc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015bca:	4b0f      	ldr	r3, [pc, #60]	; (8015c08 <xTimerCreateTimerTask+0x8c>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d001      	beq.n	8015bd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d10a      	bne.n	8015bf2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015be0:	f383 8811 	msr	BASEPRI, r3
 8015be4:	f3bf 8f6f 	isb	sy
 8015be8:	f3bf 8f4f 	dsb	sy
 8015bec:	613b      	str	r3, [r7, #16]
}
 8015bee:	bf00      	nop
 8015bf0:	e7fe      	b.n	8015bf0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015bf2:	697b      	ldr	r3, [r7, #20]
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3718      	adds	r7, #24
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	24001d5c 	.word	0x24001d5c
 8015c00:	080177e0 	.word	0x080177e0
 8015c04:	08015d41 	.word	0x08015d41
 8015c08:	24001d60 	.word	0x24001d60

08015c0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b08a      	sub	sp, #40	; 0x28
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	60f8      	str	r0, [r7, #12]
 8015c14:	60b9      	str	r1, [r7, #8]
 8015c16:	607a      	str	r2, [r7, #4]
 8015c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d10a      	bne.n	8015c3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8015c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c28:	f383 8811 	msr	BASEPRI, r3
 8015c2c:	f3bf 8f6f 	isb	sy
 8015c30:	f3bf 8f4f 	dsb	sy
 8015c34:	623b      	str	r3, [r7, #32]
}
 8015c36:	bf00      	nop
 8015c38:	e7fe      	b.n	8015c38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015c3a:	4b1a      	ldr	r3, [pc, #104]	; (8015ca4 <xTimerGenericCommand+0x98>)
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d02a      	beq.n	8015c98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	2b05      	cmp	r3, #5
 8015c52:	dc18      	bgt.n	8015c86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015c54:	f7ff fe9a 	bl	801598c <xTaskGetSchedulerState>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	2b02      	cmp	r3, #2
 8015c5c:	d109      	bne.n	8015c72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015c5e:	4b11      	ldr	r3, [pc, #68]	; (8015ca4 <xTimerGenericCommand+0x98>)
 8015c60:	6818      	ldr	r0, [r3, #0]
 8015c62:	f107 0110 	add.w	r1, r7, #16
 8015c66:	2300      	movs	r3, #0
 8015c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c6a:	f7fe fa49 	bl	8014100 <xQueueGenericSend>
 8015c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8015c70:	e012      	b.n	8015c98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015c72:	4b0c      	ldr	r3, [pc, #48]	; (8015ca4 <xTimerGenericCommand+0x98>)
 8015c74:	6818      	ldr	r0, [r3, #0]
 8015c76:	f107 0110 	add.w	r1, r7, #16
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	f7fe fa3f 	bl	8014100 <xQueueGenericSend>
 8015c82:	6278      	str	r0, [r7, #36]	; 0x24
 8015c84:	e008      	b.n	8015c98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015c86:	4b07      	ldr	r3, [pc, #28]	; (8015ca4 <xTimerGenericCommand+0x98>)
 8015c88:	6818      	ldr	r0, [r3, #0]
 8015c8a:	f107 0110 	add.w	r1, r7, #16
 8015c8e:	2300      	movs	r3, #0
 8015c90:	683a      	ldr	r2, [r7, #0]
 8015c92:	f7fe fb33 	bl	80142fc <xQueueGenericSendFromISR>
 8015c96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3728      	adds	r7, #40	; 0x28
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	24001d5c 	.word	0x24001d5c

08015ca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b088      	sub	sp, #32
 8015cac:	af02      	add	r7, sp, #8
 8015cae:	6078      	str	r0, [r7, #4]
 8015cb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015cb2:	4b22      	ldr	r3, [pc, #136]	; (8015d3c <prvProcessExpiredTimer+0x94>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	68db      	ldr	r3, [r3, #12]
 8015cb8:	68db      	ldr	r3, [r3, #12]
 8015cba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015cbc:	697b      	ldr	r3, [r7, #20]
 8015cbe:	3304      	adds	r3, #4
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7fe f8b5 	bl	8013e30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015cc6:	697b      	ldr	r3, [r7, #20]
 8015cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ccc:	f003 0304 	and.w	r3, r3, #4
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d022      	beq.n	8015d1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015cd4:	697b      	ldr	r3, [r7, #20]
 8015cd6:	699a      	ldr	r2, [r3, #24]
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	18d1      	adds	r1, r2, r3
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	683a      	ldr	r2, [r7, #0]
 8015ce0:	6978      	ldr	r0, [r7, #20]
 8015ce2:	f000 f8d1 	bl	8015e88 <prvInsertTimerInActiveList>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d01f      	beq.n	8015d2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015cec:	2300      	movs	r3, #0
 8015cee:	9300      	str	r3, [sp, #0]
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	687a      	ldr	r2, [r7, #4]
 8015cf4:	2100      	movs	r1, #0
 8015cf6:	6978      	ldr	r0, [r7, #20]
 8015cf8:	f7ff ff88 	bl	8015c0c <xTimerGenericCommand>
 8015cfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d113      	bne.n	8015d2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d08:	f383 8811 	msr	BASEPRI, r3
 8015d0c:	f3bf 8f6f 	isb	sy
 8015d10:	f3bf 8f4f 	dsb	sy
 8015d14:	60fb      	str	r3, [r7, #12]
}
 8015d16:	bf00      	nop
 8015d18:	e7fe      	b.n	8015d18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015d1a:	697b      	ldr	r3, [r7, #20]
 8015d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d20:	f023 0301 	bic.w	r3, r3, #1
 8015d24:	b2da      	uxtb	r2, r3
 8015d26:	697b      	ldr	r3, [r7, #20]
 8015d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	6a1b      	ldr	r3, [r3, #32]
 8015d30:	6978      	ldr	r0, [r7, #20]
 8015d32:	4798      	blx	r3
}
 8015d34:	bf00      	nop
 8015d36:	3718      	adds	r7, #24
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	24001d54 	.word	0x24001d54

08015d40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b084      	sub	sp, #16
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015d48:	f107 0308 	add.w	r3, r7, #8
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f000 f857 	bl	8015e00 <prvGetNextExpireTime>
 8015d52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	4619      	mov	r1, r3
 8015d58:	68f8      	ldr	r0, [r7, #12]
 8015d5a:	f000 f803 	bl	8015d64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015d5e:	f000 f8d5 	bl	8015f0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015d62:	e7f1      	b.n	8015d48 <prvTimerTask+0x8>

08015d64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b084      	sub	sp, #16
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015d6e:	f7ff f985 	bl	801507c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015d72:	f107 0308 	add.w	r3, r7, #8
 8015d76:	4618      	mov	r0, r3
 8015d78:	f000 f866 	bl	8015e48 <prvSampleTimeNow>
 8015d7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015d7e:	68bb      	ldr	r3, [r7, #8]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d130      	bne.n	8015de6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d10a      	bne.n	8015da0 <prvProcessTimerOrBlockTask+0x3c>
 8015d8a:	687a      	ldr	r2, [r7, #4]
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d806      	bhi.n	8015da0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015d92:	f7ff f981 	bl	8015098 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015d96:	68f9      	ldr	r1, [r7, #12]
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f7ff ff85 	bl	8015ca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015d9e:	e024      	b.n	8015dea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d008      	beq.n	8015db8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015da6:	4b13      	ldr	r3, [pc, #76]	; (8015df4 <prvProcessTimerOrBlockTask+0x90>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d101      	bne.n	8015db4 <prvProcessTimerOrBlockTask+0x50>
 8015db0:	2301      	movs	r3, #1
 8015db2:	e000      	b.n	8015db6 <prvProcessTimerOrBlockTask+0x52>
 8015db4:	2300      	movs	r3, #0
 8015db6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015db8:	4b0f      	ldr	r3, [pc, #60]	; (8015df8 <prvProcessTimerOrBlockTask+0x94>)
 8015dba:	6818      	ldr	r0, [r3, #0]
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	1ad3      	subs	r3, r2, r3
 8015dc2:	683a      	ldr	r2, [r7, #0]
 8015dc4:	4619      	mov	r1, r3
 8015dc6:	f7fe fdcf 	bl	8014968 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015dca:	f7ff f965 	bl	8015098 <xTaskResumeAll>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d10a      	bne.n	8015dea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015dd4:	4b09      	ldr	r3, [pc, #36]	; (8015dfc <prvProcessTimerOrBlockTask+0x98>)
 8015dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dda:	601a      	str	r2, [r3, #0]
 8015ddc:	f3bf 8f4f 	dsb	sy
 8015de0:	f3bf 8f6f 	isb	sy
}
 8015de4:	e001      	b.n	8015dea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015de6:	f7ff f957 	bl	8015098 <xTaskResumeAll>
}
 8015dea:	bf00      	nop
 8015dec:	3710      	adds	r7, #16
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd80      	pop	{r7, pc}
 8015df2:	bf00      	nop
 8015df4:	24001d58 	.word	0x24001d58
 8015df8:	24001d5c 	.word	0x24001d5c
 8015dfc:	e000ed04 	.word	0xe000ed04

08015e00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015e00:	b480      	push	{r7}
 8015e02:	b085      	sub	sp, #20
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015e08:	4b0e      	ldr	r3, [pc, #56]	; (8015e44 <prvGetNextExpireTime+0x44>)
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d101      	bne.n	8015e16 <prvGetNextExpireTime+0x16>
 8015e12:	2201      	movs	r2, #1
 8015e14:	e000      	b.n	8015e18 <prvGetNextExpireTime+0x18>
 8015e16:	2200      	movs	r2, #0
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d105      	bne.n	8015e30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015e24:	4b07      	ldr	r3, [pc, #28]	; (8015e44 <prvGetNextExpireTime+0x44>)
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	60fb      	str	r3, [r7, #12]
 8015e2e:	e001      	b.n	8015e34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015e30:	2300      	movs	r3, #0
 8015e32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015e34:	68fb      	ldr	r3, [r7, #12]
}
 8015e36:	4618      	mov	r0, r3
 8015e38:	3714      	adds	r7, #20
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e40:	4770      	bx	lr
 8015e42:	bf00      	nop
 8015e44:	24001d54 	.word	0x24001d54

08015e48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b084      	sub	sp, #16
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015e50:	f7ff f9c0 	bl	80151d4 <xTaskGetTickCount>
 8015e54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015e56:	4b0b      	ldr	r3, [pc, #44]	; (8015e84 <prvSampleTimeNow+0x3c>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	68fa      	ldr	r2, [r7, #12]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d205      	bcs.n	8015e6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015e60:	f000 f936 	bl	80160d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2201      	movs	r2, #1
 8015e68:	601a      	str	r2, [r3, #0]
 8015e6a:	e002      	b.n	8015e72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015e72:	4a04      	ldr	r2, [pc, #16]	; (8015e84 <prvSampleTimeNow+0x3c>)
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015e78:	68fb      	ldr	r3, [r7, #12]
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3710      	adds	r7, #16
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	24001d64 	.word	0x24001d64

08015e88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b086      	sub	sp, #24
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	60f8      	str	r0, [r7, #12]
 8015e90:	60b9      	str	r1, [r7, #8]
 8015e92:	607a      	str	r2, [r7, #4]
 8015e94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015e96:	2300      	movs	r3, #0
 8015e98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	68ba      	ldr	r2, [r7, #8]
 8015e9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	68fa      	ldr	r2, [r7, #12]
 8015ea4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015ea6:	68ba      	ldr	r2, [r7, #8]
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	d812      	bhi.n	8015ed4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015eae:	687a      	ldr	r2, [r7, #4]
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	1ad2      	subs	r2, r2, r3
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	699b      	ldr	r3, [r3, #24]
 8015eb8:	429a      	cmp	r2, r3
 8015eba:	d302      	bcc.n	8015ec2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	617b      	str	r3, [r7, #20]
 8015ec0:	e01b      	b.n	8015efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015ec2:	4b10      	ldr	r3, [pc, #64]	; (8015f04 <prvInsertTimerInActiveList+0x7c>)
 8015ec4:	681a      	ldr	r2, [r3, #0]
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	3304      	adds	r3, #4
 8015eca:	4619      	mov	r1, r3
 8015ecc:	4610      	mov	r0, r2
 8015ece:	f7fd ff76 	bl	8013dbe <vListInsert>
 8015ed2:	e012      	b.n	8015efa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015ed4:	687a      	ldr	r2, [r7, #4]
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d206      	bcs.n	8015eea <prvInsertTimerInActiveList+0x62>
 8015edc:	68ba      	ldr	r2, [r7, #8]
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	d302      	bcc.n	8015eea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	617b      	str	r3, [r7, #20]
 8015ee8:	e007      	b.n	8015efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015eea:	4b07      	ldr	r3, [pc, #28]	; (8015f08 <prvInsertTimerInActiveList+0x80>)
 8015eec:	681a      	ldr	r2, [r3, #0]
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	3304      	adds	r3, #4
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	4610      	mov	r0, r2
 8015ef6:	f7fd ff62 	bl	8013dbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015efa:	697b      	ldr	r3, [r7, #20]
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3718      	adds	r7, #24
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}
 8015f04:	24001d58 	.word	0x24001d58
 8015f08:	24001d54 	.word	0x24001d54

08015f0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b08e      	sub	sp, #56	; 0x38
 8015f10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015f12:	e0ca      	b.n	80160aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	da18      	bge.n	8015f4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015f1a:	1d3b      	adds	r3, r7, #4
 8015f1c:	3304      	adds	r3, #4
 8015f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d10a      	bne.n	8015f3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f2a:	f383 8811 	msr	BASEPRI, r3
 8015f2e:	f3bf 8f6f 	isb	sy
 8015f32:	f3bf 8f4f 	dsb	sy
 8015f36:	61fb      	str	r3, [r7, #28]
}
 8015f38:	bf00      	nop
 8015f3a:	e7fe      	b.n	8015f3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f42:	6850      	ldr	r0, [r2, #4]
 8015f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f46:	6892      	ldr	r2, [r2, #8]
 8015f48:	4611      	mov	r1, r2
 8015f4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	f2c0 80aa 	blt.w	80160a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f5a:	695b      	ldr	r3, [r3, #20]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d004      	beq.n	8015f6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f62:	3304      	adds	r3, #4
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7fd ff63 	bl	8013e30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015f6a:	463b      	mov	r3, r7
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7ff ff6b 	bl	8015e48 <prvSampleTimeNow>
 8015f72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2b09      	cmp	r3, #9
 8015f78:	f200 8097 	bhi.w	80160aa <prvProcessReceivedCommands+0x19e>
 8015f7c:	a201      	add	r2, pc, #4	; (adr r2, 8015f84 <prvProcessReceivedCommands+0x78>)
 8015f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f82:	bf00      	nop
 8015f84:	08015fad 	.word	0x08015fad
 8015f88:	08015fad 	.word	0x08015fad
 8015f8c:	08015fad 	.word	0x08015fad
 8015f90:	08016021 	.word	0x08016021
 8015f94:	08016035 	.word	0x08016035
 8015f98:	0801607f 	.word	0x0801607f
 8015f9c:	08015fad 	.word	0x08015fad
 8015fa0:	08015fad 	.word	0x08015fad
 8015fa4:	08016021 	.word	0x08016021
 8015fa8:	08016035 	.word	0x08016035
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fb2:	f043 0301 	orr.w	r3, r3, #1
 8015fb6:	b2da      	uxtb	r2, r3
 8015fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015fbe:	68ba      	ldr	r2, [r7, #8]
 8015fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc2:	699b      	ldr	r3, [r3, #24]
 8015fc4:	18d1      	adds	r1, r2, r3
 8015fc6:	68bb      	ldr	r3, [r7, #8]
 8015fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fcc:	f7ff ff5c 	bl	8015e88 <prvInsertTimerInActiveList>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d069      	beq.n	80160aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd8:	6a1b      	ldr	r3, [r3, #32]
 8015fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fe4:	f003 0304 	and.w	r3, r3, #4
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d05e      	beq.n	80160aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015fec:	68ba      	ldr	r2, [r7, #8]
 8015fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff0:	699b      	ldr	r3, [r3, #24]
 8015ff2:	441a      	add	r2, r3
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	9300      	str	r3, [sp, #0]
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	2100      	movs	r1, #0
 8015ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ffe:	f7ff fe05 	bl	8015c0c <xTimerGenericCommand>
 8016002:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016004:	6a3b      	ldr	r3, [r7, #32]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d14f      	bne.n	80160aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801600e:	f383 8811 	msr	BASEPRI, r3
 8016012:	f3bf 8f6f 	isb	sy
 8016016:	f3bf 8f4f 	dsb	sy
 801601a:	61bb      	str	r3, [r7, #24]
}
 801601c:	bf00      	nop
 801601e:	e7fe      	b.n	801601e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016026:	f023 0301 	bic.w	r3, r3, #1
 801602a:	b2da      	uxtb	r2, r3
 801602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8016032:	e03a      	b.n	80160aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801603a:	f043 0301 	orr.w	r3, r3, #1
 801603e:	b2da      	uxtb	r2, r3
 8016040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016046:	68ba      	ldr	r2, [r7, #8]
 8016048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604e:	699b      	ldr	r3, [r3, #24]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d10a      	bne.n	801606a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8016054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016058:	f383 8811 	msr	BASEPRI, r3
 801605c:	f3bf 8f6f 	isb	sy
 8016060:	f3bf 8f4f 	dsb	sy
 8016064:	617b      	str	r3, [r7, #20]
}
 8016066:	bf00      	nop
 8016068:	e7fe      	b.n	8016068 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801606c:	699a      	ldr	r2, [r3, #24]
 801606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016070:	18d1      	adds	r1, r2, r3
 8016072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016078:	f7ff ff06 	bl	8015e88 <prvInsertTimerInActiveList>
					break;
 801607c:	e015      	b.n	80160aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016084:	f003 0302 	and.w	r3, r3, #2
 8016088:	2b00      	cmp	r3, #0
 801608a:	d103      	bne.n	8016094 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801608c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801608e:	f000 fbff 	bl	8016890 <vPortFree>
 8016092:	e00a      	b.n	80160aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801609a:	f023 0301 	bic.w	r3, r3, #1
 801609e:	b2da      	uxtb	r2, r3
 80160a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80160a6:	e000      	b.n	80160aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80160a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80160aa:	4b08      	ldr	r3, [pc, #32]	; (80160cc <prvProcessReceivedCommands+0x1c0>)
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	1d39      	adds	r1, r7, #4
 80160b0:	2200      	movs	r2, #0
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7fe f9be 	bl	8014434 <xQueueReceive>
 80160b8:	4603      	mov	r3, r0
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	f47f af2a 	bne.w	8015f14 <prvProcessReceivedCommands+0x8>
	}
}
 80160c0:	bf00      	nop
 80160c2:	bf00      	nop
 80160c4:	3730      	adds	r7, #48	; 0x30
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	bf00      	nop
 80160cc:	24001d5c 	.word	0x24001d5c

080160d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b088      	sub	sp, #32
 80160d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80160d6:	e048      	b.n	801616a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80160d8:	4b2d      	ldr	r3, [pc, #180]	; (8016190 <prvSwitchTimerLists+0xc0>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	68db      	ldr	r3, [r3, #12]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80160e2:	4b2b      	ldr	r3, [pc, #172]	; (8016190 <prvSwitchTimerLists+0xc0>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	68db      	ldr	r3, [r3, #12]
 80160e8:	68db      	ldr	r3, [r3, #12]
 80160ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	3304      	adds	r3, #4
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7fd fe9d 	bl	8013e30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	6a1b      	ldr	r3, [r3, #32]
 80160fa:	68f8      	ldr	r0, [r7, #12]
 80160fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016104:	f003 0304 	and.w	r3, r3, #4
 8016108:	2b00      	cmp	r3, #0
 801610a:	d02e      	beq.n	801616a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	699b      	ldr	r3, [r3, #24]
 8016110:	693a      	ldr	r2, [r7, #16]
 8016112:	4413      	add	r3, r2
 8016114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016116:	68ba      	ldr	r2, [r7, #8]
 8016118:	693b      	ldr	r3, [r7, #16]
 801611a:	429a      	cmp	r2, r3
 801611c:	d90e      	bls.n	801613c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	68ba      	ldr	r2, [r7, #8]
 8016122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	68fa      	ldr	r2, [r7, #12]
 8016128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801612a:	4b19      	ldr	r3, [pc, #100]	; (8016190 <prvSwitchTimerLists+0xc0>)
 801612c:	681a      	ldr	r2, [r3, #0]
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	3304      	adds	r3, #4
 8016132:	4619      	mov	r1, r3
 8016134:	4610      	mov	r0, r2
 8016136:	f7fd fe42 	bl	8013dbe <vListInsert>
 801613a:	e016      	b.n	801616a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801613c:	2300      	movs	r3, #0
 801613e:	9300      	str	r3, [sp, #0]
 8016140:	2300      	movs	r3, #0
 8016142:	693a      	ldr	r2, [r7, #16]
 8016144:	2100      	movs	r1, #0
 8016146:	68f8      	ldr	r0, [r7, #12]
 8016148:	f7ff fd60 	bl	8015c0c <xTimerGenericCommand>
 801614c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d10a      	bne.n	801616a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8016154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016158:	f383 8811 	msr	BASEPRI, r3
 801615c:	f3bf 8f6f 	isb	sy
 8016160:	f3bf 8f4f 	dsb	sy
 8016164:	603b      	str	r3, [r7, #0]
}
 8016166:	bf00      	nop
 8016168:	e7fe      	b.n	8016168 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801616a:	4b09      	ldr	r3, [pc, #36]	; (8016190 <prvSwitchTimerLists+0xc0>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d1b1      	bne.n	80160d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016174:	4b06      	ldr	r3, [pc, #24]	; (8016190 <prvSwitchTimerLists+0xc0>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801617a:	4b06      	ldr	r3, [pc, #24]	; (8016194 <prvSwitchTimerLists+0xc4>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	4a04      	ldr	r2, [pc, #16]	; (8016190 <prvSwitchTimerLists+0xc0>)
 8016180:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016182:	4a04      	ldr	r2, [pc, #16]	; (8016194 <prvSwitchTimerLists+0xc4>)
 8016184:	697b      	ldr	r3, [r7, #20]
 8016186:	6013      	str	r3, [r2, #0]
}
 8016188:	bf00      	nop
 801618a:	3718      	adds	r7, #24
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}
 8016190:	24001d54 	.word	0x24001d54
 8016194:	24001d58 	.word	0x24001d58

08016198 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b082      	sub	sp, #8
 801619c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801619e:	f000 f989 	bl	80164b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80161a2:	4b15      	ldr	r3, [pc, #84]	; (80161f8 <prvCheckForValidListAndQueue+0x60>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d120      	bne.n	80161ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80161aa:	4814      	ldr	r0, [pc, #80]	; (80161fc <prvCheckForValidListAndQueue+0x64>)
 80161ac:	f7fd fdb6 	bl	8013d1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80161b0:	4813      	ldr	r0, [pc, #76]	; (8016200 <prvCheckForValidListAndQueue+0x68>)
 80161b2:	f7fd fdb3 	bl	8013d1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80161b6:	4b13      	ldr	r3, [pc, #76]	; (8016204 <prvCheckForValidListAndQueue+0x6c>)
 80161b8:	4a10      	ldr	r2, [pc, #64]	; (80161fc <prvCheckForValidListAndQueue+0x64>)
 80161ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80161bc:	4b12      	ldr	r3, [pc, #72]	; (8016208 <prvCheckForValidListAndQueue+0x70>)
 80161be:	4a10      	ldr	r2, [pc, #64]	; (8016200 <prvCheckForValidListAndQueue+0x68>)
 80161c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80161c2:	2300      	movs	r3, #0
 80161c4:	9300      	str	r3, [sp, #0]
 80161c6:	4b11      	ldr	r3, [pc, #68]	; (801620c <prvCheckForValidListAndQueue+0x74>)
 80161c8:	4a11      	ldr	r2, [pc, #68]	; (8016210 <prvCheckForValidListAndQueue+0x78>)
 80161ca:	2110      	movs	r1, #16
 80161cc:	200a      	movs	r0, #10
 80161ce:	f7fd fec1 	bl	8013f54 <xQueueGenericCreateStatic>
 80161d2:	4603      	mov	r3, r0
 80161d4:	4a08      	ldr	r2, [pc, #32]	; (80161f8 <prvCheckForValidListAndQueue+0x60>)
 80161d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80161d8:	4b07      	ldr	r3, [pc, #28]	; (80161f8 <prvCheckForValidListAndQueue+0x60>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d005      	beq.n	80161ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80161e0:	4b05      	ldr	r3, [pc, #20]	; (80161f8 <prvCheckForValidListAndQueue+0x60>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	490b      	ldr	r1, [pc, #44]	; (8016214 <prvCheckForValidListAndQueue+0x7c>)
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7fe fb94 	bl	8014914 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80161ec:	f000 f992 	bl	8016514 <vPortExitCritical>
}
 80161f0:	bf00      	nop
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	24001d5c 	.word	0x24001d5c
 80161fc:	24001d2c 	.word	0x24001d2c
 8016200:	24001d40 	.word	0x24001d40
 8016204:	24001d54 	.word	0x24001d54
 8016208:	24001d58 	.word	0x24001d58
 801620c:	24001e08 	.word	0x24001e08
 8016210:	24001d68 	.word	0x24001d68
 8016214:	080177e8 	.word	0x080177e8

08016218 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016218:	b580      	push	{r7, lr}
 801621a:	b08a      	sub	sp, #40	; 0x28
 801621c:	af00      	add	r7, sp, #0
 801621e:	60f8      	str	r0, [r7, #12]
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	607a      	str	r2, [r7, #4]
 8016224:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8016226:	f06f 0301 	mvn.w	r3, #1
 801622a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016238:	4b06      	ldr	r3, [pc, #24]	; (8016254 <xTimerPendFunctionCallFromISR+0x3c>)
 801623a:	6818      	ldr	r0, [r3, #0]
 801623c:	f107 0114 	add.w	r1, r7, #20
 8016240:	2300      	movs	r3, #0
 8016242:	683a      	ldr	r2, [r7, #0]
 8016244:	f7fe f85a 	bl	80142fc <xQueueGenericSendFromISR>
 8016248:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801624c:	4618      	mov	r0, r3
 801624e:	3728      	adds	r7, #40	; 0x28
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}
 8016254:	24001d5c 	.word	0x24001d5c

08016258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016258:	b480      	push	{r7}
 801625a:	b085      	sub	sp, #20
 801625c:	af00      	add	r7, sp, #0
 801625e:	60f8      	str	r0, [r7, #12]
 8016260:	60b9      	str	r1, [r7, #8]
 8016262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	3b04      	subs	r3, #4
 8016268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	3b04      	subs	r3, #4
 8016276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016278:	68bb      	ldr	r3, [r7, #8]
 801627a:	f023 0201 	bic.w	r2, r3, #1
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	3b04      	subs	r3, #4
 8016286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016288:	4a0c      	ldr	r2, [pc, #48]	; (80162bc <pxPortInitialiseStack+0x64>)
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	3b14      	subs	r3, #20
 8016292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016294:	687a      	ldr	r2, [r7, #4]
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	3b04      	subs	r3, #4
 801629e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	f06f 0202 	mvn.w	r2, #2
 80162a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	3b20      	subs	r3, #32
 80162ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80162ae:	68fb      	ldr	r3, [r7, #12]
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3714      	adds	r7, #20
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr
 80162bc:	080162c1 	.word	0x080162c1

080162c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80162c0:	b480      	push	{r7}
 80162c2:	b085      	sub	sp, #20
 80162c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80162ca:	4b12      	ldr	r3, [pc, #72]	; (8016314 <prvTaskExitError+0x54>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80162d2:	d00a      	beq.n	80162ea <prvTaskExitError+0x2a>
	__asm volatile
 80162d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d8:	f383 8811 	msr	BASEPRI, r3
 80162dc:	f3bf 8f6f 	isb	sy
 80162e0:	f3bf 8f4f 	dsb	sy
 80162e4:	60fb      	str	r3, [r7, #12]
}
 80162e6:	bf00      	nop
 80162e8:	e7fe      	b.n	80162e8 <prvTaskExitError+0x28>
	__asm volatile
 80162ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ee:	f383 8811 	msr	BASEPRI, r3
 80162f2:	f3bf 8f6f 	isb	sy
 80162f6:	f3bf 8f4f 	dsb	sy
 80162fa:	60bb      	str	r3, [r7, #8]
}
 80162fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80162fe:	bf00      	nop
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d0fc      	beq.n	8016300 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016306:	bf00      	nop
 8016308:	bf00      	nop
 801630a:	3714      	adds	r7, #20
 801630c:	46bd      	mov	sp, r7
 801630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016312:	4770      	bx	lr
 8016314:	240000a0 	.word	0x240000a0
	...

08016320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016320:	4b07      	ldr	r3, [pc, #28]	; (8016340 <pxCurrentTCBConst2>)
 8016322:	6819      	ldr	r1, [r3, #0]
 8016324:	6808      	ldr	r0, [r1, #0]
 8016326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801632a:	f380 8809 	msr	PSP, r0
 801632e:	f3bf 8f6f 	isb	sy
 8016332:	f04f 0000 	mov.w	r0, #0
 8016336:	f380 8811 	msr	BASEPRI, r0
 801633a:	4770      	bx	lr
 801633c:	f3af 8000 	nop.w

08016340 <pxCurrentTCBConst2>:
 8016340:	2400182c 	.word	0x2400182c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016344:	bf00      	nop
 8016346:	bf00      	nop

08016348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016348:	4808      	ldr	r0, [pc, #32]	; (801636c <prvPortStartFirstTask+0x24>)
 801634a:	6800      	ldr	r0, [r0, #0]
 801634c:	6800      	ldr	r0, [r0, #0]
 801634e:	f380 8808 	msr	MSP, r0
 8016352:	f04f 0000 	mov.w	r0, #0
 8016356:	f380 8814 	msr	CONTROL, r0
 801635a:	b662      	cpsie	i
 801635c:	b661      	cpsie	f
 801635e:	f3bf 8f4f 	dsb	sy
 8016362:	f3bf 8f6f 	isb	sy
 8016366:	df00      	svc	0
 8016368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801636a:	bf00      	nop
 801636c:	e000ed08 	.word	0xe000ed08

08016370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b086      	sub	sp, #24
 8016374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016376:	4b46      	ldr	r3, [pc, #280]	; (8016490 <xPortStartScheduler+0x120>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	4a46      	ldr	r2, [pc, #280]	; (8016494 <xPortStartScheduler+0x124>)
 801637c:	4293      	cmp	r3, r2
 801637e:	d10a      	bne.n	8016396 <xPortStartScheduler+0x26>
	__asm volatile
 8016380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016384:	f383 8811 	msr	BASEPRI, r3
 8016388:	f3bf 8f6f 	isb	sy
 801638c:	f3bf 8f4f 	dsb	sy
 8016390:	613b      	str	r3, [r7, #16]
}
 8016392:	bf00      	nop
 8016394:	e7fe      	b.n	8016394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016396:	4b3e      	ldr	r3, [pc, #248]	; (8016490 <xPortStartScheduler+0x120>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	4a3f      	ldr	r2, [pc, #252]	; (8016498 <xPortStartScheduler+0x128>)
 801639c:	4293      	cmp	r3, r2
 801639e:	d10a      	bne.n	80163b6 <xPortStartScheduler+0x46>
	__asm volatile
 80163a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a4:	f383 8811 	msr	BASEPRI, r3
 80163a8:	f3bf 8f6f 	isb	sy
 80163ac:	f3bf 8f4f 	dsb	sy
 80163b0:	60fb      	str	r3, [r7, #12]
}
 80163b2:	bf00      	nop
 80163b4:	e7fe      	b.n	80163b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80163b6:	4b39      	ldr	r3, [pc, #228]	; (801649c <xPortStartScheduler+0x12c>)
 80163b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80163c2:	697b      	ldr	r3, [r7, #20]
 80163c4:	22ff      	movs	r2, #255	; 0xff
 80163c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80163c8:	697b      	ldr	r3, [r7, #20]
 80163ca:	781b      	ldrb	r3, [r3, #0]
 80163cc:	b2db      	uxtb	r3, r3
 80163ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80163d0:	78fb      	ldrb	r3, [r7, #3]
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80163d8:	b2da      	uxtb	r2, r3
 80163da:	4b31      	ldr	r3, [pc, #196]	; (80164a0 <xPortStartScheduler+0x130>)
 80163dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80163de:	4b31      	ldr	r3, [pc, #196]	; (80164a4 <xPortStartScheduler+0x134>)
 80163e0:	2207      	movs	r2, #7
 80163e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80163e4:	e009      	b.n	80163fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80163e6:	4b2f      	ldr	r3, [pc, #188]	; (80164a4 <xPortStartScheduler+0x134>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	3b01      	subs	r3, #1
 80163ec:	4a2d      	ldr	r2, [pc, #180]	; (80164a4 <xPortStartScheduler+0x134>)
 80163ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80163f0:	78fb      	ldrb	r3, [r7, #3]
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	005b      	lsls	r3, r3, #1
 80163f6:	b2db      	uxtb	r3, r3
 80163f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80163fa:	78fb      	ldrb	r3, [r7, #3]
 80163fc:	b2db      	uxtb	r3, r3
 80163fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016402:	2b80      	cmp	r3, #128	; 0x80
 8016404:	d0ef      	beq.n	80163e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016406:	4b27      	ldr	r3, [pc, #156]	; (80164a4 <xPortStartScheduler+0x134>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	f1c3 0307 	rsb	r3, r3, #7
 801640e:	2b04      	cmp	r3, #4
 8016410:	d00a      	beq.n	8016428 <xPortStartScheduler+0xb8>
	__asm volatile
 8016412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016416:	f383 8811 	msr	BASEPRI, r3
 801641a:	f3bf 8f6f 	isb	sy
 801641e:	f3bf 8f4f 	dsb	sy
 8016422:	60bb      	str	r3, [r7, #8]
}
 8016424:	bf00      	nop
 8016426:	e7fe      	b.n	8016426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016428:	4b1e      	ldr	r3, [pc, #120]	; (80164a4 <xPortStartScheduler+0x134>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	021b      	lsls	r3, r3, #8
 801642e:	4a1d      	ldr	r2, [pc, #116]	; (80164a4 <xPortStartScheduler+0x134>)
 8016430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016432:	4b1c      	ldr	r3, [pc, #112]	; (80164a4 <xPortStartScheduler+0x134>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801643a:	4a1a      	ldr	r2, [pc, #104]	; (80164a4 <xPortStartScheduler+0x134>)
 801643c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	b2da      	uxtb	r2, r3
 8016442:	697b      	ldr	r3, [r7, #20]
 8016444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016446:	4b18      	ldr	r3, [pc, #96]	; (80164a8 <xPortStartScheduler+0x138>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	4a17      	ldr	r2, [pc, #92]	; (80164a8 <xPortStartScheduler+0x138>)
 801644c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016452:	4b15      	ldr	r3, [pc, #84]	; (80164a8 <xPortStartScheduler+0x138>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	4a14      	ldr	r2, [pc, #80]	; (80164a8 <xPortStartScheduler+0x138>)
 8016458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801645c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801645e:	f000 f8dd 	bl	801661c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016462:	4b12      	ldr	r3, [pc, #72]	; (80164ac <xPortStartScheduler+0x13c>)
 8016464:	2200      	movs	r2, #0
 8016466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016468:	f000 f8fc 	bl	8016664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801646c:	4b10      	ldr	r3, [pc, #64]	; (80164b0 <xPortStartScheduler+0x140>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	4a0f      	ldr	r2, [pc, #60]	; (80164b0 <xPortStartScheduler+0x140>)
 8016472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016478:	f7ff ff66 	bl	8016348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801647c:	f7fe ff7c 	bl	8015378 <vTaskSwitchContext>
	prvTaskExitError();
 8016480:	f7ff ff1e 	bl	80162c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016484:	2300      	movs	r3, #0
}
 8016486:	4618      	mov	r0, r3
 8016488:	3718      	adds	r7, #24
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	e000ed00 	.word	0xe000ed00
 8016494:	410fc271 	.word	0x410fc271
 8016498:	410fc270 	.word	0x410fc270
 801649c:	e000e400 	.word	0xe000e400
 80164a0:	24001e58 	.word	0x24001e58
 80164a4:	24001e5c 	.word	0x24001e5c
 80164a8:	e000ed20 	.word	0xe000ed20
 80164ac:	240000a0 	.word	0x240000a0
 80164b0:	e000ef34 	.word	0xe000ef34

080164b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80164b4:	b480      	push	{r7}
 80164b6:	b083      	sub	sp, #12
 80164b8:	af00      	add	r7, sp, #0
	__asm volatile
 80164ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164be:	f383 8811 	msr	BASEPRI, r3
 80164c2:	f3bf 8f6f 	isb	sy
 80164c6:	f3bf 8f4f 	dsb	sy
 80164ca:	607b      	str	r3, [r7, #4]
}
 80164cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80164ce:	4b0f      	ldr	r3, [pc, #60]	; (801650c <vPortEnterCritical+0x58>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	3301      	adds	r3, #1
 80164d4:	4a0d      	ldr	r2, [pc, #52]	; (801650c <vPortEnterCritical+0x58>)
 80164d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80164d8:	4b0c      	ldr	r3, [pc, #48]	; (801650c <vPortEnterCritical+0x58>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	2b01      	cmp	r3, #1
 80164de:	d10f      	bne.n	8016500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80164e0:	4b0b      	ldr	r3, [pc, #44]	; (8016510 <vPortEnterCritical+0x5c>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	b2db      	uxtb	r3, r3
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d00a      	beq.n	8016500 <vPortEnterCritical+0x4c>
	__asm volatile
 80164ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ee:	f383 8811 	msr	BASEPRI, r3
 80164f2:	f3bf 8f6f 	isb	sy
 80164f6:	f3bf 8f4f 	dsb	sy
 80164fa:	603b      	str	r3, [r7, #0]
}
 80164fc:	bf00      	nop
 80164fe:	e7fe      	b.n	80164fe <vPortEnterCritical+0x4a>
	}
}
 8016500:	bf00      	nop
 8016502:	370c      	adds	r7, #12
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr
 801650c:	240000a0 	.word	0x240000a0
 8016510:	e000ed04 	.word	0xe000ed04

08016514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016514:	b480      	push	{r7}
 8016516:	b083      	sub	sp, #12
 8016518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801651a:	4b12      	ldr	r3, [pc, #72]	; (8016564 <vPortExitCritical+0x50>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d10a      	bne.n	8016538 <vPortExitCritical+0x24>
	__asm volatile
 8016522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016526:	f383 8811 	msr	BASEPRI, r3
 801652a:	f3bf 8f6f 	isb	sy
 801652e:	f3bf 8f4f 	dsb	sy
 8016532:	607b      	str	r3, [r7, #4]
}
 8016534:	bf00      	nop
 8016536:	e7fe      	b.n	8016536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016538:	4b0a      	ldr	r3, [pc, #40]	; (8016564 <vPortExitCritical+0x50>)
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	3b01      	subs	r3, #1
 801653e:	4a09      	ldr	r2, [pc, #36]	; (8016564 <vPortExitCritical+0x50>)
 8016540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016542:	4b08      	ldr	r3, [pc, #32]	; (8016564 <vPortExitCritical+0x50>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d105      	bne.n	8016556 <vPortExitCritical+0x42>
 801654a:	2300      	movs	r3, #0
 801654c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	f383 8811 	msr	BASEPRI, r3
}
 8016554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016556:	bf00      	nop
 8016558:	370c      	adds	r7, #12
 801655a:	46bd      	mov	sp, r7
 801655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016560:	4770      	bx	lr
 8016562:	bf00      	nop
 8016564:	240000a0 	.word	0x240000a0
	...

08016570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016570:	f3ef 8009 	mrs	r0, PSP
 8016574:	f3bf 8f6f 	isb	sy
 8016578:	4b15      	ldr	r3, [pc, #84]	; (80165d0 <pxCurrentTCBConst>)
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	f01e 0f10 	tst.w	lr, #16
 8016580:	bf08      	it	eq
 8016582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801658a:	6010      	str	r0, [r2, #0]
 801658c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016594:	f380 8811 	msr	BASEPRI, r0
 8016598:	f3bf 8f4f 	dsb	sy
 801659c:	f3bf 8f6f 	isb	sy
 80165a0:	f7fe feea 	bl	8015378 <vTaskSwitchContext>
 80165a4:	f04f 0000 	mov.w	r0, #0
 80165a8:	f380 8811 	msr	BASEPRI, r0
 80165ac:	bc09      	pop	{r0, r3}
 80165ae:	6819      	ldr	r1, [r3, #0]
 80165b0:	6808      	ldr	r0, [r1, #0]
 80165b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b6:	f01e 0f10 	tst.w	lr, #16
 80165ba:	bf08      	it	eq
 80165bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80165c0:	f380 8809 	msr	PSP, r0
 80165c4:	f3bf 8f6f 	isb	sy
 80165c8:	4770      	bx	lr
 80165ca:	bf00      	nop
 80165cc:	f3af 8000 	nop.w

080165d0 <pxCurrentTCBConst>:
 80165d0:	2400182c 	.word	0x2400182c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80165d4:	bf00      	nop
 80165d6:	bf00      	nop

080165d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b082      	sub	sp, #8
 80165dc:	af00      	add	r7, sp, #0
	__asm volatile
 80165de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165e2:	f383 8811 	msr	BASEPRI, r3
 80165e6:	f3bf 8f6f 	isb	sy
 80165ea:	f3bf 8f4f 	dsb	sy
 80165ee:	607b      	str	r3, [r7, #4]
}
 80165f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80165f2:	f7fe fdff 	bl	80151f4 <xTaskIncrementTick>
 80165f6:	4603      	mov	r3, r0
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d003      	beq.n	8016604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80165fc:	4b06      	ldr	r3, [pc, #24]	; (8016618 <xPortSysTickHandler+0x40>)
 80165fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016602:	601a      	str	r2, [r3, #0]
 8016604:	2300      	movs	r3, #0
 8016606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	f383 8811 	msr	BASEPRI, r3
}
 801660e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016610:	bf00      	nop
 8016612:	3708      	adds	r7, #8
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	e000ed04 	.word	0xe000ed04

0801661c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801661c:	b480      	push	{r7}
 801661e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016620:	4b0b      	ldr	r3, [pc, #44]	; (8016650 <vPortSetupTimerInterrupt+0x34>)
 8016622:	2200      	movs	r2, #0
 8016624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016626:	4b0b      	ldr	r3, [pc, #44]	; (8016654 <vPortSetupTimerInterrupt+0x38>)
 8016628:	2200      	movs	r2, #0
 801662a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801662c:	4b0a      	ldr	r3, [pc, #40]	; (8016658 <vPortSetupTimerInterrupt+0x3c>)
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	4a0a      	ldr	r2, [pc, #40]	; (801665c <vPortSetupTimerInterrupt+0x40>)
 8016632:	fba2 2303 	umull	r2, r3, r2, r3
 8016636:	099b      	lsrs	r3, r3, #6
 8016638:	4a09      	ldr	r2, [pc, #36]	; (8016660 <vPortSetupTimerInterrupt+0x44>)
 801663a:	3b01      	subs	r3, #1
 801663c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801663e:	4b04      	ldr	r3, [pc, #16]	; (8016650 <vPortSetupTimerInterrupt+0x34>)
 8016640:	2207      	movs	r2, #7
 8016642:	601a      	str	r2, [r3, #0]
}
 8016644:	bf00      	nop
 8016646:	46bd      	mov	sp, r7
 8016648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664c:	4770      	bx	lr
 801664e:	bf00      	nop
 8016650:	e000e010 	.word	0xe000e010
 8016654:	e000e018 	.word	0xe000e018
 8016658:	24000090 	.word	0x24000090
 801665c:	10624dd3 	.word	0x10624dd3
 8016660:	e000e014 	.word	0xe000e014

08016664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016674 <vPortEnableVFP+0x10>
 8016668:	6801      	ldr	r1, [r0, #0]
 801666a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801666e:	6001      	str	r1, [r0, #0]
 8016670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016672:	bf00      	nop
 8016674:	e000ed88 	.word	0xe000ed88

08016678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016678:	b480      	push	{r7}
 801667a:	b085      	sub	sp, #20
 801667c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801667e:	f3ef 8305 	mrs	r3, IPSR
 8016682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	2b0f      	cmp	r3, #15
 8016688:	d914      	bls.n	80166b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801668a:	4a17      	ldr	r2, [pc, #92]	; (80166e8 <vPortValidateInterruptPriority+0x70>)
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	4413      	add	r3, r2
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016694:	4b15      	ldr	r3, [pc, #84]	; (80166ec <vPortValidateInterruptPriority+0x74>)
 8016696:	781b      	ldrb	r3, [r3, #0]
 8016698:	7afa      	ldrb	r2, [r7, #11]
 801669a:	429a      	cmp	r2, r3
 801669c:	d20a      	bcs.n	80166b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a2:	f383 8811 	msr	BASEPRI, r3
 80166a6:	f3bf 8f6f 	isb	sy
 80166aa:	f3bf 8f4f 	dsb	sy
 80166ae:	607b      	str	r3, [r7, #4]
}
 80166b0:	bf00      	nop
 80166b2:	e7fe      	b.n	80166b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80166b4:	4b0e      	ldr	r3, [pc, #56]	; (80166f0 <vPortValidateInterruptPriority+0x78>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80166bc:	4b0d      	ldr	r3, [pc, #52]	; (80166f4 <vPortValidateInterruptPriority+0x7c>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	429a      	cmp	r2, r3
 80166c2:	d90a      	bls.n	80166da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80166c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c8:	f383 8811 	msr	BASEPRI, r3
 80166cc:	f3bf 8f6f 	isb	sy
 80166d0:	f3bf 8f4f 	dsb	sy
 80166d4:	603b      	str	r3, [r7, #0]
}
 80166d6:	bf00      	nop
 80166d8:	e7fe      	b.n	80166d8 <vPortValidateInterruptPriority+0x60>
	}
 80166da:	bf00      	nop
 80166dc:	3714      	adds	r7, #20
 80166de:	46bd      	mov	sp, r7
 80166e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e4:	4770      	bx	lr
 80166e6:	bf00      	nop
 80166e8:	e000e3f0 	.word	0xe000e3f0
 80166ec:	24001e58 	.word	0x24001e58
 80166f0:	e000ed0c 	.word	0xe000ed0c
 80166f4:	24001e5c 	.word	0x24001e5c

080166f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b08a      	sub	sp, #40	; 0x28
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016700:	2300      	movs	r3, #0
 8016702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016704:	f7fe fcba 	bl	801507c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016708:	4b5b      	ldr	r3, [pc, #364]	; (8016878 <pvPortMalloc+0x180>)
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d101      	bne.n	8016714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016710:	f000 f920 	bl	8016954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016714:	4b59      	ldr	r3, [pc, #356]	; (801687c <pvPortMalloc+0x184>)
 8016716:	681a      	ldr	r2, [r3, #0]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	4013      	ands	r3, r2
 801671c:	2b00      	cmp	r3, #0
 801671e:	f040 8093 	bne.w	8016848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d01d      	beq.n	8016764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016728:	2208      	movs	r2, #8
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	4413      	add	r3, r2
 801672e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	f003 0307 	and.w	r3, r3, #7
 8016736:	2b00      	cmp	r3, #0
 8016738:	d014      	beq.n	8016764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f023 0307 	bic.w	r3, r3, #7
 8016740:	3308      	adds	r3, #8
 8016742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f003 0307 	and.w	r3, r3, #7
 801674a:	2b00      	cmp	r3, #0
 801674c:	d00a      	beq.n	8016764 <pvPortMalloc+0x6c>
	__asm volatile
 801674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016752:	f383 8811 	msr	BASEPRI, r3
 8016756:	f3bf 8f6f 	isb	sy
 801675a:	f3bf 8f4f 	dsb	sy
 801675e:	617b      	str	r3, [r7, #20]
}
 8016760:	bf00      	nop
 8016762:	e7fe      	b.n	8016762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d06e      	beq.n	8016848 <pvPortMalloc+0x150>
 801676a:	4b45      	ldr	r3, [pc, #276]	; (8016880 <pvPortMalloc+0x188>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	687a      	ldr	r2, [r7, #4]
 8016770:	429a      	cmp	r2, r3
 8016772:	d869      	bhi.n	8016848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016774:	4b43      	ldr	r3, [pc, #268]	; (8016884 <pvPortMalloc+0x18c>)
 8016776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016778:	4b42      	ldr	r3, [pc, #264]	; (8016884 <pvPortMalloc+0x18c>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801677e:	e004      	b.n	801678a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801678c:	685b      	ldr	r3, [r3, #4]
 801678e:	687a      	ldr	r2, [r7, #4]
 8016790:	429a      	cmp	r2, r3
 8016792:	d903      	bls.n	801679c <pvPortMalloc+0xa4>
 8016794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d1f1      	bne.n	8016780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801679c:	4b36      	ldr	r3, [pc, #216]	; (8016878 <pvPortMalloc+0x180>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167a2:	429a      	cmp	r2, r3
 80167a4:	d050      	beq.n	8016848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80167a6:	6a3b      	ldr	r3, [r7, #32]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	2208      	movs	r2, #8
 80167ac:	4413      	add	r3, r2
 80167ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80167b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b2:	681a      	ldr	r2, [r3, #0]
 80167b4:	6a3b      	ldr	r3, [r7, #32]
 80167b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80167b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ba:	685a      	ldr	r2, [r3, #4]
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	1ad2      	subs	r2, r2, r3
 80167c0:	2308      	movs	r3, #8
 80167c2:	005b      	lsls	r3, r3, #1
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d91f      	bls.n	8016808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80167c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	4413      	add	r3, r2
 80167ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80167d0:	69bb      	ldr	r3, [r7, #24]
 80167d2:	f003 0307 	and.w	r3, r3, #7
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d00a      	beq.n	80167f0 <pvPortMalloc+0xf8>
	__asm volatile
 80167da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167de:	f383 8811 	msr	BASEPRI, r3
 80167e2:	f3bf 8f6f 	isb	sy
 80167e6:	f3bf 8f4f 	dsb	sy
 80167ea:	613b      	str	r3, [r7, #16]
}
 80167ec:	bf00      	nop
 80167ee:	e7fe      	b.n	80167ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80167f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f2:	685a      	ldr	r2, [r3, #4]
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	1ad2      	subs	r2, r2, r3
 80167f8:	69bb      	ldr	r3, [r7, #24]
 80167fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80167fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016802:	69b8      	ldr	r0, [r7, #24]
 8016804:	f000 f908 	bl	8016a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016808:	4b1d      	ldr	r3, [pc, #116]	; (8016880 <pvPortMalloc+0x188>)
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	1ad3      	subs	r3, r2, r3
 8016812:	4a1b      	ldr	r2, [pc, #108]	; (8016880 <pvPortMalloc+0x188>)
 8016814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016816:	4b1a      	ldr	r3, [pc, #104]	; (8016880 <pvPortMalloc+0x188>)
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	4b1b      	ldr	r3, [pc, #108]	; (8016888 <pvPortMalloc+0x190>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	429a      	cmp	r2, r3
 8016820:	d203      	bcs.n	801682a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016822:	4b17      	ldr	r3, [pc, #92]	; (8016880 <pvPortMalloc+0x188>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	4a18      	ldr	r2, [pc, #96]	; (8016888 <pvPortMalloc+0x190>)
 8016828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801682c:	685a      	ldr	r2, [r3, #4]
 801682e:	4b13      	ldr	r3, [pc, #76]	; (801687c <pvPortMalloc+0x184>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	431a      	orrs	r2, r3
 8016834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801683a:	2200      	movs	r2, #0
 801683c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801683e:	4b13      	ldr	r3, [pc, #76]	; (801688c <pvPortMalloc+0x194>)
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	3301      	adds	r3, #1
 8016844:	4a11      	ldr	r2, [pc, #68]	; (801688c <pvPortMalloc+0x194>)
 8016846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016848:	f7fe fc26 	bl	8015098 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	f003 0307 	and.w	r3, r3, #7
 8016852:	2b00      	cmp	r3, #0
 8016854:	d00a      	beq.n	801686c <pvPortMalloc+0x174>
	__asm volatile
 8016856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801685a:	f383 8811 	msr	BASEPRI, r3
 801685e:	f3bf 8f6f 	isb	sy
 8016862:	f3bf 8f4f 	dsb	sy
 8016866:	60fb      	str	r3, [r7, #12]
}
 8016868:	bf00      	nop
 801686a:	e7fe      	b.n	801686a <pvPortMalloc+0x172>
	return pvReturn;
 801686c:	69fb      	ldr	r3, [r7, #28]
}
 801686e:	4618      	mov	r0, r3
 8016870:	3728      	adds	r7, #40	; 0x28
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}
 8016876:	bf00      	nop
 8016878:	24005a68 	.word	0x24005a68
 801687c:	24005a7c 	.word	0x24005a7c
 8016880:	24005a6c 	.word	0x24005a6c
 8016884:	24005a60 	.word	0x24005a60
 8016888:	24005a70 	.word	0x24005a70
 801688c:	24005a74 	.word	0x24005a74

08016890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b086      	sub	sp, #24
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d04d      	beq.n	801693e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80168a2:	2308      	movs	r3, #8
 80168a4:	425b      	negs	r3, r3
 80168a6:	697a      	ldr	r2, [r7, #20]
 80168a8:	4413      	add	r3, r2
 80168aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80168ac:	697b      	ldr	r3, [r7, #20]
 80168ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	685a      	ldr	r2, [r3, #4]
 80168b4:	4b24      	ldr	r3, [pc, #144]	; (8016948 <vPortFree+0xb8>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	4013      	ands	r3, r2
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d10a      	bne.n	80168d4 <vPortFree+0x44>
	__asm volatile
 80168be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c2:	f383 8811 	msr	BASEPRI, r3
 80168c6:	f3bf 8f6f 	isb	sy
 80168ca:	f3bf 8f4f 	dsb	sy
 80168ce:	60fb      	str	r3, [r7, #12]
}
 80168d0:	bf00      	nop
 80168d2:	e7fe      	b.n	80168d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80168d4:	693b      	ldr	r3, [r7, #16]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d00a      	beq.n	80168f2 <vPortFree+0x62>
	__asm volatile
 80168dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e0:	f383 8811 	msr	BASEPRI, r3
 80168e4:	f3bf 8f6f 	isb	sy
 80168e8:	f3bf 8f4f 	dsb	sy
 80168ec:	60bb      	str	r3, [r7, #8]
}
 80168ee:	bf00      	nop
 80168f0:	e7fe      	b.n	80168f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80168f2:	693b      	ldr	r3, [r7, #16]
 80168f4:	685a      	ldr	r2, [r3, #4]
 80168f6:	4b14      	ldr	r3, [pc, #80]	; (8016948 <vPortFree+0xb8>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	4013      	ands	r3, r2
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d01e      	beq.n	801693e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d11a      	bne.n	801693e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	685a      	ldr	r2, [r3, #4]
 801690c:	4b0e      	ldr	r3, [pc, #56]	; (8016948 <vPortFree+0xb8>)
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	43db      	mvns	r3, r3
 8016912:	401a      	ands	r2, r3
 8016914:	693b      	ldr	r3, [r7, #16]
 8016916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016918:	f7fe fbb0 	bl	801507c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	685a      	ldr	r2, [r3, #4]
 8016920:	4b0a      	ldr	r3, [pc, #40]	; (801694c <vPortFree+0xbc>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	4413      	add	r3, r2
 8016926:	4a09      	ldr	r2, [pc, #36]	; (801694c <vPortFree+0xbc>)
 8016928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801692a:	6938      	ldr	r0, [r7, #16]
 801692c:	f000 f874 	bl	8016a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016930:	4b07      	ldr	r3, [pc, #28]	; (8016950 <vPortFree+0xc0>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	3301      	adds	r3, #1
 8016936:	4a06      	ldr	r2, [pc, #24]	; (8016950 <vPortFree+0xc0>)
 8016938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801693a:	f7fe fbad 	bl	8015098 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801693e:	bf00      	nop
 8016940:	3718      	adds	r7, #24
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
 8016946:	bf00      	nop
 8016948:	24005a7c 	.word	0x24005a7c
 801694c:	24005a6c 	.word	0x24005a6c
 8016950:	24005a78 	.word	0x24005a78

08016954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016954:	b480      	push	{r7}
 8016956:	b085      	sub	sp, #20
 8016958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801695a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801695e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016960:	4b27      	ldr	r3, [pc, #156]	; (8016a00 <prvHeapInit+0xac>)
 8016962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	f003 0307 	and.w	r3, r3, #7
 801696a:	2b00      	cmp	r3, #0
 801696c:	d00c      	beq.n	8016988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	3307      	adds	r3, #7
 8016972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	f023 0307 	bic.w	r3, r3, #7
 801697a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801697c:	68ba      	ldr	r2, [r7, #8]
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	1ad3      	subs	r3, r2, r3
 8016982:	4a1f      	ldr	r2, [pc, #124]	; (8016a00 <prvHeapInit+0xac>)
 8016984:	4413      	add	r3, r2
 8016986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801698c:	4a1d      	ldr	r2, [pc, #116]	; (8016a04 <prvHeapInit+0xb0>)
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016992:	4b1c      	ldr	r3, [pc, #112]	; (8016a04 <prvHeapInit+0xb0>)
 8016994:	2200      	movs	r2, #0
 8016996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	68ba      	ldr	r2, [r7, #8]
 801699c:	4413      	add	r3, r2
 801699e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80169a0:	2208      	movs	r2, #8
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	1a9b      	subs	r3, r3, r2
 80169a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	f023 0307 	bic.w	r3, r3, #7
 80169ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	4a15      	ldr	r2, [pc, #84]	; (8016a08 <prvHeapInit+0xb4>)
 80169b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80169b6:	4b14      	ldr	r3, [pc, #80]	; (8016a08 <prvHeapInit+0xb4>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	2200      	movs	r2, #0
 80169bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80169be:	4b12      	ldr	r3, [pc, #72]	; (8016a08 <prvHeapInit+0xb4>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	2200      	movs	r2, #0
 80169c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	68fa      	ldr	r2, [r7, #12]
 80169ce:	1ad2      	subs	r2, r2, r3
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80169d4:	4b0c      	ldr	r3, [pc, #48]	; (8016a08 <prvHeapInit+0xb4>)
 80169d6:	681a      	ldr	r2, [r3, #0]
 80169d8:	683b      	ldr	r3, [r7, #0]
 80169da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	4a0a      	ldr	r2, [pc, #40]	; (8016a0c <prvHeapInit+0xb8>)
 80169e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	685b      	ldr	r3, [r3, #4]
 80169e8:	4a09      	ldr	r2, [pc, #36]	; (8016a10 <prvHeapInit+0xbc>)
 80169ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80169ec:	4b09      	ldr	r3, [pc, #36]	; (8016a14 <prvHeapInit+0xc0>)
 80169ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80169f2:	601a      	str	r2, [r3, #0]
}
 80169f4:	bf00      	nop
 80169f6:	3714      	adds	r7, #20
 80169f8:	46bd      	mov	sp, r7
 80169fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fe:	4770      	bx	lr
 8016a00:	24001e60 	.word	0x24001e60
 8016a04:	24005a60 	.word	0x24005a60
 8016a08:	24005a68 	.word	0x24005a68
 8016a0c:	24005a70 	.word	0x24005a70
 8016a10:	24005a6c 	.word	0x24005a6c
 8016a14:	24005a7c 	.word	0x24005a7c

08016a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016a18:	b480      	push	{r7}
 8016a1a:	b085      	sub	sp, #20
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016a20:	4b28      	ldr	r3, [pc, #160]	; (8016ac4 <prvInsertBlockIntoFreeList+0xac>)
 8016a22:	60fb      	str	r3, [r7, #12]
 8016a24:	e002      	b.n	8016a2c <prvInsertBlockIntoFreeList+0x14>
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	60fb      	str	r3, [r7, #12]
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	687a      	ldr	r2, [r7, #4]
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d8f7      	bhi.n	8016a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	685b      	ldr	r3, [r3, #4]
 8016a3e:	68ba      	ldr	r2, [r7, #8]
 8016a40:	4413      	add	r3, r2
 8016a42:	687a      	ldr	r2, [r7, #4]
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d108      	bne.n	8016a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	685a      	ldr	r2, [r3, #4]
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	685b      	ldr	r3, [r3, #4]
 8016a50:	441a      	add	r2, r3
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	441a      	add	r2, r3
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	429a      	cmp	r2, r3
 8016a6c:	d118      	bne.n	8016aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	4b15      	ldr	r3, [pc, #84]	; (8016ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d00d      	beq.n	8016a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	685a      	ldr	r2, [r3, #4]
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	685b      	ldr	r3, [r3, #4]
 8016a84:	441a      	add	r2, r3
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	601a      	str	r2, [r3, #0]
 8016a94:	e008      	b.n	8016aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016a96:	4b0c      	ldr	r3, [pc, #48]	; (8016ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8016a98:	681a      	ldr	r2, [r3, #0]
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	601a      	str	r2, [r3, #0]
 8016a9e:	e003      	b.n	8016aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016aa8:	68fa      	ldr	r2, [r7, #12]
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d002      	beq.n	8016ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	687a      	ldr	r2, [r7, #4]
 8016ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016ab6:	bf00      	nop
 8016ab8:	3714      	adds	r7, #20
 8016aba:	46bd      	mov	sp, r7
 8016abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac0:	4770      	bx	lr
 8016ac2:	bf00      	nop
 8016ac4:	24005a60 	.word	0x24005a60
 8016ac8:	24005a68 	.word	0x24005a68

08016acc <__errno>:
 8016acc:	4b01      	ldr	r3, [pc, #4]	; (8016ad4 <__errno+0x8>)
 8016ace:	6818      	ldr	r0, [r3, #0]
 8016ad0:	4770      	bx	lr
 8016ad2:	bf00      	nop
 8016ad4:	240000a4 	.word	0x240000a4

08016ad8 <__libc_init_array>:
 8016ad8:	b570      	push	{r4, r5, r6, lr}
 8016ada:	4d0d      	ldr	r5, [pc, #52]	; (8016b10 <__libc_init_array+0x38>)
 8016adc:	4c0d      	ldr	r4, [pc, #52]	; (8016b14 <__libc_init_array+0x3c>)
 8016ade:	1b64      	subs	r4, r4, r5
 8016ae0:	10a4      	asrs	r4, r4, #2
 8016ae2:	2600      	movs	r6, #0
 8016ae4:	42a6      	cmp	r6, r4
 8016ae6:	d109      	bne.n	8016afc <__libc_init_array+0x24>
 8016ae8:	4d0b      	ldr	r5, [pc, #44]	; (8016b18 <__libc_init_array+0x40>)
 8016aea:	4c0c      	ldr	r4, [pc, #48]	; (8016b1c <__libc_init_array+0x44>)
 8016aec:	f000 fd3c 	bl	8017568 <_init>
 8016af0:	1b64      	subs	r4, r4, r5
 8016af2:	10a4      	asrs	r4, r4, #2
 8016af4:	2600      	movs	r6, #0
 8016af6:	42a6      	cmp	r6, r4
 8016af8:	d105      	bne.n	8016b06 <__libc_init_array+0x2e>
 8016afa:	bd70      	pop	{r4, r5, r6, pc}
 8016afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b00:	4798      	blx	r3
 8016b02:	3601      	adds	r6, #1
 8016b04:	e7ee      	b.n	8016ae4 <__libc_init_array+0xc>
 8016b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b0a:	4798      	blx	r3
 8016b0c:	3601      	adds	r6, #1
 8016b0e:	e7f2      	b.n	8016af6 <__libc_init_array+0x1e>
 8016b10:	080179bc 	.word	0x080179bc
 8016b14:	080179bc 	.word	0x080179bc
 8016b18:	080179bc 	.word	0x080179bc
 8016b1c:	080179c0 	.word	0x080179c0

08016b20 <malloc>:
 8016b20:	4b02      	ldr	r3, [pc, #8]	; (8016b2c <malloc+0xc>)
 8016b22:	4601      	mov	r1, r0
 8016b24:	6818      	ldr	r0, [r3, #0]
 8016b26:	f000 b88d 	b.w	8016c44 <_malloc_r>
 8016b2a:	bf00      	nop
 8016b2c:	240000a4 	.word	0x240000a4

08016b30 <free>:
 8016b30:	4b02      	ldr	r3, [pc, #8]	; (8016b3c <free+0xc>)
 8016b32:	4601      	mov	r1, r0
 8016b34:	6818      	ldr	r0, [r3, #0]
 8016b36:	f000 b819 	b.w	8016b6c <_free_r>
 8016b3a:	bf00      	nop
 8016b3c:	240000a4 	.word	0x240000a4

08016b40 <memcpy>:
 8016b40:	440a      	add	r2, r1
 8016b42:	4291      	cmp	r1, r2
 8016b44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016b48:	d100      	bne.n	8016b4c <memcpy+0xc>
 8016b4a:	4770      	bx	lr
 8016b4c:	b510      	push	{r4, lr}
 8016b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b56:	4291      	cmp	r1, r2
 8016b58:	d1f9      	bne.n	8016b4e <memcpy+0xe>
 8016b5a:	bd10      	pop	{r4, pc}

08016b5c <memset>:
 8016b5c:	4402      	add	r2, r0
 8016b5e:	4603      	mov	r3, r0
 8016b60:	4293      	cmp	r3, r2
 8016b62:	d100      	bne.n	8016b66 <memset+0xa>
 8016b64:	4770      	bx	lr
 8016b66:	f803 1b01 	strb.w	r1, [r3], #1
 8016b6a:	e7f9      	b.n	8016b60 <memset+0x4>

08016b6c <_free_r>:
 8016b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b6e:	2900      	cmp	r1, #0
 8016b70:	d044      	beq.n	8016bfc <_free_r+0x90>
 8016b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b76:	9001      	str	r0, [sp, #4]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8016b7e:	bfb8      	it	lt
 8016b80:	18e4      	addlt	r4, r4, r3
 8016b82:	f000 fc39 	bl	80173f8 <__malloc_lock>
 8016b86:	4a1e      	ldr	r2, [pc, #120]	; (8016c00 <_free_r+0x94>)
 8016b88:	9801      	ldr	r0, [sp, #4]
 8016b8a:	6813      	ldr	r3, [r2, #0]
 8016b8c:	b933      	cbnz	r3, 8016b9c <_free_r+0x30>
 8016b8e:	6063      	str	r3, [r4, #4]
 8016b90:	6014      	str	r4, [r2, #0]
 8016b92:	b003      	add	sp, #12
 8016b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b98:	f000 bc34 	b.w	8017404 <__malloc_unlock>
 8016b9c:	42a3      	cmp	r3, r4
 8016b9e:	d908      	bls.n	8016bb2 <_free_r+0x46>
 8016ba0:	6825      	ldr	r5, [r4, #0]
 8016ba2:	1961      	adds	r1, r4, r5
 8016ba4:	428b      	cmp	r3, r1
 8016ba6:	bf01      	itttt	eq
 8016ba8:	6819      	ldreq	r1, [r3, #0]
 8016baa:	685b      	ldreq	r3, [r3, #4]
 8016bac:	1949      	addeq	r1, r1, r5
 8016bae:	6021      	streq	r1, [r4, #0]
 8016bb0:	e7ed      	b.n	8016b8e <_free_r+0x22>
 8016bb2:	461a      	mov	r2, r3
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	b10b      	cbz	r3, 8016bbc <_free_r+0x50>
 8016bb8:	42a3      	cmp	r3, r4
 8016bba:	d9fa      	bls.n	8016bb2 <_free_r+0x46>
 8016bbc:	6811      	ldr	r1, [r2, #0]
 8016bbe:	1855      	adds	r5, r2, r1
 8016bc0:	42a5      	cmp	r5, r4
 8016bc2:	d10b      	bne.n	8016bdc <_free_r+0x70>
 8016bc4:	6824      	ldr	r4, [r4, #0]
 8016bc6:	4421      	add	r1, r4
 8016bc8:	1854      	adds	r4, r2, r1
 8016bca:	42a3      	cmp	r3, r4
 8016bcc:	6011      	str	r1, [r2, #0]
 8016bce:	d1e0      	bne.n	8016b92 <_free_r+0x26>
 8016bd0:	681c      	ldr	r4, [r3, #0]
 8016bd2:	685b      	ldr	r3, [r3, #4]
 8016bd4:	6053      	str	r3, [r2, #4]
 8016bd6:	4421      	add	r1, r4
 8016bd8:	6011      	str	r1, [r2, #0]
 8016bda:	e7da      	b.n	8016b92 <_free_r+0x26>
 8016bdc:	d902      	bls.n	8016be4 <_free_r+0x78>
 8016bde:	230c      	movs	r3, #12
 8016be0:	6003      	str	r3, [r0, #0]
 8016be2:	e7d6      	b.n	8016b92 <_free_r+0x26>
 8016be4:	6825      	ldr	r5, [r4, #0]
 8016be6:	1961      	adds	r1, r4, r5
 8016be8:	428b      	cmp	r3, r1
 8016bea:	bf04      	itt	eq
 8016bec:	6819      	ldreq	r1, [r3, #0]
 8016bee:	685b      	ldreq	r3, [r3, #4]
 8016bf0:	6063      	str	r3, [r4, #4]
 8016bf2:	bf04      	itt	eq
 8016bf4:	1949      	addeq	r1, r1, r5
 8016bf6:	6021      	streq	r1, [r4, #0]
 8016bf8:	6054      	str	r4, [r2, #4]
 8016bfa:	e7ca      	b.n	8016b92 <_free_r+0x26>
 8016bfc:	b003      	add	sp, #12
 8016bfe:	bd30      	pop	{r4, r5, pc}
 8016c00:	24005a80 	.word	0x24005a80

08016c04 <sbrk_aligned>:
 8016c04:	b570      	push	{r4, r5, r6, lr}
 8016c06:	4e0e      	ldr	r6, [pc, #56]	; (8016c40 <sbrk_aligned+0x3c>)
 8016c08:	460c      	mov	r4, r1
 8016c0a:	6831      	ldr	r1, [r6, #0]
 8016c0c:	4605      	mov	r5, r0
 8016c0e:	b911      	cbnz	r1, 8016c16 <sbrk_aligned+0x12>
 8016c10:	f000 f902 	bl	8016e18 <_sbrk_r>
 8016c14:	6030      	str	r0, [r6, #0]
 8016c16:	4621      	mov	r1, r4
 8016c18:	4628      	mov	r0, r5
 8016c1a:	f000 f8fd 	bl	8016e18 <_sbrk_r>
 8016c1e:	1c43      	adds	r3, r0, #1
 8016c20:	d00a      	beq.n	8016c38 <sbrk_aligned+0x34>
 8016c22:	1cc4      	adds	r4, r0, #3
 8016c24:	f024 0403 	bic.w	r4, r4, #3
 8016c28:	42a0      	cmp	r0, r4
 8016c2a:	d007      	beq.n	8016c3c <sbrk_aligned+0x38>
 8016c2c:	1a21      	subs	r1, r4, r0
 8016c2e:	4628      	mov	r0, r5
 8016c30:	f000 f8f2 	bl	8016e18 <_sbrk_r>
 8016c34:	3001      	adds	r0, #1
 8016c36:	d101      	bne.n	8016c3c <sbrk_aligned+0x38>
 8016c38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	bd70      	pop	{r4, r5, r6, pc}
 8016c40:	24005a84 	.word	0x24005a84

08016c44 <_malloc_r>:
 8016c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c48:	1ccd      	adds	r5, r1, #3
 8016c4a:	f025 0503 	bic.w	r5, r5, #3
 8016c4e:	3508      	adds	r5, #8
 8016c50:	2d0c      	cmp	r5, #12
 8016c52:	bf38      	it	cc
 8016c54:	250c      	movcc	r5, #12
 8016c56:	2d00      	cmp	r5, #0
 8016c58:	4607      	mov	r7, r0
 8016c5a:	db01      	blt.n	8016c60 <_malloc_r+0x1c>
 8016c5c:	42a9      	cmp	r1, r5
 8016c5e:	d905      	bls.n	8016c6c <_malloc_r+0x28>
 8016c60:	230c      	movs	r3, #12
 8016c62:	603b      	str	r3, [r7, #0]
 8016c64:	2600      	movs	r6, #0
 8016c66:	4630      	mov	r0, r6
 8016c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c6c:	4e2e      	ldr	r6, [pc, #184]	; (8016d28 <_malloc_r+0xe4>)
 8016c6e:	f000 fbc3 	bl	80173f8 <__malloc_lock>
 8016c72:	6833      	ldr	r3, [r6, #0]
 8016c74:	461c      	mov	r4, r3
 8016c76:	bb34      	cbnz	r4, 8016cc6 <_malloc_r+0x82>
 8016c78:	4629      	mov	r1, r5
 8016c7a:	4638      	mov	r0, r7
 8016c7c:	f7ff ffc2 	bl	8016c04 <sbrk_aligned>
 8016c80:	1c43      	adds	r3, r0, #1
 8016c82:	4604      	mov	r4, r0
 8016c84:	d14d      	bne.n	8016d22 <_malloc_r+0xde>
 8016c86:	6834      	ldr	r4, [r6, #0]
 8016c88:	4626      	mov	r6, r4
 8016c8a:	2e00      	cmp	r6, #0
 8016c8c:	d140      	bne.n	8016d10 <_malloc_r+0xcc>
 8016c8e:	6823      	ldr	r3, [r4, #0]
 8016c90:	4631      	mov	r1, r6
 8016c92:	4638      	mov	r0, r7
 8016c94:	eb04 0803 	add.w	r8, r4, r3
 8016c98:	f000 f8be 	bl	8016e18 <_sbrk_r>
 8016c9c:	4580      	cmp	r8, r0
 8016c9e:	d13a      	bne.n	8016d16 <_malloc_r+0xd2>
 8016ca0:	6821      	ldr	r1, [r4, #0]
 8016ca2:	3503      	adds	r5, #3
 8016ca4:	1a6d      	subs	r5, r5, r1
 8016ca6:	f025 0503 	bic.w	r5, r5, #3
 8016caa:	3508      	adds	r5, #8
 8016cac:	2d0c      	cmp	r5, #12
 8016cae:	bf38      	it	cc
 8016cb0:	250c      	movcc	r5, #12
 8016cb2:	4629      	mov	r1, r5
 8016cb4:	4638      	mov	r0, r7
 8016cb6:	f7ff ffa5 	bl	8016c04 <sbrk_aligned>
 8016cba:	3001      	adds	r0, #1
 8016cbc:	d02b      	beq.n	8016d16 <_malloc_r+0xd2>
 8016cbe:	6823      	ldr	r3, [r4, #0]
 8016cc0:	442b      	add	r3, r5
 8016cc2:	6023      	str	r3, [r4, #0]
 8016cc4:	e00e      	b.n	8016ce4 <_malloc_r+0xa0>
 8016cc6:	6822      	ldr	r2, [r4, #0]
 8016cc8:	1b52      	subs	r2, r2, r5
 8016cca:	d41e      	bmi.n	8016d0a <_malloc_r+0xc6>
 8016ccc:	2a0b      	cmp	r2, #11
 8016cce:	d916      	bls.n	8016cfe <_malloc_r+0xba>
 8016cd0:	1961      	adds	r1, r4, r5
 8016cd2:	42a3      	cmp	r3, r4
 8016cd4:	6025      	str	r5, [r4, #0]
 8016cd6:	bf18      	it	ne
 8016cd8:	6059      	strne	r1, [r3, #4]
 8016cda:	6863      	ldr	r3, [r4, #4]
 8016cdc:	bf08      	it	eq
 8016cde:	6031      	streq	r1, [r6, #0]
 8016ce0:	5162      	str	r2, [r4, r5]
 8016ce2:	604b      	str	r3, [r1, #4]
 8016ce4:	4638      	mov	r0, r7
 8016ce6:	f104 060b 	add.w	r6, r4, #11
 8016cea:	f000 fb8b 	bl	8017404 <__malloc_unlock>
 8016cee:	f026 0607 	bic.w	r6, r6, #7
 8016cf2:	1d23      	adds	r3, r4, #4
 8016cf4:	1af2      	subs	r2, r6, r3
 8016cf6:	d0b6      	beq.n	8016c66 <_malloc_r+0x22>
 8016cf8:	1b9b      	subs	r3, r3, r6
 8016cfa:	50a3      	str	r3, [r4, r2]
 8016cfc:	e7b3      	b.n	8016c66 <_malloc_r+0x22>
 8016cfe:	6862      	ldr	r2, [r4, #4]
 8016d00:	42a3      	cmp	r3, r4
 8016d02:	bf0c      	ite	eq
 8016d04:	6032      	streq	r2, [r6, #0]
 8016d06:	605a      	strne	r2, [r3, #4]
 8016d08:	e7ec      	b.n	8016ce4 <_malloc_r+0xa0>
 8016d0a:	4623      	mov	r3, r4
 8016d0c:	6864      	ldr	r4, [r4, #4]
 8016d0e:	e7b2      	b.n	8016c76 <_malloc_r+0x32>
 8016d10:	4634      	mov	r4, r6
 8016d12:	6876      	ldr	r6, [r6, #4]
 8016d14:	e7b9      	b.n	8016c8a <_malloc_r+0x46>
 8016d16:	230c      	movs	r3, #12
 8016d18:	603b      	str	r3, [r7, #0]
 8016d1a:	4638      	mov	r0, r7
 8016d1c:	f000 fb72 	bl	8017404 <__malloc_unlock>
 8016d20:	e7a1      	b.n	8016c66 <_malloc_r+0x22>
 8016d22:	6025      	str	r5, [r4, #0]
 8016d24:	e7de      	b.n	8016ce4 <_malloc_r+0xa0>
 8016d26:	bf00      	nop
 8016d28:	24005a80 	.word	0x24005a80

08016d2c <_puts_r>:
 8016d2c:	b570      	push	{r4, r5, r6, lr}
 8016d2e:	460e      	mov	r6, r1
 8016d30:	4605      	mov	r5, r0
 8016d32:	b118      	cbz	r0, 8016d3c <_puts_r+0x10>
 8016d34:	6983      	ldr	r3, [r0, #24]
 8016d36:	b90b      	cbnz	r3, 8016d3c <_puts_r+0x10>
 8016d38:	f000 fa58 	bl	80171ec <__sinit>
 8016d3c:	69ab      	ldr	r3, [r5, #24]
 8016d3e:	68ac      	ldr	r4, [r5, #8]
 8016d40:	b913      	cbnz	r3, 8016d48 <_puts_r+0x1c>
 8016d42:	4628      	mov	r0, r5
 8016d44:	f000 fa52 	bl	80171ec <__sinit>
 8016d48:	4b2c      	ldr	r3, [pc, #176]	; (8016dfc <_puts_r+0xd0>)
 8016d4a:	429c      	cmp	r4, r3
 8016d4c:	d120      	bne.n	8016d90 <_puts_r+0x64>
 8016d4e:	686c      	ldr	r4, [r5, #4]
 8016d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d52:	07db      	lsls	r3, r3, #31
 8016d54:	d405      	bmi.n	8016d62 <_puts_r+0x36>
 8016d56:	89a3      	ldrh	r3, [r4, #12]
 8016d58:	0598      	lsls	r0, r3, #22
 8016d5a:	d402      	bmi.n	8016d62 <_puts_r+0x36>
 8016d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d5e:	f000 fae3 	bl	8017328 <__retarget_lock_acquire_recursive>
 8016d62:	89a3      	ldrh	r3, [r4, #12]
 8016d64:	0719      	lsls	r1, r3, #28
 8016d66:	d51d      	bpl.n	8016da4 <_puts_r+0x78>
 8016d68:	6923      	ldr	r3, [r4, #16]
 8016d6a:	b1db      	cbz	r3, 8016da4 <_puts_r+0x78>
 8016d6c:	3e01      	subs	r6, #1
 8016d6e:	68a3      	ldr	r3, [r4, #8]
 8016d70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d74:	3b01      	subs	r3, #1
 8016d76:	60a3      	str	r3, [r4, #8]
 8016d78:	bb39      	cbnz	r1, 8016dca <_puts_r+0x9e>
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	da38      	bge.n	8016df0 <_puts_r+0xc4>
 8016d7e:	4622      	mov	r2, r4
 8016d80:	210a      	movs	r1, #10
 8016d82:	4628      	mov	r0, r5
 8016d84:	f000 f858 	bl	8016e38 <__swbuf_r>
 8016d88:	3001      	adds	r0, #1
 8016d8a:	d011      	beq.n	8016db0 <_puts_r+0x84>
 8016d8c:	250a      	movs	r5, #10
 8016d8e:	e011      	b.n	8016db4 <_puts_r+0x88>
 8016d90:	4b1b      	ldr	r3, [pc, #108]	; (8016e00 <_puts_r+0xd4>)
 8016d92:	429c      	cmp	r4, r3
 8016d94:	d101      	bne.n	8016d9a <_puts_r+0x6e>
 8016d96:	68ac      	ldr	r4, [r5, #8]
 8016d98:	e7da      	b.n	8016d50 <_puts_r+0x24>
 8016d9a:	4b1a      	ldr	r3, [pc, #104]	; (8016e04 <_puts_r+0xd8>)
 8016d9c:	429c      	cmp	r4, r3
 8016d9e:	bf08      	it	eq
 8016da0:	68ec      	ldreq	r4, [r5, #12]
 8016da2:	e7d5      	b.n	8016d50 <_puts_r+0x24>
 8016da4:	4621      	mov	r1, r4
 8016da6:	4628      	mov	r0, r5
 8016da8:	f000 f898 	bl	8016edc <__swsetup_r>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d0dd      	beq.n	8016d6c <_puts_r+0x40>
 8016db0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016db6:	07da      	lsls	r2, r3, #31
 8016db8:	d405      	bmi.n	8016dc6 <_puts_r+0x9a>
 8016dba:	89a3      	ldrh	r3, [r4, #12]
 8016dbc:	059b      	lsls	r3, r3, #22
 8016dbe:	d402      	bmi.n	8016dc6 <_puts_r+0x9a>
 8016dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dc2:	f000 fab2 	bl	801732a <__retarget_lock_release_recursive>
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	bd70      	pop	{r4, r5, r6, pc}
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	da04      	bge.n	8016dd8 <_puts_r+0xac>
 8016dce:	69a2      	ldr	r2, [r4, #24]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	dc06      	bgt.n	8016de2 <_puts_r+0xb6>
 8016dd4:	290a      	cmp	r1, #10
 8016dd6:	d004      	beq.n	8016de2 <_puts_r+0xb6>
 8016dd8:	6823      	ldr	r3, [r4, #0]
 8016dda:	1c5a      	adds	r2, r3, #1
 8016ddc:	6022      	str	r2, [r4, #0]
 8016dde:	7019      	strb	r1, [r3, #0]
 8016de0:	e7c5      	b.n	8016d6e <_puts_r+0x42>
 8016de2:	4622      	mov	r2, r4
 8016de4:	4628      	mov	r0, r5
 8016de6:	f000 f827 	bl	8016e38 <__swbuf_r>
 8016dea:	3001      	adds	r0, #1
 8016dec:	d1bf      	bne.n	8016d6e <_puts_r+0x42>
 8016dee:	e7df      	b.n	8016db0 <_puts_r+0x84>
 8016df0:	6823      	ldr	r3, [r4, #0]
 8016df2:	250a      	movs	r5, #10
 8016df4:	1c5a      	adds	r2, r3, #1
 8016df6:	6022      	str	r2, [r4, #0]
 8016df8:	701d      	strb	r5, [r3, #0]
 8016dfa:	e7db      	b.n	8016db4 <_puts_r+0x88>
 8016dfc:	08017974 	.word	0x08017974
 8016e00:	08017994 	.word	0x08017994
 8016e04:	08017954 	.word	0x08017954

08016e08 <puts>:
 8016e08:	4b02      	ldr	r3, [pc, #8]	; (8016e14 <puts+0xc>)
 8016e0a:	4601      	mov	r1, r0
 8016e0c:	6818      	ldr	r0, [r3, #0]
 8016e0e:	f7ff bf8d 	b.w	8016d2c <_puts_r>
 8016e12:	bf00      	nop
 8016e14:	240000a4 	.word	0x240000a4

08016e18 <_sbrk_r>:
 8016e18:	b538      	push	{r3, r4, r5, lr}
 8016e1a:	4d06      	ldr	r5, [pc, #24]	; (8016e34 <_sbrk_r+0x1c>)
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	4604      	mov	r4, r0
 8016e20:	4608      	mov	r0, r1
 8016e22:	602b      	str	r3, [r5, #0]
 8016e24:	f7ec ffce 	bl	8003dc4 <_sbrk>
 8016e28:	1c43      	adds	r3, r0, #1
 8016e2a:	d102      	bne.n	8016e32 <_sbrk_r+0x1a>
 8016e2c:	682b      	ldr	r3, [r5, #0]
 8016e2e:	b103      	cbz	r3, 8016e32 <_sbrk_r+0x1a>
 8016e30:	6023      	str	r3, [r4, #0]
 8016e32:	bd38      	pop	{r3, r4, r5, pc}
 8016e34:	24005a8c 	.word	0x24005a8c

08016e38 <__swbuf_r>:
 8016e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e3a:	460e      	mov	r6, r1
 8016e3c:	4614      	mov	r4, r2
 8016e3e:	4605      	mov	r5, r0
 8016e40:	b118      	cbz	r0, 8016e4a <__swbuf_r+0x12>
 8016e42:	6983      	ldr	r3, [r0, #24]
 8016e44:	b90b      	cbnz	r3, 8016e4a <__swbuf_r+0x12>
 8016e46:	f000 f9d1 	bl	80171ec <__sinit>
 8016e4a:	4b21      	ldr	r3, [pc, #132]	; (8016ed0 <__swbuf_r+0x98>)
 8016e4c:	429c      	cmp	r4, r3
 8016e4e:	d12b      	bne.n	8016ea8 <__swbuf_r+0x70>
 8016e50:	686c      	ldr	r4, [r5, #4]
 8016e52:	69a3      	ldr	r3, [r4, #24]
 8016e54:	60a3      	str	r3, [r4, #8]
 8016e56:	89a3      	ldrh	r3, [r4, #12]
 8016e58:	071a      	lsls	r2, r3, #28
 8016e5a:	d52f      	bpl.n	8016ebc <__swbuf_r+0x84>
 8016e5c:	6923      	ldr	r3, [r4, #16]
 8016e5e:	b36b      	cbz	r3, 8016ebc <__swbuf_r+0x84>
 8016e60:	6923      	ldr	r3, [r4, #16]
 8016e62:	6820      	ldr	r0, [r4, #0]
 8016e64:	1ac0      	subs	r0, r0, r3
 8016e66:	6963      	ldr	r3, [r4, #20]
 8016e68:	b2f6      	uxtb	r6, r6
 8016e6a:	4283      	cmp	r3, r0
 8016e6c:	4637      	mov	r7, r6
 8016e6e:	dc04      	bgt.n	8016e7a <__swbuf_r+0x42>
 8016e70:	4621      	mov	r1, r4
 8016e72:	4628      	mov	r0, r5
 8016e74:	f000 f926 	bl	80170c4 <_fflush_r>
 8016e78:	bb30      	cbnz	r0, 8016ec8 <__swbuf_r+0x90>
 8016e7a:	68a3      	ldr	r3, [r4, #8]
 8016e7c:	3b01      	subs	r3, #1
 8016e7e:	60a3      	str	r3, [r4, #8]
 8016e80:	6823      	ldr	r3, [r4, #0]
 8016e82:	1c5a      	adds	r2, r3, #1
 8016e84:	6022      	str	r2, [r4, #0]
 8016e86:	701e      	strb	r6, [r3, #0]
 8016e88:	6963      	ldr	r3, [r4, #20]
 8016e8a:	3001      	adds	r0, #1
 8016e8c:	4283      	cmp	r3, r0
 8016e8e:	d004      	beq.n	8016e9a <__swbuf_r+0x62>
 8016e90:	89a3      	ldrh	r3, [r4, #12]
 8016e92:	07db      	lsls	r3, r3, #31
 8016e94:	d506      	bpl.n	8016ea4 <__swbuf_r+0x6c>
 8016e96:	2e0a      	cmp	r6, #10
 8016e98:	d104      	bne.n	8016ea4 <__swbuf_r+0x6c>
 8016e9a:	4621      	mov	r1, r4
 8016e9c:	4628      	mov	r0, r5
 8016e9e:	f000 f911 	bl	80170c4 <_fflush_r>
 8016ea2:	b988      	cbnz	r0, 8016ec8 <__swbuf_r+0x90>
 8016ea4:	4638      	mov	r0, r7
 8016ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ea8:	4b0a      	ldr	r3, [pc, #40]	; (8016ed4 <__swbuf_r+0x9c>)
 8016eaa:	429c      	cmp	r4, r3
 8016eac:	d101      	bne.n	8016eb2 <__swbuf_r+0x7a>
 8016eae:	68ac      	ldr	r4, [r5, #8]
 8016eb0:	e7cf      	b.n	8016e52 <__swbuf_r+0x1a>
 8016eb2:	4b09      	ldr	r3, [pc, #36]	; (8016ed8 <__swbuf_r+0xa0>)
 8016eb4:	429c      	cmp	r4, r3
 8016eb6:	bf08      	it	eq
 8016eb8:	68ec      	ldreq	r4, [r5, #12]
 8016eba:	e7ca      	b.n	8016e52 <__swbuf_r+0x1a>
 8016ebc:	4621      	mov	r1, r4
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	f000 f80c 	bl	8016edc <__swsetup_r>
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	d0cb      	beq.n	8016e60 <__swbuf_r+0x28>
 8016ec8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016ecc:	e7ea      	b.n	8016ea4 <__swbuf_r+0x6c>
 8016ece:	bf00      	nop
 8016ed0:	08017974 	.word	0x08017974
 8016ed4:	08017994 	.word	0x08017994
 8016ed8:	08017954 	.word	0x08017954

08016edc <__swsetup_r>:
 8016edc:	4b32      	ldr	r3, [pc, #200]	; (8016fa8 <__swsetup_r+0xcc>)
 8016ede:	b570      	push	{r4, r5, r6, lr}
 8016ee0:	681d      	ldr	r5, [r3, #0]
 8016ee2:	4606      	mov	r6, r0
 8016ee4:	460c      	mov	r4, r1
 8016ee6:	b125      	cbz	r5, 8016ef2 <__swsetup_r+0x16>
 8016ee8:	69ab      	ldr	r3, [r5, #24]
 8016eea:	b913      	cbnz	r3, 8016ef2 <__swsetup_r+0x16>
 8016eec:	4628      	mov	r0, r5
 8016eee:	f000 f97d 	bl	80171ec <__sinit>
 8016ef2:	4b2e      	ldr	r3, [pc, #184]	; (8016fac <__swsetup_r+0xd0>)
 8016ef4:	429c      	cmp	r4, r3
 8016ef6:	d10f      	bne.n	8016f18 <__swsetup_r+0x3c>
 8016ef8:	686c      	ldr	r4, [r5, #4]
 8016efa:	89a3      	ldrh	r3, [r4, #12]
 8016efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f00:	0719      	lsls	r1, r3, #28
 8016f02:	d42c      	bmi.n	8016f5e <__swsetup_r+0x82>
 8016f04:	06dd      	lsls	r5, r3, #27
 8016f06:	d411      	bmi.n	8016f2c <__swsetup_r+0x50>
 8016f08:	2309      	movs	r3, #9
 8016f0a:	6033      	str	r3, [r6, #0]
 8016f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016f10:	81a3      	strh	r3, [r4, #12]
 8016f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f16:	e03e      	b.n	8016f96 <__swsetup_r+0xba>
 8016f18:	4b25      	ldr	r3, [pc, #148]	; (8016fb0 <__swsetup_r+0xd4>)
 8016f1a:	429c      	cmp	r4, r3
 8016f1c:	d101      	bne.n	8016f22 <__swsetup_r+0x46>
 8016f1e:	68ac      	ldr	r4, [r5, #8]
 8016f20:	e7eb      	b.n	8016efa <__swsetup_r+0x1e>
 8016f22:	4b24      	ldr	r3, [pc, #144]	; (8016fb4 <__swsetup_r+0xd8>)
 8016f24:	429c      	cmp	r4, r3
 8016f26:	bf08      	it	eq
 8016f28:	68ec      	ldreq	r4, [r5, #12]
 8016f2a:	e7e6      	b.n	8016efa <__swsetup_r+0x1e>
 8016f2c:	0758      	lsls	r0, r3, #29
 8016f2e:	d512      	bpl.n	8016f56 <__swsetup_r+0x7a>
 8016f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f32:	b141      	cbz	r1, 8016f46 <__swsetup_r+0x6a>
 8016f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f38:	4299      	cmp	r1, r3
 8016f3a:	d002      	beq.n	8016f42 <__swsetup_r+0x66>
 8016f3c:	4630      	mov	r0, r6
 8016f3e:	f7ff fe15 	bl	8016b6c <_free_r>
 8016f42:	2300      	movs	r3, #0
 8016f44:	6363      	str	r3, [r4, #52]	; 0x34
 8016f46:	89a3      	ldrh	r3, [r4, #12]
 8016f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016f4c:	81a3      	strh	r3, [r4, #12]
 8016f4e:	2300      	movs	r3, #0
 8016f50:	6063      	str	r3, [r4, #4]
 8016f52:	6923      	ldr	r3, [r4, #16]
 8016f54:	6023      	str	r3, [r4, #0]
 8016f56:	89a3      	ldrh	r3, [r4, #12]
 8016f58:	f043 0308 	orr.w	r3, r3, #8
 8016f5c:	81a3      	strh	r3, [r4, #12]
 8016f5e:	6923      	ldr	r3, [r4, #16]
 8016f60:	b94b      	cbnz	r3, 8016f76 <__swsetup_r+0x9a>
 8016f62:	89a3      	ldrh	r3, [r4, #12]
 8016f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f6c:	d003      	beq.n	8016f76 <__swsetup_r+0x9a>
 8016f6e:	4621      	mov	r1, r4
 8016f70:	4630      	mov	r0, r6
 8016f72:	f000 fa01 	bl	8017378 <__smakebuf_r>
 8016f76:	89a0      	ldrh	r0, [r4, #12]
 8016f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f7c:	f010 0301 	ands.w	r3, r0, #1
 8016f80:	d00a      	beq.n	8016f98 <__swsetup_r+0xbc>
 8016f82:	2300      	movs	r3, #0
 8016f84:	60a3      	str	r3, [r4, #8]
 8016f86:	6963      	ldr	r3, [r4, #20]
 8016f88:	425b      	negs	r3, r3
 8016f8a:	61a3      	str	r3, [r4, #24]
 8016f8c:	6923      	ldr	r3, [r4, #16]
 8016f8e:	b943      	cbnz	r3, 8016fa2 <__swsetup_r+0xc6>
 8016f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016f94:	d1ba      	bne.n	8016f0c <__swsetup_r+0x30>
 8016f96:	bd70      	pop	{r4, r5, r6, pc}
 8016f98:	0781      	lsls	r1, r0, #30
 8016f9a:	bf58      	it	pl
 8016f9c:	6963      	ldrpl	r3, [r4, #20]
 8016f9e:	60a3      	str	r3, [r4, #8]
 8016fa0:	e7f4      	b.n	8016f8c <__swsetup_r+0xb0>
 8016fa2:	2000      	movs	r0, #0
 8016fa4:	e7f7      	b.n	8016f96 <__swsetup_r+0xba>
 8016fa6:	bf00      	nop
 8016fa8:	240000a4 	.word	0x240000a4
 8016fac:	08017974 	.word	0x08017974
 8016fb0:	08017994 	.word	0x08017994
 8016fb4:	08017954 	.word	0x08017954

08016fb8 <__sflush_r>:
 8016fb8:	898a      	ldrh	r2, [r1, #12]
 8016fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fbe:	4605      	mov	r5, r0
 8016fc0:	0710      	lsls	r0, r2, #28
 8016fc2:	460c      	mov	r4, r1
 8016fc4:	d458      	bmi.n	8017078 <__sflush_r+0xc0>
 8016fc6:	684b      	ldr	r3, [r1, #4]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	dc05      	bgt.n	8016fd8 <__sflush_r+0x20>
 8016fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	dc02      	bgt.n	8016fd8 <__sflush_r+0x20>
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016fda:	2e00      	cmp	r6, #0
 8016fdc:	d0f9      	beq.n	8016fd2 <__sflush_r+0x1a>
 8016fde:	2300      	movs	r3, #0
 8016fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016fe4:	682f      	ldr	r7, [r5, #0]
 8016fe6:	602b      	str	r3, [r5, #0]
 8016fe8:	d032      	beq.n	8017050 <__sflush_r+0x98>
 8016fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016fec:	89a3      	ldrh	r3, [r4, #12]
 8016fee:	075a      	lsls	r2, r3, #29
 8016ff0:	d505      	bpl.n	8016ffe <__sflush_r+0x46>
 8016ff2:	6863      	ldr	r3, [r4, #4]
 8016ff4:	1ac0      	subs	r0, r0, r3
 8016ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016ff8:	b10b      	cbz	r3, 8016ffe <__sflush_r+0x46>
 8016ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ffc:	1ac0      	subs	r0, r0, r3
 8016ffe:	2300      	movs	r3, #0
 8017000:	4602      	mov	r2, r0
 8017002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017004:	6a21      	ldr	r1, [r4, #32]
 8017006:	4628      	mov	r0, r5
 8017008:	47b0      	blx	r6
 801700a:	1c43      	adds	r3, r0, #1
 801700c:	89a3      	ldrh	r3, [r4, #12]
 801700e:	d106      	bne.n	801701e <__sflush_r+0x66>
 8017010:	6829      	ldr	r1, [r5, #0]
 8017012:	291d      	cmp	r1, #29
 8017014:	d82c      	bhi.n	8017070 <__sflush_r+0xb8>
 8017016:	4a2a      	ldr	r2, [pc, #168]	; (80170c0 <__sflush_r+0x108>)
 8017018:	40ca      	lsrs	r2, r1
 801701a:	07d6      	lsls	r6, r2, #31
 801701c:	d528      	bpl.n	8017070 <__sflush_r+0xb8>
 801701e:	2200      	movs	r2, #0
 8017020:	6062      	str	r2, [r4, #4]
 8017022:	04d9      	lsls	r1, r3, #19
 8017024:	6922      	ldr	r2, [r4, #16]
 8017026:	6022      	str	r2, [r4, #0]
 8017028:	d504      	bpl.n	8017034 <__sflush_r+0x7c>
 801702a:	1c42      	adds	r2, r0, #1
 801702c:	d101      	bne.n	8017032 <__sflush_r+0x7a>
 801702e:	682b      	ldr	r3, [r5, #0]
 8017030:	b903      	cbnz	r3, 8017034 <__sflush_r+0x7c>
 8017032:	6560      	str	r0, [r4, #84]	; 0x54
 8017034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017036:	602f      	str	r7, [r5, #0]
 8017038:	2900      	cmp	r1, #0
 801703a:	d0ca      	beq.n	8016fd2 <__sflush_r+0x1a>
 801703c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017040:	4299      	cmp	r1, r3
 8017042:	d002      	beq.n	801704a <__sflush_r+0x92>
 8017044:	4628      	mov	r0, r5
 8017046:	f7ff fd91 	bl	8016b6c <_free_r>
 801704a:	2000      	movs	r0, #0
 801704c:	6360      	str	r0, [r4, #52]	; 0x34
 801704e:	e7c1      	b.n	8016fd4 <__sflush_r+0x1c>
 8017050:	6a21      	ldr	r1, [r4, #32]
 8017052:	2301      	movs	r3, #1
 8017054:	4628      	mov	r0, r5
 8017056:	47b0      	blx	r6
 8017058:	1c41      	adds	r1, r0, #1
 801705a:	d1c7      	bne.n	8016fec <__sflush_r+0x34>
 801705c:	682b      	ldr	r3, [r5, #0]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d0c4      	beq.n	8016fec <__sflush_r+0x34>
 8017062:	2b1d      	cmp	r3, #29
 8017064:	d001      	beq.n	801706a <__sflush_r+0xb2>
 8017066:	2b16      	cmp	r3, #22
 8017068:	d101      	bne.n	801706e <__sflush_r+0xb6>
 801706a:	602f      	str	r7, [r5, #0]
 801706c:	e7b1      	b.n	8016fd2 <__sflush_r+0x1a>
 801706e:	89a3      	ldrh	r3, [r4, #12]
 8017070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017074:	81a3      	strh	r3, [r4, #12]
 8017076:	e7ad      	b.n	8016fd4 <__sflush_r+0x1c>
 8017078:	690f      	ldr	r7, [r1, #16]
 801707a:	2f00      	cmp	r7, #0
 801707c:	d0a9      	beq.n	8016fd2 <__sflush_r+0x1a>
 801707e:	0793      	lsls	r3, r2, #30
 8017080:	680e      	ldr	r6, [r1, #0]
 8017082:	bf08      	it	eq
 8017084:	694b      	ldreq	r3, [r1, #20]
 8017086:	600f      	str	r7, [r1, #0]
 8017088:	bf18      	it	ne
 801708a:	2300      	movne	r3, #0
 801708c:	eba6 0807 	sub.w	r8, r6, r7
 8017090:	608b      	str	r3, [r1, #8]
 8017092:	f1b8 0f00 	cmp.w	r8, #0
 8017096:	dd9c      	ble.n	8016fd2 <__sflush_r+0x1a>
 8017098:	6a21      	ldr	r1, [r4, #32]
 801709a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801709c:	4643      	mov	r3, r8
 801709e:	463a      	mov	r2, r7
 80170a0:	4628      	mov	r0, r5
 80170a2:	47b0      	blx	r6
 80170a4:	2800      	cmp	r0, #0
 80170a6:	dc06      	bgt.n	80170b6 <__sflush_r+0xfe>
 80170a8:	89a3      	ldrh	r3, [r4, #12]
 80170aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170ae:	81a3      	strh	r3, [r4, #12]
 80170b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170b4:	e78e      	b.n	8016fd4 <__sflush_r+0x1c>
 80170b6:	4407      	add	r7, r0
 80170b8:	eba8 0800 	sub.w	r8, r8, r0
 80170bc:	e7e9      	b.n	8017092 <__sflush_r+0xda>
 80170be:	bf00      	nop
 80170c0:	20400001 	.word	0x20400001

080170c4 <_fflush_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	690b      	ldr	r3, [r1, #16]
 80170c8:	4605      	mov	r5, r0
 80170ca:	460c      	mov	r4, r1
 80170cc:	b913      	cbnz	r3, 80170d4 <_fflush_r+0x10>
 80170ce:	2500      	movs	r5, #0
 80170d0:	4628      	mov	r0, r5
 80170d2:	bd38      	pop	{r3, r4, r5, pc}
 80170d4:	b118      	cbz	r0, 80170de <_fflush_r+0x1a>
 80170d6:	6983      	ldr	r3, [r0, #24]
 80170d8:	b90b      	cbnz	r3, 80170de <_fflush_r+0x1a>
 80170da:	f000 f887 	bl	80171ec <__sinit>
 80170de:	4b14      	ldr	r3, [pc, #80]	; (8017130 <_fflush_r+0x6c>)
 80170e0:	429c      	cmp	r4, r3
 80170e2:	d11b      	bne.n	801711c <_fflush_r+0x58>
 80170e4:	686c      	ldr	r4, [r5, #4]
 80170e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d0ef      	beq.n	80170ce <_fflush_r+0xa>
 80170ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80170f0:	07d0      	lsls	r0, r2, #31
 80170f2:	d404      	bmi.n	80170fe <_fflush_r+0x3a>
 80170f4:	0599      	lsls	r1, r3, #22
 80170f6:	d402      	bmi.n	80170fe <_fflush_r+0x3a>
 80170f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170fa:	f000 f915 	bl	8017328 <__retarget_lock_acquire_recursive>
 80170fe:	4628      	mov	r0, r5
 8017100:	4621      	mov	r1, r4
 8017102:	f7ff ff59 	bl	8016fb8 <__sflush_r>
 8017106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017108:	07da      	lsls	r2, r3, #31
 801710a:	4605      	mov	r5, r0
 801710c:	d4e0      	bmi.n	80170d0 <_fflush_r+0xc>
 801710e:	89a3      	ldrh	r3, [r4, #12]
 8017110:	059b      	lsls	r3, r3, #22
 8017112:	d4dd      	bmi.n	80170d0 <_fflush_r+0xc>
 8017114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017116:	f000 f908 	bl	801732a <__retarget_lock_release_recursive>
 801711a:	e7d9      	b.n	80170d0 <_fflush_r+0xc>
 801711c:	4b05      	ldr	r3, [pc, #20]	; (8017134 <_fflush_r+0x70>)
 801711e:	429c      	cmp	r4, r3
 8017120:	d101      	bne.n	8017126 <_fflush_r+0x62>
 8017122:	68ac      	ldr	r4, [r5, #8]
 8017124:	e7df      	b.n	80170e6 <_fflush_r+0x22>
 8017126:	4b04      	ldr	r3, [pc, #16]	; (8017138 <_fflush_r+0x74>)
 8017128:	429c      	cmp	r4, r3
 801712a:	bf08      	it	eq
 801712c:	68ec      	ldreq	r4, [r5, #12]
 801712e:	e7da      	b.n	80170e6 <_fflush_r+0x22>
 8017130:	08017974 	.word	0x08017974
 8017134:	08017994 	.word	0x08017994
 8017138:	08017954 	.word	0x08017954

0801713c <std>:
 801713c:	2300      	movs	r3, #0
 801713e:	b510      	push	{r4, lr}
 8017140:	4604      	mov	r4, r0
 8017142:	e9c0 3300 	strd	r3, r3, [r0]
 8017146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801714a:	6083      	str	r3, [r0, #8]
 801714c:	8181      	strh	r1, [r0, #12]
 801714e:	6643      	str	r3, [r0, #100]	; 0x64
 8017150:	81c2      	strh	r2, [r0, #14]
 8017152:	6183      	str	r3, [r0, #24]
 8017154:	4619      	mov	r1, r3
 8017156:	2208      	movs	r2, #8
 8017158:	305c      	adds	r0, #92	; 0x5c
 801715a:	f7ff fcff 	bl	8016b5c <memset>
 801715e:	4b05      	ldr	r3, [pc, #20]	; (8017174 <std+0x38>)
 8017160:	6263      	str	r3, [r4, #36]	; 0x24
 8017162:	4b05      	ldr	r3, [pc, #20]	; (8017178 <std+0x3c>)
 8017164:	62a3      	str	r3, [r4, #40]	; 0x28
 8017166:	4b05      	ldr	r3, [pc, #20]	; (801717c <std+0x40>)
 8017168:	62e3      	str	r3, [r4, #44]	; 0x2c
 801716a:	4b05      	ldr	r3, [pc, #20]	; (8017180 <std+0x44>)
 801716c:	6224      	str	r4, [r4, #32]
 801716e:	6323      	str	r3, [r4, #48]	; 0x30
 8017170:	bd10      	pop	{r4, pc}
 8017172:	bf00      	nop
 8017174:	08017411 	.word	0x08017411
 8017178:	08017433 	.word	0x08017433
 801717c:	0801746b 	.word	0x0801746b
 8017180:	0801748f 	.word	0x0801748f

08017184 <_cleanup_r>:
 8017184:	4901      	ldr	r1, [pc, #4]	; (801718c <_cleanup_r+0x8>)
 8017186:	f000 b8af 	b.w	80172e8 <_fwalk_reent>
 801718a:	bf00      	nop
 801718c:	080170c5 	.word	0x080170c5

08017190 <__sfmoreglue>:
 8017190:	b570      	push	{r4, r5, r6, lr}
 8017192:	2268      	movs	r2, #104	; 0x68
 8017194:	1e4d      	subs	r5, r1, #1
 8017196:	4355      	muls	r5, r2
 8017198:	460e      	mov	r6, r1
 801719a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801719e:	f7ff fd51 	bl	8016c44 <_malloc_r>
 80171a2:	4604      	mov	r4, r0
 80171a4:	b140      	cbz	r0, 80171b8 <__sfmoreglue+0x28>
 80171a6:	2100      	movs	r1, #0
 80171a8:	e9c0 1600 	strd	r1, r6, [r0]
 80171ac:	300c      	adds	r0, #12
 80171ae:	60a0      	str	r0, [r4, #8]
 80171b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80171b4:	f7ff fcd2 	bl	8016b5c <memset>
 80171b8:	4620      	mov	r0, r4
 80171ba:	bd70      	pop	{r4, r5, r6, pc}

080171bc <__sfp_lock_acquire>:
 80171bc:	4801      	ldr	r0, [pc, #4]	; (80171c4 <__sfp_lock_acquire+0x8>)
 80171be:	f000 b8b3 	b.w	8017328 <__retarget_lock_acquire_recursive>
 80171c2:	bf00      	nop
 80171c4:	24005a89 	.word	0x24005a89

080171c8 <__sfp_lock_release>:
 80171c8:	4801      	ldr	r0, [pc, #4]	; (80171d0 <__sfp_lock_release+0x8>)
 80171ca:	f000 b8ae 	b.w	801732a <__retarget_lock_release_recursive>
 80171ce:	bf00      	nop
 80171d0:	24005a89 	.word	0x24005a89

080171d4 <__sinit_lock_acquire>:
 80171d4:	4801      	ldr	r0, [pc, #4]	; (80171dc <__sinit_lock_acquire+0x8>)
 80171d6:	f000 b8a7 	b.w	8017328 <__retarget_lock_acquire_recursive>
 80171da:	bf00      	nop
 80171dc:	24005a8a 	.word	0x24005a8a

080171e0 <__sinit_lock_release>:
 80171e0:	4801      	ldr	r0, [pc, #4]	; (80171e8 <__sinit_lock_release+0x8>)
 80171e2:	f000 b8a2 	b.w	801732a <__retarget_lock_release_recursive>
 80171e6:	bf00      	nop
 80171e8:	24005a8a 	.word	0x24005a8a

080171ec <__sinit>:
 80171ec:	b510      	push	{r4, lr}
 80171ee:	4604      	mov	r4, r0
 80171f0:	f7ff fff0 	bl	80171d4 <__sinit_lock_acquire>
 80171f4:	69a3      	ldr	r3, [r4, #24]
 80171f6:	b11b      	cbz	r3, 8017200 <__sinit+0x14>
 80171f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171fc:	f7ff bff0 	b.w	80171e0 <__sinit_lock_release>
 8017200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017204:	6523      	str	r3, [r4, #80]	; 0x50
 8017206:	4b13      	ldr	r3, [pc, #76]	; (8017254 <__sinit+0x68>)
 8017208:	4a13      	ldr	r2, [pc, #76]	; (8017258 <__sinit+0x6c>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	62a2      	str	r2, [r4, #40]	; 0x28
 801720e:	42a3      	cmp	r3, r4
 8017210:	bf04      	itt	eq
 8017212:	2301      	moveq	r3, #1
 8017214:	61a3      	streq	r3, [r4, #24]
 8017216:	4620      	mov	r0, r4
 8017218:	f000 f820 	bl	801725c <__sfp>
 801721c:	6060      	str	r0, [r4, #4]
 801721e:	4620      	mov	r0, r4
 8017220:	f000 f81c 	bl	801725c <__sfp>
 8017224:	60a0      	str	r0, [r4, #8]
 8017226:	4620      	mov	r0, r4
 8017228:	f000 f818 	bl	801725c <__sfp>
 801722c:	2200      	movs	r2, #0
 801722e:	60e0      	str	r0, [r4, #12]
 8017230:	2104      	movs	r1, #4
 8017232:	6860      	ldr	r0, [r4, #4]
 8017234:	f7ff ff82 	bl	801713c <std>
 8017238:	68a0      	ldr	r0, [r4, #8]
 801723a:	2201      	movs	r2, #1
 801723c:	2109      	movs	r1, #9
 801723e:	f7ff ff7d 	bl	801713c <std>
 8017242:	68e0      	ldr	r0, [r4, #12]
 8017244:	2202      	movs	r2, #2
 8017246:	2112      	movs	r1, #18
 8017248:	f7ff ff78 	bl	801713c <std>
 801724c:	2301      	movs	r3, #1
 801724e:	61a3      	str	r3, [r4, #24]
 8017250:	e7d2      	b.n	80171f8 <__sinit+0xc>
 8017252:	bf00      	nop
 8017254:	08017950 	.word	0x08017950
 8017258:	08017185 	.word	0x08017185

0801725c <__sfp>:
 801725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725e:	4607      	mov	r7, r0
 8017260:	f7ff ffac 	bl	80171bc <__sfp_lock_acquire>
 8017264:	4b1e      	ldr	r3, [pc, #120]	; (80172e0 <__sfp+0x84>)
 8017266:	681e      	ldr	r6, [r3, #0]
 8017268:	69b3      	ldr	r3, [r6, #24]
 801726a:	b913      	cbnz	r3, 8017272 <__sfp+0x16>
 801726c:	4630      	mov	r0, r6
 801726e:	f7ff ffbd 	bl	80171ec <__sinit>
 8017272:	3648      	adds	r6, #72	; 0x48
 8017274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017278:	3b01      	subs	r3, #1
 801727a:	d503      	bpl.n	8017284 <__sfp+0x28>
 801727c:	6833      	ldr	r3, [r6, #0]
 801727e:	b30b      	cbz	r3, 80172c4 <__sfp+0x68>
 8017280:	6836      	ldr	r6, [r6, #0]
 8017282:	e7f7      	b.n	8017274 <__sfp+0x18>
 8017284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017288:	b9d5      	cbnz	r5, 80172c0 <__sfp+0x64>
 801728a:	4b16      	ldr	r3, [pc, #88]	; (80172e4 <__sfp+0x88>)
 801728c:	60e3      	str	r3, [r4, #12]
 801728e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017292:	6665      	str	r5, [r4, #100]	; 0x64
 8017294:	f000 f847 	bl	8017326 <__retarget_lock_init_recursive>
 8017298:	f7ff ff96 	bl	80171c8 <__sfp_lock_release>
 801729c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80172a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80172a4:	6025      	str	r5, [r4, #0]
 80172a6:	61a5      	str	r5, [r4, #24]
 80172a8:	2208      	movs	r2, #8
 80172aa:	4629      	mov	r1, r5
 80172ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80172b0:	f7ff fc54 	bl	8016b5c <memset>
 80172b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80172b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80172bc:	4620      	mov	r0, r4
 80172be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172c0:	3468      	adds	r4, #104	; 0x68
 80172c2:	e7d9      	b.n	8017278 <__sfp+0x1c>
 80172c4:	2104      	movs	r1, #4
 80172c6:	4638      	mov	r0, r7
 80172c8:	f7ff ff62 	bl	8017190 <__sfmoreglue>
 80172cc:	4604      	mov	r4, r0
 80172ce:	6030      	str	r0, [r6, #0]
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d1d5      	bne.n	8017280 <__sfp+0x24>
 80172d4:	f7ff ff78 	bl	80171c8 <__sfp_lock_release>
 80172d8:	230c      	movs	r3, #12
 80172da:	603b      	str	r3, [r7, #0]
 80172dc:	e7ee      	b.n	80172bc <__sfp+0x60>
 80172de:	bf00      	nop
 80172e0:	08017950 	.word	0x08017950
 80172e4:	ffff0001 	.word	0xffff0001

080172e8 <_fwalk_reent>:
 80172e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172ec:	4606      	mov	r6, r0
 80172ee:	4688      	mov	r8, r1
 80172f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80172f4:	2700      	movs	r7, #0
 80172f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80172fa:	f1b9 0901 	subs.w	r9, r9, #1
 80172fe:	d505      	bpl.n	801730c <_fwalk_reent+0x24>
 8017300:	6824      	ldr	r4, [r4, #0]
 8017302:	2c00      	cmp	r4, #0
 8017304:	d1f7      	bne.n	80172f6 <_fwalk_reent+0xe>
 8017306:	4638      	mov	r0, r7
 8017308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801730c:	89ab      	ldrh	r3, [r5, #12]
 801730e:	2b01      	cmp	r3, #1
 8017310:	d907      	bls.n	8017322 <_fwalk_reent+0x3a>
 8017312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017316:	3301      	adds	r3, #1
 8017318:	d003      	beq.n	8017322 <_fwalk_reent+0x3a>
 801731a:	4629      	mov	r1, r5
 801731c:	4630      	mov	r0, r6
 801731e:	47c0      	blx	r8
 8017320:	4307      	orrs	r7, r0
 8017322:	3568      	adds	r5, #104	; 0x68
 8017324:	e7e9      	b.n	80172fa <_fwalk_reent+0x12>

08017326 <__retarget_lock_init_recursive>:
 8017326:	4770      	bx	lr

08017328 <__retarget_lock_acquire_recursive>:
 8017328:	4770      	bx	lr

0801732a <__retarget_lock_release_recursive>:
 801732a:	4770      	bx	lr

0801732c <__swhatbuf_r>:
 801732c:	b570      	push	{r4, r5, r6, lr}
 801732e:	460e      	mov	r6, r1
 8017330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017334:	2900      	cmp	r1, #0
 8017336:	b096      	sub	sp, #88	; 0x58
 8017338:	4614      	mov	r4, r2
 801733a:	461d      	mov	r5, r3
 801733c:	da08      	bge.n	8017350 <__swhatbuf_r+0x24>
 801733e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017342:	2200      	movs	r2, #0
 8017344:	602a      	str	r2, [r5, #0]
 8017346:	061a      	lsls	r2, r3, #24
 8017348:	d410      	bmi.n	801736c <__swhatbuf_r+0x40>
 801734a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801734e:	e00e      	b.n	801736e <__swhatbuf_r+0x42>
 8017350:	466a      	mov	r2, sp
 8017352:	f000 f8c3 	bl	80174dc <_fstat_r>
 8017356:	2800      	cmp	r0, #0
 8017358:	dbf1      	blt.n	801733e <__swhatbuf_r+0x12>
 801735a:	9a01      	ldr	r2, [sp, #4]
 801735c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017364:	425a      	negs	r2, r3
 8017366:	415a      	adcs	r2, r3
 8017368:	602a      	str	r2, [r5, #0]
 801736a:	e7ee      	b.n	801734a <__swhatbuf_r+0x1e>
 801736c:	2340      	movs	r3, #64	; 0x40
 801736e:	2000      	movs	r0, #0
 8017370:	6023      	str	r3, [r4, #0]
 8017372:	b016      	add	sp, #88	; 0x58
 8017374:	bd70      	pop	{r4, r5, r6, pc}
	...

08017378 <__smakebuf_r>:
 8017378:	898b      	ldrh	r3, [r1, #12]
 801737a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801737c:	079d      	lsls	r5, r3, #30
 801737e:	4606      	mov	r6, r0
 8017380:	460c      	mov	r4, r1
 8017382:	d507      	bpl.n	8017394 <__smakebuf_r+0x1c>
 8017384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017388:	6023      	str	r3, [r4, #0]
 801738a:	6123      	str	r3, [r4, #16]
 801738c:	2301      	movs	r3, #1
 801738e:	6163      	str	r3, [r4, #20]
 8017390:	b002      	add	sp, #8
 8017392:	bd70      	pop	{r4, r5, r6, pc}
 8017394:	ab01      	add	r3, sp, #4
 8017396:	466a      	mov	r2, sp
 8017398:	f7ff ffc8 	bl	801732c <__swhatbuf_r>
 801739c:	9900      	ldr	r1, [sp, #0]
 801739e:	4605      	mov	r5, r0
 80173a0:	4630      	mov	r0, r6
 80173a2:	f7ff fc4f 	bl	8016c44 <_malloc_r>
 80173a6:	b948      	cbnz	r0, 80173bc <__smakebuf_r+0x44>
 80173a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173ac:	059a      	lsls	r2, r3, #22
 80173ae:	d4ef      	bmi.n	8017390 <__smakebuf_r+0x18>
 80173b0:	f023 0303 	bic.w	r3, r3, #3
 80173b4:	f043 0302 	orr.w	r3, r3, #2
 80173b8:	81a3      	strh	r3, [r4, #12]
 80173ba:	e7e3      	b.n	8017384 <__smakebuf_r+0xc>
 80173bc:	4b0d      	ldr	r3, [pc, #52]	; (80173f4 <__smakebuf_r+0x7c>)
 80173be:	62b3      	str	r3, [r6, #40]	; 0x28
 80173c0:	89a3      	ldrh	r3, [r4, #12]
 80173c2:	6020      	str	r0, [r4, #0]
 80173c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173c8:	81a3      	strh	r3, [r4, #12]
 80173ca:	9b00      	ldr	r3, [sp, #0]
 80173cc:	6163      	str	r3, [r4, #20]
 80173ce:	9b01      	ldr	r3, [sp, #4]
 80173d0:	6120      	str	r0, [r4, #16]
 80173d2:	b15b      	cbz	r3, 80173ec <__smakebuf_r+0x74>
 80173d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80173d8:	4630      	mov	r0, r6
 80173da:	f000 f891 	bl	8017500 <_isatty_r>
 80173de:	b128      	cbz	r0, 80173ec <__smakebuf_r+0x74>
 80173e0:	89a3      	ldrh	r3, [r4, #12]
 80173e2:	f023 0303 	bic.w	r3, r3, #3
 80173e6:	f043 0301 	orr.w	r3, r3, #1
 80173ea:	81a3      	strh	r3, [r4, #12]
 80173ec:	89a0      	ldrh	r0, [r4, #12]
 80173ee:	4305      	orrs	r5, r0
 80173f0:	81a5      	strh	r5, [r4, #12]
 80173f2:	e7cd      	b.n	8017390 <__smakebuf_r+0x18>
 80173f4:	08017185 	.word	0x08017185

080173f8 <__malloc_lock>:
 80173f8:	4801      	ldr	r0, [pc, #4]	; (8017400 <__malloc_lock+0x8>)
 80173fa:	f7ff bf95 	b.w	8017328 <__retarget_lock_acquire_recursive>
 80173fe:	bf00      	nop
 8017400:	24005a88 	.word	0x24005a88

08017404 <__malloc_unlock>:
 8017404:	4801      	ldr	r0, [pc, #4]	; (801740c <__malloc_unlock+0x8>)
 8017406:	f7ff bf90 	b.w	801732a <__retarget_lock_release_recursive>
 801740a:	bf00      	nop
 801740c:	24005a88 	.word	0x24005a88

08017410 <__sread>:
 8017410:	b510      	push	{r4, lr}
 8017412:	460c      	mov	r4, r1
 8017414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017418:	f000 f894 	bl	8017544 <_read_r>
 801741c:	2800      	cmp	r0, #0
 801741e:	bfab      	itete	ge
 8017420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017422:	89a3      	ldrhlt	r3, [r4, #12]
 8017424:	181b      	addge	r3, r3, r0
 8017426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801742a:	bfac      	ite	ge
 801742c:	6563      	strge	r3, [r4, #84]	; 0x54
 801742e:	81a3      	strhlt	r3, [r4, #12]
 8017430:	bd10      	pop	{r4, pc}

08017432 <__swrite>:
 8017432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017436:	461f      	mov	r7, r3
 8017438:	898b      	ldrh	r3, [r1, #12]
 801743a:	05db      	lsls	r3, r3, #23
 801743c:	4605      	mov	r5, r0
 801743e:	460c      	mov	r4, r1
 8017440:	4616      	mov	r6, r2
 8017442:	d505      	bpl.n	8017450 <__swrite+0x1e>
 8017444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017448:	2302      	movs	r3, #2
 801744a:	2200      	movs	r2, #0
 801744c:	f000 f868 	bl	8017520 <_lseek_r>
 8017450:	89a3      	ldrh	r3, [r4, #12]
 8017452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801745a:	81a3      	strh	r3, [r4, #12]
 801745c:	4632      	mov	r2, r6
 801745e:	463b      	mov	r3, r7
 8017460:	4628      	mov	r0, r5
 8017462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017466:	f000 b817 	b.w	8017498 <_write_r>

0801746a <__sseek>:
 801746a:	b510      	push	{r4, lr}
 801746c:	460c      	mov	r4, r1
 801746e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017472:	f000 f855 	bl	8017520 <_lseek_r>
 8017476:	1c43      	adds	r3, r0, #1
 8017478:	89a3      	ldrh	r3, [r4, #12]
 801747a:	bf15      	itete	ne
 801747c:	6560      	strne	r0, [r4, #84]	; 0x54
 801747e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017486:	81a3      	strheq	r3, [r4, #12]
 8017488:	bf18      	it	ne
 801748a:	81a3      	strhne	r3, [r4, #12]
 801748c:	bd10      	pop	{r4, pc}

0801748e <__sclose>:
 801748e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017492:	f000 b813 	b.w	80174bc <_close_r>
	...

08017498 <_write_r>:
 8017498:	b538      	push	{r3, r4, r5, lr}
 801749a:	4d07      	ldr	r5, [pc, #28]	; (80174b8 <_write_r+0x20>)
 801749c:	4604      	mov	r4, r0
 801749e:	4608      	mov	r0, r1
 80174a0:	4611      	mov	r1, r2
 80174a2:	2200      	movs	r2, #0
 80174a4:	602a      	str	r2, [r5, #0]
 80174a6:	461a      	mov	r2, r3
 80174a8:	f7ec fc3b 	bl	8003d22 <_write>
 80174ac:	1c43      	adds	r3, r0, #1
 80174ae:	d102      	bne.n	80174b6 <_write_r+0x1e>
 80174b0:	682b      	ldr	r3, [r5, #0]
 80174b2:	b103      	cbz	r3, 80174b6 <_write_r+0x1e>
 80174b4:	6023      	str	r3, [r4, #0]
 80174b6:	bd38      	pop	{r3, r4, r5, pc}
 80174b8:	24005a8c 	.word	0x24005a8c

080174bc <_close_r>:
 80174bc:	b538      	push	{r3, r4, r5, lr}
 80174be:	4d06      	ldr	r5, [pc, #24]	; (80174d8 <_close_r+0x1c>)
 80174c0:	2300      	movs	r3, #0
 80174c2:	4604      	mov	r4, r0
 80174c4:	4608      	mov	r0, r1
 80174c6:	602b      	str	r3, [r5, #0]
 80174c8:	f7ec fc47 	bl	8003d5a <_close>
 80174cc:	1c43      	adds	r3, r0, #1
 80174ce:	d102      	bne.n	80174d6 <_close_r+0x1a>
 80174d0:	682b      	ldr	r3, [r5, #0]
 80174d2:	b103      	cbz	r3, 80174d6 <_close_r+0x1a>
 80174d4:	6023      	str	r3, [r4, #0]
 80174d6:	bd38      	pop	{r3, r4, r5, pc}
 80174d8:	24005a8c 	.word	0x24005a8c

080174dc <_fstat_r>:
 80174dc:	b538      	push	{r3, r4, r5, lr}
 80174de:	4d07      	ldr	r5, [pc, #28]	; (80174fc <_fstat_r+0x20>)
 80174e0:	2300      	movs	r3, #0
 80174e2:	4604      	mov	r4, r0
 80174e4:	4608      	mov	r0, r1
 80174e6:	4611      	mov	r1, r2
 80174e8:	602b      	str	r3, [r5, #0]
 80174ea:	f7ec fc42 	bl	8003d72 <_fstat>
 80174ee:	1c43      	adds	r3, r0, #1
 80174f0:	d102      	bne.n	80174f8 <_fstat_r+0x1c>
 80174f2:	682b      	ldr	r3, [r5, #0]
 80174f4:	b103      	cbz	r3, 80174f8 <_fstat_r+0x1c>
 80174f6:	6023      	str	r3, [r4, #0]
 80174f8:	bd38      	pop	{r3, r4, r5, pc}
 80174fa:	bf00      	nop
 80174fc:	24005a8c 	.word	0x24005a8c

08017500 <_isatty_r>:
 8017500:	b538      	push	{r3, r4, r5, lr}
 8017502:	4d06      	ldr	r5, [pc, #24]	; (801751c <_isatty_r+0x1c>)
 8017504:	2300      	movs	r3, #0
 8017506:	4604      	mov	r4, r0
 8017508:	4608      	mov	r0, r1
 801750a:	602b      	str	r3, [r5, #0]
 801750c:	f7ec fc41 	bl	8003d92 <_isatty>
 8017510:	1c43      	adds	r3, r0, #1
 8017512:	d102      	bne.n	801751a <_isatty_r+0x1a>
 8017514:	682b      	ldr	r3, [r5, #0]
 8017516:	b103      	cbz	r3, 801751a <_isatty_r+0x1a>
 8017518:	6023      	str	r3, [r4, #0]
 801751a:	bd38      	pop	{r3, r4, r5, pc}
 801751c:	24005a8c 	.word	0x24005a8c

08017520 <_lseek_r>:
 8017520:	b538      	push	{r3, r4, r5, lr}
 8017522:	4d07      	ldr	r5, [pc, #28]	; (8017540 <_lseek_r+0x20>)
 8017524:	4604      	mov	r4, r0
 8017526:	4608      	mov	r0, r1
 8017528:	4611      	mov	r1, r2
 801752a:	2200      	movs	r2, #0
 801752c:	602a      	str	r2, [r5, #0]
 801752e:	461a      	mov	r2, r3
 8017530:	f7ec fc3a 	bl	8003da8 <_lseek>
 8017534:	1c43      	adds	r3, r0, #1
 8017536:	d102      	bne.n	801753e <_lseek_r+0x1e>
 8017538:	682b      	ldr	r3, [r5, #0]
 801753a:	b103      	cbz	r3, 801753e <_lseek_r+0x1e>
 801753c:	6023      	str	r3, [r4, #0]
 801753e:	bd38      	pop	{r3, r4, r5, pc}
 8017540:	24005a8c 	.word	0x24005a8c

08017544 <_read_r>:
 8017544:	b538      	push	{r3, r4, r5, lr}
 8017546:	4d07      	ldr	r5, [pc, #28]	; (8017564 <_read_r+0x20>)
 8017548:	4604      	mov	r4, r0
 801754a:	4608      	mov	r0, r1
 801754c:	4611      	mov	r1, r2
 801754e:	2200      	movs	r2, #0
 8017550:	602a      	str	r2, [r5, #0]
 8017552:	461a      	mov	r2, r3
 8017554:	f7ec fbc8 	bl	8003ce8 <_read>
 8017558:	1c43      	adds	r3, r0, #1
 801755a:	d102      	bne.n	8017562 <_read_r+0x1e>
 801755c:	682b      	ldr	r3, [r5, #0]
 801755e:	b103      	cbz	r3, 8017562 <_read_r+0x1e>
 8017560:	6023      	str	r3, [r4, #0]
 8017562:	bd38      	pop	{r3, r4, r5, pc}
 8017564:	24005a8c 	.word	0x24005a8c

08017568 <_init>:
 8017568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801756a:	bf00      	nop
 801756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801756e:	bc08      	pop	{r3}
 8017570:	469e      	mov	lr, r3
 8017572:	4770      	bx	lr

08017574 <_fini>:
 8017574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017576:	bf00      	nop
 8017578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801757a:	bc08      	pop	{r3}
 801757c:	469e      	mov	lr, r3
 801757e:	4770      	bx	lr
