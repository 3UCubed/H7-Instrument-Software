
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aac0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801ad60  0801ad60  0002ad60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b1f8  0801b1f8  0002b1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b200  0801b200  0002b200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b204  0801b204  0002b204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000138  24000000  0801b208  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801b340  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801b340  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 10 .debug_info   000410d1  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d6b  00000000  00000000  00071237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc0  00000000  00000000  00078fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002878  00000000  00000000  0007bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046855  00000000  00000000  0007e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004331c  00000000  00000000  000c4c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196b64  00000000  00000000  00107f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029eab5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd08  00000000  00000000  0029eb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ad48 	.word	0x0801ad48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801ad48 	.word	0x0801ad48

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fe15 	bl	8006298 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f9cc 	bl	8003a10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 ff30 	bl	80074e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f9bf 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 f873 	bl	80067a0 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f9a6 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 f865 	bl	80067a0 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f998 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 f857 	bl	80067a0 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f98a 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 f849 	bl	80067a0 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f97c 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 f83a 	bl	80067a0 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f96d 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 f82b 	bl	80067a0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f95e 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 f81c 	bl	80067a0 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f94f 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 f80d 	bl	80067a0 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f940 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fffe 	bl	80067a0 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f931 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 ffef 	bl	80067a0 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f922 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 ffe0 	bl	80067a0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f913 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fcfd 	bl	8006298 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f8b4 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 ff68 	bl	80067a0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f89b 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 ff5a 	bl	80067a0 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f88d 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 ff4c 	bl	80067a0 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f87f 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 ff3e 	bl	80067a0 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f871 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fc68 	bl	800b2d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fc5c 	bl	800b2d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fc50 	bl	800b2d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 fafb 	bl	8008070 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 ffc6 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 f9b6 	bl	8005e50 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 f9b0 	bl	8005e50 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 fa9b 	bl	8008070 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ff66 	bl	8003a10 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fbd5 	bl	801a33c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fe63 	bl	8007864 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 ff34 	bl	8003a10 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 f87e 	bl	8007cc4 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ff1f 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a fb3b 	bl	800b2d0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 f9e6 	bl	8008070 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 feb1 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fda8 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fdbf 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fd7f 	bl	8007814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fd96 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fd77 	bl	8007814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fd8e 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fd6f 	bl	8007814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fd86 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fd67 	bl	8007814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fd7e 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fd5f 	bl	8007814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fd76 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fd57 	bl	8007814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fd6e 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fd4f 	bl	8007814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fd66 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fd47 	bl	8007814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fd5e 	bl	8007848 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 fab6 	bl	801a33c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a f8be 	bl	800afec <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00a f863 	bl	800afec <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 feb0 	bl	800ad1c <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1c      	cmp	r3, #28
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fe04 	bl	800ad1c <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 ff10 	bl	800afec <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fead 	bl	800afec <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fcfa 	bl	800ad1c <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fdd8 	bl	800afec <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fbe3 	bl	800ad1c <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fcf0 	bl	800afec <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fda2 	bl	801a33c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fbcb 	bl	800afec <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 fa19 	bl	800ad1c <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 fb2d 	bl	800afec <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fc3d 	bl	801a33c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fc34 	bl	801a33c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 f8e5 	bl	800ad1c <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 f8d2 	bl	800ad1c <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 fb7f 	bl	801a33c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 fb78 	bl	801a33c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 f82b 	bl	800ad1c <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f009 f843 	bl	800ae40 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 f8eb 	bl	800afec <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 ff37 	bl	800ad1c <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	80b8      	strh	r0, [r7, #4]
#ifdef ERROR_HANDLING_ENABLED
	increment_error_counter(error);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f853 	bl	8002010 <increment_error_counter>
	set_previous_error(error);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8b4 	bl	80020d8 <set_previous_error>
	send_current_error_packet(error);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fa5d 	bl	8002430 <send_current_error_packet>
	osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <handle_error+0x50>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f015 f917 	bl	80171b0 <osEventFlagsSet>

	switch (error.category) {
 8001f82:	793b      	ldrb	r3, [r7, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d008      	beq.n	8001f9a <handle_error+0x3e>
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	dc08      	bgt.n	8001f9e <handle_error+0x42>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <handle_error+0x3a>
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d006      	beq.n	8001fa2 <handle_error+0x46>
	case EC_peripheral:
		NVIC_SystemReset();
		break;
	default:
		// Should not be possible to get here
		break;
 8001f94:	e003      	b.n	8001f9e <handle_error+0x42>
		NVIC_SystemReset();
 8001f96:	f7ff ffcb 	bl	8001f30 <__NVIC_SystemReset>
		NVIC_SystemReset();
 8001f9a:	f7ff ffc9 	bl	8001f30 <__NVIC_SystemReset>
		break;
 8001f9e:	bf00      	nop
 8001fa0:	e000      	b.n	8001fa4 <handle_error+0x48>
		break;
 8001fa2:	bf00      	nop
	}
#endif
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	24001a98 	.word	0x24001a98

08001fb0 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fb6:	f008 ff43 	bl	800ae40 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fba:	f7fe feed 	bl	8000d98 <EE_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <error_counter_init+0x18>
		Error_Handler();
 8001fc4:	f001 fd24 	bl	8003a10 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	e013      	b.n	8001ff6 <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <error_counter_init+0x58>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	490c      	ldr	r1, [pc, #48]	; (800200c <error_counter_init+0x5c>)
 8001fdc:	440b      	add	r3, r1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f7ff fb91 	bl	8001708 <EE_ReadVariable>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <error_counter_init+0x40>
			Error_Handler();
 8001fec:	f001 fd10 	bl	8003a10 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b1a      	cmp	r3, #26
 8001ffa:	dde8      	ble.n	8001fce <error_counter_init+0x1e>
		}
	}
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	24000000 	.word	0x24000000
 800200c:	240003a4 	.word	0x240003a4

08002010 <increment_error_counter>:
 * local_cpy array. To see what index a particular error is stored in, just check the value
 * each category or detail is assigned in the header file.
 *
 * @param error Error given by the caller.
 */
void increment_error_counter(ERROR_STRUCT error) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 8002018:	793b      	ldrb	r3, [r7, #4]
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <increment_error_counter+0x38>)
 800201c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002020:	3201      	adds	r2, #1
 8002022:	b291      	uxth	r1, r2
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <increment_error_counter+0x38>)
 8002026:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <increment_error_counter+0x38>)
 800202e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002032:	3201      	adds	r2, #1
 8002034:	b291      	uxth	r1, r2
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <increment_error_counter+0x38>)
 8002038:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 800203c:	f000 f806 	bl	800204c <update_error_counter>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	240003a4 	.word	0x240003a4

0800204c <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter(){
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	e013      	b.n	8002080 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <update_error_counter+0x44>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <update_error_counter+0x48>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f7ff fb94 	bl	8001798 <EE_WriteVariable>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <update_error_counter+0x2e>
			Error_Handler();
 8002076:	f001 fccb 	bl	8003a10 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3301      	adds	r3, #1
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b1a      	cmp	r3, #26
 8002084:	dde8      	ble.n	8002058 <update_error_counter+0xc>
		}
	}
}
 8002086:	bf00      	nop
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	24000000 	.word	0x24000000
 8002094:	240003a4 	.word	0x240003a4

08002098 <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	e00f      	b.n	80020c4 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <reset_error_counters+0x3c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fb72 	bl	8001798 <EE_WriteVariable>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <reset_error_counters+0x26>
			Error_Handler();
 80020ba:	f001 fca9 	bl	8003a10 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3301      	adds	r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b1a      	cmp	r3, #26
 80020c8:	ddec      	ble.n	80020a4 <reset_error_counters+0xc>
		}
	}
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	24000000 	.word	0x24000000

080020d8 <set_previous_error>:
/**
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	80b8      	strh	r0, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <set_previous_error+0x44>)
 80020e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e4:	793a      	ldrb	r2, [r7, #4]
 80020e6:	b292      	uxth	r2, r2
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fb54 	bl	8001798 <EE_WriteVariable>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <set_previous_error+0x22>
		Error_Handler();
 80020f6:	f001 fc8b 	bl	8003a10 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <set_previous_error+0x44>)
 80020fc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80020fe:	797a      	ldrb	r2, [r7, #5]
 8002100:	b292      	uxth	r2, r2
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fb47 	bl	8001798 <EE_WriteVariable>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <set_previous_error+0x3c>
		Error_Handler();
 8002110:	f001 fc7e 	bl	8003a10 <Error_Handler>
	}
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	24000000 	.word	0x24000000

08002120 <get_previous_error>:
/**
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error() {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <get_previous_error+0x5c>)
 8002128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212a:	1dba      	adds	r2, r7, #6
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff faea 	bl	8001708 <EE_ReadVariable>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <get_previous_error+0x1e>
		Error_Handler();
 800213a:	f001 fc69 	bl	8003a10 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <get_previous_error+0x5c>)
 8002140:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002142:	1d3a      	adds	r2, r7, #4
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fade 	bl	8001708 <EE_ReadVariable>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <get_previous_error+0x36>
		Error_Handler();
 8002152:	f001 fc5d 	bl	8003a10 <Error_Handler>
	}

	prev_error.category = category;
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	723b      	strb	r3, [r7, #8]
	prev_error.detail = detail;
 800215c:	88bb      	ldrh	r3, [r7, #4]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	727b      	strb	r3, [r7, #9]

	return prev_error;
 8002162:	893b      	ldrh	r3, [r7, #8]
 8002164:	81bb      	strh	r3, [r7, #12]
 8002166:	2300      	movs	r3, #0
 8002168:	7b3a      	ldrb	r2, [r7, #12]
 800216a:	f362 0307 	bfi	r3, r2, #0, #8
 800216e:	7b7a      	ldrb	r2, [r7, #13]
 8002170:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	24000000 	.word	0x24000000

08002180 <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 8002186:	23cc      	movs	r3, #204	; 0xcc
 8002188:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 800218a:	23cc      	movs	r3, #204	; 0xcc
 800218c:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 800218e:	4b98      	ldr	r3, [pc, #608]	; (80023f0 <send_error_counter_packet+0x270>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 800219a:	4b95      	ldr	r3, [pc, #596]	; (80023f0 <send_error_counter_packet+0x270>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80021a2:	4b93      	ldr	r3, [pc, #588]	; (80023f0 <send_error_counter_packet+0x270>)
 80021a4:	885b      	ldrh	r3, [r3, #2]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80021ae:	4b90      	ldr	r3, [pc, #576]	; (80023f0 <send_error_counter_packet+0x270>)
 80021b0:	885b      	ldrh	r3, [r3, #2]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <send_error_counter_packet+0x270>)
 80021b8:	889b      	ldrh	r3, [r3, #4]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 80021c2:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <send_error_counter_packet+0x270>)
 80021c4:	889b      	ldrh	r3, [r3, #4]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <send_error_counter_packet+0x270>)
 80021cc:	88db      	ldrh	r3, [r3, #6]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 80021d6:	4b86      	ldr	r3, [pc, #536]	; (80023f0 <send_error_counter_packet+0x270>)
 80021d8:	88db      	ldrh	r3, [r3, #6]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 80021de:	4b84      	ldr	r3, [pc, #528]	; (80023f0 <send_error_counter_packet+0x270>)
 80021e0:	891b      	ldrh	r3, [r3, #8]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 80021ea:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <send_error_counter_packet+0x270>)
 80021ec:	891b      	ldrh	r3, [r3, #8]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <send_error_counter_packet+0x270>)
 80021f4:	895b      	ldrh	r3, [r3, #10]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <send_error_counter_packet+0x270>)
 8002200:	895b      	ldrh	r3, [r3, #10]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 8002206:	4b7a      	ldr	r3, [pc, #488]	; (80023f0 <send_error_counter_packet+0x270>)
 8002208:	899b      	ldrh	r3, [r3, #12]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 8002212:	4b77      	ldr	r3, [pc, #476]	; (80023f0 <send_error_counter_packet+0x270>)
 8002214:	899b      	ldrh	r3, [r3, #12]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 800221a:	4b75      	ldr	r3, [pc, #468]	; (80023f0 <send_error_counter_packet+0x270>)
 800221c:	89db      	ldrh	r3, [r3, #14]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 8002226:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <send_error_counter_packet+0x270>)
 8002228:	89db      	ldrh	r3, [r3, #14]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 800222e:	4b70      	ldr	r3, [pc, #448]	; (80023f0 <send_error_counter_packet+0x270>)
 8002230:	8a1b      	ldrh	r3, [r3, #16]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	b29b      	uxth	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 800223a:	4b6d      	ldr	r3, [pc, #436]	; (80023f0 <send_error_counter_packet+0x270>)
 800223c:	8a1b      	ldrh	r3, [r3, #16]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 8002242:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <send_error_counter_packet+0x270>)
 8002244:	8a5b      	ldrh	r3, [r3, #18]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 800224e:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <send_error_counter_packet+0x270>)
 8002250:	8a5b      	ldrh	r3, [r3, #18]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 8002256:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <send_error_counter_packet+0x270>)
 8002258:	8a9b      	ldrh	r3, [r3, #20]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <send_error_counter_packet+0x270>)
 8002264:	8a9b      	ldrh	r3, [r3, #20]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800226a:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <send_error_counter_packet+0x270>)
 800226c:	8adb      	ldrh	r3, [r3, #22]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 8002276:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <send_error_counter_packet+0x270>)
 8002278:	8adb      	ldrh	r3, [r3, #22]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 800227e:	4b5c      	ldr	r3, [pc, #368]	; (80023f0 <send_error_counter_packet+0x270>)
 8002280:	8b1b      	ldrh	r3, [r3, #24]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 800228a:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <send_error_counter_packet+0x270>)
 800228c:	8b1b      	ldrh	r3, [r3, #24]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 8002292:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <send_error_counter_packet+0x270>)
 8002294:	8b5b      	ldrh	r3, [r3, #26]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b29b      	uxth	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <send_error_counter_packet+0x270>)
 80022a0:	8b5b      	ldrh	r3, [r3, #26]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80022a6:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <send_error_counter_packet+0x270>)
 80022a8:	8b9b      	ldrh	r3, [r3, #28]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80022b2:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <send_error_counter_packet+0x270>)
 80022b4:	8b9b      	ldrh	r3, [r3, #28]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 80022ba:	4b4d      	ldr	r3, [pc, #308]	; (80023f0 <send_error_counter_packet+0x270>)
 80022bc:	8bdb      	ldrh	r3, [r3, #30]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 80022c8:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <send_error_counter_packet+0x270>)
 80022ca:	8bdb      	ldrh	r3, [r3, #30]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <send_error_counter_packet+0x270>)
 80022d4:	8c1b      	ldrh	r3, [r3, #32]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 80022e0:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <send_error_counter_packet+0x270>)
 80022e2:	8c1b      	ldrh	r3, [r3, #32]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <send_error_counter_packet+0x270>)
 80022ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <send_error_counter_packet+0x270>)
 80022fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 8002302:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <send_error_counter_packet+0x270>)
 8002304:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	b29b      	uxth	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 8002310:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <send_error_counter_packet+0x270>)
 8002312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <send_error_counter_packet+0x270>)
 800231c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	b29b      	uxth	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 8002328:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <send_error_counter_packet+0x270>)
 800232a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <send_error_counter_packet+0x270>)
 8002334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b29b      	uxth	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <send_error_counter_packet+0x270>)
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <send_error_counter_packet+0x270>)
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <send_error_counter_packet+0x270>)
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <send_error_counter_packet+0x270>)
 8002364:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	b29b      	uxth	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <send_error_counter_packet+0x270>)
 8002372:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <send_error_counter_packet+0x270>)
 800237c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <send_error_counter_packet+0x270>)
 800238a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <send_error_counter_packet+0x270>)
 8002394:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <send_error_counter_packet+0x270>)
 80023a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <send_error_counter_packet+0x270>)
 80023ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <send_error_counter_packet+0x270>)
 80023ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <send_error_counter_packet+0x270>)
 80023c4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <send_error_counter_packet+0x270>)
 80023d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 80023da:	4639      	mov	r1, r7
 80023dc:	2364      	movs	r3, #100	; 0x64
 80023de:	2238      	movs	r2, #56	; 0x38
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <send_error_counter_packet+0x274>)
 80023e2:	f011 ff81 	bl	80142e8 <HAL_UART_Transmit>
}
 80023e6:	bf00      	nop
 80023e8:	3738      	adds	r7, #56	; 0x38
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	240003a4 	.word	0x240003a4
 80023f4:	24001e3c 	.word	0x24001e3c

080023f8 <send_previous_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet() {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 80023fe:	f7ff fe8f 	bl	8002120 <get_previous_error>
 8002402:	4603      	mov	r3, r0
 8002404:	80bb      	strh	r3, [r7, #4]

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 8002406:	23aa      	movs	r3, #170	; 0xaa
 8002408:	703b      	strb	r3, [r7, #0]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 800240a:	23aa      	movs	r3, #170	; 0xaa
 800240c:	707b      	strb	r3, [r7, #1]
	buffer[2] = prev_error.category;
 800240e:	793b      	ldrb	r3, [r7, #4]
 8002410:	70bb      	strb	r3, [r7, #2]
	buffer[3] = prev_error.detail;
 8002412:	797b      	ldrb	r3, [r7, #5]
 8002414:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 8002416:	4639      	mov	r1, r7
 8002418:	2364      	movs	r3, #100	; 0x64
 800241a:	2204      	movs	r2, #4
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <send_previous_error_packet+0x34>)
 800241e:	f011 ff63 	bl	80142e8 <HAL_UART_Transmit>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	24001e3c 	.word	0x24001e3c

08002430 <send_current_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	80b8      	strh	r0, [r7, #4]
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 8002438:	23bb      	movs	r3, #187	; 0xbb
 800243a:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 800243c:	23bb      	movs	r3, #187	; 0xbb
 800243e:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 8002440:	793b      	ldrb	r3, [r7, #4]
 8002442:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 8002444:	797b      	ldrb	r3, [r7, #5]
 8002446:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 8002448:	f107 010c 	add.w	r1, r7, #12
 800244c:	2364      	movs	r3, #100	; 0x64
 800244e:	2204      	movs	r2, #4
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <send_current_error_packet+0x30>)
 8002452:	f011 ff49 	bl	80142e8 <HAL_UART_Transmit>
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	24001e3c 	.word	0x24001e3c

08002464 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <vApplicationTickHook+0x18>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	4a03      	ldr	r2, [pc, #12]	; (800247c <vApplicationTickHook+0x18>)
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	24001ae0 	.word	0x24001ae0

08002480 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 800249c:	4a24      	ldr	r2, [pc, #144]	; (8002530 <MX_FREERTOS_Init+0x98>)
 800249e:	2100      	movs	r1, #0
 80024a0:	4824      	ldr	r0, [pc, #144]	; (8002534 <MX_FREERTOS_Init+0x9c>)
 80024a2:	f014 fd79 	bl	8016f98 <osThreadNew>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <MX_FREERTOS_Init+0xa0>)
 80024aa:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80024ac:	4a23      	ldr	r2, [pc, #140]	; (800253c <MX_FREERTOS_Init+0xa4>)
 80024ae:	2100      	movs	r1, #0
 80024b0:	4823      	ldr	r0, [pc, #140]	; (8002540 <MX_FREERTOS_Init+0xa8>)
 80024b2:	f014 fd71 	bl	8016f98 <osThreadNew>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4a22      	ldr	r2, [pc, #136]	; (8002544 <MX_FREERTOS_Init+0xac>)
 80024ba:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80024bc:	4a22      	ldr	r2, [pc, #136]	; (8002548 <MX_FREERTOS_Init+0xb0>)
 80024be:	2100      	movs	r1, #0
 80024c0:	4822      	ldr	r0, [pc, #136]	; (800254c <MX_FREERTOS_Init+0xb4>)
 80024c2:	f014 fd69 	bl	8016f98 <osThreadNew>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a21      	ldr	r2, [pc, #132]	; (8002550 <MX_FREERTOS_Init+0xb8>)
 80024ca:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 80024cc:	4a21      	ldr	r2, [pc, #132]	; (8002554 <MX_FREERTOS_Init+0xbc>)
 80024ce:	2100      	movs	r1, #0
 80024d0:	4821      	ldr	r0, [pc, #132]	; (8002558 <MX_FREERTOS_Init+0xc0>)
 80024d2:	f014 fd61 	bl	8016f98 <osThreadNew>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a20      	ldr	r2, [pc, #128]	; (800255c <MX_FREERTOS_Init+0xc4>)
 80024da:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 80024dc:	4a20      	ldr	r2, [pc, #128]	; (8002560 <MX_FREERTOS_Init+0xc8>)
 80024de:	2100      	movs	r1, #0
 80024e0:	4820      	ldr	r0, [pc, #128]	; (8002564 <MX_FREERTOS_Init+0xcc>)
 80024e2:	f014 fd59 	bl	8016f98 <osThreadNew>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <MX_FREERTOS_Init+0xd0>)
 80024ea:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 80024ec:	4a1f      	ldr	r2, [pc, #124]	; (800256c <MX_FREERTOS_Init+0xd4>)
 80024ee:	2100      	movs	r1, #0
 80024f0:	481f      	ldr	r0, [pc, #124]	; (8002570 <MX_FREERTOS_Init+0xd8>)
 80024f2:	f014 fd51 	bl	8016f98 <osThreadNew>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <MX_FREERTOS_Init+0xdc>)
 80024fa:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80024fc:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <MX_FREERTOS_Init+0xe0>)
 80024fe:	2100      	movs	r1, #0
 8002500:	481e      	ldr	r0, [pc, #120]	; (800257c <MX_FREERTOS_Init+0xe4>)
 8002502:	f014 fd49 	bl	8016f98 <osThreadNew>
 8002506:	4603      	mov	r3, r0
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <MX_FREERTOS_Init+0xe8>)
 800250a:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <MX_FREERTOS_Init+0xec>)
 800250e:	2100      	movs	r1, #0
 8002510:	481d      	ldr	r0, [pc, #116]	; (8002588 <MX_FREERTOS_Init+0xf0>)
 8002512:	f014 fd41 	bl	8016f98 <osThreadNew>
 8002516:	4603      	mov	r3, r0
 8002518:	4a1c      	ldr	r2, [pc, #112]	; (800258c <MX_FREERTOS_Init+0xf4>)
 800251a:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <MX_FREERTOS_Init+0xf8>)
 800251e:	2100      	movs	r1, #0
 8002520:	481c      	ldr	r0, [pc, #112]	; (8002594 <MX_FREERTOS_Init+0xfc>)
 8002522:	f014 fd39 	bl	8016f98 <osThreadNew>
 8002526:	4603      	mov	r3, r0
 8002528:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <MX_FREERTOS_Init+0x100>)
 800252a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	0801afc8 	.word	0x0801afc8
 8002534:	0800259d 	.word	0x0800259d
 8002538:	240003dc 	.word	0x240003dc
 800253c:	0801afec 	.word	0x0801afec
 8002540:	080025c5 	.word	0x080025c5
 8002544:	2400063c 	.word	0x2400063c
 8002548:	0801b010 	.word	0x0801b010
 800254c:	080025ed 	.word	0x080025ed
 8002550:	2400089c 	.word	0x2400089c
 8002554:	0801b034 	.word	0x0801b034
 8002558:	08002615 	.word	0x08002615
 800255c:	24000afc 	.word	0x24000afc
 8002560:	0801b058 	.word	0x0801b058
 8002564:	0800268d 	.word	0x0800268d
 8002568:	24000d5c 	.word	0x24000d5c
 800256c:	0801b07c 	.word	0x0801b07c
 8002570:	08002705 	.word	0x08002705
 8002574:	24000fbc 	.word	0x24000fbc
 8002578:	0801b0a0 	.word	0x0801b0a0
 800257c:	08002735 	.word	0x08002735
 8002580:	2400121c 	.word	0x2400121c
 8002584:	0801b0c4 	.word	0x0801b0c4
 8002588:	08002765 	.word	0x08002765
 800258c:	2400147c 	.word	0x2400147c
 8002590:	0801b0e8 	.word	0x0801b0e8
 8002594:	08002845 	.word	0x08002845
 8002598:	240016dc 	.word	0x240016dc

0800259c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <PMT_init+0x24>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ac:	2200      	movs	r2, #0
 80025ae:	2101      	movs	r1, #1
 80025b0:	f014 fe74 	bl	801729c <osEventFlagsWait>

		create_pmt_packet();
 80025b4:	f001 fa3a 	bl	8003a2c <create_pmt_packet>

		osThreadYield();
 80025b8:	f014 fd80 	bl	80170bc <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025bc:	e7f2      	b.n	80025a4 <PMT_init+0x8>
 80025be:	bf00      	nop
 80025c0:	24001a90 	.word	0x24001a90

080025c4 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <ERPA_init+0x24>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d4:	2200      	movs	r2, #0
 80025d6:	2102      	movs	r1, #2
 80025d8:	f014 fe60 	bl	801729c <osEventFlagsWait>

		create_erpa_packet();
 80025dc:	f001 fa6c 	bl	8003ab8 <create_erpa_packet>

		osThreadYield();
 80025e0:	f014 fd6c 	bl	80170bc <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025e4:	e7f2      	b.n	80025cc <ERPA_init+0x8>
 80025e6:	bf00      	nop
 80025e8:	24001a90 	.word	0x24001a90

080025ec <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HK_init+0x24>)
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fc:	2200      	movs	r2, #0
 80025fe:	2104      	movs	r1, #4
 8002600:	f014 fe4c 	bl	801729c <osEventFlagsWait>

		create_hk_packet();
 8002604:	f001 fab6 	bl	8003b74 <create_hk_packet>

		osThreadYield();
 8002608:	f014 fd58 	bl	80170bc <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800260c:	e7f2      	b.n	80025f4 <HK_init+0x8>
 800260e:	bf00      	nop
 8002610:	24001a90 	.word	0x24001a90

08002614 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <AUTOINIT_init+0x70>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002624:	2200      	movs	r2, #0
 8002626:	2104      	movs	r1, #4
 8002628:	f014 fe38 	bl	801729c <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e012      	b.n	8002658 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002632:	4a15      	ldr	r2, [pc, #84]	; (8002688 <AUTOINIT_init+0x74>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <AUTOINIT_init+0x74>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	889b      	ldrh	r3, [r3, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	4619      	mov	r1, r3
 8002648:	f009 f80a 	bl	800b660 <HAL_GPIO_WritePin>
			osDelay(100);
 800264c:	2064      	movs	r0, #100	; 0x64
 800264e:	f014 fd55 	bl	80170fc <osDelay>
		for (int i = 0; i < 7; i++) {
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3301      	adds	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b06      	cmp	r3, #6
 800265c:	dde9      	ble.n	8002632 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800265e:	2308      	movs	r3, #8
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	e008      	b.n	8002676 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2101      	movs	r1, #1
 800266a:	4618      	mov	r0, r3
 800266c:	f003 f9ea 	bl	8005a44 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3301      	adds	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b0d      	cmp	r3, #13
 800267a:	ddf3      	ble.n	8002664 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 800267c:	f014 fd1e 	bl	80170bc <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002680:	e7cc      	b.n	800261c <AUTOINIT_init+0x8>
 8002682:	bf00      	nop
 8002684:	24001a94 	.word	0x24001a94
 8002688:	0801b10c 	.word	0x0801b10c

0800268c <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <AUTODEINIT_init+0x70>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800269c:	2200      	movs	r2, #0
 800269e:	2108      	movs	r1, #8
 80026a0:	f014 fdfc 	bl	801729c <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80026a4:	230d      	movs	r3, #13
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e008      	b.n	80026bc <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 f9c7 	bl	8005a44 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b07      	cmp	r3, #7
 80026c0:	dcf3      	bgt.n	80026aa <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80026c2:	2306      	movs	r3, #6
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	e012      	b.n	80026ee <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <AUTODEINIT_init+0x74>)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80026d0:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <AUTODEINIT_init+0x74>)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	889b      	ldrh	r3, [r3, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	4619      	mov	r1, r3
 80026de:	f008 ffbf 	bl	800b660 <HAL_GPIO_WritePin>
			osDelay(100);
 80026e2:	2064      	movs	r0, #100	; 0x64
 80026e4:	f014 fd0a 	bl	80170fc <osDelay>
		for (int i = 6; i >= 0; i--) {
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	dae9      	bge.n	80026c8 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 80026f4:	f014 fce2 	bl	80170bc <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026f8:	e7cc      	b.n	8002694 <AUTODEINIT_init+0x8>
 80026fa:	bf00      	nop
 80026fc:	24001a94 	.word	0x24001a94
 8002700:	0801b10c 	.word	0x0801b10c

08002704 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <Voltage_Monitor_init+0x28>)
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002714:	2200      	movs	r2, #0
 8002716:	2101      	movs	r1, #1
 8002718:	f014 fdc0 	bl	801729c <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 800271c:	4804      	ldr	r0, [pc, #16]	; (8002730 <Voltage_Monitor_init+0x2c>)
 800271e:	f00b fb1d 	bl	800dd5c <HAL_IWDG_Refresh>
	  set_rail_monitor();
 8002722:	f003 f9af 	bl	8005a84 <set_rail_monitor>
	  monitor_rails();
 8002726:	f003 fa31 	bl	8005b8c <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800272a:	e7ef      	b.n	800270c <Voltage_Monitor_init+0x8>
 800272c:	24001a94 	.word	0x24001a94
 8002730:	24001a80 	.word	0x24001a80

08002734 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <STOP_init+0x2c>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002744:	2200      	movs	r2, #0
 8002746:	2102      	movs	r1, #2
 8002748:	f014 fda8 	bl	801729c <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <STOP_init+0x2c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2102      	movs	r1, #2
 8002752:	4618      	mov	r0, r3
 8002754:	f014 fd70 	bl	8017238 <osEventFlagsClear>

	  enter_stop();
 8002758:	f001 f93c 	bl	80039d4 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800275c:	e7ee      	b.n	800273c <STOP_init+0x8>
 800275e:	bf00      	nop
 8002760:	24001a94 	.word	0x24001a94

08002764 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af02      	add	r7, sp, #8
 800276a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800276c:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <Science_init+0xbc>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002774:	2200      	movs	r2, #0
 8002776:	2101      	movs	r1, #1
 8002778:	f014 fd90 	bl	801729c <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e012      	b.n	80027a8 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002782:	4a28      	ldr	r2, [pc, #160]	; (8002824 <Science_init+0xc0>)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800278a:	4a26      	ldr	r2, [pc, #152]	; (8002824 <Science_init+0xc0>)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	889b      	ldrh	r3, [r3, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	4619      	mov	r1, r3
 8002798:	f008 ff62 	bl	800b660 <HAL_GPIO_WritePin>
			osDelay(200);
 800279c:	20c8      	movs	r0, #200	; 0xc8
 800279e:	f014 fcad 	bl	80170fc <osDelay>
		for (int i = 0; i < 9; i++) {
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	dde9      	ble.n	8002782 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80027ae:	2308      	movs	r3, #8
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	e008      	b.n	80027c6 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 f942 	bl	8005a44 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	ddf3      	ble.n	80027b4 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80027cc:	b672      	cpsid	i
}
 80027ce:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80027d0:	2300      	movs	r3, #0
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2320      	movs	r3, #32
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <Science_init+0xc4>)
 80027d8:	2100      	movs	r1, #0
 80027da:	4814      	ldr	r0, [pc, #80]	; (800282c <Science_init+0xc8>)
 80027dc:	f005 f8bc 	bl	8007958 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <Science_init+0xcc>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <Science_init+0xd0>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <Science_init+0xd4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80027f2:	f001 fafd 	bl	8003df0 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <Science_init+0xd8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2104      	movs	r1, #4
 80027fc:	4618      	mov	r0, r3
 80027fe:	f014 fcd7 	bl	80171b0 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002806:	f44f 729c 	mov.w	r2, #312	; 0x138
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800280c:	2100      	movs	r1, #0
 800280e:	480c      	ldr	r0, [pc, #48]	; (8002840 <Science_init+0xdc>)
 8002810:	f010 f9e0 	bl	8012bd4 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002814:	b662      	cpsie	i
}
 8002816:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002818:	f014 fc50 	bl	80170bc <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800281c:	e7a6      	b.n	800276c <Science_init+0x8>
 800281e:	bf00      	nop
 8002820:	24001a98 	.word	0x24001a98
 8002824:	0801b10c 	.word	0x0801b10c
 8002828:	2400003c 	.word	0x2400003c
 800282c:	24000314 	.word	0x24000314
 8002830:	24001adc 	.word	0x24001adc
 8002834:	24001add 	.word	0x24001add
 8002838:	24001ae0 	.word	0x24001ae0
 800283c:	24001a90 	.word	0x24001a90
 8002840:	24001da4 	.word	0x24001da4

08002844 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800284c:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <Idle_init+0x94>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002854:	2200      	movs	r2, #0
 8002856:	2102      	movs	r1, #2
 8002858:	f014 fd20 	bl	801729c <osEventFlagsWait>

		ERPA_ENABLED = 0;
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <Idle_init+0x98>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 800286a:	2100      	movs	r1, #0
 800286c:	481c      	ldr	r0, [pc, #112]	; (80028e0 <Idle_init+0x9c>)
 800286e:	f010 fb0b 	bl	8012e88 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <Idle_init+0xa0>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8002878:	2100      	movs	r1, #0
 800287a:	481b      	ldr	r0, [pc, #108]	; (80028e8 <Idle_init+0xa4>)
 800287c:	f005 f92c 	bl	8007ad8 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002880:	2310      	movs	r3, #16
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e008      	b.n	8002898 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f003 f8d9 	bl	8005a44 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3b01      	subs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b07      	cmp	r3, #7
 800289c:	dcf3      	bgt.n	8002886 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 800289e:	2308      	movs	r3, #8
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	e012      	b.n	80028ca <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <Idle_init+0xa8>)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <Idle_init+0xa8>)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	889b      	ldrh	r3, [r3, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	4619      	mov	r1, r3
 80028ba:	f008 fed1 	bl	800b660 <HAL_GPIO_WritePin>
			osDelay(200);
 80028be:	20c8      	movs	r0, #200	; 0xc8
 80028c0:	f014 fc1c 	bl	80170fc <osDelay>
		for (int i = 8; i >= 0; i--) {
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	dae9      	bge.n	80028a4 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 80028d0:	f014 fbf4 	bl	80170bc <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80028d4:	e7ba      	b.n	800284c <Idle_init+0x8>
 80028d6:	bf00      	nop
 80028d8:	24001a98 	.word	0x24001a98
 80028dc:	24001add 	.word	0x24001add
 80028e0:	24001da4 	.word	0x24001da4
 80028e4:	24001adc 	.word	0x24001adc
 80028e8:	24000314 	.word	0x24000314
 80028ec:	0801b10c 	.word	0x0801b10c

080028f0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
 8002904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002906:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290c:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <MX_GPIO_Init+0xe8>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002916:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002924:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800292a:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <MX_GPIO_Init+0xe8>)
 800292c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002948:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <MX_GPIO_Init+0xe8>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800297e:	2200      	movs	r2, #0
 8002980:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002984:	4815      	ldr	r0, [pc, #84]	; (80029dc <MX_GPIO_Init+0xec>)
 8002986:	f008 fe6b 	bl	800b660 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	2164      	movs	r1, #100	; 0x64
 800298e:	4814      	ldr	r0, [pc, #80]	; (80029e0 <MX_GPIO_Init+0xf0>)
 8002990:	f008 fe66 	bl	800b660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002994:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002998:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800299e:	2302      	movs	r3, #2
 80029a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	480b      	ldr	r0, [pc, #44]	; (80029dc <MX_GPIO_Init+0xec>)
 80029ae:	f008 fc8f 	bl	800b2d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80029b2:	2364      	movs	r3, #100	; 0x64
 80029b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029ba:	2302      	movs	r3, #2
 80029bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_GPIO_Init+0xf0>)
 80029ca:	f008 fc81 	bl	800b2d0 <HAL_GPIO_Init>

}
 80029ce:	bf00      	nop
 80029d0:	3728      	adds	r7, #40	; 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
 80029dc:	58020800 	.word	0x58020800
 80029e0:	58020400 	.word	0x58020400

080029e4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <MX_I2C1_Init+0x78>)
 80029ea:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <MX_I2C1_Init+0x7c>)
 80029ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <MX_I2C1_Init+0x78>)
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <MX_I2C1_Init+0x80>)
 80029f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <MX_I2C1_Init+0x78>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <MX_I2C1_Init+0x78>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a00:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a1e:	480f      	ldr	r0, [pc, #60]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a20:	f008 fe38 	bl	800b694 <HAL_I2C_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a2a:	f000 fff1 	bl	8003a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a2e:	2100      	movs	r1, #0
 8002a30:	480a      	ldr	r0, [pc, #40]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a32:	f00b f8d7 	bl	800dbe4 <HAL_I2CEx_ConfigAnalogFilter>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a3c:	f000 ffe8 	bl	8003a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a40:	2100      	movs	r1, #0
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a44:	f00b f919 	bl	800dc7a <HAL_I2CEx_ConfigDigitalFilter>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a4e:	f000 ffdf 	bl	8003a10 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002a52:	2001      	movs	r0, #1
 8002a54:	f00b f95e 	bl	800dd14 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	2400193c 	.word	0x2400193c
 8002a60:	40005400 	.word	0x40005400
 8002a64:	00100517 	.word	0x00100517

08002a68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0ba      	sub	sp, #232	; 0xe8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	22c0      	movs	r2, #192	; 0xc0
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f017 fc57 	bl	801a33c <memset>
  if(i2cHandle->Instance==I2C1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5d      	ldr	r2, [pc, #372]	; (8002c08 <HAL_I2C_MspInit+0x1a0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	f040 80b3 	bne.w	8002c00 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a9a:	f04f 0208 	mov.w	r2, #8
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f00c fa01 	bl	800eeb8 <HAL_RCCEx_PeriphCLKConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002abc:	f000 ffa8 	bl	8003a10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac6:	4a51      	ldr	r2, [pc, #324]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ad0:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ade:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae6:	2312      	movs	r3, #18
 8002ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002af8:	2304      	movs	r3, #4
 8002afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4842      	ldr	r0, [pc, #264]	; (8002c10 <HAL_I2C_MspInit+0x1a8>)
 8002b06:	f008 fbe3 	bl	800b2d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b0a:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b10:	4a3e      	ldr	r2, [pc, #248]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002b12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b1a:	4b3c      	ldr	r3, [pc, #240]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b2a:	4a3b      	ldr	r2, [pc, #236]	; (8002c18 <HAL_I2C_MspInit+0x1b0>)
 8002b2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b30:	2222      	movs	r2, #34	; 0x22
 8002b32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b34:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b40:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b48:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002b54:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b5a:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b60:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b62:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b68:	482a      	ldr	r0, [pc, #168]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b6a:	f005 fa81 	bl	8008070 <HAL_DMA_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002b74:	f000 ff4c 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b7e:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002b84:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b86:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <HAL_I2C_MspInit+0x1b8>)
 8002b88:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b90:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9c:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bbc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002bc4:	4815      	ldr	r0, [pc, #84]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bc6:	f005 fa53 	bl	8008070 <HAL_DMA_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002bd0:	f000 ff1e 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bda:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2105      	movs	r1, #5
 8002be4:	201f      	movs	r0, #31
 8002be6:	f004 fe15 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002bea:	201f      	movs	r0, #31
 8002bec:	f004 fe2c 	bl	8007848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	2020      	movs	r0, #32
 8002bf6:	f004 fe0d 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002bfa:	2020      	movs	r0, #32
 8002bfc:	f004 fe24 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c00:	bf00      	nop
 8002c02:	37e8      	adds	r7, #232	; 0xe8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40005400 	.word	0x40005400
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	58020400 	.word	0x58020400
 8002c14:	24001990 	.word	0x24001990
 8002c18:	400200a0 	.word	0x400200a0
 8002c1c:	24001a08 	.word	0x24001a08
 8002c20:	400200b8 	.word	0x400200b8

08002c24 <__NVIC_SystemReset>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002c28:	f3bf 8f4f 	dsb	sy
}
 8002c2c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <__NVIC_SystemReset+0x24>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c36:	4904      	ldr	r1, [pc, #16]	; (8002c48 <__NVIC_SystemReset+0x24>)
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <__NVIC_SystemReset+0x28>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c3e:	f3bf 8f4f 	dsb	sy
}
 8002c42:	bf00      	nop
    __NOP();
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <__NVIC_SystemReset+0x20>
 8002c48:	e000ed00 	.word	0xe000ed00
 8002c4c:	05fa0004 	.word	0x05fa0004

08002c50 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d106      	bne.n	8002c6e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f014 faa2 	bl	80171b0 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002c6c:	e032      	b.n	8002cd4 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d12b      	bne.n	8002cce <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f014 fa92 	bl	80171b0 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d113      	bne.n	8002cbe <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f014 fa87 	bl	80171b0 <osEventFlagsSet>
			if (HK_ENABLED){
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f014 fa7c 	bl	80171b0 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002cca:	701a      	strb	r2, [r3, #0]
}
 8002ccc:	e002      	b.n	8002cd4 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002cce:	480a      	ldr	r0, [pc, #40]	; (8002cf8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002cd0:	f017 fbaa 	bl	801a428 <puts>
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	24001da4 	.word	0x24001da4
 8002ce0:	24001a90 	.word	0x24001a90
 8002ce4:	24001df0 	.word	0x24001df0
 8002ce8:	24001add 	.word	0x24001add
 8002cec:	24001ae4 	.word	0x24001ae4
 8002cf0:	24001a94 	.word	0x24001a94
 8002cf4:	24001adc 	.word	0x24001adc
 8002cf8:	0801add8 	.word	0x0801add8

08002cfc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002d04:	2201      	movs	r2, #1
 8002d06:	49f7      	ldr	r1, [pc, #988]	; (80030e4 <HAL_UART_RxCpltCallback+0x3e8>)
 8002d08:	48f7      	ldr	r0, [pc, #988]	; (80030e8 <HAL_UART_RxCpltCallback+0x3ec>)
 8002d0a:	f011 fc43 	bl	8014594 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002d0e:	4bf5      	ldr	r3, [pc, #980]	; (80030e4 <HAL_UART_RxCpltCallback+0x3e8>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2bef      	cmp	r3, #239	; 0xef
 8002d18:	f200 843e 	bhi.w	8003598 <HAL_UART_RxCpltCallback+0x89c>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <HAL_UART_RxCpltCallback+0x28>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08003101 	.word	0x08003101
 8002d28:	08003131 	.word	0x08003131
 8002d2c:	080031a1 	.word	0x080031a1
 8002d30:	080031db 	.word	0x080031db
 8002d34:	08003213 	.word	0x08003213
 8002d38:	0800324d 	.word	0x0800324d
 8002d3c:	08003289 	.word	0x08003289
 8002d40:	080032c5 	.word	0x080032c5
 8002d44:	080032ff 	.word	0x080032ff
 8002d48:	08003333 	.word	0x08003333
 8002d4c:	08003367 	.word	0x08003367
 8002d50:	08003399 	.word	0x08003399
 8002d54:	080033c3 	.word	0x080033c3
 8002d58:	0800349f 	.word	0x0800349f
 8002d5c:	08003507 	.word	0x08003507
 8002d60:	0800352f 	.word	0x0800352f
 8002d64:	080030ed 	.word	0x080030ed
 8002d68:	08003115 	.word	0x08003115
 8002d6c:	08003183 	.word	0x08003183
 8002d70:	080031bf 	.word	0x080031bf
 8002d74:	080031f7 	.word	0x080031f7
 8002d78:	0800322f 	.word	0x0800322f
 8002d7c:	0800326b 	.word	0x0800326b
 8002d80:	080032a7 	.word	0x080032a7
 8002d84:	080032e3 	.word	0x080032e3
 8002d88:	0800331b 	.word	0x0800331b
 8002d8c:	08003343 	.word	0x08003343
 8002d90:	0800337d 	.word	0x0800337d
 8002d94:	080033a9 	.word	0x080033a9
 8002d98:	0800345d 	.word	0x0800345d
 8002d9c:	080034df 	.word	0x080034df
 8002da0:	08003599 	.word	0x08003599
 8002da4:	08003599 	.word	0x08003599
 8002da8:	08003599 	.word	0x08003599
 8002dac:	08003599 	.word	0x08003599
 8002db0:	08003599 	.word	0x08003599
 8002db4:	08003599 	.word	0x08003599
 8002db8:	08003599 	.word	0x08003599
 8002dbc:	08003599 	.word	0x08003599
 8002dc0:	08003599 	.word	0x08003599
 8002dc4:	08003599 	.word	0x08003599
 8002dc8:	08003599 	.word	0x08003599
 8002dcc:	08003599 	.word	0x08003599
 8002dd0:	08003599 	.word	0x08003599
 8002dd4:	08003599 	.word	0x08003599
 8002dd8:	08003599 	.word	0x08003599
 8002ddc:	08003599 	.word	0x08003599
 8002de0:	08003599 	.word	0x08003599
 8002de4:	08003599 	.word	0x08003599
 8002de8:	08003599 	.word	0x08003599
 8002dec:	08003599 	.word	0x08003599
 8002df0:	08003599 	.word	0x08003599
 8002df4:	08003599 	.word	0x08003599
 8002df8:	08003599 	.word	0x08003599
 8002dfc:	08003599 	.word	0x08003599
 8002e00:	08003599 	.word	0x08003599
 8002e04:	08003599 	.word	0x08003599
 8002e08:	08003599 	.word	0x08003599
 8002e0c:	08003599 	.word	0x08003599
 8002e10:	08003599 	.word	0x08003599
 8002e14:	08003599 	.word	0x08003599
 8002e18:	08003599 	.word	0x08003599
 8002e1c:	08003599 	.word	0x08003599
 8002e20:	08003599 	.word	0x08003599
 8002e24:	08003599 	.word	0x08003599
 8002e28:	08003599 	.word	0x08003599
 8002e2c:	08003599 	.word	0x08003599
 8002e30:	08003599 	.word	0x08003599
 8002e34:	08003599 	.word	0x08003599
 8002e38:	08003599 	.word	0x08003599
 8002e3c:	08003599 	.word	0x08003599
 8002e40:	08003599 	.word	0x08003599
 8002e44:	08003599 	.word	0x08003599
 8002e48:	08003599 	.word	0x08003599
 8002e4c:	08003599 	.word	0x08003599
 8002e50:	08003599 	.word	0x08003599
 8002e54:	08003599 	.word	0x08003599
 8002e58:	08003599 	.word	0x08003599
 8002e5c:	08003599 	.word	0x08003599
 8002e60:	08003599 	.word	0x08003599
 8002e64:	08003599 	.word	0x08003599
 8002e68:	08003599 	.word	0x08003599
 8002e6c:	08003599 	.word	0x08003599
 8002e70:	08003599 	.word	0x08003599
 8002e74:	08003599 	.word	0x08003599
 8002e78:	08003599 	.word	0x08003599
 8002e7c:	08003599 	.word	0x08003599
 8002e80:	08003599 	.word	0x08003599
 8002e84:	08003599 	.word	0x08003599
 8002e88:	08003599 	.word	0x08003599
 8002e8c:	08003599 	.word	0x08003599
 8002e90:	08003599 	.word	0x08003599
 8002e94:	08003599 	.word	0x08003599
 8002e98:	08003599 	.word	0x08003599
 8002e9c:	08003599 	.word	0x08003599
 8002ea0:	08003599 	.word	0x08003599
 8002ea4:	08003599 	.word	0x08003599
 8002ea8:	08003599 	.word	0x08003599
 8002eac:	08003599 	.word	0x08003599
 8002eb0:	08003599 	.word	0x08003599
 8002eb4:	08003599 	.word	0x08003599
 8002eb8:	08003599 	.word	0x08003599
 8002ebc:	08003599 	.word	0x08003599
 8002ec0:	08003599 	.word	0x08003599
 8002ec4:	08003599 	.word	0x08003599
 8002ec8:	08003599 	.word	0x08003599
 8002ecc:	08003599 	.word	0x08003599
 8002ed0:	08003599 	.word	0x08003599
 8002ed4:	08003599 	.word	0x08003599
 8002ed8:	08003599 	.word	0x08003599
 8002edc:	08003599 	.word	0x08003599
 8002ee0:	08003599 	.word	0x08003599
 8002ee4:	08003599 	.word	0x08003599
 8002ee8:	08003599 	.word	0x08003599
 8002eec:	08003599 	.word	0x08003599
 8002ef0:	08003599 	.word	0x08003599
 8002ef4:	08003599 	.word	0x08003599
 8002ef8:	08003599 	.word	0x08003599
 8002efc:	08003599 	.word	0x08003599
 8002f00:	08003599 	.word	0x08003599
 8002f04:	08003599 	.word	0x08003599
 8002f08:	08003599 	.word	0x08003599
 8002f0c:	08003599 	.word	0x08003599
 8002f10:	08003599 	.word	0x08003599
 8002f14:	08003599 	.word	0x08003599
 8002f18:	08003599 	.word	0x08003599
 8002f1c:	08003599 	.word	0x08003599
 8002f20:	08003599 	.word	0x08003599
 8002f24:	08003599 	.word	0x08003599
 8002f28:	08003599 	.word	0x08003599
 8002f2c:	08003599 	.word	0x08003599
 8002f30:	08003599 	.word	0x08003599
 8002f34:	08003599 	.word	0x08003599
 8002f38:	08003599 	.word	0x08003599
 8002f3c:	08003599 	.word	0x08003599
 8002f40:	08003599 	.word	0x08003599
 8002f44:	08003599 	.word	0x08003599
 8002f48:	08003599 	.word	0x08003599
 8002f4c:	08003599 	.word	0x08003599
 8002f50:	08003599 	.word	0x08003599
 8002f54:	08003599 	.word	0x08003599
 8002f58:	08003599 	.word	0x08003599
 8002f5c:	08003599 	.word	0x08003599
 8002f60:	08003599 	.word	0x08003599
 8002f64:	08003599 	.word	0x08003599
 8002f68:	08003599 	.word	0x08003599
 8002f6c:	08003599 	.word	0x08003599
 8002f70:	08003599 	.word	0x08003599
 8002f74:	08003599 	.word	0x08003599
 8002f78:	08003599 	.word	0x08003599
 8002f7c:	08003599 	.word	0x08003599
 8002f80:	08003599 	.word	0x08003599
 8002f84:	08003599 	.word	0x08003599
 8002f88:	08003599 	.word	0x08003599
 8002f8c:	08003599 	.word	0x08003599
 8002f90:	08003599 	.word	0x08003599
 8002f94:	08003599 	.word	0x08003599
 8002f98:	08003599 	.word	0x08003599
 8002f9c:	08003599 	.word	0x08003599
 8002fa0:	08003599 	.word	0x08003599
 8002fa4:	08003599 	.word	0x08003599
 8002fa8:	08003599 	.word	0x08003599
 8002fac:	08003599 	.word	0x08003599
 8002fb0:	08003599 	.word	0x08003599
 8002fb4:	08003599 	.word	0x08003599
 8002fb8:	08003599 	.word	0x08003599
 8002fbc:	08003599 	.word	0x08003599
 8002fc0:	08003599 	.word	0x08003599
 8002fc4:	08003599 	.word	0x08003599
 8002fc8:	08003599 	.word	0x08003599
 8002fcc:	08003599 	.word	0x08003599
 8002fd0:	08003599 	.word	0x08003599
 8002fd4:	08003599 	.word	0x08003599
 8002fd8:	08003599 	.word	0x08003599
 8002fdc:	08003599 	.word	0x08003599
 8002fe0:	0800356b 	.word	0x0800356b
 8002fe4:	08003599 	.word	0x08003599
 8002fe8:	08003599 	.word	0x08003599
 8002fec:	08003599 	.word	0x08003599
 8002ff0:	08003599 	.word	0x08003599
 8002ff4:	08003599 	.word	0x08003599
 8002ff8:	08003599 	.word	0x08003599
 8002ffc:	08003599 	.word	0x08003599
 8003000:	08003599 	.word	0x08003599
 8003004:	08003599 	.word	0x08003599
 8003008:	08003599 	.word	0x08003599
 800300c:	08003599 	.word	0x08003599
 8003010:	08003599 	.word	0x08003599
 8003014:	08003599 	.word	0x08003599
 8003018:	08003599 	.word	0x08003599
 800301c:	08003599 	.word	0x08003599
 8003020:	08003571 	.word	0x08003571
 8003024:	08003599 	.word	0x08003599
 8003028:	08003599 	.word	0x08003599
 800302c:	08003599 	.word	0x08003599
 8003030:	08003599 	.word	0x08003599
 8003034:	08003599 	.word	0x08003599
 8003038:	08003599 	.word	0x08003599
 800303c:	08003599 	.word	0x08003599
 8003040:	08003599 	.word	0x08003599
 8003044:	08003599 	.word	0x08003599
 8003048:	08003599 	.word	0x08003599
 800304c:	08003599 	.word	0x08003599
 8003050:	08003599 	.word	0x08003599
 8003054:	08003599 	.word	0x08003599
 8003058:	08003599 	.word	0x08003599
 800305c:	08003599 	.word	0x08003599
 8003060:	0800357f 	.word	0x0800357f
 8003064:	08003557 	.word	0x08003557
 8003068:	08003599 	.word	0x08003599
 800306c:	08003599 	.word	0x08003599
 8003070:	08003599 	.word	0x08003599
 8003074:	08003599 	.word	0x08003599
 8003078:	08003599 	.word	0x08003599
 800307c:	08003599 	.word	0x08003599
 8003080:	08003599 	.word	0x08003599
 8003084:	08003599 	.word	0x08003599
 8003088:	08003599 	.word	0x08003599
 800308c:	08003599 	.word	0x08003599
 8003090:	08003599 	.word	0x08003599
 8003094:	08003599 	.word	0x08003599
 8003098:	08003599 	.word	0x08003599
 800309c:	08003599 	.word	0x08003599
 80030a0:	0800358d 	.word	0x0800358d
 80030a4:	08003543 	.word	0x08003543
 80030a8:	08003599 	.word	0x08003599
 80030ac:	08003599 	.word	0x08003599
 80030b0:	08003599 	.word	0x08003599
 80030b4:	08003599 	.word	0x08003599
 80030b8:	08003599 	.word	0x08003599
 80030bc:	08003599 	.word	0x08003599
 80030c0:	08003599 	.word	0x08003599
 80030c4:	08003599 	.word	0x08003599
 80030c8:	08003599 	.word	0x08003599
 80030cc:	08003599 	.word	0x08003599
 80030d0:	08003599 	.word	0x08003599
 80030d4:	08003599 	.word	0x08003599
 80030d8:	08003599 	.word	0x08003599
 80030dc:	08003599 	.word	0x08003599
 80030e0:	08003593 	.word	0x08003593
 80030e4:	24001a9c 	.word	0x24001a9c
 80030e8:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 80030ec:	48b8      	ldr	r0, [pc, #736]	; (80033d0 <HAL_UART_RxCpltCallback+0x6d4>)
 80030ee:	f017 f99b 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80030f2:	4bb8      	ldr	r3, [pc, #736]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 80030f4:	2104      	movs	r1, #4
 80030f6:	2201      	movs	r2, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f008 fab1 	bl	800b660 <HAL_GPIO_WritePin>
		break;
 80030fe:	e256      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8003100:	48b5      	ldr	r0, [pc, #724]	; (80033d8 <HAL_UART_RxCpltCallback+0x6dc>)
 8003102:	f017 f991 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8003106:	4bb3      	ldr	r3, [pc, #716]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 8003108:	2104      	movs	r1, #4
 800310a:	2200      	movs	r2, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f008 faa7 	bl	800b660 <HAL_GPIO_WritePin>
		break;
 8003112:	e24c      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8003114:	48b1      	ldr	r0, [pc, #708]	; (80033dc <HAL_UART_RxCpltCallback+0x6e0>)
 8003116:	f017 f987 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800311a:	4bae      	ldr	r3, [pc, #696]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 800311c:	2120      	movs	r1, #32
 800311e:	2201      	movs	r2, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f008 fa9d 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8003126:	2101      	movs	r1, #1
 8003128:	2008      	movs	r0, #8
 800312a:	f002 fc8b 	bl	8005a44 <set_rail_monitor_enable>
		break;
 800312e:	e23e      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8003130:	48ab      	ldr	r0, [pc, #684]	; (80033e0 <HAL_UART_RxCpltCallback+0x6e4>)
 8003132:	f017 f979 	bl	801a428 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8003136:	2308      	movs	r3, #8
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e00f      	b.n	800315c <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800313c:	4aa9      	ldr	r2, [pc, #676]	; (80033e4 <HAL_UART_RxCpltCallback+0x6e8>)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003144:	4aa7      	ldr	r2, [pc, #668]	; (80033e4 <HAL_UART_RxCpltCallback+0x6e8>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	889b      	ldrh	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	4619      	mov	r1, r3
 8003152:	f008 fa85 	bl	800b660 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3b01      	subs	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	dcec      	bgt.n	800313c <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003162:	2310      	movs	r3, #16
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e008      	b.n	800317a <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f002 fc68 	bl	8005a44 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	3b01      	subs	r3, #1
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b07      	cmp	r3, #7
 800317e:	dcf3      	bgt.n	8003168 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 8003180:	e215      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8003182:	4899      	ldr	r0, [pc, #612]	; (80033e8 <HAL_UART_RxCpltCallback+0x6ec>)
 8003184:	f017 f950 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8003188:	4b98      	ldr	r3, [pc, #608]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 800318a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800318e:	2201      	movs	r2, #1
 8003190:	4618      	mov	r0, r3
 8003192:	f008 fa65 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8003196:	2101      	movs	r1, #1
 8003198:	2009      	movs	r0, #9
 800319a:	f002 fc53 	bl	8005a44 <set_rail_monitor_enable>

		break;
 800319e:	e206      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80031a0:	4893      	ldr	r0, [pc, #588]	; (80033f0 <HAL_UART_RxCpltCallback+0x6f4>)
 80031a2:	f017 f941 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80031a6:	4b91      	ldr	r3, [pc, #580]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80031a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031ac:	2200      	movs	r2, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f008 fa56 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80031b4:	2100      	movs	r1, #0
 80031b6:	2009      	movs	r0, #9
 80031b8:	f002 fc44 	bl	8005a44 <set_rail_monitor_enable>
		break;
 80031bc:	e1f7      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80031be:	488d      	ldr	r0, [pc, #564]	; (80033f4 <HAL_UART_RxCpltCallback+0x6f8>)
 80031c0:	f017 f932 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 80031c4:	4b89      	ldr	r3, [pc, #548]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	2201      	movs	r2, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f008 fa48 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 80031d0:	2101      	movs	r1, #1
 80031d2:	200a      	movs	r0, #10
 80031d4:	f002 fc36 	bl	8005a44 <set_rail_monitor_enable>

		break;
 80031d8:	e1e9      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 80031da:	4887      	ldr	r0, [pc, #540]	; (80033f8 <HAL_UART_RxCpltCallback+0x6fc>)
 80031dc:	f017 f924 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 80031e0:	4b82      	ldr	r3, [pc, #520]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	2200      	movs	r2, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f008 fa3a 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 80031ec:	2100      	movs	r1, #0
 80031ee:	200a      	movs	r0, #10
 80031f0:	f002 fc28 	bl	8005a44 <set_rail_monitor_enable>
		break;
 80031f4:	e1db      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 80031f6:	4881      	ldr	r0, [pc, #516]	; (80033fc <HAL_UART_RxCpltCallback+0x700>)
 80031f8:	f017 f916 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80031fc:	4b7b      	ldr	r3, [pc, #492]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	2201      	movs	r2, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f008 fa2c 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8003208:	2101      	movs	r1, #1
 800320a:	200b      	movs	r0, #11
 800320c:	f002 fc1a 	bl	8005a44 <set_rail_monitor_enable>

		break;
 8003210:	e1cd      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8003212:	487b      	ldr	r0, [pc, #492]	; (8003400 <HAL_UART_RxCpltCallback+0x704>)
 8003214:	f017 f908 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8003218:	4b74      	ldr	r3, [pc, #464]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 800321a:	2140      	movs	r1, #64	; 0x40
 800321c:	2200      	movs	r2, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f008 fa1e 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8003224:	2100      	movs	r1, #0
 8003226:	200b      	movs	r0, #11
 8003228:	f002 fc0c 	bl	8005a44 <set_rail_monitor_enable>
		break;
 800322c:	e1bf      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800322e:	4875      	ldr	r0, [pc, #468]	; (8003404 <HAL_UART_RxCpltCallback+0x708>)
 8003230:	f017 f8fa 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8003234:	4b6d      	ldr	r3, [pc, #436]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 8003236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800323a:	2201      	movs	r2, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f008 fa0f 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8003242:	2101      	movs	r1, #1
 8003244:	200c      	movs	r0, #12
 8003246:	f002 fbfd 	bl	8005a44 <set_rail_monitor_enable>

		break;
 800324a:	e1b0      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 800324c:	486e      	ldr	r0, [pc, #440]	; (8003408 <HAL_UART_RxCpltCallback+0x70c>)
 800324e:	f017 f8eb 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8003252:	4b66      	ldr	r3, [pc, #408]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 8003254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003258:	2200      	movs	r2, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f008 fa00 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8003260:	2100      	movs	r1, #0
 8003262:	200c      	movs	r0, #12
 8003264:	f002 fbee 	bl	8005a44 <set_rail_monitor_enable>
		break;
 8003268:	e1a1      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 800326a:	4868      	ldr	r0, [pc, #416]	; (800340c <HAL_UART_RxCpltCallback+0x710>)
 800326c:	f017 f8dc 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8003270:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 8003272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003276:	2201      	movs	r2, #1
 8003278:	4618      	mov	r0, r3
 800327a:	f008 f9f1 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 800327e:	2101      	movs	r1, #1
 8003280:	200d      	movs	r0, #13
 8003282:	f002 fbdf 	bl	8005a44 <set_rail_monitor_enable>

		break;
 8003286:	e192      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8003288:	4861      	ldr	r0, [pc, #388]	; (8003410 <HAL_UART_RxCpltCallback+0x714>)
 800328a:	f017 f8cd 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800328e:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 8003290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003294:	2200      	movs	r2, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f008 f9e2 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800329c:	2100      	movs	r1, #0
 800329e:	200d      	movs	r0, #13
 80032a0:	f002 fbd0 	bl	8005a44 <set_rail_monitor_enable>
		break;
 80032a4:	e183      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80032a6:	485b      	ldr	r0, [pc, #364]	; (8003414 <HAL_UART_RxCpltCallback+0x718>)
 80032a8:	f017 f8be 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80032ac:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80032ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032b2:	2201      	movs	r2, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f008 f9d3 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 80032ba:	2101      	movs	r1, #1
 80032bc:	200f      	movs	r0, #15
 80032be:	f002 fbc1 	bl	8005a44 <set_rail_monitor_enable>

		break;
 80032c2:	e174      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 80032c4:	4854      	ldr	r0, [pc, #336]	; (8003418 <HAL_UART_RxCpltCallback+0x71c>)
 80032c6:	f017 f8af 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 80032ca:	4b48      	ldr	r3, [pc, #288]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80032cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032d0:	2200      	movs	r2, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f008 f9c4 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 80032d8:	2100      	movs	r1, #0
 80032da:	200f      	movs	r0, #15
 80032dc:	f002 fbb2 	bl	8005a44 <set_rail_monitor_enable>
		break;
 80032e0:	e165      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 80032e2:	484e      	ldr	r0, [pc, #312]	; (800341c <HAL_UART_RxCpltCallback+0x720>)
 80032e4:	f017 f8a0 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	2201      	movs	r2, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f008 f9b6 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 80032f4:	2101      	movs	r1, #1
 80032f6:	2010      	movs	r0, #16
 80032f8:	f002 fba4 	bl	8005a44 <set_rail_monitor_enable>

		break;
 80032fc:	e157      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 80032fe:	4848      	ldr	r0, [pc, #288]	; (8003420 <HAL_UART_RxCpltCallback+0x724>)
 8003300:	f017 f892 	bl	801a428 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8003304:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 8003306:	2140      	movs	r1, #64	; 0x40
 8003308:	2200      	movs	r2, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f008 f9a8 	bl	800b660 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8003310:	2100      	movs	r1, #0
 8003312:	2010      	movs	r0, #16
 8003314:	f002 fb96 	bl	8005a44 <set_rail_monitor_enable>
		break;
 8003318:	e149      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 800331a:	4842      	ldr	r0, [pc, #264]	; (8003424 <HAL_UART_RxCpltCallback+0x728>)
 800331c:	f017 f884 	bl	801a428 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8003320:	2300      	movs	r3, #0
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2320      	movs	r3, #32
 8003326:	4a40      	ldr	r2, [pc, #256]	; (8003428 <HAL_UART_RxCpltCallback+0x72c>)
 8003328:	2100      	movs	r1, #0
 800332a:	4840      	ldr	r0, [pc, #256]	; (800342c <HAL_UART_RxCpltCallback+0x730>)
 800332c:	f004 fb14 	bl	8007958 <HAL_DAC_Start_DMA>
		break;
 8003330:	e13d      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8003332:	483f      	ldr	r0, [pc, #252]	; (8003430 <HAL_UART_RxCpltCallback+0x734>)
 8003334:	f017 f878 	bl	801a428 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8003338:	2100      	movs	r1, #0
 800333a:	483c      	ldr	r0, [pc, #240]	; (800342c <HAL_UART_RxCpltCallback+0x730>)
 800333c:	f004 fbcc 	bl	8007ad8 <HAL_DAC_Stop_DMA>
		break;
 8003340:	e135      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8003342:	483c      	ldr	r0, [pc, #240]	; (8003434 <HAL_UART_RxCpltCallback+0x738>)
 8003344:	f017 f870 	bl	801a428 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8003348:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_UART_RxCpltCallback+0x73c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2102      	movs	r1, #2
 800334e:	4618      	mov	r0, r3
 8003350:	f013 ff2e 	bl	80171b0 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8003354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003358:	f44f 729c 	mov.w	r2, #312	; 0x138
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 800335e:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_UART_RxCpltCallback+0x740>)
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]

		break;
 8003364:	e123      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8003366:	4836      	ldr	r0, [pc, #216]	; (8003440 <HAL_UART_RxCpltCallback+0x744>)
 8003368:	f017 f85e 	bl	801a428 <puts>
		ERPA_ENABLED = 0;
 800336c:	4b33      	ldr	r3, [pc, #204]	; (800343c <HAL_UART_RxCpltCallback+0x740>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003376:	2200      	movs	r2, #0
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800337a:	e118      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 800337c:	4831      	ldr	r0, [pc, #196]	; (8003444 <HAL_UART_RxCpltCallback+0x748>)
 800337e:	f017 f853 	bl	801a428 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003382:	2100      	movs	r1, #0
 8003384:	4830      	ldr	r0, [pc, #192]	; (8003448 <HAL_UART_RxCpltCallback+0x74c>)
 8003386:	f00f fc25 	bl	8012bd4 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800338a:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_UART_RxCpltCallback+0x73c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f013 ff0d 	bl	80171b0 <osEventFlagsSet>
		break;
 8003396:	e10a      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003398:	482c      	ldr	r0, [pc, #176]	; (800344c <HAL_UART_RxCpltCallback+0x750>)
 800339a:	f017 f845 	bl	801a428 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800339e:	2100      	movs	r1, #0
 80033a0:	4829      	ldr	r0, [pc, #164]	; (8003448 <HAL_UART_RxCpltCallback+0x74c>)
 80033a2:	f00f fd71 	bl	8012e88 <HAL_TIM_OC_Stop_IT>
		break;
 80033a6:	e102      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 80033a8:	4829      	ldr	r0, [pc, #164]	; (8003450 <HAL_UART_RxCpltCallback+0x754>)
 80033aa:	f017 f83d 	bl	801a428 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_UART_RxCpltCallback+0x73c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2104      	movs	r1, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f013 fefb 	bl	80171b0 <osEventFlagsSet>
		HK_ENABLED = 1;
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <HAL_UART_RxCpltCallback+0x758>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
		break;
 80033c0:	e0f5      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80033c2:	4825      	ldr	r0, [pc, #148]	; (8003458 <HAL_UART_RxCpltCallback+0x75c>)
 80033c4:	f017 f830 	bl	801a428 <puts>
		HK_ENABLED = 0;
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <HAL_UART_RxCpltCallback+0x758>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
		break;
 80033ce:	e0ee      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
 80033d0:	0801adf0 	.word	0x0801adf0
 80033d4:	58020400 	.word	0x58020400
 80033d8:	0801adf8 	.word	0x0801adf8
 80033dc:	0801ae04 	.word	0x0801ae04
 80033e0:	0801ae10 	.word	0x0801ae10
 80033e4:	0801b10c 	.word	0x0801b10c
 80033e8:	0801ae1c 	.word	0x0801ae1c
 80033ec:	58020800 	.word	0x58020800
 80033f0:	0801ae28 	.word	0x0801ae28
 80033f4:	0801ae38 	.word	0x0801ae38
 80033f8:	0801ae44 	.word	0x0801ae44
 80033fc:	0801ae50 	.word	0x0801ae50
 8003400:	0801ae5c 	.word	0x0801ae5c
 8003404:	0801ae6c 	.word	0x0801ae6c
 8003408:	0801ae78 	.word	0x0801ae78
 800340c:	0801ae84 	.word	0x0801ae84
 8003410:	0801ae90 	.word	0x0801ae90
 8003414:	0801ae9c 	.word	0x0801ae9c
 8003418:	0801aeac 	.word	0x0801aeac
 800341c:	0801aebc 	.word	0x0801aebc
 8003420:	0801aec8 	.word	0x0801aec8
 8003424:	0801aed8 	.word	0x0801aed8
 8003428:	2400003c 	.word	0x2400003c
 800342c:	24000314 	.word	0x24000314
 8003430:	0801aee8 	.word	0x0801aee8
 8003434:	0801aef8 	.word	0x0801aef8
 8003438:	24001a90 	.word	0x24001a90
 800343c:	24001add 	.word	0x24001add
 8003440:	0801af00 	.word	0x0801af00
 8003444:	0801af0c 	.word	0x0801af0c
 8003448:	24001da4 	.word	0x24001da4
 800344c:	0801af14 	.word	0x0801af14
 8003450:	0801af1c 	.word	0x0801af1c
 8003454:	24001adc 	.word	0x24001adc
 8003458:	0801af24 	.word	0x0801af24
	}
	case 0x1D: {
		printf("Step Up\n");
 800345c:	4856      	ldr	r0, [pc, #344]	; (80035b8 <HAL_UART_RxCpltCallback+0x8bc>)
 800345e:	f016 ffe3 	bl	801a428 <puts>
		if (step < 14) {
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b0d      	cmp	r3, #13
 800346a:	f200 8099 	bhi.w	80035a0 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 800346e:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	3302      	adds	r3, #2
 8003476:	b2da      	uxtb	r2, r3
 8003478:	4b50      	ldr	r3, [pc, #320]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 800347a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800347c:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <HAL_UART_RxCpltCallback+0x8c4>)
 8003486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	484d      	ldr	r0, [pc, #308]	; (80035c4 <HAL_UART_RxCpltCallback+0x8c8>)
 8003490:	f004 fbc5 	bl	8007c1e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003494:	2100      	movs	r1, #0
 8003496:	484b      	ldr	r0, [pc, #300]	; (80035c4 <HAL_UART_RxCpltCallback+0x8c8>)
 8003498:	f004 fa06 	bl	80078a8 <HAL_DAC_Start>
		}
		break;
 800349c:	e080      	b.n	80035a0 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 800349e:	484a      	ldr	r0, [pc, #296]	; (80035c8 <HAL_UART_RxCpltCallback+0x8cc>)
 80034a0:	f016 ffc2 	bl	801a428 <puts>
		if (step > 1) {
 80034a4:	4b45      	ldr	r3, [pc, #276]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d97a      	bls.n	80035a4 <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3b02      	subs	r3, #2
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 80034ba:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <HAL_UART_RxCpltCallback+0x8c4>)
 80034c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	483d      	ldr	r0, [pc, #244]	; (80035c4 <HAL_UART_RxCpltCallback+0x8c8>)
 80034d0:	f004 fba5 	bl	8007c1e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80034d4:	2100      	movs	r1, #0
 80034d6:	483b      	ldr	r0, [pc, #236]	; (80035c4 <HAL_UART_RxCpltCallback+0x8c8>)
 80034d8:	f004 f9e6 	bl	80078a8 <HAL_DAC_Start>
		}
		break;
 80034dc:	e062      	b.n	80035a4 <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 80034de:	483b      	ldr	r0, [pc, #236]	; (80035cc <HAL_UART_RxCpltCallback+0x8d0>)
 80034e0:	f016 ffa2 	bl	801a428 <puts>
		if (cadence <= 50000) {
 80034e4:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d85b      	bhi.n	80035a8 <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4a36      	ldr	r2, [pc, #216]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 80034f8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80034fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034fe:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003504:	e050      	b.n	80035a8 <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8003506:	4833      	ldr	r0, [pc, #204]	; (80035d4 <HAL_UART_RxCpltCallback+0x8d8>)
 8003508:	f016 ff8e 	bl	801a428 <puts>
		if (cadence >= 6250) {
 800350c:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f641 0269 	movw	r2, #6249	; 0x1869
 8003514:	4293      	cmp	r3, r2
 8003516:	d949      	bls.n	80035ac <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 8003520:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800352c:	e03e      	b.n	80035ac <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 800352e:	482a      	ldr	r0, [pc, #168]	; (80035d8 <HAL_UART_RxCpltCallback+0x8dc>)
 8003530:	f016 ff7a 	bl	801a428 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_UART_RxCpltCallback+0x8e0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f013 fe38 	bl	80171b0 <osEventFlagsSet>
		break;
 8003540:	e035      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8003542:	4827      	ldr	r0, [pc, #156]	; (80035e0 <HAL_UART_RxCpltCallback+0x8e4>)
 8003544:	f016 ff70 	bl	801a428 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8003548:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_UART_RxCpltCallback+0x8e0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2104      	movs	r1, #4
 800354e:	4618      	mov	r0, r3
 8003550:	f013 fe2e 	bl	80171b0 <osEventFlagsSet>
		break;
 8003554:	e02b      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8003556:	4823      	ldr	r0, [pc, #140]	; (80035e4 <HAL_UART_RxCpltCallback+0x8e8>)
 8003558:	f016 ff66 	bl	801a428 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_UART_RxCpltCallback+0x8e0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2108      	movs	r1, #8
 8003562:	4618      	mov	r0, r3
 8003564:	f013 fe24 	bl	80171b0 <osEventFlagsSet>
		break;
 8003568:	e021      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 800356a:	f000 f999 	bl	80038a0 <sync>
		break;
 800356e:	e01e      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_UART_RxCpltCallback+0x8ec>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	4618      	mov	r0, r3
 8003578:	f013 fe1a 	bl	80171b0 <osEventFlagsSet>
		break;
 800357c:	e017      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_UART_RxCpltCallback+0x8ec>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2102      	movs	r1, #2
 8003584:	4618      	mov	r0, r3
 8003586:	f013 fe13 	bl	80171b0 <osEventFlagsSet>
		break;
 800358a:	e010      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 800358c:	f7fe fd84 	bl	8002098 <reset_error_counters>
		break;
 8003590:	e00d      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 8003592:	f7fe ff31 	bl	80023f8 <send_previous_error_packet>
#endif
		break;
 8003596:	e00a      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 8003598:	4814      	ldr	r0, [pc, #80]	; (80035ec <HAL_UART_RxCpltCallback+0x8f0>)
 800359a:	f016 ff45 	bl	801a428 <puts>
		break;
 800359e:	e006      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
		break;
 80035a0:	bf00      	nop
 80035a2:	e004      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
		break;
 80035a4:	bf00      	nop
 80035a6:	e002      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
		break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
		break;
 80035ac:	bf00      	nop
	}
	}
}
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	0801af2c 	.word	0x0801af2c
 80035bc:	24001ade 	.word	0x24001ade
 80035c0:	2400003c 	.word	0x2400003c
 80035c4:	24000314 	.word	0x24000314
 80035c8:	0801af34 	.word	0x0801af34
 80035cc:	0801af40 	.word	0x0801af40
 80035d0:	240000bc 	.word	0x240000bc
 80035d4:	0801af4c 	.word	0x0801af4c
 80035d8:	0801af58 	.word	0x0801af58
 80035dc:	24001a94 	.word	0x24001a94
 80035e0:	0801af68 	.word	0x0801af68
 80035e4:	0801af74 	.word	0x0801af74
 80035e8:	24001a98 	.word	0x24001a98
 80035ec:	0801af80 	.word	0x0801af80

080035f0 <get_reset_cause>:

void get_reset_cause()
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <get_reset_cause+0x58>)
 80035f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80035fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <get_reset_cause+0x24>
    {
        error.category = EC_watchdog;
 8003604:	2304      	movs	r3, #4
 8003606:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003608:	231a      	movs	r3, #26
 800360a:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fe fca5 	bl	8001f5c <handle_error>
 8003612:	e00d      	b.n	8003630 <get_reset_cause+0x40>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <get_reset_cause+0x58>)
 8003616:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800361a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <get_reset_cause+0x40>
    {
        error.category = EC_brownout;
 8003622:	2303      	movs	r3, #3
 8003624:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003626:	231a      	movs	r3, #26
 8003628:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fe fc96 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <get_reset_cause+0x58>)
 8003632:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <get_reset_cause+0x58>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	58024400 	.word	0x58024400

0800364c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003650:	f002 fb96 	bl	8005d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003654:	f000 f828 	bl	80036a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003658:	f000 f8a8 	bl	80037ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800365c:	f7ff f948 	bl	80028f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003660:	f7fd fb42 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003664:	f001 ff26 	bl	80054b4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003668:	f7ff f9bc 	bl	80029e4 <MX_I2C1_Init>
  MX_SPI2_Init();
 800366c:	f000 fe60 	bl	8004330 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003670:	f001 fb4c 	bl	8004d0c <MX_TIM2_Init>
  MX_TIM1_Init();
 8003674:	f001 fa9c 	bl	8004bb0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8003678:	f7fd f8d6 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 800367c:	f7fc ffb2 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003680:	f7fd fa7e 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003684:	f000 fdfc 	bl	8004280 <MX_SPI1_Init>
  MX_RTC_Init();
 8003688:	f000 fbc8 	bl	8003e1c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
 800368c:	f7fe fc90 	bl	8001fb0 <error_counter_init>
  	get_reset_cause();
 8003690:	f7ff ffae 	bl	80035f0 <get_reset_cause>
#endif

  system_setup();
 8003694:	f000 f8ba 	bl	800380c <system_setup>
//  handle_error(error);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003698:	f013 fc34 	bl	8016f04 <osKernelInitialize>
  MX_FREERTOS_Init();
 800369c:	f7fe fefc 	bl	8002498 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80036a0:	f013 fc54 	bl	8016f4c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80036a4:	e7fe      	b.n	80036a4 <main+0x58>
	...

080036a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b09c      	sub	sp, #112	; 0x70
 80036ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b2:	224c      	movs	r2, #76	; 0x4c
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f016 fe40 	bl	801a33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	2220      	movs	r2, #32
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f016 fe3a 	bl	801a33c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80036c8:	2002      	movs	r0, #2
 80036ca:	f00a fb93 	bl	800ddf4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80036ce:	2300      	movs	r3, #0
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <SystemClock_Config+0xfc>)
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	4a33      	ldr	r2, [pc, #204]	; (80037a4 <SystemClock_Config+0xfc>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <SystemClock_Config+0xfc>)
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <SystemClock_Config+0x100>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036f0:	4a2d      	ldr	r2, [pc, #180]	; (80037a8 <SystemClock_Config+0x100>)
 80036f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f6:	6193      	str	r3, [r2, #24]
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <SystemClock_Config+0x100>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003704:	bf00      	nop
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <SystemClock_Config+0x100>)
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003712:	d1f8      	bne.n	8003706 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003714:	230b      	movs	r3, #11
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800371e:	2309      	movs	r3, #9
 8003720:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003722:	2340      	movs	r3, #64	; 0x40
 8003724:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003726:	2301      	movs	r3, #1
 8003728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800372a:	2302      	movs	r3, #2
 800372c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800372e:	2302      	movs	r3, #2
 8003730:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003732:	2304      	movs	r3, #4
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003736:	2318      	movs	r3, #24
 8003738:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800373a:	2302      	movs	r3, #2
 800373c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800373e:	2302      	movs	r3, #2
 8003740:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003742:	2302      	movs	r3, #2
 8003744:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003746:	2308      	movs	r3, #8
 8003748:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800374a:	2302      	movs	r3, #2
 800374c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003756:	4618      	mov	r0, r3
 8003758:	f00a fb86 	bl	800de68 <HAL_RCC_OscConfig>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003762:	f000 f955 	bl	8003a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003766:	233f      	movs	r3, #63	; 0x3f
 8003768:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800376a:	2303      	movs	r3, #3
 800376c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800377a:	2340      	movs	r3, #64	; 0x40
 800377c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	2101      	movs	r1, #1
 800378a:	4618      	mov	r0, r3
 800378c:	f00a ffc6 	bl	800e71c <HAL_RCC_ClockConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003796:	f000 f93b 	bl	8003a10 <Error_Handler>
  }
}
 800379a:	bf00      	nop
 800379c:	3770      	adds	r7, #112	; 0x70
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	58000400 	.word	0x58000400
 80037a8:	58024800 	.word	0x58024800

080037ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b0b0      	sub	sp, #192	; 0xc0
 80037b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037b2:	463b      	mov	r3, r7
 80037b4:	22c0      	movs	r2, #192	; 0xc0
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f016 fdbf 	bl	801a33c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80037be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80037ca:	2304      	movs	r3, #4
 80037cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80037ce:	2318      	movs	r3, #24
 80037d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80037d2:	2308      	movs	r3, #8
 80037d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80037d6:	2302      	movs	r3, #2
 80037d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80037da:	2302      	movs	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80037e2:	2320      	movs	r3, #32
 80037e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037f0:	463b      	mov	r3, r7
 80037f2:	4618      	mov	r0, r3
 80037f4:	f00b fb60 	bl	800eeb8 <HAL_RCCEx_PeriphCLKConfig>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80037fe:	f000 f907 	bl	8003a10 <Error_Handler>
  }
}
 8003802:	bf00      	nop
 8003804:	37c0      	adds	r7, #192	; 0xc0
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 8003810:	2000      	movs	r0, #0
 8003812:	f013 fc8e 	bl	8017132 <osEventFlagsNew>
 8003816:	4603      	mov	r3, r0
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <system_setup+0x7c>)
 800381a:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <system_setup+0x7c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d100      	bne.n	8003826 <system_setup+0x1a>
        while (1);
 8003824:	e7fe      	b.n	8003824 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8003826:	2000      	movs	r0, #0
 8003828:	f013 fc83 	bl	8017132 <osEventFlagsNew>
 800382c:	4603      	mov	r3, r0
 800382e:	4a17      	ldr	r2, [pc, #92]	; (800388c <system_setup+0x80>)
 8003830:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <system_setup+0x80>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d100      	bne.n	800383c <system_setup+0x30>
        while (1);
 800383a:	e7fe      	b.n	800383a <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 800383c:	2000      	movs	r0, #0
 800383e:	f013 fc78 	bl	8017132 <osEventFlagsNew>
 8003842:	4603      	mov	r3, r0
 8003844:	4a12      	ldr	r2, [pc, #72]	; (8003890 <system_setup+0x84>)
 8003846:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <system_setup+0x84>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d100      	bne.n	8003852 <system_setup+0x46>
        while (1);
 8003850:	e7fe      	b.n	8003850 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 8003852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003856:	2200      	movs	r2, #0
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800385a:	210c      	movs	r1, #12
 800385c:	480d      	ldr	r0, [pc, #52]	; (8003894 <system_setup+0x88>)
 800385e:	f00f f9b9 	bl	8012bd4 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 8003862:	f001 ff31 	bl	80056c8 <voltage_monitor_init>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d100      	bne.n	800386e <system_setup+0x62>
		while (1);
 800386c:	e7fe      	b.n	800386c <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 800386e:	f000 fb67 	bl	8003f40 <init_adc_dma>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d100      	bne.n	800387a <system_setup+0x6e>
		while (1);
 8003878:	e7fe      	b.n	8003878 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800387a:	2201      	movs	r2, #1
 800387c:	4906      	ldr	r1, [pc, #24]	; (8003898 <system_setup+0x8c>)
 800387e:	4807      	ldr	r0, [pc, #28]	; (800389c <system_setup+0x90>)
 8003880:	f010 fe88 	bl	8014594 <HAL_UART_Receive_IT>

	//MX_IWDG1_Init();

}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	24001a90 	.word	0x24001a90
 800388c:	24001a94 	.word	0x24001a94
 8003890:	24001a98 	.word	0x24001a98
 8003894:	24001df0 	.word	0x24001df0
 8003898:	24001a9c 	.word	0x24001a9c
 800389c:	24001e3c 	.word	0x24001e3c

080038a0 <sync>:

void sync() {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
	send_ACK();
 80038a6:	f000 f821 	bl	80038ec <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80038aa:	480e      	ldr	r0, [pc, #56]	; (80038e4 <sync+0x44>)
 80038ac:	f010 febe 	bl	801462c <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80038b0:	2364      	movs	r3, #100	; 0x64
 80038b2:	2209      	movs	r2, #9
 80038b4:	490c      	ldr	r1, [pc, #48]	; (80038e8 <sync+0x48>)
 80038b6:	480b      	ldr	r0, [pc, #44]	; (80038e4 <sync+0x44>)
 80038b8:	f010 fda4 	bl	8014404 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <sync+0x48>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	2bff      	cmp	r3, #255	; 0xff
 80038c6:	d1f3      	bne.n	80038b0 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 80038c8:	4807      	ldr	r0, [pc, #28]	; (80038e8 <sync+0x48>)
 80038ca:	f001 fd31 	bl	8005330 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80038ce:	2201      	movs	r2, #1
 80038d0:	4905      	ldr	r1, [pc, #20]	; (80038e8 <sync+0x48>)
 80038d2:	4804      	ldr	r0, [pc, #16]	; (80038e4 <sync+0x44>)
 80038d4:	f010 fe5e 	bl	8014594 <HAL_UART_Receive_IT>
	send_error_counter_packet();
 80038d8:	f7fe fc52 	bl	8002180 <send_error_counter_packet>
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	24001e3c 	.word	0x24001e3c
 80038e8:	24001a9c 	.word	0x24001a9c

080038ec <send_ACK>:

void send_ACK() {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <send_ACK+0x1c>)
 80038f2:	22ff      	movs	r2, #255	; 0xff
 80038f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80038f6:	2364      	movs	r3, #100	; 0x64
 80038f8:	2201      	movs	r2, #1
 80038fa:	4903      	ldr	r1, [pc, #12]	; (8003908 <send_ACK+0x1c>)
 80038fc:	4803      	ldr	r0, [pc, #12]	; (800390c <send_ACK+0x20>)
 80038fe:	f010 fcf3 	bl	80142e8 <HAL_UART_Transmit>
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	24001ae8 	.word	0x24001ae8
 800390c:	24001e3c 	.word	0x24001e3c

08003910 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <get_current_step+0xc0>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003922:	4293      	cmp	r3, r2
 8003924:	d04a      	beq.n	80039bc <get_current_step+0xac>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392c:	da48      	bge.n	80039c0 <get_current_step+0xb0>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003934:	4293      	cmp	r3, r2
 8003936:	d03f      	beq.n	80039b8 <get_current_step+0xa8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f640 628b 	movw	r2, #3723	; 0xe8b
 800393e:	4293      	cmp	r3, r2
 8003940:	dc3e      	bgt.n	80039c0 <get_current_step+0xb0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003948:	4293      	cmp	r3, r2
 800394a:	d033      	beq.n	80039b4 <get_current_step+0xa4>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003952:	da35      	bge.n	80039c0 <get_current_step+0xb0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800395a:	4293      	cmp	r3, r2
 800395c:	d028      	beq.n	80039b0 <get_current_step+0xa0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003964:	4293      	cmp	r3, r2
 8003966:	dc2b      	bgt.n	80039c0 <get_current_step+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f240 7245 	movw	r2, #1861	; 0x745
 800396e:	4293      	cmp	r3, r2
 8003970:	d01c      	beq.n	80039ac <get_current_step+0x9c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f240 7245 	movw	r2, #1861	; 0x745
 8003978:	4293      	cmp	r3, r2
 800397a:	dc21      	bgt.n	80039c0 <get_current_step+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003982:	4293      	cmp	r3, r2
 8003984:	d010      	beq.n	80039a8 <get_current_step+0x98>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800398c:	4293      	cmp	r3, r2
 800398e:	dc17      	bgt.n	80039c0 <get_current_step+0xb0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <get_current_step+0x90>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 800399c:	d002      	beq.n	80039a4 <get_current_step+0x94>
 800399e:	e00f      	b.n	80039c0 <get_current_step+0xb0>
	case 0:
		return 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e00e      	b.n	80039c2 <get_current_step+0xb2>
	case 620:
		return 1;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e00c      	b.n	80039c2 <get_current_step+0xb2>
	case 1241:
		return 2;
 80039a8:	2302      	movs	r3, #2
 80039aa:	e00a      	b.n	80039c2 <get_current_step+0xb2>
	case 1861:
		return 3;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e008      	b.n	80039c2 <get_current_step+0xb2>
	case 2482:
		return 4;
 80039b0:	2304      	movs	r3, #4
 80039b2:	e006      	b.n	80039c2 <get_current_step+0xb2>
	case 3103:
		return 5;
 80039b4:	2305      	movs	r3, #5
 80039b6:	e004      	b.n	80039c2 <get_current_step+0xb2>
	case 3723:
		return 6;
 80039b8:	2306      	movs	r3, #6
 80039ba:	e002      	b.n	80039c2 <get_current_step+0xb2>
	case 4095:
		return 7;
 80039bc:	2307      	movs	r3, #7
 80039be:	e000      	b.n	80039c2 <get_current_step+0xb2>
	default:
		return -1;
 80039c0:	23ff      	movs	r3, #255	; 0xff
	}
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40007400 	.word	0x40007400

080039d4 <enter_stop>:

void enter_stop() {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
	  send_ACK();
 80039d8:	f7ff ff88 	bl	80038ec <send_ACK>

	  vTaskSuspendAll();
 80039dc:	f014 ff40 	bl	8018860 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80039e0:	2101      	movs	r1, #1
 80039e2:	2001      	movs	r0, #1
 80039e4:	f00a f9ca 	bl	800dd7c <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 80039e8:	f7ff f91c 	bl	8002c24 <__NVIC_SystemReset>

080039ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a04      	ldr	r2, [pc, #16]	; (8003a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039fe:	f002 f9fb 	bl	8005df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40001000 	.word	0x40001000

08003a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003a16:	2302      	movs	r3, #2
 8003a18:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8003a1a:	231a      	movs	r3, #26
 8003a1c:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe fa9c 	bl	8001f5c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003a32:	bf00      	nop
 8003a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a38:	481c      	ldr	r0, [pc, #112]	; (8003aac <create_pmt_packet+0x80>)
 8003a3a:	f007 fdf9 	bl	800b630 <HAL_GPIO_ReadPin>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f7      	bne.n	8003a34 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fa98 	bl	8004f7c <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003a4c:	f107 0308 	add.w	r3, r7, #8
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fac9 	bl	8003fe8 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003a56:	23ff      	movs	r3, #255	; 0xff
 8003a58:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003a5a:	23ff      	movs	r3, #255	; 0xff
 8003a5c:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <create_pmt_packet+0x84>)
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <create_pmt_packet+0x84>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003a72:	7a3b      	ldrb	r3, [r7, #8]
 8003a74:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003a76:	7a7b      	ldrb	r3, [r7, #9]
 8003a78:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003a7a:	793b      	ldrb	r3, [r7, #4]
 8003a7c:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003a7e:	797b      	ldrb	r3, [r7, #5]
 8003a80:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003a82:	79bb      	ldrb	r3, [r7, #6]
 8003a84:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003a8a:	f107 010c 	add.w	r1, r7, #12
 8003a8e:	2364      	movs	r3, #100	; 0x64
 8003a90:	220a      	movs	r2, #10
 8003a92:	4808      	ldr	r0, [pc, #32]	; (8003ab4 <create_pmt_packet+0x88>)
 8003a94:	f010 fc28 	bl	80142e8 <HAL_UART_Transmit>

	pmt_seq++;
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <create_pmt_packet+0x84>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <create_pmt_packet+0x84>)
 8003aa2:	801a      	strh	r2, [r3, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	58020000 	.word	0x58020000
 8003ab0:	24001aea 	.word	0x24001aea
 8003ab4:	24001e3c 	.word	0x24001e3c

08003ab8 <create_erpa_packet>:


void create_erpa_packet() {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003abe:	bf00      	nop
 8003ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ac4:	4828      	ldr	r0, [pc, #160]	; (8003b68 <create_erpa_packet+0xb0>)
 8003ac6:	f007 fdb3 	bl	800b630 <HAL_GPIO_ReadPin>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f7      	bne.n	8003ac0 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003ad0:	23ff      	movs	r3, #255	; 0xff
 8003ad2:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 fa50 	bl	8004f7c <get_uptime>
	sweep_step = get_current_step();
 8003adc:	f7ff ff18 	bl	8003910 <get_current_step>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fa9d 	bl	8004028 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fab8 	bl	8004068 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003af8:	23ee      	movs	r3, #238	; 0xee
 8003afa:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003afc:	23ee      	movs	r3, #238	; 0xee
 8003afe:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003b14:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003b1c:	7ffb      	ldrb	r3, [r7, #31]
 8003b1e:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003b20:	893b      	ldrh	r3, [r7, #8]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003b2a:	893b      	ldrh	r3, [r7, #8]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003b30:	7b3b      	ldrb	r3, [r7, #12]
 8003b32:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003b34:	7b7b      	ldrb	r3, [r7, #13]
 8003b36:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003b38:	793b      	ldrb	r3, [r7, #4]
 8003b3a:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003b3c:	797b      	ldrb	r3, [r7, #5]
 8003b3e:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003b40:	79bb      	ldrb	r3, [r7, #6]
 8003b42:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003b48:	f107 0110 	add.w	r1, r7, #16
 8003b4c:	2364      	movs	r3, #100	; 0x64
 8003b4e:	220e      	movs	r2, #14
 8003b50:	4807      	ldr	r0, [pc, #28]	; (8003b70 <create_erpa_packet+0xb8>)
 8003b52:	f010 fbc9 	bl	80142e8 <HAL_UART_Transmit>

	erpa_seq++;
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a03      	ldr	r2, [pc, #12]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	bf00      	nop
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	58020400 	.word	0x58020400
 8003b6c:	24001aec 	.word	0x24001aec
 8003b70:	24001e3c 	.word	0x24001e3c

08003b74 <create_hk_packet>:


void create_hk_packet() {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b092      	sub	sp, #72	; 0x48
 8003b78:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 f9fd 	bl	8004f7c <get_uptime>
	get_unix_time(timestamp);
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fa48 	bl	800501c <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8003b8c:	f001 ffdc 	bl	8005b48 <get_rail_monitor>
 8003b90:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003b92:	23dd      	movs	r3, #221	; 0xdd
 8003b94:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003b96:	23dd      	movs	r3, #221	; 0xdd
 8003b98:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003b9a:	4b93      	ldr	r3, [pc, #588]	; (8003de8 <create_hk_packet+0x274>)
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003ba6:	4b90      	ldr	r3, [pc, #576]	; (8003de8 <create_hk_packet+0x274>)
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb0:	889b      	ldrh	r3, [r3, #4]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbc:	889b      	ldrh	r3, [r3, #4]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc4:	330a      	adds	r3, #10
 8003bc6:	889b      	ldrh	r3, [r3, #4]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd2:	330a      	adds	r3, #10
 8003bd4:	889b      	ldrh	r3, [r3, #4]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bdc:	3314      	adds	r3, #20
 8003bde:	889b      	ldrh	r3, [r3, #4]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bea:	3314      	adds	r3, #20
 8003bec:	889b      	ldrh	r3, [r3, #4]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf4:	331e      	adds	r3, #30
 8003bf6:	889b      	ldrh	r3, [r3, #4]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c02:	331e      	adds	r3, #30
 8003c04:	889b      	ldrh	r3, [r3, #4]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0c:	3328      	adds	r3, #40	; 0x28
 8003c0e:	889b      	ldrh	r3, [r3, #4]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1a:	3328      	adds	r3, #40	; 0x28
 8003c1c:	889b      	ldrh	r3, [r3, #4]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	889b      	ldrh	r3, [r3, #4]
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c32:	3332      	adds	r3, #50	; 0x32
 8003c34:	889b      	ldrh	r3, [r3, #4]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3c:	333c      	adds	r3, #60	; 0x3c
 8003c3e:	889b      	ldrh	r3, [r3, #4]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4c:	333c      	adds	r3, #60	; 0x3c
 8003c4e:	889b      	ldrh	r3, [r3, #4]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c58:	3346      	adds	r3, #70	; 0x46
 8003c5a:	889b      	ldrh	r3, [r3, #4]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c68:	3346      	adds	r3, #70	; 0x46
 8003c6a:	889b      	ldrh	r3, [r3, #4]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	3350      	adds	r3, #80	; 0x50
 8003c76:	889b      	ldrh	r3, [r3, #4]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c84:	3350      	adds	r3, #80	; 0x50
 8003c86:	889b      	ldrh	r3, [r3, #4]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c90:	335a      	adds	r3, #90	; 0x5a
 8003c92:	889b      	ldrh	r3, [r3, #4]
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca0:	335a      	adds	r3, #90	; 0x5a
 8003ca2:	889b      	ldrh	r3, [r3, #4]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cac:	3364      	adds	r3, #100	; 0x64
 8003cae:	889b      	ldrh	r3, [r3, #4]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cbc:	3364      	adds	r3, #100	; 0x64
 8003cbe:	889b      	ldrh	r3, [r3, #4]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc8:	336e      	adds	r3, #110	; 0x6e
 8003cca:	889b      	ldrh	r3, [r3, #4]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd8:	336e      	adds	r3, #110	; 0x6e
 8003cda:	889b      	ldrh	r3, [r3, #4]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce4:	3378      	adds	r3, #120	; 0x78
 8003ce6:	889b      	ldrh	r3, [r3, #4]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf4:	3378      	adds	r3, #120	; 0x78
 8003cf6:	889b      	ldrh	r3, [r3, #4]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d00:	3382      	adds	r3, #130	; 0x82
 8003d02:	889b      	ldrh	r3, [r3, #4]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d10:	3382      	adds	r3, #130	; 0x82
 8003d12:	889b      	ldrh	r3, [r3, #4]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1c:	338c      	adds	r3, #140	; 0x8c
 8003d1e:	889b      	ldrh	r3, [r3, #4]
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2c:	338c      	adds	r3, #140	; 0x8c
 8003d2e:	889b      	ldrh	r3, [r3, #4]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d38:	3396      	adds	r3, #150	; 0x96
 8003d3a:	889b      	ldrh	r3, [r3, #4]
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d48:	3396      	adds	r3, #150	; 0x96
 8003d4a:	889b      	ldrh	r3, [r3, #4]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d54:	33a0      	adds	r3, #160	; 0xa0
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d64:	33a0      	adds	r3, #160	; 0xa0
 8003d66:	889b      	ldrh	r3, [r3, #4]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d70:	33aa      	adds	r3, #170	; 0xaa
 8003d72:	889b      	ldrh	r3, [r3, #4]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d80:	33aa      	adds	r3, #170	; 0xaa
 8003d82:	889b      	ldrh	r3, [r3, #4]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8003d8a:	7a3b      	ldrb	r3, [r7, #8]
 8003d8c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 8003d90:	7a7b      	ldrb	r3, [r7, #9]
 8003d92:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8003d96:	7abb      	ldrb	r3, [r7, #10]
 8003d98:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8003d9c:	7afb      	ldrb	r3, [r7, #11]
 8003d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 8003da2:	7b3b      	ldrb	r3, [r7, #12]
 8003da4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8003da8:	7b7b      	ldrb	r3, [r7, #13]
 8003daa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 8003dae:	793b      	ldrb	r3, [r7, #4]
 8003db0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8003db4:	797b      	ldrb	r3, [r7, #5]
 8003db6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8003dba:	79bb      	ldrb	r3, [r7, #6]
 8003dbc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003dc6:	f107 0110 	add.w	r1, r7, #16
 8003dca:	2364      	movs	r3, #100	; 0x64
 8003dcc:	2232      	movs	r2, #50	; 0x32
 8003dce:	4807      	ldr	r0, [pc, #28]	; (8003dec <create_hk_packet+0x278>)
 8003dd0:	f010 fa8a 	bl	80142e8 <HAL_UART_Transmit>

	hk_seq++;
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <create_hk_packet+0x274>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <create_hk_packet+0x274>)
 8003dde:	801a      	strh	r2, [r3, #0]
}
 8003de0:	bf00      	nop
 8003de2:	3748      	adds	r7, #72	; 0x48
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	24001af0 	.word	0x24001af0
 8003dec:	24001e3c 	.word	0x24001e3c

08003df0 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <reset_packet_sequence_numbers+0x20>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <reset_packet_sequence_numbers+0x24>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <reset_packet_sequence_numbers+0x28>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	801a      	strh	r2, [r3, #0]
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	24001aea 	.word	0x24001aea
 8003e14:	24001aec 	.word	0x24001aec
 8003e18:	24001af0 	.word	0x24001af0

08003e1c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003e30:	2300      	movs	r3, #0
 8003e32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003e34:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e36:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <MX_RTC_Init+0xb8>)
 8003e38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e3a:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003e40:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e42:	2263      	movs	r2, #99	; 0x63
 8003e44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003e46:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e48:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e66:	481a      	ldr	r0, [pc, #104]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e68:	f00d fd24 	bl	80118b4 <HAL_RTC_Init>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003e72:	f7ff fdcd 	bl	8003a10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4619      	mov	r1, r3
 8003e90:	480f      	ldr	r0, [pc, #60]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e92:	f00d fd91 	bl	80119b8 <HAL_RTC_SetTime>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003e9c:	f7ff fdb8 	bl	8003a10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003eb8:	f00d fe78 	bl	8011bac <HAL_RTC_SetDate>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003ec2:	f7ff fda5 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	24001af4 	.word	0x24001af4
 8003ed4:	58004000 	.word	0x58004000

08003ed8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b0b2      	sub	sp, #200	; 0xc8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ee0:	f107 0308 	add.w	r3, r7, #8
 8003ee4:	22c0      	movs	r2, #192	; 0xc0
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f016 fa27 	bl	801a33c <memset>
  if(rtcHandle->Instance==RTC)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a10      	ldr	r2, [pc, #64]	; (8003f34 <HAL_RTC_MspInit+0x5c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d118      	bne.n	8003f2a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ef8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_RTC_MspInit+0x60>)
 8003f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f00a ffd2 	bl	800eeb8 <HAL_RCCEx_PeriphCLKConfig>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003f1a:	f7ff fd79 	bl	8003a10 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_RTC_MspInit+0x64>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4a06      	ldr	r2, [pc, #24]	; (8003f3c <HAL_RTC_MspInit+0x64>)
 8003f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	37c8      	adds	r7, #200	; 0xc8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	58004000 	.word	0x58004000
 8003f38:	00019300 	.word	0x00019300
 8003f3c:	58024400 	.word	0x58024400

08003f40 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003f4a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f52:	481f      	ldr	r0, [pc, #124]	; (8003fd0 <init_adc_dma+0x90>)
 8003f54:	f003 fa64 	bl	8007420 <HAL_ADCEx_Calibration_Start>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003f5e:	f7ff fd57 	bl	8003a10 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003f62:	220b      	movs	r2, #11
 8003f64:	491b      	ldr	r1, [pc, #108]	; (8003fd4 <init_adc_dma+0x94>)
 8003f66:	481a      	ldr	r0, [pc, #104]	; (8003fd0 <init_adc_dma+0x90>)
 8003f68:	f002 fb38 	bl	80065dc <HAL_ADC_Start_DMA>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003f72:	f7ff fd4d 	bl	8003a10 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003f76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f7e:	4816      	ldr	r0, [pc, #88]	; (8003fd8 <init_adc_dma+0x98>)
 8003f80:	f003 fa4e 	bl	8007420 <HAL_ADCEx_Calibration_Start>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003f8a:	f7ff fd41 	bl	8003a10 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003f8e:	2204      	movs	r2, #4
 8003f90:	4912      	ldr	r1, [pc, #72]	; (8003fdc <init_adc_dma+0x9c>)
 8003f92:	4811      	ldr	r0, [pc, #68]	; (8003fd8 <init_adc_dma+0x98>)
 8003f94:	f002 fb22 	bl	80065dc <HAL_ADC_Start_DMA>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003f9e:	f7ff fd37 	bl	8003a10 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <init_adc_dma+0xa0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <init_adc_dma+0xa0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fb0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <init_adc_dma+0xa4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <init_adc_dma+0xa4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc0:	601a      	str	r2, [r3, #0]


	status = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	71fb      	strb	r3, [r7, #7]

	return status;
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	2400015c 	.word	0x2400015c
 8003fd4:	24001b20 	.word	0x24001b20
 8003fd8:	240001c0 	.word	0x240001c0
 8003fdc:	24001b40 	.word	0x24001b40
 8003fe0:	24001bdc 	.word	0x24001bdc
 8003fe4:	24001b54 	.word	0x24001b54

08003fe8 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	490b      	ldr	r1, [pc, #44]	; (8004020 <sample_pmt_spi+0x38>)
 8003ff4:	480b      	ldr	r0, [pc, #44]	; (8004024 <sample_pmt_spi+0x3c>)
 8003ff6:	f00e f8a3 	bl	8012140 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <sample_pmt_spi+0x38>)
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	b29b      	uxth	r3, r3
 8004002:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <sample_pmt_spi+0x38>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3301      	adds	r3, #1
 8004014:	7bba      	ldrb	r2, [r7, #14]
 8004016:	701a      	strb	r2, [r3, #0]
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	24001b4c 	.word	0x24001b4c
 8004024:	24001b54 	.word	0x24001b54

08004028 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8004030:	2201      	movs	r2, #1
 8004032:	490b      	ldr	r1, [pc, #44]	; (8004060 <sample_erpa_spi+0x38>)
 8004034:	480b      	ldr	r0, [pc, #44]	; (8004064 <sample_erpa_spi+0x3c>)
 8004036:	f00e f883 	bl	8012140 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <sample_erpa_spi+0x38>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <sample_erpa_spi+0x38>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3301      	adds	r3, #1
 8004054:	7bba      	ldrb	r2, [r7, #14]
 8004056:	701a      	strb	r2, [r3, #0]
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	24001b48 	.word	0x24001b48
 8004064:	24001bdc 	.word	0x24001bdc

08004068 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <sample_erpa_adc+0x20>)
 8004072:	885b      	ldrh	r3, [r3, #2]
 8004074:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	89fa      	ldrh	r2, [r7, #14]
 800407a:	801a      	strh	r2, [r3, #0]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	24001b20 	.word	0x24001b20

0800408c <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8004094:	2390      	movs	r3, #144	; 0x90
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f8a2 	bl	80041e0 <poll_i2c_sensor>
 800409c:	4603      	mov	r3, r0
 800409e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80040a0:	2394      	movs	r3, #148	; 0x94
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f89c 	bl	80041e0 <poll_i2c_sensor>
 80040a8:	4603      	mov	r3, r0
 80040aa:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80040ac:	2392      	movs	r3, #146	; 0x92
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f896 	bl	80041e0 <poll_i2c_sensor>
 80040b4:	4603      	mov	r3, r0
 80040b6:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80040b8:	2396      	movs	r3, #150	; 0x96
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f890 	bl	80041e0 <poll_i2c_sensor>
 80040c0:	4603      	mov	r3, r0
 80040c2:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	89fa      	ldrh	r2, [r7, #14]
 80040c8:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3302      	adds	r3, #2
 80040ce:	89ba      	ldrh	r2, [r7, #12]
 80040d0:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	897a      	ldrh	r2, [r7, #10]
 80040d8:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3306      	adds	r3, #6
 80040de:	893a      	ldrh	r2, [r7, #8]
 80040e0:	801a      	strh	r2, [r3, #0]
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 80040ec:	b480      	push	{r7}
 80040ee:	b089      	sub	sp, #36	; 0x24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <sample_hk_adc1+0xa0>)
 80040f6:	8a9b      	ldrh	r3, [r3, #20]
 80040f8:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <sample_hk_adc1+0xa0>)
 80040fc:	8a1b      	ldrh	r3, [r3, #16]
 80040fe:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8004100:	4b22      	ldr	r3, [pc, #136]	; (800418c <sample_hk_adc1+0xa0>)
 8004102:	899b      	ldrh	r3, [r3, #12]
 8004104:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8004106:	4b21      	ldr	r3, [pc, #132]	; (800418c <sample_hk_adc1+0xa0>)
 8004108:	8a5b      	ldrh	r3, [r3, #18]
 800410a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 800410c:	4b1f      	ldr	r3, [pc, #124]	; (800418c <sample_hk_adc1+0xa0>)
 800410e:	889b      	ldrh	r3, [r3, #4]
 8004110:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8004112:	4b1e      	ldr	r3, [pc, #120]	; (800418c <sample_hk_adc1+0xa0>)
 8004114:	88db      	ldrh	r3, [r3, #6]
 8004116:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8004118:	4b1c      	ldr	r3, [pc, #112]	; (800418c <sample_hk_adc1+0xa0>)
 800411a:	89db      	ldrh	r3, [r3, #14]
 800411c:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <sample_hk_adc1+0xa0>)
 8004120:	891b      	ldrh	r3, [r3, #8]
 8004122:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <sample_hk_adc1+0xa0>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <sample_hk_adc1+0xa0>)
 800412c:	895b      	ldrh	r3, [r3, #10]
 800412e:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8bfa      	ldrh	r2, [r7, #30]
 8004134:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3302      	adds	r3, #2
 800413a:	8bba      	ldrh	r2, [r7, #28]
 800413c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	8b7a      	ldrh	r2, [r7, #26]
 8004144:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3306      	adds	r3, #6
 800414a:	8b3a      	ldrh	r2, [r7, #24]
 800414c:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3308      	adds	r3, #8
 8004152:	8afa      	ldrh	r2, [r7, #22]
 8004154:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	330a      	adds	r3, #10
 800415a:	8aba      	ldrh	r2, [r7, #20]
 800415c:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	330c      	adds	r3, #12
 8004162:	8a7a      	ldrh	r2, [r7, #18]
 8004164:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	330e      	adds	r3, #14
 800416a:	8a3a      	ldrh	r2, [r7, #16]
 800416c:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3310      	adds	r3, #16
 8004172:	89fa      	ldrh	r2, [r7, #14]
 8004174:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3312      	adds	r3, #18
 800417a:	89ba      	ldrh	r2, [r7, #12]
 800417c:	801a      	strh	r2, [r3, #0]
}
 800417e:	bf00      	nop
 8004180:	3724      	adds	r7, #36	; 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	24001b20 	.word	0x24001b20

08004190 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <sample_hk_adc3+0x4c>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <sample_hk_adc3+0x4c>)
 80041a0:	885b      	ldrh	r3, [r3, #2]
 80041a2:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80041a4:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <sample_hk_adc3+0x4c>)
 80041a6:	889b      	ldrh	r3, [r3, #4]
 80041a8:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <sample_hk_adc3+0x4c>)
 80041ac:	88db      	ldrh	r3, [r3, #6]
 80041ae:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	89fa      	ldrh	r2, [r7, #14]
 80041b4:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3302      	adds	r3, #2
 80041ba:	89ba      	ldrh	r2, [r7, #12]
 80041bc:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	897a      	ldrh	r2, [r7, #10]
 80041c4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3306      	adds	r3, #6
 80041ca:	893a      	ldrh	r2, [r7, #8]
 80041cc:	801a      	strh	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	24001b40 	.word	0x24001b40

080041e0 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 80041ea:	2200      	movs	r2, #0
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <poll_i2c_sensor+0x90>)
 80041ee:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	b299      	uxth	r1, r3
 80041f4:	2301      	movs	r3, #1
 80041f6:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <poll_i2c_sensor+0x90>)
 80041f8:	481e      	ldr	r0, [pc, #120]	; (8004274 <poll_i2c_sensor+0x94>)
 80041fa:	f007 fae7 	bl	800b7cc <HAL_I2C_Master_Transmit_DMA>
 80041fe:	4603      	mov	r3, r0
 8004200:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8004202:	7b7b      	ldrb	r3, [r7, #13]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8004208:	481b      	ldr	r0, [pc, #108]	; (8004278 <poll_i2c_sensor+0x98>)
 800420a:	f016 f90d 	bl	801a428 <puts>
 800420e:	e028      	b.n	8004262 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004210:	bf00      	nop
 8004212:	4818      	ldr	r0, [pc, #96]	; (8004274 <poll_i2c_sensor+0x94>)
 8004214:	f007 fdc1 	bl	800bd9a <HAL_I2C_GetState>
 8004218:	4603      	mov	r3, r0
 800421a:	2b20      	cmp	r3, #32
 800421c:	d1f9      	bne.n	8004212 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	b299      	uxth	r1, r3
 8004222:	2302      	movs	r3, #2
 8004224:	4a12      	ldr	r2, [pc, #72]	; (8004270 <poll_i2c_sensor+0x90>)
 8004226:	4813      	ldr	r0, [pc, #76]	; (8004274 <poll_i2c_sensor+0x94>)
 8004228:	f007 fbe4 	bl	800b9f4 <HAL_I2C_Master_Receive_DMA>
 800422c:	4603      	mov	r3, r0
 800422e:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8004230:	7b7b      	ldrb	r3, [r7, #13]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8004236:	4811      	ldr	r0, [pc, #68]	; (800427c <poll_i2c_sensor+0x9c>)
 8004238:	f016 f8f6 	bl	801a428 <puts>
 800423c:	e011      	b.n	8004262 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 800423e:	bf00      	nop
 8004240:	480c      	ldr	r0, [pc, #48]	; (8004274 <poll_i2c_sensor+0x94>)
 8004242:	f007 fdaa 	bl	800bd9a <HAL_I2C_GetState>
 8004246:	4603      	mov	r3, r0
 8004248:	2b20      	cmp	r3, #32
 800424a:	d1f9      	bne.n	8004240 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <poll_i2c_sensor+0x90>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8004254:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004258:	4a05      	ldr	r2, [pc, #20]	; (8004270 <poll_i2c_sensor+0x90>)
 800425a:	7852      	ldrb	r2, [r2, #1]
 800425c:	4313      	orrs	r3, r2
 800425e:	10db      	asrs	r3, r3, #3
 8004260:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8004262:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	24001b50 	.word	0x24001b50
 8004274:	2400193c 	.word	0x2400193c
 8004278:	0801af90 	.word	0x0801af90
 800427c:	0801afa0 	.word	0x0801afa0

08004280 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004284:	4b28      	ldr	r3, [pc, #160]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004286:	4a29      	ldr	r2, [pc, #164]	; (800432c <MX_SPI1_Init+0xac>)
 8004288:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800428a:	4b27      	ldr	r3, [pc, #156]	; (8004328 <MX_SPI1_Init+0xa8>)
 800428c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004290:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004292:	4b25      	ldr	r3, [pc, #148]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004294:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004298:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800429a:	4b23      	ldr	r3, [pc, #140]	; (8004328 <MX_SPI1_Init+0xa8>)
 800429c:	220f      	movs	r2, #15
 800429e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a0:	4b21      	ldr	r3, [pc, #132]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042ac:	4b1e      	ldr	r3, [pc, #120]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80042b4:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042b6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80042ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042be:	2200      	movs	r2, #0
 80042c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c8:	4b17      	ldr	r3, [pc, #92]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042da:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042de:	2200      	movs	r2, #0
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004302:	2200      	movs	r2, #0
 8004304:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004308:	2200      	movs	r2, #0
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <MX_SPI1_Init+0xa8>)
 800430e:	2200      	movs	r2, #0
 8004310:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004312:	4805      	ldr	r0, [pc, #20]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004314:	f00d fdf0 	bl	8011ef8 <HAL_SPI_Init>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800431e:	f7ff fb77 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	24001b54 	.word	0x24001b54
 800432c:	40013000 	.word	0x40013000

08004330 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <MX_SPI2_Init+0xac>)
 8004338:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800433c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004340:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004342:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004344:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004348:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800434c:	220f      	movs	r2, #15
 800434e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800435e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004362:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004366:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800436a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800436e:	2200      	movs	r2, #0
 8004370:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004374:	2200      	movs	r2, #0
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800437a:	2200      	movs	r2, #0
 800437c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004380:	2200      	movs	r2, #0
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800438a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800438e:	2200      	movs	r2, #0
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004394:	2200      	movs	r2, #0
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800439a:	2200      	movs	r2, #0
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043be:	2200      	movs	r2, #0
 80043c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043c2:	4805      	ldr	r0, [pc, #20]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043c4:	f00d fd98 	bl	8011ef8 <HAL_SPI_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80043ce:	f7ff fb1f 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	24001bdc 	.word	0x24001bdc
 80043dc:	40003800 	.word	0x40003800

080043e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b0bc      	sub	sp, #240	; 0xf0
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	22c0      	movs	r2, #192	; 0xc0
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f015 ff9b 	bl	801a33c <memset>
  if(spiHandle->Instance==SPI1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a83      	ldr	r2, [pc, #524]	; (8004618 <HAL_SPI_MspInit+0x238>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d17c      	bne.n	800450a <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800441c:	2300      	movs	r3, #0
 800441e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004420:	f107 0318 	add.w	r3, r7, #24
 8004424:	4618      	mov	r0, r3
 8004426:	f00a fd47 	bl	800eeb8 <HAL_RCCEx_PeriphCLKConfig>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004430:	f7ff faee 	bl	8003a10 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004434:	4b79      	ldr	r3, [pc, #484]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800443a:	4a78      	ldr	r2, [pc, #480]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800443c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004440:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004444:	4b75      	ldr	r3, [pc, #468]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800444a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004452:	4b72      	ldr	r3, [pc, #456]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004458:	4a70      	ldr	r2, [pc, #448]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800445a:	f043 0302 	orr.w	r3, r3, #2
 800445e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004462:	4b6e      	ldr	r3, [pc, #440]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004470:	2318      	movs	r3, #24
 8004472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004476:	2302      	movs	r3, #2
 8004478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004482:	2300      	movs	r3, #0
 8004484:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004488:	2305      	movs	r3, #5
 800448a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004492:	4619      	mov	r1, r3
 8004494:	4862      	ldr	r0, [pc, #392]	; (8004620 <HAL_SPI_MspInit+0x240>)
 8004496:	f006 ff1b 	bl	800b2d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800449a:	4b62      	ldr	r3, [pc, #392]	; (8004624 <HAL_SPI_MspInit+0x244>)
 800449c:	4a62      	ldr	r2, [pc, #392]	; (8004628 <HAL_SPI_MspInit+0x248>)
 800449e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80044a0:	4b60      	ldr	r3, [pc, #384]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044a2:	2225      	movs	r2, #37	; 0x25
 80044a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044a6:	4b5f      	ldr	r3, [pc, #380]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ac:	4b5d      	ldr	r3, [pc, #372]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80044ba:	4b5a      	ldr	r3, [pc, #360]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80044c2:	4b58      	ldr	r3, [pc, #352]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80044ca:	4b56      	ldr	r3, [pc, #344]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044d0:	4b54      	ldr	r3, [pc, #336]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044d6:	4b53      	ldr	r3, [pc, #332]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044d8:	2200      	movs	r2, #0
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80044dc:	4851      	ldr	r0, [pc, #324]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044de:	f003 fdc7 	bl	8008070 <HAL_DMA_Init>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80044e8:	f7ff fa92 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a4d      	ldr	r2, [pc, #308]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80044f2:	4a4c      	ldr	r2, [pc, #304]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	2105      	movs	r1, #5
 80044fc:	2023      	movs	r0, #35	; 0x23
 80044fe:	f003 f989 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004502:	2023      	movs	r0, #35	; 0x23
 8004504:	f003 f9a0 	bl	8007848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004508:	e081      	b.n	800460e <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a47      	ldr	r2, [pc, #284]	; (800462c <HAL_SPI_MspInit+0x24c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d17c      	bne.n	800460e <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004520:	2300      	movs	r3, #0
 8004522:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004524:	f107 0318 	add.w	r3, r7, #24
 8004528:	4618      	mov	r0, r3
 800452a:	f00a fcc5 	bl	800eeb8 <HAL_RCCEx_PeriphCLKConfig>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004534:	f7ff fa6c 	bl	8003a10 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004538:	4b38      	ldr	r3, [pc, #224]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800453a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800453e:	4a37      	ldr	r2, [pc, #220]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004544:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004548:	4b34      	ldr	r3, [pc, #208]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800454a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800455c:	4a2f      	ldr	r2, [pc, #188]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004566:	4b2d      	ldr	r3, [pc, #180]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004574:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004578:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457c:	2302      	movs	r3, #2
 800457e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004588:	2300      	movs	r3, #0
 800458a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800458e:	2305      	movs	r3, #5
 8004590:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004594:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004598:	4619      	mov	r1, r3
 800459a:	4821      	ldr	r0, [pc, #132]	; (8004620 <HAL_SPI_MspInit+0x240>)
 800459c:	f006 fe98 	bl	800b2d0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80045a0:	4b23      	ldr	r3, [pc, #140]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045a2:	4a24      	ldr	r2, [pc, #144]	; (8004634 <HAL_SPI_MspInit+0x254>)
 80045a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80045a6:	4b22      	ldr	r3, [pc, #136]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045a8:	2227      	movs	r2, #39	; 0x27
 80045aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045ac:	4b20      	ldr	r3, [pc, #128]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045b2:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045be:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045c6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045ce:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045d6:	4b16      	ldr	r3, [pc, #88]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045d8:	2200      	movs	r2, #0
 80045da:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045dc:	4b14      	ldr	r3, [pc, #80]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045de:	2200      	movs	r2, #0
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80045e2:	4813      	ldr	r0, [pc, #76]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045e4:	f003 fd44 	bl	8008070 <HAL_DMA_Init>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 80045ee:	f7ff fa0f 	bl	8003a10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80045f8:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2105      	movs	r1, #5
 8004602:	2024      	movs	r0, #36	; 0x24
 8004604:	f003 f906 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004608:	2024      	movs	r0, #36	; 0x24
 800460a:	f003 f91d 	bl	8007848 <HAL_NVIC_EnableIRQ>
}
 800460e:	bf00      	nop
 8004610:	37f0      	adds	r7, #240	; 0xf0
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40013000 	.word	0x40013000
 800461c:	58024400 	.word	0x58024400
 8004620:	58020400 	.word	0x58020400
 8004624:	24001c64 	.word	0x24001c64
 8004628:	40020070 	.word	0x40020070
 800462c:	40003800 	.word	0x40003800
 8004630:	24001cdc 	.word	0x24001cdc
 8004634:	40020058 	.word	0x40020058

08004638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_MspInit+0x38>)
 8004640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004644:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <HAL_MspInit+0x38>)
 8004646:	f043 0302 	orr.w	r3, r3, #2
 800464a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <HAL_MspInit+0x38>)
 8004650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800465c:	2200      	movs	r2, #0
 800465e:	210f      	movs	r1, #15
 8004660:	f06f 0001 	mvn.w	r0, #1
 8004664:	f003 f8d6 	bl	8007814 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	58024400 	.word	0x58024400

08004674 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b090      	sub	sp, #64	; 0x40
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	d827      	bhi.n	80046d2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004682:	2200      	movs	r2, #0
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	2036      	movs	r0, #54	; 0x36
 8004688:	f003 f8c4 	bl	8007814 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800468c:	2036      	movs	r0, #54	; 0x36
 800468e:	f003 f8db 	bl	8007848 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004692:	4a29      	ldr	r2, [pc, #164]	; (8004738 <HAL_InitTick+0xc4>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <HAL_InitTick+0xc8>)
 800469a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800469e:	4a27      	ldr	r2, [pc, #156]	; (800473c <HAL_InitTick+0xc8>)
 80046a0:	f043 0310 	orr.w	r3, r3, #16
 80046a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046a8:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_InitTick+0xc8>)
 80046aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80046b6:	f107 0210 	add.w	r2, r7, #16
 80046ba:	f107 0314 	add.w	r3, r7, #20
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f00a fbb7 	bl	800ee34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <HAL_InitTick+0x6a>
 80046d0:	e001      	b.n	80046d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e02b      	b.n	800472e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80046d6:	f00a fb81 	bl	800eddc <HAL_RCC_GetPCLK1Freq>
 80046da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80046dc:	e004      	b.n	80046e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80046de:	f00a fb7d 	bl	800eddc <HAL_RCC_GetPCLK1Freq>
 80046e2:	4603      	mov	r3, r0
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80046e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <HAL_InitTick+0xcc>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	0c9b      	lsrs	r3, r3, #18
 80046f2:	3b01      	subs	r3, #1
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80046f6:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_InitTick+0xd0>)
 80046f8:	4a13      	ldr	r2, [pc, #76]	; (8004748 <HAL_InitTick+0xd4>)
 80046fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <HAL_InitTick+0xd0>)
 80046fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004702:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004704:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <HAL_InitTick+0xd0>)
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800470a:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <HAL_InitTick+0xd0>)
 800470c:	2200      	movs	r2, #0
 800470e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <HAL_InitTick+0xd0>)
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004716:	480b      	ldr	r0, [pc, #44]	; (8004744 <HAL_InitTick+0xd0>)
 8004718:	f00e f98d 	bl	8012a36 <HAL_TIM_Base_Init>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004722:	4808      	ldr	r0, [pc, #32]	; (8004744 <HAL_InitTick+0xd0>)
 8004724:	f00e f9de 	bl	8012ae4 <HAL_TIM_Base_Start_IT>
 8004728:	4603      	mov	r3, r0
 800472a:	e000      	b.n	800472e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
}
 800472e:	4618      	mov	r0, r3
 8004730:	3740      	adds	r7, #64	; 0x40
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	240000c8 	.word	0x240000c8
 800473c:	58024400 	.word	0x58024400
 8004740:	431bde83 	.word	0x431bde83
 8004744:	24001d54 	.word	0x24001d54
 8004748:	40001000 	.word	0x40001000

0800474c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004750:	e7fe      	b.n	8004750 <NMI_Handler+0x4>

08004752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004756:	e7fe      	b.n	8004756 <HardFault_Handler+0x4>

08004758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800475c:	e7fe      	b.n	800475c <MemManage_Handler+0x4>

0800475e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004762:	e7fe      	b.n	8004762 <BusFault_Handler+0x4>

08004764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004768:	e7fe      	b.n	8004768 <UsageFault_Handler+0x4>

0800476a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <DMA1_Stream0_IRQHandler+0x10>)
 800477e:	f004 ffa1 	bl	80096c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	24000224 	.word	0x24000224

0800478c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <DMA1_Stream1_IRQHandler+0x10>)
 8004792:	f004 ff97 	bl	80096c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2400029c 	.word	0x2400029c

080047a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <DMA1_Stream2_IRQHandler+0x10>)
 80047a6:	f004 ff8d 	bl	80096c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	24001ed0 	.word	0x24001ed0

080047b4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80047b8:	4802      	ldr	r0, [pc, #8]	; (80047c4 <DMA1_Stream3_IRQHandler+0x10>)
 80047ba:	f004 ff83 	bl	80096c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	24001cdc 	.word	0x24001cdc

080047c8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80047cc:	4802      	ldr	r0, [pc, #8]	; (80047d8 <DMA1_Stream4_IRQHandler+0x10>)
 80047ce:	f004 ff79 	bl	80096c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	24001c64 	.word	0x24001c64

080047dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <DMA1_Stream5_IRQHandler+0x10>)
 80047e2:	f004 ff6f 	bl	80096c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	24000328 	.word	0x24000328

080047f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80047f4:	4802      	ldr	r0, [pc, #8]	; (8004800 <DMA1_Stream6_IRQHandler+0x10>)
 80047f6:	f004 ff65 	bl	80096c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	24001990 	.word	0x24001990

08004804 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004808:	4802      	ldr	r0, [pc, #8]	; (8004814 <TIM1_BRK_IRQHandler+0x10>)
 800480a:	f00e fc82 	bl	8013112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	24001da4 	.word	0x24001da4

08004818 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800481c:	4802      	ldr	r0, [pc, #8]	; (8004828 <TIM1_UP_IRQHandler+0x10>)
 800481e:	f00e fc78 	bl	8013112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	24001da4 	.word	0x24001da4

0800482c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <TIM1_TRG_COM_IRQHandler+0x10>)
 8004832:	f00e fc6e 	bl	8013112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	24001da4 	.word	0x24001da4

08004840 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <TIM1_CC_IRQHandler+0x10>)
 8004846:	f00e fc64 	bl	8013112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	24001da4 	.word	0x24001da4

08004854 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004858:	4802      	ldr	r0, [pc, #8]	; (8004864 <TIM2_IRQHandler+0x10>)
 800485a:	f00e fc5a 	bl	8013112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	24001df0 	.word	0x24001df0

08004868 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800486c:	4802      	ldr	r0, [pc, #8]	; (8004878 <I2C1_EV_IRQHandler+0x10>)
 800486e:	f007 f9b1 	bl	800bbd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	2400193c 	.word	0x2400193c

0800487c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004880:	4802      	ldr	r0, [pc, #8]	; (800488c <I2C1_ER_IRQHandler+0x10>)
 8004882:	f007 f9c1 	bl	800bc08 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	2400193c 	.word	0x2400193c

08004890 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004894:	4802      	ldr	r0, [pc, #8]	; (80048a0 <SPI1_IRQHandler+0x10>)
 8004896:	f00d fd9b 	bl	80123d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	24001b54 	.word	0x24001b54

080048a4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80048a8:	4802      	ldr	r0, [pc, #8]	; (80048b4 <SPI2_IRQHandler+0x10>)
 80048aa:	f00d fd91 	bl	80123d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	24001bdc 	.word	0x24001bdc

080048b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048bc:	4802      	ldr	r0, [pc, #8]	; (80048c8 <USART1_IRQHandler+0x10>)
 80048be:	f00f ff6b 	bl	8014798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	24001e3c 	.word	0x24001e3c

080048cc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80048d0:	4802      	ldr	r0, [pc, #8]	; (80048dc <DMA1_Stream7_IRQHandler+0x10>)
 80048d2:	f004 fef7 	bl	80096c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	24001a08 	.word	0x24001a08

080048e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <TIM6_DAC_IRQHandler+0x20>)
 80048e6:	791b      	ldrb	r3, [r3, #4]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80048ee:	4804      	ldr	r0, [pc, #16]	; (8004900 <TIM6_DAC_IRQHandler+0x20>)
 80048f0:	f003 f93f 	bl	8007b72 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80048f4:	4803      	ldr	r0, [pc, #12]	; (8004904 <TIM6_DAC_IRQHandler+0x24>)
 80048f6:	f00e fc0c 	bl	8013112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	24000314 	.word	0x24000314
 8004904:	24001d54 	.word	0x24001d54

08004908 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <ITM_SendChar+0x48>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <ITM_SendChar+0x48>)
 8004918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <ITM_SendChar+0x4c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a0c      	ldr	r2, [pc, #48]	; (8004954 <ITM_SendChar+0x4c>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800492a:	bf00      	nop
 800492c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f8      	beq.n	800492c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800493a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	6013      	str	r3, [r2, #0]
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000edfc 	.word	0xe000edfc
 8004954:	e0000e00 	.word	0xe0000e00

08004958 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e00a      	b.n	8004980 <_read+0x28>
		*ptr++ = __io_getchar();
 800496a:	f3af 8000 	nop.w
 800496e:	4601      	mov	r1, r0
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	60ba      	str	r2, [r7, #8]
 8004976:	b2ca      	uxtb	r2, r1
 8004978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3301      	adds	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	dbf0      	blt.n	800496a <_read+0x12>
	}

	return len;
 8004988:	687b      	ldr	r3, [r7, #4]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e009      	b.n	80049b8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	60ba      	str	r2, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff ffab 	bl	8004908 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	3301      	adds	r3, #1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	dbf1      	blt.n	80049a4 <_write+0x12>
	}
	return len;
 80049c0:	687b      	ldr	r3, [r7, #4]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <_close>:

int _close(int file) {
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049f2:	605a      	str	r2, [r3, #4]
	return 0;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <_isatty>:

int _isatty(int file) {
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004a0a:	2301      	movs	r3, #1
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004a3c:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <_sbrk+0x64>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <_sbrk+0x64>)
 8004a52:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <_sbrk+0x68>)
 8004a54:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <_sbrk+0x64>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d207      	bcs.n	8004a74 <_sbrk+0x40>
		errno = ENOMEM;
 8004a64:	f015 fc32 	bl	801a2cc <__errno>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	220c      	movs	r2, #12
 8004a6c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a72:	e009      	b.n	8004a88 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004a74:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <_sbrk+0x64>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004a7a:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <_sbrk+0x64>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	4a05      	ldr	r2, [pc, #20]	; (8004a98 <_sbrk+0x64>)
 8004a84:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004a86:	68fb      	ldr	r3, [r7, #12]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	24080000 	.word	0x24080000
 8004a94:	00000400 	.word	0x00000400
 8004a98:	24001da0 	.word	0x24001da0
 8004a9c:	24006980 	.word	0x24006980

08004aa0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004aa4:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <SystemInit+0xe4>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	4a36      	ldr	r2, [pc, #216]	; (8004b84 <SystemInit+0xe4>)
 8004aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004ab4:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <SystemInit+0xe8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d807      	bhi.n	8004ad0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004ac0:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <SystemInit+0xe8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 030f 	bic.w	r3, r3, #15
 8004ac8:	4a2f      	ldr	r2, [pc, #188]	; (8004b88 <SystemInit+0xe8>)
 8004aca:	f043 0307 	orr.w	r3, r3, #7
 8004ace:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004ad0:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <SystemInit+0xec>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2d      	ldr	r2, [pc, #180]	; (8004b8c <SystemInit+0xec>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004adc:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <SystemInit+0xec>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004ae2:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <SystemInit+0xec>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4929      	ldr	r1, [pc, #164]	; (8004b8c <SystemInit+0xec>)
 8004ae8:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <SystemInit+0xf0>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004aee:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <SystemInit+0xe8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <SystemInit+0xe8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 030f 	bic.w	r3, r3, #15
 8004b02:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <SystemInit+0xe8>)
 8004b04:	f043 0307 	orr.w	r3, r3, #7
 8004b08:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <SystemInit+0xec>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <SystemInit+0xec>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <SystemInit+0xec>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <SystemInit+0xec>)
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <SystemInit+0xf4>)
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004b22:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <SystemInit+0xec>)
 8004b24:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <SystemInit+0xf8>)
 8004b26:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004b28:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <SystemInit+0xec>)
 8004b2a:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <SystemInit+0xfc>)
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004b2e:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <SystemInit+0xec>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <SystemInit+0xec>)
 8004b36:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <SystemInit+0xfc>)
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <SystemInit+0xec>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004b40:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <SystemInit+0xec>)
 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <SystemInit+0xfc>)
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <SystemInit+0xec>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <SystemInit+0xec>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <SystemInit+0xec>)
 8004b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b56:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <SystemInit+0xec>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <SystemInit+0x100>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <SystemInit+0x104>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6a:	d202      	bcs.n	8004b72 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <SystemInit+0x108>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <SystemInit+0x10c>)
 8004b74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004b78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004b7a:	bf00      	nop
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00
 8004b88:	52002000 	.word	0x52002000
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	eaf6ed7f 	.word	0xeaf6ed7f
 8004b94:	02020200 	.word	0x02020200
 8004b98:	01ff0000 	.word	0x01ff0000
 8004b9c:	01010280 	.word	0x01010280
 8004ba0:	5c001000 	.word	0x5c001000
 8004ba4:	ffff0000 	.word	0xffff0000
 8004ba8:	51008108 	.word	0x51008108
 8004bac:	52004000 	.word	0x52004000

08004bb0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b09a      	sub	sp, #104	; 0x68
 8004bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
 8004bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
 8004be0:	615a      	str	r2, [r3, #20]
 8004be2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	222c      	movs	r2, #44	; 0x2c
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f015 fba6 	bl	801a33c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bf0:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004bf2:	4a45      	ldr	r2, [pc, #276]	; (8004d08 <MX_TIM1_Init+0x158>)
 8004bf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004bf6:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004bf8:	224a      	movs	r2, #74	; 0x4a
 8004bfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bfc:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004c02:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c04:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004c08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c0a:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c10:	4b3c      	ldr	r3, [pc, #240]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c16:	4b3b      	ldr	r3, [pc, #236]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004c1c:	4839      	ldr	r0, [pc, #228]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c1e:	f00d ff0a 	bl	8012a36 <HAL_TIM_Base_Init>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004c28:	f7fe fef2 	bl	8003a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c30:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004c32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c36:	4619      	mov	r1, r3
 8004c38:	4832      	ldr	r0, [pc, #200]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c3a:	f00e fc85 	bl	8013548 <HAL_TIM_ConfigClockSource>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004c44:	f7fe fee4 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c48:	482e      	ldr	r0, [pc, #184]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c4a:	f00e fa01 	bl	8013050 <HAL_TIM_PWM_Init>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004c54:	f7fe fedc 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4826      	ldr	r0, [pc, #152]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c6c:	f00f f9c2 	bl	8013ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004c76:	f7fe fecb 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c7a:	2360      	movs	r3, #96	; 0x60
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004c7e:	f240 13df 	movw	r3, #479	; 0x1df
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c84:	2300      	movs	r3, #0
 8004c86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c90:	2300      	movs	r3, #0
 8004c92:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c94:	2300      	movs	r3, #0
 8004c96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4818      	ldr	r0, [pc, #96]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004ca2:	f00e fb3d 	bl	8013320 <HAL_TIM_PWM_ConfigChannel>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004cac:	f7fe feb0 	bl	8003a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cc8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4807      	ldr	r0, [pc, #28]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004ce6:	f00f fa13 	bl	8014110 <HAL_TIMEx_ConfigBreakDeadTime>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004cf0:	f7fe fe8e 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004cf4:	4803      	ldr	r0, [pc, #12]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004cf6:	f000 f8dd 	bl	8004eb4 <HAL_TIM_MspPostInit>

}
 8004cfa:	bf00      	nop
 8004cfc:	3768      	adds	r7, #104	; 0x68
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	24001da4 	.word	0x24001da4
 8004d08:	40010000 	.word	0x40010000

08004d0c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08e      	sub	sp, #56	; 0x38
 8004d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
 8004d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d20:	f107 031c 	add.w	r3, r7, #28
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	605a      	str	r2, [r3, #4]
 8004d34:	609a      	str	r2, [r3, #8]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	611a      	str	r2, [r3, #16]
 8004d3a:	615a      	str	r2, [r3, #20]
 8004d3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004d46:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d48:	224a      	movs	r2, #74	; 0x4a
 8004d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d4c:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004d52:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d54:	f640 4234 	movw	r2, #3124	; 0xc34
 8004d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d5a:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d60:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d62:	2280      	movs	r2, #128	; 0x80
 8004d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d66:	4823      	ldr	r0, [pc, #140]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d68:	f00d fe65 	bl	8012a36 <HAL_TIM_Base_Init>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004d72:	f7fe fe4d 	bl	8003a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d80:	4619      	mov	r1, r3
 8004d82:	481c      	ldr	r0, [pc, #112]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d84:	f00e fbe0 	bl	8013548 <HAL_TIM_ConfigClockSource>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004d8e:	f7fe fe3f 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004d92:	4818      	ldr	r0, [pc, #96]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d94:	f00e f95c 	bl	8013050 <HAL_TIM_PWM_Init>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004d9e:	f7fe fe37 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004da2:	2320      	movs	r3, #32
 8004da4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004daa:	f107 031c 	add.w	r3, r7, #28
 8004dae:	4619      	mov	r1, r3
 8004db0:	4810      	ldr	r0, [pc, #64]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004db2:	f00f f91f 	bl	8013ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004dbc:	f7fe fe28 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dc0:	2360      	movs	r3, #96	; 0x60
 8004dc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	220c      	movs	r2, #12
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4807      	ldr	r0, [pc, #28]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004dd8:	f00e faa2 	bl	8013320 <HAL_TIM_PWM_ConfigChannel>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004de2:	f7fe fe15 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004de6:	4803      	ldr	r0, [pc, #12]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004de8:	f000 f864 	bl	8004eb4 <HAL_TIM_MspPostInit>

}
 8004dec:	bf00      	nop
 8004dee:	3738      	adds	r7, #56	; 0x38
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	24001df0 	.word	0x24001df0

08004df8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a29      	ldr	r2, [pc, #164]	; (8004eac <HAL_TIM_Base_MspInit+0xb4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d12f      	bne.n	8004e6a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e0a:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e10:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e1a:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2105      	movs	r1, #5
 8004e2c:	2018      	movs	r0, #24
 8004e2e:	f002 fcf1 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004e32:	2018      	movs	r0, #24
 8004e34:	f002 fd08 	bl	8007848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2105      	movs	r1, #5
 8004e3c:	2019      	movs	r0, #25
 8004e3e:	f002 fce9 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004e42:	2019      	movs	r0, #25
 8004e44:	f002 fd00 	bl	8007848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2105      	movs	r1, #5
 8004e4c:	201a      	movs	r0, #26
 8004e4e:	f002 fce1 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004e52:	201a      	movs	r0, #26
 8004e54:	f002 fcf8 	bl	8007848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2105      	movs	r1, #5
 8004e5c:	201b      	movs	r0, #27
 8004e5e:	f002 fcd9 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004e62:	201b      	movs	r0, #27
 8004e64:	f002 fcf0 	bl	8007848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004e68:	e01b      	b.n	8004ea2 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d116      	bne.n	8004ea2 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e7a:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004e92:	2200      	movs	r2, #0
 8004e94:	2105      	movs	r1, #5
 8004e96:	201c      	movs	r0, #28
 8004e98:	f002 fcbc 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e9c:	201c      	movs	r0, #28
 8004e9e:	f002 fcd3 	bl	8007848 <HAL_NVIC_EnableIRQ>
}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	58024400 	.word	0x58024400

08004eb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ebc:	f107 0314 	add.w	r3, r7, #20
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a26      	ldr	r2, [pc, #152]	; (8004f6c <HAL_TIM_MspPostInit+0xb8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d120      	bne.n	8004f18 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed6:	4b26      	ldr	r3, [pc, #152]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004edc:	4a24      	ldr	r2, [pc, #144]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ee6:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efa:	2302      	movs	r3, #2
 8004efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f02:	2300      	movs	r3, #0
 8004f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f06:	2301      	movs	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4818      	ldr	r0, [pc, #96]	; (8004f74 <HAL_TIM_MspPostInit+0xc0>)
 8004f12:	f006 f9dd 	bl	800b2d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004f16:	e024      	b.n	8004f62 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f20:	d11f      	bne.n	8004f62 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f28:	4a11      	ldr	r2, [pc, #68]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004f2a:	f043 0302 	orr.w	r3, r3, #2
 8004f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f46:	2302      	movs	r3, #2
 8004f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f52:	2301      	movs	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f56:	f107 0314 	add.w	r3, r7, #20
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4806      	ldr	r0, [pc, #24]	; (8004f78 <HAL_TIM_MspPostInit+0xc4>)
 8004f5e:	f006 f9b7 	bl	800b2d0 <HAL_GPIO_Init>
}
 8004f62:	bf00      	nop
 8004f64:	3728      	adds	r7, #40	; 0x28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	58024400 	.word	0x58024400
 8004f74:	58020000 	.word	0x58020000
 8004f78:	58020400 	.word	0x58020400

08004f7c <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004f88:	4b21      	ldr	r3, [pc, #132]	; (8005010 <get_uptime+0x94>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <get_uptime+0x98>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004f94:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <get_uptime+0x94>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d005      	beq.n	8004faa <get_uptime+0x2e>
		ms = uptime_millis;
 8004f9e:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <get_uptime+0x94>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <get_uptime+0x98>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fb0:	fb03 f202 	mul.w	r2, r3, r2
 8004fb4:	4b17      	ldr	r3, [pc, #92]	; (8005014 <get_uptime+0x98>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	4917      	ldr	r1, [pc, #92]	; (8005018 <get_uptime+0x9c>)
 8004fbc:	fba1 1303 	umull	r1, r3, r1, r3
 8004fc0:	099b      	lsrs	r3, r3, #6
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <get_uptime+0x5a>
		uptime = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	0e1b      	lsrs	r3, r3, #24
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	0c1a      	lsrs	r2, r3, #16
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	0a1a      	lsrs	r2, r3, #8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3303      	adds	r3, #3
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	24001ae0 	.word	0x24001ae0
 8005014:	e000e010 	.word	0xe000e010
 8005018:	10624dd3 	.word	0x10624dd3

0800501c <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	b0a5      	sub	sp, #148	; 0x94
 8005022:	af00      	add	r7, sp, #0
 8005024:	65f8      	str	r0, [r7, #92]	; 0x5c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8005026:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800502a:	2200      	movs	r2, #0
 800502c:	4619      	mov	r1, r3
 800502e:	48bc      	ldr	r0, [pc, #752]	; (8005320 <get_unix_time+0x304>)
 8005030:	f00c fd60 	bl	8011af4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8005034:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005038:	2200      	movs	r2, #0
 800503a:	4619      	mov	r1, r3
 800503c:	48b8      	ldr	r0, [pc, #736]	; (8005320 <get_unix_time+0x304>)
 800503e:	f00c fe3d 	bl	8011cbc <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000 - (current_time.SubSeconds);
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8005048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80


	y = current_date.Year + 2000;
 8005058:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800505c:	b29b      	uxth	r3, r3
 800505e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005062:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	m = current_date.Month;
 8005066:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800506a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	d = current_date.Date;
 800506e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005072:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005076:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800507a:	2b02      	cmp	r3, #2
 800507c:	d809      	bhi.n	8005092 <get_unix_time+0x76>
	{
		m += 12;
 800507e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8005082:	330c      	adds	r3, #12
 8005084:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		y -= 1;
 8005088:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800508c:	3b01      	subs	r3, #1
 800508e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 8005092:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005096:	f240 136d 	movw	r3, #365	; 0x16d
 800509a:	fb03 f202 	mul.w	r2, r3, r2
 800509e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	18d1      	adds	r1, r2, r3
 80050a8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80050ac:	4b9d      	ldr	r3, [pc, #628]	; (8005324 <get_unix_time+0x308>)
 80050ae:	fba3 2302 	umull	r2, r3, r3, r2
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	1ac9      	subs	r1, r1, r3
 80050b8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80050bc:	4b99      	ldr	r3, [pc, #612]	; (8005324 <get_unix_time+0x308>)
 80050be:	fba3 2302 	umull	r2, r3, r3, r2
 80050c2:	09db      	lsrs	r3, r3, #7
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	440b      	add	r3, r1
 80050c8:	17da      	asrs	r2, r3, #31
 80050ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80050cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050d2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 80050d6:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80050da:	4613      	mov	r3, r2
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4618      	mov	r0, r3
 80050e4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	1899      	adds	r1, r3, r2
 80050f0:	4b8d      	ldr	r3, [pc, #564]	; (8005328 <get_unix_time+0x30c>)
 80050f2:	fb83 2301 	smull	r2, r3, r3, r1
 80050f6:	105a      	asrs	r2, r3, #1
 80050f8:	17cb      	asrs	r3, r1, #31
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	18c2      	adds	r2, r0, r3
 80050fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005102:	4413      	add	r3, r2
 8005104:	17da      	asrs	r2, r3, #31
 8005106:	653b      	str	r3, [r7, #80]	; 0x50
 8005108:	657a      	str	r2, [r7, #84]	; 0x54
 800510a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800510e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005110:	1851      	adds	r1, r2, r1
 8005112:	6339      	str	r1, [r7, #48]	; 0x30
 8005114:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005116:	eb43 0101 	adc.w	r1, r3, r1
 800511a:	6379      	str	r1, [r7, #52]	; 0x34
 800511c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005120:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 8005124:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005128:	4980      	ldr	r1, [pc, #512]	; (800532c <get_unix_time+0x310>)
 800512a:	1851      	adds	r1, r2, r1
 800512c:	62b9      	str	r1, [r7, #40]	; 0x28
 800512e:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005138:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 800513c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	1896      	adds	r6, r2, r2
 8005146:	623e      	str	r6, [r7, #32]
 8005148:	415b      	adcs	r3, r3
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
 800514c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005150:	1814      	adds	r4, r2, r0
 8005152:	eb43 0501 	adc.w	r5, r3, r1
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	012b      	lsls	r3, r5, #4
 8005160:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005164:	0122      	lsls	r2, r4, #4
 8005166:	ebb2 0804 	subs.w	r8, r2, r4
 800516a:	eb63 0905 	sbc.w	r9, r3, r5
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800517a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800517e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8005182:	ebb2 0108 	subs.w	r1, r2, r8
 8005186:	61b9      	str	r1, [r7, #24]
 8005188:	eb63 0309 	sbc.w	r3, r3, r9
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800519a:	4629      	mov	r1, r5
 800519c:	01cb      	lsls	r3, r1, #7
 800519e:	4621      	mov	r1, r4
 80051a0:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 80051a4:	4621      	mov	r1, r4
 80051a6:	01ca      	lsls	r2, r1, #7
 80051a8:	461c      	mov	r4, r3
 80051aa:	4613      	mov	r3, r2
 80051ac:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 80051b0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80051b4:	461a      	mov	r2, r3
 80051b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80051ba:	fb03 f102 	mul.w	r1, r3, r2
 80051be:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80051c2:	461a      	mov	r2, r3
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	18ca      	adds	r2, r1, r3
 80051ce:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80051d2:	4413      	add	r3, r2
 80051d4:	2200      	movs	r2, #0
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051da:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80051de:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80051e2:	4621      	mov	r1, r4
 80051e4:	1851      	adds	r1, r2, r1
 80051e6:	6139      	str	r1, [r7, #16]
 80051e8:	4629      	mov	r1, r5
 80051ea:	eb43 0101 	adc.w	r1, r3, r1
 80051ee:	6179      	str	r1, [r7, #20]
 80051f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80051f4:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Convert to milliseconds
	unix_tm_val *= 1000;
 80051f8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	f04f 0400 	mov.w	r4, #0
 8005204:	f04f 0500 	mov.w	r5, #0
 8005208:	015d      	lsls	r5, r3, #5
 800520a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800520e:	0154      	lsls	r4, r2, #5
 8005210:	4622      	mov	r2, r4
 8005212:	462b      	mov	r3, r5
 8005214:	ebb2 0a00 	subs.w	sl, r2, r0
 8005218:	eb63 0b01 	sbc.w	fp, r3, r1
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8005228:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800522c:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8005230:	4692      	mov	sl, r2
 8005232:	469b      	mov	fp, r3
 8005234:	eb1a 0300 	adds.w	r3, sl, r0
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	eb4b 0301 	adc.w	r3, fp, r1
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800524c:	4629      	mov	r1, r5
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4621      	mov	r1, r4
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4621      	mov	r1, r4
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	461c      	mov	r4, r3
 800525c:	4613      	mov	r3, r2
 800525e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Add milliseconds
	unix_tm_val += milliseconds;
 8005262:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005266:	2200      	movs	r2, #0
 8005268:	643b      	str	r3, [r7, #64]	; 0x40
 800526a:	647a      	str	r2, [r7, #68]	; 0x44
 800526c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005270:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005274:	4621      	mov	r1, r4
 8005276:	1851      	adds	r1, r2, r1
 8005278:	6039      	str	r1, [r7, #0]
 800527a:	4629      	mov	r1, r5
 800527c:	eb43 0101 	adc.w	r1, r3, r1
 8005280:	6079      	str	r1, [r7, #4]
 8005282:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005286:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

	buffer[0] = ((unix_tm_val  >> 40) & 0xFF);
 800528a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	0a0a      	lsrs	r2, r1, #8
 8005298:	2300      	movs	r3, #0
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800529e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val  >> 32) & 0xFF);
 80052a0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	000a      	movs	r2, r1
 80052ae:	2300      	movs	r3, #0
 80052b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80052b2:	3101      	adds	r1, #1
 80052b4:	b2d3      	uxtb	r3, r2
 80052b6:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val  >> 24) & 0xFF);
 80052b8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	0e02      	lsrs	r2, r0, #24
 80052c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80052ca:	0e0b      	lsrs	r3, r1, #24
 80052cc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80052ce:	3102      	adds	r1, #2
 80052d0:	b2d3      	uxtb	r3, r2
 80052d2:	700b      	strb	r3, [r1, #0]
	buffer[3] = ((unix_tm_val  >> 16) & 0xFF);
 80052d4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	0c02      	lsrs	r2, r0, #16
 80052e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80052e6:	0c0b      	lsrs	r3, r1, #16
 80052e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80052ea:	3103      	adds	r1, #3
 80052ec:	b2d3      	uxtb	r3, r2
 80052ee:	700b      	strb	r3, [r1, #0]
	buffer[4] = ((unix_tm_val  >> 8) & 0xFF);
 80052f0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	0a02      	lsrs	r2, r0, #8
 80052fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005302:	0a0b      	lsrs	r3, r1, #8
 8005304:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005306:	3104      	adds	r1, #4
 8005308:	b2d3      	uxtb	r3, r2
 800530a:	700b      	strb	r3, [r1, #0]
	buffer[5] = unix_tm_val & 0xFF;
 800530c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800530e:	3305      	adds	r3, #5
 8005310:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 8005314:	701a      	strb	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	3794      	adds	r7, #148	; 0x94
 800531a:	46bd      	mov	sp, r7
 800531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005320:	24001af4 	.word	0x24001af4
 8005324:	51eb851f 	.word	0x51eb851f
 8005328:	66666667 	.word	0x66666667
 800532c:	fff50537 	.word	0xfff50537

08005330 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b08c      	sub	sp, #48	; 0x30
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	789b      	ldrb	r3, [r3, #2]
 8005344:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	78db      	ldrb	r3, [r3, #3]
 800534c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	791b      	ldrb	r3, [r3, #4]
 8005354:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	795b      	ldrb	r3, [r3, #5]
 800535c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	799b      	ldrb	r3, [r3, #6]
 8005364:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3307      	adds	r3, #7
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	b21a      	sxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3308      	adds	r3, #8
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	b21b      	sxth	r3, r3
 800537a:	4313      	orrs	r3, r2
 800537c:	b21b      	sxth	r3, r3
 800537e:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005388:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800538c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005390:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005398:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800539c:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 800539e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053a2:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80053a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80053a8:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80053aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80053ac:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80053ae:	f107 0320 	add.w	r3, r7, #32
 80053b2:	2200      	movs	r2, #0
 80053b4:	4619      	mov	r1, r3
 80053b6:	480b      	ldr	r0, [pc, #44]	; (80053e4 <calibrateRTC+0xb4>)
 80053b8:	f00c fbf8 	bl	8011bac <HAL_RTC_SetDate>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80053c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <calibrateRTC+0x9e>
		Error_Handler();
 80053ca:	f7fe fb21 	bl	8003a10 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80053ce:	f107 030c 	add.w	r3, r7, #12
 80053d2:	2200      	movs	r2, #0
 80053d4:	4619      	mov	r1, r3
 80053d6:	4803      	ldr	r0, [pc, #12]	; (80053e4 <calibrateRTC+0xb4>)
 80053d8:	f000 f806 	bl	80053e8 <RTC_SetTime>
}
 80053dc:	bf00      	nop
 80053de:	3730      	adds	r7, #48	; 0x30
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	24001af4 	.word	0x24001af4

080053e8 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <RTC_SetTime+0x1a>
 80053fe:	2302      	movs	r3, #2
 8005400:	e051      	b.n	80054a6 <RTC_SetTime+0xbe>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	22ca      	movs	r2, #202	; 0xca
 8005418:	625a      	str	r2, [r3, #36]	; 0x24
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2253      	movs	r2, #83	; 0x53
 8005420:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f00c fcbc 	bl	8011da0 <RTC_EnterInitMode>
 8005428:	4603      	mov	r3, r0
 800542a:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d129      	bne.n	8005486 <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f00c fd21 	bl	8011e84 <RTC_ByteToBcd2>
 8005442:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005444:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	4618      	mov	r0, r3
 800544c:	f00c fd1a 	bl	8011e84 <RTC_ByteToBcd2>
 8005450:	4603      	mov	r3, r0
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	789b      	ldrb	r3, [r3, #2]
 800545a:	4618      	mov	r0, r3
 800545c:	f00c fd12 	bl	8011e84 <RTC_ByteToBcd2>
 8005460:	4603      	mov	r3, r0
 8005462:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	78db      	ldrb	r3, [r3, #3]
 800546a:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	6939      	ldr	r1, [r7, #16]
 8005476:	4b0e      	ldr	r3, [pc, #56]	; (80054b0 <RTC_SetTime+0xc8>)
 8005478:	400b      	ands	r3, r1
 800547a:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f00c fcc3 	bl	8011e08 <RTC_ExitInitMode>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	22ff      	movs	r2, #255	; 0xff
 800548c:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800548e:	7dfb      	ldrb	r3, [r7, #23]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80054a4:	7dfb      	ldrb	r3, [r7, #23]

}
 80054a6:	4618      	mov	r0, r3
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd90      	pop	{r4, r7, pc}
 80054ae:	bf00      	nop
 80054b0:	007f7f7f 	.word	0x007f7f7f

080054b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054b8:	4b30      	ldr	r3, [pc, #192]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054ba:	4a31      	ldr	r2, [pc, #196]	; (8005580 <MX_USART1_UART_Init+0xcc>)
 80054bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80054be:	4b2f      	ldr	r3, [pc, #188]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054c0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80054c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054c6:	4b2d      	ldr	r3, [pc, #180]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054cc:	4b2b      	ldr	r3, [pc, #172]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054d2:	4b2a      	ldr	r3, [pc, #168]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054d8:	4b28      	ldr	r3, [pc, #160]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054da:	220c      	movs	r2, #12
 80054dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054de:	4b27      	ldr	r3, [pc, #156]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054e4:	4b25      	ldr	r3, [pc, #148]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80054f0:	4b22      	ldr	r3, [pc, #136]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054f6:	4b21      	ldr	r3, [pc, #132]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054fc:	481f      	ldr	r0, [pc, #124]	; (800557c <MX_USART1_UART_Init+0xc8>)
 80054fe:	f00e fea3 	bl	8014248 <HAL_UART_Init>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005508:	f7fe fa82 	bl	8003a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800550c:	2100      	movs	r1, #0
 800550e:	481b      	ldr	r0, [pc, #108]	; (800557c <MX_USART1_UART_Init+0xc8>)
 8005510:	f011 fbe9 	bl	8016ce6 <HAL_UARTEx_SetTxFifoThreshold>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800551a:	f7fe fa79 	bl	8003a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800551e:	2100      	movs	r1, #0
 8005520:	4816      	ldr	r0, [pc, #88]	; (800557c <MX_USART1_UART_Init+0xc8>)
 8005522:	f011 fc1e 	bl	8016d62 <HAL_UARTEx_SetRxFifoThreshold>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800552c:	f7fe fa70 	bl	8003a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005530:	4812      	ldr	r0, [pc, #72]	; (800557c <MX_USART1_UART_Init+0xc8>)
 8005532:	f011 fb9f 	bl	8016c74 <HAL_UARTEx_DisableFifoMode>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800553c:	f7fe fa68 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005544:	480d      	ldr	r0, [pc, #52]	; (800557c <MX_USART1_UART_Init+0xc8>)
 8005546:	f011 fc0c 	bl	8016d62 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800554a:	480c      	ldr	r0, [pc, #48]	; (800557c <MX_USART1_UART_Init+0xc8>)
 800554c:	f011 fb57 	bl	8016bfe <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005550:	480a      	ldr	r0, [pc, #40]	; (800557c <MX_USART1_UART_Init+0xc8>)
 8005552:	f011 fb21 	bl	8016b98 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <MX_USART1_UART_Init+0xc8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	4b07      	ldr	r3, [pc, #28]	; (800557c <MX_USART1_UART_Init+0xc8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005564:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <MX_USART1_UART_Init+0xc8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	4b03      	ldr	r3, [pc, #12]	; (800557c <MX_USART1_UART_Init+0xc8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005574:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	24001e3c 	.word	0x24001e3c
 8005580:	40011000 	.word	0x40011000

08005584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b0ba      	sub	sp, #232	; 0xe8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800558c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800559c:	f107 0310 	add.w	r3, r7, #16
 80055a0:	22c0      	movs	r2, #192	; 0xc0
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f014 fec9 	bl	801a33c <memset>
  if(uartHandle->Instance==USART1)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a41      	ldr	r2, [pc, #260]	; (80056b4 <HAL_UART_MspInit+0x130>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d17b      	bne.n	80056ac <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80055b4:	f04f 0201 	mov.w	r2, #1
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80055c0:	2318      	movs	r3, #24
 80055c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055c6:	f107 0310 	add.w	r3, r7, #16
 80055ca:	4618      	mov	r0, r3
 80055cc:	f009 fc74 	bl	800eeb8 <HAL_RCCEx_PeriphCLKConfig>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80055d6:	f7fe fa1b 	bl	8003a10 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80055da:	4b37      	ldr	r3, [pc, #220]	; (80056b8 <HAL_UART_MspInit+0x134>)
 80055dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e0:	4a35      	ldr	r2, [pc, #212]	; (80056b8 <HAL_UART_MspInit+0x134>)
 80055e2:	f043 0310 	orr.w	r3, r3, #16
 80055e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055ea:	4b33      	ldr	r3, [pc, #204]	; (80056b8 <HAL_UART_MspInit+0x134>)
 80055ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f8:	4b2f      	ldr	r3, [pc, #188]	; (80056b8 <HAL_UART_MspInit+0x134>)
 80055fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055fe:	4a2e      	ldr	r2, [pc, #184]	; (80056b8 <HAL_UART_MspInit+0x134>)
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005608:	4b2b      	ldr	r3, [pc, #172]	; (80056b8 <HAL_UART_MspInit+0x134>)
 800560a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	60bb      	str	r3, [r7, #8]
 8005614:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005616:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800561a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800561e:	2302      	movs	r3, #2
 8005620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005630:	2307      	movs	r3, #7
 8005632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005636:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800563a:	4619      	mov	r1, r3
 800563c:	481f      	ldr	r0, [pc, #124]	; (80056bc <HAL_UART_MspInit+0x138>)
 800563e:	f005 fe47 	bl	800b2d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005642:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 8005644:	4a1f      	ldr	r2, [pc, #124]	; (80056c4 <HAL_UART_MspInit+0x140>)
 8005646:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005648:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 800564a:	222a      	movs	r2, #42	; 0x2a
 800564c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800564e:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 8005650:	2240      	movs	r2, #64	; 0x40
 8005652:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005654:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 8005656:	2200      	movs	r2, #0
 8005658:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800565a:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 800565c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005660:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005662:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 8005664:	2200      	movs	r2, #0
 8005666:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005668:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 800566a:	2200      	movs	r2, #0
 800566c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800566e:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 8005670:	2200      	movs	r2, #0
 8005672:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005674:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 8005676:	2200      	movs	r2, #0
 8005678:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 800567c:	2200      	movs	r2, #0
 800567e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005680:	480f      	ldr	r0, [pc, #60]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 8005682:	f002 fcf5 	bl	8008070 <HAL_DMA_Init>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800568c:	f7fe f9c0 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a0b      	ldr	r2, [pc, #44]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 8005694:	67da      	str	r2, [r3, #124]	; 0x7c
 8005696:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <HAL_UART_MspInit+0x13c>)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800569c:	2200      	movs	r2, #0
 800569e:	2105      	movs	r1, #5
 80056a0:	2025      	movs	r0, #37	; 0x25
 80056a2:	f002 f8b7 	bl	8007814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056a6:	2025      	movs	r0, #37	; 0x25
 80056a8:	f002 f8ce 	bl	8007848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80056ac:	bf00      	nop
 80056ae:	37e8      	adds	r7, #232	; 0xe8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40011000 	.word	0x40011000
 80056b8:	58024400 	.word	0x58024400
 80056bc:	58020000 	.word	0x58020000
 80056c0:	24001ed0 	.word	0x24001ed0
 80056c4:	40020040 	.word	0x40020040

080056c8 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80056d2:	4bc2      	ldr	r3, [pc, #776]	; (80059dc <voltage_monitor_init+0x314>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80056d8:	4bc0      	ldr	r3, [pc, #768]	; (80059dc <voltage_monitor_init+0x314>)
 80056da:	2200      	movs	r2, #0
 80056dc:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80056de:	4bbf      	ldr	r3, [pc, #764]	; (80059dc <voltage_monitor_init+0x314>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80056e4:	4bbd      	ldr	r3, [pc, #756]	; (80059dc <voltage_monitor_init+0x314>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80056ea:	4bbc      	ldr	r3, [pc, #752]	; (80059dc <voltage_monitor_init+0x314>)
 80056ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80056f0:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 80056f2:	4bba      	ldr	r3, [pc, #744]	; (80059dc <voltage_monitor_init+0x314>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80056f8:	4bb8      	ldr	r3, [pc, #736]	; (80059dc <voltage_monitor_init+0x314>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80056fe:	4bb7      	ldr	r3, [pc, #732]	; (80059dc <voltage_monitor_init+0x314>)
 8005700:	2200      	movs	r2, #0
 8005702:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005704:	4bb5      	ldr	r3, [pc, #724]	; (80059dc <voltage_monitor_init+0x314>)
 8005706:	2201      	movs	r2, #1
 8005708:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 800570a:	4bb4      	ldr	r3, [pc, #720]	; (80059dc <voltage_monitor_init+0x314>)
 800570c:	2200      	movs	r2, #0
 800570e:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005710:	4bb2      	ldr	r3, [pc, #712]	; (80059dc <voltage_monitor_init+0x314>)
 8005712:	f242 7210 	movw	r2, #10000	; 0x2710
 8005716:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8005718:	4bb0      	ldr	r3, [pc, #704]	; (80059dc <voltage_monitor_init+0x314>)
 800571a:	2200      	movs	r2, #0
 800571c:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 800571e:	4baf      	ldr	r3, [pc, #700]	; (80059dc <voltage_monitor_init+0x314>)
 8005720:	2202      	movs	r2, #2
 8005722:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005724:	4bad      	ldr	r3, [pc, #692]	; (80059dc <voltage_monitor_init+0x314>)
 8005726:	2200      	movs	r2, #0
 8005728:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 800572a:	4bac      	ldr	r3, [pc, #688]	; (80059dc <voltage_monitor_init+0x314>)
 800572c:	2201      	movs	r2, #1
 800572e:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8005730:	4baa      	ldr	r3, [pc, #680]	; (80059dc <voltage_monitor_init+0x314>)
 8005732:	2200      	movs	r2, #0
 8005734:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005736:	4ba9      	ldr	r3, [pc, #676]	; (80059dc <voltage_monitor_init+0x314>)
 8005738:	f242 7210 	movw	r2, #10000	; 0x2710
 800573c:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 800573e:	4ba7      	ldr	r3, [pc, #668]	; (80059dc <voltage_monitor_init+0x314>)
 8005740:	2200      	movs	r2, #0
 8005742:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005744:	4ba5      	ldr	r3, [pc, #660]	; (80059dc <voltage_monitor_init+0x314>)
 8005746:	2203      	movs	r2, #3
 8005748:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800574a:	4ba4      	ldr	r3, [pc, #656]	; (80059dc <voltage_monitor_init+0x314>)
 800574c:	2200      	movs	r2, #0
 800574e:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8005750:	4ba2      	ldr	r3, [pc, #648]	; (80059dc <voltage_monitor_init+0x314>)
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8005758:	4ba0      	ldr	r3, [pc, #640]	; (80059dc <voltage_monitor_init+0x314>)
 800575a:	2200      	movs	r2, #0
 800575c:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 800575e:	4b9f      	ldr	r3, [pc, #636]	; (80059dc <voltage_monitor_init+0x314>)
 8005760:	f242 7210 	movw	r2, #10000	; 0x2710
 8005764:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005766:	4b9d      	ldr	r3, [pc, #628]	; (80059dc <voltage_monitor_init+0x314>)
 8005768:	2200      	movs	r2, #0
 800576a:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 800576c:	4b9b      	ldr	r3, [pc, #620]	; (80059dc <voltage_monitor_init+0x314>)
 800576e:	2204      	movs	r2, #4
 8005770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005774:	4b99      	ldr	r3, [pc, #612]	; (80059dc <voltage_monitor_init+0x314>)
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 800577c:	4b97      	ldr	r3, [pc, #604]	; (80059dc <voltage_monitor_init+0x314>)
 800577e:	2201      	movs	r2, #1
 8005780:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005784:	4b95      	ldr	r3, [pc, #596]	; (80059dc <voltage_monitor_init+0x314>)
 8005786:	2200      	movs	r2, #0
 8005788:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800578a:	4b94      	ldr	r3, [pc, #592]	; (80059dc <voltage_monitor_init+0x314>)
 800578c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005790:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8005792:	4b92      	ldr	r3, [pc, #584]	; (80059dc <voltage_monitor_init+0x314>)
 8005794:	2200      	movs	r2, #0
 8005796:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005798:	4b90      	ldr	r3, [pc, #576]	; (80059dc <voltage_monitor_init+0x314>)
 800579a:	2205      	movs	r2, #5
 800579c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 80057a0:	4b8e      	ldr	r3, [pc, #568]	; (80059dc <voltage_monitor_init+0x314>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 80057a8:	4b8c      	ldr	r3, [pc, #560]	; (80059dc <voltage_monitor_init+0x314>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 80057b0:	4b8a      	ldr	r3, [pc, #552]	; (80059dc <voltage_monitor_init+0x314>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057b6:	4b89      	ldr	r3, [pc, #548]	; (80059dc <voltage_monitor_init+0x314>)
 80057b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80057bc:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 80057be:	4b87      	ldr	r3, [pc, #540]	; (80059dc <voltage_monitor_init+0x314>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80057c4:	4b85      	ldr	r3, [pc, #532]	; (80059dc <voltage_monitor_init+0x314>)
 80057c6:	2206      	movs	r2, #6
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 80057cc:	4b83      	ldr	r3, [pc, #524]	; (80059dc <voltage_monitor_init+0x314>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 80057d4:	4b81      	ldr	r3, [pc, #516]	; (80059dc <voltage_monitor_init+0x314>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80057dc:	4b7f      	ldr	r3, [pc, #508]	; (80059dc <voltage_monitor_init+0x314>)
 80057de:	2200      	movs	r2, #0
 80057e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057e4:	4b7d      	ldr	r3, [pc, #500]	; (80059dc <voltage_monitor_init+0x314>)
 80057e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80057ea:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80057ee:	4b7b      	ldr	r3, [pc, #492]	; (80059dc <voltage_monitor_init+0x314>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80057f6:	4b79      	ldr	r3, [pc, #484]	; (80059dc <voltage_monitor_init+0x314>)
 80057f8:	2207      	movs	r2, #7
 80057fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80057fe:	4b77      	ldr	r3, [pc, #476]	; (80059dc <voltage_monitor_init+0x314>)
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8005806:	4b75      	ldr	r3, [pc, #468]	; (80059dc <voltage_monitor_init+0x314>)
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 800580e:	4b73      	ldr	r3, [pc, #460]	; (80059dc <voltage_monitor_init+0x314>)
 8005810:	2200      	movs	r2, #0
 8005812:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005816:	4b71      	ldr	r3, [pc, #452]	; (80059dc <voltage_monitor_init+0x314>)
 8005818:	f242 7210 	movw	r2, #10000	; 0x2710
 800581c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8005820:	4b6e      	ldr	r3, [pc, #440]	; (80059dc <voltage_monitor_init+0x314>)
 8005822:	2200      	movs	r2, #0
 8005824:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8005828:	4b6c      	ldr	r3, [pc, #432]	; (80059dc <voltage_monitor_init+0x314>)
 800582a:	2208      	movs	r2, #8
 800582c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8005830:	4b6a      	ldr	r3, [pc, #424]	; (80059dc <voltage_monitor_init+0x314>)
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8005838:	4b68      	ldr	r3, [pc, #416]	; (80059dc <voltage_monitor_init+0x314>)
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8005840:	4b66      	ldr	r3, [pc, #408]	; (80059dc <voltage_monitor_init+0x314>)
 8005842:	2200      	movs	r2, #0
 8005844:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8005848:	4b64      	ldr	r3, [pc, #400]	; (80059dc <voltage_monitor_init+0x314>)
 800584a:	f640 42b9 	movw	r2, #3257	; 0xcb9
 800584e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8005852:	4b62      	ldr	r3, [pc, #392]	; (80059dc <voltage_monitor_init+0x314>)
 8005854:	f640 3283 	movw	r2, #2947	; 0xb83
 8005858:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 800585c:	4b5f      	ldr	r3, [pc, #380]	; (80059dc <voltage_monitor_init+0x314>)
 800585e:	2209      	movs	r2, #9
 8005860:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005864:	4b5d      	ldr	r3, [pc, #372]	; (80059dc <voltage_monitor_init+0x314>)
 8005866:	2200      	movs	r2, #0
 8005868:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 800586c:	4b5b      	ldr	r3, [pc, #364]	; (80059dc <voltage_monitor_init+0x314>)
 800586e:	2200      	movs	r2, #0
 8005870:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005874:	4b59      	ldr	r3, [pc, #356]	; (80059dc <voltage_monitor_init+0x314>)
 8005876:	2200      	movs	r2, #0
 8005878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 800587c:	4b57      	ldr	r3, [pc, #348]	; (80059dc <voltage_monitor_init+0x314>)
 800587e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005882:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005886:	4b55      	ldr	r3, [pc, #340]	; (80059dc <voltage_monitor_init+0x314>)
 8005888:	2200      	movs	r2, #0
 800588a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800588e:	4b53      	ldr	r3, [pc, #332]	; (80059dc <voltage_monitor_init+0x314>)
 8005890:	220a      	movs	r2, #10
 8005892:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005896:	4b51      	ldr	r3, [pc, #324]	; (80059dc <voltage_monitor_init+0x314>)
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800589e:	4b4f      	ldr	r3, [pc, #316]	; (80059dc <voltage_monitor_init+0x314>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 80058a6:	4b4d      	ldr	r3, [pc, #308]	; (80059dc <voltage_monitor_init+0x314>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 80058ae:	4b4b      	ldr	r3, [pc, #300]	; (80059dc <voltage_monitor_init+0x314>)
 80058b0:	f640 7245 	movw	r2, #3909	; 0xf45
 80058b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 80058b8:	4b48      	ldr	r3, [pc, #288]	; (80059dc <voltage_monitor_init+0x314>)
 80058ba:	f640 52d1 	movw	r2, #3537	; 0xdd1
 80058be:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80058c2:	4b46      	ldr	r3, [pc, #280]	; (80059dc <voltage_monitor_init+0x314>)
 80058c4:	220b      	movs	r2, #11
 80058c6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 80058ca:	4b44      	ldr	r3, [pc, #272]	; (80059dc <voltage_monitor_init+0x314>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 80058d2:	4b42      	ldr	r3, [pc, #264]	; (80059dc <voltage_monitor_init+0x314>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 80058da:	4b40      	ldr	r3, [pc, #256]	; (80059dc <voltage_monitor_init+0x314>)
 80058dc:	2200      	movs	r2, #0
 80058de:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80058e2:	4b3e      	ldr	r3, [pc, #248]	; (80059dc <voltage_monitor_init+0x314>)
 80058e4:	f640 72fb 	movw	r2, #4091	; 0xffb
 80058e8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80058ec:	4b3b      	ldr	r3, [pc, #236]	; (80059dc <voltage_monitor_init+0x314>)
 80058ee:	f640 6276 	movw	r2, #3702	; 0xe76
 80058f2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80058f6:	4b39      	ldr	r3, [pc, #228]	; (80059dc <voltage_monitor_init+0x314>)
 80058f8:	220c      	movs	r2, #12
 80058fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80058fe:	4b37      	ldr	r3, [pc, #220]	; (80059dc <voltage_monitor_init+0x314>)
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8005906:	4b35      	ldr	r3, [pc, #212]	; (80059dc <voltage_monitor_init+0x314>)
 8005908:	2200      	movs	r2, #0
 800590a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 800590e:	4b33      	ldr	r3, [pc, #204]	; (80059dc <voltage_monitor_init+0x314>)
 8005910:	2200      	movs	r2, #0
 8005912:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8005916:	4b31      	ldr	r3, [pc, #196]	; (80059dc <voltage_monitor_init+0x314>)
 8005918:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800591c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8005920:	4b2e      	ldr	r3, [pc, #184]	; (80059dc <voltage_monitor_init+0x314>)
 8005922:	2200      	movs	r2, #0
 8005924:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8005928:	4b2c      	ldr	r3, [pc, #176]	; (80059dc <voltage_monitor_init+0x314>)
 800592a:	220d      	movs	r2, #13
 800592c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8005930:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <voltage_monitor_init+0x314>)
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8005938:	4b28      	ldr	r3, [pc, #160]	; (80059dc <voltage_monitor_init+0x314>)
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8005940:	4b26      	ldr	r3, [pc, #152]	; (80059dc <voltage_monitor_init+0x314>)
 8005942:	2200      	movs	r2, #0
 8005944:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8005948:	4b24      	ldr	r3, [pc, #144]	; (80059dc <voltage_monitor_init+0x314>)
 800594a:	f640 7238 	movw	r2, #3896	; 0xf38
 800594e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8005952:	4b22      	ldr	r3, [pc, #136]	; (80059dc <voltage_monitor_init+0x314>)
 8005954:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8005958:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 800595c:	4b1f      	ldr	r3, [pc, #124]	; (80059dc <voltage_monitor_init+0x314>)
 800595e:	220e      	movs	r2, #14
 8005960:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005964:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <voltage_monitor_init+0x314>)
 8005966:	2200      	movs	r2, #0
 8005968:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <voltage_monitor_init+0x314>)
 800596e:	2200      	movs	r2, #0
 8005970:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005974:	4b19      	ldr	r3, [pc, #100]	; (80059dc <voltage_monitor_init+0x314>)
 8005976:	2200      	movs	r2, #0
 8005978:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <voltage_monitor_init+0x314>)
 800597e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005982:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005986:	4b15      	ldr	r3, [pc, #84]	; (80059dc <voltage_monitor_init+0x314>)
 8005988:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800598c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005990:	4b12      	ldr	r3, [pc, #72]	; (80059dc <voltage_monitor_init+0x314>)
 8005992:	220f      	movs	r2, #15
 8005994:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005998:	4b10      	ldr	r3, [pc, #64]	; (80059dc <voltage_monitor_init+0x314>)
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 80059a0:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <voltage_monitor_init+0x314>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <voltage_monitor_init+0x314>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <voltage_monitor_init+0x314>)
 80059b2:	f241 0264 	movw	r2, #4196	; 0x1064
 80059b6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <voltage_monitor_init+0x314>)
 80059bc:	2200      	movs	r2, #0
 80059be:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80059c2:	4b06      	ldr	r3, [pc, #24]	; (80059dc <voltage_monitor_init+0x314>)
 80059c4:	2210      	movs	r2, #16
 80059c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80059ca:	4b04      	ldr	r3, [pc, #16]	; (80059dc <voltage_monitor_init+0x314>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80059d2:	4b02      	ldr	r3, [pc, #8]	; (80059dc <voltage_monitor_init+0x314>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80059da:	e001      	b.n	80059e0 <voltage_monitor_init+0x318>
 80059dc:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 80059e0:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <voltage_monitor_init+0x378>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80059e8:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <voltage_monitor_init+0x378>)
 80059ea:	f640 5208 	movw	r2, #3336	; 0xd08
 80059ee:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <voltage_monitor_init+0x378>)
 80059f4:	f640 32ca 	movw	r2, #3018	; 0xbca
 80059f8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <voltage_monitor_init+0x378>)
 80059fe:	2211      	movs	r2, #17
 8005a00:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <voltage_monitor_init+0x378>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <voltage_monitor_init+0x378>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <voltage_monitor_init+0x378>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005a1c:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <voltage_monitor_init+0x378>)
 8005a1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a22:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <voltage_monitor_init+0x378>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	71fb      	strb	r3, [r7, #7]

	return status;
 8005a32:	79fb      	ldrb	r3, [r7, #7]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	24001f48 	.word	0x24001f48

08005a44 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	71fb      	strb	r3, [r7, #7]
 8005a50:	4613      	mov	r3, r2
 8005a52:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005a58:	79fa      	ldrb	r2, [r7, #7]
 8005a5a:	4909      	ldr	r1, [pc, #36]	; (8005a80 <set_rail_monitor_enable+0x3c>)
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	440b      	add	r3, r1
 8005a66:	3302      	adds	r3, #2
 8005a68:	79ba      	ldrb	r2, [r7, #6]
 8005a6a:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]

	return status;
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	24001f48 	.word	0x24001f48

08005a84 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	; 0x28
 8005a88:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005a90:	463b      	mov	r3, r7
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fafa 	bl	800408c <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005a98:	f107 0310 	add.w	r3, r7, #16
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe fb25 	bl	80040ec <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005aa2:	f107 0308 	add.w	r3, r7, #8
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fb72 	bl	8004190 <sample_hk_adc3>
 8005aac:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8005aae:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <set_rail_monitor+0xc0>)
 8005ab0:	809a      	strh	r2, [r3, #4]
 8005ab2:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005ab4:	4b23      	ldr	r3, [pc, #140]	; (8005b44 <set_rail_monitor+0xc0>)
 8005ab6:	81da      	strh	r2, [r3, #14]
 8005ab8:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005aba:	4b22      	ldr	r3, [pc, #136]	; (8005b44 <set_rail_monitor+0xc0>)
 8005abc:	831a      	strh	r2, [r3, #24]
 8005abe:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005ac0:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <set_rail_monitor+0xc0>)
 8005ac2:	845a      	strh	r2, [r3, #34]	; 0x22
 8005ac4:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005ac6:	4b1f      	ldr	r3, [pc, #124]	; (8005b44 <set_rail_monitor+0xc0>)
 8005ac8:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005aca:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005acc:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <set_rail_monitor+0xc0>)
 8005ace:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ad0:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <set_rail_monitor+0xc0>)
 8005ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005ad8:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8005ada:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <set_rail_monitor+0xc0>)
 8005adc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005ae0:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005ae2:	4b18      	ldr	r3, [pc, #96]	; (8005b44 <set_rail_monitor+0xc0>)
 8005ae4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005ae8:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8005aea:	4b16      	ldr	r3, [pc, #88]	; (8005b44 <set_rail_monitor+0xc0>)
 8005aec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005af0:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <set_rail_monitor+0xc0>)
 8005af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005af8:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <set_rail_monitor+0xc0>)
 8005afc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005b00:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005b02:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <set_rail_monitor+0xc0>)
 8005b04:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005b08:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8005b0a:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <set_rail_monitor+0xc0>)
 8005b0c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005b10:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <set_rail_monitor+0xc0>)
 8005b14:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005b18:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <set_rail_monitor+0xc0>)
 8005b1c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005b20:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005b22:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <set_rail_monitor+0xc0>)
 8005b24:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005b28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <set_rail_monitor+0xc0>)
 8005b2c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3728      	adds	r7, #40	; 0x28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	24001f48 	.word	0x24001f48

08005b48 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005b4c:	4b02      	ldr	r3, [pc, #8]	; (8005b58 <get_rail_monitor+0x10>)
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	24001f48 	.word	0x24001f48

08005b5c <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005b6a:	89fb      	ldrh	r3, [r7, #14]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	db05      	blt.n	8005b7e <in_range+0x22>
 8005b72:	89fb      	ldrh	r3, [r7, #14]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	dc01      	bgt.n	8005b7e <in_range+0x22>
		return 1;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <in_range+0x24>
	}
	return 0;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <monitor_rails>:


void monitor_rails() {
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005b92:	2300      	movs	r3, #0
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	e062      	b.n	8005c5e <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8005b98:	4935      	ldr	r1, [pc, #212]	; (8005c70 <monitor_rails+0xe4>)
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3302      	adds	r3, #2
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d054      	beq.n	8005c58 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005bae:	4930      	ldr	r1, [pc, #192]	; (8005c70 <monitor_rails+0xe4>)
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	440b      	add	r3, r1
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	8818      	ldrh	r0, [r3, #0]
 8005bc0:	492b      	ldr	r1, [pc, #172]	; (8005c70 <monitor_rails+0xe4>)
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	440b      	add	r3, r1
 8005bce:	3308      	adds	r3, #8
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	461c      	mov	r4, r3
 8005bd4:	4926      	ldr	r1, [pc, #152]	; (8005c70 <monitor_rails+0xe4>)
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	440b      	add	r3, r1
 8005be2:	3306      	adds	r3, #6
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	4621      	mov	r1, r4
 8005bea:	f7ff ffb7 	bl	8005b5c <in_range>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d131      	bne.n	8005c58 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005bf4:	491e      	ldr	r1, [pc, #120]	; (8005c70 <monitor_rails+0xe4>)
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	440b      	add	r3, r1
 8005c02:	3301      	adds	r3, #1
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	b2d8      	uxtb	r0, r3
 8005c0a:	4919      	ldr	r1, [pc, #100]	; (8005c70 <monitor_rails+0xe4>)
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	440b      	add	r3, r1
 8005c18:	3301      	adds	r3, #1
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005c1e:	4914      	ldr	r1, [pc, #80]	; (8005c70 <monitor_rails+0xe4>)
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d111      	bne.n	8005c58 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005c34:	490e      	ldr	r1, [pc, #56]	; (8005c70 <monitor_rails+0xe4>)
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	440b      	add	r3, r1
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 f815 	bl	8005c74 <get_rail_name_error_detail>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 8005c52:	6838      	ldr	r0, [r7, #0]
 8005c54:	f7fc f982 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	607b      	str	r3, [r7, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b11      	cmp	r3, #17
 8005c62:	dd99      	ble.n	8005b98 <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	24001f48 	.word	0x24001f48

08005c74 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	2b11      	cmp	r3, #17
 8005c82:	d84b      	bhi.n	8005d1c <get_rail_name_error_detail+0xa8>
 8005c84:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <get_rail_name_error_detail+0x18>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cd9 	.word	0x08005cd9
 8005c94:	08005cdd 	.word	0x08005cdd
 8005c98:	08005ce1 	.word	0x08005ce1
 8005c9c:	08005ce5 	.word	0x08005ce5
 8005ca0:	08005ce9 	.word	0x08005ce9
 8005ca4:	08005ced 	.word	0x08005ced
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cf5 	.word	0x08005cf5
 8005cb0:	08005cf9 	.word	0x08005cf9
 8005cb4:	08005cfd 	.word	0x08005cfd
 8005cb8:	08005d01 	.word	0x08005d01
 8005cbc:	08005d05 	.word	0x08005d05
 8005cc0:	08005d09 	.word	0x08005d09
 8005cc4:	08005d0d 	.word	0x08005d0d
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d15 	.word	0x08005d15
 8005cd0:	08005d19 	.word	0x08005d19
	case RAIL_vsense:
		return ED_vsense;
 8005cd4:	2306      	movs	r3, #6
 8005cd6:	e022      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8005cd8:	2307      	movs	r3, #7
 8005cda:	e020      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8005cdc:	2308      	movs	r3, #8
 8005cde:	e01e      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8005ce0:	2309      	movs	r3, #9
 8005ce2:	e01c      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8005ce4:	230a      	movs	r3, #10
 8005ce6:	e01a      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8005ce8:	230b      	movs	r3, #11
 8005cea:	e018      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8005cec:	230c      	movs	r3, #12
 8005cee:	e016      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8005cf0:	230d      	movs	r3, #13
 8005cf2:	e014      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8005cf4:	230e      	movs	r3, #14
 8005cf6:	e012      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8005cf8:	230f      	movs	r3, #15
 8005cfa:	e010      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	e00e      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005d00:	2311      	movs	r3, #17
 8005d02:	e00c      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005d04:	2312      	movs	r3, #18
 8005d06:	e00a      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005d08:	2313      	movs	r3, #19
 8005d0a:	e008      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005d0c:	2314      	movs	r3, #20
 8005d0e:	e006      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8005d10:	2315      	movs	r3, #21
 8005d12:	e004      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005d14:	2316      	movs	r3, #22
 8005d16:	e002      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005d18:	2317      	movs	r3, #23
 8005d1a:	e000      	b.n	8005d1e <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005d1c:	231a      	movs	r3, #26
	}
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop

08005d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005d30:	f7fe feb6 	bl	8004aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d34:	480c      	ldr	r0, [pc, #48]	; (8005d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d36:	490d      	ldr	r1, [pc, #52]	; (8005d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d38:	4a0d      	ldr	r2, [pc, #52]	; (8005d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d3c:	e002      	b.n	8005d44 <LoopCopyDataInit>

08005d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d42:	3304      	adds	r3, #4

08005d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d48:	d3f9      	bcc.n	8005d3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d4a:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005d4c:	4c0a      	ldr	r4, [pc, #40]	; (8005d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d50:	e001      	b.n	8005d56 <LoopFillZerobss>

08005d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d54:	3204      	adds	r2, #4

08005d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d58:	d3fb      	bcc.n	8005d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d5a:	f014 fabd 	bl	801a2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d5e:	f7fd fc75 	bl	800364c <main>
  bx  lr
 8005d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005d68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005d6c:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8005d70:	0801b208 	.word	0x0801b208
  ldr r2, =_sbss
 8005d74:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005d78:	2400697c 	.word	0x2400697c

08005d7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d7c:	e7fe      	b.n	8005d7c <ADC3_IRQHandler>
	...

08005d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d86:	2003      	movs	r0, #3
 8005d88:	f001 fd39 	bl	80077fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d8c:	f008 fe7c 	bl	800ea88 <HAL_RCC_GetSysClockFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <HAL_Init+0x68>)
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	4913      	ldr	r1, [pc, #76]	; (8005dec <HAL_Init+0x6c>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
 8005da8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005daa:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <HAL_Init+0x68>)
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	4a0e      	ldr	r2, [pc, #56]	; (8005dec <HAL_Init+0x6c>)
 8005db4:	5cd3      	ldrb	r3, [r2, r3]
 8005db6:	f003 031f 	and.w	r3, r3, #31
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc0:	4a0b      	ldr	r2, [pc, #44]	; (8005df0 <HAL_Init+0x70>)
 8005dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dc4:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <HAL_Init+0x74>)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005dca:	2005      	movs	r0, #5
 8005dcc:	f7fe fc52 	bl	8004674 <HAL_InitTick>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e002      	b.n	8005de0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005dda:	f7fe fc2d 	bl	8004638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	58024400 	.word	0x58024400
 8005dec:	0801b154 	.word	0x0801b154
 8005df0:	240000c4 	.word	0x240000c4
 8005df4:	240000c0 	.word	0x240000c0

08005df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_IncTick+0x20>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <HAL_IncTick+0x24>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4413      	add	r3, r2
 8005e08:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <HAL_IncTick+0x24>)
 8005e0a:	6013      	str	r3, [r2, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	240000cc 	.word	0x240000cc
 8005e1c:	24001ffc 	.word	0x24001ffc

08005e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
  return uwTick;
 8005e24:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <HAL_GetTick+0x14>)
 8005e26:	681b      	ldr	r3, [r3, #0]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	24001ffc 	.word	0x24001ffc

08005e38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <HAL_GetREVID+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	0c1b      	lsrs	r3, r3, #16
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	5c001000 	.word	0x5c001000

08005e50 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005e5a:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	43db      	mvns	r3, r3
 8005e62:	401a      	ands	r2, r3
 8005e64:	4904      	ldr	r1, [pc, #16]	; (8005e78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	604b      	str	r3, [r1, #4]
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	58000400 	.word	0x58000400

08005e7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	609a      	str	r2, [r3, #8]
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	609a      	str	r2, [r3, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3360      	adds	r3, #96	; 0x60
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	430b      	orrs	r3, r1
 8005f12:	431a      	orrs	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005f18:	bf00      	nop
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 031f 	and.w	r3, r3, #31
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	fa01 f303 	lsl.w	r3, r1, r3
 8005f44:	431a      	orrs	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	611a      	str	r2, [r3, #16]
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b087      	sub	sp, #28
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3360      	adds	r3, #96	; 0x60
 8005f66:	461a      	mov	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	601a      	str	r2, [r3, #0]
  }
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b087      	sub	sp, #28
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3330      	adds	r3, #48	; 0x30
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	4413      	add	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f003 031f 	and.w	r3, r3, #31
 8005fdc:	211f      	movs	r1, #31
 8005fde:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	401a      	ands	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	0e9b      	lsrs	r3, r3, #26
 8005fea:	f003 011f 	and.w	r1, r3, #31
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f023 0203 	bic.w	r2, r3, #3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60da      	str	r2, [r3, #12]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3314      	adds	r3, #20
 8006040:	461a      	mov	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	0e5b      	lsrs	r3, r3, #25
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	4413      	add	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	0d1b      	lsrs	r3, r3, #20
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	2107      	movs	r1, #7
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	43db      	mvns	r3, r3
 8006064:	401a      	ands	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	0d1b      	lsrs	r3, r3, #20
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	431a      	orrs	r2, r3
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a0:	43db      	mvns	r3, r3
 80060a2:	401a      	ands	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f003 0318 	and.w	r3, r3, #24
 80060aa:	4908      	ldr	r1, [pc, #32]	; (80060cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80060ac:	40d9      	lsrs	r1, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	400b      	ands	r3, r1
 80060b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b6:	431a      	orrs	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	000fffff 	.word	0x000fffff

080060d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 031f 	and.w	r3, r3, #31
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	4b04      	ldr	r3, [pc, #16]	; (800610c <LL_ADC_DisableDeepPowerDown+0x20>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6093      	str	r3, [r2, #8]
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	5fffffc0 	.word	0x5fffffc0

08006110 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006124:	d101      	bne.n	800612a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <LL_ADC_EnableInternalRegulator+0x24>)
 8006146:	4013      	ands	r3, r2
 8006148:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	6fffffc0 	.word	0x6fffffc0

08006160 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006174:	d101      	bne.n	800617a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <LL_ADC_Enable+0x24>)
 8006196:	4013      	ands	r3, r2
 8006198:	f043 0201 	orr.w	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	7fffffc0 	.word	0x7fffffc0

080061b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <LL_ADC_Disable+0x24>)
 80061be:	4013      	ands	r3, r2
 80061c0:	f043 0202 	orr.w	r2, r3, #2
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	7fffffc0 	.word	0x7fffffc0

080061d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <LL_ADC_IsEnabled+0x18>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <LL_ADC_IsEnabled+0x1a>
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d101      	bne.n	8006216 <LL_ADC_IsDisableOngoing+0x18>
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <LL_ADC_IsDisableOngoing+0x1a>
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <LL_ADC_REG_StartConversion+0x24>)
 8006232:	4013      	ands	r3, r2
 8006234:	f043 0204 	orr.w	r2, r3, #4
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	7fffffc0 	.word	0x7fffffc0

0800624c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b04      	cmp	r3, #4
 800625e:	d101      	bne.n	8006264 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b08      	cmp	r3, #8
 8006284:	d101      	bne.n	800628a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b089      	sub	sp, #36	; 0x24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e18f      	b.n	80065d2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fa fb43 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff ff19 	bl	8006110 <LL_ADC_IsDeepPowerDownEnabled>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff feff 	bl	80060ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff ff34 	bl	8006160 <LL_ADC_IsInternalRegulatorEnabled>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d114      	bne.n	8006328 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff ff18 	bl	8006138 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006308:	4b87      	ldr	r3, [pc, #540]	; (8006528 <HAL_ADC_Init+0x290>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	099b      	lsrs	r3, r3, #6
 800630e:	4a87      	ldr	r2, [pc, #540]	; (800652c <HAL_ADC_Init+0x294>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	099b      	lsrs	r3, r3, #6
 8006316:	3301      	adds	r3, #1
 8006318:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800631a:	e002      	b.n	8006322 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	3b01      	subs	r3, #1
 8006320:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f9      	bne.n	800631c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff ff17 	bl	8006160 <LL_ADC_IsInternalRegulatorEnabled>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10d      	bne.n	8006354 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	f043 0210 	orr.w	r2, r3, #16
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006348:	f043 0201 	orr.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff ff77 	bl	800624c <LL_ADC_REG_IsConversionOngoing>
 800635e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 8129 	bne.w	80065c0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 8125 	bne.w	80065c0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800637e:	f043 0202 	orr.w	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff ff24 	bl	80061d8 <LL_ADC_IsEnabled>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d136      	bne.n	8006404 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a65      	ldr	r2, [pc, #404]	; (8006530 <HAL_ADC_Init+0x298>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_ADC_Init+0x112>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a63      	ldr	r2, [pc, #396]	; (8006534 <HAL_ADC_Init+0x29c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d10e      	bne.n	80063c8 <HAL_ADC_Init+0x130>
 80063aa:	4861      	ldr	r0, [pc, #388]	; (8006530 <HAL_ADC_Init+0x298>)
 80063ac:	f7ff ff14 	bl	80061d8 <LL_ADC_IsEnabled>
 80063b0:	4604      	mov	r4, r0
 80063b2:	4860      	ldr	r0, [pc, #384]	; (8006534 <HAL_ADC_Init+0x29c>)
 80063b4:	f7ff ff10 	bl	80061d8 <LL_ADC_IsEnabled>
 80063b8:	4603      	mov	r3, r0
 80063ba:	4323      	orrs	r3, r4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bf0c      	ite	eq
 80063c0:	2301      	moveq	r3, #1
 80063c2:	2300      	movne	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	e008      	b.n	80063da <HAL_ADC_Init+0x142>
 80063c8:	485b      	ldr	r0, [pc, #364]	; (8006538 <HAL_ADC_Init+0x2a0>)
 80063ca:	f7ff ff05 	bl	80061d8 <LL_ADC_IsEnabled>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf0c      	ite	eq
 80063d4:	2301      	moveq	r3, #1
 80063d6:	2300      	movne	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d012      	beq.n	8006404 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a53      	ldr	r2, [pc, #332]	; (8006530 <HAL_ADC_Init+0x298>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_ADC_Init+0x15a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a51      	ldr	r2, [pc, #324]	; (8006534 <HAL_ADC_Init+0x29c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d101      	bne.n	80063f6 <HAL_ADC_Init+0x15e>
 80063f2:	4a52      	ldr	r2, [pc, #328]	; (800653c <HAL_ADC_Init+0x2a4>)
 80063f4:	e000      	b.n	80063f8 <HAL_ADC_Init+0x160>
 80063f6:	4a52      	ldr	r2, [pc, #328]	; (8006540 <HAL_ADC_Init+0x2a8>)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f7ff fd3c 	bl	8005e7c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006404:	f7ff fd18 	bl	8005e38 <HAL_GetREVID>
 8006408:	4603      	mov	r3, r0
 800640a:	f241 0203 	movw	r2, #4099	; 0x1003
 800640e:	4293      	cmp	r3, r2
 8006410:	d914      	bls.n	800643c <HAL_ADC_Init+0x1a4>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	2b10      	cmp	r3, #16
 8006418:	d110      	bne.n	800643c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	7d5b      	ldrb	r3, [r3, #21]
 800641e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006424:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800642a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7f1b      	ldrb	r3, [r3, #28]
 8006430:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006432:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006434:	f043 030c 	orr.w	r3, r3, #12
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	e00d      	b.n	8006458 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	7d5b      	ldrb	r3, [r3, #21]
 8006440:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006446:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800644c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	7f1b      	ldrb	r3, [r3, #28]
 8006452:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006454:	4313      	orrs	r3, r2
 8006456:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	7f1b      	ldrb	r3, [r3, #28]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d106      	bne.n	800646e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	3b01      	subs	r3, #1
 8006466:	045b      	lsls	r3, r3, #17
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4313      	orrs	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d009      	beq.n	800648a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4313      	orrs	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	4b2c      	ldr	r3, [pc, #176]	; (8006544 <HAL_ADC_Init+0x2ac>)
 8006492:	4013      	ands	r3, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	69b9      	ldr	r1, [r7, #24]
 800649a:	430b      	orrs	r3, r1
 800649c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fed2 	bl	800624c <LL_ADC_REG_IsConversionOngoing>
 80064a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fedf 	bl	8006272 <LL_ADC_INJ_IsConversionOngoing>
 80064b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d15f      	bne.n	800657c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d15c      	bne.n	800657c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	7d1b      	ldrb	r3, [r3, #20]
 80064c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <HAL_ADC_Init+0x2b0>)
 80064d8:	4013      	ands	r3, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	69b9      	ldr	r1, [r7, #24]
 80064e0:	430b      	orrs	r3, r1
 80064e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d130      	bne.n	8006550 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <HAL_ADC_Init+0x2b4>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006502:	3a01      	subs	r2, #1
 8006504:	0411      	lsls	r1, r2, #16
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800650a:	4311      	orrs	r1, r2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006510:	4311      	orrs	r1, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006516:	430a      	orrs	r2, r1
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	611a      	str	r2, [r3, #16]
 8006524:	e01c      	b.n	8006560 <HAL_ADC_Init+0x2c8>
 8006526:	bf00      	nop
 8006528:	240000c0 	.word	0x240000c0
 800652c:	053e2d63 	.word	0x053e2d63
 8006530:	40022000 	.word	0x40022000
 8006534:	40022100 	.word	0x40022100
 8006538:	58026000 	.word	0x58026000
 800653c:	40022300 	.word	0x40022300
 8006540:	58026300 	.word	0x58026300
 8006544:	fff0c003 	.word	0xfff0c003
 8006548:	ffffbffc 	.word	0xffffbffc
 800654c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fdec 	bl	8007154 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d10c      	bne.n	800659e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	f023 010f 	bic.w	r1, r3, #15
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	1e5a      	subs	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
 800659c:	e007      	b.n	80065ae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 020f 	bic.w	r2, r2, #15
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	f043 0201 	orr.w	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	655a      	str	r2, [r3, #84]	; 0x54
 80065be:	e007      	b.n	80065d0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	f043 0210 	orr.w	r2, r3, #16
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80065d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3724      	adds	r7, #36	; 0x24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd90      	pop	{r4, r7, pc}
 80065da:	bf00      	nop

080065dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a55      	ldr	r2, [pc, #340]	; (8006744 <HAL_ADC_Start_DMA+0x168>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <HAL_ADC_Start_DMA+0x20>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a54      	ldr	r2, [pc, #336]	; (8006748 <HAL_ADC_Start_DMA+0x16c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d101      	bne.n	8006600 <HAL_ADC_Start_DMA+0x24>
 80065fc:	4b53      	ldr	r3, [pc, #332]	; (800674c <HAL_ADC_Start_DMA+0x170>)
 80065fe:	e000      	b.n	8006602 <HAL_ADC_Start_DMA+0x26>
 8006600:	4b53      	ldr	r3, [pc, #332]	; (8006750 <HAL_ADC_Start_DMA+0x174>)
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff fd64 	bl	80060d0 <LL_ADC_GetMultimode>
 8006608:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fe1c 	bl	800624c <LL_ADC_REG_IsConversionOngoing>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	f040 808c 	bne.w	8006734 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_ADC_Start_DMA+0x4e>
 8006626:	2302      	movs	r3, #2
 8006628:	e087      	b.n	800673a <HAL_ADC_Start_DMA+0x15e>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b05      	cmp	r3, #5
 800663c:	d002      	beq.n	8006644 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b09      	cmp	r3, #9
 8006642:	d170      	bne.n	8006726 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fc07 	bl	8006e58 <ADC_Enable>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d163      	bne.n	800671c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006658:	4b3e      	ldr	r3, [pc, #248]	; (8006754 <HAL_ADC_Start_DMA+0x178>)
 800665a:	4013      	ands	r3, r2
 800665c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a37      	ldr	r2, [pc, #220]	; (8006748 <HAL_ADC_Start_DMA+0x16c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d002      	beq.n	8006674 <HAL_ADC_Start_DMA+0x98>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	e000      	b.n	8006676 <HAL_ADC_Start_DMA+0x9a>
 8006674:	4b33      	ldr	r3, [pc, #204]	; (8006744 <HAL_ADC_Start_DMA+0x168>)
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	4293      	cmp	r3, r2
 800667c:	d002      	beq.n	8006684 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d105      	bne.n	8006690 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d006      	beq.n	80066aa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a0:	f023 0206 	bic.w	r2, r3, #6
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	659a      	str	r2, [r3, #88]	; 0x58
 80066a8:	e002      	b.n	80066b0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b4:	4a28      	ldr	r2, [pc, #160]	; (8006758 <HAL_ADC_Start_DMA+0x17c>)
 80066b6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066bc:	4a27      	ldr	r2, [pc, #156]	; (800675c <HAL_ADC_Start_DMA+0x180>)
 80066be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c4:	4a26      	ldr	r2, [pc, #152]	; (8006760 <HAL_ADC_Start_DMA+0x184>)
 80066c6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	221c      	movs	r2, #28
 80066ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0210 	orr.w	r2, r2, #16
 80066e6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f7ff fc89 	bl	800600a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3340      	adds	r3, #64	; 0x40
 8006702:	4619      	mov	r1, r3
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f002 f80e 	bl	8008728 <HAL_DMA_Start_IT>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fd85 	bl	8006224 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800671a:	e00d      	b.n	8006738 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006724:	e008      	b.n	8006738 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006732:	e001      	b.n	8006738 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006734:	2302      	movs	r3, #2
 8006736:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40022000 	.word	0x40022000
 8006748:	40022100 	.word	0x40022100
 800674c:	40022300 	.word	0x40022300
 8006750:	58026300 	.word	0x58026300
 8006754:	fffff0fe 	.word	0xfffff0fe
 8006758:	0800702b 	.word	0x0800702b
 800675c:	08007103 	.word	0x08007103
 8006760:	0800711f 	.word	0x0800711f

08006764 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80067a0:	b590      	push	{r4, r7, lr}
 80067a2:	b0a1      	sub	sp, #132	; 0x84
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4a65      	ldr	r2, [pc, #404]	; (8006950 <HAL_ADC_ConfigChannel+0x1b0>)
 80067ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <HAL_ADC_ConfigChannel+0x2a>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e32e      	b.n	8006e28 <HAL_ADC_ConfigChannel+0x688>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fd38 	bl	800624c <LL_ADC_REG_IsConversionOngoing>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 8313 	bne.w	8006e0a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	db2c      	blt.n	8006846 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d108      	bne.n	800680a <HAL_ADC_ConfigChannel+0x6a>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	0e9b      	lsrs	r3, r3, #26
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	2201      	movs	r2, #1
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	e016      	b.n	8006838 <HAL_ADC_ConfigChannel+0x98>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006812:	fa93 f3a3 	rbit	r3, r3
 8006816:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800681a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800681c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8006822:	2320      	movs	r3, #32
 8006824:	e003      	b.n	800682e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8006826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006828:	fab3 f383 	clz	r3, r3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2201      	movs	r2, #1
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	69d1      	ldr	r1, [r2, #28]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	430b      	orrs	r3, r1
 8006844:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6859      	ldr	r1, [r3, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	f7ff fbad 	bl	8005fb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fcf5 	bl	800624c <LL_ADC_REG_IsConversionOngoing>
 8006862:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fd02 	bl	8006272 <LL_ADC_INJ_IsConversionOngoing>
 800686e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006872:	2b00      	cmp	r3, #0
 8006874:	f040 80b8 	bne.w	80069e8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800687a:	2b00      	cmp	r3, #0
 800687c:	f040 80b4 	bne.w	80069e8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	6819      	ldr	r1, [r3, #0]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	461a      	mov	r2, r3
 800688e:	f7ff fbcf 	bl	8006030 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006892:	4b30      	ldr	r3, [pc, #192]	; (8006954 <HAL_ADC_ConfigChannel+0x1b4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800689a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800689e:	d10b      	bne.n	80068b8 <HAL_ADC_ConfigChannel+0x118>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695a      	ldr	r2, [r3, #20]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	089b      	lsrs	r3, r3, #2
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	e01d      	b.n	80068f4 <HAL_ADC_ConfigChannel+0x154>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f003 0310 	and.w	r3, r3, #16
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <HAL_ADC_ConfigChannel+0x13e>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	089b      	lsrs	r3, r3, #2
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	e00a      	b.n	80068f4 <HAL_ADC_ConfigChannel+0x154>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	695a      	ldr	r2, [r3, #20]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	089b      	lsrs	r3, r3, #2
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d02c      	beq.n	8006958 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6919      	ldr	r1, [r3, #16]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800690c:	f7ff faea 	bl	8005ee4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6919      	ldr	r1, [r3, #16]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	7e5b      	ldrb	r3, [r3, #25]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d102      	bne.n	8006926 <HAL_ADC_ConfigChannel+0x186>
 8006920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006924:	e000      	b.n	8006928 <HAL_ADC_ConfigChannel+0x188>
 8006926:	2300      	movs	r3, #0
 8006928:	461a      	mov	r2, r3
 800692a:	f7ff fb14 	bl	8005f56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6919      	ldr	r1, [r3, #16]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	7e1b      	ldrb	r3, [r3, #24]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d102      	bne.n	8006944 <HAL_ADC_ConfigChannel+0x1a4>
 800693e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006942:	e000      	b.n	8006946 <HAL_ADC_ConfigChannel+0x1a6>
 8006944:	2300      	movs	r3, #0
 8006946:	461a      	mov	r2, r3
 8006948:	f7ff faec 	bl	8005f24 <LL_ADC_SetDataRightShift>
 800694c:	e04c      	b.n	80069e8 <HAL_ADC_ConfigChannel+0x248>
 800694e:	bf00      	nop
 8006950:	47ff0000 	.word	0x47ff0000
 8006954:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	069b      	lsls	r3, r3, #26
 8006968:	429a      	cmp	r2, r3
 800696a:	d107      	bne.n	800697c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800697a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	069b      	lsls	r3, r3, #26
 800698c:	429a      	cmp	r2, r3
 800698e:	d107      	bne.n	80069a0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800699e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	069b      	lsls	r3, r3, #26
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d107      	bne.n	80069c4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80069c2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	069b      	lsls	r3, r3, #26
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d107      	bne.n	80069e8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80069e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fbf3 	bl	80061d8 <LL_ADC_IsEnabled>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f040 8211 	bne.w	8006e1c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6818      	ldr	r0, [r3, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	6819      	ldr	r1, [r3, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f7ff fb3e 	bl	8006088 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4aa1      	ldr	r2, [pc, #644]	; (8006c98 <HAL_ADC_ConfigChannel+0x4f8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	f040 812e 	bne.w	8006c74 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10b      	bne.n	8006a40 <HAL_ADC_ConfigChannel+0x2a0>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	0e9b      	lsrs	r3, r3, #26
 8006a2e:	3301      	adds	r3, #1
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	2b09      	cmp	r3, #9
 8006a36:	bf94      	ite	ls
 8006a38:	2301      	movls	r3, #1
 8006a3a:	2300      	movhi	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	e019      	b.n	8006a74 <HAL_ADC_ConfigChannel+0x2d4>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a48:	fa93 f3a3 	rbit	r3, r3
 8006a4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006a58:	2320      	movs	r3, #32
 8006a5a:	e003      	b.n	8006a64 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5e:	fab3 f383 	clz	r3, r3
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	3301      	adds	r3, #1
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	bf94      	ite	ls
 8006a6e:	2301      	movls	r3, #1
 8006a70:	2300      	movhi	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d079      	beq.n	8006b6c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d107      	bne.n	8006a94 <HAL_ADC_ConfigChannel+0x2f4>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	0e9b      	lsrs	r3, r3, #26
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	069b      	lsls	r3, r3, #26
 8006a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a92:	e015      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0x320>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	fa93 f3a3 	rbit	r3, r3
 8006aa0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006aac:	2320      	movs	r3, #32
 8006aae:	e003      	b.n	8006ab8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab2:	fab3 f383 	clz	r3, r3
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	3301      	adds	r3, #1
 8006aba:	069b      	lsls	r3, r3, #26
 8006abc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <HAL_ADC_ConfigChannel+0x340>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	0e9b      	lsrs	r3, r3, #26
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2101      	movs	r1, #1
 8006ada:	fa01 f303 	lsl.w	r3, r1, r3
 8006ade:	e017      	b.n	8006b10 <HAL_ADC_ConfigChannel+0x370>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae8:	fa93 f3a3 	rbit	r3, r3
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8006af8:	2320      	movs	r3, #32
 8006afa:	e003      	b.n	8006b04 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8006afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afe:	fab3 f383 	clz	r3, r3
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	3301      	adds	r3, #1
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b10:	ea42 0103 	orr.w	r1, r2, r3
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <HAL_ADC_ConfigChannel+0x396>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	0e9b      	lsrs	r3, r3, #26
 8006b26:	3301      	adds	r3, #1
 8006b28:	f003 021f 	and.w	r2, r3, #31
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	4413      	add	r3, r2
 8006b32:	051b      	lsls	r3, r3, #20
 8006b34:	e018      	b.n	8006b68 <HAL_ADC_ConfigChannel+0x3c8>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3e:	fa93 f3a3 	rbit	r3, r3
 8006b42:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8006b4e:	2320      	movs	r3, #32
 8006b50:	e003      	b.n	8006b5a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	fab3 f383 	clz	r3, r3
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	f003 021f 	and.w	r2, r3, #31
 8006b60:	4613      	mov	r3, r2
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	4413      	add	r3, r2
 8006b66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	e07e      	b.n	8006c6a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d107      	bne.n	8006b88 <HAL_ADC_ConfigChannel+0x3e8>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	0e9b      	lsrs	r3, r3, #26
 8006b7e:	3301      	adds	r3, #1
 8006b80:	069b      	lsls	r3, r3, #26
 8006b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b86:	e015      	b.n	8006bb4 <HAL_ADC_ConfigChannel+0x414>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	fa93 f3a3 	rbit	r3, r3
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	e003      	b.n	8006bac <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	fab3 f383 	clz	r3, r3
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	3301      	adds	r3, #1
 8006bae:	069b      	lsls	r3, r3, #26
 8006bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <HAL_ADC_ConfigChannel+0x434>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	0e9b      	lsrs	r3, r3, #26
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	f003 031f 	and.w	r3, r3, #31
 8006bcc:	2101      	movs	r1, #1
 8006bce:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd2:	e017      	b.n	8006c04 <HAL_ADC_ConfigChannel+0x464>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	fa93 f3a3 	rbit	r3, r3
 8006be0:	61bb      	str	r3, [r7, #24]
  return result;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8006bec:	2320      	movs	r3, #32
 8006bee:	e003      	b.n	8006bf8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	fab3 f383 	clz	r3, r3
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	2101      	movs	r1, #1
 8006c00:	fa01 f303 	lsl.w	r3, r1, r3
 8006c04:	ea42 0103 	orr.w	r1, r2, r3
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10d      	bne.n	8006c30 <HAL_ADC_ConfigChannel+0x490>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	0e9b      	lsrs	r3, r3, #26
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	f003 021f 	and.w	r2, r3, #31
 8006c20:	4613      	mov	r3, r2
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	4413      	add	r3, r2
 8006c26:	3b1e      	subs	r3, #30
 8006c28:	051b      	lsls	r3, r3, #20
 8006c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	e01b      	b.n	8006c68 <HAL_ADC_ConfigChannel+0x4c8>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	fa93 f3a3 	rbit	r3, r3
 8006c3c:	60fb      	str	r3, [r7, #12]
  return result;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006c48:	2320      	movs	r3, #32
 8006c4a:	e003      	b.n	8006c54 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	fab3 f383 	clz	r3, r3
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	3301      	adds	r3, #1
 8006c56:	f003 021f 	and.w	r2, r3, #31
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4413      	add	r3, r2
 8006c60:	3b1e      	subs	r3, #30
 8006c62:	051b      	lsls	r3, r3, #20
 8006c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	6892      	ldr	r2, [r2, #8]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	f7ff f9de 	bl	8006030 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f280 80cf 	bge.w	8006e1c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a06      	ldr	r2, [pc, #24]	; (8006c9c <HAL_ADC_ConfigChannel+0x4fc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d004      	beq.n	8006c92 <HAL_ADC_ConfigChannel+0x4f2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a04      	ldr	r2, [pc, #16]	; (8006ca0 <HAL_ADC_ConfigChannel+0x500>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d10a      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x508>
 8006c92:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <HAL_ADC_ConfigChannel+0x504>)
 8006c94:	e009      	b.n	8006caa <HAL_ADC_ConfigChannel+0x50a>
 8006c96:	bf00      	nop
 8006c98:	47ff0000 	.word	0x47ff0000
 8006c9c:	40022000 	.word	0x40022000
 8006ca0:	40022100 	.word	0x40022100
 8006ca4:	40022300 	.word	0x40022300
 8006ca8:	4b61      	ldr	r3, [pc, #388]	; (8006e30 <HAL_ADC_ConfigChannel+0x690>)
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff f90c 	bl	8005ec8 <LL_ADC_GetCommonPathInternalCh>
 8006cb0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a5f      	ldr	r2, [pc, #380]	; (8006e34 <HAL_ADC_ConfigChannel+0x694>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d004      	beq.n	8006cc6 <HAL_ADC_ConfigChannel+0x526>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a5d      	ldr	r2, [pc, #372]	; (8006e38 <HAL_ADC_ConfigChannel+0x698>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d10e      	bne.n	8006ce4 <HAL_ADC_ConfigChannel+0x544>
 8006cc6:	485b      	ldr	r0, [pc, #364]	; (8006e34 <HAL_ADC_ConfigChannel+0x694>)
 8006cc8:	f7ff fa86 	bl	80061d8 <LL_ADC_IsEnabled>
 8006ccc:	4604      	mov	r4, r0
 8006cce:	485a      	ldr	r0, [pc, #360]	; (8006e38 <HAL_ADC_ConfigChannel+0x698>)
 8006cd0:	f7ff fa82 	bl	80061d8 <LL_ADC_IsEnabled>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	4323      	orrs	r3, r4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bf0c      	ite	eq
 8006cdc:	2301      	moveq	r3, #1
 8006cde:	2300      	movne	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	e008      	b.n	8006cf6 <HAL_ADC_ConfigChannel+0x556>
 8006ce4:	4855      	ldr	r0, [pc, #340]	; (8006e3c <HAL_ADC_ConfigChannel+0x69c>)
 8006ce6:	f7ff fa77 	bl	80061d8 <LL_ADC_IsEnabled>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bf0c      	ite	eq
 8006cf0:	2301      	moveq	r3, #1
 8006cf2:	2300      	movne	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d07d      	beq.n	8006df6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a50      	ldr	r2, [pc, #320]	; (8006e40 <HAL_ADC_ConfigChannel+0x6a0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d130      	bne.n	8006d66 <HAL_ADC_ConfigChannel+0x5c6>
 8006d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d12b      	bne.n	8006d66 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a4a      	ldr	r2, [pc, #296]	; (8006e3c <HAL_ADC_ConfigChannel+0x69c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	f040 8081 	bne.w	8006e1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a45      	ldr	r2, [pc, #276]	; (8006e34 <HAL_ADC_ConfigChannel+0x694>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_ADC_ConfigChannel+0x58e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a43      	ldr	r2, [pc, #268]	; (8006e38 <HAL_ADC_ConfigChannel+0x698>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d101      	bne.n	8006d32 <HAL_ADC_ConfigChannel+0x592>
 8006d2e:	4a45      	ldr	r2, [pc, #276]	; (8006e44 <HAL_ADC_ConfigChannel+0x6a4>)
 8006d30:	e000      	b.n	8006d34 <HAL_ADC_ConfigChannel+0x594>
 8006d32:	4a3f      	ldr	r2, [pc, #252]	; (8006e30 <HAL_ADC_ConfigChannel+0x690>)
 8006d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f7ff f8b0 	bl	8005ea2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d42:	4b41      	ldr	r3, [pc, #260]	; (8006e48 <HAL_ADC_ConfigChannel+0x6a8>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	4a40      	ldr	r2, [pc, #256]	; (8006e4c <HAL_ADC_ConfigChannel+0x6ac>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	099b      	lsrs	r3, r3, #6
 8006d50:	3301      	adds	r3, #1
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006d56:	e002      	b.n	8006d5e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f9      	bne.n	8006d58 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d64:	e05a      	b.n	8006e1c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a39      	ldr	r2, [pc, #228]	; (8006e50 <HAL_ADC_ConfigChannel+0x6b0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d11e      	bne.n	8006dae <HAL_ADC_ConfigChannel+0x60e>
 8006d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d119      	bne.n	8006dae <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a2f      	ldr	r2, [pc, #188]	; (8006e3c <HAL_ADC_ConfigChannel+0x69c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d14b      	bne.n	8006e1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <HAL_ADC_ConfigChannel+0x694>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d004      	beq.n	8006d98 <HAL_ADC_ConfigChannel+0x5f8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a29      	ldr	r2, [pc, #164]	; (8006e38 <HAL_ADC_ConfigChannel+0x698>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d101      	bne.n	8006d9c <HAL_ADC_ConfigChannel+0x5fc>
 8006d98:	4a2a      	ldr	r2, [pc, #168]	; (8006e44 <HAL_ADC_ConfigChannel+0x6a4>)
 8006d9a:	e000      	b.n	8006d9e <HAL_ADC_ConfigChannel+0x5fe>
 8006d9c:	4a24      	ldr	r2, [pc, #144]	; (8006e30 <HAL_ADC_ConfigChannel+0x690>)
 8006d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f7ff f87b 	bl	8005ea2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dac:	e036      	b.n	8006e1c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a28      	ldr	r2, [pc, #160]	; (8006e54 <HAL_ADC_ConfigChannel+0x6b4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d131      	bne.n	8006e1c <HAL_ADC_ConfigChannel+0x67c>
 8006db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d12c      	bne.n	8006e1c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a1d      	ldr	r2, [pc, #116]	; (8006e3c <HAL_ADC_ConfigChannel+0x69c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d127      	bne.n	8006e1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <HAL_ADC_ConfigChannel+0x694>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_ADC_ConfigChannel+0x640>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a17      	ldr	r2, [pc, #92]	; (8006e38 <HAL_ADC_ConfigChannel+0x698>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d101      	bne.n	8006de4 <HAL_ADC_ConfigChannel+0x644>
 8006de0:	4a18      	ldr	r2, [pc, #96]	; (8006e44 <HAL_ADC_ConfigChannel+0x6a4>)
 8006de2:	e000      	b.n	8006de6 <HAL_ADC_ConfigChannel+0x646>
 8006de4:	4a12      	ldr	r2, [pc, #72]	; (8006e30 <HAL_ADC_ConfigChannel+0x690>)
 8006de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006dec:	4619      	mov	r1, r3
 8006dee:	4610      	mov	r0, r2
 8006df0:	f7ff f857 	bl	8005ea2 <LL_ADC_SetCommonPathInternalCh>
 8006df4:	e012      	b.n	8006e1c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	f043 0220 	orr.w	r2, r3, #32
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006e08:	e008      	b.n	8006e1c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0e:	f043 0220 	orr.w	r2, r3, #32
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006e24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3784      	adds	r7, #132	; 0x84
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd90      	pop	{r4, r7, pc}
 8006e30:	58026300 	.word	0x58026300
 8006e34:	40022000 	.word	0x40022000
 8006e38:	40022100 	.word	0x40022100
 8006e3c:	58026000 	.word	0x58026000
 8006e40:	cb840000 	.word	0xcb840000
 8006e44:	40022300 	.word	0x40022300
 8006e48:	240000c0 	.word	0x240000c0
 8006e4c:	053e2d63 	.word	0x053e2d63
 8006e50:	c7520000 	.word	0xc7520000
 8006e54:	cfb80000 	.word	0xcfb80000

08006e58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff f9b7 	bl	80061d8 <LL_ADC_IsEnabled>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d16e      	bne.n	8006f4e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	4b38      	ldr	r3, [pc, #224]	; (8006f58 <ADC_Enable+0x100>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00d      	beq.n	8006e9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	f043 0210 	orr.w	r2, r3, #16
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8e:	f043 0201 	orr.w	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e05a      	b.n	8006f50 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff f972 	bl	8006188 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006ea4:	f7fe ffbc 	bl	8005e20 <HAL_GetTick>
 8006ea8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2b      	ldr	r2, [pc, #172]	; (8006f5c <ADC_Enable+0x104>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d004      	beq.n	8006ebe <ADC_Enable+0x66>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a29      	ldr	r2, [pc, #164]	; (8006f60 <ADC_Enable+0x108>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d101      	bne.n	8006ec2 <ADC_Enable+0x6a>
 8006ebe:	4b29      	ldr	r3, [pc, #164]	; (8006f64 <ADC_Enable+0x10c>)
 8006ec0:	e000      	b.n	8006ec4 <ADC_Enable+0x6c>
 8006ec2:	4b29      	ldr	r3, [pc, #164]	; (8006f68 <ADC_Enable+0x110>)
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff f903 	bl	80060d0 <LL_ADC_GetMultimode>
 8006eca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a23      	ldr	r2, [pc, #140]	; (8006f60 <ADC_Enable+0x108>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d002      	beq.n	8006edc <ADC_Enable+0x84>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	e000      	b.n	8006ede <ADC_Enable+0x86>
 8006edc:	4b1f      	ldr	r3, [pc, #124]	; (8006f5c <ADC_Enable+0x104>)
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d02c      	beq.n	8006f40 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d130      	bne.n	8006f4e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006eec:	e028      	b.n	8006f40 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff f970 	bl	80061d8 <LL_ADC_IsEnabled>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d104      	bne.n	8006f08 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff f940 	bl	8006188 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006f08:	f7fe ff8a 	bl	8005e20 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d914      	bls.n	8006f40 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d00d      	beq.n	8006f40 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f28:	f043 0210 	orr.w	r2, r3, #16
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f34:	f043 0201 	orr.w	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e007      	b.n	8006f50 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d1cf      	bne.n	8006eee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	8000003f 	.word	0x8000003f
 8006f5c:	40022000 	.word	0x40022000
 8006f60:	40022100 	.word	0x40022100
 8006f64:	40022300 	.word	0x40022300
 8006f68:	58026300 	.word	0x58026300

08006f6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff f940 	bl	80061fe <LL_ADC_IsDisableOngoing>
 8006f7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff f927 	bl	80061d8 <LL_ADC_IsEnabled>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d047      	beq.n	8007020 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d144      	bne.n	8007020 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 030d 	and.w	r3, r3, #13
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d10c      	bne.n	8006fbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff f901 	bl	80061b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006fb6:	f7fe ff33 	bl	8005e20 <HAL_GetTick>
 8006fba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006fbc:	e029      	b.n	8007012 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc2:	f043 0210 	orr.w	r2, r3, #16
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fce:	f043 0201 	orr.w	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e023      	b.n	8007022 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006fda:	f7fe ff21 	bl	8005e20 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d914      	bls.n	8007012 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	f043 0210 	orr.w	r2, r3, #16
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007006:	f043 0201 	orr.w	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e007      	b.n	8007022 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1dc      	bne.n	8006fda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007040:	2b00      	cmp	r3, #0
 8007042:	d14b      	bne.n	80070dc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007048:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d021      	beq.n	80070a2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe ff92 	bl	8005f8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d032      	beq.n	80070d4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d12b      	bne.n	80070d4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11f      	bne.n	80070d4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007098:	f043 0201 	orr.w	r2, r3, #1
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	655a      	str	r2, [r3, #84]	; 0x54
 80070a0:	e018      	b.n	80070d4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d111      	bne.n	80070d4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d105      	bne.n	80070d4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070cc:	f043 0201 	orr.w	r2, r3, #1
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fb45 	bl	8006764 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80070da:	e00e      	b.n	80070fa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e0:	f003 0310 	and.w	r3, r3, #16
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff fb4f 	bl	800678c <HAL_ADC_ErrorCallback>
}
 80070ee:	e004      	b.n	80070fa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
}
 80070fa:	bf00      	nop
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff fb31 	bl	8006778 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007130:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713c:	f043 0204 	orr.w	r2, r3, #4
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f7ff fb21 	bl	800678c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800714a:	bf00      	nop
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a7a      	ldr	r2, [pc, #488]	; (800734c <ADC_ConfigureBoostMode+0x1f8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d004      	beq.n	8007170 <ADC_ConfigureBoostMode+0x1c>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a79      	ldr	r2, [pc, #484]	; (8007350 <ADC_ConfigureBoostMode+0x1fc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d109      	bne.n	8007184 <ADC_ConfigureBoostMode+0x30>
 8007170:	4b78      	ldr	r3, [pc, #480]	; (8007354 <ADC_ConfigureBoostMode+0x200>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007178:	2b00      	cmp	r3, #0
 800717a:	bf14      	ite	ne
 800717c:	2301      	movne	r3, #1
 800717e:	2300      	moveq	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	e008      	b.n	8007196 <ADC_ConfigureBoostMode+0x42>
 8007184:	4b74      	ldr	r3, [pc, #464]	; (8007358 <ADC_ConfigureBoostMode+0x204>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800718c:	2b00      	cmp	r3, #0
 800718e:	bf14      	ite	ne
 8007190:	2301      	movne	r3, #1
 8007192:	2300      	moveq	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01c      	beq.n	80071d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800719a:	f007 fdef 	bl	800ed7c <HAL_RCC_GetHCLKFreq>
 800719e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071a8:	d010      	beq.n	80071cc <ADC_ConfigureBoostMode+0x78>
 80071aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071ae:	d873      	bhi.n	8007298 <ADC_ConfigureBoostMode+0x144>
 80071b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b4:	d002      	beq.n	80071bc <ADC_ConfigureBoostMode+0x68>
 80071b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ba:	d16d      	bne.n	8007298 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	0c1b      	lsrs	r3, r3, #16
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	60fb      	str	r3, [r7, #12]
        break;
 80071ca:	e068      	b.n	800729e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	089b      	lsrs	r3, r3, #2
 80071d0:	60fb      	str	r3, [r7, #12]
        break;
 80071d2:	e064      	b.n	800729e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80071d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80071d8:	f04f 0100 	mov.w	r1, #0
 80071dc:	f009 f876 	bl	80102cc <HAL_RCCEx_GetPeriphCLKFreq>
 80071e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80071ea:	d051      	beq.n	8007290 <ADC_ConfigureBoostMode+0x13c>
 80071ec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80071f0:	d854      	bhi.n	800729c <ADC_ConfigureBoostMode+0x148>
 80071f2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80071f6:	d047      	beq.n	8007288 <ADC_ConfigureBoostMode+0x134>
 80071f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80071fc:	d84e      	bhi.n	800729c <ADC_ConfigureBoostMode+0x148>
 80071fe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007202:	d03d      	beq.n	8007280 <ADC_ConfigureBoostMode+0x12c>
 8007204:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007208:	d848      	bhi.n	800729c <ADC_ConfigureBoostMode+0x148>
 800720a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800720e:	d033      	beq.n	8007278 <ADC_ConfigureBoostMode+0x124>
 8007210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007214:	d842      	bhi.n	800729c <ADC_ConfigureBoostMode+0x148>
 8007216:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800721a:	d029      	beq.n	8007270 <ADC_ConfigureBoostMode+0x11c>
 800721c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007220:	d83c      	bhi.n	800729c <ADC_ConfigureBoostMode+0x148>
 8007222:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007226:	d01a      	beq.n	800725e <ADC_ConfigureBoostMode+0x10a>
 8007228:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800722c:	d836      	bhi.n	800729c <ADC_ConfigureBoostMode+0x148>
 800722e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007232:	d014      	beq.n	800725e <ADC_ConfigureBoostMode+0x10a>
 8007234:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007238:	d830      	bhi.n	800729c <ADC_ConfigureBoostMode+0x148>
 800723a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800723e:	d00e      	beq.n	800725e <ADC_ConfigureBoostMode+0x10a>
 8007240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007244:	d82a      	bhi.n	800729c <ADC_ConfigureBoostMode+0x148>
 8007246:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800724a:	d008      	beq.n	800725e <ADC_ConfigureBoostMode+0x10a>
 800724c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007250:	d824      	bhi.n	800729c <ADC_ConfigureBoostMode+0x148>
 8007252:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007256:	d002      	beq.n	800725e <ADC_ConfigureBoostMode+0x10a>
 8007258:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800725c:	d11e      	bne.n	800729c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	0c9b      	lsrs	r3, r3, #18
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	fbb2 f3f3 	udiv	r3, r2, r3
 800726c:	60fb      	str	r3, [r7, #12]
        break;
 800726e:	e016      	b.n	800729e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	091b      	lsrs	r3, r3, #4
 8007274:	60fb      	str	r3, [r7, #12]
        break;
 8007276:	e012      	b.n	800729e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	60fb      	str	r3, [r7, #12]
        break;
 800727e:	e00e      	b.n	800729e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	099b      	lsrs	r3, r3, #6
 8007284:	60fb      	str	r3, [r7, #12]
        break;
 8007286:	e00a      	b.n	800729e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	09db      	lsrs	r3, r3, #7
 800728c:	60fb      	str	r3, [r7, #12]
        break;
 800728e:	e006      	b.n	800729e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	60fb      	str	r3, [r7, #12]
        break;
 8007296:	e002      	b.n	800729e <ADC_ConfigureBoostMode+0x14a>
        break;
 8007298:	bf00      	nop
 800729a:	e000      	b.n	800729e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800729c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800729e:	f7fe fdcb 	bl	8005e38 <HAL_GetREVID>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d815      	bhi.n	80072d8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4a2b      	ldr	r2, [pc, #172]	; (800735c <ADC_ConfigureBoostMode+0x208>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d908      	bls.n	80072c6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80072c4:	e03e      	b.n	8007344 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072d4:	609a      	str	r2, [r3, #8]
}
 80072d6:	e035      	b.n	8007344 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4a1f      	ldr	r2, [pc, #124]	; (8007360 <ADC_ConfigureBoostMode+0x20c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d808      	bhi.n	80072f8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80072f4:	609a      	str	r2, [r3, #8]
}
 80072f6:	e025      	b.n	8007344 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4a1a      	ldr	r2, [pc, #104]	; (8007364 <ADC_ConfigureBoostMode+0x210>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d80a      	bhi.n	8007316 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007312:	609a      	str	r2, [r3, #8]
}
 8007314:	e016      	b.n	8007344 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a13      	ldr	r2, [pc, #76]	; (8007368 <ADC_ConfigureBoostMode+0x214>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d80a      	bhi.n	8007334 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007330:	609a      	str	r2, [r3, #8]
}
 8007332:	e007      	b.n	8007344 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007342:	609a      	str	r2, [r3, #8]
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40022000 	.word	0x40022000
 8007350:	40022100 	.word	0x40022100
 8007354:	40022300 	.word	0x40022300
 8007358:	58026300 	.word	0x58026300
 800735c:	01312d00 	.word	0x01312d00
 8007360:	005f5e10 	.word	0x005f5e10
 8007364:	00bebc20 	.word	0x00bebc20
 8007368:	017d7840 	.word	0x017d7840

0800736c <LL_ADC_IsEnabled>:
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <LL_ADC_IsEnabled+0x18>
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <LL_ADC_IsEnabled+0x1a>
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
	...

08007394 <LL_ADC_StartCalibration>:
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	4b09      	ldr	r3, [pc, #36]	; (80073cc <LL_ADC_StartCalibration+0x38>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80073b4:	430a      	orrs	r2, r1
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	609a      	str	r2, [r3, #8]
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	3ffeffc0 	.word	0x3ffeffc0

080073d0 <LL_ADC_IsCalibrationOnGoing>:
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073e4:	d101      	bne.n	80073ea <LL_ADC_IsCalibrationOnGoing+0x1a>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <LL_ADC_IsCalibrationOnGoing+0x1c>
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <LL_ADC_REG_IsConversionOngoing>:
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b04      	cmp	r3, #4
 800740a:	d101      	bne.n	8007410 <LL_ADC_REG_IsConversionOngoing+0x18>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_ADCEx_Calibration_Start+0x1e>
 800743a:	2302      	movs	r3, #2
 800743c:	e04c      	b.n	80074d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f7ff fd90 	bl	8006f6c <ADC_Disable>
 800744c:	4603      	mov	r3, r0
 800744e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d135      	bne.n	80074c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800745a:	4b21      	ldr	r3, [pc, #132]	; (80074e0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800745c:	4013      	ands	r3, r2
 800745e:	f043 0202 	orr.w	r2, r3, #2
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff ff90 	bl	8007394 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007474:	e014      	b.n	80074a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	3301      	adds	r3, #1
 800747a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	4a19      	ldr	r2, [pc, #100]	; (80074e4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d30d      	bcc.n	80074a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007488:	f023 0312 	bic.w	r3, r3, #18
 800748c:	f043 0210 	orr.w	r2, r3, #16
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e01b      	b.n	80074d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff ff93 	bl	80073d0 <LL_ADC_IsCalibrationOnGoing>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e2      	bne.n	8007476 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	f043 0201 	orr.w	r2, r3, #1
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	655a      	str	r2, [r3, #84]	; 0x54
 80074c0:	e005      	b.n	80074ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c6:	f043 0210 	orr.w	r2, r3, #16
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	ffffeefd 	.word	0xffffeefd
 80074e4:	25c3f800 	.word	0x25c3f800

080074e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80074e8:	b590      	push	{r4, r7, lr}
 80074ea:	b09f      	sub	sp, #124	; 0x7c
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007502:	2302      	movs	r3, #2
 8007504:	e0be      	b.n	8007684 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800750e:	2300      	movs	r3, #0
 8007510:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007512:	2300      	movs	r3, #0
 8007514:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a5c      	ldr	r2, [pc, #368]	; (800768c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d102      	bne.n	8007526 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007520:	4b5b      	ldr	r3, [pc, #364]	; (8007690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007522:	60bb      	str	r3, [r7, #8]
 8007524:	e001      	b.n	800752a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007526:	2300      	movs	r3, #0
 8007528:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10b      	bne.n	8007548 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007534:	f043 0220 	orr.w	r2, r3, #32
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e09d      	b.n	8007684 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff ff54 	bl	80073f8 <LL_ADC_REG_IsConversionOngoing>
 8007550:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f7ff ff4e 	bl	80073f8 <LL_ADC_REG_IsConversionOngoing>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d17f      	bne.n	8007662 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007564:	2b00      	cmp	r3, #0
 8007566:	d17c      	bne.n	8007662 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a47      	ldr	r2, [pc, #284]	; (800768c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d004      	beq.n	800757c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a46      	ldr	r2, [pc, #280]	; (8007690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d101      	bne.n	8007580 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800757c:	4b45      	ldr	r3, [pc, #276]	; (8007694 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800757e:	e000      	b.n	8007582 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007580:	4b45      	ldr	r3, [pc, #276]	; (8007698 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007582:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d039      	beq.n	8007600 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800758c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	431a      	orrs	r2, r3
 800759a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a3a      	ldr	r2, [pc, #232]	; (800768c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a38      	ldr	r2, [pc, #224]	; (8007690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d10e      	bne.n	80075d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80075b2:	4836      	ldr	r0, [pc, #216]	; (800768c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80075b4:	f7ff feda 	bl	800736c <LL_ADC_IsEnabled>
 80075b8:	4604      	mov	r4, r0
 80075ba:	4835      	ldr	r0, [pc, #212]	; (8007690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80075bc:	f7ff fed6 	bl	800736c <LL_ADC_IsEnabled>
 80075c0:	4603      	mov	r3, r0
 80075c2:	4323      	orrs	r3, r4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bf0c      	ite	eq
 80075c8:	2301      	moveq	r3, #1
 80075ca:	2300      	movne	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	e008      	b.n	80075e2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80075d0:	4832      	ldr	r0, [pc, #200]	; (800769c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80075d2:	f7ff fecb 	bl	800736c <LL_ADC_IsEnabled>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf0c      	ite	eq
 80075dc:	2301      	moveq	r3, #1
 80075de:	2300      	movne	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d047      	beq.n	8007676 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80075e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	4b2d      	ldr	r3, [pc, #180]	; (80076a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	6811      	ldr	r1, [r2, #0]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	6892      	ldr	r2, [r2, #8]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	431a      	orrs	r2, r3
 80075fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80075fe:	e03a      	b.n	8007676 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a1e      	ldr	r2, [pc, #120]	; (800768c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d004      	beq.n	8007620 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a1d      	ldr	r2, [pc, #116]	; (8007690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d10e      	bne.n	800763e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007620:	481a      	ldr	r0, [pc, #104]	; (800768c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007622:	f7ff fea3 	bl	800736c <LL_ADC_IsEnabled>
 8007626:	4604      	mov	r4, r0
 8007628:	4819      	ldr	r0, [pc, #100]	; (8007690 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800762a:	f7ff fe9f 	bl	800736c <LL_ADC_IsEnabled>
 800762e:	4603      	mov	r3, r0
 8007630:	4323      	orrs	r3, r4
 8007632:	2b00      	cmp	r3, #0
 8007634:	bf0c      	ite	eq
 8007636:	2301      	moveq	r3, #1
 8007638:	2300      	movne	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	e008      	b.n	8007650 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800763e:	4817      	ldr	r0, [pc, #92]	; (800769c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007640:	f7ff fe94 	bl	800736c <LL_ADC_IsEnabled>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf0c      	ite	eq
 800764a:	2301      	moveq	r3, #1
 800764c:	2300      	movne	r3, #0
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d010      	beq.n	8007676 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	4b11      	ldr	r3, [pc, #68]	; (80076a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800765a:	4013      	ands	r3, r2
 800765c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800765e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007660:	e009      	b.n	8007676 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007674:	e000      	b.n	8007678 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007676:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007680:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007684:	4618      	mov	r0, r3
 8007686:	377c      	adds	r7, #124	; 0x7c
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}
 800768c:	40022000 	.word	0x40022000
 8007690:	40022100 	.word	0x40022100
 8007694:	40022300 	.word	0x40022300
 8007698:	58026300 	.word	0x58026300
 800769c:	58026000 	.word	0x58026000
 80076a0:	fffff0e0 	.word	0xfffff0e0

080076a4 <__NVIC_SetPriorityGrouping>:
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076b4:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <__NVIC_SetPriorityGrouping+0x40>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80076c0:	4013      	ands	r3, r2
 80076c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <__NVIC_SetPriorityGrouping+0x44>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076d2:	4a04      	ldr	r2, [pc, #16]	; (80076e4 <__NVIC_SetPriorityGrouping+0x40>)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	60d3      	str	r3, [r2, #12]
}
 80076d8:	bf00      	nop
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	e000ed00 	.word	0xe000ed00
 80076e8:	05fa0000 	.word	0x05fa0000

080076ec <__NVIC_GetPriorityGrouping>:
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076f0:	4b04      	ldr	r3, [pc, #16]	; (8007704 <__NVIC_GetPriorityGrouping+0x18>)
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	f003 0307 	and.w	r3, r3, #7
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	e000ed00 	.word	0xe000ed00

08007708 <__NVIC_EnableIRQ>:
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007716:	2b00      	cmp	r3, #0
 8007718:	db0b      	blt.n	8007732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	f003 021f 	and.w	r2, r3, #31
 8007720:	4907      	ldr	r1, [pc, #28]	; (8007740 <__NVIC_EnableIRQ+0x38>)
 8007722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007726:	095b      	lsrs	r3, r3, #5
 8007728:	2001      	movs	r0, #1
 800772a:	fa00 f202 	lsl.w	r2, r0, r2
 800772e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	e000e100 	.word	0xe000e100

08007744 <__NVIC_SetPriority>:
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	6039      	str	r1, [r7, #0]
 800774e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007754:	2b00      	cmp	r3, #0
 8007756:	db0a      	blt.n	800776e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	b2da      	uxtb	r2, r3
 800775c:	490c      	ldr	r1, [pc, #48]	; (8007790 <__NVIC_SetPriority+0x4c>)
 800775e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007762:	0112      	lsls	r2, r2, #4
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	440b      	add	r3, r1
 8007768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800776c:	e00a      	b.n	8007784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	4908      	ldr	r1, [pc, #32]	; (8007794 <__NVIC_SetPriority+0x50>)
 8007774:	88fb      	ldrh	r3, [r7, #6]
 8007776:	f003 030f 	and.w	r3, r3, #15
 800777a:	3b04      	subs	r3, #4
 800777c:	0112      	lsls	r2, r2, #4
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	440b      	add	r3, r1
 8007782:	761a      	strb	r2, [r3, #24]
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	e000e100 	.word	0xe000e100
 8007794:	e000ed00 	.word	0xe000ed00

08007798 <NVIC_EncodePriority>:
{
 8007798:	b480      	push	{r7}
 800779a:	b089      	sub	sp, #36	; 0x24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f1c3 0307 	rsb	r3, r3, #7
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	bf28      	it	cs
 80077b6:	2304      	movcs	r3, #4
 80077b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	3304      	adds	r3, #4
 80077be:	2b06      	cmp	r3, #6
 80077c0:	d902      	bls.n	80077c8 <NVIC_EncodePriority+0x30>
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	3b03      	subs	r3, #3
 80077c6:	e000      	b.n	80077ca <NVIC_EncodePriority+0x32>
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	fa02 f303 	lsl.w	r3, r2, r3
 80077d6:	43da      	mvns	r2, r3
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	401a      	ands	r2, r3
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ea:	43d9      	mvns	r1, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077f0:	4313      	orrs	r3, r2
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3724      	adds	r7, #36	; 0x24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff ff4c 	bl	80076a4 <__NVIC_SetPriorityGrouping>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007822:	f7ff ff63 	bl	80076ec <__NVIC_GetPriorityGrouping>
 8007826:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	6978      	ldr	r0, [r7, #20]
 800782e:	f7ff ffb3 	bl	8007798 <NVIC_EncodePriority>
 8007832:	4602      	mov	r2, r0
 8007834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff ff82 	bl	8007744 <__NVIC_SetPriority>
}
 8007840:	bf00      	nop
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff ff56 	bl	8007708 <__NVIC_EnableIRQ>
}
 800785c:	bf00      	nop
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e014      	b.n	80078a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	791b      	ldrb	r3, [r3, #4]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d105      	bne.n	800788c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7f9 f9ac 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e046      	b.n	800794a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	795b      	ldrb	r3, [r3, #5]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_DAC_Start+0x20>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e040      	b.n	800794a <HAL_DAC_Start+0xa2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6819      	ldr	r1, [r3, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2201      	movs	r2, #1
 80078e2:	409a      	lsls	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10f      	bne.n	8007912 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d11d      	bne.n	800793c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	605a      	str	r2, [r3, #4]
 8007910:	e014      	b.n	800793c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	f003 0310 	and.w	r3, r3, #16
 8007922:	2102      	movs	r1, #2
 8007924:	fa01 f303 	lsl.w	r3, r1, r3
 8007928:	429a      	cmp	r2, r3
 800792a:	d107      	bne.n	800793c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0202 	orr.w	r2, r2, #2
 800793a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e0a2      	b.n	8007ab6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	795b      	ldrb	r3, [r3, #5]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_DAC_Start_DMA+0x24>
 8007978:	2302      	movs	r3, #2
 800797a:	e09c      	b.n	8007ab6 <HAL_DAC_Start_DMA+0x15e>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2202      	movs	r2, #2
 8007986:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d129      	bne.n	80079e2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	4a4b      	ldr	r2, [pc, #300]	; (8007ac0 <HAL_DAC_Start_DMA+0x168>)
 8007994:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	4a4a      	ldr	r2, [pc, #296]	; (8007ac4 <HAL_DAC_Start_DMA+0x16c>)
 800799c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	4a49      	ldr	r2, [pc, #292]	; (8007ac8 <HAL_DAC_Start_DMA+0x170>)
 80079a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_DAC_Start_DMA+0x6c>
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d005      	beq.n	80079ce <HAL_DAC_Start_DMA+0x76>
 80079c2:	e009      	b.n	80079d8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	613b      	str	r3, [r7, #16]
        break;
 80079cc:	e033      	b.n	8007a36 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	330c      	adds	r3, #12
 80079d4:	613b      	str	r3, [r7, #16]
        break;
 80079d6:	e02e      	b.n	8007a36 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3310      	adds	r3, #16
 80079de:	613b      	str	r3, [r7, #16]
        break;
 80079e0:	e029      	b.n	8007a36 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	4a39      	ldr	r2, [pc, #228]	; (8007acc <HAL_DAC_Start_DMA+0x174>)
 80079e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	4a38      	ldr	r2, [pc, #224]	; (8007ad0 <HAL_DAC_Start_DMA+0x178>)
 80079f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	4a37      	ldr	r2, [pc, #220]	; (8007ad4 <HAL_DAC_Start_DMA+0x17c>)
 80079f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a08:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <HAL_DAC_Start_DMA+0xc0>
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d005      	beq.n	8007a22 <HAL_DAC_Start_DMA+0xca>
 8007a16:	e009      	b.n	8007a2c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3314      	adds	r3, #20
 8007a1e:	613b      	str	r3, [r7, #16]
        break;
 8007a20:	e009      	b.n	8007a36 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3318      	adds	r3, #24
 8007a28:	613b      	str	r3, [r7, #16]
        break;
 8007a2a:	e004      	b.n	8007a36 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	331c      	adds	r3, #28
 8007a32:	613b      	str	r3, [r7, #16]
        break;
 8007a34:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d111      	bne.n	8007a60 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6898      	ldr	r0, [r3, #8]
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	f000 fe67 	bl	8008728 <HAL_DMA_Start_IT>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75fb      	strb	r3, [r7, #23]
 8007a5e:	e010      	b.n	8007a82 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007a6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	68d8      	ldr	r0, [r3, #12]
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	f000 fe55 	bl	8008728 <HAL_DMA_Start_IT>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10c      	bne.n	8007aa8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 0310 	and.w	r3, r3, #16
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	409a      	lsls	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	e005      	b.n	8007ab4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	f043 0204 	orr.w	r2, r3, #4
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	08007f49 	.word	0x08007f49
 8007ac4:	08007f6b 	.word	0x08007f6b
 8007ac8:	08007f87 	.word	0x08007f87
 8007acc:	08008005 	.word	0x08008005
 8007ad0:	08008027 	.word	0x08008027
 8007ad4:	08008043 	.word	0x08008043

08007ad8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e03e      	b.n	8007b6a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6819      	ldr	r1, [r3, #0]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	f003 0310 	and.w	r3, r3, #16
 8007af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	43da      	mvns	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	400a      	ands	r2, r1
 8007b08:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6819      	ldr	r1, [r3, #0]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2201      	movs	r2, #1
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	43da      	mvns	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	400a      	ands	r2, r1
 8007b24:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10d      	bne.n	8007b48 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f001 f863 	bl	8008bfc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	e00c      	b.n	8007b62 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 f855 	bl	8008bfc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007b60:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b88:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01d      	beq.n	8007bd0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d018      	beq.n	8007bd0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f043 0201 	orr.w	r2, r3, #1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bc8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f86f 	bl	8007cae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01d      	beq.n	8007c16 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d018      	beq.n	8007c16 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2204      	movs	r2, #4
 8007be8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f043 0202 	orr.w	r2, r3, #2
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007bfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007c0e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f9ed 	bl	8007ff0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b087      	sub	sp, #28
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]
 8007c2a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e015      	b.n	8007c66 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e004      	b.n	8007c5c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4413      	add	r3, r2
 8007c58:	3314      	adds	r3, #20
 8007c5a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <HAL_DAC_ConfigChannel+0x1e>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e12a      	b.n	8007f3c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	795b      	ldrb	r3, [r3, #5]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_DAC_ConfigChannel+0x2e>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e124      	b.n	8007f3c <HAL_DAC_ConfigChannel+0x278>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	d17a      	bne.n	8007dfc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007d06:	f7fe f88b 	bl	8005e20 <HAL_GetTick>
 8007d0a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d13d      	bne.n	8007d8e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007d12:	e018      	b.n	8007d46 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007d14:	f7fe f884 	bl	8005e20 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d911      	bls.n	8007d46 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d28:	4b86      	ldr	r3, [pc, #536]	; (8007f44 <HAL_DAC_ConfigChannel+0x280>)
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f043 0208 	orr.w	r2, r3, #8
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2203      	movs	r2, #3
 8007d40:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e0fa      	b.n	8007f3c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4c:	4b7d      	ldr	r3, [pc, #500]	; (8007f44 <HAL_DAC_ConfigChannel+0x280>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1df      	bne.n	8007d14 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	6992      	ldr	r2, [r2, #24]
 8007d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8007d5e:	e020      	b.n	8007da2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007d60:	f7fe f85e 	bl	8005e20 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d90f      	bls.n	8007d8e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da0a      	bge.n	8007d8e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f043 0208 	orr.w	r2, r3, #8
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2203      	movs	r2, #3
 8007d88:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e0d6      	b.n	8007f3c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	dbe3      	blt.n	8007d60 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	6992      	ldr	r2, [r2, #24]
 8007da0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f003 0310 	and.w	r3, r3, #16
 8007dae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007db2:	fa01 f303 	lsl.w	r3, r1, r3
 8007db6:	43db      	mvns	r3, r3
 8007db8:	ea02 0103 	and.w	r1, r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f003 0310 	and.w	r3, r3, #16
 8007dc6:	409a      	lsls	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	21ff      	movs	r1, #255	; 0xff
 8007dde:	fa01 f303 	lsl.w	r3, r1, r3
 8007de2:	43db      	mvns	r3, r3
 8007de4:	ea02 0103 	and.w	r1, r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	6a1a      	ldr	r2, [r3, #32]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	409a      	lsls	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d11d      	bne.n	8007e40 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	221f      	movs	r2, #31
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f003 0310 	and.w	r3, r3, #16
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f003 0310 	and.w	r3, r3, #16
 8007e4e:	2207      	movs	r2, #7
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	43db      	mvns	r3, r3
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d102      	bne.n	8007e6a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
 8007e68:	e00f      	b.n	8007e8a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d102      	bne.n	8007e78 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007e72:	2301      	movs	r3, #1
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
 8007e76:	e008      	b.n	8007e8a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007e80:	2301      	movs	r3, #1
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
 8007e84:	e001      	b.n	8007e8a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6819      	ldr	r1, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	43da      	mvns	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	400a      	ands	r2, r1
 8007ed0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee8:	43db      	mvns	r3, r3
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	4013      	ands	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6819      	ldr	r1, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f003 0310 	and.w	r3, r3, #16
 8007f1c:	22c0      	movs	r2, #192	; 0xc0
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	43da      	mvns	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	400a      	ands	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3728      	adds	r7, #40	; 0x28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20008000 	.word	0x20008000

08007f48 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fe8b 	bl	8007c72 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	711a      	strb	r2, [r3, #4]
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7ff fe84 	bl	8007c86 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	f043 0204 	orr.w	r2, r3, #4
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f7ff fe7a 	bl	8007c9a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	711a      	strb	r2, [r3, #4]
}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff ffce 	bl	8007fb4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	711a      	strb	r2, [r3, #4]
}
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008032:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f7ff ffc7 	bl	8007fc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f043 0204 	orr.w	r2, r3, #4
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f7ff ffbd 	bl	8007fdc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	711a      	strb	r2, [r3, #4]
}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008078:	f7fd fed2 	bl	8005e20 <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e316      	b.n	80086b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a66      	ldr	r2, [pc, #408]	; (8008228 <HAL_DMA_Init+0x1b8>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d04a      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a65      	ldr	r2, [pc, #404]	; (800822c <HAL_DMA_Init+0x1bc>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d045      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a63      	ldr	r2, [pc, #396]	; (8008230 <HAL_DMA_Init+0x1c0>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d040      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a62      	ldr	r2, [pc, #392]	; (8008234 <HAL_DMA_Init+0x1c4>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d03b      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a60      	ldr	r2, [pc, #384]	; (8008238 <HAL_DMA_Init+0x1c8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d036      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a5f      	ldr	r2, [pc, #380]	; (800823c <HAL_DMA_Init+0x1cc>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d031      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a5d      	ldr	r2, [pc, #372]	; (8008240 <HAL_DMA_Init+0x1d0>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d02c      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a5c      	ldr	r2, [pc, #368]	; (8008244 <HAL_DMA_Init+0x1d4>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d027      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a5a      	ldr	r2, [pc, #360]	; (8008248 <HAL_DMA_Init+0x1d8>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d022      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a59      	ldr	r2, [pc, #356]	; (800824c <HAL_DMA_Init+0x1dc>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d01d      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a57      	ldr	r2, [pc, #348]	; (8008250 <HAL_DMA_Init+0x1e0>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d018      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a56      	ldr	r2, [pc, #344]	; (8008254 <HAL_DMA_Init+0x1e4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d013      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a54      	ldr	r2, [pc, #336]	; (8008258 <HAL_DMA_Init+0x1e8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d00e      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a53      	ldr	r2, [pc, #332]	; (800825c <HAL_DMA_Init+0x1ec>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d009      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a51      	ldr	r2, [pc, #324]	; (8008260 <HAL_DMA_Init+0x1f0>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d004      	beq.n	8008128 <HAL_DMA_Init+0xb8>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a50      	ldr	r2, [pc, #320]	; (8008264 <HAL_DMA_Init+0x1f4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d101      	bne.n	800812c <HAL_DMA_Init+0xbc>
 8008128:	2301      	movs	r3, #1
 800812a:	e000      	b.n	800812e <HAL_DMA_Init+0xbe>
 800812c:	2300      	movs	r3, #0
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 813b 	beq.w	80083aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a37      	ldr	r2, [pc, #220]	; (8008228 <HAL_DMA_Init+0x1b8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d04a      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a36      	ldr	r2, [pc, #216]	; (800822c <HAL_DMA_Init+0x1bc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d045      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a34      	ldr	r2, [pc, #208]	; (8008230 <HAL_DMA_Init+0x1c0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d040      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a33      	ldr	r2, [pc, #204]	; (8008234 <HAL_DMA_Init+0x1c4>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d03b      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a31      	ldr	r2, [pc, #196]	; (8008238 <HAL_DMA_Init+0x1c8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d036      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a30      	ldr	r2, [pc, #192]	; (800823c <HAL_DMA_Init+0x1cc>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d031      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a2e      	ldr	r2, [pc, #184]	; (8008240 <HAL_DMA_Init+0x1d0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d02c      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <HAL_DMA_Init+0x1d4>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d027      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a2b      	ldr	r2, [pc, #172]	; (8008248 <HAL_DMA_Init+0x1d8>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d022      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a2a      	ldr	r2, [pc, #168]	; (800824c <HAL_DMA_Init+0x1dc>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d01d      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a28      	ldr	r2, [pc, #160]	; (8008250 <HAL_DMA_Init+0x1e0>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d018      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a27      	ldr	r2, [pc, #156]	; (8008254 <HAL_DMA_Init+0x1e4>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d013      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a25      	ldr	r2, [pc, #148]	; (8008258 <HAL_DMA_Init+0x1e8>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00e      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a24      	ldr	r2, [pc, #144]	; (800825c <HAL_DMA_Init+0x1ec>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d009      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a22      	ldr	r2, [pc, #136]	; (8008260 <HAL_DMA_Init+0x1f0>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d004      	beq.n	80081e4 <HAL_DMA_Init+0x174>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a21      	ldr	r2, [pc, #132]	; (8008264 <HAL_DMA_Init+0x1f4>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d108      	bne.n	80081f6 <HAL_DMA_Init+0x186>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0201 	bic.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e007      	b.n	8008206 <HAL_DMA_Init+0x196>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0201 	bic.w	r2, r2, #1
 8008204:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008206:	e02f      	b.n	8008268 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008208:	f7fd fe0a 	bl	8005e20 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b05      	cmp	r3, #5
 8008214:	d928      	bls.n	8008268 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2203      	movs	r2, #3
 8008220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e246      	b.n	80086b6 <HAL_DMA_Init+0x646>
 8008228:	40020010 	.word	0x40020010
 800822c:	40020028 	.word	0x40020028
 8008230:	40020040 	.word	0x40020040
 8008234:	40020058 	.word	0x40020058
 8008238:	40020070 	.word	0x40020070
 800823c:	40020088 	.word	0x40020088
 8008240:	400200a0 	.word	0x400200a0
 8008244:	400200b8 	.word	0x400200b8
 8008248:	40020410 	.word	0x40020410
 800824c:	40020428 	.word	0x40020428
 8008250:	40020440 	.word	0x40020440
 8008254:	40020458 	.word	0x40020458
 8008258:	40020470 	.word	0x40020470
 800825c:	40020488 	.word	0x40020488
 8008260:	400204a0 	.word	0x400204a0
 8008264:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1c8      	bne.n	8008208 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	4b83      	ldr	r3, [pc, #524]	; (8008490 <HAL_DMA_Init+0x420>)
 8008282:	4013      	ands	r3, r2
 8008284:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800828e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800829a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d107      	bne.n	80082cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c4:	4313      	orrs	r3, r2
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80082cc:	4b71      	ldr	r3, [pc, #452]	; (8008494 <HAL_DMA_Init+0x424>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	4b71      	ldr	r3, [pc, #452]	; (8008498 <HAL_DMA_Init+0x428>)
 80082d2:	4013      	ands	r3, r2
 80082d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d8:	d328      	bcc.n	800832c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2b28      	cmp	r3, #40	; 0x28
 80082e0:	d903      	bls.n	80082ea <HAL_DMA_Init+0x27a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b2e      	cmp	r3, #46	; 0x2e
 80082e8:	d917      	bls.n	800831a <HAL_DMA_Init+0x2aa>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b3e      	cmp	r3, #62	; 0x3e
 80082f0:	d903      	bls.n	80082fa <HAL_DMA_Init+0x28a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b42      	cmp	r3, #66	; 0x42
 80082f8:	d90f      	bls.n	800831a <HAL_DMA_Init+0x2aa>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2b46      	cmp	r3, #70	; 0x46
 8008300:	d903      	bls.n	800830a <HAL_DMA_Init+0x29a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	2b48      	cmp	r3, #72	; 0x48
 8008308:	d907      	bls.n	800831a <HAL_DMA_Init+0x2aa>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b4e      	cmp	r3, #78	; 0x4e
 8008310:	d905      	bls.n	800831e <HAL_DMA_Init+0x2ae>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b52      	cmp	r3, #82	; 0x52
 8008318:	d801      	bhi.n	800831e <HAL_DMA_Init+0x2ae>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <HAL_DMA_Init+0x2b0>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800832a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f023 0307 	bic.w	r3, r3, #7
 8008342:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	4313      	orrs	r3, r2
 800834c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b04      	cmp	r3, #4
 8008354:	d117      	bne.n	8008386 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00e      	beq.n	8008386 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f002 fb4d 	bl	800aa08 <DMA_CheckFifoParam>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d008      	beq.n	8008386 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2240      	movs	r2, #64	; 0x40
 8008378:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e197      	b.n	80086b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f002 fa88 	bl	800a8a4 <DMA_CalcBaseAndBitshift>
 8008394:	4603      	mov	r3, r0
 8008396:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	223f      	movs	r2, #63	; 0x3f
 80083a2:	409a      	lsls	r2, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	609a      	str	r2, [r3, #8]
 80083a8:	e0cd      	b.n	8008546 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a3b      	ldr	r2, [pc, #236]	; (800849c <HAL_DMA_Init+0x42c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d022      	beq.n	80083fa <HAL_DMA_Init+0x38a>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a39      	ldr	r2, [pc, #228]	; (80084a0 <HAL_DMA_Init+0x430>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d01d      	beq.n	80083fa <HAL_DMA_Init+0x38a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a38      	ldr	r2, [pc, #224]	; (80084a4 <HAL_DMA_Init+0x434>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d018      	beq.n	80083fa <HAL_DMA_Init+0x38a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a36      	ldr	r2, [pc, #216]	; (80084a8 <HAL_DMA_Init+0x438>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d013      	beq.n	80083fa <HAL_DMA_Init+0x38a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a35      	ldr	r2, [pc, #212]	; (80084ac <HAL_DMA_Init+0x43c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00e      	beq.n	80083fa <HAL_DMA_Init+0x38a>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a33      	ldr	r2, [pc, #204]	; (80084b0 <HAL_DMA_Init+0x440>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d009      	beq.n	80083fa <HAL_DMA_Init+0x38a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a32      	ldr	r2, [pc, #200]	; (80084b4 <HAL_DMA_Init+0x444>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d004      	beq.n	80083fa <HAL_DMA_Init+0x38a>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a30      	ldr	r2, [pc, #192]	; (80084b8 <HAL_DMA_Init+0x448>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d101      	bne.n	80083fe <HAL_DMA_Init+0x38e>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <HAL_DMA_Init+0x390>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8097 	beq.w	8008534 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a24      	ldr	r2, [pc, #144]	; (800849c <HAL_DMA_Init+0x42c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d021      	beq.n	8008454 <HAL_DMA_Init+0x3e4>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a22      	ldr	r2, [pc, #136]	; (80084a0 <HAL_DMA_Init+0x430>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01c      	beq.n	8008454 <HAL_DMA_Init+0x3e4>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a21      	ldr	r2, [pc, #132]	; (80084a4 <HAL_DMA_Init+0x434>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d017      	beq.n	8008454 <HAL_DMA_Init+0x3e4>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a1f      	ldr	r2, [pc, #124]	; (80084a8 <HAL_DMA_Init+0x438>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d012      	beq.n	8008454 <HAL_DMA_Init+0x3e4>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a1e      	ldr	r2, [pc, #120]	; (80084ac <HAL_DMA_Init+0x43c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00d      	beq.n	8008454 <HAL_DMA_Init+0x3e4>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a1c      	ldr	r2, [pc, #112]	; (80084b0 <HAL_DMA_Init+0x440>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d008      	beq.n	8008454 <HAL_DMA_Init+0x3e4>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a1b      	ldr	r2, [pc, #108]	; (80084b4 <HAL_DMA_Init+0x444>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d003      	beq.n	8008454 <HAL_DMA_Init+0x3e4>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a19      	ldr	r2, [pc, #100]	; (80084b8 <HAL_DMA_Init+0x448>)
 8008452:	4293      	cmp	r3, r2
 8008454:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2202      	movs	r2, #2
 800845a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4b12      	ldr	r3, [pc, #72]	; (80084bc <HAL_DMA_Init+0x44c>)
 8008472:	4013      	ands	r3, r2
 8008474:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	2b40      	cmp	r3, #64	; 0x40
 800847c:	d020      	beq.n	80084c0 <HAL_DMA_Init+0x450>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d102      	bne.n	800848c <HAL_DMA_Init+0x41c>
 8008486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800848a:	e01a      	b.n	80084c2 <HAL_DMA_Init+0x452>
 800848c:	2300      	movs	r3, #0
 800848e:	e018      	b.n	80084c2 <HAL_DMA_Init+0x452>
 8008490:	fe10803f 	.word	0xfe10803f
 8008494:	5c001000 	.word	0x5c001000
 8008498:	ffff0000 	.word	0xffff0000
 800849c:	58025408 	.word	0x58025408
 80084a0:	5802541c 	.word	0x5802541c
 80084a4:	58025430 	.word	0x58025430
 80084a8:	58025444 	.word	0x58025444
 80084ac:	58025458 	.word	0x58025458
 80084b0:	5802546c 	.word	0x5802546c
 80084b4:	58025480 	.word	0x58025480
 80084b8:	58025494 	.word	0x58025494
 80084bc:	fffe000f 	.word	0xfffe000f
 80084c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	68d2      	ldr	r2, [r2, #12]
 80084c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80084c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80084d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80084d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80084e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80084e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80084f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	4b6e      	ldr	r3, [pc, #440]	; (80086c0 <HAL_DMA_Init+0x650>)
 8008508:	4413      	add	r3, r2
 800850a:	4a6e      	ldr	r2, [pc, #440]	; (80086c4 <HAL_DMA_Init+0x654>)
 800850c:	fba2 2303 	umull	r2, r3, r2, r3
 8008510:	091b      	lsrs	r3, r3, #4
 8008512:	009a      	lsls	r2, r3, #2
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f002 f9c3 	bl	800a8a4 <DMA_CalcBaseAndBitshift>
 800851e:	4603      	mov	r3, r0
 8008520:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	2201      	movs	r2, #1
 800852c:	409a      	lsls	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	605a      	str	r2, [r3, #4]
 8008532:	e008      	b.n	8008546 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2240      	movs	r2, #64	; 0x40
 8008538:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2203      	movs	r2, #3
 800853e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e0b7      	b.n	80086b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a5f      	ldr	r2, [pc, #380]	; (80086c8 <HAL_DMA_Init+0x658>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d072      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a5d      	ldr	r2, [pc, #372]	; (80086cc <HAL_DMA_Init+0x65c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d06d      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a5c      	ldr	r2, [pc, #368]	; (80086d0 <HAL_DMA_Init+0x660>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d068      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a5a      	ldr	r2, [pc, #360]	; (80086d4 <HAL_DMA_Init+0x664>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d063      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a59      	ldr	r2, [pc, #356]	; (80086d8 <HAL_DMA_Init+0x668>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d05e      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a57      	ldr	r2, [pc, #348]	; (80086dc <HAL_DMA_Init+0x66c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d059      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a56      	ldr	r2, [pc, #344]	; (80086e0 <HAL_DMA_Init+0x670>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d054      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a54      	ldr	r2, [pc, #336]	; (80086e4 <HAL_DMA_Init+0x674>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d04f      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a53      	ldr	r2, [pc, #332]	; (80086e8 <HAL_DMA_Init+0x678>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d04a      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a51      	ldr	r2, [pc, #324]	; (80086ec <HAL_DMA_Init+0x67c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d045      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a50      	ldr	r2, [pc, #320]	; (80086f0 <HAL_DMA_Init+0x680>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d040      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a4e      	ldr	r2, [pc, #312]	; (80086f4 <HAL_DMA_Init+0x684>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d03b      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a4d      	ldr	r2, [pc, #308]	; (80086f8 <HAL_DMA_Init+0x688>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d036      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a4b      	ldr	r2, [pc, #300]	; (80086fc <HAL_DMA_Init+0x68c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d031      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a4a      	ldr	r2, [pc, #296]	; (8008700 <HAL_DMA_Init+0x690>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d02c      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a48      	ldr	r2, [pc, #288]	; (8008704 <HAL_DMA_Init+0x694>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d027      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a47      	ldr	r2, [pc, #284]	; (8008708 <HAL_DMA_Init+0x698>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d022      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a45      	ldr	r2, [pc, #276]	; (800870c <HAL_DMA_Init+0x69c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d01d      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a44      	ldr	r2, [pc, #272]	; (8008710 <HAL_DMA_Init+0x6a0>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d018      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a42      	ldr	r2, [pc, #264]	; (8008714 <HAL_DMA_Init+0x6a4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d013      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a41      	ldr	r2, [pc, #260]	; (8008718 <HAL_DMA_Init+0x6a8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00e      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a3f      	ldr	r2, [pc, #252]	; (800871c <HAL_DMA_Init+0x6ac>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a3e      	ldr	r2, [pc, #248]	; (8008720 <HAL_DMA_Init+0x6b0>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d004      	beq.n	8008636 <HAL_DMA_Init+0x5c6>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a3c      	ldr	r2, [pc, #240]	; (8008724 <HAL_DMA_Init+0x6b4>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d101      	bne.n	800863a <HAL_DMA_Init+0x5ca>
 8008636:	2301      	movs	r3, #1
 8008638:	e000      	b.n	800863c <HAL_DMA_Init+0x5cc>
 800863a:	2300      	movs	r3, #0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d032      	beq.n	80086a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f002 fa5d 	bl	800ab00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b80      	cmp	r3, #128	; 0x80
 800864c:	d102      	bne.n	8008654 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865c:	b2d2      	uxtb	r2, r2
 800865e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008668:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d010      	beq.n	8008694 <HAL_DMA_Init+0x624>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	2b08      	cmp	r3, #8
 8008678:	d80c      	bhi.n	8008694 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f002 fada 	bl	800ac34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008690:	605a      	str	r2, [r3, #4]
 8008692:	e008      	b.n	80086a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	a7fdabf8 	.word	0xa7fdabf8
 80086c4:	cccccccd 	.word	0xcccccccd
 80086c8:	40020010 	.word	0x40020010
 80086cc:	40020028 	.word	0x40020028
 80086d0:	40020040 	.word	0x40020040
 80086d4:	40020058 	.word	0x40020058
 80086d8:	40020070 	.word	0x40020070
 80086dc:	40020088 	.word	0x40020088
 80086e0:	400200a0 	.word	0x400200a0
 80086e4:	400200b8 	.word	0x400200b8
 80086e8:	40020410 	.word	0x40020410
 80086ec:	40020428 	.word	0x40020428
 80086f0:	40020440 	.word	0x40020440
 80086f4:	40020458 	.word	0x40020458
 80086f8:	40020470 	.word	0x40020470
 80086fc:	40020488 	.word	0x40020488
 8008700:	400204a0 	.word	0x400204a0
 8008704:	400204b8 	.word	0x400204b8
 8008708:	58025408 	.word	0x58025408
 800870c:	5802541c 	.word	0x5802541c
 8008710:	58025430 	.word	0x58025430
 8008714:	58025444 	.word	0x58025444
 8008718:	58025458 	.word	0x58025458
 800871c:	5802546c 	.word	0x5802546c
 8008720:	58025480 	.word	0x58025480
 8008724:	58025494 	.word	0x58025494

08008728 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e226      	b.n	8008b92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <HAL_DMA_Start_IT+0x2a>
 800874e:	2302      	movs	r3, #2
 8008750:	e21f      	b.n	8008b92 <HAL_DMA_Start_IT+0x46a>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b01      	cmp	r3, #1
 8008764:	f040 820a 	bne.w	8008b7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a68      	ldr	r2, [pc, #416]	; (800891c <HAL_DMA_Start_IT+0x1f4>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d04a      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a66      	ldr	r2, [pc, #408]	; (8008920 <HAL_DMA_Start_IT+0x1f8>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d045      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a65      	ldr	r2, [pc, #404]	; (8008924 <HAL_DMA_Start_IT+0x1fc>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d040      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a63      	ldr	r2, [pc, #396]	; (8008928 <HAL_DMA_Start_IT+0x200>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d03b      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a62      	ldr	r2, [pc, #392]	; (800892c <HAL_DMA_Start_IT+0x204>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d036      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a60      	ldr	r2, [pc, #384]	; (8008930 <HAL_DMA_Start_IT+0x208>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d031      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a5f      	ldr	r2, [pc, #380]	; (8008934 <HAL_DMA_Start_IT+0x20c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d02c      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a5d      	ldr	r2, [pc, #372]	; (8008938 <HAL_DMA_Start_IT+0x210>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d027      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a5c      	ldr	r2, [pc, #368]	; (800893c <HAL_DMA_Start_IT+0x214>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d022      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a5a      	ldr	r2, [pc, #360]	; (8008940 <HAL_DMA_Start_IT+0x218>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d01d      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a59      	ldr	r2, [pc, #356]	; (8008944 <HAL_DMA_Start_IT+0x21c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d018      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a57      	ldr	r2, [pc, #348]	; (8008948 <HAL_DMA_Start_IT+0x220>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d013      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a56      	ldr	r2, [pc, #344]	; (800894c <HAL_DMA_Start_IT+0x224>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00e      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a54      	ldr	r2, [pc, #336]	; (8008950 <HAL_DMA_Start_IT+0x228>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d009      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a53      	ldr	r2, [pc, #332]	; (8008954 <HAL_DMA_Start_IT+0x22c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d004      	beq.n	8008816 <HAL_DMA_Start_IT+0xee>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a51      	ldr	r2, [pc, #324]	; (8008958 <HAL_DMA_Start_IT+0x230>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d108      	bne.n	8008828 <HAL_DMA_Start_IT+0x100>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0201 	bic.w	r2, r2, #1
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	e007      	b.n	8008838 <HAL_DMA_Start_IT+0x110>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0201 	bic.w	r2, r2, #1
 8008836:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f001 fe84 	bl	800a54c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a34      	ldr	r2, [pc, #208]	; (800891c <HAL_DMA_Start_IT+0x1f4>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d04a      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a33      	ldr	r2, [pc, #204]	; (8008920 <HAL_DMA_Start_IT+0x1f8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d045      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a31      	ldr	r2, [pc, #196]	; (8008924 <HAL_DMA_Start_IT+0x1fc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d040      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a30      	ldr	r2, [pc, #192]	; (8008928 <HAL_DMA_Start_IT+0x200>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d03b      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a2e      	ldr	r2, [pc, #184]	; (800892c <HAL_DMA_Start_IT+0x204>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d036      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a2d      	ldr	r2, [pc, #180]	; (8008930 <HAL_DMA_Start_IT+0x208>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d031      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a2b      	ldr	r2, [pc, #172]	; (8008934 <HAL_DMA_Start_IT+0x20c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d02c      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a2a      	ldr	r2, [pc, #168]	; (8008938 <HAL_DMA_Start_IT+0x210>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d027      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a28      	ldr	r2, [pc, #160]	; (800893c <HAL_DMA_Start_IT+0x214>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d022      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a27      	ldr	r2, [pc, #156]	; (8008940 <HAL_DMA_Start_IT+0x218>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d01d      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a25      	ldr	r2, [pc, #148]	; (8008944 <HAL_DMA_Start_IT+0x21c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d018      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a24      	ldr	r2, [pc, #144]	; (8008948 <HAL_DMA_Start_IT+0x220>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d013      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a22      	ldr	r2, [pc, #136]	; (800894c <HAL_DMA_Start_IT+0x224>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00e      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a21      	ldr	r2, [pc, #132]	; (8008950 <HAL_DMA_Start_IT+0x228>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d009      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <HAL_DMA_Start_IT+0x22c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d004      	beq.n	80088e4 <HAL_DMA_Start_IT+0x1bc>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a1e      	ldr	r2, [pc, #120]	; (8008958 <HAL_DMA_Start_IT+0x230>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d101      	bne.n	80088e8 <HAL_DMA_Start_IT+0x1c0>
 80088e4:	2301      	movs	r3, #1
 80088e6:	e000      	b.n	80088ea <HAL_DMA_Start_IT+0x1c2>
 80088e8:	2300      	movs	r3, #0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d036      	beq.n	800895c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f023 021e 	bic.w	r2, r3, #30
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f042 0216 	orr.w	r2, r2, #22
 8008900:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	2b00      	cmp	r3, #0
 8008908:	d03e      	beq.n	8008988 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0208 	orr.w	r2, r2, #8
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	e035      	b.n	8008988 <HAL_DMA_Start_IT+0x260>
 800891c:	40020010 	.word	0x40020010
 8008920:	40020028 	.word	0x40020028
 8008924:	40020040 	.word	0x40020040
 8008928:	40020058 	.word	0x40020058
 800892c:	40020070 	.word	0x40020070
 8008930:	40020088 	.word	0x40020088
 8008934:	400200a0 	.word	0x400200a0
 8008938:	400200b8 	.word	0x400200b8
 800893c:	40020410 	.word	0x40020410
 8008940:	40020428 	.word	0x40020428
 8008944:	40020440 	.word	0x40020440
 8008948:	40020458 	.word	0x40020458
 800894c:	40020470 	.word	0x40020470
 8008950:	40020488 	.word	0x40020488
 8008954:	400204a0 	.word	0x400204a0
 8008958:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f023 020e 	bic.w	r2, r3, #14
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 020a 	orr.w	r2, r2, #10
 800896e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 0204 	orr.w	r2, r2, #4
 8008986:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a83      	ldr	r2, [pc, #524]	; (8008b9c <HAL_DMA_Start_IT+0x474>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d072      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a82      	ldr	r2, [pc, #520]	; (8008ba0 <HAL_DMA_Start_IT+0x478>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d06d      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a80      	ldr	r2, [pc, #512]	; (8008ba4 <HAL_DMA_Start_IT+0x47c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d068      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a7f      	ldr	r2, [pc, #508]	; (8008ba8 <HAL_DMA_Start_IT+0x480>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d063      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a7d      	ldr	r2, [pc, #500]	; (8008bac <HAL_DMA_Start_IT+0x484>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d05e      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a7c      	ldr	r2, [pc, #496]	; (8008bb0 <HAL_DMA_Start_IT+0x488>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d059      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a7a      	ldr	r2, [pc, #488]	; (8008bb4 <HAL_DMA_Start_IT+0x48c>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d054      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a79      	ldr	r2, [pc, #484]	; (8008bb8 <HAL_DMA_Start_IT+0x490>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d04f      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a77      	ldr	r2, [pc, #476]	; (8008bbc <HAL_DMA_Start_IT+0x494>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d04a      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a76      	ldr	r2, [pc, #472]	; (8008bc0 <HAL_DMA_Start_IT+0x498>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d045      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a74      	ldr	r2, [pc, #464]	; (8008bc4 <HAL_DMA_Start_IT+0x49c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d040      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a73      	ldr	r2, [pc, #460]	; (8008bc8 <HAL_DMA_Start_IT+0x4a0>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d03b      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a71      	ldr	r2, [pc, #452]	; (8008bcc <HAL_DMA_Start_IT+0x4a4>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d036      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a70      	ldr	r2, [pc, #448]	; (8008bd0 <HAL_DMA_Start_IT+0x4a8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d031      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a6e      	ldr	r2, [pc, #440]	; (8008bd4 <HAL_DMA_Start_IT+0x4ac>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d02c      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a6d      	ldr	r2, [pc, #436]	; (8008bd8 <HAL_DMA_Start_IT+0x4b0>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d027      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a6b      	ldr	r2, [pc, #428]	; (8008bdc <HAL_DMA_Start_IT+0x4b4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d022      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a6a      	ldr	r2, [pc, #424]	; (8008be0 <HAL_DMA_Start_IT+0x4b8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d01d      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a68      	ldr	r2, [pc, #416]	; (8008be4 <HAL_DMA_Start_IT+0x4bc>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d018      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a67      	ldr	r2, [pc, #412]	; (8008be8 <HAL_DMA_Start_IT+0x4c0>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d013      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a65      	ldr	r2, [pc, #404]	; (8008bec <HAL_DMA_Start_IT+0x4c4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00e      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a64      	ldr	r2, [pc, #400]	; (8008bf0 <HAL_DMA_Start_IT+0x4c8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d009      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a62      	ldr	r2, [pc, #392]	; (8008bf4 <HAL_DMA_Start_IT+0x4cc>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d004      	beq.n	8008a78 <HAL_DMA_Start_IT+0x350>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a61      	ldr	r2, [pc, #388]	; (8008bf8 <HAL_DMA_Start_IT+0x4d0>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d101      	bne.n	8008a7c <HAL_DMA_Start_IT+0x354>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e000      	b.n	8008a7e <HAL_DMA_Start_IT+0x356>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d01a      	beq.n	8008ab8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d007      	beq.n	8008ab8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ab6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a37      	ldr	r2, [pc, #220]	; (8008b9c <HAL_DMA_Start_IT+0x474>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d04a      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a36      	ldr	r2, [pc, #216]	; (8008ba0 <HAL_DMA_Start_IT+0x478>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d045      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a34      	ldr	r2, [pc, #208]	; (8008ba4 <HAL_DMA_Start_IT+0x47c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d040      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a33      	ldr	r2, [pc, #204]	; (8008ba8 <HAL_DMA_Start_IT+0x480>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d03b      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a31      	ldr	r2, [pc, #196]	; (8008bac <HAL_DMA_Start_IT+0x484>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d036      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a30      	ldr	r2, [pc, #192]	; (8008bb0 <HAL_DMA_Start_IT+0x488>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d031      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a2e      	ldr	r2, [pc, #184]	; (8008bb4 <HAL_DMA_Start_IT+0x48c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d02c      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a2d      	ldr	r2, [pc, #180]	; (8008bb8 <HAL_DMA_Start_IT+0x490>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d027      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a2b      	ldr	r2, [pc, #172]	; (8008bbc <HAL_DMA_Start_IT+0x494>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d022      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a2a      	ldr	r2, [pc, #168]	; (8008bc0 <HAL_DMA_Start_IT+0x498>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d01d      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a28      	ldr	r2, [pc, #160]	; (8008bc4 <HAL_DMA_Start_IT+0x49c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d018      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a27      	ldr	r2, [pc, #156]	; (8008bc8 <HAL_DMA_Start_IT+0x4a0>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d013      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a25      	ldr	r2, [pc, #148]	; (8008bcc <HAL_DMA_Start_IT+0x4a4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00e      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a24      	ldr	r2, [pc, #144]	; (8008bd0 <HAL_DMA_Start_IT+0x4a8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d009      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a22      	ldr	r2, [pc, #136]	; (8008bd4 <HAL_DMA_Start_IT+0x4ac>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d004      	beq.n	8008b58 <HAL_DMA_Start_IT+0x430>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a21      	ldr	r2, [pc, #132]	; (8008bd8 <HAL_DMA_Start_IT+0x4b0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d108      	bne.n	8008b6a <HAL_DMA_Start_IT+0x442>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	e012      	b.n	8008b90 <HAL_DMA_Start_IT+0x468>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0201 	orr.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	e009      	b.n	8008b90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	40020010 	.word	0x40020010
 8008ba0:	40020028 	.word	0x40020028
 8008ba4:	40020040 	.word	0x40020040
 8008ba8:	40020058 	.word	0x40020058
 8008bac:	40020070 	.word	0x40020070
 8008bb0:	40020088 	.word	0x40020088
 8008bb4:	400200a0 	.word	0x400200a0
 8008bb8:	400200b8 	.word	0x400200b8
 8008bbc:	40020410 	.word	0x40020410
 8008bc0:	40020428 	.word	0x40020428
 8008bc4:	40020440 	.word	0x40020440
 8008bc8:	40020458 	.word	0x40020458
 8008bcc:	40020470 	.word	0x40020470
 8008bd0:	40020488 	.word	0x40020488
 8008bd4:	400204a0 	.word	0x400204a0
 8008bd8:	400204b8 	.word	0x400204b8
 8008bdc:	58025408 	.word	0x58025408
 8008be0:	5802541c 	.word	0x5802541c
 8008be4:	58025430 	.word	0x58025430
 8008be8:	58025444 	.word	0x58025444
 8008bec:	58025458 	.word	0x58025458
 8008bf0:	5802546c 	.word	0x5802546c
 8008bf4:	58025480 	.word	0x58025480
 8008bf8:	58025494 	.word	0x58025494

08008bfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008c04:	f7fd f90c 	bl	8005e20 <HAL_GetTick>
 8008c08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e2dc      	b.n	80091ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d008      	beq.n	8008c32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2280      	movs	r2, #128	; 0x80
 8008c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e2cd      	b.n	80091ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a76      	ldr	r2, [pc, #472]	; (8008e10 <HAL_DMA_Abort+0x214>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d04a      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a74      	ldr	r2, [pc, #464]	; (8008e14 <HAL_DMA_Abort+0x218>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d045      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a73      	ldr	r2, [pc, #460]	; (8008e18 <HAL_DMA_Abort+0x21c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d040      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a71      	ldr	r2, [pc, #452]	; (8008e1c <HAL_DMA_Abort+0x220>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d03b      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a70      	ldr	r2, [pc, #448]	; (8008e20 <HAL_DMA_Abort+0x224>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d036      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a6e      	ldr	r2, [pc, #440]	; (8008e24 <HAL_DMA_Abort+0x228>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d031      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a6d      	ldr	r2, [pc, #436]	; (8008e28 <HAL_DMA_Abort+0x22c>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d02c      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a6b      	ldr	r2, [pc, #428]	; (8008e2c <HAL_DMA_Abort+0x230>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d027      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a6a      	ldr	r2, [pc, #424]	; (8008e30 <HAL_DMA_Abort+0x234>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d022      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a68      	ldr	r2, [pc, #416]	; (8008e34 <HAL_DMA_Abort+0x238>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01d      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a67      	ldr	r2, [pc, #412]	; (8008e38 <HAL_DMA_Abort+0x23c>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d018      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a65      	ldr	r2, [pc, #404]	; (8008e3c <HAL_DMA_Abort+0x240>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d013      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a64      	ldr	r2, [pc, #400]	; (8008e40 <HAL_DMA_Abort+0x244>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00e      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a62      	ldr	r2, [pc, #392]	; (8008e44 <HAL_DMA_Abort+0x248>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d009      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a61      	ldr	r2, [pc, #388]	; (8008e48 <HAL_DMA_Abort+0x24c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d004      	beq.n	8008cd2 <HAL_DMA_Abort+0xd6>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a5f      	ldr	r2, [pc, #380]	; (8008e4c <HAL_DMA_Abort+0x250>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d101      	bne.n	8008cd6 <HAL_DMA_Abort+0xda>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e000      	b.n	8008cd8 <HAL_DMA_Abort+0xdc>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d013      	beq.n	8008d04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 021e 	bic.w	r2, r2, #30
 8008cea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	695a      	ldr	r2, [r3, #20]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cfa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	617b      	str	r3, [r7, #20]
 8008d02:	e00a      	b.n	8008d1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 020e 	bic.w	r2, r2, #14
 8008d12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a3c      	ldr	r2, [pc, #240]	; (8008e10 <HAL_DMA_Abort+0x214>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d072      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a3a      	ldr	r2, [pc, #232]	; (8008e14 <HAL_DMA_Abort+0x218>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d06d      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a39      	ldr	r2, [pc, #228]	; (8008e18 <HAL_DMA_Abort+0x21c>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d068      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a37      	ldr	r2, [pc, #220]	; (8008e1c <HAL_DMA_Abort+0x220>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d063      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a36      	ldr	r2, [pc, #216]	; (8008e20 <HAL_DMA_Abort+0x224>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d05e      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a34      	ldr	r2, [pc, #208]	; (8008e24 <HAL_DMA_Abort+0x228>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d059      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a33      	ldr	r2, [pc, #204]	; (8008e28 <HAL_DMA_Abort+0x22c>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d054      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a31      	ldr	r2, [pc, #196]	; (8008e2c <HAL_DMA_Abort+0x230>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d04f      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a30      	ldr	r2, [pc, #192]	; (8008e30 <HAL_DMA_Abort+0x234>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d04a      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a2e      	ldr	r2, [pc, #184]	; (8008e34 <HAL_DMA_Abort+0x238>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d045      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a2d      	ldr	r2, [pc, #180]	; (8008e38 <HAL_DMA_Abort+0x23c>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d040      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a2b      	ldr	r2, [pc, #172]	; (8008e3c <HAL_DMA_Abort+0x240>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d03b      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a2a      	ldr	r2, [pc, #168]	; (8008e40 <HAL_DMA_Abort+0x244>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d036      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a28      	ldr	r2, [pc, #160]	; (8008e44 <HAL_DMA_Abort+0x248>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d031      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a27      	ldr	r2, [pc, #156]	; (8008e48 <HAL_DMA_Abort+0x24c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d02c      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a25      	ldr	r2, [pc, #148]	; (8008e4c <HAL_DMA_Abort+0x250>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d027      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a24      	ldr	r2, [pc, #144]	; (8008e50 <HAL_DMA_Abort+0x254>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d022      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a22      	ldr	r2, [pc, #136]	; (8008e54 <HAL_DMA_Abort+0x258>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d01d      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a21      	ldr	r2, [pc, #132]	; (8008e58 <HAL_DMA_Abort+0x25c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d018      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a1f      	ldr	r2, [pc, #124]	; (8008e5c <HAL_DMA_Abort+0x260>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d013      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a1e      	ldr	r2, [pc, #120]	; (8008e60 <HAL_DMA_Abort+0x264>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00e      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a1c      	ldr	r2, [pc, #112]	; (8008e64 <HAL_DMA_Abort+0x268>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d009      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <HAL_DMA_Abort+0x26c>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d004      	beq.n	8008e0a <HAL_DMA_Abort+0x20e>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a19      	ldr	r2, [pc, #100]	; (8008e6c <HAL_DMA_Abort+0x270>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d132      	bne.n	8008e70 <HAL_DMA_Abort+0x274>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e031      	b.n	8008e72 <HAL_DMA_Abort+0x276>
 8008e0e:	bf00      	nop
 8008e10:	40020010 	.word	0x40020010
 8008e14:	40020028 	.word	0x40020028
 8008e18:	40020040 	.word	0x40020040
 8008e1c:	40020058 	.word	0x40020058
 8008e20:	40020070 	.word	0x40020070
 8008e24:	40020088 	.word	0x40020088
 8008e28:	400200a0 	.word	0x400200a0
 8008e2c:	400200b8 	.word	0x400200b8
 8008e30:	40020410 	.word	0x40020410
 8008e34:	40020428 	.word	0x40020428
 8008e38:	40020440 	.word	0x40020440
 8008e3c:	40020458 	.word	0x40020458
 8008e40:	40020470 	.word	0x40020470
 8008e44:	40020488 	.word	0x40020488
 8008e48:	400204a0 	.word	0x400204a0
 8008e4c:	400204b8 	.word	0x400204b8
 8008e50:	58025408 	.word	0x58025408
 8008e54:	5802541c 	.word	0x5802541c
 8008e58:	58025430 	.word	0x58025430
 8008e5c:	58025444 	.word	0x58025444
 8008e60:	58025458 	.word	0x58025458
 8008e64:	5802546c 	.word	0x5802546c
 8008e68:	58025480 	.word	0x58025480
 8008e6c:	58025494 	.word	0x58025494
 8008e70:	2300      	movs	r3, #0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a6d      	ldr	r2, [pc, #436]	; (8009040 <HAL_DMA_Abort+0x444>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d04a      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a6b      	ldr	r2, [pc, #428]	; (8009044 <HAL_DMA_Abort+0x448>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d045      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a6a      	ldr	r2, [pc, #424]	; (8009048 <HAL_DMA_Abort+0x44c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d040      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a68      	ldr	r2, [pc, #416]	; (800904c <HAL_DMA_Abort+0x450>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d03b      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a67      	ldr	r2, [pc, #412]	; (8009050 <HAL_DMA_Abort+0x454>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d036      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a65      	ldr	r2, [pc, #404]	; (8009054 <HAL_DMA_Abort+0x458>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d031      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a64      	ldr	r2, [pc, #400]	; (8009058 <HAL_DMA_Abort+0x45c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d02c      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a62      	ldr	r2, [pc, #392]	; (800905c <HAL_DMA_Abort+0x460>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d027      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a61      	ldr	r2, [pc, #388]	; (8009060 <HAL_DMA_Abort+0x464>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d022      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a5f      	ldr	r2, [pc, #380]	; (8009064 <HAL_DMA_Abort+0x468>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d01d      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a5e      	ldr	r2, [pc, #376]	; (8009068 <HAL_DMA_Abort+0x46c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d018      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a5c      	ldr	r2, [pc, #368]	; (800906c <HAL_DMA_Abort+0x470>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d013      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a5b      	ldr	r2, [pc, #364]	; (8009070 <HAL_DMA_Abort+0x474>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00e      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a59      	ldr	r2, [pc, #356]	; (8009074 <HAL_DMA_Abort+0x478>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d009      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a58      	ldr	r2, [pc, #352]	; (8009078 <HAL_DMA_Abort+0x47c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d004      	beq.n	8008f26 <HAL_DMA_Abort+0x32a>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a56      	ldr	r2, [pc, #344]	; (800907c <HAL_DMA_Abort+0x480>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d108      	bne.n	8008f38 <HAL_DMA_Abort+0x33c>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0201 	bic.w	r2, r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	e007      	b.n	8008f48 <HAL_DMA_Abort+0x34c>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0201 	bic.w	r2, r2, #1
 8008f46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008f48:	e013      	b.n	8008f72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008f4a:	f7fc ff69 	bl	8005e20 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	2b05      	cmp	r3, #5
 8008f56:	d90c      	bls.n	8008f72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2203      	movs	r2, #3
 8008f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e12d      	b.n	80091ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e5      	bne.n	8008f4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a2f      	ldr	r2, [pc, #188]	; (8009040 <HAL_DMA_Abort+0x444>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d04a      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a2d      	ldr	r2, [pc, #180]	; (8009044 <HAL_DMA_Abort+0x448>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d045      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a2c      	ldr	r2, [pc, #176]	; (8009048 <HAL_DMA_Abort+0x44c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d040      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a2a      	ldr	r2, [pc, #168]	; (800904c <HAL_DMA_Abort+0x450>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d03b      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a29      	ldr	r2, [pc, #164]	; (8009050 <HAL_DMA_Abort+0x454>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d036      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a27      	ldr	r2, [pc, #156]	; (8009054 <HAL_DMA_Abort+0x458>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d031      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a26      	ldr	r2, [pc, #152]	; (8009058 <HAL_DMA_Abort+0x45c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d02c      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a24      	ldr	r2, [pc, #144]	; (800905c <HAL_DMA_Abort+0x460>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d027      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a23      	ldr	r2, [pc, #140]	; (8009060 <HAL_DMA_Abort+0x464>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d022      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a21      	ldr	r2, [pc, #132]	; (8009064 <HAL_DMA_Abort+0x468>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d01d      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a20      	ldr	r2, [pc, #128]	; (8009068 <HAL_DMA_Abort+0x46c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d018      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a1e      	ldr	r2, [pc, #120]	; (800906c <HAL_DMA_Abort+0x470>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d013      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a1d      	ldr	r2, [pc, #116]	; (8009070 <HAL_DMA_Abort+0x474>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d00e      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <HAL_DMA_Abort+0x478>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d009      	beq.n	800901e <HAL_DMA_Abort+0x422>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a1a      	ldr	r2, [pc, #104]	; (8009078 <HAL_DMA_Abort+0x47c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d004      	beq.n	800901e <HAL_DMA_Abort+0x422>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a18      	ldr	r2, [pc, #96]	; (800907c <HAL_DMA_Abort+0x480>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d101      	bne.n	8009022 <HAL_DMA_Abort+0x426>
 800901e:	2301      	movs	r3, #1
 8009020:	e000      	b.n	8009024 <HAL_DMA_Abort+0x428>
 8009022:	2300      	movs	r3, #0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d02b      	beq.n	8009080 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009032:	f003 031f 	and.w	r3, r3, #31
 8009036:	223f      	movs	r2, #63	; 0x3f
 8009038:	409a      	lsls	r2, r3
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	609a      	str	r2, [r3, #8]
 800903e:	e02a      	b.n	8009096 <HAL_DMA_Abort+0x49a>
 8009040:	40020010 	.word	0x40020010
 8009044:	40020028 	.word	0x40020028
 8009048:	40020040 	.word	0x40020040
 800904c:	40020058 	.word	0x40020058
 8009050:	40020070 	.word	0x40020070
 8009054:	40020088 	.word	0x40020088
 8009058:	400200a0 	.word	0x400200a0
 800905c:	400200b8 	.word	0x400200b8
 8009060:	40020410 	.word	0x40020410
 8009064:	40020428 	.word	0x40020428
 8009068:	40020440 	.word	0x40020440
 800906c:	40020458 	.word	0x40020458
 8009070:	40020470 	.word	0x40020470
 8009074:	40020488 	.word	0x40020488
 8009078:	400204a0 	.word	0x400204a0
 800907c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009084:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	2201      	movs	r2, #1
 8009090:	409a      	lsls	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a4f      	ldr	r2, [pc, #316]	; (80091d8 <HAL_DMA_Abort+0x5dc>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d072      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a4d      	ldr	r2, [pc, #308]	; (80091dc <HAL_DMA_Abort+0x5e0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d06d      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a4c      	ldr	r2, [pc, #304]	; (80091e0 <HAL_DMA_Abort+0x5e4>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d068      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a4a      	ldr	r2, [pc, #296]	; (80091e4 <HAL_DMA_Abort+0x5e8>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d063      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a49      	ldr	r2, [pc, #292]	; (80091e8 <HAL_DMA_Abort+0x5ec>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d05e      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a47      	ldr	r2, [pc, #284]	; (80091ec <HAL_DMA_Abort+0x5f0>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d059      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a46      	ldr	r2, [pc, #280]	; (80091f0 <HAL_DMA_Abort+0x5f4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d054      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a44      	ldr	r2, [pc, #272]	; (80091f4 <HAL_DMA_Abort+0x5f8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d04f      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a43      	ldr	r2, [pc, #268]	; (80091f8 <HAL_DMA_Abort+0x5fc>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d04a      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a41      	ldr	r2, [pc, #260]	; (80091fc <HAL_DMA_Abort+0x600>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d045      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a40      	ldr	r2, [pc, #256]	; (8009200 <HAL_DMA_Abort+0x604>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d040      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a3e      	ldr	r2, [pc, #248]	; (8009204 <HAL_DMA_Abort+0x608>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d03b      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a3d      	ldr	r2, [pc, #244]	; (8009208 <HAL_DMA_Abort+0x60c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d036      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a3b      	ldr	r2, [pc, #236]	; (800920c <HAL_DMA_Abort+0x610>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d031      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a3a      	ldr	r2, [pc, #232]	; (8009210 <HAL_DMA_Abort+0x614>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d02c      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a38      	ldr	r2, [pc, #224]	; (8009214 <HAL_DMA_Abort+0x618>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d027      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a37      	ldr	r2, [pc, #220]	; (8009218 <HAL_DMA_Abort+0x61c>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d022      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a35      	ldr	r2, [pc, #212]	; (800921c <HAL_DMA_Abort+0x620>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d01d      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a34      	ldr	r2, [pc, #208]	; (8009220 <HAL_DMA_Abort+0x624>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d018      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a32      	ldr	r2, [pc, #200]	; (8009224 <HAL_DMA_Abort+0x628>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d013      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a31      	ldr	r2, [pc, #196]	; (8009228 <HAL_DMA_Abort+0x62c>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d00e      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a2f      	ldr	r2, [pc, #188]	; (800922c <HAL_DMA_Abort+0x630>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d009      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a2e      	ldr	r2, [pc, #184]	; (8009230 <HAL_DMA_Abort+0x634>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d004      	beq.n	8009186 <HAL_DMA_Abort+0x58a>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a2c      	ldr	r2, [pc, #176]	; (8009234 <HAL_DMA_Abort+0x638>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d101      	bne.n	800918a <HAL_DMA_Abort+0x58e>
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <HAL_DMA_Abort+0x590>
 800918a:	2300      	movs	r3, #0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d015      	beq.n	80091bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009198:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00c      	beq.n	80091bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80091ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	40020010 	.word	0x40020010
 80091dc:	40020028 	.word	0x40020028
 80091e0:	40020040 	.word	0x40020040
 80091e4:	40020058 	.word	0x40020058
 80091e8:	40020070 	.word	0x40020070
 80091ec:	40020088 	.word	0x40020088
 80091f0:	400200a0 	.word	0x400200a0
 80091f4:	400200b8 	.word	0x400200b8
 80091f8:	40020410 	.word	0x40020410
 80091fc:	40020428 	.word	0x40020428
 8009200:	40020440 	.word	0x40020440
 8009204:	40020458 	.word	0x40020458
 8009208:	40020470 	.word	0x40020470
 800920c:	40020488 	.word	0x40020488
 8009210:	400204a0 	.word	0x400204a0
 8009214:	400204b8 	.word	0x400204b8
 8009218:	58025408 	.word	0x58025408
 800921c:	5802541c 	.word	0x5802541c
 8009220:	58025430 	.word	0x58025430
 8009224:	58025444 	.word	0x58025444
 8009228:	58025458 	.word	0x58025458
 800922c:	5802546c 	.word	0x5802546c
 8009230:	58025480 	.word	0x58025480
 8009234:	58025494 	.word	0x58025494

08009238 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e237      	b.n	80096ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b02      	cmp	r3, #2
 8009254:	d004      	beq.n	8009260 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2280      	movs	r2, #128	; 0x80
 800925a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e22c      	b.n	80096ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a5c      	ldr	r2, [pc, #368]	; (80093d8 <HAL_DMA_Abort_IT+0x1a0>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d04a      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a5b      	ldr	r2, [pc, #364]	; (80093dc <HAL_DMA_Abort_IT+0x1a4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d045      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a59      	ldr	r2, [pc, #356]	; (80093e0 <HAL_DMA_Abort_IT+0x1a8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d040      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a58      	ldr	r2, [pc, #352]	; (80093e4 <HAL_DMA_Abort_IT+0x1ac>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d03b      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a56      	ldr	r2, [pc, #344]	; (80093e8 <HAL_DMA_Abort_IT+0x1b0>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d036      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a55      	ldr	r2, [pc, #340]	; (80093ec <HAL_DMA_Abort_IT+0x1b4>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d031      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a53      	ldr	r2, [pc, #332]	; (80093f0 <HAL_DMA_Abort_IT+0x1b8>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d02c      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a52      	ldr	r2, [pc, #328]	; (80093f4 <HAL_DMA_Abort_IT+0x1bc>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d027      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a50      	ldr	r2, [pc, #320]	; (80093f8 <HAL_DMA_Abort_IT+0x1c0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d022      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a4f      	ldr	r2, [pc, #316]	; (80093fc <HAL_DMA_Abort_IT+0x1c4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d01d      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a4d      	ldr	r2, [pc, #308]	; (8009400 <HAL_DMA_Abort_IT+0x1c8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d018      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a4c      	ldr	r2, [pc, #304]	; (8009404 <HAL_DMA_Abort_IT+0x1cc>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d013      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a4a      	ldr	r2, [pc, #296]	; (8009408 <HAL_DMA_Abort_IT+0x1d0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d00e      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a49      	ldr	r2, [pc, #292]	; (800940c <HAL_DMA_Abort_IT+0x1d4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d009      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a47      	ldr	r2, [pc, #284]	; (8009410 <HAL_DMA_Abort_IT+0x1d8>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d004      	beq.n	8009300 <HAL_DMA_Abort_IT+0xc8>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a46      	ldr	r2, [pc, #280]	; (8009414 <HAL_DMA_Abort_IT+0x1dc>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d101      	bne.n	8009304 <HAL_DMA_Abort_IT+0xcc>
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <HAL_DMA_Abort_IT+0xce>
 8009304:	2300      	movs	r3, #0
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 8086 	beq.w	8009418 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2204      	movs	r2, #4
 8009310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a2f      	ldr	r2, [pc, #188]	; (80093d8 <HAL_DMA_Abort_IT+0x1a0>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d04a      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a2e      	ldr	r2, [pc, #184]	; (80093dc <HAL_DMA_Abort_IT+0x1a4>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d045      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a2c      	ldr	r2, [pc, #176]	; (80093e0 <HAL_DMA_Abort_IT+0x1a8>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d040      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a2b      	ldr	r2, [pc, #172]	; (80093e4 <HAL_DMA_Abort_IT+0x1ac>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d03b      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a29      	ldr	r2, [pc, #164]	; (80093e8 <HAL_DMA_Abort_IT+0x1b0>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d036      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a28      	ldr	r2, [pc, #160]	; (80093ec <HAL_DMA_Abort_IT+0x1b4>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d031      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a26      	ldr	r2, [pc, #152]	; (80093f0 <HAL_DMA_Abort_IT+0x1b8>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d02c      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a25      	ldr	r2, [pc, #148]	; (80093f4 <HAL_DMA_Abort_IT+0x1bc>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d027      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a23      	ldr	r2, [pc, #140]	; (80093f8 <HAL_DMA_Abort_IT+0x1c0>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d022      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a22      	ldr	r2, [pc, #136]	; (80093fc <HAL_DMA_Abort_IT+0x1c4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d01d      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a20      	ldr	r2, [pc, #128]	; (8009400 <HAL_DMA_Abort_IT+0x1c8>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d018      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1f      	ldr	r2, [pc, #124]	; (8009404 <HAL_DMA_Abort_IT+0x1cc>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d013      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1d      	ldr	r2, [pc, #116]	; (8009408 <HAL_DMA_Abort_IT+0x1d0>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00e      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1c      	ldr	r2, [pc, #112]	; (800940c <HAL_DMA_Abort_IT+0x1d4>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d009      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a1a      	ldr	r2, [pc, #104]	; (8009410 <HAL_DMA_Abort_IT+0x1d8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d004      	beq.n	80093b4 <HAL_DMA_Abort_IT+0x17c>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a19      	ldr	r2, [pc, #100]	; (8009414 <HAL_DMA_Abort_IT+0x1dc>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d108      	bne.n	80093c6 <HAL_DMA_Abort_IT+0x18e>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0201 	bic.w	r2, r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	e178      	b.n	80096b8 <HAL_DMA_Abort_IT+0x480>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 0201 	bic.w	r2, r2, #1
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e16f      	b.n	80096b8 <HAL_DMA_Abort_IT+0x480>
 80093d8:	40020010 	.word	0x40020010
 80093dc:	40020028 	.word	0x40020028
 80093e0:	40020040 	.word	0x40020040
 80093e4:	40020058 	.word	0x40020058
 80093e8:	40020070 	.word	0x40020070
 80093ec:	40020088 	.word	0x40020088
 80093f0:	400200a0 	.word	0x400200a0
 80093f4:	400200b8 	.word	0x400200b8
 80093f8:	40020410 	.word	0x40020410
 80093fc:	40020428 	.word	0x40020428
 8009400:	40020440 	.word	0x40020440
 8009404:	40020458 	.word	0x40020458
 8009408:	40020470 	.word	0x40020470
 800940c:	40020488 	.word	0x40020488
 8009410:	400204a0 	.word	0x400204a0
 8009414:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 020e 	bic.w	r2, r2, #14
 8009426:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a6c      	ldr	r2, [pc, #432]	; (80095e0 <HAL_DMA_Abort_IT+0x3a8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d04a      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a6b      	ldr	r2, [pc, #428]	; (80095e4 <HAL_DMA_Abort_IT+0x3ac>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d045      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a69      	ldr	r2, [pc, #420]	; (80095e8 <HAL_DMA_Abort_IT+0x3b0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d040      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a68      	ldr	r2, [pc, #416]	; (80095ec <HAL_DMA_Abort_IT+0x3b4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d03b      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a66      	ldr	r2, [pc, #408]	; (80095f0 <HAL_DMA_Abort_IT+0x3b8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d036      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a65      	ldr	r2, [pc, #404]	; (80095f4 <HAL_DMA_Abort_IT+0x3bc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d031      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a63      	ldr	r2, [pc, #396]	; (80095f8 <HAL_DMA_Abort_IT+0x3c0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d02c      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a62      	ldr	r2, [pc, #392]	; (80095fc <HAL_DMA_Abort_IT+0x3c4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d027      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a60      	ldr	r2, [pc, #384]	; (8009600 <HAL_DMA_Abort_IT+0x3c8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d022      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a5f      	ldr	r2, [pc, #380]	; (8009604 <HAL_DMA_Abort_IT+0x3cc>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d01d      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a5d      	ldr	r2, [pc, #372]	; (8009608 <HAL_DMA_Abort_IT+0x3d0>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d018      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a5c      	ldr	r2, [pc, #368]	; (800960c <HAL_DMA_Abort_IT+0x3d4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d013      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a5a      	ldr	r2, [pc, #360]	; (8009610 <HAL_DMA_Abort_IT+0x3d8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00e      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a59      	ldr	r2, [pc, #356]	; (8009614 <HAL_DMA_Abort_IT+0x3dc>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d009      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a57      	ldr	r2, [pc, #348]	; (8009618 <HAL_DMA_Abort_IT+0x3e0>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d004      	beq.n	80094c8 <HAL_DMA_Abort_IT+0x290>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a56      	ldr	r2, [pc, #344]	; (800961c <HAL_DMA_Abort_IT+0x3e4>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d108      	bne.n	80094da <HAL_DMA_Abort_IT+0x2a2>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0201 	bic.w	r2, r2, #1
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	e007      	b.n	80094ea <HAL_DMA_Abort_IT+0x2b2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0201 	bic.w	r2, r2, #1
 80094e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a3c      	ldr	r2, [pc, #240]	; (80095e0 <HAL_DMA_Abort_IT+0x3a8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d072      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a3a      	ldr	r2, [pc, #232]	; (80095e4 <HAL_DMA_Abort_IT+0x3ac>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d06d      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a39      	ldr	r2, [pc, #228]	; (80095e8 <HAL_DMA_Abort_IT+0x3b0>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d068      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a37      	ldr	r2, [pc, #220]	; (80095ec <HAL_DMA_Abort_IT+0x3b4>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d063      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a36      	ldr	r2, [pc, #216]	; (80095f0 <HAL_DMA_Abort_IT+0x3b8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d05e      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a34      	ldr	r2, [pc, #208]	; (80095f4 <HAL_DMA_Abort_IT+0x3bc>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d059      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a33      	ldr	r2, [pc, #204]	; (80095f8 <HAL_DMA_Abort_IT+0x3c0>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d054      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a31      	ldr	r2, [pc, #196]	; (80095fc <HAL_DMA_Abort_IT+0x3c4>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d04f      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a30      	ldr	r2, [pc, #192]	; (8009600 <HAL_DMA_Abort_IT+0x3c8>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d04a      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a2e      	ldr	r2, [pc, #184]	; (8009604 <HAL_DMA_Abort_IT+0x3cc>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d045      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a2d      	ldr	r2, [pc, #180]	; (8009608 <HAL_DMA_Abort_IT+0x3d0>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d040      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a2b      	ldr	r2, [pc, #172]	; (800960c <HAL_DMA_Abort_IT+0x3d4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d03b      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a2a      	ldr	r2, [pc, #168]	; (8009610 <HAL_DMA_Abort_IT+0x3d8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d036      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a28      	ldr	r2, [pc, #160]	; (8009614 <HAL_DMA_Abort_IT+0x3dc>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d031      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a27      	ldr	r2, [pc, #156]	; (8009618 <HAL_DMA_Abort_IT+0x3e0>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d02c      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a25      	ldr	r2, [pc, #148]	; (800961c <HAL_DMA_Abort_IT+0x3e4>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d027      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a24      	ldr	r2, [pc, #144]	; (8009620 <HAL_DMA_Abort_IT+0x3e8>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d022      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a22      	ldr	r2, [pc, #136]	; (8009624 <HAL_DMA_Abort_IT+0x3ec>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d01d      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a21      	ldr	r2, [pc, #132]	; (8009628 <HAL_DMA_Abort_IT+0x3f0>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d018      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a1f      	ldr	r2, [pc, #124]	; (800962c <HAL_DMA_Abort_IT+0x3f4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d013      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a1e      	ldr	r2, [pc, #120]	; (8009630 <HAL_DMA_Abort_IT+0x3f8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00e      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a1c      	ldr	r2, [pc, #112]	; (8009634 <HAL_DMA_Abort_IT+0x3fc>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d009      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a1b      	ldr	r2, [pc, #108]	; (8009638 <HAL_DMA_Abort_IT+0x400>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d004      	beq.n	80095da <HAL_DMA_Abort_IT+0x3a2>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a19      	ldr	r2, [pc, #100]	; (800963c <HAL_DMA_Abort_IT+0x404>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d132      	bne.n	8009640 <HAL_DMA_Abort_IT+0x408>
 80095da:	2301      	movs	r3, #1
 80095dc:	e031      	b.n	8009642 <HAL_DMA_Abort_IT+0x40a>
 80095de:	bf00      	nop
 80095e0:	40020010 	.word	0x40020010
 80095e4:	40020028 	.word	0x40020028
 80095e8:	40020040 	.word	0x40020040
 80095ec:	40020058 	.word	0x40020058
 80095f0:	40020070 	.word	0x40020070
 80095f4:	40020088 	.word	0x40020088
 80095f8:	400200a0 	.word	0x400200a0
 80095fc:	400200b8 	.word	0x400200b8
 8009600:	40020410 	.word	0x40020410
 8009604:	40020428 	.word	0x40020428
 8009608:	40020440 	.word	0x40020440
 800960c:	40020458 	.word	0x40020458
 8009610:	40020470 	.word	0x40020470
 8009614:	40020488 	.word	0x40020488
 8009618:	400204a0 	.word	0x400204a0
 800961c:	400204b8 	.word	0x400204b8
 8009620:	58025408 	.word	0x58025408
 8009624:	5802541c 	.word	0x5802541c
 8009628:	58025430 	.word	0x58025430
 800962c:	58025444 	.word	0x58025444
 8009630:	58025458 	.word	0x58025458
 8009634:	5802546c 	.word	0x5802546c
 8009638:	58025480 	.word	0x58025480
 800963c:	58025494 	.word	0x58025494
 8009640:	2300      	movs	r3, #0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d028      	beq.n	8009698 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009654:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800965a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009660:	f003 031f 	and.w	r3, r3, #31
 8009664:	2201      	movs	r2, #1
 8009666:	409a      	lsls	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009674:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00c      	beq.n	8009698 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800968c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009696:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop

080096c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08a      	sub	sp, #40	; 0x28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80096d0:	4b67      	ldr	r3, [pc, #412]	; (8009870 <HAL_DMA_IRQHandler+0x1ac>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a67      	ldr	r2, [pc, #412]	; (8009874 <HAL_DMA_IRQHandler+0x1b0>)
 80096d6:	fba2 2303 	umull	r2, r3, r2, r3
 80096da:	0a9b      	lsrs	r3, r3, #10
 80096dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a5f      	ldr	r2, [pc, #380]	; (8009878 <HAL_DMA_IRQHandler+0x1b4>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d04a      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a5d      	ldr	r2, [pc, #372]	; (800987c <HAL_DMA_IRQHandler+0x1b8>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d045      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a5c      	ldr	r2, [pc, #368]	; (8009880 <HAL_DMA_IRQHandler+0x1bc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d040      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a5a      	ldr	r2, [pc, #360]	; (8009884 <HAL_DMA_IRQHandler+0x1c0>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d03b      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a59      	ldr	r2, [pc, #356]	; (8009888 <HAL_DMA_IRQHandler+0x1c4>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d036      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a57      	ldr	r2, [pc, #348]	; (800988c <HAL_DMA_IRQHandler+0x1c8>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d031      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a56      	ldr	r2, [pc, #344]	; (8009890 <HAL_DMA_IRQHandler+0x1cc>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d02c      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a54      	ldr	r2, [pc, #336]	; (8009894 <HAL_DMA_IRQHandler+0x1d0>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d027      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a53      	ldr	r2, [pc, #332]	; (8009898 <HAL_DMA_IRQHandler+0x1d4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d022      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a51      	ldr	r2, [pc, #324]	; (800989c <HAL_DMA_IRQHandler+0x1d8>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d01d      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a50      	ldr	r2, [pc, #320]	; (80098a0 <HAL_DMA_IRQHandler+0x1dc>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d018      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a4e      	ldr	r2, [pc, #312]	; (80098a4 <HAL_DMA_IRQHandler+0x1e0>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d013      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a4d      	ldr	r2, [pc, #308]	; (80098a8 <HAL_DMA_IRQHandler+0x1e4>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00e      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a4b      	ldr	r2, [pc, #300]	; (80098ac <HAL_DMA_IRQHandler+0x1e8>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d009      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a4a      	ldr	r2, [pc, #296]	; (80098b0 <HAL_DMA_IRQHandler+0x1ec>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d004      	beq.n	8009796 <HAL_DMA_IRQHandler+0xd2>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a48      	ldr	r2, [pc, #288]	; (80098b4 <HAL_DMA_IRQHandler+0x1f0>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d101      	bne.n	800979a <HAL_DMA_IRQHandler+0xd6>
 8009796:	2301      	movs	r3, #1
 8009798:	e000      	b.n	800979c <HAL_DMA_IRQHandler+0xd8>
 800979a:	2300      	movs	r3, #0
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 842b 	beq.w	8009ff8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a6:	f003 031f 	and.w	r3, r3, #31
 80097aa:	2208      	movs	r2, #8
 80097ac:	409a      	lsls	r2, r3
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	4013      	ands	r3, r2
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 80a2 	beq.w	80098fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a2e      	ldr	r2, [pc, #184]	; (8009878 <HAL_DMA_IRQHandler+0x1b4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d04a      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a2d      	ldr	r2, [pc, #180]	; (800987c <HAL_DMA_IRQHandler+0x1b8>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d045      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a2b      	ldr	r2, [pc, #172]	; (8009880 <HAL_DMA_IRQHandler+0x1bc>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d040      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a2a      	ldr	r2, [pc, #168]	; (8009884 <HAL_DMA_IRQHandler+0x1c0>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d03b      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a28      	ldr	r2, [pc, #160]	; (8009888 <HAL_DMA_IRQHandler+0x1c4>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d036      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a27      	ldr	r2, [pc, #156]	; (800988c <HAL_DMA_IRQHandler+0x1c8>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d031      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a25      	ldr	r2, [pc, #148]	; (8009890 <HAL_DMA_IRQHandler+0x1cc>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d02c      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a24      	ldr	r2, [pc, #144]	; (8009894 <HAL_DMA_IRQHandler+0x1d0>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d027      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a22      	ldr	r2, [pc, #136]	; (8009898 <HAL_DMA_IRQHandler+0x1d4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d022      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a21      	ldr	r2, [pc, #132]	; (800989c <HAL_DMA_IRQHandler+0x1d8>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d01d      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a1f      	ldr	r2, [pc, #124]	; (80098a0 <HAL_DMA_IRQHandler+0x1dc>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d018      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a1e      	ldr	r2, [pc, #120]	; (80098a4 <HAL_DMA_IRQHandler+0x1e0>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d013      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a1c      	ldr	r2, [pc, #112]	; (80098a8 <HAL_DMA_IRQHandler+0x1e4>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00e      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a1b      	ldr	r2, [pc, #108]	; (80098ac <HAL_DMA_IRQHandler+0x1e8>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d009      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a19      	ldr	r2, [pc, #100]	; (80098b0 <HAL_DMA_IRQHandler+0x1ec>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d004      	beq.n	8009858 <HAL_DMA_IRQHandler+0x194>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a18      	ldr	r2, [pc, #96]	; (80098b4 <HAL_DMA_IRQHandler+0x1f0>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d12f      	bne.n	80098b8 <HAL_DMA_IRQHandler+0x1f4>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0304 	and.w	r3, r3, #4
 8009862:	2b00      	cmp	r3, #0
 8009864:	bf14      	ite	ne
 8009866:	2301      	movne	r3, #1
 8009868:	2300      	moveq	r3, #0
 800986a:	b2db      	uxtb	r3, r3
 800986c:	e02e      	b.n	80098cc <HAL_DMA_IRQHandler+0x208>
 800986e:	bf00      	nop
 8009870:	240000c0 	.word	0x240000c0
 8009874:	1b4e81b5 	.word	0x1b4e81b5
 8009878:	40020010 	.word	0x40020010
 800987c:	40020028 	.word	0x40020028
 8009880:	40020040 	.word	0x40020040
 8009884:	40020058 	.word	0x40020058
 8009888:	40020070 	.word	0x40020070
 800988c:	40020088 	.word	0x40020088
 8009890:	400200a0 	.word	0x400200a0
 8009894:	400200b8 	.word	0x400200b8
 8009898:	40020410 	.word	0x40020410
 800989c:	40020428 	.word	0x40020428
 80098a0:	40020440 	.word	0x40020440
 80098a4:	40020458 	.word	0x40020458
 80098a8:	40020470 	.word	0x40020470
 80098ac:	40020488 	.word	0x40020488
 80098b0:	400204a0 	.word	0x400204a0
 80098b4:	400204b8 	.word	0x400204b8
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0308 	and.w	r3, r3, #8
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	bf14      	ite	ne
 80098c6:	2301      	movne	r3, #1
 80098c8:	2300      	moveq	r3, #0
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d015      	beq.n	80098fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 0204 	bic.w	r2, r2, #4
 80098de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e4:	f003 031f 	and.w	r3, r3, #31
 80098e8:	2208      	movs	r2, #8
 80098ea:	409a      	lsls	r2, r3
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f4:	f043 0201 	orr.w	r2, r3, #1
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009900:	f003 031f 	and.w	r3, r3, #31
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	fa22 f303 	lsr.w	r3, r2, r3
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b00      	cmp	r3, #0
 8009910:	d06e      	beq.n	80099f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a69      	ldr	r2, [pc, #420]	; (8009abc <HAL_DMA_IRQHandler+0x3f8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d04a      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a67      	ldr	r2, [pc, #412]	; (8009ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d045      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a66      	ldr	r2, [pc, #408]	; (8009ac4 <HAL_DMA_IRQHandler+0x400>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d040      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a64      	ldr	r2, [pc, #400]	; (8009ac8 <HAL_DMA_IRQHandler+0x404>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d03b      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a63      	ldr	r2, [pc, #396]	; (8009acc <HAL_DMA_IRQHandler+0x408>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d036      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a61      	ldr	r2, [pc, #388]	; (8009ad0 <HAL_DMA_IRQHandler+0x40c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d031      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a60      	ldr	r2, [pc, #384]	; (8009ad4 <HAL_DMA_IRQHandler+0x410>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d02c      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a5e      	ldr	r2, [pc, #376]	; (8009ad8 <HAL_DMA_IRQHandler+0x414>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d027      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a5d      	ldr	r2, [pc, #372]	; (8009adc <HAL_DMA_IRQHandler+0x418>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d022      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a5b      	ldr	r2, [pc, #364]	; (8009ae0 <HAL_DMA_IRQHandler+0x41c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d01d      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a5a      	ldr	r2, [pc, #360]	; (8009ae4 <HAL_DMA_IRQHandler+0x420>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d018      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a58      	ldr	r2, [pc, #352]	; (8009ae8 <HAL_DMA_IRQHandler+0x424>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d013      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a57      	ldr	r2, [pc, #348]	; (8009aec <HAL_DMA_IRQHandler+0x428>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d00e      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a55      	ldr	r2, [pc, #340]	; (8009af0 <HAL_DMA_IRQHandler+0x42c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d009      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a54      	ldr	r2, [pc, #336]	; (8009af4 <HAL_DMA_IRQHandler+0x430>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d004      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x2ee>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a52      	ldr	r2, [pc, #328]	; (8009af8 <HAL_DMA_IRQHandler+0x434>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d10a      	bne.n	80099c8 <HAL_DMA_IRQHandler+0x304>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099bc:	2b00      	cmp	r3, #0
 80099be:	bf14      	ite	ne
 80099c0:	2301      	movne	r3, #1
 80099c2:	2300      	moveq	r3, #0
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	e003      	b.n	80099d0 <HAL_DMA_IRQHandler+0x30c>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2300      	movs	r3, #0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00d      	beq.n	80099f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099d8:	f003 031f 	and.w	r3, r3, #31
 80099dc:	2201      	movs	r2, #1
 80099de:	409a      	lsls	r2, r3
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e8:	f043 0202 	orr.w	r2, r3, #2
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f4:	f003 031f 	and.w	r3, r3, #31
 80099f8:	2204      	movs	r2, #4
 80099fa:	409a      	lsls	r2, r3
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	4013      	ands	r3, r2
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 808f 	beq.w	8009b24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a2c      	ldr	r2, [pc, #176]	; (8009abc <HAL_DMA_IRQHandler+0x3f8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d04a      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a2a      	ldr	r2, [pc, #168]	; (8009ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d045      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a29      	ldr	r2, [pc, #164]	; (8009ac4 <HAL_DMA_IRQHandler+0x400>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d040      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a27      	ldr	r2, [pc, #156]	; (8009ac8 <HAL_DMA_IRQHandler+0x404>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d03b      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a26      	ldr	r2, [pc, #152]	; (8009acc <HAL_DMA_IRQHandler+0x408>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d036      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a24      	ldr	r2, [pc, #144]	; (8009ad0 <HAL_DMA_IRQHandler+0x40c>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d031      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a23      	ldr	r2, [pc, #140]	; (8009ad4 <HAL_DMA_IRQHandler+0x410>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d02c      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a21      	ldr	r2, [pc, #132]	; (8009ad8 <HAL_DMA_IRQHandler+0x414>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d027      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a20      	ldr	r2, [pc, #128]	; (8009adc <HAL_DMA_IRQHandler+0x418>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d022      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a1e      	ldr	r2, [pc, #120]	; (8009ae0 <HAL_DMA_IRQHandler+0x41c>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01d      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ae4 <HAL_DMA_IRQHandler+0x420>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d018      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a1b      	ldr	r2, [pc, #108]	; (8009ae8 <HAL_DMA_IRQHandler+0x424>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d013      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a1a      	ldr	r2, [pc, #104]	; (8009aec <HAL_DMA_IRQHandler+0x428>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00e      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a18      	ldr	r2, [pc, #96]	; (8009af0 <HAL_DMA_IRQHandler+0x42c>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d009      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a17      	ldr	r2, [pc, #92]	; (8009af4 <HAL_DMA_IRQHandler+0x430>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d004      	beq.n	8009aa6 <HAL_DMA_IRQHandler+0x3e2>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a15      	ldr	r2, [pc, #84]	; (8009af8 <HAL_DMA_IRQHandler+0x434>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d12a      	bne.n	8009afc <HAL_DMA_IRQHandler+0x438>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0302 	and.w	r3, r3, #2
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	bf14      	ite	ne
 8009ab4:	2301      	movne	r3, #1
 8009ab6:	2300      	moveq	r3, #0
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	e023      	b.n	8009b04 <HAL_DMA_IRQHandler+0x440>
 8009abc:	40020010 	.word	0x40020010
 8009ac0:	40020028 	.word	0x40020028
 8009ac4:	40020040 	.word	0x40020040
 8009ac8:	40020058 	.word	0x40020058
 8009acc:	40020070 	.word	0x40020070
 8009ad0:	40020088 	.word	0x40020088
 8009ad4:	400200a0 	.word	0x400200a0
 8009ad8:	400200b8 	.word	0x400200b8
 8009adc:	40020410 	.word	0x40020410
 8009ae0:	40020428 	.word	0x40020428
 8009ae4:	40020440 	.word	0x40020440
 8009ae8:	40020458 	.word	0x40020458
 8009aec:	40020470 	.word	0x40020470
 8009af0:	40020488 	.word	0x40020488
 8009af4:	400204a0 	.word	0x400204a0
 8009af8:	400204b8 	.word	0x400204b8
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2300      	movs	r3, #0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00d      	beq.n	8009b24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b0c:	f003 031f 	and.w	r3, r3, #31
 8009b10:	2204      	movs	r2, #4
 8009b12:	409a      	lsls	r2, r3
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1c:	f043 0204 	orr.w	r2, r3, #4
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b28:	f003 031f 	and.w	r3, r3, #31
 8009b2c:	2210      	movs	r2, #16
 8009b2e:	409a      	lsls	r2, r3
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	4013      	ands	r3, r2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 80a6 	beq.w	8009c86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a85      	ldr	r2, [pc, #532]	; (8009d54 <HAL_DMA_IRQHandler+0x690>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d04a      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a83      	ldr	r2, [pc, #524]	; (8009d58 <HAL_DMA_IRQHandler+0x694>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d045      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a82      	ldr	r2, [pc, #520]	; (8009d5c <HAL_DMA_IRQHandler+0x698>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d040      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a80      	ldr	r2, [pc, #512]	; (8009d60 <HAL_DMA_IRQHandler+0x69c>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d03b      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a7f      	ldr	r2, [pc, #508]	; (8009d64 <HAL_DMA_IRQHandler+0x6a0>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d036      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a7d      	ldr	r2, [pc, #500]	; (8009d68 <HAL_DMA_IRQHandler+0x6a4>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d031      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a7c      	ldr	r2, [pc, #496]	; (8009d6c <HAL_DMA_IRQHandler+0x6a8>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d02c      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a7a      	ldr	r2, [pc, #488]	; (8009d70 <HAL_DMA_IRQHandler+0x6ac>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d027      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a79      	ldr	r2, [pc, #484]	; (8009d74 <HAL_DMA_IRQHandler+0x6b0>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d022      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a77      	ldr	r2, [pc, #476]	; (8009d78 <HAL_DMA_IRQHandler+0x6b4>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d01d      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a76      	ldr	r2, [pc, #472]	; (8009d7c <HAL_DMA_IRQHandler+0x6b8>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d018      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a74      	ldr	r2, [pc, #464]	; (8009d80 <HAL_DMA_IRQHandler+0x6bc>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d013      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a73      	ldr	r2, [pc, #460]	; (8009d84 <HAL_DMA_IRQHandler+0x6c0>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d00e      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a71      	ldr	r2, [pc, #452]	; (8009d88 <HAL_DMA_IRQHandler+0x6c4>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d009      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a70      	ldr	r2, [pc, #448]	; (8009d8c <HAL_DMA_IRQHandler+0x6c8>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d004      	beq.n	8009bda <HAL_DMA_IRQHandler+0x516>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a6e      	ldr	r2, [pc, #440]	; (8009d90 <HAL_DMA_IRQHandler+0x6cc>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d10a      	bne.n	8009bf0 <HAL_DMA_IRQHandler+0x52c>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bf14      	ite	ne
 8009be8:	2301      	movne	r3, #1
 8009bea:	2300      	moveq	r3, #0
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	e009      	b.n	8009c04 <HAL_DMA_IRQHandler+0x540>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0304 	and.w	r3, r3, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bf14      	ite	ne
 8009bfe:	2301      	movne	r3, #1
 8009c00:	2300      	moveq	r3, #0
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d03e      	beq.n	8009c86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c0c:	f003 031f 	and.w	r3, r3, #31
 8009c10:	2210      	movs	r2, #16
 8009c12:	409a      	lsls	r2, r3
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d018      	beq.n	8009c58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d108      	bne.n	8009c46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d024      	beq.n	8009c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	4798      	blx	r3
 8009c44:	e01f      	b.n	8009c86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d01b      	beq.n	8009c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	4798      	blx	r3
 8009c56:	e016      	b.n	8009c86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d107      	bne.n	8009c76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0208 	bic.w	r2, r2, #8
 8009c74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c8a:	f003 031f 	and.w	r3, r3, #31
 8009c8e:	2220      	movs	r2, #32
 8009c90:	409a      	lsls	r2, r3
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	4013      	ands	r3, r2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 8110 	beq.w	8009ebc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a2c      	ldr	r2, [pc, #176]	; (8009d54 <HAL_DMA_IRQHandler+0x690>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d04a      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a2b      	ldr	r2, [pc, #172]	; (8009d58 <HAL_DMA_IRQHandler+0x694>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d045      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a29      	ldr	r2, [pc, #164]	; (8009d5c <HAL_DMA_IRQHandler+0x698>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d040      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a28      	ldr	r2, [pc, #160]	; (8009d60 <HAL_DMA_IRQHandler+0x69c>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d03b      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a26      	ldr	r2, [pc, #152]	; (8009d64 <HAL_DMA_IRQHandler+0x6a0>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d036      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a25      	ldr	r2, [pc, #148]	; (8009d68 <HAL_DMA_IRQHandler+0x6a4>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d031      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a23      	ldr	r2, [pc, #140]	; (8009d6c <HAL_DMA_IRQHandler+0x6a8>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d02c      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a22      	ldr	r2, [pc, #136]	; (8009d70 <HAL_DMA_IRQHandler+0x6ac>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d027      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a20      	ldr	r2, [pc, #128]	; (8009d74 <HAL_DMA_IRQHandler+0x6b0>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d022      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a1f      	ldr	r2, [pc, #124]	; (8009d78 <HAL_DMA_IRQHandler+0x6b4>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d01d      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <HAL_DMA_IRQHandler+0x6b8>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d018      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a1c      	ldr	r2, [pc, #112]	; (8009d80 <HAL_DMA_IRQHandler+0x6bc>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d013      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a1a      	ldr	r2, [pc, #104]	; (8009d84 <HAL_DMA_IRQHandler+0x6c0>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d00e      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a19      	ldr	r2, [pc, #100]	; (8009d88 <HAL_DMA_IRQHandler+0x6c4>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d009      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a17      	ldr	r2, [pc, #92]	; (8009d8c <HAL_DMA_IRQHandler+0x6c8>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d004      	beq.n	8009d3c <HAL_DMA_IRQHandler+0x678>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a16      	ldr	r2, [pc, #88]	; (8009d90 <HAL_DMA_IRQHandler+0x6cc>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d12b      	bne.n	8009d94 <HAL_DMA_IRQHandler+0x6d0>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0310 	and.w	r3, r3, #16
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bf14      	ite	ne
 8009d4a:	2301      	movne	r3, #1
 8009d4c:	2300      	moveq	r3, #0
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	e02a      	b.n	8009da8 <HAL_DMA_IRQHandler+0x6e4>
 8009d52:	bf00      	nop
 8009d54:	40020010 	.word	0x40020010
 8009d58:	40020028 	.word	0x40020028
 8009d5c:	40020040 	.word	0x40020040
 8009d60:	40020058 	.word	0x40020058
 8009d64:	40020070 	.word	0x40020070
 8009d68:	40020088 	.word	0x40020088
 8009d6c:	400200a0 	.word	0x400200a0
 8009d70:	400200b8 	.word	0x400200b8
 8009d74:	40020410 	.word	0x40020410
 8009d78:	40020428 	.word	0x40020428
 8009d7c:	40020440 	.word	0x40020440
 8009d80:	40020458 	.word	0x40020458
 8009d84:	40020470 	.word	0x40020470
 8009d88:	40020488 	.word	0x40020488
 8009d8c:	400204a0 	.word	0x400204a0
 8009d90:	400204b8 	.word	0x400204b8
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	bf14      	ite	ne
 8009da2:	2301      	movne	r3, #1
 8009da4:	2300      	moveq	r3, #0
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8087 	beq.w	8009ebc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db2:	f003 031f 	and.w	r3, r3, #31
 8009db6:	2220      	movs	r2, #32
 8009db8:	409a      	lsls	r2, r3
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d139      	bne.n	8009e3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f022 0216 	bic.w	r2, r2, #22
 8009dd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	695a      	ldr	r2, [r3, #20]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009de8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d103      	bne.n	8009dfa <HAL_DMA_IRQHandler+0x736>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d007      	beq.n	8009e0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0208 	bic.w	r2, r2, #8
 8009e08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e0e:	f003 031f 	and.w	r3, r3, #31
 8009e12:	223f      	movs	r2, #63	; 0x3f
 8009e14:	409a      	lsls	r2, r3
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 834a 	beq.w	800a4c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	4798      	blx	r3
          }
          return;
 8009e3c:	e344      	b.n	800a4c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d018      	beq.n	8009e7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d108      	bne.n	8009e6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d02c      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
 8009e6a:	e027      	b.n	8009ebc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d023      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	4798      	blx	r3
 8009e7c:	e01e      	b.n	8009ebc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10f      	bne.n	8009eac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f022 0210 	bic.w	r2, r2, #16
 8009e9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d003      	beq.n	8009ebc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 8306 	beq.w	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 8088 	beq.w	8009fe4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2204      	movs	r2, #4
 8009ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a7a      	ldr	r2, [pc, #488]	; (800a0cc <HAL_DMA_IRQHandler+0xa08>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d04a      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a79      	ldr	r2, [pc, #484]	; (800a0d0 <HAL_DMA_IRQHandler+0xa0c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d045      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a77      	ldr	r2, [pc, #476]	; (800a0d4 <HAL_DMA_IRQHandler+0xa10>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d040      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a76      	ldr	r2, [pc, #472]	; (800a0d8 <HAL_DMA_IRQHandler+0xa14>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d03b      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a74      	ldr	r2, [pc, #464]	; (800a0dc <HAL_DMA_IRQHandler+0xa18>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d036      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a73      	ldr	r2, [pc, #460]	; (800a0e0 <HAL_DMA_IRQHandler+0xa1c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d031      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a71      	ldr	r2, [pc, #452]	; (800a0e4 <HAL_DMA_IRQHandler+0xa20>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d02c      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a70      	ldr	r2, [pc, #448]	; (800a0e8 <HAL_DMA_IRQHandler+0xa24>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d027      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a6e      	ldr	r2, [pc, #440]	; (800a0ec <HAL_DMA_IRQHandler+0xa28>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d022      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a6d      	ldr	r2, [pc, #436]	; (800a0f0 <HAL_DMA_IRQHandler+0xa2c>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d01d      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a6b      	ldr	r2, [pc, #428]	; (800a0f4 <HAL_DMA_IRQHandler+0xa30>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d018      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a6a      	ldr	r2, [pc, #424]	; (800a0f8 <HAL_DMA_IRQHandler+0xa34>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d013      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a68      	ldr	r2, [pc, #416]	; (800a0fc <HAL_DMA_IRQHandler+0xa38>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d00e      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a67      	ldr	r2, [pc, #412]	; (800a100 <HAL_DMA_IRQHandler+0xa3c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d009      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a65      	ldr	r2, [pc, #404]	; (800a104 <HAL_DMA_IRQHandler+0xa40>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d004      	beq.n	8009f7c <HAL_DMA_IRQHandler+0x8b8>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a64      	ldr	r2, [pc, #400]	; (800a108 <HAL_DMA_IRQHandler+0xa44>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d108      	bne.n	8009f8e <HAL_DMA_IRQHandler+0x8ca>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0201 	bic.w	r2, r2, #1
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	e007      	b.n	8009f9e <HAL_DMA_IRQHandler+0x8da>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0201 	bic.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d307      	bcc.n	8009fba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1f2      	bne.n	8009f9e <HAL_DMA_IRQHandler+0x8da>
 8009fb8:	e000      	b.n	8009fbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009fba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d004      	beq.n	8009fd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2203      	movs	r2, #3
 8009fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009fd2:	e003      	b.n	8009fdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 8272 	beq.w	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
 8009ff6:	e26c      	b.n	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a43      	ldr	r2, [pc, #268]	; (800a10c <HAL_DMA_IRQHandler+0xa48>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d022      	beq.n	800a048 <HAL_DMA_IRQHandler+0x984>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a42      	ldr	r2, [pc, #264]	; (800a110 <HAL_DMA_IRQHandler+0xa4c>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d01d      	beq.n	800a048 <HAL_DMA_IRQHandler+0x984>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a40      	ldr	r2, [pc, #256]	; (800a114 <HAL_DMA_IRQHandler+0xa50>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d018      	beq.n	800a048 <HAL_DMA_IRQHandler+0x984>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a3f      	ldr	r2, [pc, #252]	; (800a118 <HAL_DMA_IRQHandler+0xa54>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d013      	beq.n	800a048 <HAL_DMA_IRQHandler+0x984>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a3d      	ldr	r2, [pc, #244]	; (800a11c <HAL_DMA_IRQHandler+0xa58>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d00e      	beq.n	800a048 <HAL_DMA_IRQHandler+0x984>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a3c      	ldr	r2, [pc, #240]	; (800a120 <HAL_DMA_IRQHandler+0xa5c>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d009      	beq.n	800a048 <HAL_DMA_IRQHandler+0x984>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a3a      	ldr	r2, [pc, #232]	; (800a124 <HAL_DMA_IRQHandler+0xa60>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d004      	beq.n	800a048 <HAL_DMA_IRQHandler+0x984>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a39      	ldr	r2, [pc, #228]	; (800a128 <HAL_DMA_IRQHandler+0xa64>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d101      	bne.n	800a04c <HAL_DMA_IRQHandler+0x988>
 800a048:	2301      	movs	r3, #1
 800a04a:	e000      	b.n	800a04e <HAL_DMA_IRQHandler+0x98a>
 800a04c:	2300      	movs	r3, #0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 823f 	beq.w	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a060:	f003 031f 	and.w	r3, r3, #31
 800a064:	2204      	movs	r2, #4
 800a066:	409a      	lsls	r2, r3
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	4013      	ands	r3, r2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 80cd 	beq.w	800a20c <HAL_DMA_IRQHandler+0xb48>
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 80c7 	beq.w	800a20c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a082:	f003 031f 	and.w	r3, r3, #31
 800a086:	2204      	movs	r2, #4
 800a088:	409a      	lsls	r2, r3
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d049      	beq.n	800a12c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d109      	bne.n	800a0b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 8210 	beq.w	800a4cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a0b4:	e20a      	b.n	800a4cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 8206 	beq.w	800a4cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a0c8:	e200      	b.n	800a4cc <HAL_DMA_IRQHandler+0xe08>
 800a0ca:	bf00      	nop
 800a0cc:	40020010 	.word	0x40020010
 800a0d0:	40020028 	.word	0x40020028
 800a0d4:	40020040 	.word	0x40020040
 800a0d8:	40020058 	.word	0x40020058
 800a0dc:	40020070 	.word	0x40020070
 800a0e0:	40020088 	.word	0x40020088
 800a0e4:	400200a0 	.word	0x400200a0
 800a0e8:	400200b8 	.word	0x400200b8
 800a0ec:	40020410 	.word	0x40020410
 800a0f0:	40020428 	.word	0x40020428
 800a0f4:	40020440 	.word	0x40020440
 800a0f8:	40020458 	.word	0x40020458
 800a0fc:	40020470 	.word	0x40020470
 800a100:	40020488 	.word	0x40020488
 800a104:	400204a0 	.word	0x400204a0
 800a108:	400204b8 	.word	0x400204b8
 800a10c:	58025408 	.word	0x58025408
 800a110:	5802541c 	.word	0x5802541c
 800a114:	58025430 	.word	0x58025430
 800a118:	58025444 	.word	0x58025444
 800a11c:	58025458 	.word	0x58025458
 800a120:	5802546c 	.word	0x5802546c
 800a124:	58025480 	.word	0x58025480
 800a128:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f003 0320 	and.w	r3, r3, #32
 800a132:	2b00      	cmp	r3, #0
 800a134:	d160      	bne.n	800a1f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a7f      	ldr	r2, [pc, #508]	; (800a338 <HAL_DMA_IRQHandler+0xc74>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d04a      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a7d      	ldr	r2, [pc, #500]	; (800a33c <HAL_DMA_IRQHandler+0xc78>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d045      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a7c      	ldr	r2, [pc, #496]	; (800a340 <HAL_DMA_IRQHandler+0xc7c>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d040      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a7a      	ldr	r2, [pc, #488]	; (800a344 <HAL_DMA_IRQHandler+0xc80>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d03b      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a79      	ldr	r2, [pc, #484]	; (800a348 <HAL_DMA_IRQHandler+0xc84>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d036      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a77      	ldr	r2, [pc, #476]	; (800a34c <HAL_DMA_IRQHandler+0xc88>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d031      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a76      	ldr	r2, [pc, #472]	; (800a350 <HAL_DMA_IRQHandler+0xc8c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d02c      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a74      	ldr	r2, [pc, #464]	; (800a354 <HAL_DMA_IRQHandler+0xc90>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d027      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a73      	ldr	r2, [pc, #460]	; (800a358 <HAL_DMA_IRQHandler+0xc94>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d022      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a71      	ldr	r2, [pc, #452]	; (800a35c <HAL_DMA_IRQHandler+0xc98>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d01d      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a70      	ldr	r2, [pc, #448]	; (800a360 <HAL_DMA_IRQHandler+0xc9c>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d018      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a6e      	ldr	r2, [pc, #440]	; (800a364 <HAL_DMA_IRQHandler+0xca0>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d013      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a6d      	ldr	r2, [pc, #436]	; (800a368 <HAL_DMA_IRQHandler+0xca4>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d00e      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a6b      	ldr	r2, [pc, #428]	; (800a36c <HAL_DMA_IRQHandler+0xca8>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d009      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a6a      	ldr	r2, [pc, #424]	; (800a370 <HAL_DMA_IRQHandler+0xcac>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d004      	beq.n	800a1d6 <HAL_DMA_IRQHandler+0xb12>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a68      	ldr	r2, [pc, #416]	; (800a374 <HAL_DMA_IRQHandler+0xcb0>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d108      	bne.n	800a1e8 <HAL_DMA_IRQHandler+0xb24>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f022 0208 	bic.w	r2, r2, #8
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	e007      	b.n	800a1f8 <HAL_DMA_IRQHandler+0xb34>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f022 0204 	bic.w	r2, r2, #4
 800a1f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 8165 	beq.w	800a4cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a20a:	e15f      	b.n	800a4cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a210:	f003 031f 	and.w	r3, r3, #31
 800a214:	2202      	movs	r2, #2
 800a216:	409a      	lsls	r2, r3
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	4013      	ands	r3, r2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 80c5 	beq.w	800a3ac <HAL_DMA_IRQHandler+0xce8>
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f003 0302 	and.w	r3, r3, #2
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 80bf 	beq.w	800a3ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a232:	f003 031f 	and.w	r3, r3, #31
 800a236:	2202      	movs	r2, #2
 800a238:	409a      	lsls	r2, r3
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d018      	beq.n	800a27a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d109      	bne.n	800a266 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 813a 	beq.w	800a4d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a264:	e134      	b.n	800a4d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 8130 	beq.w	800a4d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a278:	e12a      	b.n	800a4d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f003 0320 	and.w	r3, r3, #32
 800a280:	2b00      	cmp	r3, #0
 800a282:	f040 8089 	bne.w	800a398 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a2b      	ldr	r2, [pc, #172]	; (800a338 <HAL_DMA_IRQHandler+0xc74>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d04a      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a29      	ldr	r2, [pc, #164]	; (800a33c <HAL_DMA_IRQHandler+0xc78>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d045      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a28      	ldr	r2, [pc, #160]	; (800a340 <HAL_DMA_IRQHandler+0xc7c>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d040      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a26      	ldr	r2, [pc, #152]	; (800a344 <HAL_DMA_IRQHandler+0xc80>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d03b      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a25      	ldr	r2, [pc, #148]	; (800a348 <HAL_DMA_IRQHandler+0xc84>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d036      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a23      	ldr	r2, [pc, #140]	; (800a34c <HAL_DMA_IRQHandler+0xc88>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d031      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a22      	ldr	r2, [pc, #136]	; (800a350 <HAL_DMA_IRQHandler+0xc8c>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d02c      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a20      	ldr	r2, [pc, #128]	; (800a354 <HAL_DMA_IRQHandler+0xc90>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d027      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a1f      	ldr	r2, [pc, #124]	; (800a358 <HAL_DMA_IRQHandler+0xc94>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d022      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a1d      	ldr	r2, [pc, #116]	; (800a35c <HAL_DMA_IRQHandler+0xc98>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d01d      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a1c      	ldr	r2, [pc, #112]	; (800a360 <HAL_DMA_IRQHandler+0xc9c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d018      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a1a      	ldr	r2, [pc, #104]	; (800a364 <HAL_DMA_IRQHandler+0xca0>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d013      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a19      	ldr	r2, [pc, #100]	; (800a368 <HAL_DMA_IRQHandler+0xca4>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d00e      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a17      	ldr	r2, [pc, #92]	; (800a36c <HAL_DMA_IRQHandler+0xca8>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d009      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a16      	ldr	r2, [pc, #88]	; (800a370 <HAL_DMA_IRQHandler+0xcac>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d004      	beq.n	800a326 <HAL_DMA_IRQHandler+0xc62>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a14      	ldr	r2, [pc, #80]	; (800a374 <HAL_DMA_IRQHandler+0xcb0>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d128      	bne.n	800a378 <HAL_DMA_IRQHandler+0xcb4>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0214 	bic.w	r2, r2, #20
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	e027      	b.n	800a388 <HAL_DMA_IRQHandler+0xcc4>
 800a338:	40020010 	.word	0x40020010
 800a33c:	40020028 	.word	0x40020028
 800a340:	40020040 	.word	0x40020040
 800a344:	40020058 	.word	0x40020058
 800a348:	40020070 	.word	0x40020070
 800a34c:	40020088 	.word	0x40020088
 800a350:	400200a0 	.word	0x400200a0
 800a354:	400200b8 	.word	0x400200b8
 800a358:	40020410 	.word	0x40020410
 800a35c:	40020428 	.word	0x40020428
 800a360:	40020440 	.word	0x40020440
 800a364:	40020458 	.word	0x40020458
 800a368:	40020470 	.word	0x40020470
 800a36c:	40020488 	.word	0x40020488
 800a370:	400204a0 	.word	0x400204a0
 800a374:	400204b8 	.word	0x400204b8
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f022 020a 	bic.w	r2, r2, #10
 800a386:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 8097 	beq.w	800a4d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3aa:	e091      	b.n	800a4d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3b0:	f003 031f 	and.w	r3, r3, #31
 800a3b4:	2208      	movs	r2, #8
 800a3b6:	409a      	lsls	r2, r3
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8088 	beq.w	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 8082 	beq.w	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a41      	ldr	r2, [pc, #260]	; (800a4d8 <HAL_DMA_IRQHandler+0xe14>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d04a      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a3f      	ldr	r2, [pc, #252]	; (800a4dc <HAL_DMA_IRQHandler+0xe18>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d045      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a3e      	ldr	r2, [pc, #248]	; (800a4e0 <HAL_DMA_IRQHandler+0xe1c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d040      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a3c      	ldr	r2, [pc, #240]	; (800a4e4 <HAL_DMA_IRQHandler+0xe20>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d03b      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a3b      	ldr	r2, [pc, #236]	; (800a4e8 <HAL_DMA_IRQHandler+0xe24>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d036      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a39      	ldr	r2, [pc, #228]	; (800a4ec <HAL_DMA_IRQHandler+0xe28>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d031      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a38      	ldr	r2, [pc, #224]	; (800a4f0 <HAL_DMA_IRQHandler+0xe2c>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d02c      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a36      	ldr	r2, [pc, #216]	; (800a4f4 <HAL_DMA_IRQHandler+0xe30>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d027      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a35      	ldr	r2, [pc, #212]	; (800a4f8 <HAL_DMA_IRQHandler+0xe34>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d022      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a33      	ldr	r2, [pc, #204]	; (800a4fc <HAL_DMA_IRQHandler+0xe38>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d01d      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a32      	ldr	r2, [pc, #200]	; (800a500 <HAL_DMA_IRQHandler+0xe3c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d018      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a30      	ldr	r2, [pc, #192]	; (800a504 <HAL_DMA_IRQHandler+0xe40>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d013      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a2f      	ldr	r2, [pc, #188]	; (800a508 <HAL_DMA_IRQHandler+0xe44>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d00e      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a2d      	ldr	r2, [pc, #180]	; (800a50c <HAL_DMA_IRQHandler+0xe48>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d009      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a2c      	ldr	r2, [pc, #176]	; (800a510 <HAL_DMA_IRQHandler+0xe4c>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d004      	beq.n	800a46e <HAL_DMA_IRQHandler+0xdaa>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a2a      	ldr	r2, [pc, #168]	; (800a514 <HAL_DMA_IRQHandler+0xe50>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d108      	bne.n	800a480 <HAL_DMA_IRQHandler+0xdbc>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 021c 	bic.w	r2, r2, #28
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	e007      	b.n	800a490 <HAL_DMA_IRQHandler+0xdcc>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f022 020e 	bic.w	r2, r2, #14
 800a48e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a494:	f003 031f 	and.w	r3, r3, #31
 800a498:	2201      	movs	r2, #1
 800a49a:	409a      	lsls	r2, r3
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d009      	beq.n	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	4798      	blx	r3
 800a4c6:	e004      	b.n	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a4c8:	bf00      	nop
 800a4ca:	e002      	b.n	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a4cc:	bf00      	nop
 800a4ce:	e000      	b.n	800a4d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a4d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a4d2:	3728      	adds	r7, #40	; 0x28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	40020010 	.word	0x40020010
 800a4dc:	40020028 	.word	0x40020028
 800a4e0:	40020040 	.word	0x40020040
 800a4e4:	40020058 	.word	0x40020058
 800a4e8:	40020070 	.word	0x40020070
 800a4ec:	40020088 	.word	0x40020088
 800a4f0:	400200a0 	.word	0x400200a0
 800a4f4:	400200b8 	.word	0x400200b8
 800a4f8:	40020410 	.word	0x40020410
 800a4fc:	40020428 	.word	0x40020428
 800a500:	40020440 	.word	0x40020440
 800a504:	40020458 	.word	0x40020458
 800a508:	40020470 	.word	0x40020470
 800a50c:	40020488 	.word	0x40020488
 800a510:	400204a0 	.word	0x400204a0
 800a514:	400204b8 	.word	0x400204b8

0800a518 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a526:	b2db      	uxtb	r3, r3
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a540:	4618      	mov	r0, r3
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a564:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a7f      	ldr	r2, [pc, #508]	; (800a768 <DMA_SetConfig+0x21c>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d072      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a7d      	ldr	r2, [pc, #500]	; (800a76c <DMA_SetConfig+0x220>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d06d      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a7c      	ldr	r2, [pc, #496]	; (800a770 <DMA_SetConfig+0x224>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d068      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a7a      	ldr	r2, [pc, #488]	; (800a774 <DMA_SetConfig+0x228>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d063      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a79      	ldr	r2, [pc, #484]	; (800a778 <DMA_SetConfig+0x22c>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d05e      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a77      	ldr	r2, [pc, #476]	; (800a77c <DMA_SetConfig+0x230>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d059      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a76      	ldr	r2, [pc, #472]	; (800a780 <DMA_SetConfig+0x234>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d054      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a74      	ldr	r2, [pc, #464]	; (800a784 <DMA_SetConfig+0x238>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d04f      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a73      	ldr	r2, [pc, #460]	; (800a788 <DMA_SetConfig+0x23c>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d04a      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a71      	ldr	r2, [pc, #452]	; (800a78c <DMA_SetConfig+0x240>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d045      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a70      	ldr	r2, [pc, #448]	; (800a790 <DMA_SetConfig+0x244>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d040      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a6e      	ldr	r2, [pc, #440]	; (800a794 <DMA_SetConfig+0x248>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d03b      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a6d      	ldr	r2, [pc, #436]	; (800a798 <DMA_SetConfig+0x24c>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d036      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a6b      	ldr	r2, [pc, #428]	; (800a79c <DMA_SetConfig+0x250>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d031      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a6a      	ldr	r2, [pc, #424]	; (800a7a0 <DMA_SetConfig+0x254>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d02c      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a68      	ldr	r2, [pc, #416]	; (800a7a4 <DMA_SetConfig+0x258>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d027      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a67      	ldr	r2, [pc, #412]	; (800a7a8 <DMA_SetConfig+0x25c>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d022      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a65      	ldr	r2, [pc, #404]	; (800a7ac <DMA_SetConfig+0x260>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d01d      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a64      	ldr	r2, [pc, #400]	; (800a7b0 <DMA_SetConfig+0x264>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d018      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a62      	ldr	r2, [pc, #392]	; (800a7b4 <DMA_SetConfig+0x268>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d013      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a61      	ldr	r2, [pc, #388]	; (800a7b8 <DMA_SetConfig+0x26c>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d00e      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a5f      	ldr	r2, [pc, #380]	; (800a7bc <DMA_SetConfig+0x270>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d009      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a5e      	ldr	r2, [pc, #376]	; (800a7c0 <DMA_SetConfig+0x274>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d004      	beq.n	800a656 <DMA_SetConfig+0x10a>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a5c      	ldr	r2, [pc, #368]	; (800a7c4 <DMA_SetConfig+0x278>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d101      	bne.n	800a65a <DMA_SetConfig+0x10e>
 800a656:	2301      	movs	r3, #1
 800a658:	e000      	b.n	800a65c <DMA_SetConfig+0x110>
 800a65a:	2300      	movs	r3, #0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00d      	beq.n	800a67c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a668:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d004      	beq.n	800a67c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a67a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a39      	ldr	r2, [pc, #228]	; (800a768 <DMA_SetConfig+0x21c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d04a      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a38      	ldr	r2, [pc, #224]	; (800a76c <DMA_SetConfig+0x220>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d045      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a36      	ldr	r2, [pc, #216]	; (800a770 <DMA_SetConfig+0x224>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d040      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a35      	ldr	r2, [pc, #212]	; (800a774 <DMA_SetConfig+0x228>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d03b      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a33      	ldr	r2, [pc, #204]	; (800a778 <DMA_SetConfig+0x22c>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d036      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a32      	ldr	r2, [pc, #200]	; (800a77c <DMA_SetConfig+0x230>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d031      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a30      	ldr	r2, [pc, #192]	; (800a780 <DMA_SetConfig+0x234>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d02c      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a2f      	ldr	r2, [pc, #188]	; (800a784 <DMA_SetConfig+0x238>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d027      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a2d      	ldr	r2, [pc, #180]	; (800a788 <DMA_SetConfig+0x23c>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d022      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a2c      	ldr	r2, [pc, #176]	; (800a78c <DMA_SetConfig+0x240>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d01d      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a2a      	ldr	r2, [pc, #168]	; (800a790 <DMA_SetConfig+0x244>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d018      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a29      	ldr	r2, [pc, #164]	; (800a794 <DMA_SetConfig+0x248>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d013      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a27      	ldr	r2, [pc, #156]	; (800a798 <DMA_SetConfig+0x24c>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d00e      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a26      	ldr	r2, [pc, #152]	; (800a79c <DMA_SetConfig+0x250>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d009      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a24      	ldr	r2, [pc, #144]	; (800a7a0 <DMA_SetConfig+0x254>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d004      	beq.n	800a71c <DMA_SetConfig+0x1d0>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a23      	ldr	r2, [pc, #140]	; (800a7a4 <DMA_SetConfig+0x258>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d101      	bne.n	800a720 <DMA_SetConfig+0x1d4>
 800a71c:	2301      	movs	r3, #1
 800a71e:	e000      	b.n	800a722 <DMA_SetConfig+0x1d6>
 800a720:	2300      	movs	r3, #0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d059      	beq.n	800a7da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72a:	f003 031f 	and.w	r3, r3, #31
 800a72e:	223f      	movs	r2, #63	; 0x3f
 800a730:	409a      	lsls	r2, r3
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a744:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	2b40      	cmp	r3, #64	; 0x40
 800a754:	d138      	bne.n	800a7c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a766:	e086      	b.n	800a876 <DMA_SetConfig+0x32a>
 800a768:	40020010 	.word	0x40020010
 800a76c:	40020028 	.word	0x40020028
 800a770:	40020040 	.word	0x40020040
 800a774:	40020058 	.word	0x40020058
 800a778:	40020070 	.word	0x40020070
 800a77c:	40020088 	.word	0x40020088
 800a780:	400200a0 	.word	0x400200a0
 800a784:	400200b8 	.word	0x400200b8
 800a788:	40020410 	.word	0x40020410
 800a78c:	40020428 	.word	0x40020428
 800a790:	40020440 	.word	0x40020440
 800a794:	40020458 	.word	0x40020458
 800a798:	40020470 	.word	0x40020470
 800a79c:	40020488 	.word	0x40020488
 800a7a0:	400204a0 	.word	0x400204a0
 800a7a4:	400204b8 	.word	0x400204b8
 800a7a8:	58025408 	.word	0x58025408
 800a7ac:	5802541c 	.word	0x5802541c
 800a7b0:	58025430 	.word	0x58025430
 800a7b4:	58025444 	.word	0x58025444
 800a7b8:	58025458 	.word	0x58025458
 800a7bc:	5802546c 	.word	0x5802546c
 800a7c0:	58025480 	.word	0x58025480
 800a7c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	60da      	str	r2, [r3, #12]
}
 800a7d8:	e04d      	b.n	800a876 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a29      	ldr	r2, [pc, #164]	; (800a884 <DMA_SetConfig+0x338>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d022      	beq.n	800a82a <DMA_SetConfig+0x2de>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a27      	ldr	r2, [pc, #156]	; (800a888 <DMA_SetConfig+0x33c>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d01d      	beq.n	800a82a <DMA_SetConfig+0x2de>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a26      	ldr	r2, [pc, #152]	; (800a88c <DMA_SetConfig+0x340>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d018      	beq.n	800a82a <DMA_SetConfig+0x2de>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a24      	ldr	r2, [pc, #144]	; (800a890 <DMA_SetConfig+0x344>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d013      	beq.n	800a82a <DMA_SetConfig+0x2de>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a23      	ldr	r2, [pc, #140]	; (800a894 <DMA_SetConfig+0x348>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d00e      	beq.n	800a82a <DMA_SetConfig+0x2de>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a21      	ldr	r2, [pc, #132]	; (800a898 <DMA_SetConfig+0x34c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d009      	beq.n	800a82a <DMA_SetConfig+0x2de>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a20      	ldr	r2, [pc, #128]	; (800a89c <DMA_SetConfig+0x350>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d004      	beq.n	800a82a <DMA_SetConfig+0x2de>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a1e      	ldr	r2, [pc, #120]	; (800a8a0 <DMA_SetConfig+0x354>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d101      	bne.n	800a82e <DMA_SetConfig+0x2e2>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e000      	b.n	800a830 <DMA_SetConfig+0x2e4>
 800a82e:	2300      	movs	r3, #0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d020      	beq.n	800a876 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a838:	f003 031f 	and.w	r3, r3, #31
 800a83c:	2201      	movs	r2, #1
 800a83e:	409a      	lsls	r2, r3
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	2b40      	cmp	r3, #64	; 0x40
 800a852:	d108      	bne.n	800a866 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	60da      	str	r2, [r3, #12]
}
 800a864:	e007      	b.n	800a876 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	60da      	str	r2, [r3, #12]
}
 800a876:	bf00      	nop
 800a878:	371c      	adds	r7, #28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	58025408 	.word	0x58025408
 800a888:	5802541c 	.word	0x5802541c
 800a88c:	58025430 	.word	0x58025430
 800a890:	58025444 	.word	0x58025444
 800a894:	58025458 	.word	0x58025458
 800a898:	5802546c 	.word	0x5802546c
 800a89c:	58025480 	.word	0x58025480
 800a8a0:	58025494 	.word	0x58025494

0800a8a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a42      	ldr	r2, [pc, #264]	; (800a9bc <DMA_CalcBaseAndBitshift+0x118>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d04a      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a41      	ldr	r2, [pc, #260]	; (800a9c0 <DMA_CalcBaseAndBitshift+0x11c>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d045      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a3f      	ldr	r2, [pc, #252]	; (800a9c4 <DMA_CalcBaseAndBitshift+0x120>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d040      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a3e      	ldr	r2, [pc, #248]	; (800a9c8 <DMA_CalcBaseAndBitshift+0x124>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d03b      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a3c      	ldr	r2, [pc, #240]	; (800a9cc <DMA_CalcBaseAndBitshift+0x128>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d036      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a3b      	ldr	r2, [pc, #236]	; (800a9d0 <DMA_CalcBaseAndBitshift+0x12c>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d031      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a39      	ldr	r2, [pc, #228]	; (800a9d4 <DMA_CalcBaseAndBitshift+0x130>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d02c      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a38      	ldr	r2, [pc, #224]	; (800a9d8 <DMA_CalcBaseAndBitshift+0x134>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d027      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a36      	ldr	r2, [pc, #216]	; (800a9dc <DMA_CalcBaseAndBitshift+0x138>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d022      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a35      	ldr	r2, [pc, #212]	; (800a9e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d01d      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a33      	ldr	r2, [pc, #204]	; (800a9e4 <DMA_CalcBaseAndBitshift+0x140>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d018      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a32      	ldr	r2, [pc, #200]	; (800a9e8 <DMA_CalcBaseAndBitshift+0x144>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d013      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a30      	ldr	r2, [pc, #192]	; (800a9ec <DMA_CalcBaseAndBitshift+0x148>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d00e      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a2f      	ldr	r2, [pc, #188]	; (800a9f0 <DMA_CalcBaseAndBitshift+0x14c>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d009      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a2d      	ldr	r2, [pc, #180]	; (800a9f4 <DMA_CalcBaseAndBitshift+0x150>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d004      	beq.n	800a94c <DMA_CalcBaseAndBitshift+0xa8>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a2c      	ldr	r2, [pc, #176]	; (800a9f8 <DMA_CalcBaseAndBitshift+0x154>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d101      	bne.n	800a950 <DMA_CalcBaseAndBitshift+0xac>
 800a94c:	2301      	movs	r3, #1
 800a94e:	e000      	b.n	800a952 <DMA_CalcBaseAndBitshift+0xae>
 800a950:	2300      	movs	r3, #0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d024      	beq.n	800a9a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	3b10      	subs	r3, #16
 800a95e:	4a27      	ldr	r2, [pc, #156]	; (800a9fc <DMA_CalcBaseAndBitshift+0x158>)
 800a960:	fba2 2303 	umull	r2, r3, r2, r3
 800a964:	091b      	lsrs	r3, r3, #4
 800a966:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f003 0307 	and.w	r3, r3, #7
 800a96e:	4a24      	ldr	r2, [pc, #144]	; (800aa00 <DMA_CalcBaseAndBitshift+0x15c>)
 800a970:	5cd3      	ldrb	r3, [r2, r3]
 800a972:	461a      	mov	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d908      	bls.n	800a990 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	4b1f      	ldr	r3, [pc, #124]	; (800aa04 <DMA_CalcBaseAndBitshift+0x160>)
 800a986:	4013      	ands	r3, r2
 800a988:	1d1a      	adds	r2, r3, #4
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	659a      	str	r2, [r3, #88]	; 0x58
 800a98e:	e00d      	b.n	800a9ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	461a      	mov	r2, r3
 800a996:	4b1b      	ldr	r3, [pc, #108]	; (800aa04 <DMA_CalcBaseAndBitshift+0x160>)
 800a998:	4013      	ands	r3, r2
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	6593      	str	r3, [r2, #88]	; 0x58
 800a99e:	e005      	b.n	800a9ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	40020010 	.word	0x40020010
 800a9c0:	40020028 	.word	0x40020028
 800a9c4:	40020040 	.word	0x40020040
 800a9c8:	40020058 	.word	0x40020058
 800a9cc:	40020070 	.word	0x40020070
 800a9d0:	40020088 	.word	0x40020088
 800a9d4:	400200a0 	.word	0x400200a0
 800a9d8:	400200b8 	.word	0x400200b8
 800a9dc:	40020410 	.word	0x40020410
 800a9e0:	40020428 	.word	0x40020428
 800a9e4:	40020440 	.word	0x40020440
 800a9e8:	40020458 	.word	0x40020458
 800a9ec:	40020470 	.word	0x40020470
 800a9f0:	40020488 	.word	0x40020488
 800a9f4:	400204a0 	.word	0x400204a0
 800a9f8:	400204b8 	.word	0x400204b8
 800a9fc:	aaaaaaab 	.word	0xaaaaaaab
 800aa00:	0801b164 	.word	0x0801b164
 800aa04:	fffffc00 	.word	0xfffffc00

0800aa08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d120      	bne.n	800aa5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d858      	bhi.n	800aad6 <DMA_CheckFifoParam+0xce>
 800aa24:	a201      	add	r2, pc, #4	; (adr r2, 800aa2c <DMA_CheckFifoParam+0x24>)
 800aa26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2a:	bf00      	nop
 800aa2c:	0800aa3d 	.word	0x0800aa3d
 800aa30:	0800aa4f 	.word	0x0800aa4f
 800aa34:	0800aa3d 	.word	0x0800aa3d
 800aa38:	0800aad7 	.word	0x0800aad7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d048      	beq.n	800aada <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aa4c:	e045      	b.n	800aada <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa56:	d142      	bne.n	800aade <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aa5c:	e03f      	b.n	800aade <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa66:	d123      	bne.n	800aab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d838      	bhi.n	800aae2 <DMA_CheckFifoParam+0xda>
 800aa70:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <DMA_CheckFifoParam+0x70>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aa89 	.word	0x0800aa89
 800aa7c:	0800aa8f 	.word	0x0800aa8f
 800aa80:	0800aa89 	.word	0x0800aa89
 800aa84:	0800aaa1 	.word	0x0800aaa1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	73fb      	strb	r3, [r7, #15]
        break;
 800aa8c:	e030      	b.n	800aaf0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d025      	beq.n	800aae6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aa9e:	e022      	b.n	800aae6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aaa8:	d11f      	bne.n	800aaea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aaae:	e01c      	b.n	800aaea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d902      	bls.n	800aabe <DMA_CheckFifoParam+0xb6>
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d003      	beq.n	800aac4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800aabc:	e018      	b.n	800aaf0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	73fb      	strb	r3, [r7, #15]
        break;
 800aac2:	e015      	b.n	800aaf0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00e      	beq.n	800aaee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	73fb      	strb	r3, [r7, #15]
    break;
 800aad4:	e00b      	b.n	800aaee <DMA_CheckFifoParam+0xe6>
        break;
 800aad6:	bf00      	nop
 800aad8:	e00a      	b.n	800aaf0 <DMA_CheckFifoParam+0xe8>
        break;
 800aada:	bf00      	nop
 800aadc:	e008      	b.n	800aaf0 <DMA_CheckFifoParam+0xe8>
        break;
 800aade:	bf00      	nop
 800aae0:	e006      	b.n	800aaf0 <DMA_CheckFifoParam+0xe8>
        break;
 800aae2:	bf00      	nop
 800aae4:	e004      	b.n	800aaf0 <DMA_CheckFifoParam+0xe8>
        break;
 800aae6:	bf00      	nop
 800aae8:	e002      	b.n	800aaf0 <DMA_CheckFifoParam+0xe8>
        break;
 800aaea:	bf00      	nop
 800aaec:	e000      	b.n	800aaf0 <DMA_CheckFifoParam+0xe8>
    break;
 800aaee:	bf00      	nop
    }
  }

  return status;
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop

0800ab00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a38      	ldr	r2, [pc, #224]	; (800abf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d022      	beq.n	800ab5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a36      	ldr	r2, [pc, #216]	; (800abf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d01d      	beq.n	800ab5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a35      	ldr	r2, [pc, #212]	; (800abfc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d018      	beq.n	800ab5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a33      	ldr	r2, [pc, #204]	; (800ac00 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d013      	beq.n	800ab5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a32      	ldr	r2, [pc, #200]	; (800ac04 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d00e      	beq.n	800ab5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a30      	ldr	r2, [pc, #192]	; (800ac08 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d009      	beq.n	800ab5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a2f      	ldr	r2, [pc, #188]	; (800ac0c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d004      	beq.n	800ab5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a2d      	ldr	r2, [pc, #180]	; (800ac10 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d101      	bne.n	800ab62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e000      	b.n	800ab64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800ab62:	2300      	movs	r3, #0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01a      	beq.n	800ab9e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	3b08      	subs	r3, #8
 800ab70:	4a28      	ldr	r2, [pc, #160]	; (800ac14 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800ab72:	fba2 2303 	umull	r2, r3, r2, r3
 800ab76:	091b      	lsrs	r3, r3, #4
 800ab78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	4b26      	ldr	r3, [pc, #152]	; (800ac18 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ab7e:	4413      	add	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	461a      	mov	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a24      	ldr	r2, [pc, #144]	; (800ac1c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800ab8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f003 031f 	and.w	r3, r3, #31
 800ab94:	2201      	movs	r2, #1
 800ab96:	409a      	lsls	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ab9c:	e024      	b.n	800abe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	3b10      	subs	r3, #16
 800aba6:	4a1e      	ldr	r2, [pc, #120]	; (800ac20 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800aba8:	fba2 2303 	umull	r2, r3, r2, r3
 800abac:	091b      	lsrs	r3, r3, #4
 800abae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	4a1c      	ldr	r2, [pc, #112]	; (800ac24 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d806      	bhi.n	800abc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	4a1b      	ldr	r2, [pc, #108]	; (800ac28 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d902      	bls.n	800abc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3308      	adds	r3, #8
 800abc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	4b18      	ldr	r3, [pc, #96]	; (800ac2c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800abca:	4413      	add	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	461a      	mov	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a16      	ldr	r2, [pc, #88]	; (800ac30 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800abd8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f003 031f 	and.w	r3, r3, #31
 800abe0:	2201      	movs	r2, #1
 800abe2:	409a      	lsls	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800abe8:	bf00      	nop
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	58025408 	.word	0x58025408
 800abf8:	5802541c 	.word	0x5802541c
 800abfc:	58025430 	.word	0x58025430
 800ac00:	58025444 	.word	0x58025444
 800ac04:	58025458 	.word	0x58025458
 800ac08:	5802546c 	.word	0x5802546c
 800ac0c:	58025480 	.word	0x58025480
 800ac10:	58025494 	.word	0x58025494
 800ac14:	cccccccd 	.word	0xcccccccd
 800ac18:	16009600 	.word	0x16009600
 800ac1c:	58025880 	.word	0x58025880
 800ac20:	aaaaaaab 	.word	0xaaaaaaab
 800ac24:	400204b8 	.word	0x400204b8
 800ac28:	4002040f 	.word	0x4002040f
 800ac2c:	10008200 	.word	0x10008200
 800ac30:	40020880 	.word	0x40020880

0800ac34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d04a      	beq.n	800ace0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d847      	bhi.n	800ace0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a25      	ldr	r2, [pc, #148]	; (800acec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d022      	beq.n	800aca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a24      	ldr	r2, [pc, #144]	; (800acf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d01d      	beq.n	800aca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a22      	ldr	r2, [pc, #136]	; (800acf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d018      	beq.n	800aca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a21      	ldr	r2, [pc, #132]	; (800acf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d013      	beq.n	800aca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a1f      	ldr	r2, [pc, #124]	; (800acfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d00e      	beq.n	800aca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a1e      	ldr	r2, [pc, #120]	; (800ad00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d009      	beq.n	800aca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a1c      	ldr	r2, [pc, #112]	; (800ad04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d004      	beq.n	800aca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a1b      	ldr	r2, [pc, #108]	; (800ad08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d101      	bne.n	800aca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800aca0:	2301      	movs	r3, #1
 800aca2:	e000      	b.n	800aca6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800aca4:	2300      	movs	r3, #0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00a      	beq.n	800acc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	4b17      	ldr	r3, [pc, #92]	; (800ad0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	461a      	mov	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a15      	ldr	r2, [pc, #84]	; (800ad10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800acbc:	671a      	str	r2, [r3, #112]	; 0x70
 800acbe:	e009      	b.n	800acd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	4b14      	ldr	r3, [pc, #80]	; (800ad14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	461a      	mov	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a11      	ldr	r2, [pc, #68]	; (800ad18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800acd2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	2201      	movs	r2, #1
 800acda:	409a      	lsls	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800ace0:	bf00      	nop
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	58025408 	.word	0x58025408
 800acf0:	5802541c 	.word	0x5802541c
 800acf4:	58025430 	.word	0x58025430
 800acf8:	58025444 	.word	0x58025444
 800acfc:	58025458 	.word	0x58025458
 800ad00:	5802546c 	.word	0x5802546c
 800ad04:	58025480 	.word	0x58025480
 800ad08:	58025494 	.word	0x58025494
 800ad0c:	1600963f 	.word	0x1600963f
 800ad10:	58025940 	.word	0x58025940
 800ad14:	1000823f 	.word	0x1000823f
 800ad18:	40020940 	.word	0x40020940

0800ad1c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08a      	sub	sp, #40	; 0x28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800ad30:	2308      	movs	r3, #8
 800ad32:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ad34:	4b40      	ldr	r3, [pc, #256]	; (800ae38 <HAL_FLASH_Program+0x11c>)
 800ad36:	7d1b      	ldrb	r3, [r3, #20]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d101      	bne.n	800ad40 <HAL_FLASH_Program+0x24>
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	e076      	b.n	800ae2e <HAL_FLASH_Program+0x112>
 800ad40:	4b3d      	ldr	r3, [pc, #244]	; (800ae38 <HAL_FLASH_Program+0x11c>)
 800ad42:	2201      	movs	r2, #1
 800ad44:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad4c:	d306      	bcc.n	800ad5c <HAL_FLASH_Program+0x40>
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800ad54:	d202      	bcs.n	800ad5c <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800ad56:	2301      	movs	r3, #1
 800ad58:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800ad5a:	e00c      	b.n	800ad76 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800ad62:	d306      	bcc.n	800ad72 <HAL_FLASH_Program+0x56>
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800ad6a:	d202      	bcs.n	800ad72 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	61bb      	str	r3, [r7, #24]
 800ad70:	e001      	b.n	800ad76 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e05b      	b.n	800ae2e <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ad76:	4b30      	ldr	r3, [pc, #192]	; (800ae38 <HAL_FLASH_Program+0x11c>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800ad7c:	69b9      	ldr	r1, [r7, #24]
 800ad7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad82:	f000 f897 	bl	800aeb4 <FLASH_WaitForLastOperation>
 800ad86:	4603      	mov	r3, r0
 800ad88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800ad8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d147      	bne.n	800ae24 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d106      	bne.n	800ada8 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800ad9a:	4b28      	ldr	r3, [pc, #160]	; (800ae3c <HAL_FLASH_Program+0x120>)
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	4a27      	ldr	r2, [pc, #156]	; (800ae3c <HAL_FLASH_Program+0x120>)
 800ada0:	f043 0302 	orr.w	r3, r3, #2
 800ada4:	60d3      	str	r3, [r2, #12]
 800ada6:	e007      	b.n	800adb8 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800ada8:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <HAL_FLASH_Program+0x120>)
 800adaa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800adae:	4a23      	ldr	r2, [pc, #140]	; (800ae3c <HAL_FLASH_Program+0x120>)
 800adb0:	f043 0302 	orr.w	r3, r3, #2
 800adb4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800adb8:	f3bf 8f6f 	isb	sy
}
 800adbc:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800adbe:	f3bf 8f4f 	dsb	sy
}
 800adc2:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800adcc:	6a3b      	ldr	r3, [r7, #32]
 800adce:	3304      	adds	r3, #4
 800add0:	623b      	str	r3, [r7, #32]
        src_addr++;
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	3304      	adds	r3, #4
 800add6:	61fb      	str	r3, [r7, #28]
        row_index--;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	3b01      	subs	r3, #1
 800addc:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800adde:	7dfb      	ldrb	r3, [r7, #23]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1ef      	bne.n	800adc4 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800ade4:	f3bf 8f6f 	isb	sy
}
 800ade8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800adea:	f3bf 8f4f 	dsb	sy
}
 800adee:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800adf0:	69b9      	ldr	r1, [r7, #24]
 800adf2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800adf6:	f000 f85d 	bl	800aeb4 <FLASH_WaitForLastOperation>
 800adfa:	4603      	mov	r3, r0
 800adfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d106      	bne.n	800ae14 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800ae06:	4b0d      	ldr	r3, [pc, #52]	; (800ae3c <HAL_FLASH_Program+0x120>)
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	4a0c      	ldr	r2, [pc, #48]	; (800ae3c <HAL_FLASH_Program+0x120>)
 800ae0c:	f023 0302 	bic.w	r3, r3, #2
 800ae10:	60d3      	str	r3, [r2, #12]
 800ae12:	e007      	b.n	800ae24 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800ae14:	4b09      	ldr	r3, [pc, #36]	; (800ae3c <HAL_FLASH_Program+0x120>)
 800ae16:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae1a:	4a08      	ldr	r2, [pc, #32]	; (800ae3c <HAL_FLASH_Program+0x120>)
 800ae1c:	f023 0302 	bic.w	r3, r3, #2
 800ae20:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ae24:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <HAL_FLASH_Program+0x11c>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	751a      	strb	r2, [r3, #20]

  return status;
 800ae2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3728      	adds	r7, #40	; 0x28
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	24002000 	.word	0x24002000
 800ae3c:	52002000 	.word	0x52002000

0800ae40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ae40:	b480      	push	{r7}
 800ae42:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ae44:	4b18      	ldr	r3, [pc, #96]	; (800aea8 <HAL_FLASH_Unlock+0x68>)
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00d      	beq.n	800ae6c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800ae50:	4b15      	ldr	r3, [pc, #84]	; (800aea8 <HAL_FLASH_Unlock+0x68>)
 800ae52:	4a16      	ldr	r2, [pc, #88]	; (800aeac <HAL_FLASH_Unlock+0x6c>)
 800ae54:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800ae56:	4b14      	ldr	r3, [pc, #80]	; (800aea8 <HAL_FLASH_Unlock+0x68>)
 800ae58:	4a15      	ldr	r2, [pc, #84]	; (800aeb0 <HAL_FLASH_Unlock+0x70>)
 800ae5a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ae5c:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <HAL_FLASH_Unlock+0x68>)
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d001      	beq.n	800ae6c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e018      	b.n	800ae9e <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ae6c:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <HAL_FLASH_Unlock+0x68>)
 800ae6e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae72:	f003 0301 	and.w	r3, r3, #1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d010      	beq.n	800ae9c <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800ae7a:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <HAL_FLASH_Unlock+0x68>)
 800ae7c:	4a0b      	ldr	r2, [pc, #44]	; (800aeac <HAL_FLASH_Unlock+0x6c>)
 800ae7e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800ae82:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <HAL_FLASH_Unlock+0x68>)
 800ae84:	4a0a      	ldr	r2, [pc, #40]	; (800aeb0 <HAL_FLASH_Unlock+0x70>)
 800ae86:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ae8a:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <HAL_FLASH_Unlock+0x68>)
 800ae8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e000      	b.n	800ae9e <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	52002000 	.word	0x52002000
 800aeac:	45670123 	.word	0x45670123
 800aeb0:	cdef89ab 	.word	0xcdef89ab

0800aeb4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800aebe:	2304      	movs	r3, #4
 800aec0:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800aec6:	f7fa ffab 	bl	8005e20 <HAL_GetTick>
 800aeca:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d113      	bne.n	800aefa <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800aed2:	4b41      	ldr	r3, [pc, #260]	; (800afd8 <FLASH_WaitForLastOperation+0x124>)
 800aed4:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aed6:	e010      	b.n	800aefa <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aede:	d00c      	beq.n	800aefa <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aee0:	f7fa ff9e 	bl	8005e20 <HAL_GetTick>
 800aee4:	4602      	mov	r2, r0
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d302      	bcc.n	800aef6 <FLASH_WaitForLastOperation+0x42>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e06a      	b.n	800afd0 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	4b37      	ldr	r3, [pc, #220]	; (800afdc <FLASH_WaitForLastOperation+0x128>)
 800aefe:	4013      	ands	r3, r2
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	429a      	cmp	r2, r3
 800af04:	d10a      	bne.n	800af1c <FLASH_WaitForLastOperation+0x68>
 800af06:	4b36      	ldr	r3, [pc, #216]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800af08:	691a      	ldr	r2, [r3, #16]
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	4013      	ands	r3, r2
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	429a      	cmp	r2, r3
 800af12:	bf0c      	ite	eq
 800af14:	2301      	moveq	r3, #1
 800af16:	2300      	movne	r3, #0
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	e00c      	b.n	800af36 <FLASH_WaitForLastOperation+0x82>
 800af1c:	4b30      	ldr	r3, [pc, #192]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800af1e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800af22:	43da      	mvns	r2, r3
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	4013      	ands	r3, r2
 800af28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	bf0c      	ite	eq
 800af30:	2301      	moveq	r3, #1
 800af32:	2300      	movne	r3, #0
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1ce      	bne.n	800aed8 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d105      	bne.n	800af4c <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800af40:	4b27      	ldr	r3, [pc, #156]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800af42:	691a      	ldr	r2, [r3, #16]
 800af44:	4b27      	ldr	r3, [pc, #156]	; (800afe4 <FLASH_WaitForLastOperation+0x130>)
 800af46:	4013      	ands	r3, r2
 800af48:	613b      	str	r3, [r7, #16]
 800af4a:	e007      	b.n	800af5c <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800af4c:	4b24      	ldr	r3, [pc, #144]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800af4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800af52:	4b24      	ldr	r3, [pc, #144]	; (800afe4 <FLASH_WaitForLastOperation+0x130>)
 800af54:	4013      	ands	r3, r2
 800af56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af5a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af62:	2b00      	cmp	r3, #0
 800af64:	d017      	beq.n	800af96 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800af66:	4b20      	ldr	r3, [pc, #128]	; (800afe8 <FLASH_WaitForLastOperation+0x134>)
 800af68:	699a      	ldr	r2, [r3, #24]
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	4a1e      	ldr	r2, [pc, #120]	; (800afe8 <FLASH_WaitForLastOperation+0x134>)
 800af70:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	4b19      	ldr	r3, [pc, #100]	; (800afdc <FLASH_WaitForLastOperation+0x128>)
 800af76:	4013      	ands	r3, r2
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d103      	bne.n	800af86 <FLASH_WaitForLastOperation+0xd2>
 800af7e:	4a18      	ldr	r2, [pc, #96]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	6153      	str	r3, [r2, #20]
 800af84:	e005      	b.n	800af92 <FLASH_WaitForLastOperation+0xde>
 800af86:	4a16      	ldr	r2, [pc, #88]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af8e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e01c      	b.n	800afd0 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d10b      	bne.n	800afb4 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800af9c:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa8:	d111      	bne.n	800afce <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800afaa:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800afac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800afb0:	615a      	str	r2, [r3, #20]
 800afb2:	e00c      	b.n	800afce <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800afb4:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800afb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800afba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afc2:	d104      	bne.n	800afce <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800afc4:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <FLASH_WaitForLastOperation+0x12c>)
 800afc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800afca:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3718      	adds	r7, #24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	80000004 	.word	0x80000004
 800afdc:	1fef000f 	.word	0x1fef000f
 800afe0:	52002000 	.word	0x52002000
 800afe4:	17ee0000 	.word	0x17ee0000
 800afe8:	24002000 	.word	0x24002000

0800afec <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800affa:	4b5e      	ldr	r3, [pc, #376]	; (800b174 <HAL_FLASHEx_Erase+0x188>)
 800affc:	7d1b      	ldrb	r3, [r3, #20]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d101      	bne.n	800b006 <HAL_FLASHEx_Erase+0x1a>
 800b002:	2302      	movs	r3, #2
 800b004:	e0b2      	b.n	800b16c <HAL_FLASHEx_Erase+0x180>
 800b006:	4b5b      	ldr	r3, [pc, #364]	; (800b174 <HAL_FLASHEx_Erase+0x188>)
 800b008:	2201      	movs	r2, #1
 800b00a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b00c:	4b59      	ldr	r3, [pc, #356]	; (800b174 <HAL_FLASHEx_Erase+0x188>)
 800b00e:	2200      	movs	r2, #0
 800b010:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d009      	beq.n	800b032 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b01e:	2101      	movs	r1, #1
 800b020:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b024:	f7ff ff46 	bl	800aeb4 <FLASH_WaitForLastOperation>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	f003 0302 	and.w	r3, r3, #2
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d009      	beq.n	800b052 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b03e:	2102      	movs	r1, #2
 800b040:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b044:	f7ff ff36 	bl	800aeb4 <FLASH_WaitForLastOperation>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f040 8085 	bne.w	800b164 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d136      	bne.n	800b0d0 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	691a      	ldr	r2, [r3, #16]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f000 f887 	bl	800b180 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00f      	beq.n	800b09e <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b07e:	2101      	movs	r1, #1
 800b080:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b084:	f7ff ff16 	bl	800aeb4 <FLASH_WaitForLastOperation>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800b092:	4b39      	ldr	r3, [pc, #228]	; (800b178 <HAL_FLASHEx_Erase+0x18c>)
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	4a38      	ldr	r2, [pc, #224]	; (800b178 <HAL_FLASHEx_Erase+0x18c>)
 800b098:	f023 0308 	bic.w	r3, r3, #8
 800b09c:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d05c      	beq.n	800b164 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b0aa:	2102      	movs	r1, #2
 800b0ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b0b0:	f7ff ff00 	bl	800aeb4 <FLASH_WaitForLastOperation>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800b0be:	4b2e      	ldr	r3, [pc, #184]	; (800b178 <HAL_FLASHEx_Erase+0x18c>)
 800b0c0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b0c4:	4a2c      	ldr	r2, [pc, #176]	; (800b178 <HAL_FLASHEx_Erase+0x18c>)
 800b0c6:	f023 0308 	bic.w	r3, r3, #8
 800b0ca:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800b0ce:	e049      	b.n	800b164 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0d6:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	60bb      	str	r3, [r7, #8]
 800b0de:	e039      	b.n	800b154 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6859      	ldr	r1, [r3, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	68b8      	ldr	r0, [r7, #8]
 800b0ec:	f000 f8b2 	bl	800b254 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00c      	beq.n	800b116 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b102:	f7ff fed7 	bl	800aeb4 <FLASH_WaitForLastOperation>
 800b106:	4603      	mov	r3, r0
 800b108:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b10a:	4b1b      	ldr	r3, [pc, #108]	; (800b178 <HAL_FLASHEx_Erase+0x18c>)
 800b10c:	68da      	ldr	r2, [r3, #12]
 800b10e:	491a      	ldr	r1, [pc, #104]	; (800b178 <HAL_FLASHEx_Erase+0x18c>)
 800b110:	4b1a      	ldr	r3, [pc, #104]	; (800b17c <HAL_FLASHEx_Erase+0x190>)
 800b112:	4013      	ands	r3, r2
 800b114:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f003 0302 	and.w	r3, r3, #2
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00e      	beq.n	800b140 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800b122:	2102      	movs	r1, #2
 800b124:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b128:	f7ff fec4 	bl	800aeb4 <FLASH_WaitForLastOperation>
 800b12c:	4603      	mov	r3, r0
 800b12e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b130:	4b11      	ldr	r3, [pc, #68]	; (800b178 <HAL_FLASHEx_Erase+0x18c>)
 800b132:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b136:	4910      	ldr	r1, [pc, #64]	; (800b178 <HAL_FLASHEx_Erase+0x18c>)
 800b138:	4b10      	ldr	r3, [pc, #64]	; (800b17c <HAL_FLASHEx_Erase+0x190>)
 800b13a:	4013      	ands	r3, r2
 800b13c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800b140:	7bfb      	ldrb	r3, [r7, #15]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	601a      	str	r2, [r3, #0]
          break;
 800b14c:	e00a      	b.n	800b164 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	3301      	adds	r3, #1
 800b152:	60bb      	str	r3, [r7, #8]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	68da      	ldr	r2, [r3, #12]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	4413      	add	r3, r2
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	429a      	cmp	r2, r3
 800b162:	d3bd      	bcc.n	800b0e0 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b164:	4b03      	ldr	r3, [pc, #12]	; (800b174 <HAL_FLASHEx_Erase+0x188>)
 800b166:	2200      	movs	r2, #0
 800b168:	751a      	strb	r2, [r3, #20]

  return status;
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	24002000 	.word	0x24002000
 800b178:	52002000 	.word	0x52002000
 800b17c:	fffff8fb 	.word	0xfffff8fb

0800b180 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	2b03      	cmp	r3, #3
 800b192:	d122      	bne.n	800b1da <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b194:	4b2e      	ldr	r3, [pc, #184]	; (800b250 <FLASH_MassErase+0xd0>)
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	4a2d      	ldr	r2, [pc, #180]	; (800b250 <FLASH_MassErase+0xd0>)
 800b19a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b19e:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b1a0:	4b2b      	ldr	r3, [pc, #172]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1a2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b1a6:	4a2a      	ldr	r2, [pc, #168]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b1ac:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800b1b0:	4b27      	ldr	r3, [pc, #156]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1b2:	68da      	ldr	r2, [r3, #12]
 800b1b4:	4926      	ldr	r1, [pc, #152]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800b1bc:	4b24      	ldr	r3, [pc, #144]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1be:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b1c2:	4923      	ldr	r1, [pc, #140]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800b1cc:	4b20      	ldr	r3, [pc, #128]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	4a1f      	ldr	r2, [pc, #124]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1d2:	f043 0310 	orr.w	r3, r3, #16
 800b1d6:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800b1d8:	e033      	b.n	800b242 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d011      	beq.n	800b208 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b1e4:	4b1a      	ldr	r3, [pc, #104]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	4a19      	ldr	r2, [pc, #100]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b1ee:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800b1f0:	4b17      	ldr	r3, [pc, #92]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1f2:	68da      	ldr	r2, [r3, #12]
 800b1f4:	4916      	ldr	r1, [pc, #88]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800b1fc:	4b14      	ldr	r3, [pc, #80]	; (800b250 <FLASH_MassErase+0xd0>)
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	4a13      	ldr	r2, [pc, #76]	; (800b250 <FLASH_MassErase+0xd0>)
 800b202:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b206:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	f003 0302 	and.w	r3, r3, #2
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d017      	beq.n	800b242 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b212:	4b0f      	ldr	r3, [pc, #60]	; (800b250 <FLASH_MassErase+0xd0>)
 800b214:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b218:	4a0d      	ldr	r2, [pc, #52]	; (800b250 <FLASH_MassErase+0xd0>)
 800b21a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b21e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800b222:	4b0b      	ldr	r3, [pc, #44]	; (800b250 <FLASH_MassErase+0xd0>)
 800b224:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b228:	4909      	ldr	r1, [pc, #36]	; (800b250 <FLASH_MassErase+0xd0>)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800b232:	4b07      	ldr	r3, [pc, #28]	; (800b250 <FLASH_MassErase+0xd0>)
 800b234:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b238:	4a05      	ldr	r2, [pc, #20]	; (800b250 <FLASH_MassErase+0xd0>)
 800b23a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b23e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800b242:	bf00      	nop
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	52002000 	.word	0x52002000

0800b254 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	2b00      	cmp	r3, #0
 800b268:	d010      	beq.n	800b28c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b26a:	4b18      	ldr	r3, [pc, #96]	; (800b2cc <FLASH_Erase_Sector+0x78>)
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	4a17      	ldr	r2, [pc, #92]	; (800b2cc <FLASH_Erase_Sector+0x78>)
 800b270:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b274:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b276:	4b15      	ldr	r3, [pc, #84]	; (800b2cc <FLASH_Erase_Sector+0x78>)
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	0219      	lsls	r1, r3, #8
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	430b      	orrs	r3, r1
 800b282:	4313      	orrs	r3, r2
 800b284:	4a11      	ldr	r2, [pc, #68]	; (800b2cc <FLASH_Erase_Sector+0x78>)
 800b286:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b28a:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f003 0302 	and.w	r3, r3, #2
 800b292:	2b00      	cmp	r3, #0
 800b294:	d014      	beq.n	800b2c0 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b296:	4b0d      	ldr	r3, [pc, #52]	; (800b2cc <FLASH_Erase_Sector+0x78>)
 800b298:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b29c:	4a0b      	ldr	r2, [pc, #44]	; (800b2cc <FLASH_Erase_Sector+0x78>)
 800b29e:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b2a2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b2a6:	4b09      	ldr	r3, [pc, #36]	; (800b2cc <FLASH_Erase_Sector+0x78>)
 800b2a8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	0219      	lsls	r1, r3, #8
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	430b      	orrs	r3, r1
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	4a05      	ldr	r2, [pc, #20]	; (800b2cc <FLASH_Erase_Sector+0x78>)
 800b2b8:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b2bc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800b2c0:	bf00      	nop
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	52002000 	.word	0x52002000

0800b2d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b089      	sub	sp, #36	; 0x24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b2de:	4b89      	ldr	r3, [pc, #548]	; (800b504 <HAL_GPIO_Init+0x234>)
 800b2e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b2e2:	e194      	b.n	800b60e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 8186 	beq.w	800b608 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	f003 0303 	and.w	r3, r3, #3
 800b304:	2b01      	cmp	r3, #1
 800b306:	d005      	beq.n	800b314 <HAL_GPIO_Init+0x44>
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	f003 0303 	and.w	r3, r3, #3
 800b310:	2b02      	cmp	r3, #2
 800b312:	d130      	bne.n	800b376 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	2203      	movs	r2, #3
 800b320:	fa02 f303 	lsl.w	r3, r2, r3
 800b324:	43db      	mvns	r3, r3
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	4013      	ands	r3, r2
 800b32a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	68da      	ldr	r2, [r3, #12]
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	fa02 f303 	lsl.w	r3, r2, r3
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	69ba      	ldr	r2, [r7, #24]
 800b342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b34a:	2201      	movs	r2, #1
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	fa02 f303 	lsl.w	r3, r2, r3
 800b352:	43db      	mvns	r3, r3
 800b354:	69ba      	ldr	r2, [r7, #24]
 800b356:	4013      	ands	r3, r2
 800b358:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	091b      	lsrs	r3, r3, #4
 800b360:	f003 0201 	and.w	r2, r3, #1
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	fa02 f303 	lsl.w	r3, r2, r3
 800b36a:	69ba      	ldr	r2, [r7, #24]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	69ba      	ldr	r2, [r7, #24]
 800b374:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	f003 0303 	and.w	r3, r3, #3
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d017      	beq.n	800b3b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	2203      	movs	r2, #3
 800b38e:	fa02 f303 	lsl.w	r3, r2, r3
 800b392:	43db      	mvns	r3, r3
 800b394:	69ba      	ldr	r2, [r7, #24]
 800b396:	4013      	ands	r3, r2
 800b398:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	689a      	ldr	r2, [r3, #8]
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a6:	69ba      	ldr	r2, [r7, #24]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	69ba      	ldr	r2, [r7, #24]
 800b3b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f003 0303 	and.w	r3, r3, #3
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d123      	bne.n	800b406 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	08da      	lsrs	r2, r3, #3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3208      	adds	r2, #8
 800b3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	f003 0307 	and.w	r3, r3, #7
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	220f      	movs	r2, #15
 800b3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3da:	43db      	mvns	r3, r3
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	4013      	ands	r3, r2
 800b3e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	691a      	ldr	r2, [r3, #16]
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	f003 0307 	and.w	r3, r3, #7
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	08da      	lsrs	r2, r3, #3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	3208      	adds	r2, #8
 800b400:	69b9      	ldr	r1, [r7, #24]
 800b402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	2203      	movs	r2, #3
 800b412:	fa02 f303 	lsl.w	r3, r2, r3
 800b416:	43db      	mvns	r3, r3
 800b418:	69ba      	ldr	r2, [r7, #24]
 800b41a:	4013      	ands	r3, r2
 800b41c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	f003 0203 	and.w	r2, r3, #3
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	fa02 f303 	lsl.w	r3, r2, r3
 800b42e:	69ba      	ldr	r2, [r7, #24]
 800b430:	4313      	orrs	r3, r2
 800b432:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	69ba      	ldr	r2, [r7, #24]
 800b438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b442:	2b00      	cmp	r3, #0
 800b444:	f000 80e0 	beq.w	800b608 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b448:	4b2f      	ldr	r3, [pc, #188]	; (800b508 <HAL_GPIO_Init+0x238>)
 800b44a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b44e:	4a2e      	ldr	r2, [pc, #184]	; (800b508 <HAL_GPIO_Init+0x238>)
 800b450:	f043 0302 	orr.w	r3, r3, #2
 800b454:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b458:	4b2b      	ldr	r3, [pc, #172]	; (800b508 <HAL_GPIO_Init+0x238>)
 800b45a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b45e:	f003 0302 	and.w	r3, r3, #2
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b466:	4a29      	ldr	r2, [pc, #164]	; (800b50c <HAL_GPIO_Init+0x23c>)
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	089b      	lsrs	r3, r3, #2
 800b46c:	3302      	adds	r3, #2
 800b46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	f003 0303 	and.w	r3, r3, #3
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	220f      	movs	r2, #15
 800b47e:	fa02 f303 	lsl.w	r3, r2, r3
 800b482:	43db      	mvns	r3, r3
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	4013      	ands	r3, r2
 800b488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a20      	ldr	r2, [pc, #128]	; (800b510 <HAL_GPIO_Init+0x240>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d052      	beq.n	800b538 <HAL_GPIO_Init+0x268>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a1f      	ldr	r2, [pc, #124]	; (800b514 <HAL_GPIO_Init+0x244>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d031      	beq.n	800b4fe <HAL_GPIO_Init+0x22e>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a1e      	ldr	r2, [pc, #120]	; (800b518 <HAL_GPIO_Init+0x248>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d02b      	beq.n	800b4fa <HAL_GPIO_Init+0x22a>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a1d      	ldr	r2, [pc, #116]	; (800b51c <HAL_GPIO_Init+0x24c>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d025      	beq.n	800b4f6 <HAL_GPIO_Init+0x226>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a1c      	ldr	r2, [pc, #112]	; (800b520 <HAL_GPIO_Init+0x250>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d01f      	beq.n	800b4f2 <HAL_GPIO_Init+0x222>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a1b      	ldr	r2, [pc, #108]	; (800b524 <HAL_GPIO_Init+0x254>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d019      	beq.n	800b4ee <HAL_GPIO_Init+0x21e>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a1a      	ldr	r2, [pc, #104]	; (800b528 <HAL_GPIO_Init+0x258>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d013      	beq.n	800b4ea <HAL_GPIO_Init+0x21a>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a19      	ldr	r2, [pc, #100]	; (800b52c <HAL_GPIO_Init+0x25c>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d00d      	beq.n	800b4e6 <HAL_GPIO_Init+0x216>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a18      	ldr	r2, [pc, #96]	; (800b530 <HAL_GPIO_Init+0x260>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d007      	beq.n	800b4e2 <HAL_GPIO_Init+0x212>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a17      	ldr	r2, [pc, #92]	; (800b534 <HAL_GPIO_Init+0x264>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d101      	bne.n	800b4de <HAL_GPIO_Init+0x20e>
 800b4da:	2309      	movs	r3, #9
 800b4dc:	e02d      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b4de:	230a      	movs	r3, #10
 800b4e0:	e02b      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b4e2:	2308      	movs	r3, #8
 800b4e4:	e029      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b4e6:	2307      	movs	r3, #7
 800b4e8:	e027      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b4ea:	2306      	movs	r3, #6
 800b4ec:	e025      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b4ee:	2305      	movs	r3, #5
 800b4f0:	e023      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b4f2:	2304      	movs	r3, #4
 800b4f4:	e021      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e01f      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	e01d      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b4fe:	2301      	movs	r3, #1
 800b500:	e01b      	b.n	800b53a <HAL_GPIO_Init+0x26a>
 800b502:	bf00      	nop
 800b504:	58000080 	.word	0x58000080
 800b508:	58024400 	.word	0x58024400
 800b50c:	58000400 	.word	0x58000400
 800b510:	58020000 	.word	0x58020000
 800b514:	58020400 	.word	0x58020400
 800b518:	58020800 	.word	0x58020800
 800b51c:	58020c00 	.word	0x58020c00
 800b520:	58021000 	.word	0x58021000
 800b524:	58021400 	.word	0x58021400
 800b528:	58021800 	.word	0x58021800
 800b52c:	58021c00 	.word	0x58021c00
 800b530:	58022000 	.word	0x58022000
 800b534:	58022400 	.word	0x58022400
 800b538:	2300      	movs	r3, #0
 800b53a:	69fa      	ldr	r2, [r7, #28]
 800b53c:	f002 0203 	and.w	r2, r2, #3
 800b540:	0092      	lsls	r2, r2, #2
 800b542:	4093      	lsls	r3, r2
 800b544:	69ba      	ldr	r2, [r7, #24]
 800b546:	4313      	orrs	r3, r2
 800b548:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b54a:	4938      	ldr	r1, [pc, #224]	; (800b62c <HAL_GPIO_Init+0x35c>)
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	089b      	lsrs	r3, r3, #2
 800b550:	3302      	adds	r3, #2
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	43db      	mvns	r3, r3
 800b564:	69ba      	ldr	r2, [r7, #24]
 800b566:	4013      	ands	r3, r2
 800b568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b57e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	43db      	mvns	r3, r3
 800b592:	69ba      	ldr	r2, [r7, #24]
 800b594:	4013      	ands	r3, r2
 800b596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d003      	beq.n	800b5ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b5ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	43db      	mvns	r3, r3
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b5d0:	69ba      	ldr	r2, [r7, #24]
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	43db      	mvns	r3, r3
 800b5e8:	69ba      	ldr	r2, [r7, #24]
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	3301      	adds	r3, #1
 800b60c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	fa22 f303 	lsr.w	r3, r2, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f47f ae63 	bne.w	800b2e4 <HAL_GPIO_Init+0x14>
  }
}
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	3724      	adds	r7, #36	; 0x24
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	58000400 	.word	0x58000400

0800b630 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	691a      	ldr	r2, [r3, #16]
 800b640:	887b      	ldrh	r3, [r7, #2]
 800b642:	4013      	ands	r3, r2
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b648:	2301      	movs	r3, #1
 800b64a:	73fb      	strb	r3, [r7, #15]
 800b64c:	e001      	b.n	800b652 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b64e:	2300      	movs	r3, #0
 800b650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b652:	7bfb      	ldrb	r3, [r7, #15]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	807b      	strh	r3, [r7, #2]
 800b66c:	4613      	mov	r3, r2
 800b66e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b670:	787b      	ldrb	r3, [r7, #1]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b676:	887a      	ldrh	r2, [r7, #2]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b67c:	e003      	b.n	800b686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b67e:	887b      	ldrh	r3, [r7, #2]
 800b680:	041a      	lsls	r2, r3, #16
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	619a      	str	r2, [r3, #24]
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
	...

0800b694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d101      	bne.n	800b6a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e08b      	b.n	800b7be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7f7 f9d4 	bl	8002a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2224      	movs	r2, #36	; 0x24
 800b6c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f022 0201 	bic.w	r2, r2, #1
 800b6d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b6e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	689a      	ldr	r2, [r3, #8]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b6f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d107      	bne.n	800b70e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689a      	ldr	r2, [r3, #8]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b70a:	609a      	str	r2, [r3, #8]
 800b70c:	e006      	b.n	800b71c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689a      	ldr	r2, [r3, #8]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b71a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	2b02      	cmp	r3, #2
 800b722:	d108      	bne.n	800b736 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b732:	605a      	str	r2, [r3, #4]
 800b734:	e007      	b.n	800b746 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b744:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6859      	ldr	r1, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	4b1d      	ldr	r3, [pc, #116]	; (800b7c8 <HAL_I2C_Init+0x134>)
 800b752:	430b      	orrs	r3, r1
 800b754:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68da      	ldr	r2, [r3, #12]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b764:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691a      	ldr	r2, [r3, #16]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	430a      	orrs	r2, r1
 800b77e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	69d9      	ldr	r1, [r3, #28]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a1a      	ldr	r2, [r3, #32]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	430a      	orrs	r2, r1
 800b78e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f042 0201 	orr.w	r2, r2, #1
 800b79e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	02008000 	.word	0x02008000

0800b7cc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b08a      	sub	sp, #40	; 0x28
 800b7d0:	af02      	add	r7, sp, #8
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	607a      	str	r2, [r7, #4]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	460b      	mov	r3, r1
 800b7da:	817b      	strh	r3, [r7, #10]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b20      	cmp	r3, #32
 800b7ee:	f040 80ef 	bne.w	800b9d0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b800:	d101      	bne.n	800b806 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b802:	2302      	movs	r3, #2
 800b804:	e0e5      	b.n	800b9d2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d101      	bne.n	800b814 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b810:	2302      	movs	r3, #2
 800b812:	e0de      	b.n	800b9d2 <HAL_I2C_Master_Transmit_DMA+0x206>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2221      	movs	r2, #33	; 0x21
 800b820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2210      	movs	r2, #16
 800b828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	893a      	ldrh	r2, [r7, #8]
 800b83c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	4a66      	ldr	r2, [pc, #408]	; (800b9dc <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b842:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4a66      	ldr	r2, [pc, #408]	; (800b9e0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b848:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b84e:	b29b      	uxth	r3, r3
 800b850:	2bff      	cmp	r3, #255	; 0xff
 800b852:	d906      	bls.n	800b862 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	22ff      	movs	r2, #255	; 0xff
 800b858:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b85a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b85e:	61fb      	str	r3, [r7, #28]
 800b860:	e007      	b.n	800b872 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b866:	b29a      	uxth	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b86c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b870:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b876:	2b00      	cmp	r3, #0
 800b878:	d01a      	beq.n	800b8b0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87e:	781a      	ldrb	r2, [r3, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b894:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	3b01      	subs	r3, #1
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d074      	beq.n	800b9a2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d022      	beq.n	800b906 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c4:	4a47      	ldr	r2, [pc, #284]	; (800b9e4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b8c6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8cc:	4a46      	ldr	r2, [pc, #280]	; (800b9e8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b8ce:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8dc:	2200      	movs	r2, #0
 800b8de:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b8f0:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b8f6:	f7fc ff17 	bl	8008728 <HAL_DMA_Start_IT>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d13a      	bne.n	800b97a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b904:	e013      	b.n	800b92e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2220      	movs	r2, #32
 800b90a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e051      	b.n	800b9d2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b932:	b2db      	uxtb	r3, r3
 800b934:	3301      	adds	r3, #1
 800b936:	b2da      	uxtb	r2, r3
 800b938:	8979      	ldrh	r1, [r7, #10]
 800b93a:	4b2c      	ldr	r3, [pc, #176]	; (800b9ec <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f002 f83b 	bl	800d9bc <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	b29a      	uxth	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b960:	2110      	movs	r1, #16
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f002 f85c 	bl	800da20 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b976:	601a      	str	r2, [r3, #0]
 800b978:	e028      	b.n	800b9cc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2220      	movs	r2, #32
 800b97e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b98e:	f043 0210 	orr.w	r2, r3, #16
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e017      	b.n	800b9d2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4a12      	ldr	r2, [pc, #72]	; (800b9f0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b9a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	8979      	ldrh	r1, [r7, #10]
 800b9ae:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f002 f800 	bl	800d9bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f002 f82a 	bl	800da20 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e000      	b.n	800b9d2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b9d0:	2302      	movs	r3, #2
  }
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3720      	adds	r7, #32
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	ffff0000 	.word	0xffff0000
 800b9e0:	0800c227 	.word	0x0800c227
 800b9e4:	0800d5df 	.word	0x0800d5df
 800b9e8:	0800d70d 	.word	0x0800d70d
 800b9ec:	80002000 	.word	0x80002000
 800b9f0:	0800bdb7 	.word	0x0800bdb7

0800b9f4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af02      	add	r7, sp, #8
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	460b      	mov	r3, r1
 800ba02:	817b      	strh	r3, [r7, #10]
 800ba04:	4613      	mov	r3, r2
 800ba06:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	2b20      	cmp	r3, #32
 800ba12:	f040 80cd 	bne.w	800bbb0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba24:	d101      	bne.n	800ba2a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800ba26:	2302      	movs	r3, #2
 800ba28:	e0c3      	b.n	800bbb2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d101      	bne.n	800ba38 <HAL_I2C_Master_Receive_DMA+0x44>
 800ba34:	2302      	movs	r3, #2
 800ba36:	e0bc      	b.n	800bbb2 <HAL_I2C_Master_Receive_DMA+0x1be>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2222      	movs	r2, #34	; 0x22
 800ba44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2210      	movs	r2, #16
 800ba4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	893a      	ldrh	r2, [r7, #8]
 800ba60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	4a55      	ldr	r2, [pc, #340]	; (800bbbc <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800ba66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	4a55      	ldr	r2, [pc, #340]	; (800bbc0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800ba6c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	2bff      	cmp	r3, #255	; 0xff
 800ba76:	d906      	bls.n	800ba86 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	22ff      	movs	r2, #255	; 0xff
 800ba7c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800ba7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	e007      	b.n	800ba96 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ba90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba94:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d070      	beq.n	800bb80 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d020      	beq.n	800bae8 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baaa:	4a46      	ldr	r2, [pc, #280]	; (800bbc4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800baac:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab2:	4a45      	ldr	r2, [pc, #276]	; (800bbc8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800bab4:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baba:	2200      	movs	r2, #0
 800babc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac2:	2200      	movs	r2, #0
 800bac4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3324      	adds	r3, #36	; 0x24
 800bad0:	4619      	mov	r1, r3
 800bad2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bad8:	f7fc fe26 	bl	8008728 <HAL_DMA_Start_IT>
 800badc:	4603      	mov	r3, r0
 800bade:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bae0:	7cfb      	ldrb	r3, [r7, #19]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d138      	bne.n	800bb58 <HAL_I2C_Master_Receive_DMA+0x164>
 800bae6:	e013      	b.n	800bb10 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2220      	movs	r2, #32
 800baec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e050      	b.n	800bbb2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	8979      	ldrh	r1, [r7, #10]
 800bb18:	4b2c      	ldr	r3, [pc, #176]	; (800bbcc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f001 ff4c 	bl	800d9bc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bb3e:	2110      	movs	r1, #16
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f001 ff6d 	bl	800da20 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	e029      	b.n	800bbac <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb6c:	f043 0210 	orr.w	r2, r3, #16
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e018      	b.n	800bbb2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	4a13      	ldr	r2, [pc, #76]	; (800bbd0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800bb84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	8979      	ldrh	r1, [r7, #10]
 800bb8e:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f001 ff10 	bl	800d9bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bba4:	2102      	movs	r1, #2
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f001 ff3a 	bl	800da20 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	e000      	b.n	800bbb2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800bbb0:	2302      	movs	r3, #2
  }
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	ffff0000 	.word	0xffff0000
 800bbc0:	0800c227 	.word	0x0800c227
 800bbc4:	0800d675 	.word	0x0800d675
 800bbc8:	0800d70d 	.word	0x0800d70d
 800bbcc:	80002400 	.word	0x80002400
 800bbd0:	0800bdb7 	.word	0x0800bdb7

0800bbd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d005      	beq.n	800bc00 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	68f9      	ldr	r1, [r7, #12]
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	4798      	blx	r3
  }
}
 800bc00:	bf00      	nop
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	0a1b      	lsrs	r3, r3, #8
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d010      	beq.n	800bc4e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	09db      	lsrs	r3, r3, #7
 800bc30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00a      	beq.n	800bc4e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3c:	f043 0201 	orr.w	r2, r3, #1
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc4c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	0a9b      	lsrs	r3, r3, #10
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d010      	beq.n	800bc7c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	09db      	lsrs	r3, r3, #7
 800bc5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00a      	beq.n	800bc7c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc6a:	f043 0208 	orr.w	r2, r3, #8
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc7a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	0a5b      	lsrs	r3, r3, #9
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d010      	beq.n	800bcaa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	09db      	lsrs	r3, r3, #7
 800bc8c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00a      	beq.n	800bcaa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc98:	f043 0202 	orr.w	r2, r3, #2
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bca8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f003 030b 	and.w	r3, r3, #11
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800bcba:	68f9      	ldr	r1, [r7, #12]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f001 fb53 	bl	800d368 <I2C_ITError>
  }
}
 800bcc2:	bf00      	nop
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bcd2:	bf00      	nop
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b083      	sub	sp, #12
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	b083      	sub	sp, #12
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bcfa:	bf00      	nop
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	460b      	mov	r3, r1
 800bd24:	70fb      	strb	r3, [r7, #3]
 800bd26:	4613      	mov	r3, r2
 800bd28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bd2a:	bf00      	nop
 800bd2c:	370c      	adds	r7, #12
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b083      	sub	sp, #12
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bd3e:	bf00      	nop
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b083      	sub	sp, #12
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bd52:	bf00      	nop
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bd66:	bf00      	nop
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b083      	sub	sp, #12
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bd7a:	bf00      	nop
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b083      	sub	sp, #12
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bd8e:	bf00      	nop
 800bd90:	370c      	adds	r7, #12
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b083      	sub	sp, #12
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bda8:	b2db      	uxtb	r3, r3
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b088      	sub	sp, #32
 800bdba:	af02      	add	r7, sp, #8
 800bdbc:	60f8      	str	r0, [r7, #12]
 800bdbe:	60b9      	str	r1, [r7, #8]
 800bdc0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d101      	bne.n	800bdd4 <I2C_Master_ISR_IT+0x1e>
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	e120      	b.n	800c016 <I2C_Master_ISR_IT+0x260>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	091b      	lsrs	r3, r3, #4
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d013      	beq.n	800be10 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	091b      	lsrs	r3, r3, #4
 800bdec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00d      	beq.n	800be10 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2210      	movs	r2, #16
 800bdfa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be00:	f043 0204 	orr.w	r2, r3, #4
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f001 fbc4 	bl	800d596 <I2C_Flush_TXDR>
 800be0e:	e0ed      	b.n	800bfec <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	089b      	lsrs	r3, r3, #2
 800be14:	f003 0301 	and.w	r3, r3, #1
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d023      	beq.n	800be64 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	089b      	lsrs	r3, r3, #2
 800be20:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800be24:	2b00      	cmp	r3, #0
 800be26:	d01d      	beq.n	800be64 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	f023 0304 	bic.w	r3, r3, #4
 800be2e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3a:	b2d2      	uxtb	r2, r2
 800be3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be4c:	3b01      	subs	r3, #1
 800be4e:	b29a      	uxth	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be58:	b29b      	uxth	r3, r3
 800be5a:	3b01      	subs	r3, #1
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	855a      	strh	r2, [r3, #42]	; 0x2a
 800be62:	e0c3      	b.n	800bfec <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	099b      	lsrs	r3, r3, #6
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d12a      	bne.n	800bec6 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	085b      	lsrs	r3, r3, #1
 800be74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d024      	beq.n	800bec6 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	085b      	lsrs	r3, r3, #1
 800be80:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be84:	2b00      	cmp	r3, #0
 800be86:	d01e      	beq.n	800bec6 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 80ac 	beq.w	800bfec <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be98:	781a      	ldrb	r2, [r3, #0]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea4:	1c5a      	adds	r2, r3, #1
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beae:	3b01      	subs	r3, #1
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beba:	b29b      	uxth	r3, r3
 800bebc:	3b01      	subs	r3, #1
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800bec4:	e092      	b.n	800bfec <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	09db      	lsrs	r3, r3, #7
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d05d      	beq.n	800bf8e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	099b      	lsrs	r3, r3, #6
 800bed6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d057      	beq.n	800bf8e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d040      	beq.n	800bf6a <I2C_Master_ISR_IT+0x1b4>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beec:	2b00      	cmp	r3, #0
 800beee:	d13c      	bne.n	800bf6a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800befc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	2bff      	cmp	r3, #255	; 0xff
 800bf06:	d90e      	bls.n	800bf26 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	22ff      	movs	r2, #255	; 0xff
 800bf0c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf12:	b2da      	uxtb	r2, r3
 800bf14:	8a79      	ldrh	r1, [r7, #18]
 800bf16:	2300      	movs	r3, #0
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f001 fd4c 	bl	800d9bc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf24:	e032      	b.n	800bf8c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf38:	d00b      	beq.n	800bf52 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	8a79      	ldrh	r1, [r7, #18]
 800bf46:	2000      	movs	r0, #0
 800bf48:	9000      	str	r0, [sp, #0]
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f001 fd36 	bl	800d9bc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf50:	e01c      	b.n	800bf8c <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	8a79      	ldrh	r1, [r7, #18]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f001 fd2a 	bl	800d9bc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf68:	e010      	b.n	800bf8c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf78:	d003      	beq.n	800bf82 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f000 fdde 	bl	800cb3c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bf80:	e034      	b.n	800bfec <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf82:	2140      	movs	r1, #64	; 0x40
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f001 f9ef 	bl	800d368 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bf8a:	e02f      	b.n	800bfec <I2C_Master_ISR_IT+0x236>
 800bf8c:	e02e      	b.n	800bfec <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	099b      	lsrs	r3, r3, #6
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d028      	beq.n	800bfec <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	099b      	lsrs	r3, r3, #6
 800bf9e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d022      	beq.n	800bfec <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d119      	bne.n	800bfe4 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfbe:	d015      	beq.n	800bfec <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bfc8:	d108      	bne.n	800bfdc <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfd8:	605a      	str	r2, [r3, #4]
 800bfda:	e007      	b.n	800bfec <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f000 fdad 	bl	800cb3c <I2C_ITMasterSeqCplt>
 800bfe2:	e003      	b.n	800bfec <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bfe4:	2140      	movs	r1, #64	; 0x40
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f001 f9be 	bl	800d368 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	095b      	lsrs	r3, r3, #5
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d009      	beq.n	800c00c <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	095b      	lsrs	r3, r3, #5
 800bffc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c000:	2b00      	cmp	r3, #0
 800c002:	d003      	beq.n	800c00c <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c004:	6979      	ldr	r1, [r7, #20]
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f000 fe34 	bl	800cc74 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3718      	adds	r7, #24
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b086      	sub	sp, #24
 800c022:	af00      	add	r7, sp, #0
 800c024:	60f8      	str	r0, [r7, #12]
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d101      	bne.n	800c042 <I2C_Slave_ISR_IT+0x24>
 800c03e:	2302      	movs	r3, #2
 800c040:	e0ed      	b.n	800c21e <I2C_Slave_ISR_IT+0x200>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	095b      	lsrs	r3, r3, #5
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00a      	beq.n	800c06c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	095b      	lsrs	r3, r3, #5
 800c05a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d004      	beq.n	800c06c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c062:	6939      	ldr	r1, [r7, #16]
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f000 fecf 	bl	800ce08 <I2C_ITSlaveCplt>
 800c06a:	e0d3      	b.n	800c214 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	091b      	lsrs	r3, r3, #4
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	d04d      	beq.n	800c114 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	091b      	lsrs	r3, r3, #4
 800c07c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c080:	2b00      	cmp	r3, #0
 800c082:	d047      	beq.n	800c114 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c088:	b29b      	uxth	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d128      	bne.n	800c0e0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b28      	cmp	r3, #40	; 0x28
 800c098:	d108      	bne.n	800c0ac <I2C_Slave_ISR_IT+0x8e>
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0a0:	d104      	bne.n	800c0ac <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c0a2:	6939      	ldr	r1, [r7, #16]
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f001 f909 	bl	800d2bc <I2C_ITListenCplt>
 800c0aa:	e032      	b.n	800c112 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b29      	cmp	r3, #41	; 0x29
 800c0b6:	d10e      	bne.n	800c0d6 <I2C_Slave_ISR_IT+0xb8>
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c0be:	d00a      	beq.n	800c0d6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2210      	movs	r2, #16
 800c0c6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f001 fa64 	bl	800d596 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f000 fd71 	bl	800cbb6 <I2C_ITSlaveSeqCplt>
 800c0d4:	e01d      	b.n	800c112 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2210      	movs	r2, #16
 800c0dc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c0de:	e096      	b.n	800c20e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2210      	movs	r2, #16
 800c0e6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ec:	f043 0204 	orr.w	r2, r3, #4
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <I2C_Slave_ISR_IT+0xe6>
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c100:	f040 8085 	bne.w	800c20e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c108:	4619      	mov	r1, r3
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f001 f92c 	bl	800d368 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c110:	e07d      	b.n	800c20e <I2C_Slave_ISR_IT+0x1f0>
 800c112:	e07c      	b.n	800c20e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	089b      	lsrs	r3, r3, #2
 800c118:	f003 0301 	and.w	r3, r3, #1
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d030      	beq.n	800c182 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	089b      	lsrs	r3, r3, #2
 800c124:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d02a      	beq.n	800c182 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c130:	b29b      	uxth	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d018      	beq.n	800c168 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	b2d2      	uxtb	r2, r2
 800c142:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c152:	3b01      	subs	r3, #1
 800c154:	b29a      	uxth	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c15e:	b29b      	uxth	r3, r3
 800c160:	3b01      	subs	r3, #1
 800c162:	b29a      	uxth	r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d14f      	bne.n	800c212 <I2C_Slave_ISR_IT+0x1f4>
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c178:	d04b      	beq.n	800c212 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f000 fd1b 	bl	800cbb6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c180:	e047      	b.n	800c212 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	08db      	lsrs	r3, r3, #3
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00a      	beq.n	800c1a4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	08db      	lsrs	r3, r3, #3
 800c192:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c196:	2b00      	cmp	r3, #0
 800c198:	d004      	beq.n	800c1a4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c19a:	6939      	ldr	r1, [r7, #16]
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f000 fc49 	bl	800ca34 <I2C_ITAddrCplt>
 800c1a2:	e037      	b.n	800c214 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	085b      	lsrs	r3, r3, #1
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d031      	beq.n	800c214 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	085b      	lsrs	r3, r3, #1
 800c1b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d02b      	beq.n	800c214 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d018      	beq.n	800c1f8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ca:	781a      	ldrb	r2, [r3, #0]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d6:	1c5a      	adds	r2, r3, #1
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	851a      	strh	r2, [r3, #40]	; 0x28
 800c1f6:	e00d      	b.n	800c214 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c1fe:	d002      	beq.n	800c206 <I2C_Slave_ISR_IT+0x1e8>
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d106      	bne.n	800c214 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f000 fcd5 	bl	800cbb6 <I2C_ITSlaveSeqCplt>
 800c20c:	e002      	b.n	800c214 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800c20e:	bf00      	nop
 800c210:	e000      	b.n	800c214 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800c212:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b088      	sub	sp, #32
 800c22a:	af02      	add	r7, sp, #8
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	60b9      	str	r1, [r7, #8]
 800c230:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d101      	bne.n	800c240 <I2C_Master_ISR_DMA+0x1a>
 800c23c:	2302      	movs	r3, #2
 800c23e:	e0e1      	b.n	800c404 <I2C_Master_ISR_DMA+0x1de>
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2201      	movs	r2, #1
 800c244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	091b      	lsrs	r3, r3, #4
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d017      	beq.n	800c284 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	091b      	lsrs	r3, r3, #4
 800c258:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d011      	beq.n	800c284 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2210      	movs	r2, #16
 800c266:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c26c:	f043 0204 	orr.w	r2, r3, #4
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c274:	2120      	movs	r1, #32
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f001 fbd2 	bl	800da20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f001 f98a 	bl	800d596 <I2C_Flush_TXDR>
 800c282:	e0ba      	b.n	800c3fa <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	09db      	lsrs	r3, r3, #7
 800c288:	f003 0301 	and.w	r3, r3, #1
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d072      	beq.n	800c376 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	099b      	lsrs	r3, r3, #6
 800c294:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d06c      	beq.n	800c376 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2aa:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d04e      	beq.n	800c354 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2c2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	2bff      	cmp	r3, #255	; 0xff
 800c2cc:	d906      	bls.n	800c2dc <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	22ff      	movs	r2, #255	; 0xff
 800c2d2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800c2d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c2d8:	617b      	str	r3, [r7, #20]
 800c2da:	e010      	b.n	800c2fe <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2ee:	d003      	beq.n	800c2f8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f4:	617b      	str	r3, [r7, #20]
 800c2f6:	e002      	b.n	800c2fe <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c2f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2fc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c302:	b2da      	uxtb	r2, r3
 800c304:	8a79      	ldrh	r1, [r7, #18]
 800c306:	2300      	movs	r3, #0
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f001 fb55 	bl	800d9bc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c316:	b29a      	uxth	r2, r3
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c31c:	1ad3      	subs	r3, r2, r3
 800c31e:	b29a      	uxth	r2, r3
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b22      	cmp	r3, #34	; 0x22
 800c32e:	d108      	bne.n	800c342 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c33e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c340:	e05b      	b.n	800c3fa <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c350:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c352:	e052      	b.n	800c3fa <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c362:	d003      	beq.n	800c36c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f000 fbe9 	bl	800cb3c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c36a:	e046      	b.n	800c3fa <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c36c:	2140      	movs	r1, #64	; 0x40
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 fffa 	bl	800d368 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c374:	e041      	b.n	800c3fa <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	099b      	lsrs	r3, r3, #6
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d029      	beq.n	800c3d6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	099b      	lsrs	r3, r3, #6
 800c386:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d023      	beq.n	800c3d6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c392:	b29b      	uxth	r3, r3
 800c394:	2b00      	cmp	r3, #0
 800c396:	d119      	bne.n	800c3cc <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3a6:	d027      	beq.n	800c3f8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c3b0:	d108      	bne.n	800c3c4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3c0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c3c2:	e019      	b.n	800c3f8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f000 fbb9 	bl	800cb3c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c3ca:	e015      	b.n	800c3f8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c3cc:	2140      	movs	r1, #64	; 0x40
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 ffca 	bl	800d368 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c3d4:	e010      	b.n	800c3f8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	095b      	lsrs	r3, r3, #5
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00b      	beq.n	800c3fa <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	095b      	lsrs	r3, r3, #5
 800c3e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d005      	beq.n	800c3fa <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c3ee:	68b9      	ldr	r1, [r7, #8]
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f000 fc3f 	bl	800cc74 <I2C_ITMasterCplt>
 800c3f6:	e000      	b.n	800c3fa <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c3f8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b088      	sub	sp, #32
 800c410:	af02      	add	r7, sp, #8
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c418:	4b92      	ldr	r3, [pc, #584]	; (800c664 <I2C_Mem_ISR_DMA+0x258>)
 800c41a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c422:	2b01      	cmp	r3, #1
 800c424:	d101      	bne.n	800c42a <I2C_Mem_ISR_DMA+0x1e>
 800c426:	2302      	movs	r3, #2
 800c428:	e118      	b.n	800c65c <I2C_Mem_ISR_DMA+0x250>
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	091b      	lsrs	r3, r3, #4
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d017      	beq.n	800c46e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	091b      	lsrs	r3, r3, #4
 800c442:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c446:	2b00      	cmp	r3, #0
 800c448:	d011      	beq.n	800c46e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2210      	movs	r2, #16
 800c450:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c456:	f043 0204 	orr.w	r2, r3, #4
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c45e:	2120      	movs	r1, #32
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f001 fadd 	bl	800da20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f001 f895 	bl	800d596 <I2C_Flush_TXDR>
 800c46c:	e0f1      	b.n	800c652 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	085b      	lsrs	r3, r3, #1
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00f      	beq.n	800c49a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	085b      	lsrs	r3, r3, #1
 800c47e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c482:	2b00      	cmp	r3, #0
 800c484:	d009      	beq.n	800c49a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c48e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c496:	651a      	str	r2, [r3, #80]	; 0x50
 800c498:	e0db      	b.n	800c652 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	09db      	lsrs	r3, r3, #7
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d060      	beq.n	800c568 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	099b      	lsrs	r3, r3, #6
 800c4aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d05a      	beq.n	800c568 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c4b2:	2101      	movs	r1, #1
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f001 fb37 	bl	800db28 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c4ba:	2110      	movs	r1, #16
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f001 faaf 	bl	800da20 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d048      	beq.n	800c55e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	2bff      	cmp	r3, #255	; 0xff
 800c4d4:	d910      	bls.n	800c4f8 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	22ff      	movs	r2, #255	; 0xff
 800c4da:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4e0:	b299      	uxth	r1, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f001 fa63 	bl	800d9bc <I2C_TransferConfig>
 800c4f6:	e011      	b.n	800c51c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c506:	b299      	uxth	r1, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	2300      	movs	r3, #0
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f001 fa50 	bl	800d9bc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c520:	b29a      	uxth	r2, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	b29a      	uxth	r2, r3
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b22      	cmp	r3, #34	; 0x22
 800c538:	d108      	bne.n	800c54c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c548:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c54a:	e082      	b.n	800c652 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c55a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c55c:	e079      	b.n	800c652 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c55e:	2140      	movs	r1, #64	; 0x40
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f000 ff01 	bl	800d368 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c566:	e074      	b.n	800c652 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	099b      	lsrs	r3, r3, #6
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d05e      	beq.n	800c632 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	099b      	lsrs	r3, r3, #6
 800c578:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d058      	beq.n	800c632 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c580:	2101      	movs	r1, #1
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f001 fad0 	bl	800db28 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c588:	2110      	movs	r1, #16
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f001 fa48 	bl	800da20 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b22      	cmp	r3, #34	; 0x22
 800c59a:	d101      	bne.n	800c5a0 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c59c:	4b32      	ldr	r3, [pc, #200]	; (800c668 <I2C_Mem_ISR_DMA+0x25c>)
 800c59e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	2bff      	cmp	r3, #255	; 0xff
 800c5a8:	d910      	bls.n	800c5cc <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	22ff      	movs	r2, #255	; 0xff
 800c5ae:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5b4:	b299      	uxth	r1, r3
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f001 f9f9 	bl	800d9bc <I2C_TransferConfig>
 800c5ca:	e011      	b.n	800c5f0 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5da:	b299      	uxth	r1, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f001 f9e6 	bl	800d9bc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b22      	cmp	r3, #34	; 0x22
 800c60c:	d108      	bne.n	800c620 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c61c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c61e:	e018      	b.n	800c652 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c62e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c630:	e00f      	b.n	800c652 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	095b      	lsrs	r3, r3, #5
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d009      	beq.n	800c652 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	095b      	lsrs	r3, r3, #5
 800c642:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c646:	2b00      	cmp	r3, #0
 800c648:	d003      	beq.n	800c652 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c64a:	68b9      	ldr	r1, [r7, #8]
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f000 fb11 	bl	800cc74 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	80002000 	.word	0x80002000
 800c668:	80002400 	.word	0x80002400

0800c66c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b088      	sub	sp, #32
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d101      	bne.n	800c690 <I2C_Slave_ISR_DMA+0x24>
 800c68c:	2302      	movs	r3, #2
 800c68e:	e1cc      	b.n	800ca2a <I2C_Slave_ISR_DMA+0x3be>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	095b      	lsrs	r3, r3, #5
 800c69c:	f003 0301 	and.w	r3, r3, #1
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00a      	beq.n	800c6ba <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	095b      	lsrs	r3, r3, #5
 800c6a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d004      	beq.n	800c6ba <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f000 fba8 	bl	800ce08 <I2C_ITSlaveCplt>
 800c6b8:	e1b2      	b.n	800ca20 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	091b      	lsrs	r3, r3, #4
 800c6be:	f003 0301 	and.w	r3, r3, #1
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 819c 	beq.w	800ca00 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	091b      	lsrs	r3, r3, #4
 800c6cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 8195 	beq.w	800ca00 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	0b9b      	lsrs	r3, r3, #14
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d106      	bne.n	800c6f0 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	0bdb      	lsrs	r3, r3, #15
 800c6e6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 8181 	beq.w	800c9f2 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d07c      	beq.n	800c7f2 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	0bdb      	lsrs	r3, r3, #15
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	2b00      	cmp	r3, #0
 800c702:	d076      	beq.n	800c7f2 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a75      	ldr	r2, [pc, #468]	; (800c8e0 <I2C_Slave_ISR_DMA+0x274>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d059      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a73      	ldr	r2, [pc, #460]	; (800c8e4 <I2C_Slave_ISR_DMA+0x278>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d053      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a71      	ldr	r2, [pc, #452]	; (800c8e8 <I2C_Slave_ISR_DMA+0x27c>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d04d      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a6f      	ldr	r2, [pc, #444]	; (800c8ec <I2C_Slave_ISR_DMA+0x280>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d047      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a6d      	ldr	r2, [pc, #436]	; (800c8f0 <I2C_Slave_ISR_DMA+0x284>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d041      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a6b      	ldr	r2, [pc, #428]	; (800c8f4 <I2C_Slave_ISR_DMA+0x288>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d03b      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a69      	ldr	r2, [pc, #420]	; (800c8f8 <I2C_Slave_ISR_DMA+0x28c>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d035      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a67      	ldr	r2, [pc, #412]	; (800c8fc <I2C_Slave_ISR_DMA+0x290>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d02f      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a65      	ldr	r2, [pc, #404]	; (800c900 <I2C_Slave_ISR_DMA+0x294>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d029      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a63      	ldr	r2, [pc, #396]	; (800c904 <I2C_Slave_ISR_DMA+0x298>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d023      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a61      	ldr	r2, [pc, #388]	; (800c908 <I2C_Slave_ISR_DMA+0x29c>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d01d      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a5f      	ldr	r2, [pc, #380]	; (800c90c <I2C_Slave_ISR_DMA+0x2a0>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d017      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a5d      	ldr	r2, [pc, #372]	; (800c910 <I2C_Slave_ISR_DMA+0x2a4>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d011      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a5b      	ldr	r2, [pc, #364]	; (800c914 <I2C_Slave_ISR_DMA+0x2a8>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d00b      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a59      	ldr	r2, [pc, #356]	; (800c918 <I2C_Slave_ISR_DMA+0x2ac>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d005      	beq.n	800c7c4 <I2C_Slave_ISR_DMA+0x158>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a57      	ldr	r2, [pc, #348]	; (800c91c <I2C_Slave_ISR_DMA+0x2b0>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d109      	bne.n	800c7d8 <I2C_Slave_ISR_DMA+0x16c>
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	bf0c      	ite	eq
 800c7d0:	2301      	moveq	r3, #1
 800c7d2:	2300      	movne	r3, #0
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	e008      	b.n	800c7ea <I2C_Slave_ISR_DMA+0x17e>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	bf0c      	ite	eq
 800c7e4:	2301      	moveq	r3, #1
 800c7e6:	2300      	movne	r3, #0
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d001      	beq.n	800c7f2 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 809f 	beq.w	800c93a <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	0b9b      	lsrs	r3, r3, #14
 800c800:	f003 0301 	and.w	r3, r3, #1
 800c804:	2b00      	cmp	r3, #0
 800c806:	f000 8098 	beq.w	800c93a <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a33      	ldr	r2, [pc, #204]	; (800c8e0 <I2C_Slave_ISR_DMA+0x274>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d059      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a31      	ldr	r2, [pc, #196]	; (800c8e4 <I2C_Slave_ISR_DMA+0x278>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d053      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a2f      	ldr	r2, [pc, #188]	; (800c8e8 <I2C_Slave_ISR_DMA+0x27c>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d04d      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a2d      	ldr	r2, [pc, #180]	; (800c8ec <I2C_Slave_ISR_DMA+0x280>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d047      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a2b      	ldr	r2, [pc, #172]	; (800c8f0 <I2C_Slave_ISR_DMA+0x284>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d041      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a29      	ldr	r2, [pc, #164]	; (800c8f4 <I2C_Slave_ISR_DMA+0x288>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d03b      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a27      	ldr	r2, [pc, #156]	; (800c8f8 <I2C_Slave_ISR_DMA+0x28c>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d035      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a25      	ldr	r2, [pc, #148]	; (800c8fc <I2C_Slave_ISR_DMA+0x290>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d02f      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a23      	ldr	r2, [pc, #140]	; (800c900 <I2C_Slave_ISR_DMA+0x294>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d029      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a21      	ldr	r2, [pc, #132]	; (800c904 <I2C_Slave_ISR_DMA+0x298>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d023      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a1f      	ldr	r2, [pc, #124]	; (800c908 <I2C_Slave_ISR_DMA+0x29c>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d01d      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a1d      	ldr	r2, [pc, #116]	; (800c90c <I2C_Slave_ISR_DMA+0x2a0>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d017      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a1b      	ldr	r2, [pc, #108]	; (800c910 <I2C_Slave_ISR_DMA+0x2a4>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d011      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a19      	ldr	r2, [pc, #100]	; (800c914 <I2C_Slave_ISR_DMA+0x2a8>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d00b      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a17      	ldr	r2, [pc, #92]	; (800c918 <I2C_Slave_ISR_DMA+0x2ac>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d005      	beq.n	800c8ca <I2C_Slave_ISR_DMA+0x25e>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a15      	ldr	r2, [pc, #84]	; (800c91c <I2C_Slave_ISR_DMA+0x2b0>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d12a      	bne.n	800c920 <I2C_Slave_ISR_DMA+0x2b4>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	bf0c      	ite	eq
 800c8d6:	2301      	moveq	r3, #1
 800c8d8:	2300      	movne	r3, #0
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	e029      	b.n	800c932 <I2C_Slave_ISR_DMA+0x2c6>
 800c8de:	bf00      	nop
 800c8e0:	40020010 	.word	0x40020010
 800c8e4:	40020028 	.word	0x40020028
 800c8e8:	40020040 	.word	0x40020040
 800c8ec:	40020058 	.word	0x40020058
 800c8f0:	40020070 	.word	0x40020070
 800c8f4:	40020088 	.word	0x40020088
 800c8f8:	400200a0 	.word	0x400200a0
 800c8fc:	400200b8 	.word	0x400200b8
 800c900:	40020410 	.word	0x40020410
 800c904:	40020428 	.word	0x40020428
 800c908:	40020440 	.word	0x40020440
 800c90c:	40020458 	.word	0x40020458
 800c910:	40020470 	.word	0x40020470
 800c914:	40020488 	.word	0x40020488
 800c918:	400204a0 	.word	0x400204a0
 800c91c:	400204b8 	.word	0x400204b8
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	bf0c      	ite	eq
 800c92c:	2301      	moveq	r3, #1
 800c92e:	2300      	movne	r3, #0
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c936:	2301      	movs	r3, #1
 800c938:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d128      	bne.n	800c992 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c946:	b2db      	uxtb	r3, r3
 800c948:	2b28      	cmp	r3, #40	; 0x28
 800c94a:	d108      	bne.n	800c95e <I2C_Slave_ISR_DMA+0x2f2>
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c952:	d104      	bne.n	800c95e <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c954:	68b9      	ldr	r1, [r7, #8]
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f000 fcb0 	bl	800d2bc <I2C_ITListenCplt>
 800c95c:	e048      	b.n	800c9f0 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b29      	cmp	r3, #41	; 0x29
 800c968:	d10e      	bne.n	800c988 <I2C_Slave_ISR_DMA+0x31c>
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c970:	d00a      	beq.n	800c988 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2210      	movs	r2, #16
 800c978:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f000 fe0b 	bl	800d596 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f000 f918 	bl	800cbb6 <I2C_ITSlaveSeqCplt>
 800c986:	e033      	b.n	800c9f0 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2210      	movs	r2, #16
 800c98e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c990:	e034      	b.n	800c9fc <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2210      	movs	r2, #16
 800c998:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c99e:	f043 0204 	orr.w	r2, r3, #4
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9ac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <I2C_Slave_ISR_DMA+0x350>
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c9ba:	d11f      	bne.n	800c9fc <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c9bc:	7dfb      	ldrb	r3, [r7, #23]
 800c9be:	2b21      	cmp	r3, #33	; 0x21
 800c9c0:	d002      	beq.n	800c9c8 <I2C_Slave_ISR_DMA+0x35c>
 800c9c2:	7dfb      	ldrb	r3, [r7, #23]
 800c9c4:	2b29      	cmp	r3, #41	; 0x29
 800c9c6:	d103      	bne.n	800c9d0 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2221      	movs	r2, #33	; 0x21
 800c9cc:	631a      	str	r2, [r3, #48]	; 0x30
 800c9ce:	e008      	b.n	800c9e2 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
 800c9d2:	2b22      	cmp	r3, #34	; 0x22
 800c9d4:	d002      	beq.n	800c9dc <I2C_Slave_ISR_DMA+0x370>
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c9da:	d102      	bne.n	800c9e2 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2222      	movs	r2, #34	; 0x22
 800c9e0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f000 fcbd 	bl	800d368 <I2C_ITError>
      if (treatdmanack == 1U)
 800c9ee:	e005      	b.n	800c9fc <I2C_Slave_ISR_DMA+0x390>
 800c9f0:	e004      	b.n	800c9fc <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2210      	movs	r2, #16
 800c9f8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c9fa:	e011      	b.n	800ca20 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c9fc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c9fe:	e00f      	b.n	800ca20 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	08db      	lsrs	r3, r3, #3
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d009      	beq.n	800ca20 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	08db      	lsrs	r3, r3, #3
 800ca10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d003      	beq.n	800ca20 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ca18:	68b9      	ldr	r1, [r7, #8]
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 f80a 	bl	800ca34 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3720      	adds	r7, #32
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop

0800ca34 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ca4a:	2b28      	cmp	r3, #40	; 0x28
 800ca4c:	d16a      	bne.n	800cb24 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	0c1b      	lsrs	r3, r3, #16
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f003 0301 	and.w	r3, r3, #1
 800ca5c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	699b      	ldr	r3, [r3, #24]
 800ca64:	0c1b      	lsrs	r3, r3, #16
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ca6c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca7a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ca88:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d138      	bne.n	800cb04 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800ca92:	897b      	ldrh	r3, [r7, #10]
 800ca94:	09db      	lsrs	r3, r3, #7
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	89bb      	ldrh	r3, [r7, #12]
 800ca9a:	4053      	eors	r3, r2
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	f003 0306 	and.w	r3, r3, #6
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d11c      	bne.n	800cae0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800caa6:	897b      	ldrh	r3, [r7, #10]
 800caa8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d13b      	bne.n	800cb34 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2208      	movs	r2, #8
 800cac8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cad2:	89ba      	ldrh	r2, [r7, #12]
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff f91e 	bl	800bd1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cade:	e029      	b.n	800cb34 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800cae0:	893b      	ldrh	r3, [r7, #8]
 800cae2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f001 f81d 	bl	800db28 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800caf6:	89ba      	ldrh	r2, [r7, #12]
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	4619      	mov	r1, r3
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff f90c 	bl	800bd1a <HAL_I2C_AddrCallback>
}
 800cb02:	e017      	b.n	800cb34 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cb04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f001 f80d 	bl	800db28 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cb16:	89ba      	ldrh	r2, [r7, #12]
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7ff f8fc 	bl	800bd1a <HAL_I2C_AddrCallback>
}
 800cb22:	e007      	b.n	800cb34 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2208      	movs	r2, #8
 800cb2a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800cb34:	bf00      	nop
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b21      	cmp	r3, #33	; 0x21
 800cb56:	d115      	bne.n	800cb84 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2220      	movs	r2, #32
 800cb5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2211      	movs	r2, #17
 800cb64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 ffda 	bl	800db28 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff f8a4 	bl	800bcca <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cb82:	e014      	b.n	800cbae <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2220      	movs	r2, #32
 800cb88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2212      	movs	r2, #18
 800cb90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cb98:	2102      	movs	r1, #2
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 ffc4 	bl	800db28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff f898 	bl	800bcde <HAL_I2C_MasterRxCpltCallback>
}
 800cbae:	bf00      	nop
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	0b9b      	lsrs	r3, r3, #14
 800cbd2:	f003 0301 	and.w	r3, r3, #1
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d008      	beq.n	800cbec <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cbe8:	601a      	str	r2, [r3, #0]
 800cbea:	e00d      	b.n	800cc08 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	0bdb      	lsrs	r3, r3, #15
 800cbf0:	f003 0301 	and.w	r3, r3, #1
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d007      	beq.n	800cc08 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc06:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b29      	cmp	r3, #41	; 0x29
 800cc12:	d112      	bne.n	800cc3a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2228      	movs	r2, #40	; 0x28
 800cc18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2221      	movs	r2, #33	; 0x21
 800cc20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cc22:	2101      	movs	r1, #1
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 ff7f 	bl	800db28 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff f85d 	bl	800bcf2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cc38:	e017      	b.n	800cc6a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	2b2a      	cmp	r3, #42	; 0x2a
 800cc44:	d111      	bne.n	800cc6a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2228      	movs	r2, #40	; 0x28
 800cc4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2222      	movs	r2, #34	; 0x22
 800cc52:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cc54:	2102      	movs	r1, #2
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 ff66 	bl	800db28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff f84e 	bl	800bd06 <HAL_I2C_SlaveRxCpltCallback>
}
 800cc6a:	bf00      	nop
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
	...

0800cc74 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2220      	movs	r2, #32
 800cc88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b21      	cmp	r3, #33	; 0x21
 800cc94:	d107      	bne.n	800cca6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cc96:	2101      	movs	r1, #1
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 ff45 	bl	800db28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2211      	movs	r2, #17
 800cca2:	631a      	str	r2, [r3, #48]	; 0x30
 800cca4:	e00c      	b.n	800ccc0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b22      	cmp	r3, #34	; 0x22
 800ccb0:	d106      	bne.n	800ccc0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ccb2:	2102      	movs	r1, #2
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 ff37 	bl	800db28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2212      	movs	r2, #18
 800ccbe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	6859      	ldr	r1, [r3, #4]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	4b4d      	ldr	r3, [pc, #308]	; (800ce00 <I2C_ITMasterCplt+0x18c>)
 800cccc:	400b      	ands	r3, r1
 800ccce:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a4a      	ldr	r2, [pc, #296]	; (800ce04 <I2C_ITMasterCplt+0x190>)
 800ccda:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	091b      	lsrs	r3, r3, #4
 800cce0:	f003 0301 	and.w	r3, r3, #1
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d009      	beq.n	800ccfc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2210      	movs	r2, #16
 800ccee:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccf4:	f043 0204 	orr.w	r2, r3, #4
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	2b60      	cmp	r3, #96	; 0x60
 800cd06:	d10b      	bne.n	800cd20 <I2C_ITMasterCplt+0xac>
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	089b      	lsrs	r3, r3, #2
 800cd0c:	f003 0301 	and.w	r3, r3, #1
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d005      	beq.n	800cd20 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fc38 	bl	800d596 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd2a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	2b60      	cmp	r3, #96	; 0x60
 800cd36:	d002      	beq.n	800cd3e <I2C_ITMasterCplt+0xca>
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d006      	beq.n	800cd4c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd42:	4619      	mov	r1, r3
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 fb0f 	bl	800d368 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd4a:	e054      	b.n	800cdf6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	2b21      	cmp	r3, #33	; 0x21
 800cd56:	d124      	bne.n	800cda2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2220      	movs	r2, #32
 800cd5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	2b40      	cmp	r3, #64	; 0x40
 800cd70:	d10b      	bne.n	800cd8a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7fe ffe1 	bl	800bd4a <HAL_I2C_MemTxCpltCallback>
}
 800cd88:	e035      	b.n	800cdf6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7fe ff95 	bl	800bcca <HAL_I2C_MasterTxCpltCallback>
}
 800cda0:	e029      	b.n	800cdf6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b22      	cmp	r3, #34	; 0x22
 800cdac:	d123      	bne.n	800cdf6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2220      	movs	r2, #32
 800cdb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	2b40      	cmp	r3, #64	; 0x40
 800cdc6:	d10b      	bne.n	800cde0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f7fe ffc0 	bl	800bd5e <HAL_I2C_MemRxCpltCallback>
}
 800cdde:	e00a      	b.n	800cdf6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7fe ff74 	bl	800bcde <HAL_I2C_MasterRxCpltCallback>
}
 800cdf6:	bf00      	nop
 800cdf8:	3718      	adds	r7, #24
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	fe00e800 	.word	0xfe00e800
 800ce04:	ffff0000 	.word	0xffff0000

0800ce08 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce22:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce2a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2220      	movs	r2, #32
 800ce32:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ce34:	7afb      	ldrb	r3, [r7, #11]
 800ce36:	2b21      	cmp	r3, #33	; 0x21
 800ce38:	d002      	beq.n	800ce40 <I2C_ITSlaveCplt+0x38>
 800ce3a:	7afb      	ldrb	r3, [r7, #11]
 800ce3c:	2b29      	cmp	r3, #41	; 0x29
 800ce3e:	d108      	bne.n	800ce52 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ce40:	f248 0101 	movw	r1, #32769	; 0x8001
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 fe6f 	bl	800db28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2221      	movs	r2, #33	; 0x21
 800ce4e:	631a      	str	r2, [r3, #48]	; 0x30
 800ce50:	e019      	b.n	800ce86 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ce52:	7afb      	ldrb	r3, [r7, #11]
 800ce54:	2b22      	cmp	r3, #34	; 0x22
 800ce56:	d002      	beq.n	800ce5e <I2C_ITSlaveCplt+0x56>
 800ce58:	7afb      	ldrb	r3, [r7, #11]
 800ce5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce5c:	d108      	bne.n	800ce70 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ce5e:	f248 0102 	movw	r1, #32770	; 0x8002
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 fe60 	bl	800db28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2222      	movs	r2, #34	; 0x22
 800ce6c:	631a      	str	r2, [r3, #48]	; 0x30
 800ce6e:	e00a      	b.n	800ce86 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800ce70:	7afb      	ldrb	r3, [r7, #11]
 800ce72:	2b28      	cmp	r3, #40	; 0x28
 800ce74:	d107      	bne.n	800ce86 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800ce76:	f248 0103 	movw	r1, #32771	; 0x8003
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fe54 	bl	800db28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	685a      	ldr	r2, [r3, #4]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce94:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6859      	ldr	r1, [r3, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	4b80      	ldr	r3, [pc, #512]	; (800d0a4 <I2C_ITSlaveCplt+0x29c>)
 800cea2:	400b      	ands	r3, r1
 800cea4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fb75 	bl	800d596 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	0b9b      	lsrs	r3, r3, #14
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d07a      	beq.n	800cfae <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cec6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f000 8112 	beq.w	800d0f6 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a73      	ldr	r2, [pc, #460]	; (800d0a8 <I2C_ITSlaveCplt+0x2a0>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d059      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a71      	ldr	r2, [pc, #452]	; (800d0ac <I2C_ITSlaveCplt+0x2a4>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d053      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a6f      	ldr	r2, [pc, #444]	; (800d0b0 <I2C_ITSlaveCplt+0x2a8>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d04d      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a6d      	ldr	r2, [pc, #436]	; (800d0b4 <I2C_ITSlaveCplt+0x2ac>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d047      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a6b      	ldr	r2, [pc, #428]	; (800d0b8 <I2C_ITSlaveCplt+0x2b0>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d041      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a69      	ldr	r2, [pc, #420]	; (800d0bc <I2C_ITSlaveCplt+0x2b4>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d03b      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a67      	ldr	r2, [pc, #412]	; (800d0c0 <I2C_ITSlaveCplt+0x2b8>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d035      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a65      	ldr	r2, [pc, #404]	; (800d0c4 <I2C_ITSlaveCplt+0x2bc>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d02f      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a63      	ldr	r2, [pc, #396]	; (800d0c8 <I2C_ITSlaveCplt+0x2c0>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d029      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a61      	ldr	r2, [pc, #388]	; (800d0cc <I2C_ITSlaveCplt+0x2c4>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d023      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a5f      	ldr	r2, [pc, #380]	; (800d0d0 <I2C_ITSlaveCplt+0x2c8>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d01d      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a5d      	ldr	r2, [pc, #372]	; (800d0d4 <I2C_ITSlaveCplt+0x2cc>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d017      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a5b      	ldr	r2, [pc, #364]	; (800d0d8 <I2C_ITSlaveCplt+0x2d0>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d011      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a59      	ldr	r2, [pc, #356]	; (800d0dc <I2C_ITSlaveCplt+0x2d4>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d00b      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a57      	ldr	r2, [pc, #348]	; (800d0e0 <I2C_ITSlaveCplt+0x2d8>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d005      	beq.n	800cf92 <I2C_ITSlaveCplt+0x18a>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a55      	ldr	r2, [pc, #340]	; (800d0e4 <I2C_ITSlaveCplt+0x2dc>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d105      	bne.n	800cf9e <I2C_ITSlaveCplt+0x196>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	e004      	b.n	800cfa8 <I2C_ITSlaveCplt+0x1a0>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	8553      	strh	r3, [r2, #42]	; 0x2a
 800cfac:	e0a3      	b.n	800d0f6 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	0bdb      	lsrs	r3, r3, #15
 800cfb2:	f003 0301 	and.w	r3, r3, #1
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	f000 809d 	beq.w	800d0f6 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cfca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 8090 	beq.w	800d0f6 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a32      	ldr	r2, [pc, #200]	; (800d0a8 <I2C_ITSlaveCplt+0x2a0>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d059      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a30      	ldr	r2, [pc, #192]	; (800d0ac <I2C_ITSlaveCplt+0x2a4>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d053      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a2e      	ldr	r2, [pc, #184]	; (800d0b0 <I2C_ITSlaveCplt+0x2a8>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d04d      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a2c      	ldr	r2, [pc, #176]	; (800d0b4 <I2C_ITSlaveCplt+0x2ac>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d047      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a2a      	ldr	r2, [pc, #168]	; (800d0b8 <I2C_ITSlaveCplt+0x2b0>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d041      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a28      	ldr	r2, [pc, #160]	; (800d0bc <I2C_ITSlaveCplt+0x2b4>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d03b      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a26      	ldr	r2, [pc, #152]	; (800d0c0 <I2C_ITSlaveCplt+0x2b8>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d035      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a24      	ldr	r2, [pc, #144]	; (800d0c4 <I2C_ITSlaveCplt+0x2bc>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d02f      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a22      	ldr	r2, [pc, #136]	; (800d0c8 <I2C_ITSlaveCplt+0x2c0>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d029      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a20      	ldr	r2, [pc, #128]	; (800d0cc <I2C_ITSlaveCplt+0x2c4>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d023      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a1e      	ldr	r2, [pc, #120]	; (800d0d0 <I2C_ITSlaveCplt+0x2c8>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d01d      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a1c      	ldr	r2, [pc, #112]	; (800d0d4 <I2C_ITSlaveCplt+0x2cc>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d017      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a1a      	ldr	r2, [pc, #104]	; (800d0d8 <I2C_ITSlaveCplt+0x2d0>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d011      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a18      	ldr	r2, [pc, #96]	; (800d0dc <I2C_ITSlaveCplt+0x2d4>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d00b      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a16      	ldr	r2, [pc, #88]	; (800d0e0 <I2C_ITSlaveCplt+0x2d8>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d005      	beq.n	800d096 <I2C_ITSlaveCplt+0x28e>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a14      	ldr	r2, [pc, #80]	; (800d0e4 <I2C_ITSlaveCplt+0x2dc>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d128      	bne.n	800d0e8 <I2C_ITSlaveCplt+0x2e0>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	e027      	b.n	800d0f2 <I2C_ITSlaveCplt+0x2ea>
 800d0a2:	bf00      	nop
 800d0a4:	fe00e800 	.word	0xfe00e800
 800d0a8:	40020010 	.word	0x40020010
 800d0ac:	40020028 	.word	0x40020028
 800d0b0:	40020040 	.word	0x40020040
 800d0b4:	40020058 	.word	0x40020058
 800d0b8:	40020070 	.word	0x40020070
 800d0bc:	40020088 	.word	0x40020088
 800d0c0:	400200a0 	.word	0x400200a0
 800d0c4:	400200b8 	.word	0x400200b8
 800d0c8:	40020410 	.word	0x40020410
 800d0cc:	40020428 	.word	0x40020428
 800d0d0:	40020440 	.word	0x40020440
 800d0d4:	40020458 	.word	0x40020458
 800d0d8:	40020470 	.word	0x40020470
 800d0dc:	40020488 	.word	0x40020488
 800d0e0:	400204a0 	.word	0x400204a0
 800d0e4:	400204b8 	.word	0x400204b8
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	089b      	lsrs	r3, r3, #2
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d020      	beq.n	800d144 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	f023 0304 	bic.w	r3, r3, #4
 800d108:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d114:	b2d2      	uxtb	r2, r2
 800d116:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11c:	1c5a      	adds	r2, r3, #1
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00c      	beq.n	800d144 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d12e:	3b01      	subs	r3, #1
 800d130:	b29a      	uxth	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	3b01      	subs	r3, #1
 800d13e:	b29a      	uxth	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d148:	b29b      	uxth	r3, r3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d005      	beq.n	800d15a <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d152:	f043 0204 	orr.w	r2, r3, #4
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	091b      	lsrs	r3, r3, #4
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d04a      	beq.n	800d1fc <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	091b      	lsrs	r3, r3, #4
 800d16a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d044      	beq.n	800d1fc <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d176:	b29b      	uxth	r3, r3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d128      	bne.n	800d1ce <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b28      	cmp	r3, #40	; 0x28
 800d186:	d108      	bne.n	800d19a <I2C_ITSlaveCplt+0x392>
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d18e:	d104      	bne.n	800d19a <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d190:	6979      	ldr	r1, [r7, #20]
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f892 	bl	800d2bc <I2C_ITListenCplt>
 800d198:	e030      	b.n	800d1fc <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	2b29      	cmp	r3, #41	; 0x29
 800d1a4:	d10e      	bne.n	800d1c4 <I2C_ITSlaveCplt+0x3bc>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d1ac:	d00a      	beq.n	800d1c4 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2210      	movs	r2, #16
 800d1b4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 f9ed 	bl	800d596 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7ff fcfa 	bl	800cbb6 <I2C_ITSlaveSeqCplt>
 800d1c2:	e01b      	b.n	800d1fc <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2210      	movs	r2, #16
 800d1ca:	61da      	str	r2, [r3, #28]
 800d1cc:	e016      	b.n	800d1fc <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2210      	movs	r2, #16
 800d1d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1da:	f043 0204 	orr.w	r2, r3, #4
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d003      	beq.n	800d1f0 <I2C_ITSlaveCplt+0x3e8>
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d1ee:	d105      	bne.n	800d1fc <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f8b6 	bl	800d368 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2200      	movs	r2, #0
 800d208:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d010      	beq.n	800d234 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d216:	4619      	mov	r1, r3
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 f8a5 	bl	800d368 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d224:	b2db      	uxtb	r3, r3
 800d226:	2b28      	cmp	r3, #40	; 0x28
 800d228:	d141      	bne.n	800d2ae <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d22a:	6979      	ldr	r1, [r7, #20]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f845 	bl	800d2bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d232:	e03c      	b.n	800d2ae <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d23c:	d014      	beq.n	800d268 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff fcb9 	bl	800cbb6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a1c      	ldr	r2, [pc, #112]	; (800d2b8 <I2C_ITSlaveCplt+0x4b0>)
 800d248:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2220      	movs	r2, #32
 800d24e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7fe fd68 	bl	800bd36 <HAL_I2C_ListenCpltCallback>
}
 800d266:	e022      	b.n	800d2ae <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b22      	cmp	r3, #34	; 0x22
 800d272:	d10e      	bne.n	800d292 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2220      	movs	r2, #32
 800d278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7fe fd3b 	bl	800bd06 <HAL_I2C_SlaveRxCpltCallback>
}
 800d290:	e00d      	b.n	800d2ae <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2220      	movs	r2, #32
 800d296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f7fe fd22 	bl	800bcf2 <HAL_I2C_SlaveTxCpltCallback>
}
 800d2ae:	bf00      	nop
 800d2b0:	3718      	adds	r7, #24
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	ffff0000 	.word	0xffff0000

0800d2bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a26      	ldr	r2, [pc, #152]	; (800d364 <I2C_ITListenCplt+0xa8>)
 800d2ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2220      	movs	r2, #32
 800d2d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	089b      	lsrs	r3, r3, #2
 800d2ec:	f003 0301 	and.w	r3, r3, #1
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d022      	beq.n	800d33a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fe:	b2d2      	uxtb	r2, r2
 800d300:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d306:	1c5a      	adds	r2, r3, #1
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d310:	2b00      	cmp	r3, #0
 800d312:	d012      	beq.n	800d33a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d318:	3b01      	subs	r3, #1
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d324:	b29b      	uxth	r3, r3
 800d326:	3b01      	subs	r3, #1
 800d328:	b29a      	uxth	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d332:	f043 0204 	orr.w	r2, r3, #4
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d33a:	f248 0103 	movw	r1, #32771	; 0x8003
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 fbf2 	bl	800db28 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2210      	movs	r2, #16
 800d34a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7fe fcee 	bl	800bd36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d35a:	bf00      	nop
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	ffff0000 	.word	0xffff0000

0800d368 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d378:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4a6d      	ldr	r2, [pc, #436]	; (800d53c <I2C_ITError+0x1d4>)
 800d386:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	431a      	orrs	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
 800d39c:	2b28      	cmp	r3, #40	; 0x28
 800d39e:	d005      	beq.n	800d3ac <I2C_ITError+0x44>
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
 800d3a2:	2b29      	cmp	r3, #41	; 0x29
 800d3a4:	d002      	beq.n	800d3ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3aa:	d10b      	bne.n	800d3c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d3ac:	2103      	movs	r1, #3
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 fbba 	bl	800db28 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2228      	movs	r2, #40	; 0x28
 800d3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	4a60      	ldr	r2, [pc, #384]	; (800d540 <I2C_ITError+0x1d8>)
 800d3c0:	635a      	str	r2, [r3, #52]	; 0x34
 800d3c2:	e030      	b.n	800d426 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d3c4:	f248 0103 	movw	r1, #32771	; 0x8003
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 fbad 	bl	800db28 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 f8e1 	bl	800d596 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	2b60      	cmp	r3, #96	; 0x60
 800d3de:	d01f      	beq.n	800d420 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2220      	movs	r2, #32
 800d3e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	699b      	ldr	r3, [r3, #24]
 800d3ee:	f003 0320 	and.w	r3, r3, #32
 800d3f2:	2b20      	cmp	r3, #32
 800d3f4:	d114      	bne.n	800d420 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	699b      	ldr	r3, [r3, #24]
 800d3fc:	f003 0310 	and.w	r3, r3, #16
 800d400:	2b10      	cmp	r3, #16
 800d402:	d109      	bne.n	800d418 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2210      	movs	r2, #16
 800d40a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d410:	f043 0204 	orr.w	r2, r3, #4
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2220      	movs	r2, #32
 800d41e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d42a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d430:	2b00      	cmp	r3, #0
 800d432:	d039      	beq.n	800d4a8 <I2C_ITError+0x140>
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	2b11      	cmp	r3, #17
 800d438:	d002      	beq.n	800d440 <I2C_ITError+0xd8>
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	2b21      	cmp	r3, #33	; 0x21
 800d43e:	d133      	bne.n	800d4a8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d44a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d44e:	d107      	bne.n	800d460 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d45e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d464:	4618      	mov	r0, r3
 800d466:	f7fd f857 	bl	800a518 <HAL_DMA_GetState>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d017      	beq.n	800d4a0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	4a33      	ldr	r2, [pc, #204]	; (800d544 <I2C_ITError+0x1dc>)
 800d476:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d484:	4618      	mov	r0, r3
 800d486:	f7fb fed7 	bl	8009238 <HAL_DMA_Abort_IT>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d04d      	beq.n	800d52c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d49a:	4610      	mov	r0, r2
 800d49c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d49e:	e045      	b.n	800d52c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 f851 	bl	800d548 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d4a6:	e041      	b.n	800d52c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d039      	beq.n	800d524 <I2C_ITError+0x1bc>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b12      	cmp	r3, #18
 800d4b4:	d002      	beq.n	800d4bc <I2C_ITError+0x154>
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	2b22      	cmp	r3, #34	; 0x22
 800d4ba:	d133      	bne.n	800d524 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4ca:	d107      	bne.n	800d4dc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d4da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fd f819 	bl	800a518 <HAL_DMA_GetState>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d017      	beq.n	800d51c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f0:	4a14      	ldr	r2, [pc, #80]	; (800d544 <I2C_ITError+0x1dc>)
 800d4f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d500:	4618      	mov	r0, r3
 800d502:	f7fb fe99 	bl	8009238 <HAL_DMA_Abort_IT>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d011      	beq.n	800d530 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d516:	4610      	mov	r0, r2
 800d518:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d51a:	e009      	b.n	800d530 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 f813 	bl	800d548 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d522:	e005      	b.n	800d530 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f80f 	bl	800d548 <I2C_TreatErrorCallback>
  }
}
 800d52a:	e002      	b.n	800d532 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d52c:	bf00      	nop
 800d52e:	e000      	b.n	800d532 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d530:	bf00      	nop
}
 800d532:	bf00      	nop
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	ffff0000 	.word	0xffff0000
 800d540:	0800c01f 	.word	0x0800c01f
 800d544:	0800d981 	.word	0x0800d981

0800d548 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b60      	cmp	r3, #96	; 0x60
 800d55a:	d10e      	bne.n	800d57a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2220      	movs	r2, #32
 800d560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7fe fc07 	bl	800bd86 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d578:	e009      	b.n	800d58e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7fe fbf2 	bl	800bd72 <HAL_I2C_ErrorCallback>
}
 800d58e:	bf00      	nop
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d596:	b480      	push	{r7}
 800d598:	b083      	sub	sp, #12
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	699b      	ldr	r3, [r3, #24]
 800d5a4:	f003 0302 	and.w	r3, r3, #2
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d103      	bne.n	800d5b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	699b      	ldr	r3, [r3, #24]
 800d5ba:	f003 0301 	and.w	r3, r3, #1
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d007      	beq.n	800d5d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	699a      	ldr	r2, [r3, #24]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f042 0201 	orr.w	r2, r2, #1
 800d5d0:	619a      	str	r2, [r3, #24]
  }
}
 800d5d2:	bf00      	nop
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b084      	sub	sp, #16
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ea:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d5fa:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d600:	b29b      	uxth	r3, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	d104      	bne.n	800d610 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d606:	2120      	movs	r1, #32
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f000 fa09 	bl	800da20 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d60e:	e02d      	b.n	800d66c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d618:	441a      	add	r2, r3
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d622:	b29b      	uxth	r3, r3
 800d624:	2bff      	cmp	r3, #255	; 0xff
 800d626:	d903      	bls.n	800d630 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	22ff      	movs	r2, #255	; 0xff
 800d62c:	851a      	strh	r2, [r3, #40]	; 0x28
 800d62e:	e004      	b.n	800d63a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d634:	b29a      	uxth	r2, r3
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d642:	4619      	mov	r1, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3328      	adds	r3, #40	; 0x28
 800d64a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d650:	f7fb f86a 	bl	8008728 <HAL_DMA_Start_IT>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d004      	beq.n	800d664 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d65a:	2110      	movs	r1, #16
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f7ff fe83 	bl	800d368 <I2C_ITError>
}
 800d662:	e003      	b.n	800d66c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d664:	2140      	movs	r1, #64	; 0x40
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f000 f9da 	bl	800da20 <I2C_Enable_IRQ>
}
 800d66c:	bf00      	nop
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d680:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d690:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d696:	b29b      	uxth	r3, r3
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d104      	bne.n	800d6a6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d69c:	2120      	movs	r1, #32
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f000 f9be 	bl	800da20 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d6a4:	e02d      	b.n	800d702 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d6ae:	441a      	add	r2, r3
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	2bff      	cmp	r3, #255	; 0xff
 800d6bc:	d903      	bls.n	800d6c6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	22ff      	movs	r2, #255	; 0xff
 800d6c2:	851a      	strh	r2, [r3, #40]	; 0x28
 800d6c4:	e004      	b.n	800d6d0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3324      	adds	r3, #36	; 0x24
 800d6da:	4619      	mov	r1, r3
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d6e6:	f7fb f81f 	bl	8008728 <HAL_DMA_Start_IT>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d004      	beq.n	800d6fa <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d6f0:	2110      	movs	r1, #16
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f7ff fe38 	bl	800d368 <I2C_ITError>
}
 800d6f8:	e003      	b.n	800d702 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d6fa:	2140      	movs	r1, #64	; 0x40
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f000 f98f 	bl	800da20 <I2C_Enable_IRQ>
}
 800d702:	bf00      	nop
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
	...

0800d70c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d714:	2300      	movs	r3, #0
 800d716:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d722:	2b00      	cmp	r3, #0
 800d724:	d076      	beq.n	800d814 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a71      	ldr	r2, [pc, #452]	; (800d8f4 <I2C_DMAError+0x1e8>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d059      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a6f      	ldr	r2, [pc, #444]	; (800d8f8 <I2C_DMAError+0x1ec>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d053      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a6d      	ldr	r2, [pc, #436]	; (800d8fc <I2C_DMAError+0x1f0>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d04d      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a6b      	ldr	r2, [pc, #428]	; (800d900 <I2C_DMAError+0x1f4>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d047      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a69      	ldr	r2, [pc, #420]	; (800d904 <I2C_DMAError+0x1f8>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d041      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a67      	ldr	r2, [pc, #412]	; (800d908 <I2C_DMAError+0x1fc>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d03b      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a65      	ldr	r2, [pc, #404]	; (800d90c <I2C_DMAError+0x200>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d035      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a63      	ldr	r2, [pc, #396]	; (800d910 <I2C_DMAError+0x204>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d02f      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a61      	ldr	r2, [pc, #388]	; (800d914 <I2C_DMAError+0x208>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d029      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a5f      	ldr	r2, [pc, #380]	; (800d918 <I2C_DMAError+0x20c>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d023      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a5d      	ldr	r2, [pc, #372]	; (800d91c <I2C_DMAError+0x210>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d01d      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a5b      	ldr	r2, [pc, #364]	; (800d920 <I2C_DMAError+0x214>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d017      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a59      	ldr	r2, [pc, #356]	; (800d924 <I2C_DMAError+0x218>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d011      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a57      	ldr	r2, [pc, #348]	; (800d928 <I2C_DMAError+0x21c>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d00b      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a55      	ldr	r2, [pc, #340]	; (800d92c <I2C_DMAError+0x220>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d005      	beq.n	800d7e6 <I2C_DMAError+0xda>
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a53      	ldr	r2, [pc, #332]	; (800d930 <I2C_DMAError+0x224>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d109      	bne.n	800d7fa <I2C_DMAError+0xee>
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	bf0c      	ite	eq
 800d7f2:	2301      	moveq	r3, #1
 800d7f4:	2300      	movne	r3, #0
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	e008      	b.n	800d80c <I2C_DMAError+0x100>
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	bf0c      	ite	eq
 800d806:	2301      	moveq	r3, #1
 800d808:	2300      	movne	r3, #0
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d810:	2301      	movs	r3, #1
 800d812:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 8098 	beq.w	800d94e <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a33      	ldr	r2, [pc, #204]	; (800d8f4 <I2C_DMAError+0x1e8>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d059      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a31      	ldr	r2, [pc, #196]	; (800d8f8 <I2C_DMAError+0x1ec>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d053      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a2f      	ldr	r2, [pc, #188]	; (800d8fc <I2C_DMAError+0x1f0>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d04d      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a2d      	ldr	r2, [pc, #180]	; (800d900 <I2C_DMAError+0x1f4>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d047      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a2b      	ldr	r2, [pc, #172]	; (800d904 <I2C_DMAError+0x1f8>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d041      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a29      	ldr	r2, [pc, #164]	; (800d908 <I2C_DMAError+0x1fc>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d03b      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a27      	ldr	r2, [pc, #156]	; (800d90c <I2C_DMAError+0x200>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d035      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a25      	ldr	r2, [pc, #148]	; (800d910 <I2C_DMAError+0x204>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d02f      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a23      	ldr	r2, [pc, #140]	; (800d914 <I2C_DMAError+0x208>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d029      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a21      	ldr	r2, [pc, #132]	; (800d918 <I2C_DMAError+0x20c>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d023      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a1f      	ldr	r2, [pc, #124]	; (800d91c <I2C_DMAError+0x210>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d01d      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a1d      	ldr	r2, [pc, #116]	; (800d920 <I2C_DMAError+0x214>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d017      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a1b      	ldr	r2, [pc, #108]	; (800d924 <I2C_DMAError+0x218>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d011      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a19      	ldr	r2, [pc, #100]	; (800d928 <I2C_DMAError+0x21c>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d00b      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a17      	ldr	r2, [pc, #92]	; (800d92c <I2C_DMAError+0x220>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d005      	beq.n	800d8de <I2C_DMAError+0x1d2>
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a15      	ldr	r2, [pc, #84]	; (800d930 <I2C_DMAError+0x224>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d12a      	bne.n	800d934 <I2C_DMAError+0x228>
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	bf0c      	ite	eq
 800d8ea:	2301      	moveq	r3, #1
 800d8ec:	2300      	movne	r3, #0
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	e029      	b.n	800d946 <I2C_DMAError+0x23a>
 800d8f2:	bf00      	nop
 800d8f4:	40020010 	.word	0x40020010
 800d8f8:	40020028 	.word	0x40020028
 800d8fc:	40020040 	.word	0x40020040
 800d900:	40020058 	.word	0x40020058
 800d904:	40020070 	.word	0x40020070
 800d908:	40020088 	.word	0x40020088
 800d90c:	400200a0 	.word	0x400200a0
 800d910:	400200b8 	.word	0x400200b8
 800d914:	40020410 	.word	0x40020410
 800d918:	40020428 	.word	0x40020428
 800d91c:	40020440 	.word	0x40020440
 800d920:	40020458 	.word	0x40020458
 800d924:	40020470 	.word	0x40020470
 800d928:	40020488 	.word	0x40020488
 800d92c:	400204a0 	.word	0x400204a0
 800d930:	400204b8 	.word	0x400204b8
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	bf0c      	ite	eq
 800d940:	2301      	moveq	r3, #1
 800d942:	2300      	movne	r3, #0
 800d944:	b2db      	uxtb	r3, r3
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d94a:	2301      	movs	r3, #1
 800d94c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f7fc fdf0 	bl	800a534 <HAL_DMA_GetError>
 800d954:	4603      	mov	r3, r0
 800d956:	2b02      	cmp	r3, #2
 800d958:	d00e      	beq.n	800d978 <I2C_DMAError+0x26c>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00b      	beq.n	800d978 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d96e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d970:	2110      	movs	r1, #16
 800d972:	68b8      	ldr	r0, [r7, #8]
 800d974:	f7ff fcf8 	bl	800d368 <I2C_ITError>
  }
}
 800d978:	bf00      	nop
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99a:	2200      	movs	r2, #0
 800d99c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f7ff fdca 	bl	800d548 <I2C_TreatErrorCallback>
}
 800d9b4:	bf00      	nop
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b087      	sub	sp, #28
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	607b      	str	r3, [r7, #4]
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	817b      	strh	r3, [r7, #10]
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d9ce:	897b      	ldrh	r3, [r7, #10]
 800d9d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d9d4:	7a7b      	ldrb	r3, [r7, #9]
 800d9d6:	041b      	lsls	r3, r3, #16
 800d9d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d9dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	685a      	ldr	r2, [r3, #4]
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	0d5b      	lsrs	r3, r3, #21
 800d9f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d9fa:	4b08      	ldr	r3, [pc, #32]	; (800da1c <I2C_TransferConfig+0x60>)
 800d9fc:	430b      	orrs	r3, r1
 800d9fe:	43db      	mvns	r3, r3
 800da00:	ea02 0103 	and.w	r1, r2, r3
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	430a      	orrs	r2, r1
 800da0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800da0e:	bf00      	nop
 800da10:	371c      	adds	r7, #28
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	03ff63ff 	.word	0x03ff63ff

0800da20 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800da2c:	2300      	movs	r3, #0
 800da2e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da34:	4a39      	ldr	r2, [pc, #228]	; (800db1c <I2C_Enable_IRQ+0xfc>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d032      	beq.n	800daa0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800da3e:	4a38      	ldr	r2, [pc, #224]	; (800db20 <I2C_Enable_IRQ+0x100>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d02d      	beq.n	800daa0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800da48:	4a36      	ldr	r2, [pc, #216]	; (800db24 <I2C_Enable_IRQ+0x104>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d028      	beq.n	800daa0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800da4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da52:	2b00      	cmp	r3, #0
 800da54:	da03      	bge.n	800da5e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800da5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800da5e:	887b      	ldrh	r3, [r7, #2]
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	2b00      	cmp	r3, #0
 800da66:	d003      	beq.n	800da70 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800da6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800da70:	887b      	ldrh	r3, [r7, #2]
 800da72:	f003 0302 	and.w	r3, r3, #2
 800da76:	2b00      	cmp	r3, #0
 800da78:	d003      	beq.n	800da82 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800da80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800da82:	887b      	ldrh	r3, [r7, #2]
 800da84:	2b10      	cmp	r3, #16
 800da86:	d103      	bne.n	800da90 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800da8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800da90:	887b      	ldrh	r3, [r7, #2]
 800da92:	2b20      	cmp	r3, #32
 800da94:	d133      	bne.n	800dafe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f043 0320 	orr.w	r3, r3, #32
 800da9c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800da9e:	e02e      	b.n	800dafe <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800daa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	da03      	bge.n	800dab0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800daae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dab0:	887b      	ldrh	r3, [r7, #2]
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d003      	beq.n	800dac2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dac0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dac2:	887b      	ldrh	r3, [r7, #2]
 800dac4:	f003 0302 	and.w	r3, r3, #2
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dad2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dad4:	887b      	ldrh	r3, [r7, #2]
 800dad6:	2b10      	cmp	r3, #16
 800dad8:	d103      	bne.n	800dae2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dae0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dae2:	887b      	ldrh	r3, [r7, #2]
 800dae4:	2b20      	cmp	r3, #32
 800dae6:	d103      	bne.n	800daf0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800daee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800daf0:	887b      	ldrh	r3, [r7, #2]
 800daf2:	2b40      	cmp	r3, #64	; 0x40
 800daf4:	d103      	bne.n	800dafe <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dafc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6819      	ldr	r1, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	430a      	orrs	r2, r1
 800db0c:	601a      	str	r2, [r3, #0]
}
 800db0e:	bf00      	nop
 800db10:	3714      	adds	r7, #20
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	0800c227 	.word	0x0800c227
 800db20:	0800c66d 	.word	0x0800c66d
 800db24:	0800c40d 	.word	0x0800c40d

0800db28 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800db28:	b480      	push	{r7}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	460b      	mov	r3, r1
 800db32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800db34:	2300      	movs	r3, #0
 800db36:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800db38:	887b      	ldrh	r3, [r7, #2]
 800db3a:	f003 0301 	and.w	r3, r3, #1
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00f      	beq.n	800db62 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800db48:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800db56:	2b28      	cmp	r3, #40	; 0x28
 800db58:	d003      	beq.n	800db62 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800db60:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800db62:	887b      	ldrh	r3, [r7, #2]
 800db64:	f003 0302 	and.w	r3, r3, #2
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00f      	beq.n	800db8c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800db72:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800db80:	2b28      	cmp	r3, #40	; 0x28
 800db82:	d003      	beq.n	800db8c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800db8a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800db8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db90:	2b00      	cmp	r3, #0
 800db92:	da03      	bge.n	800db9c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800db9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800db9c:	887b      	ldrh	r3, [r7, #2]
 800db9e:	2b10      	cmp	r3, #16
 800dba0:	d103      	bne.n	800dbaa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dba8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dbaa:	887b      	ldrh	r3, [r7, #2]
 800dbac:	2b20      	cmp	r3, #32
 800dbae:	d103      	bne.n	800dbb8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f043 0320 	orr.w	r3, r3, #32
 800dbb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dbb8:	887b      	ldrh	r3, [r7, #2]
 800dbba:	2b40      	cmp	r3, #64	; 0x40
 800dbbc:	d103      	bne.n	800dbc6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbc4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	6819      	ldr	r1, [r3, #0]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	43da      	mvns	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	400a      	ands	r2, r1
 800dbd6:	601a      	str	r2, [r3, #0]
}
 800dbd8:	bf00      	nop
 800dbda:	3714      	adds	r7, #20
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b20      	cmp	r3, #32
 800dbf8:	d138      	bne.n	800dc6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d101      	bne.n	800dc08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dc04:	2302      	movs	r3, #2
 800dc06:	e032      	b.n	800dc6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2224      	movs	r2, #36	; 0x24
 800dc14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f022 0201 	bic.w	r2, r2, #1
 800dc26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dc36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	6819      	ldr	r1, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	683a      	ldr	r2, [r7, #0]
 800dc44:	430a      	orrs	r2, r1
 800dc46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f042 0201 	orr.w	r2, r2, #1
 800dc56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2220      	movs	r2, #32
 800dc5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	e000      	b.n	800dc6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dc6c:	2302      	movs	r3, #2
  }
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b085      	sub	sp, #20
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	2b20      	cmp	r3, #32
 800dc8e:	d139      	bne.n	800dd04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d101      	bne.n	800dc9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800dc9a:	2302      	movs	r3, #2
 800dc9c:	e033      	b.n	800dd06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2201      	movs	r2, #1
 800dca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2224      	movs	r2, #36	; 0x24
 800dcaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f022 0201 	bic.w	r2, r2, #1
 800dcbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800dccc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	021b      	lsls	r3, r3, #8
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f042 0201 	orr.w	r2, r2, #1
 800dcee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2220      	movs	r2, #32
 800dcf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dd00:	2300      	movs	r3, #0
 800dd02:	e000      	b.n	800dd06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800dd04:	2302      	movs	r3, #2
  }
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3714      	adds	r7, #20
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
	...

0800dd14 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd1c:	4b0d      	ldr	r3, [pc, #52]	; (800dd54 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800dd1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dd22:	4a0c      	ldr	r2, [pc, #48]	; (800dd54 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800dd24:	f043 0302 	orr.w	r3, r3, #2
 800dd28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800dd2c:	4b09      	ldr	r3, [pc, #36]	; (800dd54 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800dd2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dd32:	f003 0302 	and.w	r3, r3, #2
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800dd3a:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800dd3c:	685a      	ldr	r2, [r3, #4]
 800dd3e:	4906      	ldr	r1, [pc, #24]	; (800dd58 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4313      	orrs	r3, r2
 800dd44:	604b      	str	r3, [r1, #4]
}
 800dd46:	bf00      	nop
 800dd48:	3714      	adds	r7, #20
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	58024400 	.word	0x58024400
 800dd58:	58000400 	.word	0x58000400

0800dd5c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800dd6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	460b      	mov	r3, r1
 800dd86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800dd88:	4b18      	ldr	r3, [pc, #96]	; (800ddec <HAL_PWR_EnterSTOPMode+0x70>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f023 0201 	bic.w	r2, r3, #1
 800dd90:	4916      	ldr	r1, [pc, #88]	; (800ddec <HAL_PWR_EnterSTOPMode+0x70>)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4313      	orrs	r3, r2
 800dd96:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800dd98:	4b14      	ldr	r3, [pc, #80]	; (800ddec <HAL_PWR_EnterSTOPMode+0x70>)
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	4a13      	ldr	r2, [pc, #76]	; (800ddec <HAL_PWR_EnterSTOPMode+0x70>)
 800dd9e:	f023 0305 	bic.w	r3, r3, #5
 800dda2:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800dda4:	4b11      	ldr	r3, [pc, #68]	; (800ddec <HAL_PWR_EnterSTOPMode+0x70>)
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	4a10      	ldr	r2, [pc, #64]	; (800ddec <HAL_PWR_EnterSTOPMode+0x70>)
 800ddaa:	f023 0302 	bic.w	r3, r3, #2
 800ddae:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ddb0:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <HAL_PWR_EnterSTOPMode+0x74>)
 800ddb2:	691b      	ldr	r3, [r3, #16]
 800ddb4:	4a0e      	ldr	r2, [pc, #56]	; (800ddf0 <HAL_PWR_EnterSTOPMode+0x74>)
 800ddb6:	f043 0304 	orr.w	r3, r3, #4
 800ddba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800ddbc:	f3bf 8f4f 	dsb	sy
}
 800ddc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ddc2:	f3bf 8f6f 	isb	sy
}
 800ddc6:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800ddc8:	78fb      	ldrb	r3, [r7, #3]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d101      	bne.n	800ddd2 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800ddce:	bf30      	wfi
 800ddd0:	e000      	b.n	800ddd4 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800ddd2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ddd4:	4b06      	ldr	r3, [pc, #24]	; (800ddf0 <HAL_PWR_EnterSTOPMode+0x74>)
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	4a05      	ldr	r2, [pc, #20]	; (800ddf0 <HAL_PWR_EnterSTOPMode+0x74>)
 800ddda:	f023 0304 	bic.w	r3, r3, #4
 800ddde:	6113      	str	r3, [r2, #16]
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr
 800ddec:	58024800 	.word	0x58024800
 800ddf0:	e000ed00 	.word	0xe000ed00

0800ddf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ddfc:	4b19      	ldr	r3, [pc, #100]	; (800de64 <HAL_PWREx_ConfigSupply+0x70>)
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	f003 0304 	and.w	r3, r3, #4
 800de04:	2b04      	cmp	r3, #4
 800de06:	d00a      	beq.n	800de1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800de08:	4b16      	ldr	r3, [pc, #88]	; (800de64 <HAL_PWREx_ConfigSupply+0x70>)
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	f003 0307 	and.w	r3, r3, #7
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	429a      	cmp	r2, r3
 800de14:	d001      	beq.n	800de1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	e01f      	b.n	800de5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800de1a:	2300      	movs	r3, #0
 800de1c:	e01d      	b.n	800de5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800de1e:	4b11      	ldr	r3, [pc, #68]	; (800de64 <HAL_PWREx_ConfigSupply+0x70>)
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	f023 0207 	bic.w	r2, r3, #7
 800de26:	490f      	ldr	r1, [pc, #60]	; (800de64 <HAL_PWREx_ConfigSupply+0x70>)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800de2e:	f7f7 fff7 	bl	8005e20 <HAL_GetTick>
 800de32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800de34:	e009      	b.n	800de4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800de36:	f7f7 fff3 	bl	8005e20 <HAL_GetTick>
 800de3a:	4602      	mov	r2, r0
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de44:	d901      	bls.n	800de4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	e007      	b.n	800de5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800de4a:	4b06      	ldr	r3, [pc, #24]	; (800de64 <HAL_PWREx_ConfigSupply+0x70>)
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de56:	d1ee      	bne.n	800de36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	58024800 	.word	0x58024800

0800de68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b08c      	sub	sp, #48	; 0x30
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d102      	bne.n	800de7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	f000 bc48 	b.w	800e70c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	f000 8088 	beq.w	800df9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de8a:	4b99      	ldr	r3, [pc, #612]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de92:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800de94:	4b96      	ldr	r3, [pc, #600]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800de96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de98:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	2b10      	cmp	r3, #16
 800de9e:	d007      	beq.n	800deb0 <HAL_RCC_OscConfig+0x48>
 800dea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea2:	2b18      	cmp	r3, #24
 800dea4:	d111      	bne.n	800deca <HAL_RCC_OscConfig+0x62>
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	f003 0303 	and.w	r3, r3, #3
 800deac:	2b02      	cmp	r3, #2
 800deae:	d10c      	bne.n	800deca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800deb0:	4b8f      	ldr	r3, [pc, #572]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d06d      	beq.n	800df98 <HAL_RCC_OscConfig+0x130>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d169      	bne.n	800df98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	f000 bc21 	b.w	800e70c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ded2:	d106      	bne.n	800dee2 <HAL_RCC_OscConfig+0x7a>
 800ded4:	4b86      	ldr	r3, [pc, #536]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a85      	ldr	r2, [pc, #532]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800deda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	e02e      	b.n	800df40 <HAL_RCC_OscConfig+0xd8>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10c      	bne.n	800df04 <HAL_RCC_OscConfig+0x9c>
 800deea:	4b81      	ldr	r3, [pc, #516]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a80      	ldr	r2, [pc, #512]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800def0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800def4:	6013      	str	r3, [r2, #0]
 800def6:	4b7e      	ldr	r3, [pc, #504]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a7d      	ldr	r2, [pc, #500]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800defc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df00:	6013      	str	r3, [r2, #0]
 800df02:	e01d      	b.n	800df40 <HAL_RCC_OscConfig+0xd8>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800df0c:	d10c      	bne.n	800df28 <HAL_RCC_OscConfig+0xc0>
 800df0e:	4b78      	ldr	r3, [pc, #480]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a77      	ldr	r2, [pc, #476]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df18:	6013      	str	r3, [r2, #0]
 800df1a:	4b75      	ldr	r3, [pc, #468]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4a74      	ldr	r2, [pc, #464]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df24:	6013      	str	r3, [r2, #0]
 800df26:	e00b      	b.n	800df40 <HAL_RCC_OscConfig+0xd8>
 800df28:	4b71      	ldr	r3, [pc, #452]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a70      	ldr	r2, [pc, #448]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df32:	6013      	str	r3, [r2, #0]
 800df34:	4b6e      	ldr	r3, [pc, #440]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a6d      	ldr	r2, [pc, #436]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d013      	beq.n	800df70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df48:	f7f7 ff6a 	bl	8005e20 <HAL_GetTick>
 800df4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df4e:	e008      	b.n	800df62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df50:	f7f7 ff66 	bl	8005e20 <HAL_GetTick>
 800df54:	4602      	mov	r2, r0
 800df56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df58:	1ad3      	subs	r3, r2, r3
 800df5a:	2b64      	cmp	r3, #100	; 0x64
 800df5c:	d901      	bls.n	800df62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800df5e:	2303      	movs	r3, #3
 800df60:	e3d4      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df62:	4b63      	ldr	r3, [pc, #396]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d0f0      	beq.n	800df50 <HAL_RCC_OscConfig+0xe8>
 800df6e:	e014      	b.n	800df9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df70:	f7f7 ff56 	bl	8005e20 <HAL_GetTick>
 800df74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df76:	e008      	b.n	800df8a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df78:	f7f7 ff52 	bl	8005e20 <HAL_GetTick>
 800df7c:	4602      	mov	r2, r0
 800df7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	2b64      	cmp	r3, #100	; 0x64
 800df84:	d901      	bls.n	800df8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800df86:	2303      	movs	r3, #3
 800df88:	e3c0      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df8a:	4b59      	ldr	r3, [pc, #356]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1f0      	bne.n	800df78 <HAL_RCC_OscConfig+0x110>
 800df96:	e000      	b.n	800df9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f003 0302 	and.w	r3, r3, #2
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f000 80ca 	beq.w	800e13c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dfa8:	4b51      	ldr	r3, [pc, #324]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfb0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dfb2:	4b4f      	ldr	r3, [pc, #316]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800dfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d007      	beq.n	800dfce <HAL_RCC_OscConfig+0x166>
 800dfbe:	6a3b      	ldr	r3, [r7, #32]
 800dfc0:	2b18      	cmp	r3, #24
 800dfc2:	d156      	bne.n	800e072 <HAL_RCC_OscConfig+0x20a>
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d151      	bne.n	800e072 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dfce:	4b48      	ldr	r3, [pc, #288]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f003 0304 	and.w	r3, r3, #4
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d005      	beq.n	800dfe6 <HAL_RCC_OscConfig+0x17e>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d101      	bne.n	800dfe6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e392      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dfe6:	4b42      	ldr	r3, [pc, #264]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f023 0219 	bic.w	r2, r3, #25
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	493f      	ldr	r1, [pc, #252]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800dff4:	4313      	orrs	r3, r2
 800dff6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dff8:	f7f7 ff12 	bl	8005e20 <HAL_GetTick>
 800dffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dffe:	e008      	b.n	800e012 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e000:	f7f7 ff0e 	bl	8005e20 <HAL_GetTick>
 800e004:	4602      	mov	r2, r0
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	d901      	bls.n	800e012 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e00e:	2303      	movs	r3, #3
 800e010:	e37c      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e012:	4b37      	ldr	r3, [pc, #220]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f003 0304 	and.w	r3, r3, #4
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d0f0      	beq.n	800e000 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e01e:	f7f7 ff0b 	bl	8005e38 <HAL_GetREVID>
 800e022:	4603      	mov	r3, r0
 800e024:	f241 0203 	movw	r2, #4099	; 0x1003
 800e028:	4293      	cmp	r3, r2
 800e02a:	d817      	bhi.n	800e05c <HAL_RCC_OscConfig+0x1f4>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	691b      	ldr	r3, [r3, #16]
 800e030:	2b40      	cmp	r3, #64	; 0x40
 800e032:	d108      	bne.n	800e046 <HAL_RCC_OscConfig+0x1de>
 800e034:	4b2e      	ldr	r3, [pc, #184]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e03c:	4a2c      	ldr	r2, [pc, #176]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e03e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e042:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e044:	e07a      	b.n	800e13c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e046:	4b2a      	ldr	r3, [pc, #168]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	031b      	lsls	r3, r3, #12
 800e054:	4926      	ldr	r1, [pc, #152]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e056:	4313      	orrs	r3, r2
 800e058:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e05a:	e06f      	b.n	800e13c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e05c:	4b24      	ldr	r3, [pc, #144]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	061b      	lsls	r3, r3, #24
 800e06a:	4921      	ldr	r1, [pc, #132]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e06c:	4313      	orrs	r3, r2
 800e06e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e070:	e064      	b.n	800e13c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d047      	beq.n	800e10a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e07a:	4b1d      	ldr	r3, [pc, #116]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f023 0219 	bic.w	r2, r3, #25
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	491a      	ldr	r1, [pc, #104]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e088:	4313      	orrs	r3, r2
 800e08a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e08c:	f7f7 fec8 	bl	8005e20 <HAL_GetTick>
 800e090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e092:	e008      	b.n	800e0a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e094:	f7f7 fec4 	bl	8005e20 <HAL_GetTick>
 800e098:	4602      	mov	r2, r0
 800e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	2b02      	cmp	r3, #2
 800e0a0:	d901      	bls.n	800e0a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	e332      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e0a6:	4b12      	ldr	r3, [pc, #72]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f003 0304 	and.w	r3, r3, #4
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d0f0      	beq.n	800e094 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e0b2:	f7f7 fec1 	bl	8005e38 <HAL_GetREVID>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	f241 0203 	movw	r2, #4099	; 0x1003
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d819      	bhi.n	800e0f4 <HAL_RCC_OscConfig+0x28c>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	2b40      	cmp	r3, #64	; 0x40
 800e0c6:	d108      	bne.n	800e0da <HAL_RCC_OscConfig+0x272>
 800e0c8:	4b09      	ldr	r3, [pc, #36]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e0d0:	4a07      	ldr	r2, [pc, #28]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e0d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0d6:	6053      	str	r3, [r2, #4]
 800e0d8:	e030      	b.n	800e13c <HAL_RCC_OscConfig+0x2d4>
 800e0da:	4b05      	ldr	r3, [pc, #20]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	691b      	ldr	r3, [r3, #16]
 800e0e6:	031b      	lsls	r3, r3, #12
 800e0e8:	4901      	ldr	r1, [pc, #4]	; (800e0f0 <HAL_RCC_OscConfig+0x288>)
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	604b      	str	r3, [r1, #4]
 800e0ee:	e025      	b.n	800e13c <HAL_RCC_OscConfig+0x2d4>
 800e0f0:	58024400 	.word	0x58024400
 800e0f4:	4b9a      	ldr	r3, [pc, #616]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	691b      	ldr	r3, [r3, #16]
 800e100:	061b      	lsls	r3, r3, #24
 800e102:	4997      	ldr	r1, [pc, #604]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e104:	4313      	orrs	r3, r2
 800e106:	604b      	str	r3, [r1, #4]
 800e108:	e018      	b.n	800e13c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e10a:	4b95      	ldr	r3, [pc, #596]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a94      	ldr	r2, [pc, #592]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e110:	f023 0301 	bic.w	r3, r3, #1
 800e114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e116:	f7f7 fe83 	bl	8005e20 <HAL_GetTick>
 800e11a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e11c:	e008      	b.n	800e130 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e11e:	f7f7 fe7f 	bl	8005e20 <HAL_GetTick>
 800e122:	4602      	mov	r2, r0
 800e124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d901      	bls.n	800e130 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e12c:	2303      	movs	r3, #3
 800e12e:	e2ed      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e130:	4b8b      	ldr	r3, [pc, #556]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 0304 	and.w	r3, r3, #4
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1f0      	bne.n	800e11e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f003 0310 	and.w	r3, r3, #16
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 80a9 	beq.w	800e29c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e14a:	4b85      	ldr	r3, [pc, #532]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e14c:	691b      	ldr	r3, [r3, #16]
 800e14e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e152:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e154:	4b82      	ldr	r3, [pc, #520]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e158:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	2b08      	cmp	r3, #8
 800e15e:	d007      	beq.n	800e170 <HAL_RCC_OscConfig+0x308>
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	2b18      	cmp	r3, #24
 800e164:	d13a      	bne.n	800e1dc <HAL_RCC_OscConfig+0x374>
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f003 0303 	and.w	r3, r3, #3
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d135      	bne.n	800e1dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e170:	4b7b      	ldr	r3, [pc, #492]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d005      	beq.n	800e188 <HAL_RCC_OscConfig+0x320>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	69db      	ldr	r3, [r3, #28]
 800e180:	2b80      	cmp	r3, #128	; 0x80
 800e182:	d001      	beq.n	800e188 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e184:	2301      	movs	r3, #1
 800e186:	e2c1      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e188:	f7f7 fe56 	bl	8005e38 <HAL_GetREVID>
 800e18c:	4603      	mov	r3, r0
 800e18e:	f241 0203 	movw	r2, #4099	; 0x1003
 800e192:	4293      	cmp	r3, r2
 800e194:	d817      	bhi.n	800e1c6 <HAL_RCC_OscConfig+0x35e>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6a1b      	ldr	r3, [r3, #32]
 800e19a:	2b20      	cmp	r3, #32
 800e19c:	d108      	bne.n	800e1b0 <HAL_RCC_OscConfig+0x348>
 800e19e:	4b70      	ldr	r3, [pc, #448]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e1a6:	4a6e      	ldr	r2, [pc, #440]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e1a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e1ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e1ae:	e075      	b.n	800e29c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e1b0:	4b6b      	ldr	r3, [pc, #428]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6a1b      	ldr	r3, [r3, #32]
 800e1bc:	069b      	lsls	r3, r3, #26
 800e1be:	4968      	ldr	r1, [pc, #416]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e1c4:	e06a      	b.n	800e29c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e1c6:	4b66      	ldr	r3, [pc, #408]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a1b      	ldr	r3, [r3, #32]
 800e1d2:	061b      	lsls	r3, r3, #24
 800e1d4:	4962      	ldr	r1, [pc, #392]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e1da:	e05f      	b.n	800e29c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	69db      	ldr	r3, [r3, #28]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d042      	beq.n	800e26a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e1e4:	4b5e      	ldr	r3, [pc, #376]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a5d      	ldr	r2, [pc, #372]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e1ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1f0:	f7f7 fe16 	bl	8005e20 <HAL_GetTick>
 800e1f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e1f6:	e008      	b.n	800e20a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e1f8:	f7f7 fe12 	bl	8005e20 <HAL_GetTick>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	2b02      	cmp	r3, #2
 800e204:	d901      	bls.n	800e20a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e280      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e20a:	4b55      	ldr	r3, [pc, #340]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e212:	2b00      	cmp	r3, #0
 800e214:	d0f0      	beq.n	800e1f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e216:	f7f7 fe0f 	bl	8005e38 <HAL_GetREVID>
 800e21a:	4603      	mov	r3, r0
 800e21c:	f241 0203 	movw	r2, #4099	; 0x1003
 800e220:	4293      	cmp	r3, r2
 800e222:	d817      	bhi.n	800e254 <HAL_RCC_OscConfig+0x3ec>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6a1b      	ldr	r3, [r3, #32]
 800e228:	2b20      	cmp	r3, #32
 800e22a:	d108      	bne.n	800e23e <HAL_RCC_OscConfig+0x3d6>
 800e22c:	4b4c      	ldr	r3, [pc, #304]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e234:	4a4a      	ldr	r2, [pc, #296]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e23a:	6053      	str	r3, [r2, #4]
 800e23c:	e02e      	b.n	800e29c <HAL_RCC_OscConfig+0x434>
 800e23e:	4b48      	ldr	r3, [pc, #288]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a1b      	ldr	r3, [r3, #32]
 800e24a:	069b      	lsls	r3, r3, #26
 800e24c:	4944      	ldr	r1, [pc, #272]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e24e:	4313      	orrs	r3, r2
 800e250:	604b      	str	r3, [r1, #4]
 800e252:	e023      	b.n	800e29c <HAL_RCC_OscConfig+0x434>
 800e254:	4b42      	ldr	r3, [pc, #264]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6a1b      	ldr	r3, [r3, #32]
 800e260:	061b      	lsls	r3, r3, #24
 800e262:	493f      	ldr	r1, [pc, #252]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e264:	4313      	orrs	r3, r2
 800e266:	60cb      	str	r3, [r1, #12]
 800e268:	e018      	b.n	800e29c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e26a:	4b3d      	ldr	r3, [pc, #244]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a3c      	ldr	r2, [pc, #240]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e276:	f7f7 fdd3 	bl	8005e20 <HAL_GetTick>
 800e27a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e27c:	e008      	b.n	800e290 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e27e:	f7f7 fdcf 	bl	8005e20 <HAL_GetTick>
 800e282:	4602      	mov	r2, r0
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	1ad3      	subs	r3, r2, r3
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d901      	bls.n	800e290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e28c:	2303      	movs	r3, #3
 800e28e:	e23d      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e290:	4b33      	ldr	r3, [pc, #204]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1f0      	bne.n	800e27e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f003 0308 	and.w	r3, r3, #8
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d036      	beq.n	800e316 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	695b      	ldr	r3, [r3, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d019      	beq.n	800e2e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e2b0:	4b2b      	ldr	r3, [pc, #172]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e2b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2b4:	4a2a      	ldr	r2, [pc, #168]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e2b6:	f043 0301 	orr.w	r3, r3, #1
 800e2ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2bc:	f7f7 fdb0 	bl	8005e20 <HAL_GetTick>
 800e2c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e2c2:	e008      	b.n	800e2d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e2c4:	f7f7 fdac 	bl	8005e20 <HAL_GetTick>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2cc:	1ad3      	subs	r3, r2, r3
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	d901      	bls.n	800e2d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	e21a      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e2d6:	4b22      	ldr	r3, [pc, #136]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2da:	f003 0302 	and.w	r3, r3, #2
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d0f0      	beq.n	800e2c4 <HAL_RCC_OscConfig+0x45c>
 800e2e2:	e018      	b.n	800e316 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e2e4:	4b1e      	ldr	r3, [pc, #120]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2e8:	4a1d      	ldr	r2, [pc, #116]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e2ea:	f023 0301 	bic.w	r3, r3, #1
 800e2ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2f0:	f7f7 fd96 	bl	8005e20 <HAL_GetTick>
 800e2f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e2f6:	e008      	b.n	800e30a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e2f8:	f7f7 fd92 	bl	8005e20 <HAL_GetTick>
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e300:	1ad3      	subs	r3, r2, r3
 800e302:	2b02      	cmp	r3, #2
 800e304:	d901      	bls.n	800e30a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e306:	2303      	movs	r3, #3
 800e308:	e200      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e30a:	4b15      	ldr	r3, [pc, #84]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e30e:	f003 0302 	and.w	r3, r3, #2
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1f0      	bne.n	800e2f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f003 0320 	and.w	r3, r3, #32
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d039      	beq.n	800e396 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	699b      	ldr	r3, [r3, #24]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d01c      	beq.n	800e364 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e32a:	4b0d      	ldr	r3, [pc, #52]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a0c      	ldr	r2, [pc, #48]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e334:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e336:	f7f7 fd73 	bl	8005e20 <HAL_GetTick>
 800e33a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e33c:	e008      	b.n	800e350 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e33e:	f7f7 fd6f 	bl	8005e20 <HAL_GetTick>
 800e342:	4602      	mov	r2, r0
 800e344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e346:	1ad3      	subs	r3, r2, r3
 800e348:	2b02      	cmp	r3, #2
 800e34a:	d901      	bls.n	800e350 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e34c:	2303      	movs	r3, #3
 800e34e:	e1dd      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e350:	4b03      	ldr	r3, [pc, #12]	; (800e360 <HAL_RCC_OscConfig+0x4f8>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d0f0      	beq.n	800e33e <HAL_RCC_OscConfig+0x4d6>
 800e35c:	e01b      	b.n	800e396 <HAL_RCC_OscConfig+0x52e>
 800e35e:	bf00      	nop
 800e360:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e364:	4b9b      	ldr	r3, [pc, #620]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a9a      	ldr	r2, [pc, #616]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e36a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e36e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e370:	f7f7 fd56 	bl	8005e20 <HAL_GetTick>
 800e374:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e376:	e008      	b.n	800e38a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e378:	f7f7 fd52 	bl	8005e20 <HAL_GetTick>
 800e37c:	4602      	mov	r2, r0
 800e37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	2b02      	cmp	r3, #2
 800e384:	d901      	bls.n	800e38a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e386:	2303      	movs	r3, #3
 800e388:	e1c0      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e38a:	4b92      	ldr	r3, [pc, #584]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1f0      	bne.n	800e378 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f003 0304 	and.w	r3, r3, #4
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f000 8081 	beq.w	800e4a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e3a4:	4b8c      	ldr	r3, [pc, #560]	; (800e5d8 <HAL_RCC_OscConfig+0x770>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a8b      	ldr	r2, [pc, #556]	; (800e5d8 <HAL_RCC_OscConfig+0x770>)
 800e3aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e3b0:	f7f7 fd36 	bl	8005e20 <HAL_GetTick>
 800e3b4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e3b6:	e008      	b.n	800e3ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e3b8:	f7f7 fd32 	bl	8005e20 <HAL_GetTick>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	2b64      	cmp	r3, #100	; 0x64
 800e3c4:	d901      	bls.n	800e3ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	e1a0      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e3ca:	4b83      	ldr	r3, [pc, #524]	; (800e5d8 <HAL_RCC_OscConfig+0x770>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d0f0      	beq.n	800e3b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	689b      	ldr	r3, [r3, #8]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d106      	bne.n	800e3ec <HAL_RCC_OscConfig+0x584>
 800e3de:	4b7d      	ldr	r3, [pc, #500]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e2:	4a7c      	ldr	r2, [pc, #496]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e3e4:	f043 0301 	orr.w	r3, r3, #1
 800e3e8:	6713      	str	r3, [r2, #112]	; 0x70
 800e3ea:	e02d      	b.n	800e448 <HAL_RCC_OscConfig+0x5e0>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d10c      	bne.n	800e40e <HAL_RCC_OscConfig+0x5a6>
 800e3f4:	4b77      	ldr	r3, [pc, #476]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3f8:	4a76      	ldr	r2, [pc, #472]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e3fa:	f023 0301 	bic.w	r3, r3, #1
 800e3fe:	6713      	str	r3, [r2, #112]	; 0x70
 800e400:	4b74      	ldr	r3, [pc, #464]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e404:	4a73      	ldr	r2, [pc, #460]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e406:	f023 0304 	bic.w	r3, r3, #4
 800e40a:	6713      	str	r3, [r2, #112]	; 0x70
 800e40c:	e01c      	b.n	800e448 <HAL_RCC_OscConfig+0x5e0>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	2b05      	cmp	r3, #5
 800e414:	d10c      	bne.n	800e430 <HAL_RCC_OscConfig+0x5c8>
 800e416:	4b6f      	ldr	r3, [pc, #444]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e41a:	4a6e      	ldr	r2, [pc, #440]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e41c:	f043 0304 	orr.w	r3, r3, #4
 800e420:	6713      	str	r3, [r2, #112]	; 0x70
 800e422:	4b6c      	ldr	r3, [pc, #432]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e426:	4a6b      	ldr	r2, [pc, #428]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e428:	f043 0301 	orr.w	r3, r3, #1
 800e42c:	6713      	str	r3, [r2, #112]	; 0x70
 800e42e:	e00b      	b.n	800e448 <HAL_RCC_OscConfig+0x5e0>
 800e430:	4b68      	ldr	r3, [pc, #416]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e434:	4a67      	ldr	r2, [pc, #412]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e436:	f023 0301 	bic.w	r3, r3, #1
 800e43a:	6713      	str	r3, [r2, #112]	; 0x70
 800e43c:	4b65      	ldr	r3, [pc, #404]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e440:	4a64      	ldr	r2, [pc, #400]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e442:	f023 0304 	bic.w	r3, r3, #4
 800e446:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	689b      	ldr	r3, [r3, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d015      	beq.n	800e47c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e450:	f7f7 fce6 	bl	8005e20 <HAL_GetTick>
 800e454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e456:	e00a      	b.n	800e46e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e458:	f7f7 fce2 	bl	8005e20 <HAL_GetTick>
 800e45c:	4602      	mov	r2, r0
 800e45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	f241 3288 	movw	r2, #5000	; 0x1388
 800e466:	4293      	cmp	r3, r2
 800e468:	d901      	bls.n	800e46e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e46a:	2303      	movs	r3, #3
 800e46c:	e14e      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e46e:	4b59      	ldr	r3, [pc, #356]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e472:	f003 0302 	and.w	r3, r3, #2
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0ee      	beq.n	800e458 <HAL_RCC_OscConfig+0x5f0>
 800e47a:	e014      	b.n	800e4a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e47c:	f7f7 fcd0 	bl	8005e20 <HAL_GetTick>
 800e480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e482:	e00a      	b.n	800e49a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e484:	f7f7 fccc 	bl	8005e20 <HAL_GetTick>
 800e488:	4602      	mov	r2, r0
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e492:	4293      	cmp	r3, r2
 800e494:	d901      	bls.n	800e49a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e496:	2303      	movs	r3, #3
 800e498:	e138      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e49a:	4b4e      	ldr	r3, [pc, #312]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e49e:	f003 0302 	and.w	r3, r3, #2
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1ee      	bne.n	800e484 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 812d 	beq.w	800e70a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e4b0:	4b48      	ldr	r3, [pc, #288]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e4b2:	691b      	ldr	r3, [r3, #16]
 800e4b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4b8:	2b18      	cmp	r3, #24
 800e4ba:	f000 80bd 	beq.w	800e638 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c2:	2b02      	cmp	r3, #2
 800e4c4:	f040 809e 	bne.w	800e604 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e4c8:	4b42      	ldr	r3, [pc, #264]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a41      	ldr	r2, [pc, #260]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e4ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e4d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4d4:	f7f7 fca4 	bl	8005e20 <HAL_GetTick>
 800e4d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e4da:	e008      	b.n	800e4ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e4dc:	f7f7 fca0 	bl	8005e20 <HAL_GetTick>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	1ad3      	subs	r3, r2, r3
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d901      	bls.n	800e4ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	e10e      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e4ee:	4b39      	ldr	r3, [pc, #228]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d1f0      	bne.n	800e4dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e4fa:	4b36      	ldr	r3, [pc, #216]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e4fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4fe:	4b37      	ldr	r3, [pc, #220]	; (800e5dc <HAL_RCC_OscConfig+0x774>)
 800e500:	4013      	ands	r3, r2
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e50a:	0112      	lsls	r2, r2, #4
 800e50c:	430a      	orrs	r2, r1
 800e50e:	4931      	ldr	r1, [pc, #196]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e510:	4313      	orrs	r3, r2
 800e512:	628b      	str	r3, [r1, #40]	; 0x28
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e518:	3b01      	subs	r3, #1
 800e51a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e522:	3b01      	subs	r3, #1
 800e524:	025b      	lsls	r3, r3, #9
 800e526:	b29b      	uxth	r3, r3
 800e528:	431a      	orrs	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52e:	3b01      	subs	r3, #1
 800e530:	041b      	lsls	r3, r3, #16
 800e532:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e536:	431a      	orrs	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53c:	3b01      	subs	r3, #1
 800e53e:	061b      	lsls	r3, r3, #24
 800e540:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e544:	4923      	ldr	r1, [pc, #140]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e546:	4313      	orrs	r3, r2
 800e548:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e54a:	4b22      	ldr	r3, [pc, #136]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54e:	4a21      	ldr	r2, [pc, #132]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e550:	f023 0301 	bic.w	r3, r3, #1
 800e554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e556:	4b1f      	ldr	r3, [pc, #124]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e55a:	4b21      	ldr	r3, [pc, #132]	; (800e5e0 <HAL_RCC_OscConfig+0x778>)
 800e55c:	4013      	ands	r3, r2
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e562:	00d2      	lsls	r2, r2, #3
 800e564:	491b      	ldr	r1, [pc, #108]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e566:	4313      	orrs	r3, r2
 800e568:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e56a:	4b1a      	ldr	r3, [pc, #104]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56e:	f023 020c 	bic.w	r2, r3, #12
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e576:	4917      	ldr	r1, [pc, #92]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e578:	4313      	orrs	r3, r2
 800e57a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e57c:	4b15      	ldr	r3, [pc, #84]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e580:	f023 0202 	bic.w	r2, r3, #2
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e588:	4912      	ldr	r1, [pc, #72]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e58a:	4313      	orrs	r3, r2
 800e58c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e58e:	4b11      	ldr	r3, [pc, #68]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e592:	4a10      	ldr	r2, [pc, #64]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e598:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e59a:	4b0e      	ldr	r3, [pc, #56]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59e:	4a0d      	ldr	r2, [pc, #52]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e5a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e5a6:	4b0b      	ldr	r3, [pc, #44]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5aa:	4a0a      	ldr	r2, [pc, #40]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e5ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e5b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e5b2:	4b08      	ldr	r3, [pc, #32]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b6:	4a07      	ldr	r2, [pc, #28]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e5b8:	f043 0301 	orr.w	r3, r3, #1
 800e5bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e5be:	4b05      	ldr	r3, [pc, #20]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4a04      	ldr	r2, [pc, #16]	; (800e5d4 <HAL_RCC_OscConfig+0x76c>)
 800e5c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e5c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5ca:	f7f7 fc29 	bl	8005e20 <HAL_GetTick>
 800e5ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e5d0:	e011      	b.n	800e5f6 <HAL_RCC_OscConfig+0x78e>
 800e5d2:	bf00      	nop
 800e5d4:	58024400 	.word	0x58024400
 800e5d8:	58024800 	.word	0x58024800
 800e5dc:	fffffc0c 	.word	0xfffffc0c
 800e5e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e5e4:	f7f7 fc1c 	bl	8005e20 <HAL_GetTick>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d901      	bls.n	800e5f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	e08a      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e5f6:	4b47      	ldr	r3, [pc, #284]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d0f0      	beq.n	800e5e4 <HAL_RCC_OscConfig+0x77c>
 800e602:	e082      	b.n	800e70a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e604:	4b43      	ldr	r3, [pc, #268]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a42      	ldr	r2, [pc, #264]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e60a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e60e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e610:	f7f7 fc06 	bl	8005e20 <HAL_GetTick>
 800e614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e616:	e008      	b.n	800e62a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e618:	f7f7 fc02 	bl	8005e20 <HAL_GetTick>
 800e61c:	4602      	mov	r2, r0
 800e61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	2b02      	cmp	r3, #2
 800e624:	d901      	bls.n	800e62a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e626:	2303      	movs	r3, #3
 800e628:	e070      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e62a:	4b3a      	ldr	r3, [pc, #232]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e632:	2b00      	cmp	r3, #0
 800e634:	d1f0      	bne.n	800e618 <HAL_RCC_OscConfig+0x7b0>
 800e636:	e068      	b.n	800e70a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e638:	4b36      	ldr	r3, [pc, #216]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e63c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e63e:	4b35      	ldr	r3, [pc, #212]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e642:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d031      	beq.n	800e6b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	f003 0203 	and.w	r2, r3, #3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e656:	429a      	cmp	r2, r3
 800e658:	d12a      	bne.n	800e6b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	091b      	lsrs	r3, r3, #4
 800e65e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e666:	429a      	cmp	r2, r3
 800e668:	d122      	bne.n	800e6b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e674:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e676:	429a      	cmp	r2, r3
 800e678:	d11a      	bne.n	800e6b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	0a5b      	lsrs	r3, r3, #9
 800e67e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e686:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e688:	429a      	cmp	r2, r3
 800e68a:	d111      	bne.n	800e6b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	0c1b      	lsrs	r3, r3, #16
 800e690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e698:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d108      	bne.n	800e6b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	0e1b      	lsrs	r3, r3, #24
 800e6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d001      	beq.n	800e6b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e02b      	b.n	800e70c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e6b4:	4b17      	ldr	r3, [pc, #92]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b8:	08db      	lsrs	r3, r3, #3
 800e6ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6c4:	693a      	ldr	r2, [r7, #16]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d01f      	beq.n	800e70a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e6ca:	4b12      	ldr	r3, [pc, #72]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ce:	4a11      	ldr	r2, [pc, #68]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e6d0:	f023 0301 	bic.w	r3, r3, #1
 800e6d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e6d6:	f7f7 fba3 	bl	8005e20 <HAL_GetTick>
 800e6da:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e6dc:	bf00      	nop
 800e6de:	f7f7 fb9f 	bl	8005e20 <HAL_GetTick>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d0f9      	beq.n	800e6de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e6ea:	4b0a      	ldr	r3, [pc, #40]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e6ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ee:	4b0a      	ldr	r3, [pc, #40]	; (800e718 <HAL_RCC_OscConfig+0x8b0>)
 800e6f0:	4013      	ands	r3, r2
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e6f6:	00d2      	lsls	r2, r2, #3
 800e6f8:	4906      	ldr	r1, [pc, #24]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e6fe:	4b05      	ldr	r3, [pc, #20]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e702:	4a04      	ldr	r2, [pc, #16]	; (800e714 <HAL_RCC_OscConfig+0x8ac>)
 800e704:	f043 0301 	orr.w	r3, r3, #1
 800e708:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e70a:	2300      	movs	r3, #0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3730      	adds	r7, #48	; 0x30
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	58024400 	.word	0x58024400
 800e718:	ffff0007 	.word	0xffff0007

0800e71c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b086      	sub	sp, #24
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d101      	bne.n	800e730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e72c:	2301      	movs	r3, #1
 800e72e:	e19c      	b.n	800ea6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e730:	4b8a      	ldr	r3, [pc, #552]	; (800e95c <HAL_RCC_ClockConfig+0x240>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f003 030f 	and.w	r3, r3, #15
 800e738:	683a      	ldr	r2, [r7, #0]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d910      	bls.n	800e760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e73e:	4b87      	ldr	r3, [pc, #540]	; (800e95c <HAL_RCC_ClockConfig+0x240>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f023 020f 	bic.w	r2, r3, #15
 800e746:	4985      	ldr	r1, [pc, #532]	; (800e95c <HAL_RCC_ClockConfig+0x240>)
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	4313      	orrs	r3, r2
 800e74c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e74e:	4b83      	ldr	r3, [pc, #524]	; (800e95c <HAL_RCC_ClockConfig+0x240>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f003 030f 	and.w	r3, r3, #15
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d001      	beq.n	800e760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e75c:	2301      	movs	r3, #1
 800e75e:	e184      	b.n	800ea6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f003 0304 	and.w	r3, r3, #4
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d010      	beq.n	800e78e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	691a      	ldr	r2, [r3, #16]
 800e770:	4b7b      	ldr	r3, [pc, #492]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e772:	699b      	ldr	r3, [r3, #24]
 800e774:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e778:	429a      	cmp	r2, r3
 800e77a:	d908      	bls.n	800e78e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e77c:	4b78      	ldr	r3, [pc, #480]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e77e:	699b      	ldr	r3, [r3, #24]
 800e780:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	691b      	ldr	r3, [r3, #16]
 800e788:	4975      	ldr	r1, [pc, #468]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e78a:	4313      	orrs	r3, r2
 800e78c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f003 0308 	and.w	r3, r3, #8
 800e796:	2b00      	cmp	r3, #0
 800e798:	d010      	beq.n	800e7bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	695a      	ldr	r2, [r3, #20]
 800e79e:	4b70      	ldr	r3, [pc, #448]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e7a0:	69db      	ldr	r3, [r3, #28]
 800e7a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d908      	bls.n	800e7bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e7aa:	4b6d      	ldr	r3, [pc, #436]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e7ac:	69db      	ldr	r3, [r3, #28]
 800e7ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	695b      	ldr	r3, [r3, #20]
 800e7b6:	496a      	ldr	r1, [pc, #424]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f003 0310 	and.w	r3, r3, #16
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d010      	beq.n	800e7ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	699a      	ldr	r2, [r3, #24]
 800e7cc:	4b64      	ldr	r3, [pc, #400]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e7ce:	69db      	ldr	r3, [r3, #28]
 800e7d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d908      	bls.n	800e7ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e7d8:	4b61      	ldr	r3, [pc, #388]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e7da:	69db      	ldr	r3, [r3, #28]
 800e7dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	699b      	ldr	r3, [r3, #24]
 800e7e4:	495e      	ldr	r1, [pc, #376]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f003 0320 	and.w	r3, r3, #32
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d010      	beq.n	800e818 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	69da      	ldr	r2, [r3, #28]
 800e7fa:	4b59      	ldr	r3, [pc, #356]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e7fc:	6a1b      	ldr	r3, [r3, #32]
 800e7fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e802:	429a      	cmp	r2, r3
 800e804:	d908      	bls.n	800e818 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e806:	4b56      	ldr	r3, [pc, #344]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e808:	6a1b      	ldr	r3, [r3, #32]
 800e80a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	69db      	ldr	r3, [r3, #28]
 800e812:	4953      	ldr	r1, [pc, #332]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e814:	4313      	orrs	r3, r2
 800e816:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f003 0302 	and.w	r3, r3, #2
 800e820:	2b00      	cmp	r3, #0
 800e822:	d010      	beq.n	800e846 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	68da      	ldr	r2, [r3, #12]
 800e828:	4b4d      	ldr	r3, [pc, #308]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e82a:	699b      	ldr	r3, [r3, #24]
 800e82c:	f003 030f 	and.w	r3, r3, #15
 800e830:	429a      	cmp	r2, r3
 800e832:	d908      	bls.n	800e846 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e834:	4b4a      	ldr	r3, [pc, #296]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e836:	699b      	ldr	r3, [r3, #24]
 800e838:	f023 020f 	bic.w	r2, r3, #15
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	4947      	ldr	r1, [pc, #284]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e842:	4313      	orrs	r3, r2
 800e844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f003 0301 	and.w	r3, r3, #1
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d055      	beq.n	800e8fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e852:	4b43      	ldr	r3, [pc, #268]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	4940      	ldr	r1, [pc, #256]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e860:	4313      	orrs	r3, r2
 800e862:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d107      	bne.n	800e87c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e86c:	4b3c      	ldr	r3, [pc, #240]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e874:	2b00      	cmp	r3, #0
 800e876:	d121      	bne.n	800e8bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e878:	2301      	movs	r3, #1
 800e87a:	e0f6      	b.n	800ea6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	2b03      	cmp	r3, #3
 800e882:	d107      	bne.n	800e894 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e884:	4b36      	ldr	r3, [pc, #216]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d115      	bne.n	800e8bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e890:	2301      	movs	r3, #1
 800e892:	e0ea      	b.n	800ea6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d107      	bne.n	800e8ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e89c:	4b30      	ldr	r3, [pc, #192]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d109      	bne.n	800e8bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e0de      	b.n	800ea6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e8ac:	4b2c      	ldr	r3, [pc, #176]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f003 0304 	and.w	r3, r3, #4
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d101      	bne.n	800e8bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e0d6      	b.n	800ea6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e8bc:	4b28      	ldr	r3, [pc, #160]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	f023 0207 	bic.w	r2, r3, #7
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	4925      	ldr	r1, [pc, #148]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8ce:	f7f7 faa7 	bl	8005e20 <HAL_GetTick>
 800e8d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e8d4:	e00a      	b.n	800e8ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e8d6:	f7f7 faa3 	bl	8005e20 <HAL_GetTick>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d901      	bls.n	800e8ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	e0be      	b.n	800ea6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e8ec:	4b1c      	ldr	r3, [pc, #112]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	00db      	lsls	r3, r3, #3
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d1eb      	bne.n	800e8d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 0302 	and.w	r3, r3, #2
 800e906:	2b00      	cmp	r3, #0
 800e908:	d010      	beq.n	800e92c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	68da      	ldr	r2, [r3, #12]
 800e90e:	4b14      	ldr	r3, [pc, #80]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e910:	699b      	ldr	r3, [r3, #24]
 800e912:	f003 030f 	and.w	r3, r3, #15
 800e916:	429a      	cmp	r2, r3
 800e918:	d208      	bcs.n	800e92c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e91a:	4b11      	ldr	r3, [pc, #68]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e91c:	699b      	ldr	r3, [r3, #24]
 800e91e:	f023 020f 	bic.w	r2, r3, #15
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	490e      	ldr	r1, [pc, #56]	; (800e960 <HAL_RCC_ClockConfig+0x244>)
 800e928:	4313      	orrs	r3, r2
 800e92a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e92c:	4b0b      	ldr	r3, [pc, #44]	; (800e95c <HAL_RCC_ClockConfig+0x240>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f003 030f 	and.w	r3, r3, #15
 800e934:	683a      	ldr	r2, [r7, #0]
 800e936:	429a      	cmp	r2, r3
 800e938:	d214      	bcs.n	800e964 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e93a:	4b08      	ldr	r3, [pc, #32]	; (800e95c <HAL_RCC_ClockConfig+0x240>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f023 020f 	bic.w	r2, r3, #15
 800e942:	4906      	ldr	r1, [pc, #24]	; (800e95c <HAL_RCC_ClockConfig+0x240>)
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	4313      	orrs	r3, r2
 800e948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e94a:	4b04      	ldr	r3, [pc, #16]	; (800e95c <HAL_RCC_ClockConfig+0x240>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f003 030f 	and.w	r3, r3, #15
 800e952:	683a      	ldr	r2, [r7, #0]
 800e954:	429a      	cmp	r2, r3
 800e956:	d005      	beq.n	800e964 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e958:	2301      	movs	r3, #1
 800e95a:	e086      	b.n	800ea6a <HAL_RCC_ClockConfig+0x34e>
 800e95c:	52002000 	.word	0x52002000
 800e960:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f003 0304 	and.w	r3, r3, #4
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d010      	beq.n	800e992 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	691a      	ldr	r2, [r3, #16]
 800e974:	4b3f      	ldr	r3, [pc, #252]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800e976:	699b      	ldr	r3, [r3, #24]
 800e978:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d208      	bcs.n	800e992 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e980:	4b3c      	ldr	r3, [pc, #240]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800e982:	699b      	ldr	r3, [r3, #24]
 800e984:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	4939      	ldr	r1, [pc, #228]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800e98e:	4313      	orrs	r3, r2
 800e990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f003 0308 	and.w	r3, r3, #8
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d010      	beq.n	800e9c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	695a      	ldr	r2, [r3, #20]
 800e9a2:	4b34      	ldr	r3, [pc, #208]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800e9a4:	69db      	ldr	r3, [r3, #28]
 800e9a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d208      	bcs.n	800e9c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e9ae:	4b31      	ldr	r3, [pc, #196]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800e9b0:	69db      	ldr	r3, [r3, #28]
 800e9b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	695b      	ldr	r3, [r3, #20]
 800e9ba:	492e      	ldr	r1, [pc, #184]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f003 0310 	and.w	r3, r3, #16
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d010      	beq.n	800e9ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	699a      	ldr	r2, [r3, #24]
 800e9d0:	4b28      	ldr	r3, [pc, #160]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800e9d2:	69db      	ldr	r3, [r3, #28]
 800e9d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d208      	bcs.n	800e9ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e9dc:	4b25      	ldr	r3, [pc, #148]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800e9de:	69db      	ldr	r3, [r3, #28]
 800e9e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	699b      	ldr	r3, [r3, #24]
 800e9e8:	4922      	ldr	r1, [pc, #136]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f003 0320 	and.w	r3, r3, #32
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d010      	beq.n	800ea1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	69da      	ldr	r2, [r3, #28]
 800e9fe:	4b1d      	ldr	r3, [pc, #116]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800ea00:	6a1b      	ldr	r3, [r3, #32]
 800ea02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d208      	bcs.n	800ea1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ea0a:	4b1a      	ldr	r3, [pc, #104]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800ea0c:	6a1b      	ldr	r3, [r3, #32]
 800ea0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	69db      	ldr	r3, [r3, #28]
 800ea16:	4917      	ldr	r1, [pc, #92]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ea1c:	f000 f834 	bl	800ea88 <HAL_RCC_GetSysClockFreq>
 800ea20:	4602      	mov	r2, r0
 800ea22:	4b14      	ldr	r3, [pc, #80]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800ea24:	699b      	ldr	r3, [r3, #24]
 800ea26:	0a1b      	lsrs	r3, r3, #8
 800ea28:	f003 030f 	and.w	r3, r3, #15
 800ea2c:	4912      	ldr	r1, [pc, #72]	; (800ea78 <HAL_RCC_ClockConfig+0x35c>)
 800ea2e:	5ccb      	ldrb	r3, [r1, r3]
 800ea30:	f003 031f 	and.w	r3, r3, #31
 800ea34:	fa22 f303 	lsr.w	r3, r2, r3
 800ea38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ea3a:	4b0e      	ldr	r3, [pc, #56]	; (800ea74 <HAL_RCC_ClockConfig+0x358>)
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	f003 030f 	and.w	r3, r3, #15
 800ea42:	4a0d      	ldr	r2, [pc, #52]	; (800ea78 <HAL_RCC_ClockConfig+0x35c>)
 800ea44:	5cd3      	ldrb	r3, [r2, r3]
 800ea46:	f003 031f 	and.w	r3, r3, #31
 800ea4a:	693a      	ldr	r2, [r7, #16]
 800ea4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea50:	4a0a      	ldr	r2, [pc, #40]	; (800ea7c <HAL_RCC_ClockConfig+0x360>)
 800ea52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ea54:	4a0a      	ldr	r2, [pc, #40]	; (800ea80 <HAL_RCC_ClockConfig+0x364>)
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ea5a:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <HAL_RCC_ClockConfig+0x368>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7f5 fe08 	bl	8004674 <HAL_InitTick>
 800ea64:	4603      	mov	r3, r0
 800ea66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ea68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3718      	adds	r7, #24
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	58024400 	.word	0x58024400
 800ea78:	0801b154 	.word	0x0801b154
 800ea7c:	240000c4 	.word	0x240000c4
 800ea80:	240000c0 	.word	0x240000c0
 800ea84:	240000c8 	.word	0x240000c8

0800ea88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b089      	sub	sp, #36	; 0x24
 800ea8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ea8e:	4bb3      	ldr	r3, [pc, #716]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea96:	2b18      	cmp	r3, #24
 800ea98:	f200 8155 	bhi.w	800ed46 <HAL_RCC_GetSysClockFreq+0x2be>
 800ea9c:	a201      	add	r2, pc, #4	; (adr r2, 800eaa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ea9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa2:	bf00      	nop
 800eaa4:	0800eb09 	.word	0x0800eb09
 800eaa8:	0800ed47 	.word	0x0800ed47
 800eaac:	0800ed47 	.word	0x0800ed47
 800eab0:	0800ed47 	.word	0x0800ed47
 800eab4:	0800ed47 	.word	0x0800ed47
 800eab8:	0800ed47 	.word	0x0800ed47
 800eabc:	0800ed47 	.word	0x0800ed47
 800eac0:	0800ed47 	.word	0x0800ed47
 800eac4:	0800eb2f 	.word	0x0800eb2f
 800eac8:	0800ed47 	.word	0x0800ed47
 800eacc:	0800ed47 	.word	0x0800ed47
 800ead0:	0800ed47 	.word	0x0800ed47
 800ead4:	0800ed47 	.word	0x0800ed47
 800ead8:	0800ed47 	.word	0x0800ed47
 800eadc:	0800ed47 	.word	0x0800ed47
 800eae0:	0800ed47 	.word	0x0800ed47
 800eae4:	0800eb35 	.word	0x0800eb35
 800eae8:	0800ed47 	.word	0x0800ed47
 800eaec:	0800ed47 	.word	0x0800ed47
 800eaf0:	0800ed47 	.word	0x0800ed47
 800eaf4:	0800ed47 	.word	0x0800ed47
 800eaf8:	0800ed47 	.word	0x0800ed47
 800eafc:	0800ed47 	.word	0x0800ed47
 800eb00:	0800ed47 	.word	0x0800ed47
 800eb04:	0800eb3b 	.word	0x0800eb3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb08:	4b94      	ldr	r3, [pc, #592]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f003 0320 	and.w	r3, r3, #32
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d009      	beq.n	800eb28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb14:	4b91      	ldr	r3, [pc, #580]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	08db      	lsrs	r3, r3, #3
 800eb1a:	f003 0303 	and.w	r3, r3, #3
 800eb1e:	4a90      	ldr	r2, [pc, #576]	; (800ed60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800eb20:	fa22 f303 	lsr.w	r3, r2, r3
 800eb24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800eb26:	e111      	b.n	800ed4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800eb28:	4b8d      	ldr	r3, [pc, #564]	; (800ed60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800eb2a:	61bb      	str	r3, [r7, #24]
      break;
 800eb2c:	e10e      	b.n	800ed4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800eb2e:	4b8d      	ldr	r3, [pc, #564]	; (800ed64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800eb30:	61bb      	str	r3, [r7, #24]
      break;
 800eb32:	e10b      	b.n	800ed4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800eb34:	4b8c      	ldr	r3, [pc, #560]	; (800ed68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800eb36:	61bb      	str	r3, [r7, #24]
      break;
 800eb38:	e108      	b.n	800ed4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb3a:	4b88      	ldr	r3, [pc, #544]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3e:	f003 0303 	and.w	r3, r3, #3
 800eb42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800eb44:	4b85      	ldr	r3, [pc, #532]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb48:	091b      	lsrs	r3, r3, #4
 800eb4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800eb50:	4b82      	ldr	r3, [pc, #520]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800eb5a:	4b80      	ldr	r3, [pc, #512]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb5e:	08db      	lsrs	r3, r3, #3
 800eb60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	fb02 f303 	mul.w	r3, r2, r3
 800eb6a:	ee07 3a90 	vmov	s15, r3
 800eb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f000 80e1 	beq.w	800ed40 <HAL_RCC_GetSysClockFreq+0x2b8>
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	f000 8083 	beq.w	800ec8c <HAL_RCC_GetSysClockFreq+0x204>
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	f200 80a1 	bhi.w	800ecd0 <HAL_RCC_GetSysClockFreq+0x248>
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d003      	beq.n	800eb9c <HAL_RCC_GetSysClockFreq+0x114>
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d056      	beq.n	800ec48 <HAL_RCC_GetSysClockFreq+0x1c0>
 800eb9a:	e099      	b.n	800ecd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb9c:	4b6f      	ldr	r3, [pc, #444]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f003 0320 	and.w	r3, r3, #32
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d02d      	beq.n	800ec04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eba8:	4b6c      	ldr	r3, [pc, #432]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	08db      	lsrs	r3, r3, #3
 800ebae:	f003 0303 	and.w	r3, r3, #3
 800ebb2:	4a6b      	ldr	r2, [pc, #428]	; (800ed60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ebb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ebb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	ee07 3a90 	vmov	s15, r3
 800ebc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	ee07 3a90 	vmov	s15, r3
 800ebca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebd2:	4b62      	ldr	r3, [pc, #392]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebda:	ee07 3a90 	vmov	s15, r3
 800ebde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebe2:	ed97 6a02 	vldr	s12, [r7, #8]
 800ebe6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ed6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ebea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebfe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ec02:	e087      	b.n	800ed14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	ee07 3a90 	vmov	s15, r3
 800ec0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ed70 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ec12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec16:	4b51      	ldr	r3, [pc, #324]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec1e:	ee07 3a90 	vmov	s15, r3
 800ec22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec26:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ed6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ec2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ec46:	e065      	b.n	800ed14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	ee07 3a90 	vmov	s15, r3
 800ec4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec52:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ed74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ec56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec5a:	4b40      	ldr	r3, [pc, #256]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec62:	ee07 3a90 	vmov	s15, r3
 800ec66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ed6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ec72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ec8a:	e043      	b.n	800ed14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	ee07 3a90 	vmov	s15, r3
 800ec92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec96:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ed78 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ec9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec9e:	4b2f      	ldr	r3, [pc, #188]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca6:	ee07 3a90 	vmov	s15, r3
 800ecaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecae:	ed97 6a02 	vldr	s12, [r7, #8]
 800ecb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ed6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ecb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ecce:	e021      	b.n	800ed14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	ee07 3a90 	vmov	s15, r3
 800ecd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecda:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ed74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ecde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ece2:	4b1e      	ldr	r3, [pc, #120]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ece4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecea:	ee07 3a90 	vmov	s15, r3
 800ecee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800ecf6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ed6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ecfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ed12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ed14:	4b11      	ldr	r3, [pc, #68]	; (800ed5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed18:	0a5b      	lsrs	r3, r3, #9
 800ed1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed1e:	3301      	adds	r3, #1
 800ed20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	ee07 3a90 	vmov	s15, r3
 800ed28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ed2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed38:	ee17 3a90 	vmov	r3, s15
 800ed3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ed3e:	e005      	b.n	800ed4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ed40:	2300      	movs	r3, #0
 800ed42:	61bb      	str	r3, [r7, #24]
      break;
 800ed44:	e002      	b.n	800ed4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ed46:	4b07      	ldr	r3, [pc, #28]	; (800ed64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ed48:	61bb      	str	r3, [r7, #24]
      break;
 800ed4a:	bf00      	nop
  }

  return sysclockfreq;
 800ed4c:	69bb      	ldr	r3, [r7, #24]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3724      	adds	r7, #36	; 0x24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	58024400 	.word	0x58024400
 800ed60:	03d09000 	.word	0x03d09000
 800ed64:	003d0900 	.word	0x003d0900
 800ed68:	017d7840 	.word	0x017d7840
 800ed6c:	46000000 	.word	0x46000000
 800ed70:	4c742400 	.word	0x4c742400
 800ed74:	4a742400 	.word	0x4a742400
 800ed78:	4bbebc20 	.word	0x4bbebc20

0800ed7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ed82:	f7ff fe81 	bl	800ea88 <HAL_RCC_GetSysClockFreq>
 800ed86:	4602      	mov	r2, r0
 800ed88:	4b10      	ldr	r3, [pc, #64]	; (800edcc <HAL_RCC_GetHCLKFreq+0x50>)
 800ed8a:	699b      	ldr	r3, [r3, #24]
 800ed8c:	0a1b      	lsrs	r3, r3, #8
 800ed8e:	f003 030f 	and.w	r3, r3, #15
 800ed92:	490f      	ldr	r1, [pc, #60]	; (800edd0 <HAL_RCC_GetHCLKFreq+0x54>)
 800ed94:	5ccb      	ldrb	r3, [r1, r3]
 800ed96:	f003 031f 	and.w	r3, r3, #31
 800ed9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ed9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800eda0:	4b0a      	ldr	r3, [pc, #40]	; (800edcc <HAL_RCC_GetHCLKFreq+0x50>)
 800eda2:	699b      	ldr	r3, [r3, #24]
 800eda4:	f003 030f 	and.w	r3, r3, #15
 800eda8:	4a09      	ldr	r2, [pc, #36]	; (800edd0 <HAL_RCC_GetHCLKFreq+0x54>)
 800edaa:	5cd3      	ldrb	r3, [r2, r3]
 800edac:	f003 031f 	and.w	r3, r3, #31
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	fa22 f303 	lsr.w	r3, r2, r3
 800edb6:	4a07      	ldr	r2, [pc, #28]	; (800edd4 <HAL_RCC_GetHCLKFreq+0x58>)
 800edb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800edba:	4a07      	ldr	r2, [pc, #28]	; (800edd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800edc0:	4b04      	ldr	r3, [pc, #16]	; (800edd4 <HAL_RCC_GetHCLKFreq+0x58>)
 800edc2:	681b      	ldr	r3, [r3, #0]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	58024400 	.word	0x58024400
 800edd0:	0801b154 	.word	0x0801b154
 800edd4:	240000c4 	.word	0x240000c4
 800edd8:	240000c0 	.word	0x240000c0

0800eddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ede0:	f7ff ffcc 	bl	800ed7c <HAL_RCC_GetHCLKFreq>
 800ede4:	4602      	mov	r2, r0
 800ede6:	4b06      	ldr	r3, [pc, #24]	; (800ee00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ede8:	69db      	ldr	r3, [r3, #28]
 800edea:	091b      	lsrs	r3, r3, #4
 800edec:	f003 0307 	and.w	r3, r3, #7
 800edf0:	4904      	ldr	r1, [pc, #16]	; (800ee04 <HAL_RCC_GetPCLK1Freq+0x28>)
 800edf2:	5ccb      	ldrb	r3, [r1, r3]
 800edf4:	f003 031f 	and.w	r3, r3, #31
 800edf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	58024400 	.word	0x58024400
 800ee04:	0801b154 	.word	0x0801b154

0800ee08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ee0c:	f7ff ffb6 	bl	800ed7c <HAL_RCC_GetHCLKFreq>
 800ee10:	4602      	mov	r2, r0
 800ee12:	4b06      	ldr	r3, [pc, #24]	; (800ee2c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ee14:	69db      	ldr	r3, [r3, #28]
 800ee16:	0a1b      	lsrs	r3, r3, #8
 800ee18:	f003 0307 	and.w	r3, r3, #7
 800ee1c:	4904      	ldr	r1, [pc, #16]	; (800ee30 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ee1e:	5ccb      	ldrb	r3, [r1, r3]
 800ee20:	f003 031f 	and.w	r3, r3, #31
 800ee24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	58024400 	.word	0x58024400
 800ee30:	0801b154 	.word	0x0801b154

0800ee34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	223f      	movs	r2, #63	; 0x3f
 800ee42:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ee44:	4b1a      	ldr	r3, [pc, #104]	; (800eeb0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee46:	691b      	ldr	r3, [r3, #16]
 800ee48:	f003 0207 	and.w	r2, r3, #7
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ee50:	4b17      	ldr	r3, [pc, #92]	; (800eeb0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee52:	699b      	ldr	r3, [r3, #24]
 800ee54:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ee5c:	4b14      	ldr	r3, [pc, #80]	; (800eeb0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	f003 020f 	and.w	r2, r3, #15
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ee68:	4b11      	ldr	r3, [pc, #68]	; (800eeb0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee6a:	699b      	ldr	r3, [r3, #24]
 800ee6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ee74:	4b0e      	ldr	r3, [pc, #56]	; (800eeb0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee76:	69db      	ldr	r3, [r3, #28]
 800ee78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ee80:	4b0b      	ldr	r3, [pc, #44]	; (800eeb0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee82:	69db      	ldr	r3, [r3, #28]
 800ee84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ee8c:	4b08      	ldr	r3, [pc, #32]	; (800eeb0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee8e:	6a1b      	ldr	r3, [r3, #32]
 800ee90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ee98:	4b06      	ldr	r3, [pc, #24]	; (800eeb4 <HAL_RCC_GetClockConfig+0x80>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f003 020f 	and.w	r2, r3, #15
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	601a      	str	r2, [r3, #0]
}
 800eea4:	bf00      	nop
 800eea6:	370c      	adds	r7, #12
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr
 800eeb0:	58024400 	.word	0x58024400
 800eeb4:	52002000 	.word	0x52002000

0800eeb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800eeb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eebc:	b0ca      	sub	sp, #296	; 0x128
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800eec4:	2300      	movs	r3, #0
 800eec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800eeca:	2300      	movs	r3, #0
 800eecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800eed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800eedc:	2500      	movs	r5, #0
 800eede:	ea54 0305 	orrs.w	r3, r4, r5
 800eee2:	d049      	beq.n	800ef78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800eee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eeea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eeee:	d02f      	beq.n	800ef50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800eef0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eef4:	d828      	bhi.n	800ef48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eefa:	d01a      	beq.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800eefc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef00:	d822      	bhi.n	800ef48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d003      	beq.n	800ef0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ef06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef0a:	d007      	beq.n	800ef1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef0c:	e01c      	b.n	800ef48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef0e:	4bb8      	ldr	r3, [pc, #736]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef12:	4ab7      	ldr	r2, [pc, #732]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ef1a:	e01a      	b.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef20:	3308      	adds	r3, #8
 800ef22:	2102      	movs	r1, #2
 800ef24:	4618      	mov	r0, r3
 800ef26:	f002 fb61 	bl	80115ec <RCCEx_PLL2_Config>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ef30:	e00f      	b.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef36:	3328      	adds	r3, #40	; 0x28
 800ef38:	2102      	movs	r1, #2
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f002 fc08 	bl	8011750 <RCCEx_PLL3_Config>
 800ef40:	4603      	mov	r3, r0
 800ef42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ef46:	e004      	b.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef4e:	e000      	b.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ef50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d10a      	bne.n	800ef70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ef5a:	4ba5      	ldr	r3, [pc, #660]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ef62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef68:	4aa1      	ldr	r2, [pc, #644]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef6a:	430b      	orrs	r3, r1
 800ef6c:	6513      	str	r3, [r2, #80]	; 0x50
 800ef6e:	e003      	b.n	800ef78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ef78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef80:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ef84:	f04f 0900 	mov.w	r9, #0
 800ef88:	ea58 0309 	orrs.w	r3, r8, r9
 800ef8c:	d047      	beq.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ef8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef94:	2b04      	cmp	r3, #4
 800ef96:	d82a      	bhi.n	800efee <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ef98:	a201      	add	r2, pc, #4	; (adr r2, 800efa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ef9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9e:	bf00      	nop
 800efa0:	0800efb5 	.word	0x0800efb5
 800efa4:	0800efc3 	.word	0x0800efc3
 800efa8:	0800efd9 	.word	0x0800efd9
 800efac:	0800eff7 	.word	0x0800eff7
 800efb0:	0800eff7 	.word	0x0800eff7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efb4:	4b8e      	ldr	r3, [pc, #568]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800efb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efb8:	4a8d      	ldr	r2, [pc, #564]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800efba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800efc0:	e01a      	b.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800efc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efc6:	3308      	adds	r3, #8
 800efc8:	2100      	movs	r1, #0
 800efca:	4618      	mov	r0, r3
 800efcc:	f002 fb0e 	bl	80115ec <RCCEx_PLL2_Config>
 800efd0:	4603      	mov	r3, r0
 800efd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800efd6:	e00f      	b.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800efd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efdc:	3328      	adds	r3, #40	; 0x28
 800efde:	2100      	movs	r1, #0
 800efe0:	4618      	mov	r0, r3
 800efe2:	f002 fbb5 	bl	8011750 <RCCEx_PLL3_Config>
 800efe6:	4603      	mov	r3, r0
 800efe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800efec:	e004      	b.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800efee:	2301      	movs	r3, #1
 800eff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eff4:	e000      	b.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800eff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800effc:	2b00      	cmp	r3, #0
 800effe:	d10a      	bne.n	800f016 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f000:	4b7b      	ldr	r3, [pc, #492]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f004:	f023 0107 	bic.w	r1, r3, #7
 800f008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f00e:	4a78      	ldr	r2, [pc, #480]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f010:	430b      	orrs	r3, r1
 800f012:	6513      	str	r3, [r2, #80]	; 0x50
 800f014:	e003      	b.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f01a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f026:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800f02a:	f04f 0b00 	mov.w	fp, #0
 800f02e:	ea5a 030b 	orrs.w	r3, sl, fp
 800f032:	d04c      	beq.n	800f0ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f03e:	d030      	beq.n	800f0a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f044:	d829      	bhi.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f046:	2bc0      	cmp	r3, #192	; 0xc0
 800f048:	d02d      	beq.n	800f0a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f04a:	2bc0      	cmp	r3, #192	; 0xc0
 800f04c:	d825      	bhi.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f04e:	2b80      	cmp	r3, #128	; 0x80
 800f050:	d018      	beq.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f052:	2b80      	cmp	r3, #128	; 0x80
 800f054:	d821      	bhi.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f056:	2b00      	cmp	r3, #0
 800f058:	d002      	beq.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f05a:	2b40      	cmp	r3, #64	; 0x40
 800f05c:	d007      	beq.n	800f06e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f05e:	e01c      	b.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f060:	4b63      	ldr	r3, [pc, #396]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f064:	4a62      	ldr	r2, [pc, #392]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f06a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f06c:	e01c      	b.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f072:	3308      	adds	r3, #8
 800f074:	2100      	movs	r1, #0
 800f076:	4618      	mov	r0, r3
 800f078:	f002 fab8 	bl	80115ec <RCCEx_PLL2_Config>
 800f07c:	4603      	mov	r3, r0
 800f07e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f082:	e011      	b.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f088:	3328      	adds	r3, #40	; 0x28
 800f08a:	2100      	movs	r1, #0
 800f08c:	4618      	mov	r0, r3
 800f08e:	f002 fb5f 	bl	8011750 <RCCEx_PLL3_Config>
 800f092:	4603      	mov	r3, r0
 800f094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f098:	e006      	b.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f09a:	2301      	movs	r3, #1
 800f09c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f0a0:	e002      	b.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f0a2:	bf00      	nop
 800f0a4:	e000      	b.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f0a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d10a      	bne.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f0b0:	4b4f      	ldr	r3, [pc, #316]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0b4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800f0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0be:	4a4c      	ldr	r2, [pc, #304]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0c0:	430b      	orrs	r3, r1
 800f0c2:	6513      	str	r3, [r2, #80]	; 0x50
 800f0c4:	e003      	b.n	800f0ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800f0da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f0e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	d053      	beq.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f0f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f0fa:	d035      	beq.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f0fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f100:	d82e      	bhi.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f102:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f106:	d031      	beq.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f108:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f10c:	d828      	bhi.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f10e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f112:	d01a      	beq.n	800f14a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f118:	d822      	bhi.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d003      	beq.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f11e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f122:	d007      	beq.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f124:	e01c      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f126:	4b32      	ldr	r3, [pc, #200]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f12a:	4a31      	ldr	r2, [pc, #196]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f12c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f132:	e01c      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f138:	3308      	adds	r3, #8
 800f13a:	2100      	movs	r1, #0
 800f13c:	4618      	mov	r0, r3
 800f13e:	f002 fa55 	bl	80115ec <RCCEx_PLL2_Config>
 800f142:	4603      	mov	r3, r0
 800f144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f148:	e011      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f14e:	3328      	adds	r3, #40	; 0x28
 800f150:	2100      	movs	r1, #0
 800f152:	4618      	mov	r0, r3
 800f154:	f002 fafc 	bl	8011750 <RCCEx_PLL3_Config>
 800f158:	4603      	mov	r3, r0
 800f15a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f15e:	e006      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f160:	2301      	movs	r3, #1
 800f162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f166:	e002      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f168:	bf00      	nop
 800f16a:	e000      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f16c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f16e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f172:	2b00      	cmp	r3, #0
 800f174:	d10b      	bne.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f176:	4b1e      	ldr	r3, [pc, #120]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f17a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800f17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f182:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f186:	4a1a      	ldr	r2, [pc, #104]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f188:	430b      	orrs	r3, r1
 800f18a:	6593      	str	r3, [r2, #88]	; 0x58
 800f18c:	e003      	b.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f18e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f192:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800f1a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f1ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	d056      	beq.n	800f264 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f1be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f1c2:	d038      	beq.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f1c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f1c8:	d831      	bhi.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f1ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f1ce:	d034      	beq.n	800f23a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f1d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f1d4:	d82b      	bhi.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1da:	d01d      	beq.n	800f218 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f1dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1e0:	d825      	bhi.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d006      	beq.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f1e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f1ea:	d00a      	beq.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f1ec:	e01f      	b.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f1ee:	bf00      	nop
 800f1f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f1f4:	4ba2      	ldr	r3, [pc, #648]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f8:	4aa1      	ldr	r2, [pc, #644]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f1fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f200:	e01c      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f206:	3308      	adds	r3, #8
 800f208:	2100      	movs	r1, #0
 800f20a:	4618      	mov	r0, r3
 800f20c:	f002 f9ee 	bl	80115ec <RCCEx_PLL2_Config>
 800f210:	4603      	mov	r3, r0
 800f212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f216:	e011      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f21c:	3328      	adds	r3, #40	; 0x28
 800f21e:	2100      	movs	r1, #0
 800f220:	4618      	mov	r0, r3
 800f222:	f002 fa95 	bl	8011750 <RCCEx_PLL3_Config>
 800f226:	4603      	mov	r3, r0
 800f228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f22c:	e006      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f22e:	2301      	movs	r3, #1
 800f230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f234:	e002      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f236:	bf00      	nop
 800f238:	e000      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f23a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f23c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10b      	bne.n	800f25c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f244:	4b8e      	ldr	r3, [pc, #568]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f248:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800f24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f250:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f254:	4a8a      	ldr	r2, [pc, #552]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f256:	430b      	orrs	r3, r1
 800f258:	6593      	str	r3, [r2, #88]	; 0x58
 800f25a:	e003      	b.n	800f264 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f25c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f260:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f274:	2300      	movs	r3, #0
 800f276:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f27a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f27e:	460b      	mov	r3, r1
 800f280:	4313      	orrs	r3, r2
 800f282:	d03a      	beq.n	800f2fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f28a:	2b30      	cmp	r3, #48	; 0x30
 800f28c:	d01f      	beq.n	800f2ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f28e:	2b30      	cmp	r3, #48	; 0x30
 800f290:	d819      	bhi.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f292:	2b20      	cmp	r3, #32
 800f294:	d00c      	beq.n	800f2b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f296:	2b20      	cmp	r3, #32
 800f298:	d815      	bhi.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d019      	beq.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f29e:	2b10      	cmp	r3, #16
 800f2a0:	d111      	bne.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f2a2:	4b77      	ldr	r3, [pc, #476]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a6:	4a76      	ldr	r2, [pc, #472]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f2ae:	e011      	b.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2b4:	3308      	adds	r3, #8
 800f2b6:	2102      	movs	r1, #2
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f002 f997 	bl	80115ec <RCCEx_PLL2_Config>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f2c4:	e006      	b.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2cc:	e002      	b.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f2ce:	bf00      	nop
 800f2d0:	e000      	b.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f2d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d10a      	bne.n	800f2f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f2dc:	4b68      	ldr	r3, [pc, #416]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2e0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2ea:	4a65      	ldr	r2, [pc, #404]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2ec:	430b      	orrs	r3, r1
 800f2ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f2f0:	e003      	b.n	800f2fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f302:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f306:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f30a:	2300      	movs	r3, #0
 800f30c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f310:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f314:	460b      	mov	r3, r1
 800f316:	4313      	orrs	r3, r2
 800f318:	d051      	beq.n	800f3be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f31e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f324:	d035      	beq.n	800f392 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f32a:	d82e      	bhi.n	800f38a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f32c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f330:	d031      	beq.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f332:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f336:	d828      	bhi.n	800f38a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f33c:	d01a      	beq.n	800f374 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f33e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f342:	d822      	bhi.n	800f38a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f344:	2b00      	cmp	r3, #0
 800f346:	d003      	beq.n	800f350 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f34c:	d007      	beq.n	800f35e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f34e:	e01c      	b.n	800f38a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f350:	4b4b      	ldr	r3, [pc, #300]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f354:	4a4a      	ldr	r2, [pc, #296]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f35a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f35c:	e01c      	b.n	800f398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f362:	3308      	adds	r3, #8
 800f364:	2100      	movs	r1, #0
 800f366:	4618      	mov	r0, r3
 800f368:	f002 f940 	bl	80115ec <RCCEx_PLL2_Config>
 800f36c:	4603      	mov	r3, r0
 800f36e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f372:	e011      	b.n	800f398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f378:	3328      	adds	r3, #40	; 0x28
 800f37a:	2100      	movs	r1, #0
 800f37c:	4618      	mov	r0, r3
 800f37e:	f002 f9e7 	bl	8011750 <RCCEx_PLL3_Config>
 800f382:	4603      	mov	r3, r0
 800f384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f388:	e006      	b.n	800f398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f38a:	2301      	movs	r3, #1
 800f38c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f390:	e002      	b.n	800f398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f392:	bf00      	nop
 800f394:	e000      	b.n	800f398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f396:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d10a      	bne.n	800f3b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f3a0:	4b37      	ldr	r3, [pc, #220]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3ae:	4a34      	ldr	r2, [pc, #208]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3b0:	430b      	orrs	r3, r1
 800f3b2:	6513      	str	r3, [r2, #80]	; 0x50
 800f3b4:	e003      	b.n	800f3be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f3ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f3d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f3d8:	460b      	mov	r3, r1
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	d056      	beq.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f3e8:	d033      	beq.n	800f452 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f3ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f3ee:	d82c      	bhi.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f3f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f3f4:	d02f      	beq.n	800f456 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f3f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f3fa:	d826      	bhi.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f3fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f400:	d02b      	beq.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f402:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f406:	d820      	bhi.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f40c:	d012      	beq.n	800f434 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f40e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f412:	d81a      	bhi.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f414:	2b00      	cmp	r3, #0
 800f416:	d022      	beq.n	800f45e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f41c:	d115      	bne.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f41e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f422:	3308      	adds	r3, #8
 800f424:	2101      	movs	r1, #1
 800f426:	4618      	mov	r0, r3
 800f428:	f002 f8e0 	bl	80115ec <RCCEx_PLL2_Config>
 800f42c:	4603      	mov	r3, r0
 800f42e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f432:	e015      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f438:	3328      	adds	r3, #40	; 0x28
 800f43a:	2101      	movs	r1, #1
 800f43c:	4618      	mov	r0, r3
 800f43e:	f002 f987 	bl	8011750 <RCCEx_PLL3_Config>
 800f442:	4603      	mov	r3, r0
 800f444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f448:	e00a      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f44a:	2301      	movs	r3, #1
 800f44c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f450:	e006      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f452:	bf00      	nop
 800f454:	e004      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f456:	bf00      	nop
 800f458:	e002      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f45a:	bf00      	nop
 800f45c:	e000      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f45e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f464:	2b00      	cmp	r3, #0
 800f466:	d10d      	bne.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f468:	4b05      	ldr	r3, [pc, #20]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f46c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f476:	4a02      	ldr	r2, [pc, #8]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f478:	430b      	orrs	r3, r1
 800f47a:	6513      	str	r3, [r2, #80]	; 0x50
 800f47c:	e006      	b.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f47e:	bf00      	nop
 800f480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f488:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f494:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f49c:	2300      	movs	r3, #0
 800f49e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f4a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	d055      	beq.n	800f558 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f4b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f4b8:	d033      	beq.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f4ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f4be:	d82c      	bhi.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4c4:	d02f      	beq.n	800f526 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4ca:	d826      	bhi.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f4cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f4d0:	d02b      	beq.n	800f52a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f4d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f4d6:	d820      	bhi.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f4d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4dc:	d012      	beq.n	800f504 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f4de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4e2:	d81a      	bhi.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d022      	beq.n	800f52e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f4e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4ec:	d115      	bne.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4f2:	3308      	adds	r3, #8
 800f4f4:	2101      	movs	r1, #1
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f002 f878 	bl	80115ec <RCCEx_PLL2_Config>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f502:	e015      	b.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f508:	3328      	adds	r3, #40	; 0x28
 800f50a:	2101      	movs	r1, #1
 800f50c:	4618      	mov	r0, r3
 800f50e:	f002 f91f 	bl	8011750 <RCCEx_PLL3_Config>
 800f512:	4603      	mov	r3, r0
 800f514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f518:	e00a      	b.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f51a:	2301      	movs	r3, #1
 800f51c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f520:	e006      	b.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f522:	bf00      	nop
 800f524:	e004      	b.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f526:	bf00      	nop
 800f528:	e002      	b.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f52a:	bf00      	nop
 800f52c:	e000      	b.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f52e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f534:	2b00      	cmp	r3, #0
 800f536:	d10b      	bne.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f538:	4ba3      	ldr	r3, [pc, #652]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f53c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f544:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f548:	4a9f      	ldr	r2, [pc, #636]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f54a:	430b      	orrs	r3, r1
 800f54c:	6593      	str	r3, [r2, #88]	; 0x58
 800f54e:	e003      	b.n	800f558 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f560:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f568:	2300      	movs	r3, #0
 800f56a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f56e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f572:	460b      	mov	r3, r1
 800f574:	4313      	orrs	r3, r2
 800f576:	d037      	beq.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f57e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f582:	d00e      	beq.n	800f5a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f588:	d816      	bhi.n	800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d018      	beq.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f58e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f592:	d111      	bne.n	800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f594:	4b8c      	ldr	r3, [pc, #560]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f598:	4a8b      	ldr	r2, [pc, #556]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f59a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f59e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f5a0:	e00f      	b.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5a6:	3308      	adds	r3, #8
 800f5a8:	2101      	movs	r1, #1
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f002 f81e 	bl	80115ec <RCCEx_PLL2_Config>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f5b6:	e004      	b.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5be:	e000      	b.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f5c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d10a      	bne.n	800f5e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f5ca:	4b7f      	ldr	r3, [pc, #508]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f5cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5d8:	4a7b      	ldr	r2, [pc, #492]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f5da:	430b      	orrs	r3, r1
 800f5dc:	6513      	str	r3, [r2, #80]	; 0x50
 800f5de:	e003      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f5f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f5fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f602:	460b      	mov	r3, r1
 800f604:	4313      	orrs	r3, r2
 800f606:	d039      	beq.n	800f67c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f60c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f60e:	2b03      	cmp	r3, #3
 800f610:	d81c      	bhi.n	800f64c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f612:	a201      	add	r2, pc, #4	; (adr r2, 800f618 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f618:	0800f655 	.word	0x0800f655
 800f61c:	0800f629 	.word	0x0800f629
 800f620:	0800f637 	.word	0x0800f637
 800f624:	0800f655 	.word	0x0800f655
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f628:	4b67      	ldr	r3, [pc, #412]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62c:	4a66      	ldr	r2, [pc, #408]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f62e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f634:	e00f      	b.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f63a:	3308      	adds	r3, #8
 800f63c:	2102      	movs	r1, #2
 800f63e:	4618      	mov	r0, r3
 800f640:	f001 ffd4 	bl	80115ec <RCCEx_PLL2_Config>
 800f644:	4603      	mov	r3, r0
 800f646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f64a:	e004      	b.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f64c:	2301      	movs	r3, #1
 800f64e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f652:	e000      	b.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f654:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10a      	bne.n	800f674 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f65e:	4b5a      	ldr	r3, [pc, #360]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f662:	f023 0103 	bic.w	r1, r3, #3
 800f666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f66a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f66c:	4a56      	ldr	r2, [pc, #344]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f66e:	430b      	orrs	r3, r1
 800f670:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f672:	e003      	b.n	800f67c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f67c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f684:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f68c:	2300      	movs	r3, #0
 800f68e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f692:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f696:	460b      	mov	r3, r1
 800f698:	4313      	orrs	r3, r2
 800f69a:	f000 809f 	beq.w	800f7dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f69e:	4b4b      	ldr	r3, [pc, #300]	; (800f7cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a4a      	ldr	r2, [pc, #296]	; (800f7cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f6a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f6aa:	f7f6 fbb9 	bl	8005e20 <HAL_GetTick>
 800f6ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f6b2:	e00b      	b.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f6b4:	f7f6 fbb4 	bl	8005e20 <HAL_GetTick>
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f6be:	1ad3      	subs	r3, r2, r3
 800f6c0:	2b64      	cmp	r3, #100	; 0x64
 800f6c2:	d903      	bls.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f6c4:	2303      	movs	r3, #3
 800f6c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f6ca:	e005      	b.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f6cc:	4b3f      	ldr	r3, [pc, #252]	; (800f7cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d0ed      	beq.n	800f6b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f6d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d179      	bne.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f6e0:	4b39      	ldr	r3, [pc, #228]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f6ec:	4053      	eors	r3, r2
 800f6ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d015      	beq.n	800f722 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f6f6:	4b34      	ldr	r3, [pc, #208]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f702:	4b31      	ldr	r3, [pc, #196]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f706:	4a30      	ldr	r2, [pc, #192]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f70c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f70e:	4b2e      	ldr	r3, [pc, #184]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f712:	4a2d      	ldr	r2, [pc, #180]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f718:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f71a:	4a2b      	ldr	r2, [pc, #172]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f71c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f720:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f726:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f72a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f72e:	d118      	bne.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f730:	f7f6 fb76 	bl	8005e20 <HAL_GetTick>
 800f734:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f738:	e00d      	b.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f73a:	f7f6 fb71 	bl	8005e20 <HAL_GetTick>
 800f73e:	4602      	mov	r2, r0
 800f740:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f744:	1ad2      	subs	r2, r2, r3
 800f746:	f241 3388 	movw	r3, #5000	; 0x1388
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d903      	bls.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f74e:	2303      	movs	r3, #3
 800f750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f754:	e005      	b.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f756:	4b1c      	ldr	r3, [pc, #112]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f75a:	f003 0302 	and.w	r3, r3, #2
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d0eb      	beq.n	800f73a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f766:	2b00      	cmp	r3, #0
 800f768:	d129      	bne.n	800f7be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f76e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f77a:	d10e      	bne.n	800f79a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f77c:	4b12      	ldr	r3, [pc, #72]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f77e:	691b      	ldr	r3, [r3, #16]
 800f780:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f788:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f78c:	091a      	lsrs	r2, r3, #4
 800f78e:	4b10      	ldr	r3, [pc, #64]	; (800f7d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f790:	4013      	ands	r3, r2
 800f792:	4a0d      	ldr	r2, [pc, #52]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f794:	430b      	orrs	r3, r1
 800f796:	6113      	str	r3, [r2, #16]
 800f798:	e005      	b.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f79a:	4b0b      	ldr	r3, [pc, #44]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	4a0a      	ldr	r2, [pc, #40]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f7a4:	6113      	str	r3, [r2, #16]
 800f7a6:	4b08      	ldr	r3, [pc, #32]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f7b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f7b6:	4a04      	ldr	r2, [pc, #16]	; (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7b8:	430b      	orrs	r3, r1
 800f7ba:	6713      	str	r3, [r2, #112]	; 0x70
 800f7bc:	e00e      	b.n	800f7dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f7be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f7c6:	e009      	b.n	800f7dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f7c8:	58024400 	.word	0x58024400
 800f7cc:	58024800 	.word	0x58024800
 800f7d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e4:	f002 0301 	and.w	r3, r2, #1
 800f7e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f7f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	f000 8089 	beq.w	800f910 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f804:	2b28      	cmp	r3, #40	; 0x28
 800f806:	d86b      	bhi.n	800f8e0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f808:	a201      	add	r2, pc, #4	; (adr r2, 800f810 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f80e:	bf00      	nop
 800f810:	0800f8e9 	.word	0x0800f8e9
 800f814:	0800f8e1 	.word	0x0800f8e1
 800f818:	0800f8e1 	.word	0x0800f8e1
 800f81c:	0800f8e1 	.word	0x0800f8e1
 800f820:	0800f8e1 	.word	0x0800f8e1
 800f824:	0800f8e1 	.word	0x0800f8e1
 800f828:	0800f8e1 	.word	0x0800f8e1
 800f82c:	0800f8e1 	.word	0x0800f8e1
 800f830:	0800f8b5 	.word	0x0800f8b5
 800f834:	0800f8e1 	.word	0x0800f8e1
 800f838:	0800f8e1 	.word	0x0800f8e1
 800f83c:	0800f8e1 	.word	0x0800f8e1
 800f840:	0800f8e1 	.word	0x0800f8e1
 800f844:	0800f8e1 	.word	0x0800f8e1
 800f848:	0800f8e1 	.word	0x0800f8e1
 800f84c:	0800f8e1 	.word	0x0800f8e1
 800f850:	0800f8cb 	.word	0x0800f8cb
 800f854:	0800f8e1 	.word	0x0800f8e1
 800f858:	0800f8e1 	.word	0x0800f8e1
 800f85c:	0800f8e1 	.word	0x0800f8e1
 800f860:	0800f8e1 	.word	0x0800f8e1
 800f864:	0800f8e1 	.word	0x0800f8e1
 800f868:	0800f8e1 	.word	0x0800f8e1
 800f86c:	0800f8e1 	.word	0x0800f8e1
 800f870:	0800f8e9 	.word	0x0800f8e9
 800f874:	0800f8e1 	.word	0x0800f8e1
 800f878:	0800f8e1 	.word	0x0800f8e1
 800f87c:	0800f8e1 	.word	0x0800f8e1
 800f880:	0800f8e1 	.word	0x0800f8e1
 800f884:	0800f8e1 	.word	0x0800f8e1
 800f888:	0800f8e1 	.word	0x0800f8e1
 800f88c:	0800f8e1 	.word	0x0800f8e1
 800f890:	0800f8e9 	.word	0x0800f8e9
 800f894:	0800f8e1 	.word	0x0800f8e1
 800f898:	0800f8e1 	.word	0x0800f8e1
 800f89c:	0800f8e1 	.word	0x0800f8e1
 800f8a0:	0800f8e1 	.word	0x0800f8e1
 800f8a4:	0800f8e1 	.word	0x0800f8e1
 800f8a8:	0800f8e1 	.word	0x0800f8e1
 800f8ac:	0800f8e1 	.word	0x0800f8e1
 800f8b0:	0800f8e9 	.word	0x0800f8e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8b8:	3308      	adds	r3, #8
 800f8ba:	2101      	movs	r1, #1
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f001 fe95 	bl	80115ec <RCCEx_PLL2_Config>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f8c8:	e00f      	b.n	800f8ea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8ce:	3328      	adds	r3, #40	; 0x28
 800f8d0:	2101      	movs	r1, #1
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f001 ff3c 	bl	8011750 <RCCEx_PLL3_Config>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f8de:	e004      	b.n	800f8ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f8e6:	e000      	b.n	800f8ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f8e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d10a      	bne.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f8f2:	4bbf      	ldr	r3, [pc, #764]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f900:	4abb      	ldr	r2, [pc, #748]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f902:	430b      	orrs	r3, r1
 800f904:	6553      	str	r3, [r2, #84]	; 0x54
 800f906:	e003      	b.n	800f910 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f90c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f918:	f002 0302 	and.w	r3, r2, #2
 800f91c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f920:	2300      	movs	r3, #0
 800f922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f926:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f92a:	460b      	mov	r3, r1
 800f92c:	4313      	orrs	r3, r2
 800f92e:	d041      	beq.n	800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f936:	2b05      	cmp	r3, #5
 800f938:	d824      	bhi.n	800f984 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f93a:	a201      	add	r2, pc, #4	; (adr r2, 800f940 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f940:	0800f98d 	.word	0x0800f98d
 800f944:	0800f959 	.word	0x0800f959
 800f948:	0800f96f 	.word	0x0800f96f
 800f94c:	0800f98d 	.word	0x0800f98d
 800f950:	0800f98d 	.word	0x0800f98d
 800f954:	0800f98d 	.word	0x0800f98d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f95c:	3308      	adds	r3, #8
 800f95e:	2101      	movs	r1, #1
 800f960:	4618      	mov	r0, r3
 800f962:	f001 fe43 	bl	80115ec <RCCEx_PLL2_Config>
 800f966:	4603      	mov	r3, r0
 800f968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f96c:	e00f      	b.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f972:	3328      	adds	r3, #40	; 0x28
 800f974:	2101      	movs	r1, #1
 800f976:	4618      	mov	r0, r3
 800f978:	f001 feea 	bl	8011750 <RCCEx_PLL3_Config>
 800f97c:	4603      	mov	r3, r0
 800f97e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f982:	e004      	b.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f984:	2301      	movs	r3, #1
 800f986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f98a:	e000      	b.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f98c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f98e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f992:	2b00      	cmp	r3, #0
 800f994:	d10a      	bne.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f996:	4b96      	ldr	r3, [pc, #600]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f99a:	f023 0107 	bic.w	r1, r3, #7
 800f99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9a4:	4a92      	ldr	r2, [pc, #584]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f9a6:	430b      	orrs	r3, r1
 800f9a8:	6553      	str	r3, [r2, #84]	; 0x54
 800f9aa:	e003      	b.n	800f9b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f9b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f002 0304 	and.w	r3, r2, #4
 800f9c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f9ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	d044      	beq.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f9dc:	2b05      	cmp	r3, #5
 800f9de:	d825      	bhi.n	800fa2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f9e0:	a201      	add	r2, pc, #4	; (adr r2, 800f9e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e6:	bf00      	nop
 800f9e8:	0800fa35 	.word	0x0800fa35
 800f9ec:	0800fa01 	.word	0x0800fa01
 800f9f0:	0800fa17 	.word	0x0800fa17
 800f9f4:	0800fa35 	.word	0x0800fa35
 800f9f8:	0800fa35 	.word	0x0800fa35
 800f9fc:	0800fa35 	.word	0x0800fa35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fa00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa04:	3308      	adds	r3, #8
 800fa06:	2101      	movs	r1, #1
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f001 fdef 	bl	80115ec <RCCEx_PLL2_Config>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fa14:	e00f      	b.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa1a:	3328      	adds	r3, #40	; 0x28
 800fa1c:	2101      	movs	r1, #1
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f001 fe96 	bl	8011750 <RCCEx_PLL3_Config>
 800fa24:	4603      	mov	r3, r0
 800fa26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fa2a:	e004      	b.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa32:	e000      	b.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800fa34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d10b      	bne.n	800fa56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fa3e:	4b6c      	ldr	r3, [pc, #432]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa42:	f023 0107 	bic.w	r1, r3, #7
 800fa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa4e:	4a68      	ldr	r2, [pc, #416]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa50:	430b      	orrs	r3, r1
 800fa52:	6593      	str	r3, [r2, #88]	; 0x58
 800fa54:	e003      	b.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fa5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa66:	f002 0320 	and.w	r3, r2, #32
 800fa6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fa6e:	2300      	movs	r3, #0
 800fa70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fa74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800fa78:	460b      	mov	r3, r1
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	d055      	beq.n	800fb2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fa7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa8a:	d033      	beq.n	800faf4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800fa8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa90:	d82c      	bhi.n	800faec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fa92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa96:	d02f      	beq.n	800faf8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800fa98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa9c:	d826      	bhi.n	800faec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fa9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800faa2:	d02b      	beq.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800faa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800faa8:	d820      	bhi.n	800faec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800faaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800faae:	d012      	beq.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800fab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fab4:	d81a      	bhi.n	800faec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d022      	beq.n	800fb00 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800faba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fabe:	d115      	bne.n	800faec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fac4:	3308      	adds	r3, #8
 800fac6:	2100      	movs	r1, #0
 800fac8:	4618      	mov	r0, r3
 800faca:	f001 fd8f 	bl	80115ec <RCCEx_PLL2_Config>
 800face:	4603      	mov	r3, r0
 800fad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fad4:	e015      	b.n	800fb02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fada:	3328      	adds	r3, #40	; 0x28
 800fadc:	2102      	movs	r1, #2
 800fade:	4618      	mov	r0, r3
 800fae0:	f001 fe36 	bl	8011750 <RCCEx_PLL3_Config>
 800fae4:	4603      	mov	r3, r0
 800fae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800faea:	e00a      	b.n	800fb02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800faec:	2301      	movs	r3, #1
 800faee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800faf2:	e006      	b.n	800fb02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800faf4:	bf00      	nop
 800faf6:	e004      	b.n	800fb02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800faf8:	bf00      	nop
 800fafa:	e002      	b.n	800fb02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fafc:	bf00      	nop
 800fafe:	e000      	b.n	800fb02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fb00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d10b      	bne.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fb0a:	4b39      	ldr	r3, [pc, #228]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800fb12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb1a:	4a35      	ldr	r2, [pc, #212]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb1c:	430b      	orrs	r3, r1
 800fb1e:	6553      	str	r3, [r2, #84]	; 0x54
 800fb20:	e003      	b.n	800fb2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fb2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb32:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800fb36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fb40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800fb44:	460b      	mov	r3, r1
 800fb46:	4313      	orrs	r3, r2
 800fb48:	d058      	beq.n	800fbfc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fb4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fb52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fb56:	d033      	beq.n	800fbc0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800fb58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fb5c:	d82c      	bhi.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fb5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb62:	d02f      	beq.n	800fbc4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800fb64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb68:	d826      	bhi.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fb6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fb6e:	d02b      	beq.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800fb70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fb74:	d820      	bhi.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fb76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb7a:	d012      	beq.n	800fba2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800fb7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb80:	d81a      	bhi.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d022      	beq.n	800fbcc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800fb86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb8a:	d115      	bne.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb90:	3308      	adds	r3, #8
 800fb92:	2100      	movs	r1, #0
 800fb94:	4618      	mov	r0, r3
 800fb96:	f001 fd29 	bl	80115ec <RCCEx_PLL2_Config>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fba0:	e015      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fba6:	3328      	adds	r3, #40	; 0x28
 800fba8:	2102      	movs	r1, #2
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f001 fdd0 	bl	8011750 <RCCEx_PLL3_Config>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fbb6:	e00a      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fbbe:	e006      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fbc0:	bf00      	nop
 800fbc2:	e004      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fbc4:	bf00      	nop
 800fbc6:	e002      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fbc8:	bf00      	nop
 800fbca:	e000      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fbcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d10e      	bne.n	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fbd6:	4b06      	ldr	r3, [pc, #24]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fbd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbda:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800fbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fbe6:	4a02      	ldr	r2, [pc, #8]	; (800fbf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fbe8:	430b      	orrs	r3, r1
 800fbea:	6593      	str	r3, [r2, #88]	; 0x58
 800fbec:	e006      	b.n	800fbfc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800fbee:	bf00      	nop
 800fbf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc04:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800fc08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fc12:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800fc16:	460b      	mov	r3, r1
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	d055      	beq.n	800fcc8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fc24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fc28:	d033      	beq.n	800fc92 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800fc2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fc2e:	d82c      	bhi.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc34:	d02f      	beq.n	800fc96 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800fc36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc3a:	d826      	bhi.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fc40:	d02b      	beq.n	800fc9a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800fc42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fc46:	d820      	bhi.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fc4c:	d012      	beq.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800fc4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fc52:	d81a      	bhi.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d022      	beq.n	800fc9e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800fc58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc5c:	d115      	bne.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc62:	3308      	adds	r3, #8
 800fc64:	2100      	movs	r1, #0
 800fc66:	4618      	mov	r0, r3
 800fc68:	f001 fcc0 	bl	80115ec <RCCEx_PLL2_Config>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fc72:	e015      	b.n	800fca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc78:	3328      	adds	r3, #40	; 0x28
 800fc7a:	2102      	movs	r1, #2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f001 fd67 	bl	8011750 <RCCEx_PLL3_Config>
 800fc82:	4603      	mov	r3, r0
 800fc84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fc88:	e00a      	b.n	800fca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc90:	e006      	b.n	800fca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fc92:	bf00      	nop
 800fc94:	e004      	b.n	800fca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fc96:	bf00      	nop
 800fc98:	e002      	b.n	800fca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fc9a:	bf00      	nop
 800fc9c:	e000      	b.n	800fca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fc9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d10b      	bne.n	800fcc0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fca8:	4ba1      	ldr	r3, [pc, #644]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fcaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800fcb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fcb8:	4a9d      	ldr	r2, [pc, #628]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fcba:	430b      	orrs	r3, r1
 800fcbc:	6593      	str	r3, [r2, #88]	; 0x58
 800fcbe:	e003      	b.n	800fcc8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fcc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd0:	f002 0308 	and.w	r3, r2, #8
 800fcd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fcde:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800fce2:	460b      	mov	r3, r1
 800fce4:	4313      	orrs	r3, r2
 800fce6:	d01e      	beq.n	800fd26 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800fce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcf4:	d10c      	bne.n	800fd10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fcf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcfa:	3328      	adds	r3, #40	; 0x28
 800fcfc:	2102      	movs	r1, #2
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f001 fd26 	bl	8011750 <RCCEx_PLL3_Config>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d002      	beq.n	800fd10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fd10:	4b87      	ldr	r3, [pc, #540]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd20:	4a83      	ldr	r2, [pc, #524]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd22:	430b      	orrs	r3, r1
 800fd24:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	f002 0310 	and.w	r3, r2, #16
 800fd32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fd36:	2300      	movs	r3, #0
 800fd38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fd3c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fd40:	460b      	mov	r3, r1
 800fd42:	4313      	orrs	r3, r2
 800fd44:	d01e      	beq.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fd46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd52:	d10c      	bne.n	800fd6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd58:	3328      	adds	r3, #40	; 0x28
 800fd5a:	2102      	movs	r1, #2
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f001 fcf7 	bl	8011750 <RCCEx_PLL3_Config>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800fd68:	2301      	movs	r3, #1
 800fd6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fd6e:	4b70      	ldr	r3, [pc, #448]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd7e:	4a6c      	ldr	r2, [pc, #432]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd80:	430b      	orrs	r3, r1
 800fd82:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fd84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800fd90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd94:	2300      	movs	r3, #0
 800fd96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fd9a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4313      	orrs	r3, r2
 800fda2:	d03e      	beq.n	800fe22 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800fda4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fda8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fdac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fdb0:	d022      	beq.n	800fdf8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800fdb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fdb6:	d81b      	bhi.n	800fdf0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d003      	beq.n	800fdc4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800fdbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdc0:	d00b      	beq.n	800fdda <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800fdc2:	e015      	b.n	800fdf0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fdc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdc8:	3308      	adds	r3, #8
 800fdca:	2100      	movs	r1, #0
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f001 fc0d 	bl	80115ec <RCCEx_PLL2_Config>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fdd8:	e00f      	b.n	800fdfa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fdda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdde:	3328      	adds	r3, #40	; 0x28
 800fde0:	2102      	movs	r1, #2
 800fde2:	4618      	mov	r0, r3
 800fde4:	f001 fcb4 	bl	8011750 <RCCEx_PLL3_Config>
 800fde8:	4603      	mov	r3, r0
 800fdea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fdee:	e004      	b.n	800fdfa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fdf6:	e000      	b.n	800fdfa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800fdf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fdfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d10b      	bne.n	800fe1a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fe02:	4b4b      	ldr	r3, [pc, #300]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe06:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800fe0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fe12:	4a47      	ldr	r2, [pc, #284]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe14:	430b      	orrs	r3, r1
 800fe16:	6593      	str	r3, [r2, #88]	; 0x58
 800fe18:	e003      	b.n	800fe22 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fe22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800fe2e:	67bb      	str	r3, [r7, #120]	; 0x78
 800fe30:	2300      	movs	r3, #0
 800fe32:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fe34:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800fe38:	460b      	mov	r3, r1
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	d03b      	beq.n	800feb6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fe3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fe4a:	d01f      	beq.n	800fe8c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fe4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fe50:	d818      	bhi.n	800fe84 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800fe52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe56:	d003      	beq.n	800fe60 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800fe58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fe5c:	d007      	beq.n	800fe6e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800fe5e:	e011      	b.n	800fe84 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe60:	4b33      	ldr	r3, [pc, #204]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe64:	4a32      	ldr	r2, [pc, #200]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fe6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fe6c:	e00f      	b.n	800fe8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fe6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe72:	3328      	adds	r3, #40	; 0x28
 800fe74:	2101      	movs	r1, #1
 800fe76:	4618      	mov	r0, r3
 800fe78:	f001 fc6a 	bl	8011750 <RCCEx_PLL3_Config>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800fe82:	e004      	b.n	800fe8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe84:	2301      	movs	r3, #1
 800fe86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fe8a:	e000      	b.n	800fe8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800fe8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d10b      	bne.n	800feae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fe96:	4b26      	ldr	r3, [pc, #152]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fe9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fea6:	4a22      	ldr	r2, [pc, #136]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fea8:	430b      	orrs	r3, r1
 800feaa:	6553      	str	r3, [r2, #84]	; 0x54
 800feac:	e003      	b.n	800feb6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800feae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800feb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800feb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800febe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800fec2:	673b      	str	r3, [r7, #112]	; 0x70
 800fec4:	2300      	movs	r3, #0
 800fec6:	677b      	str	r3, [r7, #116]	; 0x74
 800fec8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800fecc:	460b      	mov	r3, r1
 800fece:	4313      	orrs	r3, r2
 800fed0:	d034      	beq.n	800ff3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800fed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d003      	beq.n	800fee4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800fedc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fee0:	d007      	beq.n	800fef2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800fee2:	e011      	b.n	800ff08 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fee4:	4b12      	ldr	r3, [pc, #72]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fee8:	4a11      	ldr	r2, [pc, #68]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800feea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800feee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fef0:	e00e      	b.n	800ff10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fef6:	3308      	adds	r3, #8
 800fef8:	2102      	movs	r1, #2
 800fefa:	4618      	mov	r0, r3
 800fefc:	f001 fb76 	bl	80115ec <RCCEx_PLL2_Config>
 800ff00:	4603      	mov	r3, r0
 800ff02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ff06:	e003      	b.n	800ff10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ff08:	2301      	movs	r3, #1
 800ff0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ff0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10d      	bne.n	800ff34 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ff18:	4b05      	ldr	r3, [pc, #20]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff26:	4a02      	ldr	r2, [pc, #8]	; (800ff30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff28:	430b      	orrs	r3, r1
 800ff2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ff2c:	e006      	b.n	800ff3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ff2e:	bf00      	nop
 800ff30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ff3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff44:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ff48:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ff4e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ff52:	460b      	mov	r3, r1
 800ff54:	4313      	orrs	r3, r2
 800ff56:	d00c      	beq.n	800ff72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ff58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff5c:	3328      	adds	r3, #40	; 0x28
 800ff5e:	2102      	movs	r1, #2
 800ff60:	4618      	mov	r0, r3
 800ff62:	f001 fbf5 	bl	8011750 <RCCEx_PLL3_Config>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d002      	beq.n	800ff72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ff72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ff7e:	663b      	str	r3, [r7, #96]	; 0x60
 800ff80:	2300      	movs	r3, #0
 800ff82:	667b      	str	r3, [r7, #100]	; 0x64
 800ff84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ff88:	460b      	mov	r3, r1
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	d038      	beq.n	8010000 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ff8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff9a:	d018      	beq.n	800ffce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ff9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ffa0:	d811      	bhi.n	800ffc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ffa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffa6:	d014      	beq.n	800ffd2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ffa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffac:	d80b      	bhi.n	800ffc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d011      	beq.n	800ffd6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ffb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffb6:	d106      	bne.n	800ffc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ffb8:	4bc3      	ldr	r3, [pc, #780]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ffba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffbc:	4ac2      	ldr	r2, [pc, #776]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ffbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ffc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ffc4:	e008      	b.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ffcc:	e004      	b.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ffce:	bf00      	nop
 800ffd0:	e002      	b.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ffd2:	bf00      	nop
 800ffd4:	e000      	b.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ffd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ffd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d10b      	bne.n	800fff8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ffe0:	4bb9      	ldr	r3, [pc, #740]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ffe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffe4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ffe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fff0:	4ab5      	ldr	r2, [pc, #724]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fff2:	430b      	orrs	r3, r1
 800fff4:	6553      	str	r3, [r2, #84]	; 0x54
 800fff6:	e003      	b.n	8010000 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fffc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010008:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801000c:	65bb      	str	r3, [r7, #88]	; 0x58
 801000e:	2300      	movs	r3, #0
 8010010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010012:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8010016:	460b      	mov	r3, r1
 8010018:	4313      	orrs	r3, r2
 801001a:	d009      	beq.n	8010030 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801001c:	4baa      	ldr	r3, [pc, #680]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801001e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010020:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801002a:	4aa7      	ldr	r2, [pc, #668]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801002c:	430b      	orrs	r3, r1
 801002e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010038:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 801003c:	653b      	str	r3, [r7, #80]	; 0x50
 801003e:	2300      	movs	r3, #0
 8010040:	657b      	str	r3, [r7, #84]	; 0x54
 8010042:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8010046:	460b      	mov	r3, r1
 8010048:	4313      	orrs	r3, r2
 801004a:	d00a      	beq.n	8010062 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801004c:	4b9e      	ldr	r3, [pc, #632]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8010054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010058:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801005c:	4a9a      	ldr	r2, [pc, #616]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801005e:	430b      	orrs	r3, r1
 8010060:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801006e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010070:	2300      	movs	r3, #0
 8010072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010074:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010078:	460b      	mov	r3, r1
 801007a:	4313      	orrs	r3, r2
 801007c:	d009      	beq.n	8010092 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801007e:	4b92      	ldr	r3, [pc, #584]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010082:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8010086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801008a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801008c:	4a8e      	ldr	r2, [pc, #568]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801008e:	430b      	orrs	r3, r1
 8010090:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801009e:	643b      	str	r3, [r7, #64]	; 0x40
 80100a0:	2300      	movs	r3, #0
 80100a2:	647b      	str	r3, [r7, #68]	; 0x44
 80100a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80100a8:	460b      	mov	r3, r1
 80100aa:	4313      	orrs	r3, r2
 80100ac:	d00e      	beq.n	80100cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80100ae:	4b86      	ldr	r3, [pc, #536]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100b0:	691b      	ldr	r3, [r3, #16]
 80100b2:	4a85      	ldr	r2, [pc, #532]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80100b8:	6113      	str	r3, [r2, #16]
 80100ba:	4b83      	ldr	r3, [pc, #524]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100bc:	6919      	ldr	r1, [r3, #16]
 80100be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80100c6:	4a80      	ldr	r2, [pc, #512]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100c8:	430b      	orrs	r3, r1
 80100ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80100cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80100d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80100da:	2300      	movs	r3, #0
 80100dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80100e2:	460b      	mov	r3, r1
 80100e4:	4313      	orrs	r3, r2
 80100e6:	d009      	beq.n	80100fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80100e8:	4b77      	ldr	r3, [pc, #476]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100ec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80100f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100f6:	4a74      	ldr	r2, [pc, #464]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100f8:	430b      	orrs	r3, r1
 80100fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80100fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010104:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8010108:	633b      	str	r3, [r7, #48]	; 0x30
 801010a:	2300      	movs	r3, #0
 801010c:	637b      	str	r3, [r7, #52]	; 0x34
 801010e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8010112:	460b      	mov	r3, r1
 8010114:	4313      	orrs	r3, r2
 8010116:	d00a      	beq.n	801012e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010118:	4b6b      	ldr	r3, [pc, #428]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801011a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801011c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8010120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010128:	4a67      	ldr	r2, [pc, #412]	; (80102c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801012a:	430b      	orrs	r3, r1
 801012c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801012e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010136:	2100      	movs	r1, #0
 8010138:	62b9      	str	r1, [r7, #40]	; 0x28
 801013a:	f003 0301 	and.w	r3, r3, #1
 801013e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010140:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8010144:	460b      	mov	r3, r1
 8010146:	4313      	orrs	r3, r2
 8010148:	d011      	beq.n	801016e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801014a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801014e:	3308      	adds	r3, #8
 8010150:	2100      	movs	r1, #0
 8010152:	4618      	mov	r0, r3
 8010154:	f001 fa4a 	bl	80115ec <RCCEx_PLL2_Config>
 8010158:	4603      	mov	r3, r0
 801015a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801015e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010162:	2b00      	cmp	r3, #0
 8010164:	d003      	beq.n	801016e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801016a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801016e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010176:	2100      	movs	r1, #0
 8010178:	6239      	str	r1, [r7, #32]
 801017a:	f003 0302 	and.w	r3, r3, #2
 801017e:	627b      	str	r3, [r7, #36]	; 0x24
 8010180:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010184:	460b      	mov	r3, r1
 8010186:	4313      	orrs	r3, r2
 8010188:	d011      	beq.n	80101ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801018a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801018e:	3308      	adds	r3, #8
 8010190:	2101      	movs	r1, #1
 8010192:	4618      	mov	r0, r3
 8010194:	f001 fa2a 	bl	80115ec <RCCEx_PLL2_Config>
 8010198:	4603      	mov	r3, r0
 801019a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801019e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d003      	beq.n	80101ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80101ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b6:	2100      	movs	r1, #0
 80101b8:	61b9      	str	r1, [r7, #24]
 80101ba:	f003 0304 	and.w	r3, r3, #4
 80101be:	61fb      	str	r3, [r7, #28]
 80101c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80101c4:	460b      	mov	r3, r1
 80101c6:	4313      	orrs	r3, r2
 80101c8:	d011      	beq.n	80101ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80101ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101ce:	3308      	adds	r3, #8
 80101d0:	2102      	movs	r1, #2
 80101d2:	4618      	mov	r0, r3
 80101d4:	f001 fa0a 	bl	80115ec <RCCEx_PLL2_Config>
 80101d8:	4603      	mov	r3, r0
 80101da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80101de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d003      	beq.n	80101ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80101ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	2100      	movs	r1, #0
 80101f8:	6139      	str	r1, [r7, #16]
 80101fa:	f003 0308 	and.w	r3, r3, #8
 80101fe:	617b      	str	r3, [r7, #20]
 8010200:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010204:	460b      	mov	r3, r1
 8010206:	4313      	orrs	r3, r2
 8010208:	d011      	beq.n	801022e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801020a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801020e:	3328      	adds	r3, #40	; 0x28
 8010210:	2100      	movs	r1, #0
 8010212:	4618      	mov	r0, r3
 8010214:	f001 fa9c 	bl	8011750 <RCCEx_PLL3_Config>
 8010218:	4603      	mov	r3, r0
 801021a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 801021e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010222:	2b00      	cmp	r3, #0
 8010224:	d003      	beq.n	801022e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801022a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801022e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010236:	2100      	movs	r1, #0
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	f003 0310 	and.w	r3, r3, #16
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010244:	460b      	mov	r3, r1
 8010246:	4313      	orrs	r3, r2
 8010248:	d011      	beq.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801024a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801024e:	3328      	adds	r3, #40	; 0x28
 8010250:	2101      	movs	r1, #1
 8010252:	4618      	mov	r0, r3
 8010254:	f001 fa7c 	bl	8011750 <RCCEx_PLL3_Config>
 8010258:	4603      	mov	r3, r0
 801025a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801025e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010262:	2b00      	cmp	r3, #0
 8010264:	d003      	beq.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801026a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801026e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010276:	2100      	movs	r1, #0
 8010278:	6039      	str	r1, [r7, #0]
 801027a:	f003 0320 	and.w	r3, r3, #32
 801027e:	607b      	str	r3, [r7, #4]
 8010280:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010284:	460b      	mov	r3, r1
 8010286:	4313      	orrs	r3, r2
 8010288:	d011      	beq.n	80102ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801028a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801028e:	3328      	adds	r3, #40	; 0x28
 8010290:	2102      	movs	r1, #2
 8010292:	4618      	mov	r0, r3
 8010294:	f001 fa5c 	bl	8011750 <RCCEx_PLL3_Config>
 8010298:	4603      	mov	r3, r0
 801029a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801029e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d003      	beq.n	80102ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80102ae:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d101      	bne.n	80102ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80102b6:	2300      	movs	r3, #0
 80102b8:	e000      	b.n	80102bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80102ba:	2301      	movs	r3, #1
}
 80102bc:	4618      	mov	r0, r3
 80102be:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80102c2:	46bd      	mov	sp, r7
 80102c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80102c8:	58024400 	.word	0x58024400

080102cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b090      	sub	sp, #64	; 0x40
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80102d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102da:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80102de:	430b      	orrs	r3, r1
 80102e0:	f040 8094 	bne.w	801040c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80102e4:	4b9e      	ldr	r3, [pc, #632]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80102e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102e8:	f003 0307 	and.w	r3, r3, #7
 80102ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80102ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f0:	2b04      	cmp	r3, #4
 80102f2:	f200 8087 	bhi.w	8010404 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80102f6:	a201      	add	r2, pc, #4	; (adr r2, 80102fc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80102f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102fc:	08010311 	.word	0x08010311
 8010300:	08010339 	.word	0x08010339
 8010304:	08010361 	.word	0x08010361
 8010308:	080103fd 	.word	0x080103fd
 801030c:	08010389 	.word	0x08010389
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010310:	4b93      	ldr	r3, [pc, #588]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801031c:	d108      	bne.n	8010330 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801031e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010322:	4618      	mov	r0, r3
 8010324:	f001 f810 	bl	8011348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801032c:	f000 bd45 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010330:	2300      	movs	r3, #0
 8010332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010334:	f000 bd41 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010338:	4b89      	ldr	r3, [pc, #548]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010344:	d108      	bne.n	8010358 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010346:	f107 0318 	add.w	r3, r7, #24
 801034a:	4618      	mov	r0, r3
 801034c:	f000 fd54 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010354:	f000 bd31 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010358:	2300      	movs	r3, #0
 801035a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801035c:	f000 bd2d 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010360:	4b7f      	ldr	r3, [pc, #508]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801036c:	d108      	bne.n	8010380 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801036e:	f107 030c 	add.w	r3, r7, #12
 8010372:	4618      	mov	r0, r3
 8010374:	f000 fe94 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801037c:	f000 bd1d 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010380:	2300      	movs	r3, #0
 8010382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010384:	f000 bd19 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010388:	4b75      	ldr	r3, [pc, #468]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801038a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801038c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010390:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010392:	4b73      	ldr	r3, [pc, #460]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f003 0304 	and.w	r3, r3, #4
 801039a:	2b04      	cmp	r3, #4
 801039c:	d10c      	bne.n	80103b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801039e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d109      	bne.n	80103b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103a4:	4b6e      	ldr	r3, [pc, #440]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	08db      	lsrs	r3, r3, #3
 80103aa:	f003 0303 	and.w	r3, r3, #3
 80103ae:	4a6d      	ldr	r2, [pc, #436]	; (8010564 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80103b0:	fa22 f303 	lsr.w	r3, r2, r3
 80103b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103b6:	e01f      	b.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80103b8:	4b69      	ldr	r3, [pc, #420]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103c4:	d106      	bne.n	80103d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80103c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80103cc:	d102      	bne.n	80103d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80103ce:	4b66      	ldr	r3, [pc, #408]	; (8010568 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80103d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103d2:	e011      	b.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80103d4:	4b62      	ldr	r3, [pc, #392]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80103e0:	d106      	bne.n	80103f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80103e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103e8:	d102      	bne.n	80103f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80103ea:	4b60      	ldr	r3, [pc, #384]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80103ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103ee:	e003      	b.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80103f0:	2300      	movs	r3, #0
 80103f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80103f4:	f000 bce1 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80103f8:	f000 bcdf 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80103fc:	4b5c      	ldr	r3, [pc, #368]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80103fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010400:	f000 bcdb 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010408:	f000 bcd7 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801040c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010410:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8010414:	430b      	orrs	r3, r1
 8010416:	f040 80ad 	bne.w	8010574 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801041a:	4b51      	ldr	r3, [pc, #324]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801041c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801041e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8010422:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801042a:	d056      	beq.n	80104da <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 801042c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010432:	f200 8090 	bhi.w	8010556 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010438:	2bc0      	cmp	r3, #192	; 0xc0
 801043a:	f000 8088 	beq.w	801054e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801043e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010440:	2bc0      	cmp	r3, #192	; 0xc0
 8010442:	f200 8088 	bhi.w	8010556 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010448:	2b80      	cmp	r3, #128	; 0x80
 801044a:	d032      	beq.n	80104b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801044c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044e:	2b80      	cmp	r3, #128	; 0x80
 8010450:	f200 8081 	bhi.w	8010556 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010456:	2b00      	cmp	r3, #0
 8010458:	d003      	beq.n	8010462 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801045a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045c:	2b40      	cmp	r3, #64	; 0x40
 801045e:	d014      	beq.n	801048a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010460:	e079      	b.n	8010556 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010462:	4b3f      	ldr	r3, [pc, #252]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801046a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801046e:	d108      	bne.n	8010482 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010474:	4618      	mov	r0, r3
 8010476:	f000 ff67 	bl	8011348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801047a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801047e:	f000 bc9c 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010482:	2300      	movs	r3, #0
 8010484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010486:	f000 bc98 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801048a:	4b35      	ldr	r3, [pc, #212]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010496:	d108      	bne.n	80104aa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010498:	f107 0318 	add.w	r3, r7, #24
 801049c:	4618      	mov	r0, r3
 801049e:	f000 fcab 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104a6:	f000 bc88 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104ae:	f000 bc84 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104b2:	4b2b      	ldr	r3, [pc, #172]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104be:	d108      	bne.n	80104d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104c0:	f107 030c 	add.w	r3, r7, #12
 80104c4:	4618      	mov	r0, r3
 80104c6:	f000 fdeb 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104ce:	f000 bc74 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104d6:	f000 bc70 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80104da:	4b21      	ldr	r3, [pc, #132]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80104e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80104e4:	4b1e      	ldr	r3, [pc, #120]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f003 0304 	and.w	r3, r3, #4
 80104ec:	2b04      	cmp	r3, #4
 80104ee:	d10c      	bne.n	801050a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80104f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d109      	bne.n	801050a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80104f6:	4b1a      	ldr	r3, [pc, #104]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	08db      	lsrs	r3, r3, #3
 80104fc:	f003 0303 	and.w	r3, r3, #3
 8010500:	4a18      	ldr	r2, [pc, #96]	; (8010564 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010502:	fa22 f303 	lsr.w	r3, r2, r3
 8010506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010508:	e01f      	b.n	801054a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801050a:	4b15      	ldr	r3, [pc, #84]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010516:	d106      	bne.n	8010526 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801051e:	d102      	bne.n	8010526 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010520:	4b11      	ldr	r3, [pc, #68]	; (8010568 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010524:	e011      	b.n	801054a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010526:	4b0e      	ldr	r3, [pc, #56]	; (8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801052e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010532:	d106      	bne.n	8010542 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801053a:	d102      	bne.n	8010542 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801053c:	4b0b      	ldr	r3, [pc, #44]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801053e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010540:	e003      	b.n	801054a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010542:	2300      	movs	r3, #0
 8010544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010546:	f000 bc38 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801054a:	f000 bc36 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801054e:	4b08      	ldr	r3, [pc, #32]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010552:	f000 bc32 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010556:	2300      	movs	r3, #0
 8010558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801055a:	f000 bc2e 	b.w	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801055e:	bf00      	nop
 8010560:	58024400 	.word	0x58024400
 8010564:	03d09000 	.word	0x03d09000
 8010568:	003d0900 	.word	0x003d0900
 801056c:	017d7840 	.word	0x017d7840
 8010570:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010578:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801057c:	430b      	orrs	r3, r1
 801057e:	f040 809c 	bne.w	80106ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010582:	4b9e      	ldr	r3, [pc, #632]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010586:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801058a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010592:	d054      	beq.n	801063e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801059a:	f200 808b 	bhi.w	80106b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801059e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80105a4:	f000 8083 	beq.w	80106ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80105a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80105ae:	f200 8081 	bhi.w	80106b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80105b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80105b8:	d02f      	beq.n	801061a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80105ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80105c0:	d878      	bhi.n	80106b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80105c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d004      	beq.n	80105d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80105c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80105ce:	d012      	beq.n	80105f6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80105d0:	e070      	b.n	80106b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105d2:	4b8a      	ldr	r3, [pc, #552]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105de:	d107      	bne.n	80105f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80105e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105e4:	4618      	mov	r0, r3
 80105e6:	f000 feaf 	bl	8011348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80105ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105ee:	e3e4      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105f0:	2300      	movs	r3, #0
 80105f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105f4:	e3e1      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80105f6:	4b81      	ldr	r3, [pc, #516]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010602:	d107      	bne.n	8010614 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010604:	f107 0318 	add.w	r3, r7, #24
 8010608:	4618      	mov	r0, r3
 801060a:	f000 fbf5 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010612:	e3d2      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010614:	2300      	movs	r3, #0
 8010616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010618:	e3cf      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801061a:	4b78      	ldr	r3, [pc, #480]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010626:	d107      	bne.n	8010638 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010628:	f107 030c 	add.w	r3, r7, #12
 801062c:	4618      	mov	r0, r3
 801062e:	f000 fd37 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010636:	e3c0      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801063c:	e3bd      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801063e:	4b6f      	ldr	r3, [pc, #444]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010642:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010646:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010648:	4b6c      	ldr	r3, [pc, #432]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f003 0304 	and.w	r3, r3, #4
 8010650:	2b04      	cmp	r3, #4
 8010652:	d10c      	bne.n	801066e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010656:	2b00      	cmp	r3, #0
 8010658:	d109      	bne.n	801066e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801065a:	4b68      	ldr	r3, [pc, #416]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	08db      	lsrs	r3, r3, #3
 8010660:	f003 0303 	and.w	r3, r3, #3
 8010664:	4a66      	ldr	r2, [pc, #408]	; (8010800 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010666:	fa22 f303 	lsr.w	r3, r2, r3
 801066a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801066c:	e01e      	b.n	80106ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801066e:	4b63      	ldr	r3, [pc, #396]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801067a:	d106      	bne.n	801068a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801067c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801067e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010682:	d102      	bne.n	801068a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010684:	4b5f      	ldr	r3, [pc, #380]	; (8010804 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010688:	e010      	b.n	80106ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801068a:	4b5c      	ldr	r3, [pc, #368]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010696:	d106      	bne.n	80106a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801069a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801069e:	d102      	bne.n	80106a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80106a0:	4b59      	ldr	r3, [pc, #356]	; (8010808 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80106a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106a4:	e002      	b.n	80106ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80106aa:	e386      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106ac:	e385      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80106ae:	4b57      	ldr	r3, [pc, #348]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80106b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106b2:	e382      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80106b4:	2300      	movs	r3, #0
 80106b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106b8:	e37f      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80106ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106be:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80106c2:	430b      	orrs	r3, r1
 80106c4:	f040 80a7 	bne.w	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80106c8:	4b4c      	ldr	r3, [pc, #304]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80106ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80106d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80106d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80106d8:	d055      	beq.n	8010786 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80106da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80106e0:	f200 8096 	bhi.w	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80106e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80106ea:	f000 8084 	beq.w	80107f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80106ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80106f4:	f200 808c 	bhi.w	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80106f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80106fe:	d030      	beq.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010706:	f200 8083 	bhi.w	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070c:	2b00      	cmp	r3, #0
 801070e:	d004      	beq.n	801071a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010712:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010716:	d012      	beq.n	801073e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010718:	e07a      	b.n	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801071a:	4b38      	ldr	r3, [pc, #224]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010726:	d107      	bne.n	8010738 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801072c:	4618      	mov	r0, r3
 801072e:	f000 fe0b 	bl	8011348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010736:	e340      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010738:	2300      	movs	r3, #0
 801073a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801073c:	e33d      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801073e:	4b2f      	ldr	r3, [pc, #188]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801074a:	d107      	bne.n	801075c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801074c:	f107 0318 	add.w	r3, r7, #24
 8010750:	4618      	mov	r0, r3
 8010752:	f000 fb51 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801075a:	e32e      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801075c:	2300      	movs	r3, #0
 801075e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010760:	e32b      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010762:	4b26      	ldr	r3, [pc, #152]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801076e:	d107      	bne.n	8010780 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010770:	f107 030c 	add.w	r3, r7, #12
 8010774:	4618      	mov	r0, r3
 8010776:	f000 fc93 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801077e:	e31c      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010780:	2300      	movs	r3, #0
 8010782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010784:	e319      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010786:	4b1d      	ldr	r3, [pc, #116]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801078a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801078e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010790:	4b1a      	ldr	r3, [pc, #104]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f003 0304 	and.w	r3, r3, #4
 8010798:	2b04      	cmp	r3, #4
 801079a:	d10c      	bne.n	80107b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 801079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d109      	bne.n	80107b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80107a2:	4b16      	ldr	r3, [pc, #88]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	08db      	lsrs	r3, r3, #3
 80107a8:	f003 0303 	and.w	r3, r3, #3
 80107ac:	4a14      	ldr	r2, [pc, #80]	; (8010800 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80107ae:	fa22 f303 	lsr.w	r3, r2, r3
 80107b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107b4:	e01e      	b.n	80107f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107b6:	4b11      	ldr	r3, [pc, #68]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107c2:	d106      	bne.n	80107d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80107c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107ca:	d102      	bne.n	80107d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80107cc:	4b0d      	ldr	r3, [pc, #52]	; (8010804 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80107ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107d0:	e010      	b.n	80107f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80107d2:	4b0a      	ldr	r3, [pc, #40]	; (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107de:	d106      	bne.n	80107ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80107e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107e6:	d102      	bne.n	80107ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80107e8:	4b07      	ldr	r3, [pc, #28]	; (8010808 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80107ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107ec:	e002      	b.n	80107f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80107ee:	2300      	movs	r3, #0
 80107f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80107f2:	e2e2      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80107f4:	e2e1      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80107f6:	4b05      	ldr	r3, [pc, #20]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80107f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107fa:	e2de      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80107fc:	58024400 	.word	0x58024400
 8010800:	03d09000 	.word	0x03d09000
 8010804:	003d0900 	.word	0x003d0900
 8010808:	017d7840 	.word	0x017d7840
 801080c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010814:	e2d1      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010816:	e9d7 2300 	ldrd	r2, r3, [r7]
 801081a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801081e:	430b      	orrs	r3, r1
 8010820:	f040 809c 	bne.w	801095c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010824:	4b93      	ldr	r3, [pc, #588]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010828:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801082c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801082e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010834:	d054      	beq.n	80108e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801083c:	f200 808b 	bhi.w	8010956 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010842:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010846:	f000 8083 	beq.w	8010950 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801084a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010850:	f200 8081 	bhi.w	8010956 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801085a:	d02f      	beq.n	80108bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010862:	d878      	bhi.n	8010956 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010866:	2b00      	cmp	r3, #0
 8010868:	d004      	beq.n	8010874 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801086a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010870:	d012      	beq.n	8010898 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010872:	e070      	b.n	8010956 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010874:	4b7f      	ldr	r3, [pc, #508]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801087c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010880:	d107      	bne.n	8010892 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010886:	4618      	mov	r0, r3
 8010888:	f000 fd5e 	bl	8011348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010890:	e293      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010892:	2300      	movs	r3, #0
 8010894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010896:	e290      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010898:	4b76      	ldr	r3, [pc, #472]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80108a4:	d107      	bne.n	80108b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108a6:	f107 0318 	add.w	r3, r7, #24
 80108aa:	4618      	mov	r0, r3
 80108ac:	f000 faa4 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80108b0:	69bb      	ldr	r3, [r7, #24]
 80108b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108b4:	e281      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108b6:	2300      	movs	r3, #0
 80108b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ba:	e27e      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80108bc:	4b6d      	ldr	r3, [pc, #436]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108c8:	d107      	bne.n	80108da <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108ca:	f107 030c 	add.w	r3, r7, #12
 80108ce:	4618      	mov	r0, r3
 80108d0:	f000 fbe6 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108d8:	e26f      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108da:	2300      	movs	r3, #0
 80108dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108de:	e26c      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80108e0:	4b64      	ldr	r3, [pc, #400]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80108e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80108ea:	4b62      	ldr	r3, [pc, #392]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f003 0304 	and.w	r3, r3, #4
 80108f2:	2b04      	cmp	r3, #4
 80108f4:	d10c      	bne.n	8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80108f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d109      	bne.n	8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108fc:	4b5d      	ldr	r3, [pc, #372]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	08db      	lsrs	r3, r3, #3
 8010902:	f003 0303 	and.w	r3, r3, #3
 8010906:	4a5c      	ldr	r2, [pc, #368]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010908:	fa22 f303 	lsr.w	r3, r2, r3
 801090c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801090e:	e01e      	b.n	801094e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010910:	4b58      	ldr	r3, [pc, #352]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801091c:	d106      	bne.n	801092c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801091e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010924:	d102      	bne.n	801092c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010926:	4b55      	ldr	r3, [pc, #340]	; (8010a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010928:	63fb      	str	r3, [r7, #60]	; 0x3c
 801092a:	e010      	b.n	801094e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801092c:	4b51      	ldr	r3, [pc, #324]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010938:	d106      	bne.n	8010948 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801093a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010940:	d102      	bne.n	8010948 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010942:	4b4f      	ldr	r3, [pc, #316]	; (8010a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010946:	e002      	b.n	801094e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010948:	2300      	movs	r3, #0
 801094a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801094c:	e235      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801094e:	e234      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010950:	4b4c      	ldr	r3, [pc, #304]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010954:	e231      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010956:	2300      	movs	r3, #0
 8010958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801095a:	e22e      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801095c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010960:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010964:	430b      	orrs	r3, r1
 8010966:	f040 808f 	bne.w	8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801096a:	4b42      	ldr	r3, [pc, #264]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801096c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801096e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010972:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801097a:	d06b      	beq.n	8010a54 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801097c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010982:	d874      	bhi.n	8010a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801098a:	d056      	beq.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 801098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010992:	d86c      	bhi.n	8010a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010996:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801099a:	d03b      	beq.n	8010a14 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801099c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80109a2:	d864      	bhi.n	8010a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80109a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109aa:	d021      	beq.n	80109f0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109b2:	d85c      	bhi.n	8010a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80109b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d004      	beq.n	80109c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80109ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109c0:	d004      	beq.n	80109cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80109c2:	e054      	b.n	8010a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80109c4:	f7fe fa0a 	bl	800eddc <HAL_RCC_GetPCLK1Freq>
 80109c8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80109ca:	e1f6      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80109cc:	4b29      	ldr	r3, [pc, #164]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109d8:	d107      	bne.n	80109ea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109da:	f107 0318 	add.w	r3, r7, #24
 80109de:	4618      	mov	r0, r3
 80109e0:	f000 fa0a 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109e8:	e1e7      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109ea:	2300      	movs	r3, #0
 80109ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109ee:	e1e4      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80109f0:	4b20      	ldr	r3, [pc, #128]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80109f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109fc:	d107      	bne.n	8010a0e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80109fe:	f107 030c 	add.w	r3, r7, #12
 8010a02:	4618      	mov	r0, r3
 8010a04:	f000 fb4c 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a0c:	e1d5      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a12:	e1d2      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010a14:	4b17      	ldr	r3, [pc, #92]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f003 0304 	and.w	r3, r3, #4
 8010a1c:	2b04      	cmp	r3, #4
 8010a1e:	d109      	bne.n	8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a20:	4b14      	ldr	r3, [pc, #80]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	08db      	lsrs	r3, r3, #3
 8010a26:	f003 0303 	and.w	r3, r3, #3
 8010a2a:	4a13      	ldr	r2, [pc, #76]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8010a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a32:	e1c2      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a34:	2300      	movs	r3, #0
 8010a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a38:	e1bf      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010a3a:	4b0e      	ldr	r3, [pc, #56]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a46:	d102      	bne.n	8010a4e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010a48:	4b0c      	ldr	r3, [pc, #48]	; (8010a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a4c:	e1b5      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a52:	e1b2      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010a54:	4b07      	ldr	r3, [pc, #28]	; (8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a60:	d102      	bne.n	8010a68 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010a62:	4b07      	ldr	r3, [pc, #28]	; (8010a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a66:	e1a8      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a6c:	e1a5      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a72:	e1a2      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010a74:	58024400 	.word	0x58024400
 8010a78:	03d09000 	.word	0x03d09000
 8010a7c:	003d0900 	.word	0x003d0900
 8010a80:	017d7840 	.word	0x017d7840
 8010a84:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a8c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010a90:	430b      	orrs	r3, r1
 8010a92:	d173      	bne.n	8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010a94:	4b9c      	ldr	r3, [pc, #624]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010a9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010aa4:	d02f      	beq.n	8010b06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010aac:	d863      	bhi.n	8010b76 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d004      	beq.n	8010abe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010aba:	d012      	beq.n	8010ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010abc:	e05b      	b.n	8010b76 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010abe:	4b92      	ldr	r3, [pc, #584]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010aca:	d107      	bne.n	8010adc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010acc:	f107 0318 	add.w	r3, r7, #24
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f000 f991 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ada:	e16e      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010adc:	2300      	movs	r3, #0
 8010ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ae0:	e16b      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010ae2:	4b89      	ldr	r3, [pc, #548]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010aee:	d107      	bne.n	8010b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010af0:	f107 030c 	add.w	r3, r7, #12
 8010af4:	4618      	mov	r0, r3
 8010af6:	f000 fad3 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010afe:	e15c      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b00:	2300      	movs	r3, #0
 8010b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b04:	e159      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010b06:	4b80      	ldr	r3, [pc, #512]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010b0e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010b10:	4b7d      	ldr	r3, [pc, #500]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f003 0304 	and.w	r3, r3, #4
 8010b18:	2b04      	cmp	r3, #4
 8010b1a:	d10c      	bne.n	8010b36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d109      	bne.n	8010b36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b22:	4b79      	ldr	r3, [pc, #484]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	08db      	lsrs	r3, r3, #3
 8010b28:	f003 0303 	and.w	r3, r3, #3
 8010b2c:	4a77      	ldr	r2, [pc, #476]	; (8010d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8010b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b34:	e01e      	b.n	8010b74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010b36:	4b74      	ldr	r3, [pc, #464]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b42:	d106      	bne.n	8010b52 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010b4a:	d102      	bne.n	8010b52 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010b4c:	4b70      	ldr	r3, [pc, #448]	; (8010d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b50:	e010      	b.n	8010b74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010b52:	4b6d      	ldr	r3, [pc, #436]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b5e:	d106      	bne.n	8010b6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b66:	d102      	bne.n	8010b6e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010b68:	4b6a      	ldr	r3, [pc, #424]	; (8010d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b6c:	e002      	b.n	8010b74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010b72:	e122      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010b74:	e121      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010b76:	2300      	movs	r3, #0
 8010b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b7a:	e11e      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b80:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010b84:	430b      	orrs	r3, r1
 8010b86:	d133      	bne.n	8010bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010b88:	4b5f      	ldr	r3, [pc, #380]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010b90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d004      	beq.n	8010ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b9e:	d012      	beq.n	8010bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010ba0:	e023      	b.n	8010bea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010ba2:	4b59      	ldr	r3, [pc, #356]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010bae:	d107      	bne.n	8010bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f000 fbc7 	bl	8011348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bbe:	e0fc      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bc4:	e0f9      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010bc6:	4b50      	ldr	r3, [pc, #320]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010bd2:	d107      	bne.n	8010be4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bd4:	f107 0318 	add.w	r3, r7, #24
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f000 f90d 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010bde:	6a3b      	ldr	r3, [r7, #32]
 8010be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010be2:	e0ea      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010be4:	2300      	movs	r3, #0
 8010be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010be8:	e0e7      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bee:	e0e4      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bf4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010bf8:	430b      	orrs	r3, r1
 8010bfa:	f040 808d 	bne.w	8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010bfe:	4b42      	ldr	r3, [pc, #264]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010c06:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010c0e:	d06b      	beq.n	8010ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010c16:	d874      	bhi.n	8010d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c1e:	d056      	beq.n	8010cce <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c26:	d86c      	bhi.n	8010d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010c2e:	d03b      	beq.n	8010ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010c36:	d864      	bhi.n	8010d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c3e:	d021      	beq.n	8010c84 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c46:	d85c      	bhi.n	8010d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d004      	beq.n	8010c58 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010c54:	d004      	beq.n	8010c60 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010c56:	e054      	b.n	8010d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010c58:	f000 f8b8 	bl	8010dcc <HAL_RCCEx_GetD3PCLK1Freq>
 8010c5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010c5e:	e0ac      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010c60:	4b29      	ldr	r3, [pc, #164]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010c6c:	d107      	bne.n	8010c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c6e:	f107 0318 	add.w	r3, r7, #24
 8010c72:	4618      	mov	r0, r3
 8010c74:	f000 f8c0 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c7c:	e09d      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c82:	e09a      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010c84:	4b20      	ldr	r3, [pc, #128]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c90:	d107      	bne.n	8010ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c92:	f107 030c 	add.w	r3, r7, #12
 8010c96:	4618      	mov	r0, r3
 8010c98:	f000 fa02 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ca0:	e08b      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ca6:	e088      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010ca8:	4b17      	ldr	r3, [pc, #92]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	f003 0304 	and.w	r3, r3, #4
 8010cb0:	2b04      	cmp	r3, #4
 8010cb2:	d109      	bne.n	8010cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010cb4:	4b14      	ldr	r3, [pc, #80]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	08db      	lsrs	r3, r3, #3
 8010cba:	f003 0303 	and.w	r3, r3, #3
 8010cbe:	4a13      	ldr	r2, [pc, #76]	; (8010d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8010cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010cc6:	e078      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ccc:	e075      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010cce:	4b0e      	ldr	r3, [pc, #56]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cda:	d102      	bne.n	8010ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010cdc:	4b0c      	ldr	r3, [pc, #48]	; (8010d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ce0:	e06b      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ce6:	e068      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010ce8:	4b07      	ldr	r3, [pc, #28]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010cf4:	d102      	bne.n	8010cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010cf6:	4b07      	ldr	r3, [pc, #28]	; (8010d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010cfa:	e05e      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d00:	e05b      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010d02:	2300      	movs	r3, #0
 8010d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d06:	e058      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010d08:	58024400 	.word	0x58024400
 8010d0c:	03d09000 	.word	0x03d09000
 8010d10:	003d0900 	.word	0x003d0900
 8010d14:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d1c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010d20:	430b      	orrs	r3, r1
 8010d22:	d148      	bne.n	8010db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010d24:	4b27      	ldr	r3, [pc, #156]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010d2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d34:	d02a      	beq.n	8010d8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d3c:	d838      	bhi.n	8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d004      	beq.n	8010d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d4a:	d00d      	beq.n	8010d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010d4c:	e030      	b.n	8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010d4e:	4b1d      	ldr	r3, [pc, #116]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010d5a:	d102      	bne.n	8010d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010d5c:	4b1a      	ldr	r3, [pc, #104]	; (8010dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d60:	e02b      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d62:	2300      	movs	r3, #0
 8010d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d66:	e028      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d68:	4b16      	ldr	r3, [pc, #88]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010d74:	d107      	bne.n	8010d86 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f000 fae4 	bl	8011348 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d84:	e019      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d86:	2300      	movs	r3, #0
 8010d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d8a:	e016      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d8c:	4b0d      	ldr	r3, [pc, #52]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010d98:	d107      	bne.n	8010daa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d9a:	f107 0318 	add.w	r3, r7, #24
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f000 f82a 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010da8:	e007      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010daa:	2300      	movs	r3, #0
 8010dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dae:	e004      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010db0:	2300      	movs	r3, #0
 8010db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010db4:	e001      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010db6:	2300      	movs	r3, #0
 8010db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3740      	adds	r7, #64	; 0x40
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	58024400 	.word	0x58024400
 8010dc8:	017d7840 	.word	0x017d7840

08010dcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010dd0:	f7fd ffd4 	bl	800ed7c <HAL_RCC_GetHCLKFreq>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010dd8:	6a1b      	ldr	r3, [r3, #32]
 8010dda:	091b      	lsrs	r3, r3, #4
 8010ddc:	f003 0307 	and.w	r3, r3, #7
 8010de0:	4904      	ldr	r1, [pc, #16]	; (8010df4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010de2:	5ccb      	ldrb	r3, [r1, r3]
 8010de4:	f003 031f 	and.w	r3, r3, #31
 8010de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	58024400 	.word	0x58024400
 8010df4:	0801b154 	.word	0x0801b154

08010df8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b089      	sub	sp, #36	; 0x24
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010e00:	4ba1      	ldr	r3, [pc, #644]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e04:	f003 0303 	and.w	r3, r3, #3
 8010e08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010e0a:	4b9f      	ldr	r3, [pc, #636]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e0e:	0b1b      	lsrs	r3, r3, #12
 8010e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010e16:	4b9c      	ldr	r3, [pc, #624]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e1a:	091b      	lsrs	r3, r3, #4
 8010e1c:	f003 0301 	and.w	r3, r3, #1
 8010e20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010e22:	4b99      	ldr	r3, [pc, #612]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e26:	08db      	lsrs	r3, r3, #3
 8010e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	fb02 f303 	mul.w	r3, r2, r3
 8010e32:	ee07 3a90 	vmov	s15, r3
 8010e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f000 8111 	beq.w	8011068 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	2b02      	cmp	r3, #2
 8010e4a:	f000 8083 	beq.w	8010f54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	2b02      	cmp	r3, #2
 8010e52:	f200 80a1 	bhi.w	8010f98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d003      	beq.n	8010e64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010e5c:	69bb      	ldr	r3, [r7, #24]
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d056      	beq.n	8010f10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010e62:	e099      	b.n	8010f98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e64:	4b88      	ldr	r3, [pc, #544]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f003 0320 	and.w	r3, r3, #32
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d02d      	beq.n	8010ecc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e70:	4b85      	ldr	r3, [pc, #532]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	08db      	lsrs	r3, r3, #3
 8010e76:	f003 0303 	and.w	r3, r3, #3
 8010e7a:	4a84      	ldr	r2, [pc, #528]	; (801108c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	ee07 3a90 	vmov	s15, r3
 8010e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	ee07 3a90 	vmov	s15, r3
 8010e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e9a:	4b7b      	ldr	r3, [pc, #492]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ea2:	ee07 3a90 	vmov	s15, r3
 8010ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8010eae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010eca:	e087      	b.n	8010fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	ee07 3a90 	vmov	s15, r3
 8010ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ed6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011094 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ede:	4b6a      	ldr	r3, [pc, #424]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ee6:	ee07 3a90 	vmov	s15, r3
 8010eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ef2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f0e:	e065      	b.n	8010fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	ee07 3a90 	vmov	s15, r3
 8010f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f22:	4b59      	ldr	r3, [pc, #356]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f2a:	ee07 3a90 	vmov	s15, r3
 8010f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f52:	e043      	b.n	8010fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	ee07 3a90 	vmov	s15, r3
 8010f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801109c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f66:	4b48      	ldr	r3, [pc, #288]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f6e:	ee07 3a90 	vmov	s15, r3
 8010f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f96:	e021      	b.n	8010fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	ee07 3a90 	vmov	s15, r3
 8010f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fa2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010faa:	4b37      	ldr	r3, [pc, #220]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fb2:	ee07 3a90 	vmov	s15, r3
 8010fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8010fbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010fda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010fdc:	4b2a      	ldr	r3, [pc, #168]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe0:	0a5b      	lsrs	r3, r3, #9
 8010fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fe6:	ee07 3a90 	vmov	s15, r3
 8010fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011002:	ee17 2a90 	vmov	r2, s15
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801100a:	4b1f      	ldr	r3, [pc, #124]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801100e:	0c1b      	lsrs	r3, r3, #16
 8011010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011014:	ee07 3a90 	vmov	s15, r3
 8011018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801101c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011024:	edd7 6a07 	vldr	s13, [r7, #28]
 8011028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801102c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011030:	ee17 2a90 	vmov	r2, s15
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011038:	4b13      	ldr	r3, [pc, #76]	; (8011088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801103a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801103c:	0e1b      	lsrs	r3, r3, #24
 801103e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011042:	ee07 3a90 	vmov	s15, r3
 8011046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801104a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801104e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011052:	edd7 6a07 	vldr	s13, [r7, #28]
 8011056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801105a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801105e:	ee17 2a90 	vmov	r2, s15
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8011066:	e008      	b.n	801107a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2200      	movs	r2, #0
 8011078:	609a      	str	r2, [r3, #8]
}
 801107a:	bf00      	nop
 801107c:	3724      	adds	r7, #36	; 0x24
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop
 8011088:	58024400 	.word	0x58024400
 801108c:	03d09000 	.word	0x03d09000
 8011090:	46000000 	.word	0x46000000
 8011094:	4c742400 	.word	0x4c742400
 8011098:	4a742400 	.word	0x4a742400
 801109c:	4bbebc20 	.word	0x4bbebc20

080110a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b089      	sub	sp, #36	; 0x24
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80110a8:	4ba1      	ldr	r3, [pc, #644]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ac:	f003 0303 	and.w	r3, r3, #3
 80110b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80110b2:	4b9f      	ldr	r3, [pc, #636]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110b6:	0d1b      	lsrs	r3, r3, #20
 80110b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80110be:	4b9c      	ldr	r3, [pc, #624]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c2:	0a1b      	lsrs	r3, r3, #8
 80110c4:	f003 0301 	and.w	r3, r3, #1
 80110c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80110ca:	4b99      	ldr	r3, [pc, #612]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110ce:	08db      	lsrs	r3, r3, #3
 80110d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80110d4:	693a      	ldr	r2, [r7, #16]
 80110d6:	fb02 f303 	mul.w	r3, r2, r3
 80110da:	ee07 3a90 	vmov	s15, r3
 80110de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f000 8111 	beq.w	8011310 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80110ee:	69bb      	ldr	r3, [r7, #24]
 80110f0:	2b02      	cmp	r3, #2
 80110f2:	f000 8083 	beq.w	80111fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	2b02      	cmp	r3, #2
 80110fa:	f200 80a1 	bhi.w	8011240 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d003      	beq.n	801110c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	2b01      	cmp	r3, #1
 8011108:	d056      	beq.n	80111b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801110a:	e099      	b.n	8011240 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801110c:	4b88      	ldr	r3, [pc, #544]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f003 0320 	and.w	r3, r3, #32
 8011114:	2b00      	cmp	r3, #0
 8011116:	d02d      	beq.n	8011174 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011118:	4b85      	ldr	r3, [pc, #532]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	08db      	lsrs	r3, r3, #3
 801111e:	f003 0303 	and.w	r3, r3, #3
 8011122:	4a84      	ldr	r2, [pc, #528]	; (8011334 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8011124:	fa22 f303 	lsr.w	r3, r2, r3
 8011128:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	ee07 3a90 	vmov	s15, r3
 8011130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	ee07 3a90 	vmov	s15, r3
 801113a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801113e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011142:	4b7b      	ldr	r3, [pc, #492]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801114a:	ee07 3a90 	vmov	s15, r3
 801114e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011152:	ed97 6a03 	vldr	s12, [r7, #12]
 8011156:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801115a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801115e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801116a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801116e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011172:	e087      	b.n	8011284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	ee07 3a90 	vmov	s15, r3
 801117a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801117e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801133c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8011182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011186:	4b6a      	ldr	r3, [pc, #424]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801118a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801118e:	ee07 3a90 	vmov	s15, r3
 8011192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011196:	ed97 6a03 	vldr	s12, [r7, #12]
 801119a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801119e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111b6:	e065      	b.n	8011284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	ee07 3a90 	vmov	s15, r3
 80111be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80111c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111ca:	4b59      	ldr	r3, [pc, #356]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80111cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d2:	ee07 3a90 	vmov	s15, r3
 80111d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111da:	ed97 6a03 	vldr	s12, [r7, #12]
 80111de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80111e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111fa:	e043      	b.n	8011284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	ee07 3a90 	vmov	s15, r3
 8011202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011206:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801120a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801120e:	4b48      	ldr	r3, [pc, #288]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011216:	ee07 3a90 	vmov	s15, r3
 801121a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801121e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011222:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801122a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801122e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011236:	ee67 7a27 	vmul.f32	s15, s14, s15
 801123a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801123e:	e021      	b.n	8011284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	ee07 3a90 	vmov	s15, r3
 8011246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801124a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801124e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011252:	4b37      	ldr	r3, [pc, #220]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801125a:	ee07 3a90 	vmov	s15, r3
 801125e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011262:	ed97 6a03 	vldr	s12, [r7, #12]
 8011266:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801126a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801126e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801127a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801127e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011282:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8011284:	4b2a      	ldr	r3, [pc, #168]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011288:	0a5b      	lsrs	r3, r3, #9
 801128a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801128e:	ee07 3a90 	vmov	s15, r3
 8011292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801129a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801129e:	edd7 6a07 	vldr	s13, [r7, #28]
 80112a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112aa:	ee17 2a90 	vmov	r2, s15
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80112b2:	4b1f      	ldr	r3, [pc, #124]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b6:	0c1b      	lsrs	r3, r3, #16
 80112b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112bc:	ee07 3a90 	vmov	s15, r3
 80112c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80112d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112d8:	ee17 2a90 	vmov	r2, s15
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80112e0:	4b13      	ldr	r3, [pc, #76]	; (8011330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e4:	0e1b      	lsrs	r3, r3, #24
 80112e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112ea:	ee07 3a90 	vmov	s15, r3
 80112ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80112fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011306:	ee17 2a90 	vmov	r2, s15
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801130e:	e008      	b.n	8011322 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2200      	movs	r2, #0
 801131a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	609a      	str	r2, [r3, #8]
}
 8011322:	bf00      	nop
 8011324:	3724      	adds	r7, #36	; 0x24
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	58024400 	.word	0x58024400
 8011334:	03d09000 	.word	0x03d09000
 8011338:	46000000 	.word	0x46000000
 801133c:	4c742400 	.word	0x4c742400
 8011340:	4a742400 	.word	0x4a742400
 8011344:	4bbebc20 	.word	0x4bbebc20

08011348 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011348:	b480      	push	{r7}
 801134a:	b089      	sub	sp, #36	; 0x24
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011350:	4ba0      	ldr	r3, [pc, #640]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011354:	f003 0303 	and.w	r3, r3, #3
 8011358:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801135a:	4b9e      	ldr	r3, [pc, #632]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801135e:	091b      	lsrs	r3, r3, #4
 8011360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011364:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8011366:	4b9b      	ldr	r3, [pc, #620]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801136a:	f003 0301 	and.w	r3, r3, #1
 801136e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011370:	4b98      	ldr	r3, [pc, #608]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011374:	08db      	lsrs	r3, r3, #3
 8011376:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801137a:	693a      	ldr	r2, [r7, #16]
 801137c:	fb02 f303 	mul.w	r3, r2, r3
 8011380:	ee07 3a90 	vmov	s15, r3
 8011384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011388:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	2b00      	cmp	r3, #0
 8011390:	f000 8111 	beq.w	80115b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011394:	69bb      	ldr	r3, [r7, #24]
 8011396:	2b02      	cmp	r3, #2
 8011398:	f000 8083 	beq.w	80114a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801139c:	69bb      	ldr	r3, [r7, #24]
 801139e:	2b02      	cmp	r3, #2
 80113a0:	f200 80a1 	bhi.w	80114e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d003      	beq.n	80113b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80113aa:	69bb      	ldr	r3, [r7, #24]
 80113ac:	2b01      	cmp	r3, #1
 80113ae:	d056      	beq.n	801145e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80113b0:	e099      	b.n	80114e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113b2:	4b88      	ldr	r3, [pc, #544]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f003 0320 	and.w	r3, r3, #32
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d02d      	beq.n	801141a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80113be:	4b85      	ldr	r3, [pc, #532]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	08db      	lsrs	r3, r3, #3
 80113c4:	f003 0303 	and.w	r3, r3, #3
 80113c8:	4a83      	ldr	r2, [pc, #524]	; (80115d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80113ca:	fa22 f303 	lsr.w	r3, r2, r3
 80113ce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	ee07 3a90 	vmov	s15, r3
 80113d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	ee07 3a90 	vmov	s15, r3
 80113e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113e8:	4b7a      	ldr	r3, [pc, #488]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113f0:	ee07 3a90 	vmov	s15, r3
 80113f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80113fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80115dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801140c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011414:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011418:	e087      	b.n	801152a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	ee07 3a90 	vmov	s15, r3
 8011420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011424:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80115e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801142c:	4b69      	ldr	r3, [pc, #420]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011434:	ee07 3a90 	vmov	s15, r3
 8011438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801143c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011440:	eddf 5a66 	vldr	s11, [pc, #408]	; 80115dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801144c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011458:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801145c:	e065      	b.n	801152a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	ee07 3a90 	vmov	s15, r3
 8011464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011468:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801146c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011470:	4b58      	ldr	r3, [pc, #352]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011478:	ee07 3a90 	vmov	s15, r3
 801147c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011480:	ed97 6a03 	vldr	s12, [r7, #12]
 8011484:	eddf 5a55 	vldr	s11, [pc, #340]	; 80115dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801148c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801149c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80114a0:	e043      	b.n	801152a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	ee07 3a90 	vmov	s15, r3
 80114a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80115e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80114b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114b4:	4b47      	ldr	r3, [pc, #284]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114bc:	ee07 3a90 	vmov	s15, r3
 80114c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80114c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80115dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80114cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80114e4:	e021      	b.n	801152a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	ee07 3a90 	vmov	s15, r3
 80114ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114f0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80115e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80114f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114f8:	4b36      	ldr	r3, [pc, #216]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011500:	ee07 3a90 	vmov	s15, r3
 8011504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011508:	ed97 6a03 	vldr	s12, [r7, #12]
 801150c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80115dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801151c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011528:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801152a:	4b2a      	ldr	r3, [pc, #168]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801152e:	0a5b      	lsrs	r3, r3, #9
 8011530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011534:	ee07 3a90 	vmov	s15, r3
 8011538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801153c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011544:	edd7 6a07 	vldr	s13, [r7, #28]
 8011548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801154c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011550:	ee17 2a90 	vmov	r2, s15
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011558:	4b1e      	ldr	r3, [pc, #120]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801155c:	0c1b      	lsrs	r3, r3, #16
 801155e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011562:	ee07 3a90 	vmov	s15, r3
 8011566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801156a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801156e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011572:	edd7 6a07 	vldr	s13, [r7, #28]
 8011576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801157a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801157e:	ee17 2a90 	vmov	r2, s15
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8011586:	4b13      	ldr	r3, [pc, #76]	; (80115d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801158a:	0e1b      	lsrs	r3, r3, #24
 801158c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011590:	ee07 3a90 	vmov	s15, r3
 8011594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801159c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80115a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80115a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115ac:	ee17 2a90 	vmov	r2, s15
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80115b4:	e008      	b.n	80115c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2200      	movs	r2, #0
 80115ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2200      	movs	r2, #0
 80115c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2200      	movs	r2, #0
 80115c6:	609a      	str	r2, [r3, #8]
}
 80115c8:	bf00      	nop
 80115ca:	3724      	adds	r7, #36	; 0x24
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr
 80115d4:	58024400 	.word	0x58024400
 80115d8:	03d09000 	.word	0x03d09000
 80115dc:	46000000 	.word	0x46000000
 80115e0:	4c742400 	.word	0x4c742400
 80115e4:	4a742400 	.word	0x4a742400
 80115e8:	4bbebc20 	.word	0x4bbebc20

080115ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80115f6:	2300      	movs	r3, #0
 80115f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80115fa:	4b53      	ldr	r3, [pc, #332]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80115fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115fe:	f003 0303 	and.w	r3, r3, #3
 8011602:	2b03      	cmp	r3, #3
 8011604:	d101      	bne.n	801160a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011606:	2301      	movs	r3, #1
 8011608:	e099      	b.n	801173e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801160a:	4b4f      	ldr	r3, [pc, #316]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	4a4e      	ldr	r2, [pc, #312]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 8011610:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011616:	f7f4 fc03 	bl	8005e20 <HAL_GetTick>
 801161a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801161c:	e008      	b.n	8011630 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801161e:	f7f4 fbff 	bl	8005e20 <HAL_GetTick>
 8011622:	4602      	mov	r2, r0
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	1ad3      	subs	r3, r2, r3
 8011628:	2b02      	cmp	r3, #2
 801162a:	d901      	bls.n	8011630 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801162c:	2303      	movs	r3, #3
 801162e:	e086      	b.n	801173e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011630:	4b45      	ldr	r3, [pc, #276]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1f0      	bne.n	801161e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801163c:	4b42      	ldr	r3, [pc, #264]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 801163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011640:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	031b      	lsls	r3, r3, #12
 801164a:	493f      	ldr	r1, [pc, #252]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 801164c:	4313      	orrs	r3, r2
 801164e:	628b      	str	r3, [r1, #40]	; 0x28
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	3b01      	subs	r3, #1
 8011656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	689b      	ldr	r3, [r3, #8]
 801165e:	3b01      	subs	r3, #1
 8011660:	025b      	lsls	r3, r3, #9
 8011662:	b29b      	uxth	r3, r3
 8011664:	431a      	orrs	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	3b01      	subs	r3, #1
 801166c:	041b      	lsls	r3, r3, #16
 801166e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011672:	431a      	orrs	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	3b01      	subs	r3, #1
 801167a:	061b      	lsls	r3, r3, #24
 801167c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011680:	4931      	ldr	r1, [pc, #196]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 8011682:	4313      	orrs	r3, r2
 8011684:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011686:	4b30      	ldr	r3, [pc, #192]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 8011688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801168a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	492d      	ldr	r1, [pc, #180]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 8011694:	4313      	orrs	r3, r2
 8011696:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011698:	4b2b      	ldr	r3, [pc, #172]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 801169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801169c:	f023 0220 	bic.w	r2, r3, #32
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	699b      	ldr	r3, [r3, #24]
 80116a4:	4928      	ldr	r1, [pc, #160]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116a6:	4313      	orrs	r3, r2
 80116a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80116aa:	4b27      	ldr	r3, [pc, #156]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ae:	4a26      	ldr	r2, [pc, #152]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116b0:	f023 0310 	bic.w	r3, r3, #16
 80116b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80116b6:	4b24      	ldr	r3, [pc, #144]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80116ba:	4b24      	ldr	r3, [pc, #144]	; (801174c <RCCEx_PLL2_Config+0x160>)
 80116bc:	4013      	ands	r3, r2
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	69d2      	ldr	r2, [r2, #28]
 80116c2:	00d2      	lsls	r2, r2, #3
 80116c4:	4920      	ldr	r1, [pc, #128]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116c6:	4313      	orrs	r3, r2
 80116c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80116ca:	4b1f      	ldr	r3, [pc, #124]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ce:	4a1e      	ldr	r2, [pc, #120]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116d0:	f043 0310 	orr.w	r3, r3, #16
 80116d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d106      	bne.n	80116ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80116dc:	4b1a      	ldr	r3, [pc, #104]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e0:	4a19      	ldr	r2, [pc, #100]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80116e8:	e00f      	b.n	801170a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d106      	bne.n	80116fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80116f0:	4b15      	ldr	r3, [pc, #84]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f4:	4a14      	ldr	r2, [pc, #80]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 80116f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80116fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80116fc:	e005      	b.n	801170a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80116fe:	4b12      	ldr	r3, [pc, #72]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 8011700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011702:	4a11      	ldr	r2, [pc, #68]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 8011704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011708:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801170a:	4b0f      	ldr	r3, [pc, #60]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4a0e      	ldr	r2, [pc, #56]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 8011710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011716:	f7f4 fb83 	bl	8005e20 <HAL_GetTick>
 801171a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801171c:	e008      	b.n	8011730 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801171e:	f7f4 fb7f 	bl	8005e20 <HAL_GetTick>
 8011722:	4602      	mov	r2, r0
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	2b02      	cmp	r3, #2
 801172a:	d901      	bls.n	8011730 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801172c:	2303      	movs	r3, #3
 801172e:	e006      	b.n	801173e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011730:	4b05      	ldr	r3, [pc, #20]	; (8011748 <RCCEx_PLL2_Config+0x15c>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011738:	2b00      	cmp	r3, #0
 801173a:	d0f0      	beq.n	801171e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801173c:	7bfb      	ldrb	r3, [r7, #15]
}
 801173e:	4618      	mov	r0, r3
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	58024400 	.word	0x58024400
 801174c:	ffff0007 	.word	0xffff0007

08011750 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801175a:	2300      	movs	r3, #0
 801175c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801175e:	4b53      	ldr	r3, [pc, #332]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011762:	f003 0303 	and.w	r3, r3, #3
 8011766:	2b03      	cmp	r3, #3
 8011768:	d101      	bne.n	801176e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801176a:	2301      	movs	r3, #1
 801176c:	e099      	b.n	80118a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801176e:	4b4f      	ldr	r3, [pc, #316]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	4a4e      	ldr	r2, [pc, #312]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801177a:	f7f4 fb51 	bl	8005e20 <HAL_GetTick>
 801177e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011780:	e008      	b.n	8011794 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011782:	f7f4 fb4d 	bl	8005e20 <HAL_GetTick>
 8011786:	4602      	mov	r2, r0
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	2b02      	cmp	r3, #2
 801178e:	d901      	bls.n	8011794 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011790:	2303      	movs	r3, #3
 8011792:	e086      	b.n	80118a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011794:	4b45      	ldr	r3, [pc, #276]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801179c:	2b00      	cmp	r3, #0
 801179e:	d1f0      	bne.n	8011782 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80117a0:	4b42      	ldr	r3, [pc, #264]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 80117a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	051b      	lsls	r3, r3, #20
 80117ae:	493f      	ldr	r1, [pc, #252]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 80117b0:	4313      	orrs	r3, r2
 80117b2:	628b      	str	r3, [r1, #40]	; 0x28
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	685b      	ldr	r3, [r3, #4]
 80117b8:	3b01      	subs	r3, #1
 80117ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	3b01      	subs	r3, #1
 80117c4:	025b      	lsls	r3, r3, #9
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	431a      	orrs	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	68db      	ldr	r3, [r3, #12]
 80117ce:	3b01      	subs	r3, #1
 80117d0:	041b      	lsls	r3, r3, #16
 80117d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80117d6:	431a      	orrs	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	691b      	ldr	r3, [r3, #16]
 80117dc:	3b01      	subs	r3, #1
 80117de:	061b      	lsls	r3, r3, #24
 80117e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80117e4:	4931      	ldr	r1, [pc, #196]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 80117e6:	4313      	orrs	r3, r2
 80117e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80117ea:	4b30      	ldr	r3, [pc, #192]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 80117ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	695b      	ldr	r3, [r3, #20]
 80117f6:	492d      	ldr	r1, [pc, #180]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 80117f8:	4313      	orrs	r3, r2
 80117fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80117fc:	4b2b      	ldr	r3, [pc, #172]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 80117fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011800:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	699b      	ldr	r3, [r3, #24]
 8011808:	4928      	ldr	r1, [pc, #160]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 801180a:	4313      	orrs	r3, r2
 801180c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801180e:	4b27      	ldr	r3, [pc, #156]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011812:	4a26      	ldr	r2, [pc, #152]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801181a:	4b24      	ldr	r3, [pc, #144]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 801181c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801181e:	4b24      	ldr	r3, [pc, #144]	; (80118b0 <RCCEx_PLL3_Config+0x160>)
 8011820:	4013      	ands	r3, r2
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	69d2      	ldr	r2, [r2, #28]
 8011826:	00d2      	lsls	r2, r2, #3
 8011828:	4920      	ldr	r1, [pc, #128]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 801182a:	4313      	orrs	r3, r2
 801182c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801182e:	4b1f      	ldr	r3, [pc, #124]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011832:	4a1e      	ldr	r2, [pc, #120]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d106      	bne.n	801184e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011840:	4b1a      	ldr	r3, [pc, #104]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011844:	4a19      	ldr	r2, [pc, #100]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801184a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801184c:	e00f      	b.n	801186e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d106      	bne.n	8011862 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011854:	4b15      	ldr	r3, [pc, #84]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011858:	4a14      	ldr	r2, [pc, #80]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 801185a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801185e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011860:	e005      	b.n	801186e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011862:	4b12      	ldr	r3, [pc, #72]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011866:	4a11      	ldr	r2, [pc, #68]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801186c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801186e:	4b0f      	ldr	r3, [pc, #60]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	4a0e      	ldr	r2, [pc, #56]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801187a:	f7f4 fad1 	bl	8005e20 <HAL_GetTick>
 801187e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011880:	e008      	b.n	8011894 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011882:	f7f4 facd 	bl	8005e20 <HAL_GetTick>
 8011886:	4602      	mov	r2, r0
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	2b02      	cmp	r3, #2
 801188e:	d901      	bls.n	8011894 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011890:	2303      	movs	r3, #3
 8011892:	e006      	b.n	80118a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011894:	4b05      	ldr	r3, [pc, #20]	; (80118ac <RCCEx_PLL3_Config+0x15c>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801189c:	2b00      	cmp	r3, #0
 801189e:	d0f0      	beq.n	8011882 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80118a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3710      	adds	r7, #16
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	58024400 	.word	0x58024400
 80118b0:	ffff0007 	.word	0xffff0007

080118b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80118bc:	2301      	movs	r3, #1
 80118be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d071      	beq.n	80119aa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80118cc:	b2db      	uxtb	r3, r3
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d106      	bne.n	80118e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2200      	movs	r2, #0
 80118d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f7f2 fafc 	bl	8003ed8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2202      	movs	r2, #2
 80118e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	f003 0310 	and.w	r3, r3, #16
 80118f2:	2b10      	cmp	r3, #16
 80118f4:	d050      	beq.n	8011998 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	22ca      	movs	r2, #202	; 0xca
 80118fc:	625a      	str	r2, [r3, #36]	; 0x24
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2253      	movs	r2, #83	; 0x53
 8011904:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 fa4a 	bl	8011da0 <RTC_EnterInitMode>
 801190c:	4603      	mov	r3, r0
 801190e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011910:	7bfb      	ldrb	r3, [r7, #15]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d124      	bne.n	8011960 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	6899      	ldr	r1, [r3, #8]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	4b24      	ldr	r3, [pc, #144]	; (80119b4 <HAL_RTC_Init+0x100>)
 8011922:	400b      	ands	r3, r1
 8011924:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	6899      	ldr	r1, [r3, #8]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	685a      	ldr	r2, [r3, #4]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	691b      	ldr	r3, [r3, #16]
 8011934:	431a      	orrs	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	699b      	ldr	r3, [r3, #24]
 801193a:	431a      	orrs	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	430a      	orrs	r2, r1
 8011942:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	689b      	ldr	r3, [r3, #8]
 8011948:	0419      	lsls	r1, r3, #16
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	68da      	ldr	r2, [r3, #12]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	430a      	orrs	r2, r1
 8011954:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f000 fa56 	bl	8011e08 <RTC_ExitInitMode>
 801195c:	4603      	mov	r3, r0
 801195e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011960:	7bfb      	ldrb	r3, [r7, #15]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d113      	bne.n	801198e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f022 0203 	bic.w	r2, r2, #3
 8011974:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	69da      	ldr	r2, [r3, #28]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	695b      	ldr	r3, [r3, #20]
 8011984:	431a      	orrs	r2, r3
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	430a      	orrs	r2, r1
 801198c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	22ff      	movs	r2, #255	; 0xff
 8011994:	625a      	str	r2, [r3, #36]	; 0x24
 8011996:	e001      	b.n	801199c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011998:	2300      	movs	r3, #0
 801199a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801199c:	7bfb      	ldrb	r3, [r7, #15]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d103      	bne.n	80119aa <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2201      	movs	r2, #1
 80119a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80119aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3710      	adds	r7, #16
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	ff8fffbf 	.word	0xff8fffbf

080119b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80119b8:	b590      	push	{r4, r7, lr}
 80119ba:	b087      	sub	sp, #28
 80119bc:	af00      	add	r7, sp, #0
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	60b9      	str	r1, [r7, #8]
 80119c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d101      	bne.n	80119d2 <HAL_RTC_SetTime+0x1a>
 80119ce:	2302      	movs	r3, #2
 80119d0:	e089      	b.n	8011ae6 <HAL_RTC_SetTime+0x12e>
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	2201      	movs	r2, #1
 80119d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2202      	movs	r2, #2
 80119de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	22ca      	movs	r2, #202	; 0xca
 80119e8:	625a      	str	r2, [r3, #36]	; 0x24
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2253      	movs	r2, #83	; 0x53
 80119f0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80119f2:	68f8      	ldr	r0, [r7, #12]
 80119f4:	f000 f9d4 	bl	8011da0 <RTC_EnterInitMode>
 80119f8:	4603      	mov	r3, r0
 80119fa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80119fc:	7cfb      	ldrb	r3, [r7, #19]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d161      	bne.n	8011ac6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d126      	bne.n	8011a56 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	689b      	ldr	r3, [r3, #8]
 8011a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d102      	bne.n	8011a1c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	4618      	mov	r0, r3
 8011a22:	f000 fa2f 	bl	8011e84 <RTC_ByteToBcd2>
 8011a26:	4603      	mov	r3, r0
 8011a28:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	785b      	ldrb	r3, [r3, #1]
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f000 fa28 	bl	8011e84 <RTC_ByteToBcd2>
 8011a34:	4603      	mov	r3, r0
 8011a36:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a38:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	789b      	ldrb	r3, [r3, #2]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f000 fa20 	bl	8011e84 <RTC_ByteToBcd2>
 8011a44:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011a46:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	78db      	ldrb	r3, [r3, #3]
 8011a4e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a50:	4313      	orrs	r3, r2
 8011a52:	617b      	str	r3, [r7, #20]
 8011a54:	e018      	b.n	8011a88 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	689b      	ldr	r3, [r3, #8]
 8011a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d102      	bne.n	8011a6a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	2200      	movs	r2, #0
 8011a68:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	785b      	ldrb	r3, [r3, #1]
 8011a74:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a76:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011a7c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	78db      	ldrb	r3, [r3, #3]
 8011a82:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a84:	4313      	orrs	r3, r2
 8011a86:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	6979      	ldr	r1, [r7, #20]
 8011a8e:	4b18      	ldr	r3, [pc, #96]	; (8011af0 <HAL_RTC_SetTime+0x138>)
 8011a90:	400b      	ands	r3, r1
 8011a92:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	689a      	ldr	r2, [r3, #8]
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011aa2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	6899      	ldr	r1, [r3, #8]
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	68da      	ldr	r2, [r3, #12]
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	691b      	ldr	r3, [r3, #16]
 8011ab2:	431a      	orrs	r2, r3
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	430a      	orrs	r2, r1
 8011aba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011abc:	68f8      	ldr	r0, [r7, #12]
 8011abe:	f000 f9a3 	bl	8011e08 <RTC_ExitInitMode>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	22ff      	movs	r2, #255	; 0xff
 8011acc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011ace:	7cfb      	ldrb	r3, [r7, #19]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d103      	bne.n	8011adc <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011ae4:	7cfb      	ldrb	r3, [r7, #19]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	371c      	adds	r7, #28
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd90      	pop	{r4, r7, pc}
 8011aee:	bf00      	nop
 8011af0:	007f7f7f 	.word	0x007f7f7f

08011af4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b086      	sub	sp, #24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	60f8      	str	r0, [r7, #12]
 8011afc:	60b9      	str	r1, [r7, #8]
 8011afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	691b      	ldr	r3, [r3, #16]
 8011b10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	4b22      	ldr	r3, [pc, #136]	; (8011ba8 <HAL_RTC_GetTime+0xb4>)
 8011b20:	4013      	ands	r3, r2
 8011b22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	0c1b      	lsrs	r3, r3, #16
 8011b28:	b2db      	uxtb	r3, r3
 8011b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b2e:	b2da      	uxtb	r2, r3
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	0a1b      	lsrs	r3, r3, #8
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b4c:	b2da      	uxtb	r2, r3
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	0d9b      	lsrs	r3, r3, #22
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	f003 0301 	and.w	r3, r3, #1
 8011b5c:	b2da      	uxtb	r2, r3
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d11a      	bne.n	8011b9e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f000 f9a9 	bl	8011ec4 <RTC_Bcd2ToByte>
 8011b72:	4603      	mov	r3, r0
 8011b74:	461a      	mov	r2, r3
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	785b      	ldrb	r3, [r3, #1]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f000 f9a0 	bl	8011ec4 <RTC_Bcd2ToByte>
 8011b84:	4603      	mov	r3, r0
 8011b86:	461a      	mov	r2, r3
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	789b      	ldrb	r3, [r3, #2]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 f997 	bl	8011ec4 <RTC_Bcd2ToByte>
 8011b96:	4603      	mov	r3, r0
 8011b98:	461a      	mov	r2, r3
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011b9e:	2300      	movs	r3, #0
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3718      	adds	r7, #24
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	007f7f7f 	.word	0x007f7f7f

08011bac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011bac:	b590      	push	{r4, r7, lr}
 8011bae:	b087      	sub	sp, #28
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	60b9      	str	r1, [r7, #8]
 8011bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011bbe:	2b01      	cmp	r3, #1
 8011bc0:	d101      	bne.n	8011bc6 <HAL_RTC_SetDate+0x1a>
 8011bc2:	2302      	movs	r3, #2
 8011bc4:	e073      	b.n	8011cae <HAL_RTC_SetDate+0x102>
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	2201      	movs	r2, #1
 8011bca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2202      	movs	r2, #2
 8011bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d10e      	bne.n	8011bfa <HAL_RTC_SetDate+0x4e>
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	785b      	ldrb	r3, [r3, #1]
 8011be0:	f003 0310 	and.w	r3, r3, #16
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d008      	beq.n	8011bfa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	785b      	ldrb	r3, [r3, #1]
 8011bec:	f023 0310 	bic.w	r3, r3, #16
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	330a      	adds	r3, #10
 8011bf4:	b2da      	uxtb	r2, r3
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d11c      	bne.n	8011c3a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	78db      	ldrb	r3, [r3, #3]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f000 f93d 	bl	8011e84 <RTC_ByteToBcd2>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	785b      	ldrb	r3, [r3, #1]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f000 f936 	bl	8011e84 <RTC_ByteToBcd2>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011c1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	789b      	ldrb	r3, [r3, #2]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f000 f92e 	bl	8011e84 <RTC_ByteToBcd2>
 8011c28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011c2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011c34:	4313      	orrs	r3, r2
 8011c36:	617b      	str	r3, [r7, #20]
 8011c38:	e00e      	b.n	8011c58 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	78db      	ldrb	r3, [r3, #3]
 8011c3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	785b      	ldrb	r3, [r3, #1]
 8011c44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011c46:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011c48:	68ba      	ldr	r2, [r7, #8]
 8011c4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011c4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011c54:	4313      	orrs	r3, r2
 8011c56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	22ca      	movs	r2, #202	; 0xca
 8011c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	2253      	movs	r2, #83	; 0x53
 8011c66:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f000 f899 	bl	8011da0 <RTC_EnterInitMode>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011c72:	7cfb      	ldrb	r3, [r7, #19]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d10a      	bne.n	8011c8e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	6979      	ldr	r1, [r7, #20]
 8011c7e:	4b0e      	ldr	r3, [pc, #56]	; (8011cb8 <HAL_RTC_SetDate+0x10c>)
 8011c80:	400b      	ands	r3, r1
 8011c82:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f000 f8bf 	bl	8011e08 <RTC_ExitInitMode>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	22ff      	movs	r2, #255	; 0xff
 8011c94:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011c96:	7cfb      	ldrb	r3, [r7, #19]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d103      	bne.n	8011ca4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011cac:	7cfb      	ldrb	r3, [r7, #19]


}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	371c      	adds	r7, #28
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd90      	pop	{r4, r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	00ffff3f 	.word	0x00ffff3f

08011cbc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b086      	sub	sp, #24
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	60b9      	str	r1, [r7, #8]
 8011cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	685a      	ldr	r2, [r3, #4]
 8011cce:	4b21      	ldr	r3, [pc, #132]	; (8011d54 <HAL_RTC_GetDate+0x98>)
 8011cd0:	4013      	ands	r3, r2
 8011cd2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	0c1b      	lsrs	r3, r3, #16
 8011cd8:	b2da      	uxtb	r2, r3
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	0a1b      	lsrs	r3, r3, #8
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	f003 031f 	and.w	r3, r3, #31
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	b2db      	uxtb	r3, r3
 8011cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	0b5b      	lsrs	r3, r3, #13
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	f003 0307 	and.w	r3, r3, #7
 8011d06:	b2da      	uxtb	r2, r3
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d11a      	bne.n	8011d48 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	78db      	ldrb	r3, [r3, #3]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f000 f8d4 	bl	8011ec4 <RTC_Bcd2ToByte>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	461a      	mov	r2, r3
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	785b      	ldrb	r3, [r3, #1]
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f000 f8cb 	bl	8011ec4 <RTC_Bcd2ToByte>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	461a      	mov	r2, r3
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	789b      	ldrb	r3, [r3, #2]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f000 f8c2 	bl	8011ec4 <RTC_Bcd2ToByte>
 8011d40:	4603      	mov	r3, r0
 8011d42:	461a      	mov	r2, r3
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011d48:	2300      	movs	r3, #0
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3718      	adds	r7, #24
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	00ffff3f 	.word	0x00ffff3f

08011d58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	4a0d      	ldr	r2, [pc, #52]	; (8011d9c <HAL_RTC_WaitForSynchro+0x44>)
 8011d66:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011d68:	f7f4 f85a 	bl	8005e20 <HAL_GetTick>
 8011d6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011d6e:	e009      	b.n	8011d84 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011d70:	f7f4 f856 	bl	8005e20 <HAL_GetTick>
 8011d74:	4602      	mov	r2, r0
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	1ad3      	subs	r3, r2, r3
 8011d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011d7e:	d901      	bls.n	8011d84 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011d80:	2303      	movs	r3, #3
 8011d82:	e007      	b.n	8011d94 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	f003 0320 	and.w	r3, r3, #32
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d0ee      	beq.n	8011d70 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011d92:	2300      	movs	r3, #0
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3710      	adds	r7, #16
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	0003ff5f 	.word	0x0003ff5f

08011da0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011da8:	2300      	movs	r3, #0
 8011daa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d120      	bne.n	8011dfc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011dc2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011dc4:	f7f4 f82c 	bl	8005e20 <HAL_GetTick>
 8011dc8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011dca:	e00d      	b.n	8011de8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011dcc:	f7f4 f828 	bl	8005e20 <HAL_GetTick>
 8011dd0:	4602      	mov	r2, r0
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	1ad3      	subs	r3, r2, r3
 8011dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011dda:	d905      	bls.n	8011de8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011ddc:	2303      	movs	r3, #3
 8011dde:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2203      	movs	r2, #3
 8011de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d102      	bne.n	8011dfc <RTC_EnterInitMode+0x5c>
 8011df6:	7bfb      	ldrb	r3, [r7, #15]
 8011df8:	2b03      	cmp	r3, #3
 8011dfa:	d1e7      	bne.n	8011dcc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3710      	adds	r7, #16
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
	...

08011e08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011e10:	2300      	movs	r3, #0
 8011e12:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011e14:	4b1a      	ldr	r3, [pc, #104]	; (8011e80 <RTC_ExitInitMode+0x78>)
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	4a19      	ldr	r2, [pc, #100]	; (8011e80 <RTC_ExitInitMode+0x78>)
 8011e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e1e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011e20:	4b17      	ldr	r3, [pc, #92]	; (8011e80 <RTC_ExitInitMode+0x78>)
 8011e22:	689b      	ldr	r3, [r3, #8]
 8011e24:	f003 0320 	and.w	r3, r3, #32
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d10c      	bne.n	8011e46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f7ff ff93 	bl	8011d58 <HAL_RTC_WaitForSynchro>
 8011e32:	4603      	mov	r3, r0
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d01e      	beq.n	8011e76 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2203      	movs	r2, #3
 8011e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011e40:	2303      	movs	r3, #3
 8011e42:	73fb      	strb	r3, [r7, #15]
 8011e44:	e017      	b.n	8011e76 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011e46:	4b0e      	ldr	r3, [pc, #56]	; (8011e80 <RTC_ExitInitMode+0x78>)
 8011e48:	689b      	ldr	r3, [r3, #8]
 8011e4a:	4a0d      	ldr	r2, [pc, #52]	; (8011e80 <RTC_ExitInitMode+0x78>)
 8011e4c:	f023 0320 	bic.w	r3, r3, #32
 8011e50:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f7ff ff80 	bl	8011d58 <HAL_RTC_WaitForSynchro>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d005      	beq.n	8011e6a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2203      	movs	r2, #3
 8011e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011e66:	2303      	movs	r3, #3
 8011e68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011e6a:	4b05      	ldr	r3, [pc, #20]	; (8011e80 <RTC_ExitInitMode+0x78>)
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	4a04      	ldr	r2, [pc, #16]	; (8011e80 <RTC_ExitInitMode+0x78>)
 8011e70:	f043 0320 	orr.w	r3, r3, #32
 8011e74:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3710      	adds	r7, #16
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	58004000 	.word	0x58004000

08011e84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011e92:	79fb      	ldrb	r3, [r7, #7]
 8011e94:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011e96:	e005      	b.n	8011ea4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011e9e:	7afb      	ldrb	r3, [r7, #11]
 8011ea0:	3b0a      	subs	r3, #10
 8011ea2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011ea4:	7afb      	ldrb	r3, [r7, #11]
 8011ea6:	2b09      	cmp	r3, #9
 8011ea8:	d8f6      	bhi.n	8011e98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	011b      	lsls	r3, r3, #4
 8011eb0:	b2da      	uxtb	r2, r3
 8011eb2:	7afb      	ldrb	r3, [r7, #11]
 8011eb4:	4313      	orrs	r3, r2
 8011eb6:	b2db      	uxtb	r3, r3
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3714      	adds	r7, #20
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011ece:	79fb      	ldrb	r3, [r7, #7]
 8011ed0:	091b      	lsrs	r3, r3, #4
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	0092      	lsls	r2, r2, #2
 8011ed8:	4413      	add	r3, r2
 8011eda:	005b      	lsls	r3, r3, #1
 8011edc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011ede:	79fb      	ldrb	r3, [r7, #7]
 8011ee0:	f003 030f 	and.w	r3, r3, #15
 8011ee4:	b2da      	uxtb	r2, r3
 8011ee6:	7bfb      	ldrb	r3, [r7, #15]
 8011ee8:	4413      	add	r3, r2
 8011eea:	b2db      	uxtb	r3, r3
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3714      	adds	r7, #20
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr

08011ef8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d101      	bne.n	8011f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011f06:	2301      	movs	r3, #1
 8011f08:	e10f      	b.n	801212a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4a87      	ldr	r2, [pc, #540]	; (8012134 <HAL_SPI_Init+0x23c>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d00f      	beq.n	8011f3a <HAL_SPI_Init+0x42>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	4a86      	ldr	r2, [pc, #536]	; (8012138 <HAL_SPI_Init+0x240>)
 8011f20:	4293      	cmp	r3, r2
 8011f22:	d00a      	beq.n	8011f3a <HAL_SPI_Init+0x42>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	4a84      	ldr	r2, [pc, #528]	; (801213c <HAL_SPI_Init+0x244>)
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	d005      	beq.n	8011f3a <HAL_SPI_Init+0x42>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	2b0f      	cmp	r3, #15
 8011f34:	d901      	bls.n	8011f3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011f36:	2301      	movs	r3, #1
 8011f38:	e0f7      	b.n	801212a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 fd60 	bl	8012a00 <SPI_GetPacketSize>
 8011f40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	4a7b      	ldr	r2, [pc, #492]	; (8012134 <HAL_SPI_Init+0x23c>)
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	d00c      	beq.n	8011f66 <HAL_SPI_Init+0x6e>
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4a79      	ldr	r2, [pc, #484]	; (8012138 <HAL_SPI_Init+0x240>)
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d007      	beq.n	8011f66 <HAL_SPI_Init+0x6e>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4a78      	ldr	r2, [pc, #480]	; (801213c <HAL_SPI_Init+0x244>)
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	d002      	beq.n	8011f66 <HAL_SPI_Init+0x6e>
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2b08      	cmp	r3, #8
 8011f64:	d811      	bhi.n	8011f8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011f6a:	4a72      	ldr	r2, [pc, #456]	; (8012134 <HAL_SPI_Init+0x23c>)
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	d009      	beq.n	8011f84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	4a70      	ldr	r2, [pc, #448]	; (8012138 <HAL_SPI_Init+0x240>)
 8011f76:	4293      	cmp	r3, r2
 8011f78:	d004      	beq.n	8011f84 <HAL_SPI_Init+0x8c>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	4a6f      	ldr	r2, [pc, #444]	; (801213c <HAL_SPI_Init+0x244>)
 8011f80:	4293      	cmp	r3, r2
 8011f82:	d104      	bne.n	8011f8e <HAL_SPI_Init+0x96>
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	2b10      	cmp	r3, #16
 8011f88:	d901      	bls.n	8011f8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e0cd      	b.n	801212a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7f2 fa1c 	bl	80043e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2202      	movs	r2, #2
 8011fac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	681a      	ldr	r2, [r3, #0]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	f022 0201 	bic.w	r2, r2, #1
 8011fbe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	689b      	ldr	r3, [r3, #8]
 8011fc6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011fca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	699b      	ldr	r3, [r3, #24]
 8011fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011fd4:	d119      	bne.n	801200a <HAL_SPI_Init+0x112>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011fde:	d103      	bne.n	8011fe8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d008      	beq.n	8011ffa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d10c      	bne.n	801200a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011ff8:	d107      	bne.n	801200a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012008:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00f      	beq.n	8012036 <HAL_SPI_Init+0x13e>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	2b06      	cmp	r3, #6
 801201c:	d90b      	bls.n	8012036 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	430a      	orrs	r2, r1
 8012032:	601a      	str	r2, [r3, #0]
 8012034:	e007      	b.n	8012046 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	681a      	ldr	r2, [r3, #0]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012044:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	69da      	ldr	r2, [r3, #28]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204e:	431a      	orrs	r2, r3
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	431a      	orrs	r2, r3
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012058:	ea42 0103 	orr.w	r1, r2, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	68da      	ldr	r2, [r3, #12]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	430a      	orrs	r2, r1
 8012066:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012070:	431a      	orrs	r2, r3
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012076:	431a      	orrs	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	699b      	ldr	r3, [r3, #24]
 801207c:	431a      	orrs	r2, r3
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	691b      	ldr	r3, [r3, #16]
 8012082:	431a      	orrs	r2, r3
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	695b      	ldr	r3, [r3, #20]
 8012088:	431a      	orrs	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6a1b      	ldr	r3, [r3, #32]
 801208e:	431a      	orrs	r2, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	685b      	ldr	r3, [r3, #4]
 8012094:	431a      	orrs	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801209a:	431a      	orrs	r2, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	431a      	orrs	r2, r3
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80120a6:	ea42 0103 	orr.w	r1, r2, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	430a      	orrs	r2, r1
 80120b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d113      	bne.n	80120e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80120d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	689b      	ldr	r3, [r3, #8]
 80120d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80120e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f022 0201 	bic.w	r2, r2, #1
 80120f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d00a      	beq.n	8012118 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	68db      	ldr	r3, [r3, #12]
 8012108:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	430a      	orrs	r2, r1
 8012116:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2201      	movs	r2, #1
 8012124:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	3710      	adds	r7, #16
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	40013000 	.word	0x40013000
 8012138:	40003800 	.word	0x40003800
 801213c:	40003c00 	.word	0x40003c00

08012140 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b084      	sub	sp, #16
 8012144:	af00      	add	r7, sp, #0
 8012146:	60f8      	str	r0, [r7, #12]
 8012148:	60b9      	str	r1, [r7, #8]
 801214a:	4613      	mov	r3, r2
 801214c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012154:	b2db      	uxtb	r3, r3
 8012156:	2b01      	cmp	r3, #1
 8012158:	d005      	beq.n	8012166 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2200      	movs	r2, #0
 801215e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8012162:	2302      	movs	r3, #2
 8012164:	e127      	b.n	80123b6 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d002      	beq.n	8012172 <HAL_SPI_Receive_DMA+0x32>
 801216c:	88fb      	ldrh	r3, [r7, #6]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d105      	bne.n	801217e <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	2200      	movs	r2, #0
 8012176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 801217a:	2301      	movs	r3, #1
 801217c:	e11b      	b.n	80123b6 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012184:	2b01      	cmp	r3, #1
 8012186:	d101      	bne.n	801218c <HAL_SPI_Receive_DMA+0x4c>
 8012188:	2302      	movs	r3, #2
 801218a:	e114      	b.n	80123b6 <HAL_SPI_Receive_DMA+0x276>
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	2201      	movs	r2, #1
 8012190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	2204      	movs	r2, #4
 8012198:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2200      	movs	r2, #0
 80121a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	68ba      	ldr	r2, [r7, #8]
 80121a8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	88fa      	ldrh	r2, [r7, #6]
 80121ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	88fa      	ldrh	r2, [r7, #6]
 80121b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2200      	movs	r2, #0
 80121be:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	2200      	movs	r2, #0
 80121c4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2200      	movs	r2, #0
 80121ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	2200      	movs	r2, #0
 80121d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80121de:	d108      	bne.n	80121f2 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80121ee:	601a      	str	r2, [r3, #0]
 80121f0:	e009      	b.n	8012206 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	68db      	ldr	r3, [r3, #12]
 80121f8:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8012204:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	2b0f      	cmp	r3, #15
 801220c:	d905      	bls.n	801221a <HAL_SPI_Receive_DMA+0xda>
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012212:	699b      	ldr	r3, [r3, #24]
 8012214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012218:	d10f      	bne.n	801223a <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801221e:	2b07      	cmp	r3, #7
 8012220:	d911      	bls.n	8012246 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012226:	699b      	ldr	r3, [r3, #24]
 8012228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801222c:	d00b      	beq.n	8012246 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012232:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012238:	d005      	beq.n	8012246 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	2200      	movs	r2, #0
 801223e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8012242:	2301      	movs	r3, #1
 8012244:	e0b7      	b.n	80123b6 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	689a      	ldr	r2, [r3, #8]
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012254:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	2b07      	cmp	r3, #7
 801225c:	d820      	bhi.n	80122a0 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012262:	699b      	ldr	r3, [r3, #24]
 8012264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012268:	d109      	bne.n	801227e <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012270:	b29b      	uxth	r3, r3
 8012272:	3301      	adds	r3, #1
 8012274:	105b      	asrs	r3, r3, #1
 8012276:	b29a      	uxth	r2, r3
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012282:	699b      	ldr	r3, [r3, #24]
 8012284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012288:	d11e      	bne.n	80122c8 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012290:	b29b      	uxth	r3, r3
 8012292:	3303      	adds	r3, #3
 8012294:	109b      	asrs	r3, r3, #2
 8012296:	b29a      	uxth	r2, r3
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801229e:	e013      	b.n	80122c8 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	2b0f      	cmp	r3, #15
 80122a6:	d80f      	bhi.n	80122c8 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122ac:	699b      	ldr	r3, [r3, #24]
 80122ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80122b2:	d109      	bne.n	80122c8 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80122ba:	b29b      	uxth	r3, r3
 80122bc:	3301      	adds	r3, #1
 80122be:	105b      	asrs	r3, r3, #1
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122cc:	4a3c      	ldr	r2, [pc, #240]	; (80123c0 <HAL_SPI_Receive_DMA+0x280>)
 80122ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122d4:	4a3b      	ldr	r2, [pc, #236]	; (80123c4 <HAL_SPI_Receive_DMA+0x284>)
 80122d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122dc:	4a3a      	ldr	r2, [pc, #232]	; (80123c8 <HAL_SPI_Receive_DMA+0x288>)
 80122de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122e4:	2200      	movs	r2, #0
 80122e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	3330      	adds	r3, #48	; 0x30
 80122f2:	4619      	mov	r1, r3
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122f8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012300:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8012302:	f7f6 fa11 	bl	8008728 <HAL_DMA_Start_IT>
 8012306:	4603      	mov	r3, r0
 8012308:	2b00      	cmp	r3, #0
 801230a:	d011      	beq.n	8012330 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012312:	f043 0210 	orr.w	r2, r3, #16
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2201      	movs	r2, #1
 8012320:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2200      	movs	r2, #0
 8012328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 801232c:	2301      	movs	r3, #1
 801232e:	e042      	b.n	80123b6 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012334:	69db      	ldr	r3, [r3, #28]
 8012336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801233a:	d108      	bne.n	801234e <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	6859      	ldr	r1, [r3, #4]
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	681a      	ldr	r2, [r3, #0]
 8012346:	4b21      	ldr	r3, [pc, #132]	; (80123cc <HAL_SPI_Receive_DMA+0x28c>)
 8012348:	400b      	ands	r3, r1
 801234a:	6053      	str	r3, [r2, #4]
 801234c:	e009      	b.n	8012362 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	685a      	ldr	r2, [r3, #4]
 8012354:	4b1d      	ldr	r3, [pc, #116]	; (80123cc <HAL_SPI_Receive_DMA+0x28c>)
 8012356:	4013      	ands	r3, r2
 8012358:	88f9      	ldrh	r1, [r7, #6]
 801235a:	68fa      	ldr	r2, [r7, #12]
 801235c:	6812      	ldr	r2, [r2, #0]
 801235e:	430b      	orrs	r3, r1
 8012360:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	689a      	ldr	r2, [r3, #8]
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012370:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	691a      	ldr	r2, [r3, #16]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8012380:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	f042 0201 	orr.w	r2, r2, #1
 8012390:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801239a:	d107      	bne.n	80123ac <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80123aa:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2200      	movs	r2, #0
 80123b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80123b4:	2300      	movs	r3, #0
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3710      	adds	r7, #16
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	0801282b 	.word	0x0801282b
 80123c4:	080127e5 	.word	0x080127e5
 80123c8:	08012847 	.word	0x08012847
 80123cc:	ffff0000 	.word	0xffff0000

080123d0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08a      	sub	sp, #40	; 0x28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	691b      	ldr	r3, [r3, #16]
 80123de:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	695b      	ldr	r3, [r3, #20]
 80123e6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80123e8:	6a3a      	ldr	r2, [r7, #32]
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	4013      	ands	r3, r2
 80123ee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	689b      	ldr	r3, [r3, #8]
 80123f6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80123f8:	2300      	movs	r3, #0
 80123fa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012402:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	3330      	adds	r3, #48	; 0x30
 801240a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012412:	2b00      	cmp	r3, #0
 8012414:	d010      	beq.n	8012438 <HAL_SPI_IRQHandler+0x68>
 8012416:	6a3b      	ldr	r3, [r7, #32]
 8012418:	f003 0308 	and.w	r3, r3, #8
 801241c:	2b00      	cmp	r3, #0
 801241e:	d00b      	beq.n	8012438 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	699a      	ldr	r2, [r3, #24]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801242e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f000 f9cd 	bl	80127d0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8012436:	e192      	b.n	801275e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012438:	69bb      	ldr	r3, [r7, #24]
 801243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801243e:	2b00      	cmp	r3, #0
 8012440:	d113      	bne.n	801246a <HAL_SPI_IRQHandler+0x9a>
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	f003 0320 	and.w	r3, r3, #32
 8012448:	2b00      	cmp	r3, #0
 801244a:	d10e      	bne.n	801246a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012452:	2b00      	cmp	r3, #0
 8012454:	d009      	beq.n	801246a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	4798      	blx	r3
    handled = 1UL;
 8012466:	2301      	movs	r3, #1
 8012468:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012470:	2b00      	cmp	r3, #0
 8012472:	d10f      	bne.n	8012494 <HAL_SPI_IRQHandler+0xc4>
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	f003 0301 	and.w	r3, r3, #1
 801247a:	2b00      	cmp	r3, #0
 801247c:	d00a      	beq.n	8012494 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012484:	2b00      	cmp	r3, #0
 8012486:	d105      	bne.n	8012494 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	4798      	blx	r3
    handled = 1UL;
 8012490:	2301      	movs	r3, #1
 8012492:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012494:	69bb      	ldr	r3, [r7, #24]
 8012496:	f003 0320 	and.w	r3, r3, #32
 801249a:	2b00      	cmp	r3, #0
 801249c:	d10f      	bne.n	80124be <HAL_SPI_IRQHandler+0xee>
 801249e:	69bb      	ldr	r3, [r7, #24]
 80124a0:	f003 0302 	and.w	r3, r3, #2
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d00a      	beq.n	80124be <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80124a8:	69bb      	ldr	r3, [r7, #24]
 80124aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d105      	bne.n	80124be <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	4798      	blx	r3
    handled = 1UL;
 80124ba:	2301      	movs	r3, #1
 80124bc:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80124be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	f040 8147 	bne.w	8012754 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	f003 0308 	and.w	r3, r3, #8
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	f000 808b 	beq.w	80125e8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	699a      	ldr	r2, [r3, #24]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	f042 0208 	orr.w	r2, r2, #8
 80124e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	699a      	ldr	r2, [r3, #24]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f042 0210 	orr.w	r2, r2, #16
 80124f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	699a      	ldr	r2, [r3, #24]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012500:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	691a      	ldr	r2, [r3, #16]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f022 0208 	bic.w	r2, r2, #8
 8012510:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	689b      	ldr	r3, [r3, #8]
 8012518:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801251c:	2b00      	cmp	r3, #0
 801251e:	d13d      	bne.n	801259c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012520:	e036      	b.n	8012590 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	2b0f      	cmp	r3, #15
 8012528:	d90b      	bls.n	8012542 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012532:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012534:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801253a:	1d1a      	adds	r2, r3, #4
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	665a      	str	r2, [r3, #100]	; 0x64
 8012540:	e01d      	b.n	801257e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	2b07      	cmp	r3, #7
 8012548:	d90b      	bls.n	8012562 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	8812      	ldrh	r2, [r2, #0]
 8012552:	b292      	uxth	r2, r2
 8012554:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801255a:	1c9a      	adds	r2, r3, #2
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	665a      	str	r2, [r3, #100]	; 0x64
 8012560:	e00d      	b.n	801257e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801256e:	7812      	ldrb	r2, [r2, #0]
 8012570:	b2d2      	uxtb	r2, r2
 8012572:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012578:	1c5a      	adds	r2, r3, #1
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012584:	b29b      	uxth	r3, r3
 8012586:	3b01      	subs	r3, #1
 8012588:	b29a      	uxth	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012596:	b29b      	uxth	r3, r3
 8012598:	2b00      	cmp	r3, #0
 801259a:	d1c2      	bne.n	8012522 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 f98f 	bl	80128c0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2201      	movs	r2, #1
 80125a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d003      	beq.n	80125bc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 f901 	bl	80127bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80125ba:	e0d0      	b.n	801275e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80125bc:	7cfb      	ldrb	r3, [r7, #19]
 80125be:	2b05      	cmp	r3, #5
 80125c0:	d103      	bne.n	80125ca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 f8e6 	bl	8012794 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80125c8:	e0c6      	b.n	8012758 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80125ca:	7cfb      	ldrb	r3, [r7, #19]
 80125cc:	2b04      	cmp	r3, #4
 80125ce:	d103      	bne.n	80125d8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f000 f8d5 	bl	8012780 <HAL_SPI_RxCpltCallback>
    return;
 80125d6:	e0bf      	b.n	8012758 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80125d8:	7cfb      	ldrb	r3, [r7, #19]
 80125da:	2b03      	cmp	r3, #3
 80125dc:	f040 80bc 	bne.w	8012758 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f000 f8c3 	bl	801276c <HAL_SPI_TxCpltCallback>
    return;
 80125e6:	e0b7      	b.n	8012758 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	f000 80b5 	beq.w	801275e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80125f4:	69bb      	ldr	r3, [r7, #24]
 80125f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d00f      	beq.n	801261e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012604:	f043 0204 	orr.w	r2, r3, #4
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	699a      	ldr	r2, [r3, #24]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801261c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801261e:	69bb      	ldr	r3, [r7, #24]
 8012620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00f      	beq.n	8012648 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801262e:	f043 0201 	orr.w	r2, r3, #1
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	699a      	ldr	r2, [r3, #24]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012646:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801264e:	2b00      	cmp	r3, #0
 8012650:	d00f      	beq.n	8012672 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012658:	f043 0208 	orr.w	r2, r3, #8
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	699a      	ldr	r2, [r3, #24]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012670:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	f003 0320 	and.w	r3, r3, #32
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00f      	beq.n	801269c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012682:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	699a      	ldr	r2, [r3, #24]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	f042 0220 	orr.w	r2, r2, #32
 801269a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d05a      	beq.n	801275c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f022 0201 	bic.w	r2, r2, #1
 80126b4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	6919      	ldr	r1, [r3, #16]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681a      	ldr	r2, [r3, #0]
 80126c0:	4b28      	ldr	r3, [pc, #160]	; (8012764 <HAL_SPI_IRQHandler+0x394>)
 80126c2:	400b      	ands	r3, r1
 80126c4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80126cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80126d0:	d138      	bne.n	8012744 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	689a      	ldr	r2, [r3, #8]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80126e0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d013      	beq.n	8012712 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126ee:	4a1e      	ldr	r2, [pc, #120]	; (8012768 <HAL_SPI_IRQHandler+0x398>)
 80126f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7f6 fd9e 	bl	8009238 <HAL_DMA_Abort_IT>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d007      	beq.n	8012712 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012708:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012716:	2b00      	cmp	r3, #0
 8012718:	d020      	beq.n	801275c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801271e:	4a12      	ldr	r2, [pc, #72]	; (8012768 <HAL_SPI_IRQHandler+0x398>)
 8012720:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012726:	4618      	mov	r0, r3
 8012728:	f7f6 fd86 	bl	8009238 <HAL_DMA_Abort_IT>
 801272c:	4603      	mov	r3, r0
 801272e:	2b00      	cmp	r3, #0
 8012730:	d014      	beq.n	801275c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012738:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012742:	e00b      	b.n	801275c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2201      	movs	r2, #1
 8012748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 f835 	bl	80127bc <HAL_SPI_ErrorCallback>
    return;
 8012752:	e003      	b.n	801275c <HAL_SPI_IRQHandler+0x38c>
    return;
 8012754:	bf00      	nop
 8012756:	e002      	b.n	801275e <HAL_SPI_IRQHandler+0x38e>
    return;
 8012758:	bf00      	nop
 801275a:	e000      	b.n	801275e <HAL_SPI_IRQHandler+0x38e>
    return;
 801275c:	bf00      	nop
  }
}
 801275e:	3728      	adds	r7, #40	; 0x28
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	fffffc94 	.word	0xfffffc94
 8012768:	0801288d 	.word	0x0801288d

0801276c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012774:	bf00      	nop
 8012776:	370c      	adds	r7, #12
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr

08012780 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012780:	b480      	push	{r7}
 8012782:	b083      	sub	sp, #12
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012788:	bf00      	nop
 801278a:	370c      	adds	r7, #12
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr

08012794 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801279c:	bf00      	nop
 801279e:	370c      	adds	r7, #12
 80127a0:	46bd      	mov	sp, r7
 80127a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a6:	4770      	bx	lr

080127a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80127a8:	b480      	push	{r7}
 80127aa:	b083      	sub	sp, #12
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80127b0:	bf00      	nop
 80127b2:	370c      	adds	r7, #12
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr

080127bc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80127c4:	bf00      	nop
 80127c6:	370c      	adds	r7, #12
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr

080127d0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80127d8:	bf00      	nop
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127f0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	2b07      	cmp	r3, #7
 80127fc:	d011      	beq.n	8012822 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012802:	69db      	ldr	r3, [r3, #28]
 8012804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012808:	d103      	bne.n	8012812 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801280a:	68f8      	ldr	r0, [r7, #12]
 801280c:	f7ff ffb8 	bl	8012780 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012810:	e007      	b.n	8012822 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	691a      	ldr	r2, [r3, #16]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f042 0208 	orr.w	r2, r2, #8
 8012820:	611a      	str	r2, [r3, #16]
}
 8012822:	bf00      	nop
 8012824:	3710      	adds	r7, #16
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b084      	sub	sp, #16
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012836:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012838:	68f8      	ldr	r0, [r7, #12]
 801283a:	f7ff ffb5 	bl	80127a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801283e:	bf00      	nop
 8012840:	3710      	adds	r7, #16
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b084      	sub	sp, #16
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012852:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f7f7 fe6d 	bl	800a534 <HAL_DMA_GetError>
 801285a:	4603      	mov	r3, r0
 801285c:	2b02      	cmp	r3, #2
 801285e:	d011      	beq.n	8012884 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012860:	68f8      	ldr	r0, [r7, #12]
 8012862:	f000 f82d 	bl	80128c0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801286c:	f043 0210 	orr.w	r2, r3, #16
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	2201      	movs	r2, #1
 801287a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801287e:	68f8      	ldr	r0, [r7, #12]
 8012880:	f7ff ff9c 	bl	80127bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012884:	bf00      	nop
 8012886:	3710      	adds	r7, #16
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}

0801288c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b084      	sub	sp, #16
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012898:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2200      	movs	r2, #0
 801289e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	2200      	movs	r2, #0
 80128a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2201      	movs	r2, #1
 80128ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80128b2:	68f8      	ldr	r0, [r7, #12]
 80128b4:	f7ff ff82 	bl	80127bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80128b8:	bf00      	nop
 80128ba:	3710      	adds	r7, #16
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}

080128c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	695b      	ldr	r3, [r3, #20]
 80128ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	699a      	ldr	r2, [r3, #24]
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f042 0208 	orr.w	r2, r2, #8
 80128de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	699a      	ldr	r2, [r3, #24]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f042 0210 	orr.w	r2, r2, #16
 80128ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	f022 0201 	bic.w	r2, r2, #1
 80128fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	6919      	ldr	r1, [r3, #16]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	4b3c      	ldr	r3, [pc, #240]	; (80129fc <SPI_CloseTransfer+0x13c>)
 801290c:	400b      	ands	r3, r1
 801290e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	689a      	ldr	r2, [r3, #8]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801291e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012926:	b2db      	uxtb	r3, r3
 8012928:	2b04      	cmp	r3, #4
 801292a:	d014      	beq.n	8012956 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	f003 0320 	and.w	r3, r3, #32
 8012932:	2b00      	cmp	r3, #0
 8012934:	d00f      	beq.n	8012956 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801293c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	699a      	ldr	r2, [r3, #24]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	f042 0220 	orr.w	r2, r2, #32
 8012954:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801295c:	b2db      	uxtb	r3, r3
 801295e:	2b03      	cmp	r3, #3
 8012960:	d014      	beq.n	801298c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012968:	2b00      	cmp	r3, #0
 801296a:	d00f      	beq.n	801298c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012972:	f043 0204 	orr.w	r2, r3, #4
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	699a      	ldr	r2, [r3, #24]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801298a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012992:	2b00      	cmp	r3, #0
 8012994:	d00f      	beq.n	80129b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801299c:	f043 0201 	orr.w	r2, r3, #1
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	699a      	ldr	r2, [r3, #24]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80129b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d00f      	beq.n	80129e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129c6:	f043 0208 	orr.w	r2, r3, #8
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	699a      	ldr	r2, [r3, #24]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80129de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2200      	movs	r2, #0
 80129e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2200      	movs	r2, #0
 80129ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80129f0:	bf00      	nop
 80129f2:	3714      	adds	r7, #20
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr
 80129fc:	fffffc90 	.word	0xfffffc90

08012a00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012a00:	b480      	push	{r7}
 8012a02:	b085      	sub	sp, #20
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a0c:	095b      	lsrs	r3, r3, #5
 8012a0e:	3301      	adds	r3, #1
 8012a10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	68db      	ldr	r3, [r3, #12]
 8012a16:	3301      	adds	r3, #1
 8012a18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	3307      	adds	r3, #7
 8012a1e:	08db      	lsrs	r3, r3, #3
 8012a20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	68fa      	ldr	r2, [r7, #12]
 8012a26:	fb02 f303 	mul.w	r3, r2, r3
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3714      	adds	r7, #20
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a34:	4770      	bx	lr

08012a36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012a36:	b580      	push	{r7, lr}
 8012a38:	b082      	sub	sp, #8
 8012a3a:	af00      	add	r7, sp, #0
 8012a3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d101      	bne.n	8012a48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012a44:	2301      	movs	r3, #1
 8012a46:	e049      	b.n	8012adc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d106      	bne.n	8012a62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2200      	movs	r2, #0
 8012a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f7f2 f9cb 	bl	8004df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2202      	movs	r2, #2
 8012a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	3304      	adds	r3, #4
 8012a72:	4619      	mov	r1, r3
 8012a74:	4610      	mov	r0, r2
 8012a76:	f000 fe7d 	bl	8013774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2201      	movs	r2, #1
 8012a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2201      	movs	r2, #1
 8012a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2201      	movs	r2, #1
 8012a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2201      	movs	r2, #1
 8012aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2201      	movs	r2, #1
 8012ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2201      	movs	r2, #1
 8012abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2201      	movs	r2, #1
 8012ace:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012ada:	2300      	movs	r3, #0
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3708      	adds	r7, #8
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}

08012ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b085      	sub	sp, #20
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d001      	beq.n	8012afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012af8:	2301      	movs	r3, #1
 8012afa:	e054      	b.n	8012ba6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2202      	movs	r2, #2
 8012b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	68da      	ldr	r2, [r3, #12]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	f042 0201 	orr.w	r2, r2, #1
 8012b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	4a26      	ldr	r2, [pc, #152]	; (8012bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d022      	beq.n	8012b64 <HAL_TIM_Base_Start_IT+0x80>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b26:	d01d      	beq.n	8012b64 <HAL_TIM_Base_Start_IT+0x80>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	4a22      	ldr	r2, [pc, #136]	; (8012bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8012b2e:	4293      	cmp	r3, r2
 8012b30:	d018      	beq.n	8012b64 <HAL_TIM_Base_Start_IT+0x80>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	4a21      	ldr	r2, [pc, #132]	; (8012bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d013      	beq.n	8012b64 <HAL_TIM_Base_Start_IT+0x80>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4a1f      	ldr	r2, [pc, #124]	; (8012bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d00e      	beq.n	8012b64 <HAL_TIM_Base_Start_IT+0x80>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	4a1e      	ldr	r2, [pc, #120]	; (8012bc4 <HAL_TIM_Base_Start_IT+0xe0>)
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d009      	beq.n	8012b64 <HAL_TIM_Base_Start_IT+0x80>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	4a1c      	ldr	r2, [pc, #112]	; (8012bc8 <HAL_TIM_Base_Start_IT+0xe4>)
 8012b56:	4293      	cmp	r3, r2
 8012b58:	d004      	beq.n	8012b64 <HAL_TIM_Base_Start_IT+0x80>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	4a1b      	ldr	r2, [pc, #108]	; (8012bcc <HAL_TIM_Base_Start_IT+0xe8>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d115      	bne.n	8012b90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	689a      	ldr	r2, [r3, #8]
 8012b6a:	4b19      	ldr	r3, [pc, #100]	; (8012bd0 <HAL_TIM_Base_Start_IT+0xec>)
 8012b6c:	4013      	ands	r3, r2
 8012b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2b06      	cmp	r3, #6
 8012b74:	d015      	beq.n	8012ba2 <HAL_TIM_Base_Start_IT+0xbe>
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b7c:	d011      	beq.n	8012ba2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	681a      	ldr	r2, [r3, #0]
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	f042 0201 	orr.w	r2, r2, #1
 8012b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b8e:	e008      	b.n	8012ba2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	681a      	ldr	r2, [r3, #0]
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	f042 0201 	orr.w	r2, r2, #1
 8012b9e:	601a      	str	r2, [r3, #0]
 8012ba0:	e000      	b.n	8012ba4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ba2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012ba4:	2300      	movs	r3, #0
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3714      	adds	r7, #20
 8012baa:	46bd      	mov	sp, r7
 8012bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb0:	4770      	bx	lr
 8012bb2:	bf00      	nop
 8012bb4:	40010000 	.word	0x40010000
 8012bb8:	40000400 	.word	0x40000400
 8012bbc:	40000800 	.word	0x40000800
 8012bc0:	40000c00 	.word	0x40000c00
 8012bc4:	40010400 	.word	0x40010400
 8012bc8:	40001800 	.word	0x40001800
 8012bcc:	40014000 	.word	0x40014000
 8012bd0:	00010007 	.word	0x00010007

08012bd4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012bde:	2300      	movs	r3, #0
 8012be0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d109      	bne.n	8012bfc <HAL_TIM_OC_Start_IT+0x28>
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	bf14      	ite	ne
 8012bf4:	2301      	movne	r3, #1
 8012bf6:	2300      	moveq	r3, #0
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	e03c      	b.n	8012c76 <HAL_TIM_OC_Start_IT+0xa2>
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	2b04      	cmp	r3, #4
 8012c00:	d109      	bne.n	8012c16 <HAL_TIM_OC_Start_IT+0x42>
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012c08:	b2db      	uxtb	r3, r3
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	bf14      	ite	ne
 8012c0e:	2301      	movne	r3, #1
 8012c10:	2300      	moveq	r3, #0
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	e02f      	b.n	8012c76 <HAL_TIM_OC_Start_IT+0xa2>
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	2b08      	cmp	r3, #8
 8012c1a:	d109      	bne.n	8012c30 <HAL_TIM_OC_Start_IT+0x5c>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	bf14      	ite	ne
 8012c28:	2301      	movne	r3, #1
 8012c2a:	2300      	moveq	r3, #0
 8012c2c:	b2db      	uxtb	r3, r3
 8012c2e:	e022      	b.n	8012c76 <HAL_TIM_OC_Start_IT+0xa2>
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	2b0c      	cmp	r3, #12
 8012c34:	d109      	bne.n	8012c4a <HAL_TIM_OC_Start_IT+0x76>
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	bf14      	ite	ne
 8012c42:	2301      	movne	r3, #1
 8012c44:	2300      	moveq	r3, #0
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	e015      	b.n	8012c76 <HAL_TIM_OC_Start_IT+0xa2>
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	2b10      	cmp	r3, #16
 8012c4e:	d109      	bne.n	8012c64 <HAL_TIM_OC_Start_IT+0x90>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c56:	b2db      	uxtb	r3, r3
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	bf14      	ite	ne
 8012c5c:	2301      	movne	r3, #1
 8012c5e:	2300      	moveq	r3, #0
 8012c60:	b2db      	uxtb	r3, r3
 8012c62:	e008      	b.n	8012c76 <HAL_TIM_OC_Start_IT+0xa2>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	bf14      	ite	ne
 8012c70:	2301      	movne	r3, #1
 8012c72:	2300      	moveq	r3, #0
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d001      	beq.n	8012c7e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	e0ec      	b.n	8012e58 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d104      	bne.n	8012c8e <HAL_TIM_OC_Start_IT+0xba>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2202      	movs	r2, #2
 8012c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012c8c:	e023      	b.n	8012cd6 <HAL_TIM_OC_Start_IT+0x102>
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	2b04      	cmp	r3, #4
 8012c92:	d104      	bne.n	8012c9e <HAL_TIM_OC_Start_IT+0xca>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2202      	movs	r2, #2
 8012c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012c9c:	e01b      	b.n	8012cd6 <HAL_TIM_OC_Start_IT+0x102>
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	2b08      	cmp	r3, #8
 8012ca2:	d104      	bne.n	8012cae <HAL_TIM_OC_Start_IT+0xda>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2202      	movs	r2, #2
 8012ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012cac:	e013      	b.n	8012cd6 <HAL_TIM_OC_Start_IT+0x102>
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	2b0c      	cmp	r3, #12
 8012cb2:	d104      	bne.n	8012cbe <HAL_TIM_OC_Start_IT+0xea>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2202      	movs	r2, #2
 8012cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012cbc:	e00b      	b.n	8012cd6 <HAL_TIM_OC_Start_IT+0x102>
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	2b10      	cmp	r3, #16
 8012cc2:	d104      	bne.n	8012cce <HAL_TIM_OC_Start_IT+0xfa>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2202      	movs	r2, #2
 8012cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012ccc:	e003      	b.n	8012cd6 <HAL_TIM_OC_Start_IT+0x102>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2202      	movs	r2, #2
 8012cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	2b0c      	cmp	r3, #12
 8012cda:	d841      	bhi.n	8012d60 <HAL_TIM_OC_Start_IT+0x18c>
 8012cdc:	a201      	add	r2, pc, #4	; (adr r2, 8012ce4 <HAL_TIM_OC_Start_IT+0x110>)
 8012cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ce2:	bf00      	nop
 8012ce4:	08012d19 	.word	0x08012d19
 8012ce8:	08012d61 	.word	0x08012d61
 8012cec:	08012d61 	.word	0x08012d61
 8012cf0:	08012d61 	.word	0x08012d61
 8012cf4:	08012d2b 	.word	0x08012d2b
 8012cf8:	08012d61 	.word	0x08012d61
 8012cfc:	08012d61 	.word	0x08012d61
 8012d00:	08012d61 	.word	0x08012d61
 8012d04:	08012d3d 	.word	0x08012d3d
 8012d08:	08012d61 	.word	0x08012d61
 8012d0c:	08012d61 	.word	0x08012d61
 8012d10:	08012d61 	.word	0x08012d61
 8012d14:	08012d4f 	.word	0x08012d4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	68da      	ldr	r2, [r3, #12]
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	f042 0202 	orr.w	r2, r2, #2
 8012d26:	60da      	str	r2, [r3, #12]
      break;
 8012d28:	e01d      	b.n	8012d66 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	68da      	ldr	r2, [r3, #12]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	f042 0204 	orr.w	r2, r2, #4
 8012d38:	60da      	str	r2, [r3, #12]
      break;
 8012d3a:	e014      	b.n	8012d66 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	68da      	ldr	r2, [r3, #12]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f042 0208 	orr.w	r2, r2, #8
 8012d4a:	60da      	str	r2, [r3, #12]
      break;
 8012d4c:	e00b      	b.n	8012d66 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	68da      	ldr	r2, [r3, #12]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f042 0210 	orr.w	r2, r2, #16
 8012d5c:	60da      	str	r2, [r3, #12]
      break;
 8012d5e:	e002      	b.n	8012d66 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012d60:	2301      	movs	r3, #1
 8012d62:	73fb      	strb	r3, [r7, #15]
      break;
 8012d64:	bf00      	nop
  }

  if (status == HAL_OK)
 8012d66:	7bfb      	ldrb	r3, [r7, #15]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d174      	bne.n	8012e56 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	2201      	movs	r2, #1
 8012d72:	6839      	ldr	r1, [r7, #0]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f001 f917 	bl	8013fa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	4a38      	ldr	r2, [pc, #224]	; (8012e60 <HAL_TIM_OC_Start_IT+0x28c>)
 8012d80:	4293      	cmp	r3, r2
 8012d82:	d013      	beq.n	8012dac <HAL_TIM_OC_Start_IT+0x1d8>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4a36      	ldr	r2, [pc, #216]	; (8012e64 <HAL_TIM_OC_Start_IT+0x290>)
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d00e      	beq.n	8012dac <HAL_TIM_OC_Start_IT+0x1d8>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4a35      	ldr	r2, [pc, #212]	; (8012e68 <HAL_TIM_OC_Start_IT+0x294>)
 8012d94:	4293      	cmp	r3, r2
 8012d96:	d009      	beq.n	8012dac <HAL_TIM_OC_Start_IT+0x1d8>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a33      	ldr	r2, [pc, #204]	; (8012e6c <HAL_TIM_OC_Start_IT+0x298>)
 8012d9e:	4293      	cmp	r3, r2
 8012da0:	d004      	beq.n	8012dac <HAL_TIM_OC_Start_IT+0x1d8>
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	4a32      	ldr	r2, [pc, #200]	; (8012e70 <HAL_TIM_OC_Start_IT+0x29c>)
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d101      	bne.n	8012db0 <HAL_TIM_OC_Start_IT+0x1dc>
 8012dac:	2301      	movs	r3, #1
 8012dae:	e000      	b.n	8012db2 <HAL_TIM_OC_Start_IT+0x1de>
 8012db0:	2300      	movs	r3, #0
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d007      	beq.n	8012dc6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	4a25      	ldr	r2, [pc, #148]	; (8012e60 <HAL_TIM_OC_Start_IT+0x28c>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d022      	beq.n	8012e16 <HAL_TIM_OC_Start_IT+0x242>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012dd8:	d01d      	beq.n	8012e16 <HAL_TIM_OC_Start_IT+0x242>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4a25      	ldr	r2, [pc, #148]	; (8012e74 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d018      	beq.n	8012e16 <HAL_TIM_OC_Start_IT+0x242>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	4a23      	ldr	r2, [pc, #140]	; (8012e78 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d013      	beq.n	8012e16 <HAL_TIM_OC_Start_IT+0x242>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	4a22      	ldr	r2, [pc, #136]	; (8012e7c <HAL_TIM_OC_Start_IT+0x2a8>)
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d00e      	beq.n	8012e16 <HAL_TIM_OC_Start_IT+0x242>
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	4a19      	ldr	r2, [pc, #100]	; (8012e64 <HAL_TIM_OC_Start_IT+0x290>)
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d009      	beq.n	8012e16 <HAL_TIM_OC_Start_IT+0x242>
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4a1e      	ldr	r2, [pc, #120]	; (8012e80 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d004      	beq.n	8012e16 <HAL_TIM_OC_Start_IT+0x242>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a15      	ldr	r2, [pc, #84]	; (8012e68 <HAL_TIM_OC_Start_IT+0x294>)
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d115      	bne.n	8012e42 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	689a      	ldr	r2, [r3, #8]
 8012e1c:	4b19      	ldr	r3, [pc, #100]	; (8012e84 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012e1e:	4013      	ands	r3, r2
 8012e20:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	2b06      	cmp	r3, #6
 8012e26:	d015      	beq.n	8012e54 <HAL_TIM_OC_Start_IT+0x280>
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e2e:	d011      	beq.n	8012e54 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f042 0201 	orr.w	r2, r2, #1
 8012e3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e40:	e008      	b.n	8012e54 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f042 0201 	orr.w	r2, r2, #1
 8012e50:	601a      	str	r2, [r3, #0]
 8012e52:	e000      	b.n	8012e56 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e54:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3710      	adds	r7, #16
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	40010000 	.word	0x40010000
 8012e64:	40010400 	.word	0x40010400
 8012e68:	40014000 	.word	0x40014000
 8012e6c:	40014400 	.word	0x40014400
 8012e70:	40014800 	.word	0x40014800
 8012e74:	40000400 	.word	0x40000400
 8012e78:	40000800 	.word	0x40000800
 8012e7c:	40000c00 	.word	0x40000c00
 8012e80:	40001800 	.word	0x40001800
 8012e84:	00010007 	.word	0x00010007

08012e88 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012e92:	2300      	movs	r3, #0
 8012e94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	2b0c      	cmp	r3, #12
 8012e9a:	d841      	bhi.n	8012f20 <HAL_TIM_OC_Stop_IT+0x98>
 8012e9c:	a201      	add	r2, pc, #4	; (adr r2, 8012ea4 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ea2:	bf00      	nop
 8012ea4:	08012ed9 	.word	0x08012ed9
 8012ea8:	08012f21 	.word	0x08012f21
 8012eac:	08012f21 	.word	0x08012f21
 8012eb0:	08012f21 	.word	0x08012f21
 8012eb4:	08012eeb 	.word	0x08012eeb
 8012eb8:	08012f21 	.word	0x08012f21
 8012ebc:	08012f21 	.word	0x08012f21
 8012ec0:	08012f21 	.word	0x08012f21
 8012ec4:	08012efd 	.word	0x08012efd
 8012ec8:	08012f21 	.word	0x08012f21
 8012ecc:	08012f21 	.word	0x08012f21
 8012ed0:	08012f21 	.word	0x08012f21
 8012ed4:	08012f0f 	.word	0x08012f0f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	68da      	ldr	r2, [r3, #12]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	f022 0202 	bic.w	r2, r2, #2
 8012ee6:	60da      	str	r2, [r3, #12]
      break;
 8012ee8:	e01d      	b.n	8012f26 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	68da      	ldr	r2, [r3, #12]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f022 0204 	bic.w	r2, r2, #4
 8012ef8:	60da      	str	r2, [r3, #12]
      break;
 8012efa:	e014      	b.n	8012f26 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	68da      	ldr	r2, [r3, #12]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f022 0208 	bic.w	r2, r2, #8
 8012f0a:	60da      	str	r2, [r3, #12]
      break;
 8012f0c:	e00b      	b.n	8012f26 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	68da      	ldr	r2, [r3, #12]
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	f022 0210 	bic.w	r2, r2, #16
 8012f1c:	60da      	str	r2, [r3, #12]
      break;
 8012f1e:	e002      	b.n	8012f26 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012f20:	2301      	movs	r3, #1
 8012f22:	73fb      	strb	r3, [r7, #15]
      break;
 8012f24:	bf00      	nop
  }

  if (status == HAL_OK)
 8012f26:	7bfb      	ldrb	r3, [r7, #15]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	f040 8081 	bne.w	8013030 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	2200      	movs	r2, #0
 8012f34:	6839      	ldr	r1, [r7, #0]
 8012f36:	4618      	mov	r0, r3
 8012f38:	f001 f836 	bl	8013fa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	4a3e      	ldr	r2, [pc, #248]	; (801303c <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d013      	beq.n	8012f6e <HAL_TIM_OC_Stop_IT+0xe6>
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	4a3d      	ldr	r2, [pc, #244]	; (8013040 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d00e      	beq.n	8012f6e <HAL_TIM_OC_Stop_IT+0xe6>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	4a3b      	ldr	r2, [pc, #236]	; (8013044 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d009      	beq.n	8012f6e <HAL_TIM_OC_Stop_IT+0xe6>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	4a3a      	ldr	r2, [pc, #232]	; (8013048 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012f60:	4293      	cmp	r3, r2
 8012f62:	d004      	beq.n	8012f6e <HAL_TIM_OC_Stop_IT+0xe6>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	4a38      	ldr	r2, [pc, #224]	; (801304c <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d101      	bne.n	8012f72 <HAL_TIM_OC_Stop_IT+0xea>
 8012f6e:	2301      	movs	r3, #1
 8012f70:	e000      	b.n	8012f74 <HAL_TIM_OC_Stop_IT+0xec>
 8012f72:	2300      	movs	r3, #0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d017      	beq.n	8012fa8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	6a1a      	ldr	r2, [r3, #32]
 8012f7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8012f82:	4013      	ands	r3, r2
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d10f      	bne.n	8012fa8 <HAL_TIM_OC_Stop_IT+0x120>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	6a1a      	ldr	r2, [r3, #32]
 8012f8e:	f240 4344 	movw	r3, #1092	; 0x444
 8012f92:	4013      	ands	r3, r2
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d107      	bne.n	8012fa8 <HAL_TIM_OC_Stop_IT+0x120>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012fa6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	6a1a      	ldr	r2, [r3, #32]
 8012fae:	f241 1311 	movw	r3, #4369	; 0x1111
 8012fb2:	4013      	ands	r3, r2
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d10f      	bne.n	8012fd8 <HAL_TIM_OC_Stop_IT+0x150>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	6a1a      	ldr	r2, [r3, #32]
 8012fbe:	f240 4344 	movw	r3, #1092	; 0x444
 8012fc2:	4013      	ands	r3, r2
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d107      	bne.n	8012fd8 <HAL_TIM_OC_Stop_IT+0x150>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	681a      	ldr	r2, [r3, #0]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f022 0201 	bic.w	r2, r2, #1
 8012fd6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d104      	bne.n	8012fe8 <HAL_TIM_OC_Stop_IT+0x160>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012fe6:	e023      	b.n	8013030 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	2b04      	cmp	r3, #4
 8012fec:	d104      	bne.n	8012ff8 <HAL_TIM_OC_Stop_IT+0x170>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012ff6:	e01b      	b.n	8013030 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	2b08      	cmp	r3, #8
 8012ffc:	d104      	bne.n	8013008 <HAL_TIM_OC_Stop_IT+0x180>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2201      	movs	r2, #1
 8013002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013006:	e013      	b.n	8013030 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2b0c      	cmp	r3, #12
 801300c:	d104      	bne.n	8013018 <HAL_TIM_OC_Stop_IT+0x190>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2201      	movs	r2, #1
 8013012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013016:	e00b      	b.n	8013030 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	2b10      	cmp	r3, #16
 801301c:	d104      	bne.n	8013028 <HAL_TIM_OC_Stop_IT+0x1a0>
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2201      	movs	r2, #1
 8013022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013026:	e003      	b.n	8013030 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2201      	movs	r2, #1
 801302c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013030:	7bfb      	ldrb	r3, [r7, #15]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	40010000 	.word	0x40010000
 8013040:	40010400 	.word	0x40010400
 8013044:	40014000 	.word	0x40014000
 8013048:	40014400 	.word	0x40014400
 801304c:	40014800 	.word	0x40014800

08013050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d101      	bne.n	8013062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801305e:	2301      	movs	r3, #1
 8013060:	e049      	b.n	80130f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013068:	b2db      	uxtb	r3, r3
 801306a:	2b00      	cmp	r3, #0
 801306c:	d106      	bne.n	801307c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2200      	movs	r2, #0
 8013072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f000 f841 	bl	80130fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2202      	movs	r2, #2
 8013080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681a      	ldr	r2, [r3, #0]
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	3304      	adds	r3, #4
 801308c:	4619      	mov	r1, r3
 801308e:	4610      	mov	r0, r2
 8013090:	f000 fb70 	bl	8013774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2201      	movs	r2, #1
 8013098:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2201      	movs	r2, #1
 80130a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2201      	movs	r2, #1
 80130a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	2201      	movs	r2, #1
 80130b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2201      	movs	r2, #1
 80130b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2201      	movs	r2, #1
 80130c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2201      	movs	r2, #1
 80130c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2201      	movs	r2, #1
 80130d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2201      	movs	r2, #1
 80130d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2201      	movs	r2, #1
 80130e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2201      	movs	r2, #1
 80130e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2201      	movs	r2, #1
 80130f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80130f4:	2300      	movs	r3, #0
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3708      	adds	r7, #8
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}

080130fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80130fe:	b480      	push	{r7}
 8013100:	b083      	sub	sp, #12
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8013106:	bf00      	nop
 8013108:	370c      	adds	r7, #12
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr

08013112 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013112:	b580      	push	{r7, lr}
 8013114:	b084      	sub	sp, #16
 8013116:	af00      	add	r7, sp, #0
 8013118:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	691b      	ldr	r3, [r3, #16]
 8013128:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	f003 0302 	and.w	r3, r3, #2
 8013130:	2b00      	cmp	r3, #0
 8013132:	d020      	beq.n	8013176 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	f003 0302 	and.w	r3, r3, #2
 801313a:	2b00      	cmp	r3, #0
 801313c:	d01b      	beq.n	8013176 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f06f 0202 	mvn.w	r2, #2
 8013146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2201      	movs	r2, #1
 801314c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	699b      	ldr	r3, [r3, #24]
 8013154:	f003 0303 	and.w	r3, r3, #3
 8013158:	2b00      	cmp	r3, #0
 801315a:	d003      	beq.n	8013164 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f000 faeb 	bl	8013738 <HAL_TIM_IC_CaptureCallback>
 8013162:	e005      	b.n	8013170 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f7ef fd73 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f000 faee 	bl	801374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2200      	movs	r2, #0
 8013174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	f003 0304 	and.w	r3, r3, #4
 801317c:	2b00      	cmp	r3, #0
 801317e:	d020      	beq.n	80131c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f003 0304 	and.w	r3, r3, #4
 8013186:	2b00      	cmp	r3, #0
 8013188:	d01b      	beq.n	80131c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f06f 0204 	mvn.w	r2, #4
 8013192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2202      	movs	r2, #2
 8013198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	699b      	ldr	r3, [r3, #24]
 80131a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d003      	beq.n	80131b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f000 fac5 	bl	8013738 <HAL_TIM_IC_CaptureCallback>
 80131ae:	e005      	b.n	80131bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f7ef fd4d 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f000 fac8 	bl	801374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2200      	movs	r2, #0
 80131c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	f003 0308 	and.w	r3, r3, #8
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d020      	beq.n	801320e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	f003 0308 	and.w	r3, r3, #8
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d01b      	beq.n	801320e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	f06f 0208 	mvn.w	r2, #8
 80131de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2204      	movs	r2, #4
 80131e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	69db      	ldr	r3, [r3, #28]
 80131ec:	f003 0303 	and.w	r3, r3, #3
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d003      	beq.n	80131fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	f000 fa9f 	bl	8013738 <HAL_TIM_IC_CaptureCallback>
 80131fa:	e005      	b.n	8013208 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f7ef fd27 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 faa2 	bl	801374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2200      	movs	r2, #0
 801320c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	f003 0310 	and.w	r3, r3, #16
 8013214:	2b00      	cmp	r3, #0
 8013216:	d020      	beq.n	801325a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	f003 0310 	and.w	r3, r3, #16
 801321e:	2b00      	cmp	r3, #0
 8013220:	d01b      	beq.n	801325a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f06f 0210 	mvn.w	r2, #16
 801322a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2208      	movs	r2, #8
 8013230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	69db      	ldr	r3, [r3, #28]
 8013238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801323c:	2b00      	cmp	r3, #0
 801323e:	d003      	beq.n	8013248 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f000 fa79 	bl	8013738 <HAL_TIM_IC_CaptureCallback>
 8013246:	e005      	b.n	8013254 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7ef fd01 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f000 fa7c 	bl	801374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2200      	movs	r2, #0
 8013258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	f003 0301 	and.w	r3, r3, #1
 8013260:	2b00      	cmp	r3, #0
 8013262:	d00c      	beq.n	801327e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f003 0301 	and.w	r3, r3, #1
 801326a:	2b00      	cmp	r3, #0
 801326c:	d007      	beq.n	801327e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f06f 0201 	mvn.w	r2, #1
 8013276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7f0 fbb7 	bl	80039ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013284:	2b00      	cmp	r3, #0
 8013286:	d104      	bne.n	8013292 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801328e:	2b00      	cmp	r3, #0
 8013290:	d00c      	beq.n	80132ac <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013298:	2b00      	cmp	r3, #0
 801329a:	d007      	beq.n	80132ac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80132a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f000 ffba 	bl	8014220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d00c      	beq.n	80132d0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d007      	beq.n	80132d0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80132c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80132ca:	6878      	ldr	r0, [r7, #4]
 80132cc:	f000 ffb2 	bl	8014234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d00c      	beq.n	80132f4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d007      	beq.n	80132f4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80132ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f000 fa36 	bl	8013760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	f003 0320 	and.w	r3, r3, #32
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d00c      	beq.n	8013318 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	f003 0320 	and.w	r3, r3, #32
 8013304:	2b00      	cmp	r3, #0
 8013306:	d007      	beq.n	8013318 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	f06f 0220 	mvn.w	r2, #32
 8013310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 ff7a 	bl	801420c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013318:	bf00      	nop
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013336:	2b01      	cmp	r3, #1
 8013338:	d101      	bne.n	801333e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801333a:	2302      	movs	r3, #2
 801333c:	e0ff      	b.n	801353e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2201      	movs	r2, #1
 8013342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2b14      	cmp	r3, #20
 801334a:	f200 80f0 	bhi.w	801352e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801334e:	a201      	add	r2, pc, #4	; (adr r2, 8013354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013354:	080133a9 	.word	0x080133a9
 8013358:	0801352f 	.word	0x0801352f
 801335c:	0801352f 	.word	0x0801352f
 8013360:	0801352f 	.word	0x0801352f
 8013364:	080133e9 	.word	0x080133e9
 8013368:	0801352f 	.word	0x0801352f
 801336c:	0801352f 	.word	0x0801352f
 8013370:	0801352f 	.word	0x0801352f
 8013374:	0801342b 	.word	0x0801342b
 8013378:	0801352f 	.word	0x0801352f
 801337c:	0801352f 	.word	0x0801352f
 8013380:	0801352f 	.word	0x0801352f
 8013384:	0801346b 	.word	0x0801346b
 8013388:	0801352f 	.word	0x0801352f
 801338c:	0801352f 	.word	0x0801352f
 8013390:	0801352f 	.word	0x0801352f
 8013394:	080134ad 	.word	0x080134ad
 8013398:	0801352f 	.word	0x0801352f
 801339c:	0801352f 	.word	0x0801352f
 80133a0:	0801352f 	.word	0x0801352f
 80133a4:	080134ed 	.word	0x080134ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	68b9      	ldr	r1, [r7, #8]
 80133ae:	4618      	mov	r0, r3
 80133b0:	f000 fa86 	bl	80138c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	699a      	ldr	r2, [r3, #24]
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	f042 0208 	orr.w	r2, r2, #8
 80133c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	699a      	ldr	r2, [r3, #24]
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	f022 0204 	bic.w	r2, r2, #4
 80133d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	6999      	ldr	r1, [r3, #24]
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	691a      	ldr	r2, [r3, #16]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	430a      	orrs	r2, r1
 80133e4:	619a      	str	r2, [r3, #24]
      break;
 80133e6:	e0a5      	b.n	8013534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	68b9      	ldr	r1, [r7, #8]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 faf6 	bl	80139e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	699a      	ldr	r2, [r3, #24]
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	699a      	ldr	r2, [r3, #24]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	6999      	ldr	r1, [r3, #24]
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	691b      	ldr	r3, [r3, #16]
 801341e:	021a      	lsls	r2, r3, #8
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	430a      	orrs	r2, r1
 8013426:	619a      	str	r2, [r3, #24]
      break;
 8013428:	e084      	b.n	8013534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	68b9      	ldr	r1, [r7, #8]
 8013430:	4618      	mov	r0, r3
 8013432:	f000 fb5f 	bl	8013af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	69da      	ldr	r2, [r3, #28]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	f042 0208 	orr.w	r2, r2, #8
 8013444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	69da      	ldr	r2, [r3, #28]
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	f022 0204 	bic.w	r2, r2, #4
 8013454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	69d9      	ldr	r1, [r3, #28]
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	691a      	ldr	r2, [r3, #16]
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	430a      	orrs	r2, r1
 8013466:	61da      	str	r2, [r3, #28]
      break;
 8013468:	e064      	b.n	8013534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	68b9      	ldr	r1, [r7, #8]
 8013470:	4618      	mov	r0, r3
 8013472:	f000 fbc7 	bl	8013c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	69da      	ldr	r2, [r3, #28]
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	69da      	ldr	r2, [r3, #28]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	69d9      	ldr	r1, [r3, #28]
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	691b      	ldr	r3, [r3, #16]
 80134a0:	021a      	lsls	r2, r3, #8
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	430a      	orrs	r2, r1
 80134a8:	61da      	str	r2, [r3, #28]
      break;
 80134aa:	e043      	b.n	8013534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	68b9      	ldr	r1, [r7, #8]
 80134b2:	4618      	mov	r0, r3
 80134b4:	f000 fc10 	bl	8013cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	f042 0208 	orr.w	r2, r2, #8
 80134c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f022 0204 	bic.w	r2, r2, #4
 80134d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	691a      	ldr	r2, [r3, #16]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	430a      	orrs	r2, r1
 80134e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80134ea:	e023      	b.n	8013534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	68b9      	ldr	r1, [r7, #8]
 80134f2:	4618      	mov	r0, r3
 80134f4:	f000 fc54 	bl	8013da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013506:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013516:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801351e:	68bb      	ldr	r3, [r7, #8]
 8013520:	691b      	ldr	r3, [r3, #16]
 8013522:	021a      	lsls	r2, r3, #8
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	430a      	orrs	r2, r1
 801352a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801352c:	e002      	b.n	8013534 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801352e:	2301      	movs	r3, #1
 8013530:	75fb      	strb	r3, [r7, #23]
      break;
 8013532:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2200      	movs	r2, #0
 8013538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801353c:	7dfb      	ldrb	r3, [r7, #23]
}
 801353e:	4618      	mov	r0, r3
 8013540:	3718      	adds	r7, #24
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop

08013548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b084      	sub	sp, #16
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013552:	2300      	movs	r3, #0
 8013554:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801355c:	2b01      	cmp	r3, #1
 801355e:	d101      	bne.n	8013564 <HAL_TIM_ConfigClockSource+0x1c>
 8013560:	2302      	movs	r3, #2
 8013562:	e0dc      	b.n	801371e <HAL_TIM_ConfigClockSource+0x1d6>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2201      	movs	r2, #1
 8013568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2202      	movs	r2, #2
 8013570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	689b      	ldr	r3, [r3, #8]
 801357a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801357c:	68ba      	ldr	r2, [r7, #8]
 801357e:	4b6a      	ldr	r3, [pc, #424]	; (8013728 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013580:	4013      	ands	r3, r2
 8013582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801358a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	68ba      	ldr	r2, [r7, #8]
 8013592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	4a64      	ldr	r2, [pc, #400]	; (801372c <HAL_TIM_ConfigClockSource+0x1e4>)
 801359a:	4293      	cmp	r3, r2
 801359c:	f000 80a9 	beq.w	80136f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80135a0:	4a62      	ldr	r2, [pc, #392]	; (801372c <HAL_TIM_ConfigClockSource+0x1e4>)
 80135a2:	4293      	cmp	r3, r2
 80135a4:	f200 80ae 	bhi.w	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 80135a8:	4a61      	ldr	r2, [pc, #388]	; (8013730 <HAL_TIM_ConfigClockSource+0x1e8>)
 80135aa:	4293      	cmp	r3, r2
 80135ac:	f000 80a1 	beq.w	80136f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80135b0:	4a5f      	ldr	r2, [pc, #380]	; (8013730 <HAL_TIM_ConfigClockSource+0x1e8>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	f200 80a6 	bhi.w	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 80135b8:	4a5e      	ldr	r2, [pc, #376]	; (8013734 <HAL_TIM_ConfigClockSource+0x1ec>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	f000 8099 	beq.w	80136f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80135c0:	4a5c      	ldr	r2, [pc, #368]	; (8013734 <HAL_TIM_ConfigClockSource+0x1ec>)
 80135c2:	4293      	cmp	r3, r2
 80135c4:	f200 809e 	bhi.w	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 80135c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80135cc:	f000 8091 	beq.w	80136f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80135d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80135d4:	f200 8096 	bhi.w	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 80135d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135dc:	f000 8089 	beq.w	80136f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80135e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135e4:	f200 808e 	bhi.w	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 80135e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80135ec:	d03e      	beq.n	801366c <HAL_TIM_ConfigClockSource+0x124>
 80135ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80135f2:	f200 8087 	bhi.w	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 80135f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80135fa:	f000 8086 	beq.w	801370a <HAL_TIM_ConfigClockSource+0x1c2>
 80135fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013602:	d87f      	bhi.n	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 8013604:	2b70      	cmp	r3, #112	; 0x70
 8013606:	d01a      	beq.n	801363e <HAL_TIM_ConfigClockSource+0xf6>
 8013608:	2b70      	cmp	r3, #112	; 0x70
 801360a:	d87b      	bhi.n	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 801360c:	2b60      	cmp	r3, #96	; 0x60
 801360e:	d050      	beq.n	80136b2 <HAL_TIM_ConfigClockSource+0x16a>
 8013610:	2b60      	cmp	r3, #96	; 0x60
 8013612:	d877      	bhi.n	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 8013614:	2b50      	cmp	r3, #80	; 0x50
 8013616:	d03c      	beq.n	8013692 <HAL_TIM_ConfigClockSource+0x14a>
 8013618:	2b50      	cmp	r3, #80	; 0x50
 801361a:	d873      	bhi.n	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 801361c:	2b40      	cmp	r3, #64	; 0x40
 801361e:	d058      	beq.n	80136d2 <HAL_TIM_ConfigClockSource+0x18a>
 8013620:	2b40      	cmp	r3, #64	; 0x40
 8013622:	d86f      	bhi.n	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 8013624:	2b30      	cmp	r3, #48	; 0x30
 8013626:	d064      	beq.n	80136f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013628:	2b30      	cmp	r3, #48	; 0x30
 801362a:	d86b      	bhi.n	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 801362c:	2b20      	cmp	r3, #32
 801362e:	d060      	beq.n	80136f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013630:	2b20      	cmp	r3, #32
 8013632:	d867      	bhi.n	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
 8013634:	2b00      	cmp	r3, #0
 8013636:	d05c      	beq.n	80136f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013638:	2b10      	cmp	r3, #16
 801363a:	d05a      	beq.n	80136f2 <HAL_TIM_ConfigClockSource+0x1aa>
 801363c:	e062      	b.n	8013704 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6818      	ldr	r0, [r3, #0]
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	6899      	ldr	r1, [r3, #8]
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	685a      	ldr	r2, [r3, #4]
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	f000 fc8b 	bl	8013f68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	689b      	ldr	r3, [r3, #8]
 8013658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	68ba      	ldr	r2, [r7, #8]
 8013668:	609a      	str	r2, [r3, #8]
      break;
 801366a:	e04f      	b.n	801370c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6818      	ldr	r0, [r3, #0]
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	6899      	ldr	r1, [r3, #8]
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	685a      	ldr	r2, [r3, #4]
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	68db      	ldr	r3, [r3, #12]
 801367c:	f000 fc74 	bl	8013f68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	689a      	ldr	r2, [r3, #8]
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801368e:	609a      	str	r2, [r3, #8]
      break;
 8013690:	e03c      	b.n	801370c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	6818      	ldr	r0, [r3, #0]
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	6859      	ldr	r1, [r3, #4]
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	68db      	ldr	r3, [r3, #12]
 801369e:	461a      	mov	r2, r3
 80136a0:	f000 fbe4 	bl	8013e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2150      	movs	r1, #80	; 0x50
 80136aa:	4618      	mov	r0, r3
 80136ac:	f000 fc3e 	bl	8013f2c <TIM_ITRx_SetConfig>
      break;
 80136b0:	e02c      	b.n	801370c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6818      	ldr	r0, [r3, #0]
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	6859      	ldr	r1, [r3, #4]
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	68db      	ldr	r3, [r3, #12]
 80136be:	461a      	mov	r2, r3
 80136c0:	f000 fc03 	bl	8013eca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2160      	movs	r1, #96	; 0x60
 80136ca:	4618      	mov	r0, r3
 80136cc:	f000 fc2e 	bl	8013f2c <TIM_ITRx_SetConfig>
      break;
 80136d0:	e01c      	b.n	801370c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6818      	ldr	r0, [r3, #0]
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	6859      	ldr	r1, [r3, #4]
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	461a      	mov	r2, r3
 80136e0:	f000 fbc4 	bl	8013e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	2140      	movs	r1, #64	; 0x40
 80136ea:	4618      	mov	r0, r3
 80136ec:	f000 fc1e 	bl	8013f2c <TIM_ITRx_SetConfig>
      break;
 80136f0:	e00c      	b.n	801370c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	4619      	mov	r1, r3
 80136fc:	4610      	mov	r0, r2
 80136fe:	f000 fc15 	bl	8013f2c <TIM_ITRx_SetConfig>
      break;
 8013702:	e003      	b.n	801370c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013704:	2301      	movs	r3, #1
 8013706:	73fb      	strb	r3, [r7, #15]
      break;
 8013708:	e000      	b.n	801370c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801370a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2201      	movs	r2, #1
 8013710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2200      	movs	r2, #0
 8013718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801371c:	7bfb      	ldrb	r3, [r7, #15]
}
 801371e:	4618      	mov	r0, r3
 8013720:	3710      	adds	r7, #16
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	ffceff88 	.word	0xffceff88
 801372c:	00100040 	.word	0x00100040
 8013730:	00100030 	.word	0x00100030
 8013734:	00100020 	.word	0x00100020

08013738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013738:	b480      	push	{r7}
 801373a:	b083      	sub	sp, #12
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013740:	bf00      	nop
 8013742:	370c      	adds	r7, #12
 8013744:	46bd      	mov	sp, r7
 8013746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374a:	4770      	bx	lr

0801374c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801374c:	b480      	push	{r7}
 801374e:	b083      	sub	sp, #12
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013754:	bf00      	nop
 8013756:	370c      	adds	r7, #12
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr

08013760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013768:	bf00      	nop
 801376a:	370c      	adds	r7, #12
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr

08013774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013774:	b480      	push	{r7}
 8013776:	b085      	sub	sp, #20
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	4a46      	ldr	r2, [pc, #280]	; (80138a0 <TIM_Base_SetConfig+0x12c>)
 8013788:	4293      	cmp	r3, r2
 801378a:	d013      	beq.n	80137b4 <TIM_Base_SetConfig+0x40>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013792:	d00f      	beq.n	80137b4 <TIM_Base_SetConfig+0x40>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	4a43      	ldr	r2, [pc, #268]	; (80138a4 <TIM_Base_SetConfig+0x130>)
 8013798:	4293      	cmp	r3, r2
 801379a:	d00b      	beq.n	80137b4 <TIM_Base_SetConfig+0x40>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	4a42      	ldr	r2, [pc, #264]	; (80138a8 <TIM_Base_SetConfig+0x134>)
 80137a0:	4293      	cmp	r3, r2
 80137a2:	d007      	beq.n	80137b4 <TIM_Base_SetConfig+0x40>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	4a41      	ldr	r2, [pc, #260]	; (80138ac <TIM_Base_SetConfig+0x138>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d003      	beq.n	80137b4 <TIM_Base_SetConfig+0x40>
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4a40      	ldr	r2, [pc, #256]	; (80138b0 <TIM_Base_SetConfig+0x13c>)
 80137b0:	4293      	cmp	r3, r2
 80137b2:	d108      	bne.n	80137c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80137ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	68fa      	ldr	r2, [r7, #12]
 80137c2:	4313      	orrs	r3, r2
 80137c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	4a35      	ldr	r2, [pc, #212]	; (80138a0 <TIM_Base_SetConfig+0x12c>)
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d01f      	beq.n	801380e <TIM_Base_SetConfig+0x9a>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80137d4:	d01b      	beq.n	801380e <TIM_Base_SetConfig+0x9a>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	4a32      	ldr	r2, [pc, #200]	; (80138a4 <TIM_Base_SetConfig+0x130>)
 80137da:	4293      	cmp	r3, r2
 80137dc:	d017      	beq.n	801380e <TIM_Base_SetConfig+0x9a>
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	4a31      	ldr	r2, [pc, #196]	; (80138a8 <TIM_Base_SetConfig+0x134>)
 80137e2:	4293      	cmp	r3, r2
 80137e4:	d013      	beq.n	801380e <TIM_Base_SetConfig+0x9a>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	4a30      	ldr	r2, [pc, #192]	; (80138ac <TIM_Base_SetConfig+0x138>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d00f      	beq.n	801380e <TIM_Base_SetConfig+0x9a>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	4a2f      	ldr	r2, [pc, #188]	; (80138b0 <TIM_Base_SetConfig+0x13c>)
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d00b      	beq.n	801380e <TIM_Base_SetConfig+0x9a>
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4a2e      	ldr	r2, [pc, #184]	; (80138b4 <TIM_Base_SetConfig+0x140>)
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d007      	beq.n	801380e <TIM_Base_SetConfig+0x9a>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	4a2d      	ldr	r2, [pc, #180]	; (80138b8 <TIM_Base_SetConfig+0x144>)
 8013802:	4293      	cmp	r3, r2
 8013804:	d003      	beq.n	801380e <TIM_Base_SetConfig+0x9a>
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	4a2c      	ldr	r2, [pc, #176]	; (80138bc <TIM_Base_SetConfig+0x148>)
 801380a:	4293      	cmp	r3, r2
 801380c:	d108      	bne.n	8013820 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	68db      	ldr	r3, [r3, #12]
 801381a:	68fa      	ldr	r2, [r7, #12]
 801381c:	4313      	orrs	r3, r2
 801381e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	695b      	ldr	r3, [r3, #20]
 801382a:	4313      	orrs	r3, r2
 801382c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	68fa      	ldr	r2, [r7, #12]
 8013832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	689a      	ldr	r2, [r3, #8]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	681a      	ldr	r2, [r3, #0]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	4a16      	ldr	r2, [pc, #88]	; (80138a0 <TIM_Base_SetConfig+0x12c>)
 8013848:	4293      	cmp	r3, r2
 801384a:	d00f      	beq.n	801386c <TIM_Base_SetConfig+0xf8>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	4a18      	ldr	r2, [pc, #96]	; (80138b0 <TIM_Base_SetConfig+0x13c>)
 8013850:	4293      	cmp	r3, r2
 8013852:	d00b      	beq.n	801386c <TIM_Base_SetConfig+0xf8>
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	4a17      	ldr	r2, [pc, #92]	; (80138b4 <TIM_Base_SetConfig+0x140>)
 8013858:	4293      	cmp	r3, r2
 801385a:	d007      	beq.n	801386c <TIM_Base_SetConfig+0xf8>
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	4a16      	ldr	r2, [pc, #88]	; (80138b8 <TIM_Base_SetConfig+0x144>)
 8013860:	4293      	cmp	r3, r2
 8013862:	d003      	beq.n	801386c <TIM_Base_SetConfig+0xf8>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	4a15      	ldr	r2, [pc, #84]	; (80138bc <TIM_Base_SetConfig+0x148>)
 8013868:	4293      	cmp	r3, r2
 801386a:	d103      	bne.n	8013874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	691a      	ldr	r2, [r3, #16]
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2201      	movs	r2, #1
 8013878:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	691b      	ldr	r3, [r3, #16]
 801387e:	f003 0301 	and.w	r3, r3, #1
 8013882:	2b01      	cmp	r3, #1
 8013884:	d105      	bne.n	8013892 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	691b      	ldr	r3, [r3, #16]
 801388a:	f023 0201 	bic.w	r2, r3, #1
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	611a      	str	r2, [r3, #16]
  }
}
 8013892:	bf00      	nop
 8013894:	3714      	adds	r7, #20
 8013896:	46bd      	mov	sp, r7
 8013898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389c:	4770      	bx	lr
 801389e:	bf00      	nop
 80138a0:	40010000 	.word	0x40010000
 80138a4:	40000400 	.word	0x40000400
 80138a8:	40000800 	.word	0x40000800
 80138ac:	40000c00 	.word	0x40000c00
 80138b0:	40010400 	.word	0x40010400
 80138b4:	40014000 	.word	0x40014000
 80138b8:	40014400 	.word	0x40014400
 80138bc:	40014800 	.word	0x40014800

080138c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80138c0:	b480      	push	{r7}
 80138c2:	b087      	sub	sp, #28
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6a1b      	ldr	r3, [r3, #32]
 80138ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6a1b      	ldr	r3, [r3, #32]
 80138d4:	f023 0201 	bic.w	r2, r3, #1
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	699b      	ldr	r3, [r3, #24]
 80138e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	4b37      	ldr	r3, [pc, #220]	; (80139c8 <TIM_OC1_SetConfig+0x108>)
 80138ec:	4013      	ands	r3, r2
 80138ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f023 0303 	bic.w	r3, r3, #3
 80138f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	68fa      	ldr	r2, [r7, #12]
 80138fe:	4313      	orrs	r3, r2
 8013900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	f023 0302 	bic.w	r3, r3, #2
 8013908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	689b      	ldr	r3, [r3, #8]
 801390e:	697a      	ldr	r2, [r7, #20]
 8013910:	4313      	orrs	r3, r2
 8013912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	4a2d      	ldr	r2, [pc, #180]	; (80139cc <TIM_OC1_SetConfig+0x10c>)
 8013918:	4293      	cmp	r3, r2
 801391a:	d00f      	beq.n	801393c <TIM_OC1_SetConfig+0x7c>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	4a2c      	ldr	r2, [pc, #176]	; (80139d0 <TIM_OC1_SetConfig+0x110>)
 8013920:	4293      	cmp	r3, r2
 8013922:	d00b      	beq.n	801393c <TIM_OC1_SetConfig+0x7c>
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	4a2b      	ldr	r2, [pc, #172]	; (80139d4 <TIM_OC1_SetConfig+0x114>)
 8013928:	4293      	cmp	r3, r2
 801392a:	d007      	beq.n	801393c <TIM_OC1_SetConfig+0x7c>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	4a2a      	ldr	r2, [pc, #168]	; (80139d8 <TIM_OC1_SetConfig+0x118>)
 8013930:	4293      	cmp	r3, r2
 8013932:	d003      	beq.n	801393c <TIM_OC1_SetConfig+0x7c>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	4a29      	ldr	r2, [pc, #164]	; (80139dc <TIM_OC1_SetConfig+0x11c>)
 8013938:	4293      	cmp	r3, r2
 801393a:	d10c      	bne.n	8013956 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	f023 0308 	bic.w	r3, r3, #8
 8013942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	68db      	ldr	r3, [r3, #12]
 8013948:	697a      	ldr	r2, [r7, #20]
 801394a:	4313      	orrs	r3, r2
 801394c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	f023 0304 	bic.w	r3, r3, #4
 8013954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	4a1c      	ldr	r2, [pc, #112]	; (80139cc <TIM_OC1_SetConfig+0x10c>)
 801395a:	4293      	cmp	r3, r2
 801395c:	d00f      	beq.n	801397e <TIM_OC1_SetConfig+0xbe>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4a1b      	ldr	r2, [pc, #108]	; (80139d0 <TIM_OC1_SetConfig+0x110>)
 8013962:	4293      	cmp	r3, r2
 8013964:	d00b      	beq.n	801397e <TIM_OC1_SetConfig+0xbe>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	4a1a      	ldr	r2, [pc, #104]	; (80139d4 <TIM_OC1_SetConfig+0x114>)
 801396a:	4293      	cmp	r3, r2
 801396c:	d007      	beq.n	801397e <TIM_OC1_SetConfig+0xbe>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	4a19      	ldr	r2, [pc, #100]	; (80139d8 <TIM_OC1_SetConfig+0x118>)
 8013972:	4293      	cmp	r3, r2
 8013974:	d003      	beq.n	801397e <TIM_OC1_SetConfig+0xbe>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	4a18      	ldr	r2, [pc, #96]	; (80139dc <TIM_OC1_SetConfig+0x11c>)
 801397a:	4293      	cmp	r3, r2
 801397c:	d111      	bne.n	80139a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801398c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	695b      	ldr	r3, [r3, #20]
 8013992:	693a      	ldr	r2, [r7, #16]
 8013994:	4313      	orrs	r3, r2
 8013996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	699b      	ldr	r3, [r3, #24]
 801399c:	693a      	ldr	r2, [r7, #16]
 801399e:	4313      	orrs	r3, r2
 80139a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	693a      	ldr	r2, [r7, #16]
 80139a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	68fa      	ldr	r2, [r7, #12]
 80139ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	685a      	ldr	r2, [r3, #4]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	697a      	ldr	r2, [r7, #20]
 80139ba:	621a      	str	r2, [r3, #32]
}
 80139bc:	bf00      	nop
 80139be:	371c      	adds	r7, #28
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr
 80139c8:	fffeff8f 	.word	0xfffeff8f
 80139cc:	40010000 	.word	0x40010000
 80139d0:	40010400 	.word	0x40010400
 80139d4:	40014000 	.word	0x40014000
 80139d8:	40014400 	.word	0x40014400
 80139dc:	40014800 	.word	0x40014800

080139e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80139e0:	b480      	push	{r7}
 80139e2:	b087      	sub	sp, #28
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6a1b      	ldr	r3, [r3, #32]
 80139ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6a1b      	ldr	r3, [r3, #32]
 80139f4:	f023 0210 	bic.w	r2, r3, #16
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	699b      	ldr	r3, [r3, #24]
 8013a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013a08:	68fa      	ldr	r2, [r7, #12]
 8013a0a:	4b34      	ldr	r3, [pc, #208]	; (8013adc <TIM_OC2_SetConfig+0xfc>)
 8013a0c:	4013      	ands	r3, r2
 8013a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	021b      	lsls	r3, r3, #8
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	4313      	orrs	r3, r2
 8013a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	f023 0320 	bic.w	r3, r3, #32
 8013a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	689b      	ldr	r3, [r3, #8]
 8013a30:	011b      	lsls	r3, r3, #4
 8013a32:	697a      	ldr	r2, [r7, #20]
 8013a34:	4313      	orrs	r3, r2
 8013a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	4a29      	ldr	r2, [pc, #164]	; (8013ae0 <TIM_OC2_SetConfig+0x100>)
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	d003      	beq.n	8013a48 <TIM_OC2_SetConfig+0x68>
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	4a28      	ldr	r2, [pc, #160]	; (8013ae4 <TIM_OC2_SetConfig+0x104>)
 8013a44:	4293      	cmp	r3, r2
 8013a46:	d10d      	bne.n	8013a64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	011b      	lsls	r3, r3, #4
 8013a56:	697a      	ldr	r2, [r7, #20]
 8013a58:	4313      	orrs	r3, r2
 8013a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	4a1e      	ldr	r2, [pc, #120]	; (8013ae0 <TIM_OC2_SetConfig+0x100>)
 8013a68:	4293      	cmp	r3, r2
 8013a6a:	d00f      	beq.n	8013a8c <TIM_OC2_SetConfig+0xac>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4a1d      	ldr	r2, [pc, #116]	; (8013ae4 <TIM_OC2_SetConfig+0x104>)
 8013a70:	4293      	cmp	r3, r2
 8013a72:	d00b      	beq.n	8013a8c <TIM_OC2_SetConfig+0xac>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	4a1c      	ldr	r2, [pc, #112]	; (8013ae8 <TIM_OC2_SetConfig+0x108>)
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d007      	beq.n	8013a8c <TIM_OC2_SetConfig+0xac>
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	4a1b      	ldr	r2, [pc, #108]	; (8013aec <TIM_OC2_SetConfig+0x10c>)
 8013a80:	4293      	cmp	r3, r2
 8013a82:	d003      	beq.n	8013a8c <TIM_OC2_SetConfig+0xac>
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	4a1a      	ldr	r2, [pc, #104]	; (8013af0 <TIM_OC2_SetConfig+0x110>)
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d113      	bne.n	8013ab4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013a8c:	693b      	ldr	r3, [r7, #16]
 8013a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	695b      	ldr	r3, [r3, #20]
 8013aa0:	009b      	lsls	r3, r3, #2
 8013aa2:	693a      	ldr	r2, [r7, #16]
 8013aa4:	4313      	orrs	r3, r2
 8013aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	699b      	ldr	r3, [r3, #24]
 8013aac:	009b      	lsls	r3, r3, #2
 8013aae:	693a      	ldr	r2, [r7, #16]
 8013ab0:	4313      	orrs	r3, r2
 8013ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	693a      	ldr	r2, [r7, #16]
 8013ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	68fa      	ldr	r2, [r7, #12]
 8013abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	685a      	ldr	r2, [r3, #4]
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	697a      	ldr	r2, [r7, #20]
 8013acc:	621a      	str	r2, [r3, #32]
}
 8013ace:	bf00      	nop
 8013ad0:	371c      	adds	r7, #28
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr
 8013ada:	bf00      	nop
 8013adc:	feff8fff 	.word	0xfeff8fff
 8013ae0:	40010000 	.word	0x40010000
 8013ae4:	40010400 	.word	0x40010400
 8013ae8:	40014000 	.word	0x40014000
 8013aec:	40014400 	.word	0x40014400
 8013af0:	40014800 	.word	0x40014800

08013af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013af4:	b480      	push	{r7}
 8013af6:	b087      	sub	sp, #28
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6a1b      	ldr	r3, [r3, #32]
 8013b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6a1b      	ldr	r3, [r3, #32]
 8013b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	685b      	ldr	r3, [r3, #4]
 8013b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	69db      	ldr	r3, [r3, #28]
 8013b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013b1c:	68fa      	ldr	r2, [r7, #12]
 8013b1e:	4b33      	ldr	r3, [pc, #204]	; (8013bec <TIM_OC3_SetConfig+0xf8>)
 8013b20:	4013      	ands	r3, r2
 8013b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	f023 0303 	bic.w	r3, r3, #3
 8013b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	68fa      	ldr	r2, [r7, #12]
 8013b32:	4313      	orrs	r3, r2
 8013b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	689b      	ldr	r3, [r3, #8]
 8013b42:	021b      	lsls	r3, r3, #8
 8013b44:	697a      	ldr	r2, [r7, #20]
 8013b46:	4313      	orrs	r3, r2
 8013b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	4a28      	ldr	r2, [pc, #160]	; (8013bf0 <TIM_OC3_SetConfig+0xfc>)
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	d003      	beq.n	8013b5a <TIM_OC3_SetConfig+0x66>
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	4a27      	ldr	r2, [pc, #156]	; (8013bf4 <TIM_OC3_SetConfig+0x100>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d10d      	bne.n	8013b76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	68db      	ldr	r3, [r3, #12]
 8013b66:	021b      	lsls	r3, r3, #8
 8013b68:	697a      	ldr	r2, [r7, #20]
 8013b6a:	4313      	orrs	r3, r2
 8013b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	4a1d      	ldr	r2, [pc, #116]	; (8013bf0 <TIM_OC3_SetConfig+0xfc>)
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d00f      	beq.n	8013b9e <TIM_OC3_SetConfig+0xaa>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	4a1c      	ldr	r2, [pc, #112]	; (8013bf4 <TIM_OC3_SetConfig+0x100>)
 8013b82:	4293      	cmp	r3, r2
 8013b84:	d00b      	beq.n	8013b9e <TIM_OC3_SetConfig+0xaa>
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	4a1b      	ldr	r2, [pc, #108]	; (8013bf8 <TIM_OC3_SetConfig+0x104>)
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	d007      	beq.n	8013b9e <TIM_OC3_SetConfig+0xaa>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	4a1a      	ldr	r2, [pc, #104]	; (8013bfc <TIM_OC3_SetConfig+0x108>)
 8013b92:	4293      	cmp	r3, r2
 8013b94:	d003      	beq.n	8013b9e <TIM_OC3_SetConfig+0xaa>
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	4a19      	ldr	r2, [pc, #100]	; (8013c00 <TIM_OC3_SetConfig+0x10c>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d113      	bne.n	8013bc6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	695b      	ldr	r3, [r3, #20]
 8013bb2:	011b      	lsls	r3, r3, #4
 8013bb4:	693a      	ldr	r2, [r7, #16]
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	699b      	ldr	r3, [r3, #24]
 8013bbe:	011b      	lsls	r3, r3, #4
 8013bc0:	693a      	ldr	r2, [r7, #16]
 8013bc2:	4313      	orrs	r3, r2
 8013bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	693a      	ldr	r2, [r7, #16]
 8013bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	68fa      	ldr	r2, [r7, #12]
 8013bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	685a      	ldr	r2, [r3, #4]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	697a      	ldr	r2, [r7, #20]
 8013bde:	621a      	str	r2, [r3, #32]
}
 8013be0:	bf00      	nop
 8013be2:	371c      	adds	r7, #28
 8013be4:	46bd      	mov	sp, r7
 8013be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bea:	4770      	bx	lr
 8013bec:	fffeff8f 	.word	0xfffeff8f
 8013bf0:	40010000 	.word	0x40010000
 8013bf4:	40010400 	.word	0x40010400
 8013bf8:	40014000 	.word	0x40014000
 8013bfc:	40014400 	.word	0x40014400
 8013c00:	40014800 	.word	0x40014800

08013c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c04:	b480      	push	{r7}
 8013c06:	b087      	sub	sp, #28
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6a1b      	ldr	r3, [r3, #32]
 8013c12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6a1b      	ldr	r3, [r3, #32]
 8013c18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	69db      	ldr	r3, [r3, #28]
 8013c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013c2c:	68fa      	ldr	r2, [r7, #12]
 8013c2e:	4b24      	ldr	r3, [pc, #144]	; (8013cc0 <TIM_OC4_SetConfig+0xbc>)
 8013c30:	4013      	ands	r3, r2
 8013c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	021b      	lsls	r3, r3, #8
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	4313      	orrs	r3, r2
 8013c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	689b      	ldr	r3, [r3, #8]
 8013c54:	031b      	lsls	r3, r3, #12
 8013c56:	693a      	ldr	r2, [r7, #16]
 8013c58:	4313      	orrs	r3, r2
 8013c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	4a19      	ldr	r2, [pc, #100]	; (8013cc4 <TIM_OC4_SetConfig+0xc0>)
 8013c60:	4293      	cmp	r3, r2
 8013c62:	d00f      	beq.n	8013c84 <TIM_OC4_SetConfig+0x80>
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	4a18      	ldr	r2, [pc, #96]	; (8013cc8 <TIM_OC4_SetConfig+0xc4>)
 8013c68:	4293      	cmp	r3, r2
 8013c6a:	d00b      	beq.n	8013c84 <TIM_OC4_SetConfig+0x80>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	4a17      	ldr	r2, [pc, #92]	; (8013ccc <TIM_OC4_SetConfig+0xc8>)
 8013c70:	4293      	cmp	r3, r2
 8013c72:	d007      	beq.n	8013c84 <TIM_OC4_SetConfig+0x80>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	4a16      	ldr	r2, [pc, #88]	; (8013cd0 <TIM_OC4_SetConfig+0xcc>)
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d003      	beq.n	8013c84 <TIM_OC4_SetConfig+0x80>
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	4a15      	ldr	r2, [pc, #84]	; (8013cd4 <TIM_OC4_SetConfig+0xd0>)
 8013c80:	4293      	cmp	r3, r2
 8013c82:	d109      	bne.n	8013c98 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013c8c:	683b      	ldr	r3, [r7, #0]
 8013c8e:	695b      	ldr	r3, [r3, #20]
 8013c90:	019b      	lsls	r3, r3, #6
 8013c92:	697a      	ldr	r2, [r7, #20]
 8013c94:	4313      	orrs	r3, r2
 8013c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	697a      	ldr	r2, [r7, #20]
 8013c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	68fa      	ldr	r2, [r7, #12]
 8013ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	685a      	ldr	r2, [r3, #4]
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	693a      	ldr	r2, [r7, #16]
 8013cb0:	621a      	str	r2, [r3, #32]
}
 8013cb2:	bf00      	nop
 8013cb4:	371c      	adds	r7, #28
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbc:	4770      	bx	lr
 8013cbe:	bf00      	nop
 8013cc0:	feff8fff 	.word	0xfeff8fff
 8013cc4:	40010000 	.word	0x40010000
 8013cc8:	40010400 	.word	0x40010400
 8013ccc:	40014000 	.word	0x40014000
 8013cd0:	40014400 	.word	0x40014400
 8013cd4:	40014800 	.word	0x40014800

08013cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b087      	sub	sp, #28
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6a1b      	ldr	r3, [r3, #32]
 8013ce6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6a1b      	ldr	r3, [r3, #32]
 8013cec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	685b      	ldr	r3, [r3, #4]
 8013cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013d00:	68fa      	ldr	r2, [r7, #12]
 8013d02:	4b21      	ldr	r3, [pc, #132]	; (8013d88 <TIM_OC5_SetConfig+0xb0>)
 8013d04:	4013      	ands	r3, r2
 8013d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	68fa      	ldr	r2, [r7, #12]
 8013d0e:	4313      	orrs	r3, r2
 8013d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	689b      	ldr	r3, [r3, #8]
 8013d1e:	041b      	lsls	r3, r3, #16
 8013d20:	693a      	ldr	r2, [r7, #16]
 8013d22:	4313      	orrs	r3, r2
 8013d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	4a18      	ldr	r2, [pc, #96]	; (8013d8c <TIM_OC5_SetConfig+0xb4>)
 8013d2a:	4293      	cmp	r3, r2
 8013d2c:	d00f      	beq.n	8013d4e <TIM_OC5_SetConfig+0x76>
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4a17      	ldr	r2, [pc, #92]	; (8013d90 <TIM_OC5_SetConfig+0xb8>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	d00b      	beq.n	8013d4e <TIM_OC5_SetConfig+0x76>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4a16      	ldr	r2, [pc, #88]	; (8013d94 <TIM_OC5_SetConfig+0xbc>)
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d007      	beq.n	8013d4e <TIM_OC5_SetConfig+0x76>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	4a15      	ldr	r2, [pc, #84]	; (8013d98 <TIM_OC5_SetConfig+0xc0>)
 8013d42:	4293      	cmp	r3, r2
 8013d44:	d003      	beq.n	8013d4e <TIM_OC5_SetConfig+0x76>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4a14      	ldr	r2, [pc, #80]	; (8013d9c <TIM_OC5_SetConfig+0xc4>)
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d109      	bne.n	8013d62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013d54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	695b      	ldr	r3, [r3, #20]
 8013d5a:	021b      	lsls	r3, r3, #8
 8013d5c:	697a      	ldr	r2, [r7, #20]
 8013d5e:	4313      	orrs	r3, r2
 8013d60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	697a      	ldr	r2, [r7, #20]
 8013d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	68fa      	ldr	r2, [r7, #12]
 8013d6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	685a      	ldr	r2, [r3, #4]
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	693a      	ldr	r2, [r7, #16]
 8013d7a:	621a      	str	r2, [r3, #32]
}
 8013d7c:	bf00      	nop
 8013d7e:	371c      	adds	r7, #28
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr
 8013d88:	fffeff8f 	.word	0xfffeff8f
 8013d8c:	40010000 	.word	0x40010000
 8013d90:	40010400 	.word	0x40010400
 8013d94:	40014000 	.word	0x40014000
 8013d98:	40014400 	.word	0x40014400
 8013d9c:	40014800 	.word	0x40014800

08013da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013da0:	b480      	push	{r7}
 8013da2:	b087      	sub	sp, #28
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6a1b      	ldr	r3, [r3, #32]
 8013dae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6a1b      	ldr	r3, [r3, #32]
 8013db4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	685b      	ldr	r3, [r3, #4]
 8013dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013dc8:	68fa      	ldr	r2, [r7, #12]
 8013dca:	4b22      	ldr	r3, [pc, #136]	; (8013e54 <TIM_OC6_SetConfig+0xb4>)
 8013dcc:	4013      	ands	r3, r2
 8013dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	021b      	lsls	r3, r3, #8
 8013dd6:	68fa      	ldr	r2, [r7, #12]
 8013dd8:	4313      	orrs	r3, r2
 8013dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013ddc:	693b      	ldr	r3, [r7, #16]
 8013dde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013de4:	683b      	ldr	r3, [r7, #0]
 8013de6:	689b      	ldr	r3, [r3, #8]
 8013de8:	051b      	lsls	r3, r3, #20
 8013dea:	693a      	ldr	r2, [r7, #16]
 8013dec:	4313      	orrs	r3, r2
 8013dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	4a19      	ldr	r2, [pc, #100]	; (8013e58 <TIM_OC6_SetConfig+0xb8>)
 8013df4:	4293      	cmp	r3, r2
 8013df6:	d00f      	beq.n	8013e18 <TIM_OC6_SetConfig+0x78>
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	4a18      	ldr	r2, [pc, #96]	; (8013e5c <TIM_OC6_SetConfig+0xbc>)
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d00b      	beq.n	8013e18 <TIM_OC6_SetConfig+0x78>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	4a17      	ldr	r2, [pc, #92]	; (8013e60 <TIM_OC6_SetConfig+0xc0>)
 8013e04:	4293      	cmp	r3, r2
 8013e06:	d007      	beq.n	8013e18 <TIM_OC6_SetConfig+0x78>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4a16      	ldr	r2, [pc, #88]	; (8013e64 <TIM_OC6_SetConfig+0xc4>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d003      	beq.n	8013e18 <TIM_OC6_SetConfig+0x78>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4a15      	ldr	r2, [pc, #84]	; (8013e68 <TIM_OC6_SetConfig+0xc8>)
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d109      	bne.n	8013e2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	695b      	ldr	r3, [r3, #20]
 8013e24:	029b      	lsls	r3, r3, #10
 8013e26:	697a      	ldr	r2, [r7, #20]
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	697a      	ldr	r2, [r7, #20]
 8013e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	68fa      	ldr	r2, [r7, #12]
 8013e36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	685a      	ldr	r2, [r3, #4]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	693a      	ldr	r2, [r7, #16]
 8013e44:	621a      	str	r2, [r3, #32]
}
 8013e46:	bf00      	nop
 8013e48:	371c      	adds	r7, #28
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e50:	4770      	bx	lr
 8013e52:	bf00      	nop
 8013e54:	feff8fff 	.word	0xfeff8fff
 8013e58:	40010000 	.word	0x40010000
 8013e5c:	40010400 	.word	0x40010400
 8013e60:	40014000 	.word	0x40014000
 8013e64:	40014400 	.word	0x40014400
 8013e68:	40014800 	.word	0x40014800

08013e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b087      	sub	sp, #28
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	60b9      	str	r1, [r7, #8]
 8013e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	6a1b      	ldr	r3, [r3, #32]
 8013e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	6a1b      	ldr	r3, [r3, #32]
 8013e82:	f023 0201 	bic.w	r2, r3, #1
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	699b      	ldr	r3, [r3, #24]
 8013e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	011b      	lsls	r3, r3, #4
 8013e9c:	693a      	ldr	r2, [r7, #16]
 8013e9e:	4313      	orrs	r3, r2
 8013ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	f023 030a 	bic.w	r3, r3, #10
 8013ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013eaa:	697a      	ldr	r2, [r7, #20]
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	4313      	orrs	r3, r2
 8013eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	693a      	ldr	r2, [r7, #16]
 8013eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	697a      	ldr	r2, [r7, #20]
 8013ebc:	621a      	str	r2, [r3, #32]
}
 8013ebe:	bf00      	nop
 8013ec0:	371c      	adds	r7, #28
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec8:	4770      	bx	lr

08013eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013eca:	b480      	push	{r7}
 8013ecc:	b087      	sub	sp, #28
 8013ece:	af00      	add	r7, sp, #0
 8013ed0:	60f8      	str	r0, [r7, #12]
 8013ed2:	60b9      	str	r1, [r7, #8]
 8013ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	6a1b      	ldr	r3, [r3, #32]
 8013eda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	6a1b      	ldr	r3, [r3, #32]
 8013ee0:	f023 0210 	bic.w	r2, r3, #16
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	699b      	ldr	r3, [r3, #24]
 8013eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	031b      	lsls	r3, r3, #12
 8013efa:	693a      	ldr	r2, [r7, #16]
 8013efc:	4313      	orrs	r3, r2
 8013efe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013f06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	011b      	lsls	r3, r3, #4
 8013f0c:	697a      	ldr	r2, [r7, #20]
 8013f0e:	4313      	orrs	r3, r2
 8013f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	693a      	ldr	r2, [r7, #16]
 8013f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	697a      	ldr	r2, [r7, #20]
 8013f1c:	621a      	str	r2, [r3, #32]
}
 8013f1e:	bf00      	nop
 8013f20:	371c      	adds	r7, #28
 8013f22:	46bd      	mov	sp, r7
 8013f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f28:	4770      	bx	lr
	...

08013f2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013f2c:	b480      	push	{r7}
 8013f2e:	b085      	sub	sp, #20
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
 8013f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	689b      	ldr	r3, [r3, #8]
 8013f3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013f3c:	68fa      	ldr	r2, [r7, #12]
 8013f3e:	4b09      	ldr	r3, [pc, #36]	; (8013f64 <TIM_ITRx_SetConfig+0x38>)
 8013f40:	4013      	ands	r3, r2
 8013f42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013f44:	683a      	ldr	r2, [r7, #0]
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	4313      	orrs	r3, r2
 8013f4a:	f043 0307 	orr.w	r3, r3, #7
 8013f4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	609a      	str	r2, [r3, #8]
}
 8013f56:	bf00      	nop
 8013f58:	3714      	adds	r7, #20
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr
 8013f62:	bf00      	nop
 8013f64:	ffcfff8f 	.word	0xffcfff8f

08013f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b087      	sub	sp, #28
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	607a      	str	r2, [r7, #4]
 8013f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	689b      	ldr	r3, [r3, #8]
 8013f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	021a      	lsls	r2, r3, #8
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	431a      	orrs	r2, r3
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	4313      	orrs	r3, r2
 8013f90:	697a      	ldr	r2, [r7, #20]
 8013f92:	4313      	orrs	r3, r2
 8013f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	697a      	ldr	r2, [r7, #20]
 8013f9a:	609a      	str	r2, [r3, #8]
}
 8013f9c:	bf00      	nop
 8013f9e:	371c      	adds	r7, #28
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa6:	4770      	bx	lr

08013fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013fa8:	b480      	push	{r7}
 8013faa:	b087      	sub	sp, #28
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	60b9      	str	r1, [r7, #8]
 8013fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	f003 031f 	and.w	r3, r3, #31
 8013fba:	2201      	movs	r2, #1
 8013fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8013fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	6a1a      	ldr	r2, [r3, #32]
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	43db      	mvns	r3, r3
 8013fca:	401a      	ands	r2, r3
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	6a1a      	ldr	r2, [r3, #32]
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	f003 031f 	and.w	r3, r3, #31
 8013fda:	6879      	ldr	r1, [r7, #4]
 8013fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8013fe0:	431a      	orrs	r2, r3
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	621a      	str	r2, [r3, #32]
}
 8013fe6:	bf00      	nop
 8013fe8:	371c      	adds	r7, #28
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr
	...

08013ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b085      	sub	sp, #20
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014004:	2b01      	cmp	r3, #1
 8014006:	d101      	bne.n	801400c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014008:	2302      	movs	r3, #2
 801400a:	e06d      	b.n	80140e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2201      	movs	r2, #1
 8014010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2202      	movs	r2, #2
 8014018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	689b      	ldr	r3, [r3, #8]
 801402a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	4a30      	ldr	r2, [pc, #192]	; (80140f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014032:	4293      	cmp	r3, r2
 8014034:	d004      	beq.n	8014040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	4a2f      	ldr	r2, [pc, #188]	; (80140f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801403c:	4293      	cmp	r3, r2
 801403e:	d108      	bne.n	8014052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8014046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	68fa      	ldr	r2, [r7, #12]
 801404e:	4313      	orrs	r3, r2
 8014050:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	68fa      	ldr	r2, [r7, #12]
 8014060:	4313      	orrs	r3, r2
 8014062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	68fa      	ldr	r2, [r7, #12]
 801406a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	4a20      	ldr	r2, [pc, #128]	; (80140f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014072:	4293      	cmp	r3, r2
 8014074:	d022      	beq.n	80140bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801407e:	d01d      	beq.n	80140bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	4a1d      	ldr	r2, [pc, #116]	; (80140fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014086:	4293      	cmp	r3, r2
 8014088:	d018      	beq.n	80140bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	4a1c      	ldr	r2, [pc, #112]	; (8014100 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014090:	4293      	cmp	r3, r2
 8014092:	d013      	beq.n	80140bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4a1a      	ldr	r2, [pc, #104]	; (8014104 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801409a:	4293      	cmp	r3, r2
 801409c:	d00e      	beq.n	80140bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4a15      	ldr	r2, [pc, #84]	; (80140f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d009      	beq.n	80140bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	4a16      	ldr	r2, [pc, #88]	; (8014108 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80140ae:	4293      	cmp	r3, r2
 80140b0:	d004      	beq.n	80140bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	4a15      	ldr	r2, [pc, #84]	; (801410c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80140b8:	4293      	cmp	r3, r2
 80140ba:	d10c      	bne.n	80140d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80140c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	689b      	ldr	r3, [r3, #8]
 80140c8:	68ba      	ldr	r2, [r7, #8]
 80140ca:	4313      	orrs	r3, r2
 80140cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	68ba      	ldr	r2, [r7, #8]
 80140d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2201      	movs	r2, #1
 80140da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2200      	movs	r2, #0
 80140e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80140e6:	2300      	movs	r3, #0
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	3714      	adds	r7, #20
 80140ec:	46bd      	mov	sp, r7
 80140ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f2:	4770      	bx	lr
 80140f4:	40010000 	.word	0x40010000
 80140f8:	40010400 	.word	0x40010400
 80140fc:	40000400 	.word	0x40000400
 8014100:	40000800 	.word	0x40000800
 8014104:	40000c00 	.word	0x40000c00
 8014108:	40001800 	.word	0x40001800
 801410c:	40014000 	.word	0x40014000

08014110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014110:	b480      	push	{r7}
 8014112:	b085      	sub	sp, #20
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801411a:	2300      	movs	r3, #0
 801411c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014124:	2b01      	cmp	r3, #1
 8014126:	d101      	bne.n	801412c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014128:	2302      	movs	r3, #2
 801412a:	e065      	b.n	80141f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2201      	movs	r2, #1
 8014130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	68db      	ldr	r3, [r3, #12]
 801413e:	4313      	orrs	r3, r2
 8014140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	689b      	ldr	r3, [r3, #8]
 801414c:	4313      	orrs	r3, r2
 801414e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	685b      	ldr	r3, [r3, #4]
 801415a:	4313      	orrs	r3, r2
 801415c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	4313      	orrs	r3, r2
 801416a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	691b      	ldr	r3, [r3, #16]
 8014176:	4313      	orrs	r3, r2
 8014178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	695b      	ldr	r3, [r3, #20]
 8014184:	4313      	orrs	r3, r2
 8014186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801418e:	683b      	ldr	r3, [r7, #0]
 8014190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014192:	4313      	orrs	r3, r2
 8014194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	699b      	ldr	r3, [r3, #24]
 80141a0:	041b      	lsls	r3, r3, #16
 80141a2:	4313      	orrs	r3, r2
 80141a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	4a16      	ldr	r2, [pc, #88]	; (8014204 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80141ac:	4293      	cmp	r3, r2
 80141ae:	d004      	beq.n	80141ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	4a14      	ldr	r2, [pc, #80]	; (8014208 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80141b6:	4293      	cmp	r3, r2
 80141b8:	d115      	bne.n	80141e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c4:	051b      	lsls	r3, r3, #20
 80141c6:	4313      	orrs	r3, r2
 80141c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	69db      	ldr	r3, [r3, #28]
 80141d4:	4313      	orrs	r3, r2
 80141d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	6a1b      	ldr	r3, [r3, #32]
 80141e2:	4313      	orrs	r3, r2
 80141e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	68fa      	ldr	r2, [r7, #12]
 80141ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2200      	movs	r2, #0
 80141f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80141f6:	2300      	movs	r3, #0
}
 80141f8:	4618      	mov	r0, r3
 80141fa:	3714      	adds	r7, #20
 80141fc:	46bd      	mov	sp, r7
 80141fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014202:	4770      	bx	lr
 8014204:	40010000 	.word	0x40010000
 8014208:	40010400 	.word	0x40010400

0801420c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801420c:	b480      	push	{r7}
 801420e:	b083      	sub	sp, #12
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014214:	bf00      	nop
 8014216:	370c      	adds	r7, #12
 8014218:	46bd      	mov	sp, r7
 801421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421e:	4770      	bx	lr

08014220 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014220:	b480      	push	{r7}
 8014222:	b083      	sub	sp, #12
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014228:	bf00      	nop
 801422a:	370c      	adds	r7, #12
 801422c:	46bd      	mov	sp, r7
 801422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014232:	4770      	bx	lr

08014234 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014234:	b480      	push	{r7}
 8014236:	b083      	sub	sp, #12
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801423c:	bf00      	nop
 801423e:	370c      	adds	r7, #12
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr

08014248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d101      	bne.n	801425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014256:	2301      	movs	r3, #1
 8014258:	e042      	b.n	80142e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014260:	2b00      	cmp	r3, #0
 8014262:	d106      	bne.n	8014272 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2200      	movs	r2, #0
 8014268:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7f1 f989 	bl	8005584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2224      	movs	r2, #36	; 0x24
 8014276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	681a      	ldr	r2, [r3, #0]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	f022 0201 	bic.w	r2, r2, #1
 8014288:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801428e:	2b00      	cmp	r3, #0
 8014290:	d002      	beq.n	8014298 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f001 fbc2 	bl	8015a1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f000 fe57 	bl	8014f4c <UART_SetConfig>
 801429e:	4603      	mov	r3, r0
 80142a0:	2b01      	cmp	r3, #1
 80142a2:	d101      	bne.n	80142a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80142a4:	2301      	movs	r3, #1
 80142a6:	e01b      	b.n	80142e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	685a      	ldr	r2, [r3, #4]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80142b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	689a      	ldr	r2, [r3, #8]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80142c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	681a      	ldr	r2, [r3, #0]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	f042 0201 	orr.w	r2, r2, #1
 80142d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f001 fc41 	bl	8015b60 <UART_CheckIdleState>
 80142de:	4603      	mov	r3, r0
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3708      	adds	r7, #8
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b08a      	sub	sp, #40	; 0x28
 80142ec:	af02      	add	r7, sp, #8
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	603b      	str	r3, [r7, #0]
 80142f4:	4613      	mov	r3, r2
 80142f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80142fe:	2b20      	cmp	r3, #32
 8014300:	d17b      	bne.n	80143fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d002      	beq.n	801430e <HAL_UART_Transmit+0x26>
 8014308:	88fb      	ldrh	r3, [r7, #6]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d101      	bne.n	8014312 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801430e:	2301      	movs	r3, #1
 8014310:	e074      	b.n	80143fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	2200      	movs	r2, #0
 8014316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	2221      	movs	r2, #33	; 0x21
 801431e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014322:	f7f1 fd7d 	bl	8005e20 <HAL_GetTick>
 8014326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	88fa      	ldrh	r2, [r7, #6]
 801432c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	88fa      	ldrh	r2, [r7, #6]
 8014334:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	689b      	ldr	r3, [r3, #8]
 801433c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014340:	d108      	bne.n	8014354 <HAL_UART_Transmit+0x6c>
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	691b      	ldr	r3, [r3, #16]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d104      	bne.n	8014354 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801434a:	2300      	movs	r3, #0
 801434c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	61bb      	str	r3, [r7, #24]
 8014352:	e003      	b.n	801435c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014358:	2300      	movs	r3, #0
 801435a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801435c:	e030      	b.n	80143c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	9300      	str	r3, [sp, #0]
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	2200      	movs	r2, #0
 8014366:	2180      	movs	r1, #128	; 0x80
 8014368:	68f8      	ldr	r0, [r7, #12]
 801436a:	f001 fca3 	bl	8015cb4 <UART_WaitOnFlagUntilTimeout>
 801436e:	4603      	mov	r3, r0
 8014370:	2b00      	cmp	r3, #0
 8014372:	d005      	beq.n	8014380 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	2220      	movs	r2, #32
 8014378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801437c:	2303      	movs	r3, #3
 801437e:	e03d      	b.n	80143fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d10b      	bne.n	801439e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014386:	69bb      	ldr	r3, [r7, #24]
 8014388:	881b      	ldrh	r3, [r3, #0]
 801438a:	461a      	mov	r2, r3
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014394:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8014396:	69bb      	ldr	r3, [r7, #24]
 8014398:	3302      	adds	r3, #2
 801439a:	61bb      	str	r3, [r7, #24]
 801439c:	e007      	b.n	80143ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801439e:	69fb      	ldr	r3, [r7, #28]
 80143a0:	781a      	ldrb	r2, [r3, #0]
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80143a8:	69fb      	ldr	r3, [r7, #28]
 80143aa:	3301      	adds	r3, #1
 80143ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80143b4:	b29b      	uxth	r3, r3
 80143b6:	3b01      	subs	r3, #1
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d1c8      	bne.n	801435e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	697b      	ldr	r3, [r7, #20]
 80143d2:	2200      	movs	r2, #0
 80143d4:	2140      	movs	r1, #64	; 0x40
 80143d6:	68f8      	ldr	r0, [r7, #12]
 80143d8:	f001 fc6c 	bl	8015cb4 <UART_WaitOnFlagUntilTimeout>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d005      	beq.n	80143ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2220      	movs	r2, #32
 80143e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80143ea:	2303      	movs	r3, #3
 80143ec:	e006      	b.n	80143fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	2220      	movs	r2, #32
 80143f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80143f6:	2300      	movs	r3, #0
 80143f8:	e000      	b.n	80143fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80143fa:	2302      	movs	r3, #2
  }
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3720      	adds	r7, #32
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}

08014404 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b08a      	sub	sp, #40	; 0x28
 8014408:	af02      	add	r7, sp, #8
 801440a:	60f8      	str	r0, [r7, #12]
 801440c:	60b9      	str	r1, [r7, #8]
 801440e:	603b      	str	r3, [r7, #0]
 8014410:	4613      	mov	r3, r2
 8014412:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801441a:	2b20      	cmp	r3, #32
 801441c:	f040 80b5 	bne.w	801458a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d002      	beq.n	801442c <HAL_UART_Receive+0x28>
 8014426:	88fb      	ldrh	r3, [r7, #6]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d101      	bne.n	8014430 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801442c:	2301      	movs	r3, #1
 801442e:	e0ad      	b.n	801458c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	2200      	movs	r2, #0
 8014434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	2222      	movs	r2, #34	; 0x22
 801443c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	2200      	movs	r2, #0
 8014444:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014446:	f7f1 fceb 	bl	8005e20 <HAL_GetTick>
 801444a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	88fa      	ldrh	r2, [r7, #6]
 8014450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	88fa      	ldrh	r2, [r7, #6]
 8014458:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	689b      	ldr	r3, [r3, #8]
 8014460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014464:	d10e      	bne.n	8014484 <HAL_UART_Receive+0x80>
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	691b      	ldr	r3, [r3, #16]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d105      	bne.n	801447a <HAL_UART_Receive+0x76>
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014474:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014478:	e02d      	b.n	80144d6 <HAL_UART_Receive+0xd2>
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	22ff      	movs	r2, #255	; 0xff
 801447e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014482:	e028      	b.n	80144d6 <HAL_UART_Receive+0xd2>
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	689b      	ldr	r3, [r3, #8]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d10d      	bne.n	80144a8 <HAL_UART_Receive+0xa4>
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	691b      	ldr	r3, [r3, #16]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d104      	bne.n	801449e <HAL_UART_Receive+0x9a>
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	22ff      	movs	r2, #255	; 0xff
 8014498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801449c:	e01b      	b.n	80144d6 <HAL_UART_Receive+0xd2>
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	227f      	movs	r2, #127	; 0x7f
 80144a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144a6:	e016      	b.n	80144d6 <HAL_UART_Receive+0xd2>
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	689b      	ldr	r3, [r3, #8]
 80144ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80144b0:	d10d      	bne.n	80144ce <HAL_UART_Receive+0xca>
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	691b      	ldr	r3, [r3, #16]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d104      	bne.n	80144c4 <HAL_UART_Receive+0xc0>
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	227f      	movs	r2, #127	; 0x7f
 80144be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144c2:	e008      	b.n	80144d6 <HAL_UART_Receive+0xd2>
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	223f      	movs	r2, #63	; 0x3f
 80144c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144cc:	e003      	b.n	80144d6 <HAL_UART_Receive+0xd2>
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	2200      	movs	r2, #0
 80144d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80144dc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	689b      	ldr	r3, [r3, #8]
 80144e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80144e6:	d108      	bne.n	80144fa <HAL_UART_Receive+0xf6>
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	691b      	ldr	r3, [r3, #16]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d104      	bne.n	80144fa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80144f0:	2300      	movs	r3, #0
 80144f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	61bb      	str	r3, [r7, #24]
 80144f8:	e003      	b.n	8014502 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80144fe:	2300      	movs	r3, #0
 8014500:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014502:	e036      	b.n	8014572 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	9300      	str	r3, [sp, #0]
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	2200      	movs	r2, #0
 801450c:	2120      	movs	r1, #32
 801450e:	68f8      	ldr	r0, [r7, #12]
 8014510:	f001 fbd0 	bl	8015cb4 <UART_WaitOnFlagUntilTimeout>
 8014514:	4603      	mov	r3, r0
 8014516:	2b00      	cmp	r3, #0
 8014518:	d005      	beq.n	8014526 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	2220      	movs	r2, #32
 801451e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8014522:	2303      	movs	r3, #3
 8014524:	e032      	b.n	801458c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d10c      	bne.n	8014546 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014532:	b29a      	uxth	r2, r3
 8014534:	8a7b      	ldrh	r3, [r7, #18]
 8014536:	4013      	ands	r3, r2
 8014538:	b29a      	uxth	r2, r3
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801453e:	69bb      	ldr	r3, [r7, #24]
 8014540:	3302      	adds	r3, #2
 8014542:	61bb      	str	r3, [r7, #24]
 8014544:	e00c      	b.n	8014560 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801454c:	b2da      	uxtb	r2, r3
 801454e:	8a7b      	ldrh	r3, [r7, #18]
 8014550:	b2db      	uxtb	r3, r3
 8014552:	4013      	ands	r3, r2
 8014554:	b2da      	uxtb	r2, r3
 8014556:	69fb      	ldr	r3, [r7, #28]
 8014558:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801455a:	69fb      	ldr	r3, [r7, #28]
 801455c:	3301      	adds	r3, #1
 801455e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014566:	b29b      	uxth	r3, r3
 8014568:	3b01      	subs	r3, #1
 801456a:	b29a      	uxth	r2, r3
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014578:	b29b      	uxth	r3, r3
 801457a:	2b00      	cmp	r3, #0
 801457c:	d1c2      	bne.n	8014504 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2220      	movs	r2, #32
 8014582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8014586:	2300      	movs	r3, #0
 8014588:	e000      	b.n	801458c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801458a:	2302      	movs	r3, #2
  }
}
 801458c:	4618      	mov	r0, r3
 801458e:	3720      	adds	r7, #32
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}

08014594 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b08a      	sub	sp, #40	; 0x28
 8014598:	af00      	add	r7, sp, #0
 801459a:	60f8      	str	r0, [r7, #12]
 801459c:	60b9      	str	r1, [r7, #8]
 801459e:	4613      	mov	r3, r2
 80145a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145a8:	2b20      	cmp	r3, #32
 80145aa:	d137      	bne.n	801461c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d002      	beq.n	80145b8 <HAL_UART_Receive_IT+0x24>
 80145b2:	88fb      	ldrh	r3, [r7, #6]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d101      	bne.n	80145bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80145b8:	2301      	movs	r3, #1
 80145ba:	e030      	b.n	801461e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	2200      	movs	r2, #0
 80145c0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	4a18      	ldr	r2, [pc, #96]	; (8014628 <HAL_UART_Receive_IT+0x94>)
 80145c8:	4293      	cmp	r3, r2
 80145ca:	d01f      	beq.n	801460c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d018      	beq.n	801460c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	e853 3f00 	ldrex	r3, [r3]
 80145e6:	613b      	str	r3, [r7, #16]
   return(result);
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80145ee:	627b      	str	r3, [r7, #36]	; 0x24
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	461a      	mov	r2, r3
 80145f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145f8:	623b      	str	r3, [r7, #32]
 80145fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145fc:	69f9      	ldr	r1, [r7, #28]
 80145fe:	6a3a      	ldr	r2, [r7, #32]
 8014600:	e841 2300 	strex	r3, r2, [r1]
 8014604:	61bb      	str	r3, [r7, #24]
   return(result);
 8014606:	69bb      	ldr	r3, [r7, #24]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d1e6      	bne.n	80145da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801460c:	88fb      	ldrh	r3, [r7, #6]
 801460e:	461a      	mov	r2, r3
 8014610:	68b9      	ldr	r1, [r7, #8]
 8014612:	68f8      	ldr	r0, [r7, #12]
 8014614:	f001 fbbc 	bl	8015d90 <UART_Start_Receive_IT>
 8014618:	4603      	mov	r3, r0
 801461a:	e000      	b.n	801461e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801461c:	2302      	movs	r3, #2
  }
}
 801461e:	4618      	mov	r0, r3
 8014620:	3728      	adds	r7, #40	; 0x28
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
 8014626:	bf00      	nop
 8014628:	58000c00 	.word	0x58000c00

0801462c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b09a      	sub	sp, #104	; 0x68
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801463a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801463c:	e853 3f00 	ldrex	r3, [r3]
 8014640:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014648:	667b      	str	r3, [r7, #100]	; 0x64
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	461a      	mov	r2, r3
 8014650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014652:	657b      	str	r3, [r7, #84]	; 0x54
 8014654:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014656:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801465a:	e841 2300 	strex	r3, r2, [r1]
 801465e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014662:	2b00      	cmp	r3, #0
 8014664:	d1e6      	bne.n	8014634 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	3308      	adds	r3, #8
 801466c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014670:	e853 3f00 	ldrex	r3, [r3]
 8014674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014678:	4b46      	ldr	r3, [pc, #280]	; (8014794 <HAL_UART_AbortReceive+0x168>)
 801467a:	4013      	ands	r3, r2
 801467c:	663b      	str	r3, [r7, #96]	; 0x60
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	3308      	adds	r3, #8
 8014684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014686:	643a      	str	r2, [r7, #64]	; 0x40
 8014688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801468a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801468c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801468e:	e841 2300 	strex	r3, r2, [r1]
 8014692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014696:	2b00      	cmp	r3, #0
 8014698:	d1e5      	bne.n	8014666 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801469e:	2b01      	cmp	r3, #1
 80146a0:	d118      	bne.n	80146d4 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146a8:	6a3b      	ldr	r3, [r7, #32]
 80146aa:	e853 3f00 	ldrex	r3, [r3]
 80146ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	f023 0310 	bic.w	r3, r3, #16
 80146b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	461a      	mov	r2, r3
 80146be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80146c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80146c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146c8:	e841 2300 	strex	r3, r2, [r1]
 80146cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80146ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d1e6      	bne.n	80146a2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	689b      	ldr	r3, [r3, #8]
 80146da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146de:	2b40      	cmp	r3, #64	; 0x40
 80146e0:	d13b      	bne.n	801475a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	3308      	adds	r3, #8
 80146e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	e853 3f00 	ldrex	r3, [r3]
 80146f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80146f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	3308      	adds	r3, #8
 8014700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014702:	61ba      	str	r2, [r7, #24]
 8014704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014706:	6979      	ldr	r1, [r7, #20]
 8014708:	69ba      	ldr	r2, [r7, #24]
 801470a:	e841 2300 	strex	r3, r2, [r1]
 801470e:	613b      	str	r3, [r7, #16]
   return(result);
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d1e5      	bne.n	80146e2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801471c:	2b00      	cmp	r3, #0
 801471e:	d01c      	beq.n	801475a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014726:	2200      	movs	r2, #0
 8014728:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014730:	4618      	mov	r0, r3
 8014732:	f7f4 fa63 	bl	8008bfc <HAL_DMA_Abort>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00e      	beq.n	801475a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014742:	4618      	mov	r0, r3
 8014744:	f7f5 fef6 	bl	800a534 <HAL_DMA_GetError>
 8014748:	4603      	mov	r3, r0
 801474a:	2b20      	cmp	r3, #32
 801474c:	d105      	bne.n	801475a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2210      	movs	r2, #16
 8014752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8014756:	2303      	movs	r3, #3
 8014758:	e017      	b.n	801478a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	2200      	movs	r2, #0
 801475e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	220f      	movs	r2, #15
 8014768:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	699a      	ldr	r2, [r3, #24]
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	f042 0208 	orr.w	r2, r2, #8
 8014778:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	2220      	movs	r2, #32
 801477e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2200      	movs	r2, #0
 8014786:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8014788:	2300      	movs	r3, #0
}
 801478a:	4618      	mov	r0, r3
 801478c:	3768      	adds	r7, #104	; 0x68
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}
 8014792:	bf00      	nop
 8014794:	effffffe 	.word	0xeffffffe

08014798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b0ba      	sub	sp, #232	; 0xe8
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	69db      	ldr	r3, [r3, #28]
 80147a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	689b      	ldr	r3, [r3, #8]
 80147ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80147be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80147c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80147c6:	4013      	ands	r3, r2
 80147c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80147cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d11b      	bne.n	801480c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80147d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80147d8:	f003 0320 	and.w	r3, r3, #32
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d015      	beq.n	801480c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80147e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80147e4:	f003 0320 	and.w	r3, r3, #32
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d105      	bne.n	80147f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80147ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80147f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d009      	beq.n	801480c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	f000 8377 	beq.w	8014ef0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	4798      	blx	r3
      }
      return;
 801480a:	e371      	b.n	8014ef0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801480c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014810:	2b00      	cmp	r3, #0
 8014812:	f000 8123 	beq.w	8014a5c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014816:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801481a:	4b8d      	ldr	r3, [pc, #564]	; (8014a50 <HAL_UART_IRQHandler+0x2b8>)
 801481c:	4013      	ands	r3, r2
 801481e:	2b00      	cmp	r3, #0
 8014820:	d106      	bne.n	8014830 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014822:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014826:	4b8b      	ldr	r3, [pc, #556]	; (8014a54 <HAL_UART_IRQHandler+0x2bc>)
 8014828:	4013      	ands	r3, r2
 801482a:	2b00      	cmp	r3, #0
 801482c:	f000 8116 	beq.w	8014a5c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014834:	f003 0301 	and.w	r3, r3, #1
 8014838:	2b00      	cmp	r3, #0
 801483a:	d011      	beq.n	8014860 <HAL_UART_IRQHandler+0xc8>
 801483c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014844:	2b00      	cmp	r3, #0
 8014846:	d00b      	beq.n	8014860 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2201      	movs	r2, #1
 801484e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014856:	f043 0201 	orr.w	r2, r3, #1
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014864:	f003 0302 	and.w	r3, r3, #2
 8014868:	2b00      	cmp	r3, #0
 801486a:	d011      	beq.n	8014890 <HAL_UART_IRQHandler+0xf8>
 801486c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014870:	f003 0301 	and.w	r3, r3, #1
 8014874:	2b00      	cmp	r3, #0
 8014876:	d00b      	beq.n	8014890 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	2202      	movs	r2, #2
 801487e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014886:	f043 0204 	orr.w	r2, r3, #4
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014894:	f003 0304 	and.w	r3, r3, #4
 8014898:	2b00      	cmp	r3, #0
 801489a:	d011      	beq.n	80148c0 <HAL_UART_IRQHandler+0x128>
 801489c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148a0:	f003 0301 	and.w	r3, r3, #1
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d00b      	beq.n	80148c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	2204      	movs	r2, #4
 80148ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80148b6:	f043 0202 	orr.w	r2, r3, #2
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80148c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80148c4:	f003 0308 	and.w	r3, r3, #8
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d017      	beq.n	80148fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80148cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80148d0:	f003 0320 	and.w	r3, r3, #32
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d105      	bne.n	80148e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80148d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80148dc:	4b5c      	ldr	r3, [pc, #368]	; (8014a50 <HAL_UART_IRQHandler+0x2b8>)
 80148de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d00b      	beq.n	80148fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	2208      	movs	r2, #8
 80148ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80148f2:	f043 0208 	orr.w	r2, r3, #8
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80148fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014904:	2b00      	cmp	r3, #0
 8014906:	d012      	beq.n	801492e <HAL_UART_IRQHandler+0x196>
 8014908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801490c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014910:	2b00      	cmp	r3, #0
 8014912:	d00c      	beq.n	801492e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801491c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014924:	f043 0220 	orr.w	r2, r3, #32
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014934:	2b00      	cmp	r3, #0
 8014936:	f000 82dd 	beq.w	8014ef4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801493e:	f003 0320 	and.w	r3, r3, #32
 8014942:	2b00      	cmp	r3, #0
 8014944:	d013      	beq.n	801496e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801494a:	f003 0320 	and.w	r3, r3, #32
 801494e:	2b00      	cmp	r3, #0
 8014950:	d105      	bne.n	801495e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801495a:	2b00      	cmp	r3, #0
 801495c:	d007      	beq.n	801496e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014962:	2b00      	cmp	r3, #0
 8014964:	d003      	beq.n	801496e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	689b      	ldr	r3, [r3, #8]
 801497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014982:	2b40      	cmp	r3, #64	; 0x40
 8014984:	d005      	beq.n	8014992 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801498a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801498e:	2b00      	cmp	r3, #0
 8014990:	d054      	beq.n	8014a3c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f001 fb1e 	bl	8015fd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	689b      	ldr	r3, [r3, #8]
 801499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149a2:	2b40      	cmp	r3, #64	; 0x40
 80149a4:	d146      	bne.n	8014a34 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	3308      	adds	r3, #8
 80149ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80149b4:	e853 3f00 	ldrex	r3, [r3]
 80149b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80149bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80149c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80149c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	3308      	adds	r3, #8
 80149ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80149d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80149d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80149de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80149e2:	e841 2300 	strex	r3, r2, [r1]
 80149e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80149ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d1d9      	bne.n	80149a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d017      	beq.n	8014a2c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014a02:	4a15      	ldr	r2, [pc, #84]	; (8014a58 <HAL_UART_IRQHandler+0x2c0>)
 8014a04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7f4 fc13 	bl	8009238 <HAL_DMA_Abort_IT>
 8014a12:	4603      	mov	r3, r0
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d019      	beq.n	8014a4c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a20:	687a      	ldr	r2, [r7, #4]
 8014a22:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014a26:	4610      	mov	r0, r2
 8014a28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a2a:	e00f      	b.n	8014a4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f000 fa77 	bl	8014f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a32:	e00b      	b.n	8014a4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f000 fa73 	bl	8014f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a3a:	e007      	b.n	8014a4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f000 fa6f 	bl	8014f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2200      	movs	r2, #0
 8014a46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8014a4a:	e253      	b.n	8014ef4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a4c:	bf00      	nop
    return;
 8014a4e:	e251      	b.n	8014ef4 <HAL_UART_IRQHandler+0x75c>
 8014a50:	10000001 	.word	0x10000001
 8014a54:	04000120 	.word	0x04000120
 8014a58:	080160a1 	.word	0x080160a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a60:	2b01      	cmp	r3, #1
 8014a62:	f040 81e7 	bne.w	8014e34 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a6a:	f003 0310 	and.w	r3, r3, #16
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	f000 81e0 	beq.w	8014e34 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a78:	f003 0310 	and.w	r3, r3, #16
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	f000 81d9 	beq.w	8014e34 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	2210      	movs	r2, #16
 8014a88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	689b      	ldr	r3, [r3, #8]
 8014a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a94:	2b40      	cmp	r3, #64	; 0x40
 8014a96:	f040 8151 	bne.w	8014d3c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	4a96      	ldr	r2, [pc, #600]	; (8014cfc <HAL_UART_IRQHandler+0x564>)
 8014aa4:	4293      	cmp	r3, r2
 8014aa6:	d068      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	4a93      	ldr	r2, [pc, #588]	; (8014d00 <HAL_UART_IRQHandler+0x568>)
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	d061      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	4a91      	ldr	r2, [pc, #580]	; (8014d04 <HAL_UART_IRQHandler+0x56c>)
 8014ac0:	4293      	cmp	r3, r2
 8014ac2:	d05a      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	4a8e      	ldr	r2, [pc, #568]	; (8014d08 <HAL_UART_IRQHandler+0x570>)
 8014ace:	4293      	cmp	r3, r2
 8014ad0:	d053      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	4a8c      	ldr	r2, [pc, #560]	; (8014d0c <HAL_UART_IRQHandler+0x574>)
 8014adc:	4293      	cmp	r3, r2
 8014ade:	d04c      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	4a89      	ldr	r2, [pc, #548]	; (8014d10 <HAL_UART_IRQHandler+0x578>)
 8014aea:	4293      	cmp	r3, r2
 8014aec:	d045      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	4a87      	ldr	r2, [pc, #540]	; (8014d14 <HAL_UART_IRQHandler+0x57c>)
 8014af8:	4293      	cmp	r3, r2
 8014afa:	d03e      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	4a84      	ldr	r2, [pc, #528]	; (8014d18 <HAL_UART_IRQHandler+0x580>)
 8014b06:	4293      	cmp	r3, r2
 8014b08:	d037      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	4a82      	ldr	r2, [pc, #520]	; (8014d1c <HAL_UART_IRQHandler+0x584>)
 8014b14:	4293      	cmp	r3, r2
 8014b16:	d030      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4a7f      	ldr	r2, [pc, #508]	; (8014d20 <HAL_UART_IRQHandler+0x588>)
 8014b22:	4293      	cmp	r3, r2
 8014b24:	d029      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	4a7d      	ldr	r2, [pc, #500]	; (8014d24 <HAL_UART_IRQHandler+0x58c>)
 8014b30:	4293      	cmp	r3, r2
 8014b32:	d022      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	4a7a      	ldr	r2, [pc, #488]	; (8014d28 <HAL_UART_IRQHandler+0x590>)
 8014b3e:	4293      	cmp	r3, r2
 8014b40:	d01b      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	4a78      	ldr	r2, [pc, #480]	; (8014d2c <HAL_UART_IRQHandler+0x594>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d014      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	4a75      	ldr	r2, [pc, #468]	; (8014d30 <HAL_UART_IRQHandler+0x598>)
 8014b5a:	4293      	cmp	r3, r2
 8014b5c:	d00d      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	4a73      	ldr	r2, [pc, #460]	; (8014d34 <HAL_UART_IRQHandler+0x59c>)
 8014b68:	4293      	cmp	r3, r2
 8014b6a:	d006      	beq.n	8014b7a <HAL_UART_IRQHandler+0x3e2>
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	4a70      	ldr	r2, [pc, #448]	; (8014d38 <HAL_UART_IRQHandler+0x5a0>)
 8014b76:	4293      	cmp	r3, r2
 8014b78:	d106      	bne.n	8014b88 <HAL_UART_IRQHandler+0x3f0>
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	b29b      	uxth	r3, r3
 8014b86:	e005      	b.n	8014b94 <HAL_UART_IRQHandler+0x3fc>
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014b98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	f000 81ab 	beq.w	8014ef8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014ba8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014bac:	429a      	cmp	r2, r3
 8014bae:	f080 81a3 	bcs.w	8014ef8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014bb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014bc2:	69db      	ldr	r3, [r3, #28]
 8014bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bc8:	f000 8087 	beq.w	8014cda <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014bd8:	e853 3f00 	ldrex	r3, [r3]
 8014bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014bfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014c06:	e841 2300 	strex	r3, r2, [r1]
 8014c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d1da      	bne.n	8014bcc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	3308      	adds	r3, #8
 8014c1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014c20:	e853 3f00 	ldrex	r3, [r3]
 8014c24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c28:	f023 0301 	bic.w	r3, r3, #1
 8014c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	3308      	adds	r3, #8
 8014c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014c3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014c46:	e841 2300 	strex	r3, r2, [r1]
 8014c4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d1e1      	bne.n	8014c16 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	3308      	adds	r3, #8
 8014c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014c5c:	e853 3f00 	ldrex	r3, [r3]
 8014c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	3308      	adds	r3, #8
 8014c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014c76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014c78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014c7e:	e841 2300 	strex	r3, r2, [r1]
 8014c82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d1e3      	bne.n	8014c52 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	2220      	movs	r2, #32
 8014c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2200      	movs	r2, #0
 8014c96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ca0:	e853 3f00 	ldrex	r3, [r3]
 8014ca4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ca8:	f023 0310 	bic.w	r3, r3, #16
 8014cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014cba:	65bb      	str	r3, [r7, #88]	; 0x58
 8014cbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014cc2:	e841 2300 	strex	r3, r2, [r1]
 8014cc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d1e4      	bne.n	8014c98 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7f3 ff91 	bl	8008bfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2202      	movs	r2, #2
 8014cde:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	b29b      	uxth	r3, r3
 8014cf2:	4619      	mov	r1, r3
 8014cf4:	6878      	ldr	r0, [r7, #4]
 8014cf6:	f000 f91d 	bl	8014f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014cfa:	e0fd      	b.n	8014ef8 <HAL_UART_IRQHandler+0x760>
 8014cfc:	40020010 	.word	0x40020010
 8014d00:	40020028 	.word	0x40020028
 8014d04:	40020040 	.word	0x40020040
 8014d08:	40020058 	.word	0x40020058
 8014d0c:	40020070 	.word	0x40020070
 8014d10:	40020088 	.word	0x40020088
 8014d14:	400200a0 	.word	0x400200a0
 8014d18:	400200b8 	.word	0x400200b8
 8014d1c:	40020410 	.word	0x40020410
 8014d20:	40020428 	.word	0x40020428
 8014d24:	40020440 	.word	0x40020440
 8014d28:	40020458 	.word	0x40020458
 8014d2c:	40020470 	.word	0x40020470
 8014d30:	40020488 	.word	0x40020488
 8014d34:	400204a0 	.word	0x400204a0
 8014d38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	1ad3      	subs	r3, r2, r3
 8014d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f000 80cf 	beq.w	8014efc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	f000 80ca 	beq.w	8014efc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d70:	e853 3f00 	ldrex	r3, [r3]
 8014d74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	461a      	mov	r2, r3
 8014d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8014d8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d92:	e841 2300 	strex	r3, r2, [r1]
 8014d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d1e4      	bne.n	8014d68 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	3308      	adds	r3, #8
 8014da4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da8:	e853 3f00 	ldrex	r3, [r3]
 8014dac:	623b      	str	r3, [r7, #32]
   return(result);
 8014dae:	6a3a      	ldr	r2, [r7, #32]
 8014db0:	4b55      	ldr	r3, [pc, #340]	; (8014f08 <HAL_UART_IRQHandler+0x770>)
 8014db2:	4013      	ands	r3, r2
 8014db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	3308      	adds	r3, #8
 8014dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014dc2:	633a      	str	r2, [r7, #48]	; 0x30
 8014dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dca:	e841 2300 	strex	r3, r2, [r1]
 8014dce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d1e3      	bne.n	8014d9e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2220      	movs	r2, #32
 8014dda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	2200      	movs	r2, #0
 8014de2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	2200      	movs	r2, #0
 8014de8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	e853 3f00 	ldrex	r3, [r3]
 8014df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	f023 0310 	bic.w	r3, r3, #16
 8014dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	461a      	mov	r2, r3
 8014e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014e0c:	61fb      	str	r3, [r7, #28]
 8014e0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e10:	69b9      	ldr	r1, [r7, #24]
 8014e12:	69fa      	ldr	r2, [r7, #28]
 8014e14:	e841 2300 	strex	r3, r2, [r1]
 8014e18:	617b      	str	r3, [r7, #20]
   return(result);
 8014e1a:	697b      	ldr	r3, [r7, #20]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d1e4      	bne.n	8014dea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2202      	movs	r2, #2
 8014e24:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014e26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014e2a:	4619      	mov	r1, r3
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f000 f881 	bl	8014f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014e32:	e063      	b.n	8014efc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d00e      	beq.n	8014e5e <HAL_UART_IRQHandler+0x6c6>
 8014e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d008      	beq.n	8014e5e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f001 fe80 	bl	8016b5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014e5c:	e051      	b.n	8014f02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d014      	beq.n	8014e94 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d105      	bne.n	8014e82 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d008      	beq.n	8014e94 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d03a      	beq.n	8014f00 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	4798      	blx	r3
    }
    return;
 8014e92:	e035      	b.n	8014f00 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d009      	beq.n	8014eb4 <HAL_UART_IRQHandler+0x71c>
 8014ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d003      	beq.n	8014eb4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	f001 f90d 	bl	80160cc <UART_EndTransmit_IT>
    return;
 8014eb2:	e026      	b.n	8014f02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d009      	beq.n	8014ed4 <HAL_UART_IRQHandler+0x73c>
 8014ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ec4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d003      	beq.n	8014ed4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f001 fe59 	bl	8016b84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014ed2:	e016      	b.n	8014f02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d010      	beq.n	8014f02 <HAL_UART_IRQHandler+0x76a>
 8014ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	da0c      	bge.n	8014f02 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014ee8:	6878      	ldr	r0, [r7, #4]
 8014eea:	f001 fe41 	bl	8016b70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014eee:	e008      	b.n	8014f02 <HAL_UART_IRQHandler+0x76a>
      return;
 8014ef0:	bf00      	nop
 8014ef2:	e006      	b.n	8014f02 <HAL_UART_IRQHandler+0x76a>
    return;
 8014ef4:	bf00      	nop
 8014ef6:	e004      	b.n	8014f02 <HAL_UART_IRQHandler+0x76a>
      return;
 8014ef8:	bf00      	nop
 8014efa:	e002      	b.n	8014f02 <HAL_UART_IRQHandler+0x76a>
      return;
 8014efc:	bf00      	nop
 8014efe:	e000      	b.n	8014f02 <HAL_UART_IRQHandler+0x76a>
    return;
 8014f00:	bf00      	nop
  }
}
 8014f02:	37e8      	adds	r7, #232	; 0xe8
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}
 8014f08:	effffffe 	.word	0xeffffffe

08014f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b083      	sub	sp, #12
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014f14:	bf00      	nop
 8014f16:	370c      	adds	r7, #12
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1e:	4770      	bx	lr

08014f20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014f20:	b480      	push	{r7}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014f28:	bf00      	nop
 8014f2a:	370c      	adds	r7, #12
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f32:	4770      	bx	lr

08014f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014f34:	b480      	push	{r7}
 8014f36:	b083      	sub	sp, #12
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014f40:	bf00      	nop
 8014f42:	370c      	adds	r7, #12
 8014f44:	46bd      	mov	sp, r7
 8014f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4a:	4770      	bx	lr

08014f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f50:	b092      	sub	sp, #72	; 0x48
 8014f52:	af00      	add	r7, sp, #0
 8014f54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014f56:	2300      	movs	r3, #0
 8014f58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	689a      	ldr	r2, [r3, #8]
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	691b      	ldr	r3, [r3, #16]
 8014f64:	431a      	orrs	r2, r3
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	695b      	ldr	r3, [r3, #20]
 8014f6a:	431a      	orrs	r2, r3
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	69db      	ldr	r3, [r3, #28]
 8014f70:	4313      	orrs	r3, r2
 8014f72:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	681a      	ldr	r2, [r3, #0]
 8014f7a:	4bbe      	ldr	r3, [pc, #760]	; (8015274 <UART_SetConfig+0x328>)
 8014f7c:	4013      	ands	r3, r2
 8014f7e:	697a      	ldr	r2, [r7, #20]
 8014f80:	6812      	ldr	r2, [r2, #0]
 8014f82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014f84:	430b      	orrs	r3, r1
 8014f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014f92:	697b      	ldr	r3, [r7, #20]
 8014f94:	68da      	ldr	r2, [r3, #12]
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	430a      	orrs	r2, r1
 8014f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	699b      	ldr	r3, [r3, #24]
 8014fa2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	4ab3      	ldr	r2, [pc, #716]	; (8015278 <UART_SetConfig+0x32c>)
 8014faa:	4293      	cmp	r3, r2
 8014fac:	d004      	beq.n	8014fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	6a1b      	ldr	r3, [r3, #32]
 8014fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014fb4:	4313      	orrs	r3, r2
 8014fb6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	689a      	ldr	r2, [r3, #8]
 8014fbe:	4baf      	ldr	r3, [pc, #700]	; (801527c <UART_SetConfig+0x330>)
 8014fc0:	4013      	ands	r3, r2
 8014fc2:	697a      	ldr	r2, [r7, #20]
 8014fc4:	6812      	ldr	r2, [r2, #0]
 8014fc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014fc8:	430b      	orrs	r3, r1
 8014fca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014fcc:	697b      	ldr	r3, [r7, #20]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fd2:	f023 010f 	bic.w	r1, r3, #15
 8014fd6:	697b      	ldr	r3, [r7, #20]
 8014fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	430a      	orrs	r2, r1
 8014fe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014fe2:	697b      	ldr	r3, [r7, #20]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	4aa6      	ldr	r2, [pc, #664]	; (8015280 <UART_SetConfig+0x334>)
 8014fe8:	4293      	cmp	r3, r2
 8014fea:	d177      	bne.n	80150dc <UART_SetConfig+0x190>
 8014fec:	4ba5      	ldr	r3, [pc, #660]	; (8015284 <UART_SetConfig+0x338>)
 8014fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014ff4:	2b28      	cmp	r3, #40	; 0x28
 8014ff6:	d86d      	bhi.n	80150d4 <UART_SetConfig+0x188>
 8014ff8:	a201      	add	r2, pc, #4	; (adr r2, 8015000 <UART_SetConfig+0xb4>)
 8014ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ffe:	bf00      	nop
 8015000:	080150a5 	.word	0x080150a5
 8015004:	080150d5 	.word	0x080150d5
 8015008:	080150d5 	.word	0x080150d5
 801500c:	080150d5 	.word	0x080150d5
 8015010:	080150d5 	.word	0x080150d5
 8015014:	080150d5 	.word	0x080150d5
 8015018:	080150d5 	.word	0x080150d5
 801501c:	080150d5 	.word	0x080150d5
 8015020:	080150ad 	.word	0x080150ad
 8015024:	080150d5 	.word	0x080150d5
 8015028:	080150d5 	.word	0x080150d5
 801502c:	080150d5 	.word	0x080150d5
 8015030:	080150d5 	.word	0x080150d5
 8015034:	080150d5 	.word	0x080150d5
 8015038:	080150d5 	.word	0x080150d5
 801503c:	080150d5 	.word	0x080150d5
 8015040:	080150b5 	.word	0x080150b5
 8015044:	080150d5 	.word	0x080150d5
 8015048:	080150d5 	.word	0x080150d5
 801504c:	080150d5 	.word	0x080150d5
 8015050:	080150d5 	.word	0x080150d5
 8015054:	080150d5 	.word	0x080150d5
 8015058:	080150d5 	.word	0x080150d5
 801505c:	080150d5 	.word	0x080150d5
 8015060:	080150bd 	.word	0x080150bd
 8015064:	080150d5 	.word	0x080150d5
 8015068:	080150d5 	.word	0x080150d5
 801506c:	080150d5 	.word	0x080150d5
 8015070:	080150d5 	.word	0x080150d5
 8015074:	080150d5 	.word	0x080150d5
 8015078:	080150d5 	.word	0x080150d5
 801507c:	080150d5 	.word	0x080150d5
 8015080:	080150c5 	.word	0x080150c5
 8015084:	080150d5 	.word	0x080150d5
 8015088:	080150d5 	.word	0x080150d5
 801508c:	080150d5 	.word	0x080150d5
 8015090:	080150d5 	.word	0x080150d5
 8015094:	080150d5 	.word	0x080150d5
 8015098:	080150d5 	.word	0x080150d5
 801509c:	080150d5 	.word	0x080150d5
 80150a0:	080150cd 	.word	0x080150cd
 80150a4:	2301      	movs	r3, #1
 80150a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150aa:	e222      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80150ac:	2304      	movs	r3, #4
 80150ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150b2:	e21e      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80150b4:	2308      	movs	r3, #8
 80150b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ba:	e21a      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80150bc:	2310      	movs	r3, #16
 80150be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150c2:	e216      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80150c4:	2320      	movs	r3, #32
 80150c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ca:	e212      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80150cc:	2340      	movs	r3, #64	; 0x40
 80150ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150d2:	e20e      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80150d4:	2380      	movs	r3, #128	; 0x80
 80150d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150da:	e20a      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	4a69      	ldr	r2, [pc, #420]	; (8015288 <UART_SetConfig+0x33c>)
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d130      	bne.n	8015148 <UART_SetConfig+0x1fc>
 80150e6:	4b67      	ldr	r3, [pc, #412]	; (8015284 <UART_SetConfig+0x338>)
 80150e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150ea:	f003 0307 	and.w	r3, r3, #7
 80150ee:	2b05      	cmp	r3, #5
 80150f0:	d826      	bhi.n	8015140 <UART_SetConfig+0x1f4>
 80150f2:	a201      	add	r2, pc, #4	; (adr r2, 80150f8 <UART_SetConfig+0x1ac>)
 80150f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150f8:	08015111 	.word	0x08015111
 80150fc:	08015119 	.word	0x08015119
 8015100:	08015121 	.word	0x08015121
 8015104:	08015129 	.word	0x08015129
 8015108:	08015131 	.word	0x08015131
 801510c:	08015139 	.word	0x08015139
 8015110:	2300      	movs	r3, #0
 8015112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015116:	e1ec      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015118:	2304      	movs	r3, #4
 801511a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801511e:	e1e8      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015120:	2308      	movs	r3, #8
 8015122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015126:	e1e4      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015128:	2310      	movs	r3, #16
 801512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801512e:	e1e0      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015130:	2320      	movs	r3, #32
 8015132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015136:	e1dc      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015138:	2340      	movs	r3, #64	; 0x40
 801513a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801513e:	e1d8      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015140:	2380      	movs	r3, #128	; 0x80
 8015142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015146:	e1d4      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4a4f      	ldr	r2, [pc, #316]	; (801528c <UART_SetConfig+0x340>)
 801514e:	4293      	cmp	r3, r2
 8015150:	d130      	bne.n	80151b4 <UART_SetConfig+0x268>
 8015152:	4b4c      	ldr	r3, [pc, #304]	; (8015284 <UART_SetConfig+0x338>)
 8015154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015156:	f003 0307 	and.w	r3, r3, #7
 801515a:	2b05      	cmp	r3, #5
 801515c:	d826      	bhi.n	80151ac <UART_SetConfig+0x260>
 801515e:	a201      	add	r2, pc, #4	; (adr r2, 8015164 <UART_SetConfig+0x218>)
 8015160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015164:	0801517d 	.word	0x0801517d
 8015168:	08015185 	.word	0x08015185
 801516c:	0801518d 	.word	0x0801518d
 8015170:	08015195 	.word	0x08015195
 8015174:	0801519d 	.word	0x0801519d
 8015178:	080151a5 	.word	0x080151a5
 801517c:	2300      	movs	r3, #0
 801517e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015182:	e1b6      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015184:	2304      	movs	r3, #4
 8015186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801518a:	e1b2      	b.n	80154f2 <UART_SetConfig+0x5a6>
 801518c:	2308      	movs	r3, #8
 801518e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015192:	e1ae      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015194:	2310      	movs	r3, #16
 8015196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801519a:	e1aa      	b.n	80154f2 <UART_SetConfig+0x5a6>
 801519c:	2320      	movs	r3, #32
 801519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151a2:	e1a6      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80151a4:	2340      	movs	r3, #64	; 0x40
 80151a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151aa:	e1a2      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80151ac:	2380      	movs	r3, #128	; 0x80
 80151ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151b2:	e19e      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80151b4:	697b      	ldr	r3, [r7, #20]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	4a35      	ldr	r2, [pc, #212]	; (8015290 <UART_SetConfig+0x344>)
 80151ba:	4293      	cmp	r3, r2
 80151bc:	d130      	bne.n	8015220 <UART_SetConfig+0x2d4>
 80151be:	4b31      	ldr	r3, [pc, #196]	; (8015284 <UART_SetConfig+0x338>)
 80151c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151c2:	f003 0307 	and.w	r3, r3, #7
 80151c6:	2b05      	cmp	r3, #5
 80151c8:	d826      	bhi.n	8015218 <UART_SetConfig+0x2cc>
 80151ca:	a201      	add	r2, pc, #4	; (adr r2, 80151d0 <UART_SetConfig+0x284>)
 80151cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151d0:	080151e9 	.word	0x080151e9
 80151d4:	080151f1 	.word	0x080151f1
 80151d8:	080151f9 	.word	0x080151f9
 80151dc:	08015201 	.word	0x08015201
 80151e0:	08015209 	.word	0x08015209
 80151e4:	08015211 	.word	0x08015211
 80151e8:	2300      	movs	r3, #0
 80151ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ee:	e180      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80151f0:	2304      	movs	r3, #4
 80151f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151f6:	e17c      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80151f8:	2308      	movs	r3, #8
 80151fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151fe:	e178      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015200:	2310      	movs	r3, #16
 8015202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015206:	e174      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015208:	2320      	movs	r3, #32
 801520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801520e:	e170      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015210:	2340      	movs	r3, #64	; 0x40
 8015212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015216:	e16c      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015218:	2380      	movs	r3, #128	; 0x80
 801521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801521e:	e168      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	4a1b      	ldr	r2, [pc, #108]	; (8015294 <UART_SetConfig+0x348>)
 8015226:	4293      	cmp	r3, r2
 8015228:	d142      	bne.n	80152b0 <UART_SetConfig+0x364>
 801522a:	4b16      	ldr	r3, [pc, #88]	; (8015284 <UART_SetConfig+0x338>)
 801522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801522e:	f003 0307 	and.w	r3, r3, #7
 8015232:	2b05      	cmp	r3, #5
 8015234:	d838      	bhi.n	80152a8 <UART_SetConfig+0x35c>
 8015236:	a201      	add	r2, pc, #4	; (adr r2, 801523c <UART_SetConfig+0x2f0>)
 8015238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801523c:	08015255 	.word	0x08015255
 8015240:	0801525d 	.word	0x0801525d
 8015244:	08015265 	.word	0x08015265
 8015248:	0801526d 	.word	0x0801526d
 801524c:	08015299 	.word	0x08015299
 8015250:	080152a1 	.word	0x080152a1
 8015254:	2300      	movs	r3, #0
 8015256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801525a:	e14a      	b.n	80154f2 <UART_SetConfig+0x5a6>
 801525c:	2304      	movs	r3, #4
 801525e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015262:	e146      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015264:	2308      	movs	r3, #8
 8015266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801526a:	e142      	b.n	80154f2 <UART_SetConfig+0x5a6>
 801526c:	2310      	movs	r3, #16
 801526e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015272:	e13e      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015274:	cfff69f3 	.word	0xcfff69f3
 8015278:	58000c00 	.word	0x58000c00
 801527c:	11fff4ff 	.word	0x11fff4ff
 8015280:	40011000 	.word	0x40011000
 8015284:	58024400 	.word	0x58024400
 8015288:	40004400 	.word	0x40004400
 801528c:	40004800 	.word	0x40004800
 8015290:	40004c00 	.word	0x40004c00
 8015294:	40005000 	.word	0x40005000
 8015298:	2320      	movs	r3, #32
 801529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801529e:	e128      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80152a0:	2340      	movs	r3, #64	; 0x40
 80152a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152a6:	e124      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80152a8:	2380      	movs	r3, #128	; 0x80
 80152aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ae:	e120      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	4acb      	ldr	r2, [pc, #812]	; (80155e4 <UART_SetConfig+0x698>)
 80152b6:	4293      	cmp	r3, r2
 80152b8:	d176      	bne.n	80153a8 <UART_SetConfig+0x45c>
 80152ba:	4bcb      	ldr	r3, [pc, #812]	; (80155e8 <UART_SetConfig+0x69c>)
 80152bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80152c2:	2b28      	cmp	r3, #40	; 0x28
 80152c4:	d86c      	bhi.n	80153a0 <UART_SetConfig+0x454>
 80152c6:	a201      	add	r2, pc, #4	; (adr r2, 80152cc <UART_SetConfig+0x380>)
 80152c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152cc:	08015371 	.word	0x08015371
 80152d0:	080153a1 	.word	0x080153a1
 80152d4:	080153a1 	.word	0x080153a1
 80152d8:	080153a1 	.word	0x080153a1
 80152dc:	080153a1 	.word	0x080153a1
 80152e0:	080153a1 	.word	0x080153a1
 80152e4:	080153a1 	.word	0x080153a1
 80152e8:	080153a1 	.word	0x080153a1
 80152ec:	08015379 	.word	0x08015379
 80152f0:	080153a1 	.word	0x080153a1
 80152f4:	080153a1 	.word	0x080153a1
 80152f8:	080153a1 	.word	0x080153a1
 80152fc:	080153a1 	.word	0x080153a1
 8015300:	080153a1 	.word	0x080153a1
 8015304:	080153a1 	.word	0x080153a1
 8015308:	080153a1 	.word	0x080153a1
 801530c:	08015381 	.word	0x08015381
 8015310:	080153a1 	.word	0x080153a1
 8015314:	080153a1 	.word	0x080153a1
 8015318:	080153a1 	.word	0x080153a1
 801531c:	080153a1 	.word	0x080153a1
 8015320:	080153a1 	.word	0x080153a1
 8015324:	080153a1 	.word	0x080153a1
 8015328:	080153a1 	.word	0x080153a1
 801532c:	08015389 	.word	0x08015389
 8015330:	080153a1 	.word	0x080153a1
 8015334:	080153a1 	.word	0x080153a1
 8015338:	080153a1 	.word	0x080153a1
 801533c:	080153a1 	.word	0x080153a1
 8015340:	080153a1 	.word	0x080153a1
 8015344:	080153a1 	.word	0x080153a1
 8015348:	080153a1 	.word	0x080153a1
 801534c:	08015391 	.word	0x08015391
 8015350:	080153a1 	.word	0x080153a1
 8015354:	080153a1 	.word	0x080153a1
 8015358:	080153a1 	.word	0x080153a1
 801535c:	080153a1 	.word	0x080153a1
 8015360:	080153a1 	.word	0x080153a1
 8015364:	080153a1 	.word	0x080153a1
 8015368:	080153a1 	.word	0x080153a1
 801536c:	08015399 	.word	0x08015399
 8015370:	2301      	movs	r3, #1
 8015372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015376:	e0bc      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015378:	2304      	movs	r3, #4
 801537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801537e:	e0b8      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015380:	2308      	movs	r3, #8
 8015382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015386:	e0b4      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015388:	2310      	movs	r3, #16
 801538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801538e:	e0b0      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015390:	2320      	movs	r3, #32
 8015392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015396:	e0ac      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015398:	2340      	movs	r3, #64	; 0x40
 801539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801539e:	e0a8      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80153a0:	2380      	movs	r3, #128	; 0x80
 80153a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153a6:	e0a4      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4a8f      	ldr	r2, [pc, #572]	; (80155ec <UART_SetConfig+0x6a0>)
 80153ae:	4293      	cmp	r3, r2
 80153b0:	d130      	bne.n	8015414 <UART_SetConfig+0x4c8>
 80153b2:	4b8d      	ldr	r3, [pc, #564]	; (80155e8 <UART_SetConfig+0x69c>)
 80153b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153b6:	f003 0307 	and.w	r3, r3, #7
 80153ba:	2b05      	cmp	r3, #5
 80153bc:	d826      	bhi.n	801540c <UART_SetConfig+0x4c0>
 80153be:	a201      	add	r2, pc, #4	; (adr r2, 80153c4 <UART_SetConfig+0x478>)
 80153c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153c4:	080153dd 	.word	0x080153dd
 80153c8:	080153e5 	.word	0x080153e5
 80153cc:	080153ed 	.word	0x080153ed
 80153d0:	080153f5 	.word	0x080153f5
 80153d4:	080153fd 	.word	0x080153fd
 80153d8:	08015405 	.word	0x08015405
 80153dc:	2300      	movs	r3, #0
 80153de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153e2:	e086      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80153e4:	2304      	movs	r3, #4
 80153e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ea:	e082      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80153ec:	2308      	movs	r3, #8
 80153ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153f2:	e07e      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80153f4:	2310      	movs	r3, #16
 80153f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153fa:	e07a      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80153fc:	2320      	movs	r3, #32
 80153fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015402:	e076      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015404:	2340      	movs	r3, #64	; 0x40
 8015406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801540a:	e072      	b.n	80154f2 <UART_SetConfig+0x5a6>
 801540c:	2380      	movs	r3, #128	; 0x80
 801540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015412:	e06e      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015414:	697b      	ldr	r3, [r7, #20]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	4a75      	ldr	r2, [pc, #468]	; (80155f0 <UART_SetConfig+0x6a4>)
 801541a:	4293      	cmp	r3, r2
 801541c:	d130      	bne.n	8015480 <UART_SetConfig+0x534>
 801541e:	4b72      	ldr	r3, [pc, #456]	; (80155e8 <UART_SetConfig+0x69c>)
 8015420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015422:	f003 0307 	and.w	r3, r3, #7
 8015426:	2b05      	cmp	r3, #5
 8015428:	d826      	bhi.n	8015478 <UART_SetConfig+0x52c>
 801542a:	a201      	add	r2, pc, #4	; (adr r2, 8015430 <UART_SetConfig+0x4e4>)
 801542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015430:	08015449 	.word	0x08015449
 8015434:	08015451 	.word	0x08015451
 8015438:	08015459 	.word	0x08015459
 801543c:	08015461 	.word	0x08015461
 8015440:	08015469 	.word	0x08015469
 8015444:	08015471 	.word	0x08015471
 8015448:	2300      	movs	r3, #0
 801544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801544e:	e050      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015450:	2304      	movs	r3, #4
 8015452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015456:	e04c      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015458:	2308      	movs	r3, #8
 801545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801545e:	e048      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015460:	2310      	movs	r3, #16
 8015462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015466:	e044      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015468:	2320      	movs	r3, #32
 801546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801546e:	e040      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015470:	2340      	movs	r3, #64	; 0x40
 8015472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015476:	e03c      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015478:	2380      	movs	r3, #128	; 0x80
 801547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801547e:	e038      	b.n	80154f2 <UART_SetConfig+0x5a6>
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	4a5b      	ldr	r2, [pc, #364]	; (80155f4 <UART_SetConfig+0x6a8>)
 8015486:	4293      	cmp	r3, r2
 8015488:	d130      	bne.n	80154ec <UART_SetConfig+0x5a0>
 801548a:	4b57      	ldr	r3, [pc, #348]	; (80155e8 <UART_SetConfig+0x69c>)
 801548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801548e:	f003 0307 	and.w	r3, r3, #7
 8015492:	2b05      	cmp	r3, #5
 8015494:	d826      	bhi.n	80154e4 <UART_SetConfig+0x598>
 8015496:	a201      	add	r2, pc, #4	; (adr r2, 801549c <UART_SetConfig+0x550>)
 8015498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801549c:	080154b5 	.word	0x080154b5
 80154a0:	080154bd 	.word	0x080154bd
 80154a4:	080154c5 	.word	0x080154c5
 80154a8:	080154cd 	.word	0x080154cd
 80154ac:	080154d5 	.word	0x080154d5
 80154b0:	080154dd 	.word	0x080154dd
 80154b4:	2302      	movs	r3, #2
 80154b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ba:	e01a      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80154bc:	2304      	movs	r3, #4
 80154be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154c2:	e016      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80154c4:	2308      	movs	r3, #8
 80154c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ca:	e012      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80154cc:	2310      	movs	r3, #16
 80154ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154d2:	e00e      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80154d4:	2320      	movs	r3, #32
 80154d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154da:	e00a      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80154dc:	2340      	movs	r3, #64	; 0x40
 80154de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154e2:	e006      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80154e4:	2380      	movs	r3, #128	; 0x80
 80154e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ea:	e002      	b.n	80154f2 <UART_SetConfig+0x5a6>
 80154ec:	2380      	movs	r3, #128	; 0x80
 80154ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	4a3f      	ldr	r2, [pc, #252]	; (80155f4 <UART_SetConfig+0x6a8>)
 80154f8:	4293      	cmp	r3, r2
 80154fa:	f040 80f8 	bne.w	80156ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80154fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015502:	2b20      	cmp	r3, #32
 8015504:	dc46      	bgt.n	8015594 <UART_SetConfig+0x648>
 8015506:	2b02      	cmp	r3, #2
 8015508:	f2c0 8082 	blt.w	8015610 <UART_SetConfig+0x6c4>
 801550c:	3b02      	subs	r3, #2
 801550e:	2b1e      	cmp	r3, #30
 8015510:	d87e      	bhi.n	8015610 <UART_SetConfig+0x6c4>
 8015512:	a201      	add	r2, pc, #4	; (adr r2, 8015518 <UART_SetConfig+0x5cc>)
 8015514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015518:	0801559b 	.word	0x0801559b
 801551c:	08015611 	.word	0x08015611
 8015520:	080155a3 	.word	0x080155a3
 8015524:	08015611 	.word	0x08015611
 8015528:	08015611 	.word	0x08015611
 801552c:	08015611 	.word	0x08015611
 8015530:	080155b3 	.word	0x080155b3
 8015534:	08015611 	.word	0x08015611
 8015538:	08015611 	.word	0x08015611
 801553c:	08015611 	.word	0x08015611
 8015540:	08015611 	.word	0x08015611
 8015544:	08015611 	.word	0x08015611
 8015548:	08015611 	.word	0x08015611
 801554c:	08015611 	.word	0x08015611
 8015550:	080155c3 	.word	0x080155c3
 8015554:	08015611 	.word	0x08015611
 8015558:	08015611 	.word	0x08015611
 801555c:	08015611 	.word	0x08015611
 8015560:	08015611 	.word	0x08015611
 8015564:	08015611 	.word	0x08015611
 8015568:	08015611 	.word	0x08015611
 801556c:	08015611 	.word	0x08015611
 8015570:	08015611 	.word	0x08015611
 8015574:	08015611 	.word	0x08015611
 8015578:	08015611 	.word	0x08015611
 801557c:	08015611 	.word	0x08015611
 8015580:	08015611 	.word	0x08015611
 8015584:	08015611 	.word	0x08015611
 8015588:	08015611 	.word	0x08015611
 801558c:	08015611 	.word	0x08015611
 8015590:	08015603 	.word	0x08015603
 8015594:	2b40      	cmp	r3, #64	; 0x40
 8015596:	d037      	beq.n	8015608 <UART_SetConfig+0x6bc>
 8015598:	e03a      	b.n	8015610 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801559a:	f7fb fc17 	bl	8010dcc <HAL_RCCEx_GetD3PCLK1Freq>
 801559e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80155a0:	e03c      	b.n	801561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80155a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7fb fc26 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80155ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155b0:	e034      	b.n	801561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80155b2:	f107 0318 	add.w	r3, r7, #24
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7fb fd72 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155c0:	e02c      	b.n	801561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80155c2:	4b09      	ldr	r3, [pc, #36]	; (80155e8 <UART_SetConfig+0x69c>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	f003 0320 	and.w	r3, r3, #32
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d016      	beq.n	80155fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80155ce:	4b06      	ldr	r3, [pc, #24]	; (80155e8 <UART_SetConfig+0x69c>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	08db      	lsrs	r3, r3, #3
 80155d4:	f003 0303 	and.w	r3, r3, #3
 80155d8:	4a07      	ldr	r2, [pc, #28]	; (80155f8 <UART_SetConfig+0x6ac>)
 80155da:	fa22 f303 	lsr.w	r3, r2, r3
 80155de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80155e0:	e01c      	b.n	801561c <UART_SetConfig+0x6d0>
 80155e2:	bf00      	nop
 80155e4:	40011400 	.word	0x40011400
 80155e8:	58024400 	.word	0x58024400
 80155ec:	40007800 	.word	0x40007800
 80155f0:	40007c00 	.word	0x40007c00
 80155f4:	58000c00 	.word	0x58000c00
 80155f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80155fc:	4b9d      	ldr	r3, [pc, #628]	; (8015874 <UART_SetConfig+0x928>)
 80155fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015600:	e00c      	b.n	801561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015602:	4b9d      	ldr	r3, [pc, #628]	; (8015878 <UART_SetConfig+0x92c>)
 8015604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015606:	e009      	b.n	801561c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801560c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801560e:	e005      	b.n	801561c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015610:	2300      	movs	r3, #0
 8015612:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015614:	2301      	movs	r3, #1
 8015616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801561a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801561e:	2b00      	cmp	r3, #0
 8015620:	f000 81de 	beq.w	80159e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015628:	4a94      	ldr	r2, [pc, #592]	; (801587c <UART_SetConfig+0x930>)
 801562a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801562e:	461a      	mov	r2, r3
 8015630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015632:	fbb3 f3f2 	udiv	r3, r3, r2
 8015636:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	685a      	ldr	r2, [r3, #4]
 801563c:	4613      	mov	r3, r2
 801563e:	005b      	lsls	r3, r3, #1
 8015640:	4413      	add	r3, r2
 8015642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015644:	429a      	cmp	r2, r3
 8015646:	d305      	bcc.n	8015654 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	685b      	ldr	r3, [r3, #4]
 801564c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801564e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015650:	429a      	cmp	r2, r3
 8015652:	d903      	bls.n	801565c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015654:	2301      	movs	r3, #1
 8015656:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801565a:	e1c1      	b.n	80159e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801565e:	2200      	movs	r2, #0
 8015660:	60bb      	str	r3, [r7, #8]
 8015662:	60fa      	str	r2, [r7, #12]
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015668:	4a84      	ldr	r2, [pc, #528]	; (801587c <UART_SetConfig+0x930>)
 801566a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801566e:	b29b      	uxth	r3, r3
 8015670:	2200      	movs	r2, #0
 8015672:	603b      	str	r3, [r7, #0]
 8015674:	607a      	str	r2, [r7, #4]
 8015676:	e9d7 2300 	ldrd	r2, r3, [r7]
 801567a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801567e:	f7ea fe2f 	bl	80002e0 <__aeabi_uldivmod>
 8015682:	4602      	mov	r2, r0
 8015684:	460b      	mov	r3, r1
 8015686:	4610      	mov	r0, r2
 8015688:	4619      	mov	r1, r3
 801568a:	f04f 0200 	mov.w	r2, #0
 801568e:	f04f 0300 	mov.w	r3, #0
 8015692:	020b      	lsls	r3, r1, #8
 8015694:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015698:	0202      	lsls	r2, r0, #8
 801569a:	6979      	ldr	r1, [r7, #20]
 801569c:	6849      	ldr	r1, [r1, #4]
 801569e:	0849      	lsrs	r1, r1, #1
 80156a0:	2000      	movs	r0, #0
 80156a2:	460c      	mov	r4, r1
 80156a4:	4605      	mov	r5, r0
 80156a6:	eb12 0804 	adds.w	r8, r2, r4
 80156aa:	eb43 0905 	adc.w	r9, r3, r5
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	2200      	movs	r2, #0
 80156b4:	469a      	mov	sl, r3
 80156b6:	4693      	mov	fp, r2
 80156b8:	4652      	mov	r2, sl
 80156ba:	465b      	mov	r3, fp
 80156bc:	4640      	mov	r0, r8
 80156be:	4649      	mov	r1, r9
 80156c0:	f7ea fe0e 	bl	80002e0 <__aeabi_uldivmod>
 80156c4:	4602      	mov	r2, r0
 80156c6:	460b      	mov	r3, r1
 80156c8:	4613      	mov	r3, r2
 80156ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80156cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80156d2:	d308      	bcc.n	80156e6 <UART_SetConfig+0x79a>
 80156d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80156da:	d204      	bcs.n	80156e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156e2:	60da      	str	r2, [r3, #12]
 80156e4:	e17c      	b.n	80159e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80156e6:	2301      	movs	r3, #1
 80156e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80156ec:	e178      	b.n	80159e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	69db      	ldr	r3, [r3, #28]
 80156f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80156f6:	f040 80c5 	bne.w	8015884 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80156fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80156fe:	2b20      	cmp	r3, #32
 8015700:	dc48      	bgt.n	8015794 <UART_SetConfig+0x848>
 8015702:	2b00      	cmp	r3, #0
 8015704:	db7b      	blt.n	80157fe <UART_SetConfig+0x8b2>
 8015706:	2b20      	cmp	r3, #32
 8015708:	d879      	bhi.n	80157fe <UART_SetConfig+0x8b2>
 801570a:	a201      	add	r2, pc, #4	; (adr r2, 8015710 <UART_SetConfig+0x7c4>)
 801570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015710:	0801579b 	.word	0x0801579b
 8015714:	080157a3 	.word	0x080157a3
 8015718:	080157ff 	.word	0x080157ff
 801571c:	080157ff 	.word	0x080157ff
 8015720:	080157ab 	.word	0x080157ab
 8015724:	080157ff 	.word	0x080157ff
 8015728:	080157ff 	.word	0x080157ff
 801572c:	080157ff 	.word	0x080157ff
 8015730:	080157bb 	.word	0x080157bb
 8015734:	080157ff 	.word	0x080157ff
 8015738:	080157ff 	.word	0x080157ff
 801573c:	080157ff 	.word	0x080157ff
 8015740:	080157ff 	.word	0x080157ff
 8015744:	080157ff 	.word	0x080157ff
 8015748:	080157ff 	.word	0x080157ff
 801574c:	080157ff 	.word	0x080157ff
 8015750:	080157cb 	.word	0x080157cb
 8015754:	080157ff 	.word	0x080157ff
 8015758:	080157ff 	.word	0x080157ff
 801575c:	080157ff 	.word	0x080157ff
 8015760:	080157ff 	.word	0x080157ff
 8015764:	080157ff 	.word	0x080157ff
 8015768:	080157ff 	.word	0x080157ff
 801576c:	080157ff 	.word	0x080157ff
 8015770:	080157ff 	.word	0x080157ff
 8015774:	080157ff 	.word	0x080157ff
 8015778:	080157ff 	.word	0x080157ff
 801577c:	080157ff 	.word	0x080157ff
 8015780:	080157ff 	.word	0x080157ff
 8015784:	080157ff 	.word	0x080157ff
 8015788:	080157ff 	.word	0x080157ff
 801578c:	080157ff 	.word	0x080157ff
 8015790:	080157f1 	.word	0x080157f1
 8015794:	2b40      	cmp	r3, #64	; 0x40
 8015796:	d02e      	beq.n	80157f6 <UART_SetConfig+0x8aa>
 8015798:	e031      	b.n	80157fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801579a:	f7f9 fb1f 	bl	800eddc <HAL_RCC_GetPCLK1Freq>
 801579e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80157a0:	e033      	b.n	801580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80157a2:	f7f9 fb31 	bl	800ee08 <HAL_RCC_GetPCLK2Freq>
 80157a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80157a8:	e02f      	b.n	801580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80157aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7fb fb22 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80157b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157b8:	e027      	b.n	801580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80157ba:	f107 0318 	add.w	r3, r7, #24
 80157be:	4618      	mov	r0, r3
 80157c0:	f7fb fc6e 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80157c4:	69fb      	ldr	r3, [r7, #28]
 80157c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157c8:	e01f      	b.n	801580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80157ca:	4b2d      	ldr	r3, [pc, #180]	; (8015880 <UART_SetConfig+0x934>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f003 0320 	and.w	r3, r3, #32
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d009      	beq.n	80157ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80157d6:	4b2a      	ldr	r3, [pc, #168]	; (8015880 <UART_SetConfig+0x934>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	08db      	lsrs	r3, r3, #3
 80157dc:	f003 0303 	and.w	r3, r3, #3
 80157e0:	4a24      	ldr	r2, [pc, #144]	; (8015874 <UART_SetConfig+0x928>)
 80157e2:	fa22 f303 	lsr.w	r3, r2, r3
 80157e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80157e8:	e00f      	b.n	801580a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80157ea:	4b22      	ldr	r3, [pc, #136]	; (8015874 <UART_SetConfig+0x928>)
 80157ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157ee:	e00c      	b.n	801580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80157f0:	4b21      	ldr	r3, [pc, #132]	; (8015878 <UART_SetConfig+0x92c>)
 80157f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157f4:	e009      	b.n	801580a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80157f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80157fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157fc:	e005      	b.n	801580a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80157fe:	2300      	movs	r3, #0
 8015800:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015802:	2301      	movs	r3, #1
 8015804:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015808:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801580a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801580c:	2b00      	cmp	r3, #0
 801580e:	f000 80e7 	beq.w	80159e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015816:	4a19      	ldr	r2, [pc, #100]	; (801587c <UART_SetConfig+0x930>)
 8015818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801581c:	461a      	mov	r2, r3
 801581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015820:	fbb3 f3f2 	udiv	r3, r3, r2
 8015824:	005a      	lsls	r2, r3, #1
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	685b      	ldr	r3, [r3, #4]
 801582a:	085b      	lsrs	r3, r3, #1
 801582c:	441a      	add	r2, r3
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	685b      	ldr	r3, [r3, #4]
 8015832:	fbb2 f3f3 	udiv	r3, r2, r3
 8015836:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801583a:	2b0f      	cmp	r3, #15
 801583c:	d916      	bls.n	801586c <UART_SetConfig+0x920>
 801583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015844:	d212      	bcs.n	801586c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015848:	b29b      	uxth	r3, r3
 801584a:	f023 030f 	bic.w	r3, r3, #15
 801584e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015852:	085b      	lsrs	r3, r3, #1
 8015854:	b29b      	uxth	r3, r3
 8015856:	f003 0307 	and.w	r3, r3, #7
 801585a:	b29a      	uxth	r2, r3
 801585c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801585e:	4313      	orrs	r3, r2
 8015860:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015868:	60da      	str	r2, [r3, #12]
 801586a:	e0b9      	b.n	80159e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801586c:	2301      	movs	r3, #1
 801586e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015872:	e0b5      	b.n	80159e0 <UART_SetConfig+0xa94>
 8015874:	03d09000 	.word	0x03d09000
 8015878:	003d0900 	.word	0x003d0900
 801587c:	0801b16c 	.word	0x0801b16c
 8015880:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015884:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015888:	2b20      	cmp	r3, #32
 801588a:	dc49      	bgt.n	8015920 <UART_SetConfig+0x9d4>
 801588c:	2b00      	cmp	r3, #0
 801588e:	db7c      	blt.n	801598a <UART_SetConfig+0xa3e>
 8015890:	2b20      	cmp	r3, #32
 8015892:	d87a      	bhi.n	801598a <UART_SetConfig+0xa3e>
 8015894:	a201      	add	r2, pc, #4	; (adr r2, 801589c <UART_SetConfig+0x950>)
 8015896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801589a:	bf00      	nop
 801589c:	08015927 	.word	0x08015927
 80158a0:	0801592f 	.word	0x0801592f
 80158a4:	0801598b 	.word	0x0801598b
 80158a8:	0801598b 	.word	0x0801598b
 80158ac:	08015937 	.word	0x08015937
 80158b0:	0801598b 	.word	0x0801598b
 80158b4:	0801598b 	.word	0x0801598b
 80158b8:	0801598b 	.word	0x0801598b
 80158bc:	08015947 	.word	0x08015947
 80158c0:	0801598b 	.word	0x0801598b
 80158c4:	0801598b 	.word	0x0801598b
 80158c8:	0801598b 	.word	0x0801598b
 80158cc:	0801598b 	.word	0x0801598b
 80158d0:	0801598b 	.word	0x0801598b
 80158d4:	0801598b 	.word	0x0801598b
 80158d8:	0801598b 	.word	0x0801598b
 80158dc:	08015957 	.word	0x08015957
 80158e0:	0801598b 	.word	0x0801598b
 80158e4:	0801598b 	.word	0x0801598b
 80158e8:	0801598b 	.word	0x0801598b
 80158ec:	0801598b 	.word	0x0801598b
 80158f0:	0801598b 	.word	0x0801598b
 80158f4:	0801598b 	.word	0x0801598b
 80158f8:	0801598b 	.word	0x0801598b
 80158fc:	0801598b 	.word	0x0801598b
 8015900:	0801598b 	.word	0x0801598b
 8015904:	0801598b 	.word	0x0801598b
 8015908:	0801598b 	.word	0x0801598b
 801590c:	0801598b 	.word	0x0801598b
 8015910:	0801598b 	.word	0x0801598b
 8015914:	0801598b 	.word	0x0801598b
 8015918:	0801598b 	.word	0x0801598b
 801591c:	0801597d 	.word	0x0801597d
 8015920:	2b40      	cmp	r3, #64	; 0x40
 8015922:	d02e      	beq.n	8015982 <UART_SetConfig+0xa36>
 8015924:	e031      	b.n	801598a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015926:	f7f9 fa59 	bl	800eddc <HAL_RCC_GetPCLK1Freq>
 801592a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801592c:	e033      	b.n	8015996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801592e:	f7f9 fa6b 	bl	800ee08 <HAL_RCC_GetPCLK2Freq>
 8015932:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015934:	e02f      	b.n	8015996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801593a:	4618      	mov	r0, r3
 801593c:	f7fb fa5c 	bl	8010df8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015944:	e027      	b.n	8015996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015946:	f107 0318 	add.w	r3, r7, #24
 801594a:	4618      	mov	r0, r3
 801594c:	f7fb fba8 	bl	80110a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015950:	69fb      	ldr	r3, [r7, #28]
 8015952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015954:	e01f      	b.n	8015996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015956:	4b2d      	ldr	r3, [pc, #180]	; (8015a0c <UART_SetConfig+0xac0>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	f003 0320 	and.w	r3, r3, #32
 801595e:	2b00      	cmp	r3, #0
 8015960:	d009      	beq.n	8015976 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015962:	4b2a      	ldr	r3, [pc, #168]	; (8015a0c <UART_SetConfig+0xac0>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	08db      	lsrs	r3, r3, #3
 8015968:	f003 0303 	and.w	r3, r3, #3
 801596c:	4a28      	ldr	r2, [pc, #160]	; (8015a10 <UART_SetConfig+0xac4>)
 801596e:	fa22 f303 	lsr.w	r3, r2, r3
 8015972:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015974:	e00f      	b.n	8015996 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015976:	4b26      	ldr	r3, [pc, #152]	; (8015a10 <UART_SetConfig+0xac4>)
 8015978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801597a:	e00c      	b.n	8015996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801597c:	4b25      	ldr	r3, [pc, #148]	; (8015a14 <UART_SetConfig+0xac8>)
 801597e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015980:	e009      	b.n	8015996 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015988:	e005      	b.n	8015996 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801598a:	2300      	movs	r3, #0
 801598c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801598e:	2301      	movs	r3, #1
 8015990:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015994:	bf00      	nop
    }

    if (pclk != 0U)
 8015996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015998:	2b00      	cmp	r3, #0
 801599a:	d021      	beq.n	80159e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159a0:	4a1d      	ldr	r2, [pc, #116]	; (8015a18 <UART_SetConfig+0xacc>)
 80159a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80159a6:	461a      	mov	r2, r3
 80159a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80159ae:	697b      	ldr	r3, [r7, #20]
 80159b0:	685b      	ldr	r3, [r3, #4]
 80159b2:	085b      	lsrs	r3, r3, #1
 80159b4:	441a      	add	r2, r3
 80159b6:	697b      	ldr	r3, [r7, #20]
 80159b8:	685b      	ldr	r3, [r3, #4]
 80159ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80159be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80159c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c2:	2b0f      	cmp	r3, #15
 80159c4:	d909      	bls.n	80159da <UART_SetConfig+0xa8e>
 80159c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159cc:	d205      	bcs.n	80159da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80159ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159d0:	b29a      	uxth	r2, r3
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	60da      	str	r2, [r3, #12]
 80159d8:	e002      	b.n	80159e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80159da:	2301      	movs	r3, #1
 80159dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80159e0:	697b      	ldr	r3, [r7, #20]
 80159e2:	2201      	movs	r2, #1
 80159e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	2201      	movs	r2, #1
 80159ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80159f0:	697b      	ldr	r3, [r7, #20]
 80159f2:	2200      	movs	r2, #0
 80159f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80159f6:	697b      	ldr	r3, [r7, #20]
 80159f8:	2200      	movs	r2, #0
 80159fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80159fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015a00:	4618      	mov	r0, r3
 8015a02:	3748      	adds	r7, #72	; 0x48
 8015a04:	46bd      	mov	sp, r7
 8015a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015a0a:	bf00      	nop
 8015a0c:	58024400 	.word	0x58024400
 8015a10:	03d09000 	.word	0x03d09000
 8015a14:	003d0900 	.word	0x003d0900
 8015a18:	0801b16c 	.word	0x0801b16c

08015a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b083      	sub	sp, #12
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a28:	f003 0308 	and.w	r3, r3, #8
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d00a      	beq.n	8015a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	685b      	ldr	r3, [r3, #4]
 8015a36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	430a      	orrs	r2, r1
 8015a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a4a:	f003 0301 	and.w	r3, r3, #1
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d00a      	beq.n	8015a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	685b      	ldr	r3, [r3, #4]
 8015a58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	430a      	orrs	r2, r1
 8015a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a6c:	f003 0302 	and.w	r3, r3, #2
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d00a      	beq.n	8015a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	685b      	ldr	r3, [r3, #4]
 8015a7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	430a      	orrs	r2, r1
 8015a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a8e:	f003 0304 	and.w	r3, r3, #4
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d00a      	beq.n	8015aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	685b      	ldr	r3, [r3, #4]
 8015a9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	430a      	orrs	r2, r1
 8015aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ab0:	f003 0310 	and.w	r3, r3, #16
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d00a      	beq.n	8015ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	689b      	ldr	r3, [r3, #8]
 8015abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	430a      	orrs	r2, r1
 8015acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ad2:	f003 0320 	and.w	r3, r3, #32
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d00a      	beq.n	8015af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	689b      	ldr	r3, [r3, #8]
 8015ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	430a      	orrs	r2, r1
 8015aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d01a      	beq.n	8015b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	430a      	orrs	r2, r1
 8015b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b1a:	d10a      	bne.n	8015b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	685b      	ldr	r3, [r3, #4]
 8015b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	430a      	orrs	r2, r1
 8015b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d00a      	beq.n	8015b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	430a      	orrs	r2, r1
 8015b52:	605a      	str	r2, [r3, #4]
  }
}
 8015b54:	bf00      	nop
 8015b56:	370c      	adds	r7, #12
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5e:	4770      	bx	lr

08015b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b098      	sub	sp, #96	; 0x60
 8015b64:	af02      	add	r7, sp, #8
 8015b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015b70:	f7f0 f956 	bl	8005e20 <HAL_GetTick>
 8015b74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	f003 0308 	and.w	r3, r3, #8
 8015b80:	2b08      	cmp	r3, #8
 8015b82:	d12f      	bne.n	8015be4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f000 f88e 	bl	8015cb4 <UART_WaitOnFlagUntilTimeout>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d022      	beq.n	8015be4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ba6:	e853 3f00 	ldrex	r3, [r3]
 8015baa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	461a      	mov	r2, r3
 8015bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8015bbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015bc4:	e841 2300 	strex	r3, r2, [r1]
 8015bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d1e6      	bne.n	8015b9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2220      	movs	r2, #32
 8015bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015be0:	2303      	movs	r3, #3
 8015be2:	e063      	b.n	8015cac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	f003 0304 	and.w	r3, r3, #4
 8015bee:	2b04      	cmp	r3, #4
 8015bf0:	d149      	bne.n	8015c86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015bf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015bf6:	9300      	str	r3, [sp, #0]
 8015bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015c00:	6878      	ldr	r0, [r7, #4]
 8015c02:	f000 f857 	bl	8015cb4 <UART_WaitOnFlagUntilTimeout>
 8015c06:	4603      	mov	r3, r0
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d03c      	beq.n	8015c86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c14:	e853 3f00 	ldrex	r3, [r3]
 8015c18:	623b      	str	r3, [r7, #32]
   return(result);
 8015c1a:	6a3b      	ldr	r3, [r7, #32]
 8015c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015c20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	461a      	mov	r2, r3
 8015c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8015c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c32:	e841 2300 	strex	r3, r2, [r1]
 8015c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d1e6      	bne.n	8015c0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	3308      	adds	r3, #8
 8015c44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c46:	693b      	ldr	r3, [r7, #16]
 8015c48:	e853 3f00 	ldrex	r3, [r3]
 8015c4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	f023 0301 	bic.w	r3, r3, #1
 8015c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	3308      	adds	r3, #8
 8015c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c5e:	61fa      	str	r2, [r7, #28]
 8015c60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c62:	69b9      	ldr	r1, [r7, #24]
 8015c64:	69fa      	ldr	r2, [r7, #28]
 8015c66:	e841 2300 	strex	r3, r2, [r1]
 8015c6a:	617b      	str	r3, [r7, #20]
   return(result);
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d1e5      	bne.n	8015c3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2220      	movs	r2, #32
 8015c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015c82:	2303      	movs	r3, #3
 8015c84:	e012      	b.n	8015cac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2220      	movs	r2, #32
 8015c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2220      	movs	r2, #32
 8015c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015caa:	2300      	movs	r3, #0
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3758      	adds	r7, #88	; 0x58
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}

08015cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b084      	sub	sp, #16
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	60f8      	str	r0, [r7, #12]
 8015cbc:	60b9      	str	r1, [r7, #8]
 8015cbe:	603b      	str	r3, [r7, #0]
 8015cc0:	4613      	mov	r3, r2
 8015cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015cc4:	e04f      	b.n	8015d66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015cc6:	69bb      	ldr	r3, [r7, #24]
 8015cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ccc:	d04b      	beq.n	8015d66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015cce:	f7f0 f8a7 	bl	8005e20 <HAL_GetTick>
 8015cd2:	4602      	mov	r2, r0
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	1ad3      	subs	r3, r2, r3
 8015cd8:	69ba      	ldr	r2, [r7, #24]
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	d302      	bcc.n	8015ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8015cde:	69bb      	ldr	r3, [r7, #24]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d101      	bne.n	8015ce8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015ce4:	2303      	movs	r3, #3
 8015ce6:	e04e      	b.n	8015d86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	f003 0304 	and.w	r3, r3, #4
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d037      	beq.n	8015d66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	2b80      	cmp	r3, #128	; 0x80
 8015cfa:	d034      	beq.n	8015d66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015cfc:	68bb      	ldr	r3, [r7, #8]
 8015cfe:	2b40      	cmp	r3, #64	; 0x40
 8015d00:	d031      	beq.n	8015d66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	69db      	ldr	r3, [r3, #28]
 8015d08:	f003 0308 	and.w	r3, r3, #8
 8015d0c:	2b08      	cmp	r3, #8
 8015d0e:	d110      	bne.n	8015d32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	2208      	movs	r2, #8
 8015d16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015d18:	68f8      	ldr	r0, [r7, #12]
 8015d1a:	f000 f95b 	bl	8015fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	2208      	movs	r2, #8
 8015d22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015d2e:	2301      	movs	r3, #1
 8015d30:	e029      	b.n	8015d86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	69db      	ldr	r3, [r3, #28]
 8015d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015d40:	d111      	bne.n	8015d66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015d4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015d4c:	68f8      	ldr	r0, [r7, #12]
 8015d4e:	f000 f941 	bl	8015fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	2220      	movs	r2, #32
 8015d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015d62:	2303      	movs	r3, #3
 8015d64:	e00f      	b.n	8015d86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	69da      	ldr	r2, [r3, #28]
 8015d6c:	68bb      	ldr	r3, [r7, #8]
 8015d6e:	4013      	ands	r3, r2
 8015d70:	68ba      	ldr	r2, [r7, #8]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	bf0c      	ite	eq
 8015d76:	2301      	moveq	r3, #1
 8015d78:	2300      	movne	r3, #0
 8015d7a:	b2db      	uxtb	r3, r3
 8015d7c:	461a      	mov	r2, r3
 8015d7e:	79fb      	ldrb	r3, [r7, #7]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d0a0      	beq.n	8015cc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015d84:	2300      	movs	r3, #0
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	3710      	adds	r7, #16
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}
	...

08015d90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015d90:	b480      	push	{r7}
 8015d92:	b0a3      	sub	sp, #140	; 0x8c
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	60f8      	str	r0, [r7, #12]
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	4613      	mov	r3, r2
 8015d9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	68ba      	ldr	r2, [r7, #8]
 8015da2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	88fa      	ldrh	r2, [r7, #6]
 8015da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	88fa      	ldrh	r2, [r7, #6]
 8015db0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	2200      	movs	r2, #0
 8015db8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	689b      	ldr	r3, [r3, #8]
 8015dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015dc2:	d10e      	bne.n	8015de2 <UART_Start_Receive_IT+0x52>
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	691b      	ldr	r3, [r3, #16]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d105      	bne.n	8015dd8 <UART_Start_Receive_IT+0x48>
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015dd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015dd6:	e02d      	b.n	8015e34 <UART_Start_Receive_IT+0xa4>
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	22ff      	movs	r2, #255	; 0xff
 8015ddc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015de0:	e028      	b.n	8015e34 <UART_Start_Receive_IT+0xa4>
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	689b      	ldr	r3, [r3, #8]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d10d      	bne.n	8015e06 <UART_Start_Receive_IT+0x76>
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	691b      	ldr	r3, [r3, #16]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d104      	bne.n	8015dfc <UART_Start_Receive_IT+0x6c>
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	22ff      	movs	r2, #255	; 0xff
 8015df6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015dfa:	e01b      	b.n	8015e34 <UART_Start_Receive_IT+0xa4>
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	227f      	movs	r2, #127	; 0x7f
 8015e00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015e04:	e016      	b.n	8015e34 <UART_Start_Receive_IT+0xa4>
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	689b      	ldr	r3, [r3, #8]
 8015e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015e0e:	d10d      	bne.n	8015e2c <UART_Start_Receive_IT+0x9c>
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	691b      	ldr	r3, [r3, #16]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d104      	bne.n	8015e22 <UART_Start_Receive_IT+0x92>
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	227f      	movs	r2, #127	; 0x7f
 8015e1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015e20:	e008      	b.n	8015e34 <UART_Start_Receive_IT+0xa4>
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	223f      	movs	r2, #63	; 0x3f
 8015e26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015e2a:	e003      	b.n	8015e34 <UART_Start_Receive_IT+0xa4>
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	2200      	movs	r2, #0
 8015e38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	2222      	movs	r2, #34	; 0x22
 8015e40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	3308      	adds	r3, #8
 8015e4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e4e:	e853 3f00 	ldrex	r3, [r3]
 8015e52:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e56:	f043 0301 	orr.w	r3, r3, #1
 8015e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	3308      	adds	r3, #8
 8015e64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015e68:	673a      	str	r2, [r7, #112]	; 0x70
 8015e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015e6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015e70:	e841 2300 	strex	r3, r2, [r1]
 8015e74:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d1e3      	bne.n	8015e44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015e84:	d14f      	bne.n	8015f26 <UART_Start_Receive_IT+0x196>
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015e8c:	88fa      	ldrh	r2, [r7, #6]
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d349      	bcc.n	8015f26 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	689b      	ldr	r3, [r3, #8]
 8015e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015e9a:	d107      	bne.n	8015eac <UART_Start_Receive_IT+0x11c>
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	691b      	ldr	r3, [r3, #16]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d103      	bne.n	8015eac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	4a47      	ldr	r2, [pc, #284]	; (8015fc4 <UART_Start_Receive_IT+0x234>)
 8015ea8:	675a      	str	r2, [r3, #116]	; 0x74
 8015eaa:	e002      	b.n	8015eb2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	4a46      	ldr	r2, [pc, #280]	; (8015fc8 <UART_Start_Receive_IT+0x238>)
 8015eb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	691b      	ldr	r3, [r3, #16]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d01a      	beq.n	8015ef0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ec2:	e853 3f00 	ldrex	r3, [r3]
 8015ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ece:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	461a      	mov	r2, r3
 8015ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015edc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015ede:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ee0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015ee2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ee4:	e841 2300 	strex	r3, r2, [r1]
 8015ee8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d1e4      	bne.n	8015eba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	3308      	adds	r3, #8
 8015ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015efa:	e853 3f00 	ldrex	r3, [r3]
 8015efe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015f06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	3308      	adds	r3, #8
 8015f0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015f10:	64ba      	str	r2, [r7, #72]	; 0x48
 8015f12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015f18:	e841 2300 	strex	r3, r2, [r1]
 8015f1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d1e5      	bne.n	8015ef0 <UART_Start_Receive_IT+0x160>
 8015f24:	e046      	b.n	8015fb4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	689b      	ldr	r3, [r3, #8]
 8015f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f2e:	d107      	bne.n	8015f40 <UART_Start_Receive_IT+0x1b0>
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	691b      	ldr	r3, [r3, #16]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d103      	bne.n	8015f40 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	4a24      	ldr	r2, [pc, #144]	; (8015fcc <UART_Start_Receive_IT+0x23c>)
 8015f3c:	675a      	str	r2, [r3, #116]	; 0x74
 8015f3e:	e002      	b.n	8015f46 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	4a23      	ldr	r2, [pc, #140]	; (8015fd0 <UART_Start_Receive_IT+0x240>)
 8015f44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	691b      	ldr	r3, [r3, #16]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d019      	beq.n	8015f82 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f56:	e853 3f00 	ldrex	r3, [r3]
 8015f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8015f62:	677b      	str	r3, [r7, #116]	; 0x74
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	461a      	mov	r2, r3
 8015f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8015f6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f74:	e841 2300 	strex	r3, r2, [r1]
 8015f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d1e6      	bne.n	8015f4e <UART_Start_Receive_IT+0x1be>
 8015f80:	e018      	b.n	8015fb4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	e853 3f00 	ldrex	r3, [r3]
 8015f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8015f90:	693b      	ldr	r3, [r7, #16]
 8015f92:	f043 0320 	orr.w	r3, r3, #32
 8015f96:	67bb      	str	r3, [r7, #120]	; 0x78
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	461a      	mov	r2, r3
 8015f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015fa0:	623b      	str	r3, [r7, #32]
 8015fa2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fa4:	69f9      	ldr	r1, [r7, #28]
 8015fa6:	6a3a      	ldr	r2, [r7, #32]
 8015fa8:	e841 2300 	strex	r3, r2, [r1]
 8015fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8015fae:	69bb      	ldr	r3, [r7, #24]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d1e6      	bne.n	8015f82 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015fb4:	2300      	movs	r3, #0
}
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	378c      	adds	r7, #140	; 0x8c
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop
 8015fc4:	080167f5 	.word	0x080167f5
 8015fc8:	08016495 	.word	0x08016495
 8015fcc:	080162dd 	.word	0x080162dd
 8015fd0:	08016125 	.word	0x08016125

08015fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015fd4:	b480      	push	{r7}
 8015fd6:	b095      	sub	sp, #84	; 0x54
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fe4:	e853 3f00 	ldrex	r3, [r3]
 8015fe8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	461a      	mov	r2, r3
 8015ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8015ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ffe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016002:	e841 2300 	strex	r3, r2, [r1]
 8016006:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801600a:	2b00      	cmp	r3, #0
 801600c:	d1e6      	bne.n	8015fdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	3308      	adds	r3, #8
 8016014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016016:	6a3b      	ldr	r3, [r7, #32]
 8016018:	e853 3f00 	ldrex	r3, [r3]
 801601c:	61fb      	str	r3, [r7, #28]
   return(result);
 801601e:	69fa      	ldr	r2, [r7, #28]
 8016020:	4b1e      	ldr	r3, [pc, #120]	; (801609c <UART_EndRxTransfer+0xc8>)
 8016022:	4013      	ands	r3, r2
 8016024:	64bb      	str	r3, [r7, #72]	; 0x48
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	3308      	adds	r3, #8
 801602c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801602e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016036:	e841 2300 	strex	r3, r2, [r1]
 801603a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801603e:	2b00      	cmp	r3, #0
 8016040:	d1e5      	bne.n	801600e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016046:	2b01      	cmp	r3, #1
 8016048:	d118      	bne.n	801607c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	e853 3f00 	ldrex	r3, [r3]
 8016056:	60bb      	str	r3, [r7, #8]
   return(result);
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	f023 0310 	bic.w	r3, r3, #16
 801605e:	647b      	str	r3, [r7, #68]	; 0x44
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	461a      	mov	r2, r3
 8016066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016068:	61bb      	str	r3, [r7, #24]
 801606a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801606c:	6979      	ldr	r1, [r7, #20]
 801606e:	69ba      	ldr	r2, [r7, #24]
 8016070:	e841 2300 	strex	r3, r2, [r1]
 8016074:	613b      	str	r3, [r7, #16]
   return(result);
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d1e6      	bne.n	801604a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2220      	movs	r2, #32
 8016080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2200      	movs	r2, #0
 8016088:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2200      	movs	r2, #0
 801608e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8016090:	bf00      	nop
 8016092:	3754      	adds	r7, #84	; 0x54
 8016094:	46bd      	mov	sp, r7
 8016096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609a:	4770      	bx	lr
 801609c:	effffffe 	.word	0xeffffffe

080160a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b084      	sub	sp, #16
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	2200      	movs	r2, #0
 80160b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	2200      	movs	r2, #0
 80160ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80160be:	68f8      	ldr	r0, [r7, #12]
 80160c0:	f7fe ff2e 	bl	8014f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80160c4:	bf00      	nop
 80160c6:	3710      	adds	r7, #16
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}

080160cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b088      	sub	sp, #32
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	e853 3f00 	ldrex	r3, [r3]
 80160e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80160e8:	61fb      	str	r3, [r7, #28]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	461a      	mov	r2, r3
 80160f0:	69fb      	ldr	r3, [r7, #28]
 80160f2:	61bb      	str	r3, [r7, #24]
 80160f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160f6:	6979      	ldr	r1, [r7, #20]
 80160f8:	69ba      	ldr	r2, [r7, #24]
 80160fa:	e841 2300 	strex	r3, r2, [r1]
 80160fe:	613b      	str	r3, [r7, #16]
   return(result);
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d1e6      	bne.n	80160d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2220      	movs	r2, #32
 801610a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	2200      	movs	r2, #0
 8016112:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f7fe fef9 	bl	8014f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801611a:	bf00      	nop
 801611c:	3720      	adds	r7, #32
 801611e:	46bd      	mov	sp, r7
 8016120:	bd80      	pop	{r7, pc}
	...

08016124 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b09c      	sub	sp, #112	; 0x70
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016132:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801613c:	2b22      	cmp	r3, #34	; 0x22
 801613e:	f040 80be 	bne.w	80162be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016148:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801614c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8016150:	b2d9      	uxtb	r1, r3
 8016152:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8016156:	b2da      	uxtb	r2, r3
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801615c:	400a      	ands	r2, r1
 801615e:	b2d2      	uxtb	r2, r2
 8016160:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016166:	1c5a      	adds	r2, r3, #1
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016172:	b29b      	uxth	r3, r3
 8016174:	3b01      	subs	r3, #1
 8016176:	b29a      	uxth	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016184:	b29b      	uxth	r3, r3
 8016186:	2b00      	cmp	r3, #0
 8016188:	f040 80a1 	bne.w	80162ce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016194:	e853 3f00 	ldrex	r3, [r3]
 8016198:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801619a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801619c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80161a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	461a      	mov	r2, r3
 80161a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80161aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80161ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80161b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80161b2:	e841 2300 	strex	r3, r2, [r1]
 80161b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80161b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d1e6      	bne.n	801618c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	3308      	adds	r3, #8
 80161c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161c8:	e853 3f00 	ldrex	r3, [r3]
 80161cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80161ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161d0:	f023 0301 	bic.w	r3, r3, #1
 80161d4:	667b      	str	r3, [r7, #100]	; 0x64
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	3308      	adds	r3, #8
 80161dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80161de:	647a      	str	r2, [r7, #68]	; 0x44
 80161e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80161e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80161e6:	e841 2300 	strex	r3, r2, [r1]
 80161ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80161ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d1e5      	bne.n	80161be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2220      	movs	r2, #32
 80161f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2200      	movs	r2, #0
 80161fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2200      	movs	r2, #0
 8016204:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	4a33      	ldr	r2, [pc, #204]	; (80162d8 <UART_RxISR_8BIT+0x1b4>)
 801620c:	4293      	cmp	r3, r2
 801620e:	d01f      	beq.n	8016250 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	685b      	ldr	r3, [r3, #4]
 8016216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801621a:	2b00      	cmp	r3, #0
 801621c:	d018      	beq.n	8016250 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016226:	e853 3f00 	ldrex	r3, [r3]
 801622a:	623b      	str	r3, [r7, #32]
   return(result);
 801622c:	6a3b      	ldr	r3, [r7, #32]
 801622e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016232:	663b      	str	r3, [r7, #96]	; 0x60
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	461a      	mov	r2, r3
 801623a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801623c:	633b      	str	r3, [r7, #48]	; 0x30
 801623e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016244:	e841 2300 	strex	r3, r2, [r1]
 8016248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801624c:	2b00      	cmp	r3, #0
 801624e:	d1e6      	bne.n	801621e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016254:	2b01      	cmp	r3, #1
 8016256:	d12e      	bne.n	80162b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	2200      	movs	r2, #0
 801625c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016264:	693b      	ldr	r3, [r7, #16]
 8016266:	e853 3f00 	ldrex	r3, [r3]
 801626a:	60fb      	str	r3, [r7, #12]
   return(result);
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	f023 0310 	bic.w	r3, r3, #16
 8016272:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	461a      	mov	r2, r3
 801627a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801627c:	61fb      	str	r3, [r7, #28]
 801627e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016280:	69b9      	ldr	r1, [r7, #24]
 8016282:	69fa      	ldr	r2, [r7, #28]
 8016284:	e841 2300 	strex	r3, r2, [r1]
 8016288:	617b      	str	r3, [r7, #20]
   return(result);
 801628a:	697b      	ldr	r3, [r7, #20]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d1e6      	bne.n	801625e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	69db      	ldr	r3, [r3, #28]
 8016296:	f003 0310 	and.w	r3, r3, #16
 801629a:	2b10      	cmp	r3, #16
 801629c:	d103      	bne.n	80162a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	2210      	movs	r2, #16
 80162a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80162ac:	4619      	mov	r1, r3
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	f7fe fe40 	bl	8014f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80162b4:	e00b      	b.n	80162ce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f7ec fd20 	bl	8002cfc <HAL_UART_RxCpltCallback>
}
 80162bc:	e007      	b.n	80162ce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	699a      	ldr	r2, [r3, #24]
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	f042 0208 	orr.w	r2, r2, #8
 80162cc:	619a      	str	r2, [r3, #24]
}
 80162ce:	bf00      	nop
 80162d0:	3770      	adds	r7, #112	; 0x70
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}
 80162d6:	bf00      	nop
 80162d8:	58000c00 	.word	0x58000c00

080162dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b09c      	sub	sp, #112	; 0x70
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80162ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80162f4:	2b22      	cmp	r3, #34	; 0x22
 80162f6:	f040 80be 	bne.w	8016476 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016300:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016308:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801630a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801630e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8016312:	4013      	ands	r3, r2
 8016314:	b29a      	uxth	r2, r3
 8016316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016318:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801631e:	1c9a      	adds	r2, r3, #2
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801632a:	b29b      	uxth	r3, r3
 801632c:	3b01      	subs	r3, #1
 801632e:	b29a      	uxth	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801633c:	b29b      	uxth	r3, r3
 801633e:	2b00      	cmp	r3, #0
 8016340:	f040 80a1 	bne.w	8016486 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801634a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801634c:	e853 3f00 	ldrex	r3, [r3]
 8016350:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016358:	667b      	str	r3, [r7, #100]	; 0x64
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	461a      	mov	r2, r3
 8016360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016362:	657b      	str	r3, [r7, #84]	; 0x54
 8016364:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016366:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801636a:	e841 2300 	strex	r3, r2, [r1]
 801636e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016372:	2b00      	cmp	r3, #0
 8016374:	d1e6      	bne.n	8016344 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	3308      	adds	r3, #8
 801637c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016380:	e853 3f00 	ldrex	r3, [r3]
 8016384:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016388:	f023 0301 	bic.w	r3, r3, #1
 801638c:	663b      	str	r3, [r7, #96]	; 0x60
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	3308      	adds	r3, #8
 8016394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016396:	643a      	str	r2, [r7, #64]	; 0x40
 8016398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801639a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801639c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801639e:	e841 2300 	strex	r3, r2, [r1]
 80163a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80163a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d1e5      	bne.n	8016376 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2220      	movs	r2, #32
 80163ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2200      	movs	r2, #0
 80163b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2200      	movs	r2, #0
 80163bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	4a33      	ldr	r2, [pc, #204]	; (8016490 <UART_RxISR_16BIT+0x1b4>)
 80163c4:	4293      	cmp	r3, r2
 80163c6:	d01f      	beq.n	8016408 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	685b      	ldr	r3, [r3, #4]
 80163ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d018      	beq.n	8016408 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163dc:	6a3b      	ldr	r3, [r7, #32]
 80163de:	e853 3f00 	ldrex	r3, [r3]
 80163e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80163e4:	69fb      	ldr	r3, [r7, #28]
 80163e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80163ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	461a      	mov	r2, r3
 80163f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80163f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80163fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163fc:	e841 2300 	strex	r3, r2, [r1]
 8016400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016404:	2b00      	cmp	r3, #0
 8016406:	d1e6      	bne.n	80163d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801640c:	2b01      	cmp	r3, #1
 801640e:	d12e      	bne.n	801646e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2200      	movs	r2, #0
 8016414:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	e853 3f00 	ldrex	r3, [r3]
 8016422:	60bb      	str	r3, [r7, #8]
   return(result);
 8016424:	68bb      	ldr	r3, [r7, #8]
 8016426:	f023 0310 	bic.w	r3, r3, #16
 801642a:	65bb      	str	r3, [r7, #88]	; 0x58
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	461a      	mov	r2, r3
 8016432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016434:	61bb      	str	r3, [r7, #24]
 8016436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016438:	6979      	ldr	r1, [r7, #20]
 801643a:	69ba      	ldr	r2, [r7, #24]
 801643c:	e841 2300 	strex	r3, r2, [r1]
 8016440:	613b      	str	r3, [r7, #16]
   return(result);
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d1e6      	bne.n	8016416 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	69db      	ldr	r3, [r3, #28]
 801644e:	f003 0310 	and.w	r3, r3, #16
 8016452:	2b10      	cmp	r3, #16
 8016454:	d103      	bne.n	801645e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	2210      	movs	r2, #16
 801645c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016464:	4619      	mov	r1, r3
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	f7fe fd64 	bl	8014f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801646c:	e00b      	b.n	8016486 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f7ec fc44 	bl	8002cfc <HAL_UART_RxCpltCallback>
}
 8016474:	e007      	b.n	8016486 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	699a      	ldr	r2, [r3, #24]
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	f042 0208 	orr.w	r2, r2, #8
 8016484:	619a      	str	r2, [r3, #24]
}
 8016486:	bf00      	nop
 8016488:	3770      	adds	r7, #112	; 0x70
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	58000c00 	.word	0x58000c00

08016494 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b0ac      	sub	sp, #176	; 0xb0
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	69db      	ldr	r3, [r3, #28]
 80164ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	689b      	ldr	r3, [r3, #8]
 80164c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80164ca:	2b22      	cmp	r3, #34	; 0x22
 80164cc:	f040 8180 	bne.w	80167d0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80164d6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80164da:	e123      	b.n	8016724 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164e2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80164e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80164ea:	b2d9      	uxtb	r1, r3
 80164ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80164f0:	b2da      	uxtb	r2, r3
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164f6:	400a      	ands	r2, r1
 80164f8:	b2d2      	uxtb	r2, r2
 80164fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016500:	1c5a      	adds	r2, r3, #1
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801650c:	b29b      	uxth	r3, r3
 801650e:	3b01      	subs	r3, #1
 8016510:	b29a      	uxth	r2, r3
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	69db      	ldr	r3, [r3, #28]
 801651e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016526:	f003 0307 	and.w	r3, r3, #7
 801652a:	2b00      	cmp	r3, #0
 801652c:	d053      	beq.n	80165d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801652e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016532:	f003 0301 	and.w	r3, r3, #1
 8016536:	2b00      	cmp	r3, #0
 8016538:	d011      	beq.n	801655e <UART_RxISR_8BIT_FIFOEN+0xca>
 801653a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801653e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016542:	2b00      	cmp	r3, #0
 8016544:	d00b      	beq.n	801655e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	2201      	movs	r2, #1
 801654c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016554:	f043 0201 	orr.w	r2, r3, #1
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801655e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016562:	f003 0302 	and.w	r3, r3, #2
 8016566:	2b00      	cmp	r3, #0
 8016568:	d011      	beq.n	801658e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801656a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801656e:	f003 0301 	and.w	r3, r3, #1
 8016572:	2b00      	cmp	r3, #0
 8016574:	d00b      	beq.n	801658e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	2202      	movs	r2, #2
 801657c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016584:	f043 0204 	orr.w	r2, r3, #4
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801658e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016592:	f003 0304 	and.w	r3, r3, #4
 8016596:	2b00      	cmp	r3, #0
 8016598:	d011      	beq.n	80165be <UART_RxISR_8BIT_FIFOEN+0x12a>
 801659a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801659e:	f003 0301 	and.w	r3, r3, #1
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d00b      	beq.n	80165be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	2204      	movs	r2, #4
 80165ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165b4:	f043 0202 	orr.w	r2, r3, #2
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d006      	beq.n	80165d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f7fe fca9 	bl	8014f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	2200      	movs	r2, #0
 80165d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80165dc:	b29b      	uxth	r3, r3
 80165de:	2b00      	cmp	r3, #0
 80165e0:	f040 80a0 	bne.w	8016724 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80165ec:	e853 3f00 	ldrex	r3, [r3]
 80165f0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80165f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80165f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80165f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	461a      	mov	r2, r3
 8016602:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016606:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016608:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801660a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801660c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801660e:	e841 2300 	strex	r3, r2, [r1]
 8016612:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016616:	2b00      	cmp	r3, #0
 8016618:	d1e4      	bne.n	80165e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	3308      	adds	r3, #8
 8016620:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016624:	e853 3f00 	ldrex	r3, [r3]
 8016628:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801662a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801662c:	4b6e      	ldr	r3, [pc, #440]	; (80167e8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801662e:	4013      	ands	r3, r2
 8016630:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	3308      	adds	r3, #8
 801663a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801663e:	66ba      	str	r2, [r7, #104]	; 0x68
 8016640:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016642:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016644:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016646:	e841 2300 	strex	r3, r2, [r1]
 801664a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801664c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801664e:	2b00      	cmp	r3, #0
 8016650:	d1e3      	bne.n	801661a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	2220      	movs	r2, #32
 8016656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2200      	movs	r2, #0
 801665e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2200      	movs	r2, #0
 8016664:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	4a60      	ldr	r2, [pc, #384]	; (80167ec <UART_RxISR_8BIT_FIFOEN+0x358>)
 801666c:	4293      	cmp	r3, r2
 801666e:	d021      	beq.n	80166b4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	685b      	ldr	r3, [r3, #4]
 8016676:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801667a:	2b00      	cmp	r3, #0
 801667c:	d01a      	beq.n	80166b4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016686:	e853 3f00 	ldrex	r3, [r3]
 801668a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801668e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	461a      	mov	r2, r3
 801669c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80166a0:	657b      	str	r3, [r7, #84]	; 0x54
 80166a2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80166a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166a8:	e841 2300 	strex	r3, r2, [r1]
 80166ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80166ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d1e4      	bne.n	801667e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166b8:	2b01      	cmp	r3, #1
 80166ba:	d130      	bne.n	801671e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2200      	movs	r2, #0
 80166c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166ca:	e853 3f00 	ldrex	r3, [r3]
 80166ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80166d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d2:	f023 0310 	bic.w	r3, r3, #16
 80166d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	461a      	mov	r2, r3
 80166e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80166e4:	643b      	str	r3, [r7, #64]	; 0x40
 80166e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80166ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80166ec:	e841 2300 	strex	r3, r2, [r1]
 80166f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80166f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d1e4      	bne.n	80166c2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	69db      	ldr	r3, [r3, #28]
 80166fe:	f003 0310 	and.w	r3, r3, #16
 8016702:	2b10      	cmp	r3, #16
 8016704:	d103      	bne.n	801670e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	2210      	movs	r2, #16
 801670c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016714:	4619      	mov	r1, r3
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f7fe fc0c 	bl	8014f34 <HAL_UARTEx_RxEventCallback>
 801671c:	e002      	b.n	8016724 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f7ec faec 	bl	8002cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016724:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016728:	2b00      	cmp	r3, #0
 801672a:	d006      	beq.n	801673a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801672c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016730:	f003 0320 	and.w	r3, r3, #32
 8016734:	2b00      	cmp	r3, #0
 8016736:	f47f aed1 	bne.w	80164dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016740:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016744:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8016748:	2b00      	cmp	r3, #0
 801674a:	d049      	beq.n	80167e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016752:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8016756:	429a      	cmp	r2, r3
 8016758:	d242      	bcs.n	80167e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	3308      	adds	r3, #8
 8016760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016762:	6a3b      	ldr	r3, [r7, #32]
 8016764:	e853 3f00 	ldrex	r3, [r3]
 8016768:	61fb      	str	r3, [r7, #28]
   return(result);
 801676a:	69fb      	ldr	r3, [r7, #28]
 801676c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	3308      	adds	r3, #8
 801677a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801677e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016786:	e841 2300 	strex	r3, r2, [r1]
 801678a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801678e:	2b00      	cmp	r3, #0
 8016790:	d1e3      	bne.n	801675a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	4a16      	ldr	r2, [pc, #88]	; (80167f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8016796:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	e853 3f00 	ldrex	r3, [r3]
 80167a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80167a6:	68bb      	ldr	r3, [r7, #8]
 80167a8:	f043 0320 	orr.w	r3, r3, #32
 80167ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	461a      	mov	r2, r3
 80167b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80167ba:	61bb      	str	r3, [r7, #24]
 80167bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167be:	6979      	ldr	r1, [r7, #20]
 80167c0:	69ba      	ldr	r2, [r7, #24]
 80167c2:	e841 2300 	strex	r3, r2, [r1]
 80167c6:	613b      	str	r3, [r7, #16]
   return(result);
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d1e4      	bne.n	8016798 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80167ce:	e007      	b.n	80167e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	699a      	ldr	r2, [r3, #24]
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	f042 0208 	orr.w	r2, r2, #8
 80167de:	619a      	str	r2, [r3, #24]
}
 80167e0:	bf00      	nop
 80167e2:	37b0      	adds	r7, #176	; 0xb0
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	effffffe 	.word	0xeffffffe
 80167ec:	58000c00 	.word	0x58000c00
 80167f0:	08016125 	.word	0x08016125

080167f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b0ae      	sub	sp, #184	; 0xb8
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016802:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	69db      	ldr	r3, [r3, #28]
 801680c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	689b      	ldr	r3, [r3, #8]
 8016820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801682a:	2b22      	cmp	r3, #34	; 0x22
 801682c:	f040 8184 	bne.w	8016b38 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016836:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801683a:	e127      	b.n	8016a8c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016842:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801684a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801684e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8016852:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016856:	4013      	ands	r3, r2
 8016858:	b29a      	uxth	r2, r3
 801685a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801685e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016864:	1c9a      	adds	r2, r3, #2
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016870:	b29b      	uxth	r3, r3
 8016872:	3b01      	subs	r3, #1
 8016874:	b29a      	uxth	r2, r3
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	69db      	ldr	r3, [r3, #28]
 8016882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801688a:	f003 0307 	and.w	r3, r3, #7
 801688e:	2b00      	cmp	r3, #0
 8016890:	d053      	beq.n	801693a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016896:	f003 0301 	and.w	r3, r3, #1
 801689a:	2b00      	cmp	r3, #0
 801689c:	d011      	beq.n	80168c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 801689e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d00b      	beq.n	80168c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	2201      	movs	r2, #1
 80168b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168b8:	f043 0201 	orr.w	r2, r3, #1
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80168c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80168c6:	f003 0302 	and.w	r3, r3, #2
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d011      	beq.n	80168f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80168ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80168d2:	f003 0301 	and.w	r3, r3, #1
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d00b      	beq.n	80168f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2202      	movs	r2, #2
 80168e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168e8:	f043 0204 	orr.w	r2, r3, #4
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80168f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80168f6:	f003 0304 	and.w	r3, r3, #4
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d011      	beq.n	8016922 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80168fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016902:	f003 0301 	and.w	r3, r3, #1
 8016906:	2b00      	cmp	r3, #0
 8016908:	d00b      	beq.n	8016922 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	2204      	movs	r2, #4
 8016910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016918:	f043 0202 	orr.w	r2, r3, #2
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016928:	2b00      	cmp	r3, #0
 801692a:	d006      	beq.n	801693a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f7fe faf7 	bl	8014f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2200      	movs	r2, #0
 8016936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016940:	b29b      	uxth	r3, r3
 8016942:	2b00      	cmp	r3, #0
 8016944:	f040 80a2 	bne.w	8016a8c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801694e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016950:	e853 3f00 	ldrex	r3, [r3]
 8016954:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801695c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	461a      	mov	r2, r3
 8016966:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801696a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801696e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016970:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016972:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016976:	e841 2300 	strex	r3, r2, [r1]
 801697a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801697c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801697e:	2b00      	cmp	r3, #0
 8016980:	d1e2      	bne.n	8016948 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	3308      	adds	r3, #8
 8016988:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801698a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801698c:	e853 3f00 	ldrex	r3, [r3]
 8016990:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016994:	4b6e      	ldr	r3, [pc, #440]	; (8016b50 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016996:	4013      	ands	r3, r2
 8016998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	3308      	adds	r3, #8
 80169a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80169a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80169a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80169ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80169ae:	e841 2300 	strex	r3, r2, [r1]
 80169b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80169b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d1e3      	bne.n	8016982 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2220      	movs	r2, #32
 80169be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2200      	movs	r2, #0
 80169c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2200      	movs	r2, #0
 80169cc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	4a60      	ldr	r2, [pc, #384]	; (8016b54 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80169d4:	4293      	cmp	r3, r2
 80169d6:	d021      	beq.n	8016a1c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d01a      	beq.n	8016a1c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169ee:	e853 3f00 	ldrex	r3, [r3]
 80169f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80169f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80169f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80169fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	461a      	mov	r2, r3
 8016a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8016a0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016a0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016a10:	e841 2300 	strex	r3, r2, [r1]
 8016a14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d1e4      	bne.n	80169e6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d130      	bne.n	8016a86 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2200      	movs	r2, #0
 8016a28:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a32:	e853 3f00 	ldrex	r3, [r3]
 8016a36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a3a:	f023 0310 	bic.w	r3, r3, #16
 8016a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	461a      	mov	r2, r3
 8016a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8016a4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016a54:	e841 2300 	strex	r3, r2, [r1]
 8016a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d1e4      	bne.n	8016a2a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	69db      	ldr	r3, [r3, #28]
 8016a66:	f003 0310 	and.w	r3, r3, #16
 8016a6a:	2b10      	cmp	r3, #16
 8016a6c:	d103      	bne.n	8016a76 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	2210      	movs	r2, #16
 8016a74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f7fe fa58 	bl	8014f34 <HAL_UARTEx_RxEventCallback>
 8016a84:	e002      	b.n	8016a8c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016a86:	6878      	ldr	r0, [r7, #4]
 8016a88:	f7ec f938 	bl	8002cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016a8c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d006      	beq.n	8016aa2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016a94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a98:	f003 0320 	and.w	r3, r3, #32
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	f47f aecd 	bne.w	801683c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016aa8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016aac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d049      	beq.n	8016b48 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016aba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d242      	bcs.n	8016b48 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	3308      	adds	r3, #8
 8016ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016acc:	e853 3f00 	ldrex	r3, [r3]
 8016ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8016ad2:	6a3b      	ldr	r3, [r7, #32]
 8016ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	3308      	adds	r3, #8
 8016ae2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016ae6:	633a      	str	r2, [r7, #48]	; 0x30
 8016ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016aee:	e841 2300 	strex	r3, r2, [r1]
 8016af2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d1e3      	bne.n	8016ac2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	4a16      	ldr	r2, [pc, #88]	; (8016b58 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8016afe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b06:	693b      	ldr	r3, [r7, #16]
 8016b08:	e853 3f00 	ldrex	r3, [r3]
 8016b0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	f043 0320 	orr.w	r3, r3, #32
 8016b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016b22:	61fb      	str	r3, [r7, #28]
 8016b24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b26:	69b9      	ldr	r1, [r7, #24]
 8016b28:	69fa      	ldr	r2, [r7, #28]
 8016b2a:	e841 2300 	strex	r3, r2, [r1]
 8016b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d1e4      	bne.n	8016b00 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016b36:	e007      	b.n	8016b48 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	699a      	ldr	r2, [r3, #24]
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	f042 0208 	orr.w	r2, r2, #8
 8016b46:	619a      	str	r2, [r3, #24]
}
 8016b48:	bf00      	nop
 8016b4a:	37b8      	adds	r7, #184	; 0xb8
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	effffffe 	.word	0xeffffffe
 8016b54:	58000c00 	.word	0x58000c00
 8016b58:	080162dd 	.word	0x080162dd

08016b5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	b083      	sub	sp, #12
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016b64:	bf00      	nop
 8016b66:	370c      	adds	r7, #12
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6e:	4770      	bx	lr

08016b70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016b70:	b480      	push	{r7}
 8016b72:	b083      	sub	sp, #12
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016b78:	bf00      	nop
 8016b7a:	370c      	adds	r7, #12
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b82:	4770      	bx	lr

08016b84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016b84:	b480      	push	{r7}
 8016b86:	b083      	sub	sp, #12
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016b8c:	bf00      	nop
 8016b8e:	370c      	adds	r7, #12
 8016b90:	46bd      	mov	sp, r7
 8016b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b96:	4770      	bx	lr

08016b98 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016b98:	b480      	push	{r7}
 8016b9a:	b089      	sub	sp, #36	; 0x24
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016ba6:	2b01      	cmp	r3, #1
 8016ba8:	d101      	bne.n	8016bae <HAL_UARTEx_EnableStopMode+0x16>
 8016baa:	2302      	movs	r3, #2
 8016bac:	e021      	b.n	8016bf2 <HAL_UARTEx_EnableStopMode+0x5a>
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	2201      	movs	r2, #1
 8016bb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	e853 3f00 	ldrex	r3, [r3]
 8016bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	f043 0302 	orr.w	r3, r3, #2
 8016bca:	61fb      	str	r3, [r7, #28]
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	461a      	mov	r2, r3
 8016bd2:	69fb      	ldr	r3, [r7, #28]
 8016bd4:	61bb      	str	r3, [r7, #24]
 8016bd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bd8:	6979      	ldr	r1, [r7, #20]
 8016bda:	69ba      	ldr	r2, [r7, #24]
 8016bdc:	e841 2300 	strex	r3, r2, [r1]
 8016be0:	613b      	str	r3, [r7, #16]
   return(result);
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d1e6      	bne.n	8016bb6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	2200      	movs	r2, #0
 8016bec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016bf0:	2300      	movs	r3, #0
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3724      	adds	r7, #36	; 0x24
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfc:	4770      	bx	lr

08016bfe <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b084      	sub	sp, #16
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016c0c:	2b01      	cmp	r3, #1
 8016c0e:	d101      	bne.n	8016c14 <HAL_UARTEx_EnableFifoMode+0x16>
 8016c10:	2302      	movs	r3, #2
 8016c12:	e02b      	b.n	8016c6c <HAL_UARTEx_EnableFifoMode+0x6e>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2201      	movs	r2, #1
 8016c18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2224      	movs	r2, #36	; 0x24
 8016c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	681a      	ldr	r2, [r3, #0]
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	f022 0201 	bic.w	r2, r2, #1
 8016c3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016c42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016c4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	68fa      	ldr	r2, [r7, #12]
 8016c52:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016c54:	6878      	ldr	r0, [r7, #4]
 8016c56:	f000 f8c3 	bl	8016de0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	2220      	movs	r2, #32
 8016c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2200      	movs	r2, #0
 8016c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016c6a:	2300      	movs	r3, #0
}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3710      	adds	r7, #16
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}

08016c74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016c74:	b480      	push	{r7}
 8016c76:	b085      	sub	sp, #20
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016c82:	2b01      	cmp	r3, #1
 8016c84:	d101      	bne.n	8016c8a <HAL_UARTEx_DisableFifoMode+0x16>
 8016c86:	2302      	movs	r3, #2
 8016c88:	e027      	b.n	8016cda <HAL_UARTEx_DisableFifoMode+0x66>
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	2201      	movs	r2, #1
 8016c8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2224      	movs	r2, #36	; 0x24
 8016c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	681a      	ldr	r2, [r3, #0]
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	f022 0201 	bic.w	r2, r2, #1
 8016cb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016cb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	68fa      	ldr	r2, [r7, #12]
 8016cc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	2220      	movs	r2, #32
 8016ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016cd8:	2300      	movs	r3, #0
}
 8016cda:	4618      	mov	r0, r3
 8016cdc:	3714      	adds	r7, #20
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce4:	4770      	bx	lr

08016ce6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016ce6:	b580      	push	{r7, lr}
 8016ce8:	b084      	sub	sp, #16
 8016cea:	af00      	add	r7, sp, #0
 8016cec:	6078      	str	r0, [r7, #4]
 8016cee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016cf6:	2b01      	cmp	r3, #1
 8016cf8:	d101      	bne.n	8016cfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016cfa:	2302      	movs	r3, #2
 8016cfc:	e02d      	b.n	8016d5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	2201      	movs	r2, #1
 8016d02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2224      	movs	r2, #36	; 0x24
 8016d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	f022 0201 	bic.w	r2, r2, #1
 8016d24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	689b      	ldr	r3, [r3, #8]
 8016d2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	683a      	ldr	r2, [r7, #0]
 8016d36:	430a      	orrs	r2, r1
 8016d38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016d3a:	6878      	ldr	r0, [r7, #4]
 8016d3c:	f000 f850 	bl	8016de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	68fa      	ldr	r2, [r7, #12]
 8016d46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	2220      	movs	r2, #32
 8016d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	2200      	movs	r2, #0
 8016d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016d58:	2300      	movs	r3, #0
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3710      	adds	r7, #16
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}

08016d62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016d62:	b580      	push	{r7, lr}
 8016d64:	b084      	sub	sp, #16
 8016d66:	af00      	add	r7, sp, #0
 8016d68:	6078      	str	r0, [r7, #4]
 8016d6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016d72:	2b01      	cmp	r3, #1
 8016d74:	d101      	bne.n	8016d7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016d76:	2302      	movs	r3, #2
 8016d78:	e02d      	b.n	8016dd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2201      	movs	r2, #1
 8016d7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	2224      	movs	r2, #36	; 0x24
 8016d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	681a      	ldr	r2, [r3, #0]
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	f022 0201 	bic.w	r2, r2, #1
 8016da0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	689b      	ldr	r3, [r3, #8]
 8016da8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	683a      	ldr	r2, [r7, #0]
 8016db2:	430a      	orrs	r2, r1
 8016db4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f000 f812 	bl	8016de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	68fa      	ldr	r2, [r7, #12]
 8016dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	2220      	movs	r2, #32
 8016dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016dd4:	2300      	movs	r3, #0
}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	3710      	adds	r7, #16
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}
	...

08016de0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016de0:	b480      	push	{r7}
 8016de2:	b085      	sub	sp, #20
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d108      	bne.n	8016e02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2201      	movs	r2, #1
 8016df4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	2201      	movs	r2, #1
 8016dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016e00:	e031      	b.n	8016e66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016e02:	2310      	movs	r3, #16
 8016e04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016e06:	2310      	movs	r3, #16
 8016e08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	689b      	ldr	r3, [r3, #8]
 8016e10:	0e5b      	lsrs	r3, r3, #25
 8016e12:	b2db      	uxtb	r3, r3
 8016e14:	f003 0307 	and.w	r3, r3, #7
 8016e18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	689b      	ldr	r3, [r3, #8]
 8016e20:	0f5b      	lsrs	r3, r3, #29
 8016e22:	b2db      	uxtb	r3, r3
 8016e24:	f003 0307 	and.w	r3, r3, #7
 8016e28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016e2a:	7bbb      	ldrb	r3, [r7, #14]
 8016e2c:	7b3a      	ldrb	r2, [r7, #12]
 8016e2e:	4911      	ldr	r1, [pc, #68]	; (8016e74 <UARTEx_SetNbDataToProcess+0x94>)
 8016e30:	5c8a      	ldrb	r2, [r1, r2]
 8016e32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016e36:	7b3a      	ldrb	r2, [r7, #12]
 8016e38:	490f      	ldr	r1, [pc, #60]	; (8016e78 <UARTEx_SetNbDataToProcess+0x98>)
 8016e3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016e40:	b29a      	uxth	r2, r3
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016e48:	7bfb      	ldrb	r3, [r7, #15]
 8016e4a:	7b7a      	ldrb	r2, [r7, #13]
 8016e4c:	4909      	ldr	r1, [pc, #36]	; (8016e74 <UARTEx_SetNbDataToProcess+0x94>)
 8016e4e:	5c8a      	ldrb	r2, [r1, r2]
 8016e50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016e54:	7b7a      	ldrb	r2, [r7, #13]
 8016e56:	4908      	ldr	r1, [pc, #32]	; (8016e78 <UARTEx_SetNbDataToProcess+0x98>)
 8016e58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016e66:	bf00      	nop
 8016e68:	3714      	adds	r7, #20
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e70:	4770      	bx	lr
 8016e72:	bf00      	nop
 8016e74:	0801b184 	.word	0x0801b184
 8016e78:	0801b18c 	.word	0x0801b18c

08016e7c <__NVIC_SetPriority>:
{
 8016e7c:	b480      	push	{r7}
 8016e7e:	b083      	sub	sp, #12
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	4603      	mov	r3, r0
 8016e84:	6039      	str	r1, [r7, #0]
 8016e86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	db0a      	blt.n	8016ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	b2da      	uxtb	r2, r3
 8016e94:	490c      	ldr	r1, [pc, #48]	; (8016ec8 <__NVIC_SetPriority+0x4c>)
 8016e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e9a:	0112      	lsls	r2, r2, #4
 8016e9c:	b2d2      	uxtb	r2, r2
 8016e9e:	440b      	add	r3, r1
 8016ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016ea4:	e00a      	b.n	8016ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	b2da      	uxtb	r2, r3
 8016eaa:	4908      	ldr	r1, [pc, #32]	; (8016ecc <__NVIC_SetPriority+0x50>)
 8016eac:	88fb      	ldrh	r3, [r7, #6]
 8016eae:	f003 030f 	and.w	r3, r3, #15
 8016eb2:	3b04      	subs	r3, #4
 8016eb4:	0112      	lsls	r2, r2, #4
 8016eb6:	b2d2      	uxtb	r2, r2
 8016eb8:	440b      	add	r3, r1
 8016eba:	761a      	strb	r2, [r3, #24]
}
 8016ebc:	bf00      	nop
 8016ebe:	370c      	adds	r7, #12
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec6:	4770      	bx	lr
 8016ec8:	e000e100 	.word	0xe000e100
 8016ecc:	e000ed00 	.word	0xe000ed00

08016ed0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016ed4:	4b05      	ldr	r3, [pc, #20]	; (8016eec <SysTick_Handler+0x1c>)
 8016ed6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016ed8:	f002 f958 	bl	801918c <xTaskGetSchedulerState>
 8016edc:	4603      	mov	r3, r0
 8016ede:	2b01      	cmp	r3, #1
 8016ee0:	d001      	beq.n	8016ee6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016ee2:	f002 ff79 	bl	8019dd8 <xPortSysTickHandler>
  }
}
 8016ee6:	bf00      	nop
 8016ee8:	bd80      	pop	{r7, pc}
 8016eea:	bf00      	nop
 8016eec:	e000e010 	.word	0xe000e010

08016ef0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016ef4:	2100      	movs	r1, #0
 8016ef6:	f06f 0004 	mvn.w	r0, #4
 8016efa:	f7ff ffbf 	bl	8016e7c <__NVIC_SetPriority>
#endif
}
 8016efe:	bf00      	nop
 8016f00:	bd80      	pop	{r7, pc}
	...

08016f04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016f04:	b480      	push	{r7}
 8016f06:	b083      	sub	sp, #12
 8016f08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f0a:	f3ef 8305 	mrs	r3, IPSR
 8016f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8016f10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d003      	beq.n	8016f1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016f16:	f06f 0305 	mvn.w	r3, #5
 8016f1a:	607b      	str	r3, [r7, #4]
 8016f1c:	e00c      	b.n	8016f38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016f1e:	4b0a      	ldr	r3, [pc, #40]	; (8016f48 <osKernelInitialize+0x44>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d105      	bne.n	8016f32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016f26:	4b08      	ldr	r3, [pc, #32]	; (8016f48 <osKernelInitialize+0x44>)
 8016f28:	2201      	movs	r2, #1
 8016f2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	607b      	str	r3, [r7, #4]
 8016f30:	e002      	b.n	8016f38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016f38:	687b      	ldr	r3, [r7, #4]
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	370c      	adds	r7, #12
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f44:	4770      	bx	lr
 8016f46:	bf00      	nop
 8016f48:	2400201c 	.word	0x2400201c

08016f4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b082      	sub	sp, #8
 8016f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f52:	f3ef 8305 	mrs	r3, IPSR
 8016f56:	603b      	str	r3, [r7, #0]
  return(result);
 8016f58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d003      	beq.n	8016f66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016f5e:	f06f 0305 	mvn.w	r3, #5
 8016f62:	607b      	str	r3, [r7, #4]
 8016f64:	e010      	b.n	8016f88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016f66:	4b0b      	ldr	r3, [pc, #44]	; (8016f94 <osKernelStart+0x48>)
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	2b01      	cmp	r3, #1
 8016f6c:	d109      	bne.n	8016f82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016f6e:	f7ff ffbf 	bl	8016ef0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016f72:	4b08      	ldr	r3, [pc, #32]	; (8016f94 <osKernelStart+0x48>)
 8016f74:	2202      	movs	r2, #2
 8016f76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016f78:	f001 fc0c 	bl	8018794 <vTaskStartScheduler>
      stat = osOK;
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	607b      	str	r3, [r7, #4]
 8016f80:	e002      	b.n	8016f88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016f88:	687b      	ldr	r3, [r7, #4]
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3708      	adds	r7, #8
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop
 8016f94:	2400201c 	.word	0x2400201c

08016f98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b08e      	sub	sp, #56	; 0x38
 8016f9c:	af04      	add	r7, sp, #16
 8016f9e:	60f8      	str	r0, [r7, #12]
 8016fa0:	60b9      	str	r1, [r7, #8]
 8016fa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016fa8:	f3ef 8305 	mrs	r3, IPSR
 8016fac:	617b      	str	r3, [r7, #20]
  return(result);
 8016fae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d17e      	bne.n	80170b2 <osThreadNew+0x11a>
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d07b      	beq.n	80170b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016fba:	2380      	movs	r3, #128	; 0x80
 8016fbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016fbe:	2318      	movs	r3, #24
 8016fc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d045      	beq.n	801705e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d002      	beq.n	8016fe0 <osThreadNew+0x48>
        name = attr->name;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	699b      	ldr	r3, [r3, #24]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d002      	beq.n	8016fee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	699b      	ldr	r3, [r3, #24]
 8016fec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016fee:	69fb      	ldr	r3, [r7, #28]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d008      	beq.n	8017006 <osThreadNew+0x6e>
 8016ff4:	69fb      	ldr	r3, [r7, #28]
 8016ff6:	2b38      	cmp	r3, #56	; 0x38
 8016ff8:	d805      	bhi.n	8017006 <osThreadNew+0x6e>
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	685b      	ldr	r3, [r3, #4]
 8016ffe:	f003 0301 	and.w	r3, r3, #1
 8017002:	2b00      	cmp	r3, #0
 8017004:	d001      	beq.n	801700a <osThreadNew+0x72>
        return (NULL);
 8017006:	2300      	movs	r3, #0
 8017008:	e054      	b.n	80170b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	695b      	ldr	r3, [r3, #20]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d003      	beq.n	801701a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	695b      	ldr	r3, [r3, #20]
 8017016:	089b      	lsrs	r3, r3, #2
 8017018:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	689b      	ldr	r3, [r3, #8]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d00e      	beq.n	8017040 <osThreadNew+0xa8>
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	68db      	ldr	r3, [r3, #12]
 8017026:	2b5b      	cmp	r3, #91	; 0x5b
 8017028:	d90a      	bls.n	8017040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801702e:	2b00      	cmp	r3, #0
 8017030:	d006      	beq.n	8017040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	695b      	ldr	r3, [r3, #20]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d002      	beq.n	8017040 <osThreadNew+0xa8>
        mem = 1;
 801703a:	2301      	movs	r3, #1
 801703c:	61bb      	str	r3, [r7, #24]
 801703e:	e010      	b.n	8017062 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	689b      	ldr	r3, [r3, #8]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d10c      	bne.n	8017062 <osThreadNew+0xca>
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	68db      	ldr	r3, [r3, #12]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d108      	bne.n	8017062 <osThreadNew+0xca>
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	691b      	ldr	r3, [r3, #16]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d104      	bne.n	8017062 <osThreadNew+0xca>
          mem = 0;
 8017058:	2300      	movs	r3, #0
 801705a:	61bb      	str	r3, [r7, #24]
 801705c:	e001      	b.n	8017062 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801705e:	2300      	movs	r3, #0
 8017060:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017062:	69bb      	ldr	r3, [r7, #24]
 8017064:	2b01      	cmp	r3, #1
 8017066:	d110      	bne.n	801708a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801706c:	687a      	ldr	r2, [r7, #4]
 801706e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017070:	9202      	str	r2, [sp, #8]
 8017072:	9301      	str	r3, [sp, #4]
 8017074:	69fb      	ldr	r3, [r7, #28]
 8017076:	9300      	str	r3, [sp, #0]
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	6a3a      	ldr	r2, [r7, #32]
 801707c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801707e:	68f8      	ldr	r0, [r7, #12]
 8017080:	f001 f9b2 	bl	80183e8 <xTaskCreateStatic>
 8017084:	4603      	mov	r3, r0
 8017086:	613b      	str	r3, [r7, #16]
 8017088:	e013      	b.n	80170b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801708a:	69bb      	ldr	r3, [r7, #24]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d110      	bne.n	80170b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017090:	6a3b      	ldr	r3, [r7, #32]
 8017092:	b29a      	uxth	r2, r3
 8017094:	f107 0310 	add.w	r3, r7, #16
 8017098:	9301      	str	r3, [sp, #4]
 801709a:	69fb      	ldr	r3, [r7, #28]
 801709c:	9300      	str	r3, [sp, #0]
 801709e:	68bb      	ldr	r3, [r7, #8]
 80170a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170a2:	68f8      	ldr	r0, [r7, #12]
 80170a4:	f001 f9fd 	bl	80184a2 <xTaskCreate>
 80170a8:	4603      	mov	r3, r0
 80170aa:	2b01      	cmp	r3, #1
 80170ac:	d001      	beq.n	80170b2 <osThreadNew+0x11a>
            hTask = NULL;
 80170ae:	2300      	movs	r3, #0
 80170b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80170b2:	693b      	ldr	r3, [r7, #16]
}
 80170b4:	4618      	mov	r0, r3
 80170b6:	3728      	adds	r7, #40	; 0x28
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bd80      	pop	{r7, pc}

080170bc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80170bc:	b480      	push	{r7}
 80170be:	b083      	sub	sp, #12
 80170c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170c2:	f3ef 8305 	mrs	r3, IPSR
 80170c6:	603b      	str	r3, [r7, #0]
  return(result);
 80170c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d003      	beq.n	80170d6 <osThreadYield+0x1a>
    stat = osErrorISR;
 80170ce:	f06f 0305 	mvn.w	r3, #5
 80170d2:	607b      	str	r3, [r7, #4]
 80170d4:	e009      	b.n	80170ea <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80170d6:	2300      	movs	r3, #0
 80170d8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80170da:	4b07      	ldr	r3, [pc, #28]	; (80170f8 <osThreadYield+0x3c>)
 80170dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170e0:	601a      	str	r2, [r3, #0]
 80170e2:	f3bf 8f4f 	dsb	sy
 80170e6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80170ea:	687b      	ldr	r3, [r7, #4]
}
 80170ec:	4618      	mov	r0, r3
 80170ee:	370c      	adds	r7, #12
 80170f0:	46bd      	mov	sp, r7
 80170f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f6:	4770      	bx	lr
 80170f8:	e000ed04 	.word	0xe000ed04

080170fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b084      	sub	sp, #16
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017104:	f3ef 8305 	mrs	r3, IPSR
 8017108:	60bb      	str	r3, [r7, #8]
  return(result);
 801710a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801710c:	2b00      	cmp	r3, #0
 801710e:	d003      	beq.n	8017118 <osDelay+0x1c>
    stat = osErrorISR;
 8017110:	f06f 0305 	mvn.w	r3, #5
 8017114:	60fb      	str	r3, [r7, #12]
 8017116:	e007      	b.n	8017128 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017118:	2300      	movs	r3, #0
 801711a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d002      	beq.n	8017128 <osDelay+0x2c>
      vTaskDelay(ticks);
 8017122:	6878      	ldr	r0, [r7, #4]
 8017124:	f001 fb02 	bl	801872c <vTaskDelay>
    }
  }

  return (stat);
 8017128:	68fb      	ldr	r3, [r7, #12]
}
 801712a:	4618      	mov	r0, r3
 801712c:	3710      	adds	r7, #16
 801712e:	46bd      	mov	sp, r7
 8017130:	bd80      	pop	{r7, pc}

08017132 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8017132:	b580      	push	{r7, lr}
 8017134:	b086      	sub	sp, #24
 8017136:	af00      	add	r7, sp, #0
 8017138:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801713a:	2300      	movs	r3, #0
 801713c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801713e:	f3ef 8305 	mrs	r3, IPSR
 8017142:	60fb      	str	r3, [r7, #12]
  return(result);
 8017144:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8017146:	2b00      	cmp	r3, #0
 8017148:	d12d      	bne.n	80171a6 <osEventFlagsNew+0x74>
    mem = -1;
 801714a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801714e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d015      	beq.n	8017182 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	689b      	ldr	r3, [r3, #8]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d006      	beq.n	801716c <osEventFlagsNew+0x3a>
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	68db      	ldr	r3, [r3, #12]
 8017162:	2b1f      	cmp	r3, #31
 8017164:	d902      	bls.n	801716c <osEventFlagsNew+0x3a>
        mem = 1;
 8017166:	2301      	movs	r3, #1
 8017168:	613b      	str	r3, [r7, #16]
 801716a:	e00c      	b.n	8017186 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	689b      	ldr	r3, [r3, #8]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d108      	bne.n	8017186 <osEventFlagsNew+0x54>
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	68db      	ldr	r3, [r3, #12]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d104      	bne.n	8017186 <osEventFlagsNew+0x54>
          mem = 0;
 801717c:	2300      	movs	r3, #0
 801717e:	613b      	str	r3, [r7, #16]
 8017180:	e001      	b.n	8017186 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8017182:	2300      	movs	r3, #0
 8017184:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8017186:	693b      	ldr	r3, [r7, #16]
 8017188:	2b01      	cmp	r3, #1
 801718a:	d106      	bne.n	801719a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	689b      	ldr	r3, [r3, #8]
 8017190:	4618      	mov	r0, r3
 8017192:	f000 f91d 	bl	80173d0 <xEventGroupCreateStatic>
 8017196:	6178      	str	r0, [r7, #20]
 8017198:	e005      	b.n	80171a6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 801719a:	693b      	ldr	r3, [r7, #16]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d102      	bne.n	80171a6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80171a0:	f000 f94d 	bl	801743e <xEventGroupCreate>
 80171a4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80171a6:	697b      	ldr	r3, [r7, #20]
}
 80171a8:	4618      	mov	r0, r3
 80171aa:	3718      	adds	r7, #24
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd80      	pop	{r7, pc}

080171b0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b086      	sub	sp, #24
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
 80171b8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d004      	beq.n	80171ce <osEventFlagsSet+0x1e>
 80171c4:	683b      	ldr	r3, [r7, #0]
 80171c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d003      	beq.n	80171d6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80171ce:	f06f 0303 	mvn.w	r3, #3
 80171d2:	617b      	str	r3, [r7, #20]
 80171d4:	e028      	b.n	8017228 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80171d6:	f3ef 8305 	mrs	r3, IPSR
 80171da:	60fb      	str	r3, [r7, #12]
  return(result);
 80171dc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d01d      	beq.n	801721e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80171e2:	2300      	movs	r3, #0
 80171e4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80171e6:	f107 0308 	add.w	r3, r7, #8
 80171ea:	461a      	mov	r2, r3
 80171ec:	6839      	ldr	r1, [r7, #0]
 80171ee:	6938      	ldr	r0, [r7, #16]
 80171f0:	f000 fb46 	bl	8017880 <xEventGroupSetBitsFromISR>
 80171f4:	4603      	mov	r3, r0
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d103      	bne.n	8017202 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80171fa:	f06f 0302 	mvn.w	r3, #2
 80171fe:	617b      	str	r3, [r7, #20]
 8017200:	e012      	b.n	8017228 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d00d      	beq.n	8017228 <osEventFlagsSet+0x78>
 801720c:	4b09      	ldr	r3, [pc, #36]	; (8017234 <osEventFlagsSet+0x84>)
 801720e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017212:	601a      	str	r2, [r3, #0]
 8017214:	f3bf 8f4f 	dsb	sy
 8017218:	f3bf 8f6f 	isb	sy
 801721c:	e004      	b.n	8017228 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801721e:	6839      	ldr	r1, [r7, #0]
 8017220:	6938      	ldr	r0, [r7, #16]
 8017222:	f000 fa65 	bl	80176f0 <xEventGroupSetBits>
 8017226:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8017228:	697b      	ldr	r3, [r7, #20]
}
 801722a:	4618      	mov	r0, r3
 801722c:	3718      	adds	r7, #24
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
 8017232:	bf00      	nop
 8017234:	e000ed04 	.word	0xe000ed04

08017238 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8017238:	b580      	push	{r7, lr}
 801723a:	b086      	sub	sp, #24
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
 8017240:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d004      	beq.n	8017256 <osEventFlagsClear+0x1e>
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017252:	2b00      	cmp	r3, #0
 8017254:	d003      	beq.n	801725e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8017256:	f06f 0303 	mvn.w	r3, #3
 801725a:	617b      	str	r3, [r7, #20]
 801725c:	e019      	b.n	8017292 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801725e:	f3ef 8305 	mrs	r3, IPSR
 8017262:	60fb      	str	r3, [r7, #12]
  return(result);
 8017264:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017266:	2b00      	cmp	r3, #0
 8017268:	d00e      	beq.n	8017288 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801726a:	6938      	ldr	r0, [r7, #16]
 801726c:	f000 fa1c 	bl	80176a8 <xEventGroupGetBitsFromISR>
 8017270:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8017272:	6839      	ldr	r1, [r7, #0]
 8017274:	6938      	ldr	r0, [r7, #16]
 8017276:	f000 fa03 	bl	8017680 <xEventGroupClearBitsFromISR>
 801727a:	4603      	mov	r3, r0
 801727c:	2b00      	cmp	r3, #0
 801727e:	d108      	bne.n	8017292 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8017280:	f06f 0302 	mvn.w	r3, #2
 8017284:	617b      	str	r3, [r7, #20]
 8017286:	e004      	b.n	8017292 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8017288:	6839      	ldr	r1, [r7, #0]
 801728a:	6938      	ldr	r0, [r7, #16]
 801728c:	f000 f9c0 	bl	8017610 <xEventGroupClearBits>
 8017290:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8017292:	697b      	ldr	r3, [r7, #20]
}
 8017294:	4618      	mov	r0, r3
 8017296:	3718      	adds	r7, #24
 8017298:	46bd      	mov	sp, r7
 801729a:	bd80      	pop	{r7, pc}

0801729c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801729c:	b580      	push	{r7, lr}
 801729e:	b08c      	sub	sp, #48	; 0x30
 80172a0:	af02      	add	r7, sp, #8
 80172a2:	60f8      	str	r0, [r7, #12]
 80172a4:	60b9      	str	r1, [r7, #8]
 80172a6:	607a      	str	r2, [r7, #4]
 80172a8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80172ae:	69bb      	ldr	r3, [r7, #24]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d004      	beq.n	80172be <osEventFlagsWait+0x22>
 80172b4:	68bb      	ldr	r3, [r7, #8]
 80172b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d003      	beq.n	80172c6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80172be:	f06f 0303 	mvn.w	r3, #3
 80172c2:	61fb      	str	r3, [r7, #28]
 80172c4:	e04b      	b.n	801735e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172c6:	f3ef 8305 	mrs	r3, IPSR
 80172ca:	617b      	str	r3, [r7, #20]
  return(result);
 80172cc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d003      	beq.n	80172da <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80172d2:	f06f 0305 	mvn.w	r3, #5
 80172d6:	61fb      	str	r3, [r7, #28]
 80172d8:	e041      	b.n	801735e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f003 0301 	and.w	r3, r3, #1
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d002      	beq.n	80172ea <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80172e4:	2301      	movs	r3, #1
 80172e6:	627b      	str	r3, [r7, #36]	; 0x24
 80172e8:	e001      	b.n	80172ee <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80172ea:	2300      	movs	r3, #0
 80172ec:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	f003 0302 	and.w	r3, r3, #2
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d002      	beq.n	80172fe <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80172f8:	2300      	movs	r3, #0
 80172fa:	623b      	str	r3, [r7, #32]
 80172fc:	e001      	b.n	8017302 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80172fe:	2301      	movs	r3, #1
 8017300:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	9300      	str	r3, [sp, #0]
 8017306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017308:	6a3a      	ldr	r2, [r7, #32]
 801730a:	68b9      	ldr	r1, [r7, #8]
 801730c:	69b8      	ldr	r0, [r7, #24]
 801730e:	f000 f8b1 	bl	8017474 <xEventGroupWaitBits>
 8017312:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	f003 0301 	and.w	r3, r3, #1
 801731a:	2b00      	cmp	r3, #0
 801731c:	d010      	beq.n	8017340 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801731e:	68ba      	ldr	r2, [r7, #8]
 8017320:	69fb      	ldr	r3, [r7, #28]
 8017322:	4013      	ands	r3, r2
 8017324:	68ba      	ldr	r2, [r7, #8]
 8017326:	429a      	cmp	r2, r3
 8017328:	d019      	beq.n	801735e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801732a:	683b      	ldr	r3, [r7, #0]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d003      	beq.n	8017338 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8017330:	f06f 0301 	mvn.w	r3, #1
 8017334:	61fb      	str	r3, [r7, #28]
 8017336:	e012      	b.n	801735e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017338:	f06f 0302 	mvn.w	r3, #2
 801733c:	61fb      	str	r3, [r7, #28]
 801733e:	e00e      	b.n	801735e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8017340:	68ba      	ldr	r2, [r7, #8]
 8017342:	69fb      	ldr	r3, [r7, #28]
 8017344:	4013      	ands	r3, r2
 8017346:	2b00      	cmp	r3, #0
 8017348:	d109      	bne.n	801735e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d003      	beq.n	8017358 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8017350:	f06f 0301 	mvn.w	r3, #1
 8017354:	61fb      	str	r3, [r7, #28]
 8017356:	e002      	b.n	801735e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017358:	f06f 0302 	mvn.w	r3, #2
 801735c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801735e:	69fb      	ldr	r3, [r7, #28]
}
 8017360:	4618      	mov	r0, r3
 8017362:	3728      	adds	r7, #40	; 0x28
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}

08017368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017368:	b480      	push	{r7}
 801736a:	b085      	sub	sp, #20
 801736c:	af00      	add	r7, sp, #0
 801736e:	60f8      	str	r0, [r7, #12]
 8017370:	60b9      	str	r1, [r7, #8]
 8017372:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	4a07      	ldr	r2, [pc, #28]	; (8017394 <vApplicationGetIdleTaskMemory+0x2c>)
 8017378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801737a:	68bb      	ldr	r3, [r7, #8]
 801737c:	4a06      	ldr	r2, [pc, #24]	; (8017398 <vApplicationGetIdleTaskMemory+0x30>)
 801737e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	2280      	movs	r2, #128	; 0x80
 8017384:	601a      	str	r2, [r3, #0]
}
 8017386:	bf00      	nop
 8017388:	3714      	adds	r7, #20
 801738a:	46bd      	mov	sp, r7
 801738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017390:	4770      	bx	lr
 8017392:	bf00      	nop
 8017394:	24002020 	.word	0x24002020
 8017398:	2400207c 	.word	0x2400207c

0801739c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801739c:	b480      	push	{r7}
 801739e:	b085      	sub	sp, #20
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	60f8      	str	r0, [r7, #12]
 80173a4:	60b9      	str	r1, [r7, #8]
 80173a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	4a07      	ldr	r2, [pc, #28]	; (80173c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80173ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	4a06      	ldr	r2, [pc, #24]	; (80173cc <vApplicationGetTimerTaskMemory+0x30>)
 80173b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80173ba:	601a      	str	r2, [r3, #0]
}
 80173bc:	bf00      	nop
 80173be:	3714      	adds	r7, #20
 80173c0:	46bd      	mov	sp, r7
 80173c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c6:	4770      	bx	lr
 80173c8:	2400227c 	.word	0x2400227c
 80173cc:	240022d8 	.word	0x240022d8

080173d0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b086      	sub	sp, #24
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d10a      	bne.n	80173f4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80173de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173e2:	f383 8811 	msr	BASEPRI, r3
 80173e6:	f3bf 8f6f 	isb	sy
 80173ea:	f3bf 8f4f 	dsb	sy
 80173ee:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80173f0:	bf00      	nop
 80173f2:	e7fe      	b.n	80173f2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80173f4:	2320      	movs	r3, #32
 80173f6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80173f8:	68bb      	ldr	r3, [r7, #8]
 80173fa:	2b20      	cmp	r3, #32
 80173fc:	d00a      	beq.n	8017414 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80173fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017402:	f383 8811 	msr	BASEPRI, r3
 8017406:	f3bf 8f6f 	isb	sy
 801740a:	f3bf 8f4f 	dsb	sy
 801740e:	60fb      	str	r3, [r7, #12]
}
 8017410:	bf00      	nop
 8017412:	e7fe      	b.n	8017412 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d00a      	beq.n	8017434 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	2200      	movs	r2, #0
 8017422:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017424:	697b      	ldr	r3, [r7, #20]
 8017426:	3304      	adds	r3, #4
 8017428:	4618      	mov	r0, r3
 801742a:	f000 fa3d 	bl	80178a8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801742e:	697b      	ldr	r3, [r7, #20]
 8017430:	2201      	movs	r2, #1
 8017432:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017434:	697b      	ldr	r3, [r7, #20]
	}
 8017436:	4618      	mov	r0, r3
 8017438:	3718      	adds	r7, #24
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}

0801743e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801743e:	b580      	push	{r7, lr}
 8017440:	b082      	sub	sp, #8
 8017442:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017444:	2020      	movs	r0, #32
 8017446:	f002 fd57 	bl	8019ef8 <pvPortMalloc>
 801744a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d00a      	beq.n	8017468 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	2200      	movs	r2, #0
 8017456:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	3304      	adds	r3, #4
 801745c:	4618      	mov	r0, r3
 801745e:	f000 fa23 	bl	80178a8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2200      	movs	r2, #0
 8017466:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8017468:	687b      	ldr	r3, [r7, #4]
	}
 801746a:	4618      	mov	r0, r3
 801746c:	3708      	adds	r7, #8
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}
	...

08017474 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b090      	sub	sp, #64	; 0x40
 8017478:	af00      	add	r7, sp, #0
 801747a:	60f8      	str	r0, [r7, #12]
 801747c:	60b9      	str	r1, [r7, #8]
 801747e:	607a      	str	r2, [r7, #4]
 8017480:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8017486:	2300      	movs	r3, #0
 8017488:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801748a:	2300      	movs	r3, #0
 801748c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d10a      	bne.n	80174aa <xEventGroupWaitBits+0x36>
	__asm volatile
 8017494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017498:	f383 8811 	msr	BASEPRI, r3
 801749c:	f3bf 8f6f 	isb	sy
 80174a0:	f3bf 8f4f 	dsb	sy
 80174a4:	623b      	str	r3, [r7, #32]
}
 80174a6:	bf00      	nop
 80174a8:	e7fe      	b.n	80174a8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d00a      	beq.n	80174ca <xEventGroupWaitBits+0x56>
	__asm volatile
 80174b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b8:	f383 8811 	msr	BASEPRI, r3
 80174bc:	f3bf 8f6f 	isb	sy
 80174c0:	f3bf 8f4f 	dsb	sy
 80174c4:	61fb      	str	r3, [r7, #28]
}
 80174c6:	bf00      	nop
 80174c8:	e7fe      	b.n	80174c8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d10a      	bne.n	80174e6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80174d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174d4:	f383 8811 	msr	BASEPRI, r3
 80174d8:	f3bf 8f6f 	isb	sy
 80174dc:	f3bf 8f4f 	dsb	sy
 80174e0:	61bb      	str	r3, [r7, #24]
}
 80174e2:	bf00      	nop
 80174e4:	e7fe      	b.n	80174e4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80174e6:	f001 fe51 	bl	801918c <xTaskGetSchedulerState>
 80174ea:	4603      	mov	r3, r0
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d102      	bne.n	80174f6 <xEventGroupWaitBits+0x82>
 80174f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d101      	bne.n	80174fa <xEventGroupWaitBits+0x86>
 80174f6:	2301      	movs	r3, #1
 80174f8:	e000      	b.n	80174fc <xEventGroupWaitBits+0x88>
 80174fa:	2300      	movs	r3, #0
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d10a      	bne.n	8017516 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8017500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017504:	f383 8811 	msr	BASEPRI, r3
 8017508:	f3bf 8f6f 	isb	sy
 801750c:	f3bf 8f4f 	dsb	sy
 8017510:	617b      	str	r3, [r7, #20]
}
 8017512:	bf00      	nop
 8017514:	e7fe      	b.n	8017514 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017516:	f001 f9a3 	bl	8018860 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801751a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8017520:	683a      	ldr	r2, [r7, #0]
 8017522:	68b9      	ldr	r1, [r7, #8]
 8017524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017526:	f000 f988 	bl	801783a <prvTestWaitCondition>
 801752a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801752e:	2b00      	cmp	r3, #0
 8017530:	d00e      	beq.n	8017550 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8017532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017534:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017536:	2300      	movs	r3, #0
 8017538:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d028      	beq.n	8017592 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017542:	681a      	ldr	r2, [r3, #0]
 8017544:	68bb      	ldr	r3, [r7, #8]
 8017546:	43db      	mvns	r3, r3
 8017548:	401a      	ands	r2, r3
 801754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801754c:	601a      	str	r2, [r3, #0]
 801754e:	e020      	b.n	8017592 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8017550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017552:	2b00      	cmp	r3, #0
 8017554:	d104      	bne.n	8017560 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017558:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801755a:	2301      	movs	r3, #1
 801755c:	633b      	str	r3, [r7, #48]	; 0x30
 801755e:	e018      	b.n	8017592 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d003      	beq.n	801756e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8017566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801756c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d003      	beq.n	801757c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017576:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801757a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801757e:	1d18      	adds	r0, r3, #4
 8017580:	68ba      	ldr	r2, [r7, #8]
 8017582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017584:	4313      	orrs	r3, r2
 8017586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017588:	4619      	mov	r1, r3
 801758a:	f001 fb77 	bl	8018c7c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801758e:	2300      	movs	r3, #0
 8017590:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8017592:	f001 f973 	bl	801887c <xTaskResumeAll>
 8017596:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801759a:	2b00      	cmp	r3, #0
 801759c:	d031      	beq.n	8017602 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d107      	bne.n	80175b4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80175a4:	4b19      	ldr	r3, [pc, #100]	; (801760c <xEventGroupWaitBits+0x198>)
 80175a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175aa:	601a      	str	r2, [r3, #0]
 80175ac:	f3bf 8f4f 	dsb	sy
 80175b0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80175b4:	f001 fe76 	bl	80192a4 <uxTaskResetEventItemValue>
 80175b8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80175ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d11a      	bne.n	80175fa <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80175c4:	f002 fb76 	bl	8019cb4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80175c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80175ce:	683a      	ldr	r2, [r7, #0]
 80175d0:	68b9      	ldr	r1, [r7, #8]
 80175d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80175d4:	f000 f931 	bl	801783a <prvTestWaitCondition>
 80175d8:	4603      	mov	r3, r0
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d009      	beq.n	80175f2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d006      	beq.n	80175f2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80175e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175e6:	681a      	ldr	r2, [r3, #0]
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	43db      	mvns	r3, r3
 80175ec:	401a      	ands	r2, r3
 80175ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175f0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80175f2:	2301      	movs	r3, #1
 80175f4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80175f6:	f002 fb8d 	bl	8019d14 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80175fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017600:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8017602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017604:	4618      	mov	r0, r3
 8017606:	3740      	adds	r7, #64	; 0x40
 8017608:	46bd      	mov	sp, r7
 801760a:	bd80      	pop	{r7, pc}
 801760c:	e000ed04 	.word	0xe000ed04

08017610 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b086      	sub	sp, #24
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d10a      	bne.n	801763a <xEventGroupClearBits+0x2a>
	__asm volatile
 8017624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017628:	f383 8811 	msr	BASEPRI, r3
 801762c:	f3bf 8f6f 	isb	sy
 8017630:	f3bf 8f4f 	dsb	sy
 8017634:	60fb      	str	r3, [r7, #12]
}
 8017636:	bf00      	nop
 8017638:	e7fe      	b.n	8017638 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801763a:	683b      	ldr	r3, [r7, #0]
 801763c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017640:	2b00      	cmp	r3, #0
 8017642:	d00a      	beq.n	801765a <xEventGroupClearBits+0x4a>
	__asm volatile
 8017644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017648:	f383 8811 	msr	BASEPRI, r3
 801764c:	f3bf 8f6f 	isb	sy
 8017650:	f3bf 8f4f 	dsb	sy
 8017654:	60bb      	str	r3, [r7, #8]
}
 8017656:	bf00      	nop
 8017658:	e7fe      	b.n	8017658 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801765a:	f002 fb2b 	bl	8019cb4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801765e:	697b      	ldr	r3, [r7, #20]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017664:	697b      	ldr	r3, [r7, #20]
 8017666:	681a      	ldr	r2, [r3, #0]
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	43db      	mvns	r3, r3
 801766c:	401a      	ands	r2, r3
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8017672:	f002 fb4f 	bl	8019d14 <vPortExitCritical>

	return uxReturn;
 8017676:	693b      	ldr	r3, [r7, #16]
}
 8017678:	4618      	mov	r0, r3
 801767a:	3718      	adds	r7, #24
 801767c:	46bd      	mov	sp, r7
 801767e:	bd80      	pop	{r7, pc}

08017680 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8017680:	b580      	push	{r7, lr}
 8017682:	b084      	sub	sp, #16
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801768a:	2300      	movs	r3, #0
 801768c:	683a      	ldr	r2, [r7, #0]
 801768e:	6879      	ldr	r1, [r7, #4]
 8017690:	4804      	ldr	r0, [pc, #16]	; (80176a4 <xEventGroupClearBitsFromISR+0x24>)
 8017692:	f002 f9c1 	bl	8019a18 <xTimerPendFunctionCallFromISR>
 8017696:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017698:	68fb      	ldr	r3, [r7, #12]
	}
 801769a:	4618      	mov	r0, r3
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	08017821 	.word	0x08017821

080176a8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80176a8:	b480      	push	{r7}
 80176aa:	b089      	sub	sp, #36	; 0x24
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80176b4:	f3ef 8211 	mrs	r2, BASEPRI
 80176b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176bc:	f383 8811 	msr	BASEPRI, r3
 80176c0:	f3bf 8f6f 	isb	sy
 80176c4:	f3bf 8f4f 	dsb	sy
 80176c8:	60fa      	str	r2, [r7, #12]
 80176ca:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80176cc:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80176ce:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80176d0:	69fb      	ldr	r3, [r7, #28]
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	617b      	str	r3, [r7, #20]
 80176d6:	69bb      	ldr	r3, [r7, #24]
 80176d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80176da:	693b      	ldr	r3, [r7, #16]
 80176dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80176e0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80176e2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80176e4:	4618      	mov	r0, r3
 80176e6:	3724      	adds	r7, #36	; 0x24
 80176e8:	46bd      	mov	sp, r7
 80176ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ee:	4770      	bx	lr

080176f0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b08e      	sub	sp, #56	; 0x38
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80176fa:	2300      	movs	r3, #0
 80176fc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8017702:	2300      	movs	r3, #0
 8017704:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d10a      	bne.n	8017722 <xEventGroupSetBits+0x32>
	__asm volatile
 801770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017710:	f383 8811 	msr	BASEPRI, r3
 8017714:	f3bf 8f6f 	isb	sy
 8017718:	f3bf 8f4f 	dsb	sy
 801771c:	613b      	str	r3, [r7, #16]
}
 801771e:	bf00      	nop
 8017720:	e7fe      	b.n	8017720 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017728:	2b00      	cmp	r3, #0
 801772a:	d00a      	beq.n	8017742 <xEventGroupSetBits+0x52>
	__asm volatile
 801772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017730:	f383 8811 	msr	BASEPRI, r3
 8017734:	f3bf 8f6f 	isb	sy
 8017738:	f3bf 8f4f 	dsb	sy
 801773c:	60fb      	str	r3, [r7, #12]
}
 801773e:	bf00      	nop
 8017740:	e7fe      	b.n	8017740 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8017742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017744:	3304      	adds	r3, #4
 8017746:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774a:	3308      	adds	r3, #8
 801774c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801774e:	f001 f887 	bl	8018860 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8017752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017754:	68db      	ldr	r3, [r3, #12]
 8017756:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801775a:	681a      	ldr	r2, [r3, #0]
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	431a      	orrs	r2, r3
 8017760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017762:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017764:	e03c      	b.n	80177e0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017768:	685b      	ldr	r3, [r3, #4]
 801776a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801776c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8017772:	2300      	movs	r3, #0
 8017774:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017776:	69bb      	ldr	r3, [r7, #24]
 8017778:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801777c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801777e:	69bb      	ldr	r3, [r7, #24]
 8017780:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017784:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801778c:	2b00      	cmp	r3, #0
 801778e:	d108      	bne.n	80177a2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8017790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017792:	681a      	ldr	r2, [r3, #0]
 8017794:	69bb      	ldr	r3, [r7, #24]
 8017796:	4013      	ands	r3, r2
 8017798:	2b00      	cmp	r3, #0
 801779a:	d00b      	beq.n	80177b4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801779c:	2301      	movs	r3, #1
 801779e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80177a0:	e008      	b.n	80177b4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80177a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a4:	681a      	ldr	r2, [r3, #0]
 80177a6:	69bb      	ldr	r3, [r7, #24]
 80177a8:	4013      	ands	r3, r2
 80177aa:	69ba      	ldr	r2, [r7, #24]
 80177ac:	429a      	cmp	r2, r3
 80177ae:	d101      	bne.n	80177b4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80177b0:	2301      	movs	r3, #1
 80177b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80177b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d010      	beq.n	80177dc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80177ba:	697b      	ldr	r3, [r7, #20]
 80177bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d003      	beq.n	80177cc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80177c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177c6:	69bb      	ldr	r3, [r7, #24]
 80177c8:	4313      	orrs	r3, r2
 80177ca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80177cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80177d4:	4619      	mov	r1, r3
 80177d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80177d8:	f001 fb1c 	bl	8018e14 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80177dc:	69fb      	ldr	r3, [r7, #28]
 80177de:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80177e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80177e2:	6a3b      	ldr	r3, [r7, #32]
 80177e4:	429a      	cmp	r2, r3
 80177e6:	d1be      	bne.n	8017766 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80177e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ea:	681a      	ldr	r2, [r3, #0]
 80177ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ee:	43db      	mvns	r3, r3
 80177f0:	401a      	ands	r2, r3
 80177f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80177f6:	f001 f841 	bl	801887c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80177fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177fc:	681b      	ldr	r3, [r3, #0]
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3738      	adds	r7, #56	; 0x38
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}

08017806 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017806:	b580      	push	{r7, lr}
 8017808:	b082      	sub	sp, #8
 801780a:	af00      	add	r7, sp, #0
 801780c:	6078      	str	r0, [r7, #4]
 801780e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017810:	6839      	ldr	r1, [r7, #0]
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f7ff ff6c 	bl	80176f0 <xEventGroupSetBits>
}
 8017818:	bf00      	nop
 801781a:	3708      	adds	r7, #8
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}

08017820 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b082      	sub	sp, #8
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
 8017828:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801782a:	6839      	ldr	r1, [r7, #0]
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f7ff feef 	bl	8017610 <xEventGroupClearBits>
}
 8017832:	bf00      	nop
 8017834:	3708      	adds	r7, #8
 8017836:	46bd      	mov	sp, r7
 8017838:	bd80      	pop	{r7, pc}

0801783a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801783a:	b480      	push	{r7}
 801783c:	b087      	sub	sp, #28
 801783e:	af00      	add	r7, sp, #0
 8017840:	60f8      	str	r0, [r7, #12]
 8017842:	60b9      	str	r1, [r7, #8]
 8017844:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017846:	2300      	movs	r3, #0
 8017848:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d107      	bne.n	8017860 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017850:	68fa      	ldr	r2, [r7, #12]
 8017852:	68bb      	ldr	r3, [r7, #8]
 8017854:	4013      	ands	r3, r2
 8017856:	2b00      	cmp	r3, #0
 8017858:	d00a      	beq.n	8017870 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801785a:	2301      	movs	r3, #1
 801785c:	617b      	str	r3, [r7, #20]
 801785e:	e007      	b.n	8017870 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017860:	68fa      	ldr	r2, [r7, #12]
 8017862:	68bb      	ldr	r3, [r7, #8]
 8017864:	4013      	ands	r3, r2
 8017866:	68ba      	ldr	r2, [r7, #8]
 8017868:	429a      	cmp	r2, r3
 801786a:	d101      	bne.n	8017870 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801786c:	2301      	movs	r3, #1
 801786e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017870:	697b      	ldr	r3, [r7, #20]
}
 8017872:	4618      	mov	r0, r3
 8017874:	371c      	adds	r7, #28
 8017876:	46bd      	mov	sp, r7
 8017878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787c:	4770      	bx	lr
	...

08017880 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017880:	b580      	push	{r7, lr}
 8017882:	b086      	sub	sp, #24
 8017884:	af00      	add	r7, sp, #0
 8017886:	60f8      	str	r0, [r7, #12]
 8017888:	60b9      	str	r1, [r7, #8]
 801788a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	68ba      	ldr	r2, [r7, #8]
 8017890:	68f9      	ldr	r1, [r7, #12]
 8017892:	4804      	ldr	r0, [pc, #16]	; (80178a4 <xEventGroupSetBitsFromISR+0x24>)
 8017894:	f002 f8c0 	bl	8019a18 <xTimerPendFunctionCallFromISR>
 8017898:	6178      	str	r0, [r7, #20]

		return xReturn;
 801789a:	697b      	ldr	r3, [r7, #20]
	}
 801789c:	4618      	mov	r0, r3
 801789e:	3718      	adds	r7, #24
 80178a0:	46bd      	mov	sp, r7
 80178a2:	bd80      	pop	{r7, pc}
 80178a4:	08017807 	.word	0x08017807

080178a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80178a8:	b480      	push	{r7}
 80178aa:	b083      	sub	sp, #12
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	f103 0208 	add.w	r2, r3, #8
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	f103 0208 	add.w	r2, r3, #8
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	f103 0208 	add.w	r2, r3, #8
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	2200      	movs	r2, #0
 80178da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80178dc:	bf00      	nop
 80178de:	370c      	adds	r7, #12
 80178e0:	46bd      	mov	sp, r7
 80178e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e6:	4770      	bx	lr

080178e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80178e8:	b480      	push	{r7}
 80178ea:	b083      	sub	sp, #12
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2200      	movs	r2, #0
 80178f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80178f6:	bf00      	nop
 80178f8:	370c      	adds	r7, #12
 80178fa:	46bd      	mov	sp, r7
 80178fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017900:	4770      	bx	lr

08017902 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017902:	b480      	push	{r7}
 8017904:	b085      	sub	sp, #20
 8017906:	af00      	add	r7, sp, #0
 8017908:	6078      	str	r0, [r7, #4]
 801790a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	685b      	ldr	r3, [r3, #4]
 8017910:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	68fa      	ldr	r2, [r7, #12]
 8017916:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	689a      	ldr	r2, [r3, #8]
 801791c:	683b      	ldr	r3, [r7, #0]
 801791e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	689b      	ldr	r3, [r3, #8]
 8017924:	683a      	ldr	r2, [r7, #0]
 8017926:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	683a      	ldr	r2, [r7, #0]
 801792c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	687a      	ldr	r2, [r7, #4]
 8017932:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	1c5a      	adds	r2, r3, #1
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	601a      	str	r2, [r3, #0]
}
 801793e:	bf00      	nop
 8017940:	3714      	adds	r7, #20
 8017942:	46bd      	mov	sp, r7
 8017944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017948:	4770      	bx	lr

0801794a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801794a:	b480      	push	{r7}
 801794c:	b085      	sub	sp, #20
 801794e:	af00      	add	r7, sp, #0
 8017950:	6078      	str	r0, [r7, #4]
 8017952:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017954:	683b      	ldr	r3, [r7, #0]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801795a:	68bb      	ldr	r3, [r7, #8]
 801795c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017960:	d103      	bne.n	801796a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	691b      	ldr	r3, [r3, #16]
 8017966:	60fb      	str	r3, [r7, #12]
 8017968:	e00c      	b.n	8017984 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	3308      	adds	r3, #8
 801796e:	60fb      	str	r3, [r7, #12]
 8017970:	e002      	b.n	8017978 <vListInsert+0x2e>
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	60fb      	str	r3, [r7, #12]
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	685b      	ldr	r3, [r3, #4]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	68ba      	ldr	r2, [r7, #8]
 8017980:	429a      	cmp	r2, r3
 8017982:	d2f6      	bcs.n	8017972 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	685a      	ldr	r2, [r3, #4]
 8017988:	683b      	ldr	r3, [r7, #0]
 801798a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801798c:	683b      	ldr	r3, [r7, #0]
 801798e:	685b      	ldr	r3, [r3, #4]
 8017990:	683a      	ldr	r2, [r7, #0]
 8017992:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	68fa      	ldr	r2, [r7, #12]
 8017998:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	683a      	ldr	r2, [r7, #0]
 801799e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	687a      	ldr	r2, [r7, #4]
 80179a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	1c5a      	adds	r2, r3, #1
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	601a      	str	r2, [r3, #0]
}
 80179b0:	bf00      	nop
 80179b2:	3714      	adds	r7, #20
 80179b4:	46bd      	mov	sp, r7
 80179b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ba:	4770      	bx	lr

080179bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80179bc:	b480      	push	{r7}
 80179be:	b085      	sub	sp, #20
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	691b      	ldr	r3, [r3, #16]
 80179c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	685b      	ldr	r3, [r3, #4]
 80179ce:	687a      	ldr	r2, [r7, #4]
 80179d0:	6892      	ldr	r2, [r2, #8]
 80179d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	689b      	ldr	r3, [r3, #8]
 80179d8:	687a      	ldr	r2, [r7, #4]
 80179da:	6852      	ldr	r2, [r2, #4]
 80179dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	685b      	ldr	r3, [r3, #4]
 80179e2:	687a      	ldr	r2, [r7, #4]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d103      	bne.n	80179f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	689a      	ldr	r2, [r3, #8]
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2200      	movs	r2, #0
 80179f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	1e5a      	subs	r2, r3, #1
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	681b      	ldr	r3, [r3, #0]
}
 8017a04:	4618      	mov	r0, r3
 8017a06:	3714      	adds	r7, #20
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0e:	4770      	bx	lr

08017a10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b084      	sub	sp, #16
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
 8017a18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d10a      	bne.n	8017a3a <xQueueGenericReset+0x2a>
	__asm volatile
 8017a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a28:	f383 8811 	msr	BASEPRI, r3
 8017a2c:	f3bf 8f6f 	isb	sy
 8017a30:	f3bf 8f4f 	dsb	sy
 8017a34:	60bb      	str	r3, [r7, #8]
}
 8017a36:	bf00      	nop
 8017a38:	e7fe      	b.n	8017a38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017a3a:	f002 f93b 	bl	8019cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	681a      	ldr	r2, [r3, #0]
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a46:	68f9      	ldr	r1, [r7, #12]
 8017a48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017a4a:	fb01 f303 	mul.w	r3, r1, r3
 8017a4e:	441a      	add	r2, r3
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	2200      	movs	r2, #0
 8017a58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	681a      	ldr	r2, [r3, #0]
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	681a      	ldr	r2, [r3, #0]
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a6a:	3b01      	subs	r3, #1
 8017a6c:	68f9      	ldr	r1, [r7, #12]
 8017a6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017a70:	fb01 f303 	mul.w	r3, r1, r3
 8017a74:	441a      	add	r2, r3
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	22ff      	movs	r2, #255	; 0xff
 8017a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	22ff      	movs	r2, #255	; 0xff
 8017a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017a8a:	683b      	ldr	r3, [r7, #0]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d114      	bne.n	8017aba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	691b      	ldr	r3, [r3, #16]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d01a      	beq.n	8017ace <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	3310      	adds	r3, #16
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f001 f955 	bl	8018d4c <xTaskRemoveFromEventList>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d012      	beq.n	8017ace <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017aa8:	4b0c      	ldr	r3, [pc, #48]	; (8017adc <xQueueGenericReset+0xcc>)
 8017aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017aae:	601a      	str	r2, [r3, #0]
 8017ab0:	f3bf 8f4f 	dsb	sy
 8017ab4:	f3bf 8f6f 	isb	sy
 8017ab8:	e009      	b.n	8017ace <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	3310      	adds	r3, #16
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7ff fef2 	bl	80178a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	3324      	adds	r3, #36	; 0x24
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f7ff feed 	bl	80178a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017ace:	f002 f921 	bl	8019d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017ad2:	2301      	movs	r3, #1
}
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	3710      	adds	r7, #16
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	bd80      	pop	{r7, pc}
 8017adc:	e000ed04 	.word	0xe000ed04

08017ae0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b08e      	sub	sp, #56	; 0x38
 8017ae4:	af02      	add	r7, sp, #8
 8017ae6:	60f8      	str	r0, [r7, #12]
 8017ae8:	60b9      	str	r1, [r7, #8]
 8017aea:	607a      	str	r2, [r7, #4]
 8017aec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d10a      	bne.n	8017b0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af8:	f383 8811 	msr	BASEPRI, r3
 8017afc:	f3bf 8f6f 	isb	sy
 8017b00:	f3bf 8f4f 	dsb	sy
 8017b04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017b06:	bf00      	nop
 8017b08:	e7fe      	b.n	8017b08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d10a      	bne.n	8017b26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b14:	f383 8811 	msr	BASEPRI, r3
 8017b18:	f3bf 8f6f 	isb	sy
 8017b1c:	f3bf 8f4f 	dsb	sy
 8017b20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017b22:	bf00      	nop
 8017b24:	e7fe      	b.n	8017b24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d002      	beq.n	8017b32 <xQueueGenericCreateStatic+0x52>
 8017b2c:	68bb      	ldr	r3, [r7, #8]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d001      	beq.n	8017b36 <xQueueGenericCreateStatic+0x56>
 8017b32:	2301      	movs	r3, #1
 8017b34:	e000      	b.n	8017b38 <xQueueGenericCreateStatic+0x58>
 8017b36:	2300      	movs	r3, #0
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d10a      	bne.n	8017b52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b40:	f383 8811 	msr	BASEPRI, r3
 8017b44:	f3bf 8f6f 	isb	sy
 8017b48:	f3bf 8f4f 	dsb	sy
 8017b4c:	623b      	str	r3, [r7, #32]
}
 8017b4e:	bf00      	nop
 8017b50:	e7fe      	b.n	8017b50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d102      	bne.n	8017b5e <xQueueGenericCreateStatic+0x7e>
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d101      	bne.n	8017b62 <xQueueGenericCreateStatic+0x82>
 8017b5e:	2301      	movs	r3, #1
 8017b60:	e000      	b.n	8017b64 <xQueueGenericCreateStatic+0x84>
 8017b62:	2300      	movs	r3, #0
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d10a      	bne.n	8017b7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b6c:	f383 8811 	msr	BASEPRI, r3
 8017b70:	f3bf 8f6f 	isb	sy
 8017b74:	f3bf 8f4f 	dsb	sy
 8017b78:	61fb      	str	r3, [r7, #28]
}
 8017b7a:	bf00      	nop
 8017b7c:	e7fe      	b.n	8017b7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017b7e:	2350      	movs	r3, #80	; 0x50
 8017b80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	2b50      	cmp	r3, #80	; 0x50
 8017b86:	d00a      	beq.n	8017b9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b8c:	f383 8811 	msr	BASEPRI, r3
 8017b90:	f3bf 8f6f 	isb	sy
 8017b94:	f3bf 8f4f 	dsb	sy
 8017b98:	61bb      	str	r3, [r7, #24]
}
 8017b9a:	bf00      	nop
 8017b9c:	e7fe      	b.n	8017b9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017b9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ba0:	683b      	ldr	r3, [r7, #0]
 8017ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d00d      	beq.n	8017bc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bac:	2201      	movs	r2, #1
 8017bae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017bb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb8:	9300      	str	r3, [sp, #0]
 8017bba:	4613      	mov	r3, r2
 8017bbc:	687a      	ldr	r2, [r7, #4]
 8017bbe:	68b9      	ldr	r1, [r7, #8]
 8017bc0:	68f8      	ldr	r0, [r7, #12]
 8017bc2:	f000 f805 	bl	8017bd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017bc8:	4618      	mov	r0, r3
 8017bca:	3730      	adds	r7, #48	; 0x30
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bd80      	pop	{r7, pc}

08017bd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b084      	sub	sp, #16
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	60f8      	str	r0, [r7, #12]
 8017bd8:	60b9      	str	r1, [r7, #8]
 8017bda:	607a      	str	r2, [r7, #4]
 8017bdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017bde:	68bb      	ldr	r3, [r7, #8]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d103      	bne.n	8017bec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017be4:	69bb      	ldr	r3, [r7, #24]
 8017be6:	69ba      	ldr	r2, [r7, #24]
 8017be8:	601a      	str	r2, [r3, #0]
 8017bea:	e002      	b.n	8017bf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017bec:	69bb      	ldr	r3, [r7, #24]
 8017bee:	687a      	ldr	r2, [r7, #4]
 8017bf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017bf2:	69bb      	ldr	r3, [r7, #24]
 8017bf4:	68fa      	ldr	r2, [r7, #12]
 8017bf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017bf8:	69bb      	ldr	r3, [r7, #24]
 8017bfa:	68ba      	ldr	r2, [r7, #8]
 8017bfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017bfe:	2101      	movs	r1, #1
 8017c00:	69b8      	ldr	r0, [r7, #24]
 8017c02:	f7ff ff05 	bl	8017a10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017c06:	69bb      	ldr	r3, [r7, #24]
 8017c08:	78fa      	ldrb	r2, [r7, #3]
 8017c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017c0e:	bf00      	nop
 8017c10:	3710      	adds	r7, #16
 8017c12:	46bd      	mov	sp, r7
 8017c14:	bd80      	pop	{r7, pc}
	...

08017c18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b08e      	sub	sp, #56	; 0x38
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	60f8      	str	r0, [r7, #12]
 8017c20:	60b9      	str	r1, [r7, #8]
 8017c22:	607a      	str	r2, [r7, #4]
 8017c24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017c26:	2300      	movs	r3, #0
 8017c28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d10a      	bne.n	8017c4a <xQueueGenericSend+0x32>
	__asm volatile
 8017c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c38:	f383 8811 	msr	BASEPRI, r3
 8017c3c:	f3bf 8f6f 	isb	sy
 8017c40:	f3bf 8f4f 	dsb	sy
 8017c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017c46:	bf00      	nop
 8017c48:	e7fe      	b.n	8017c48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c4a:	68bb      	ldr	r3, [r7, #8]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d103      	bne.n	8017c58 <xQueueGenericSend+0x40>
 8017c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d101      	bne.n	8017c5c <xQueueGenericSend+0x44>
 8017c58:	2301      	movs	r3, #1
 8017c5a:	e000      	b.n	8017c5e <xQueueGenericSend+0x46>
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d10a      	bne.n	8017c78 <xQueueGenericSend+0x60>
	__asm volatile
 8017c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c66:	f383 8811 	msr	BASEPRI, r3
 8017c6a:	f3bf 8f6f 	isb	sy
 8017c6e:	f3bf 8f4f 	dsb	sy
 8017c72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017c74:	bf00      	nop
 8017c76:	e7fe      	b.n	8017c76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017c78:	683b      	ldr	r3, [r7, #0]
 8017c7a:	2b02      	cmp	r3, #2
 8017c7c:	d103      	bne.n	8017c86 <xQueueGenericSend+0x6e>
 8017c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c82:	2b01      	cmp	r3, #1
 8017c84:	d101      	bne.n	8017c8a <xQueueGenericSend+0x72>
 8017c86:	2301      	movs	r3, #1
 8017c88:	e000      	b.n	8017c8c <xQueueGenericSend+0x74>
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d10a      	bne.n	8017ca6 <xQueueGenericSend+0x8e>
	__asm volatile
 8017c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c94:	f383 8811 	msr	BASEPRI, r3
 8017c98:	f3bf 8f6f 	isb	sy
 8017c9c:	f3bf 8f4f 	dsb	sy
 8017ca0:	623b      	str	r3, [r7, #32]
}
 8017ca2:	bf00      	nop
 8017ca4:	e7fe      	b.n	8017ca4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017ca6:	f001 fa71 	bl	801918c <xTaskGetSchedulerState>
 8017caa:	4603      	mov	r3, r0
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d102      	bne.n	8017cb6 <xQueueGenericSend+0x9e>
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d101      	bne.n	8017cba <xQueueGenericSend+0xa2>
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	e000      	b.n	8017cbc <xQueueGenericSend+0xa4>
 8017cba:	2300      	movs	r3, #0
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d10a      	bne.n	8017cd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8017cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cc4:	f383 8811 	msr	BASEPRI, r3
 8017cc8:	f3bf 8f6f 	isb	sy
 8017ccc:	f3bf 8f4f 	dsb	sy
 8017cd0:	61fb      	str	r3, [r7, #28]
}
 8017cd2:	bf00      	nop
 8017cd4:	e7fe      	b.n	8017cd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017cd6:	f001 ffed 	bl	8019cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d302      	bcc.n	8017cec <xQueueGenericSend+0xd4>
 8017ce6:	683b      	ldr	r3, [r7, #0]
 8017ce8:	2b02      	cmp	r3, #2
 8017cea:	d129      	bne.n	8017d40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017cec:	683a      	ldr	r2, [r7, #0]
 8017cee:	68b9      	ldr	r1, [r7, #8]
 8017cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cf2:	f000 fa0b 	bl	801810c <prvCopyDataToQueue>
 8017cf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d010      	beq.n	8017d22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d02:	3324      	adds	r3, #36	; 0x24
 8017d04:	4618      	mov	r0, r3
 8017d06:	f001 f821 	bl	8018d4c <xTaskRemoveFromEventList>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d013      	beq.n	8017d38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017d10:	4b3f      	ldr	r3, [pc, #252]	; (8017e10 <xQueueGenericSend+0x1f8>)
 8017d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d16:	601a      	str	r2, [r3, #0]
 8017d18:	f3bf 8f4f 	dsb	sy
 8017d1c:	f3bf 8f6f 	isb	sy
 8017d20:	e00a      	b.n	8017d38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d007      	beq.n	8017d38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017d28:	4b39      	ldr	r3, [pc, #228]	; (8017e10 <xQueueGenericSend+0x1f8>)
 8017d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d2e:	601a      	str	r2, [r3, #0]
 8017d30:	f3bf 8f4f 	dsb	sy
 8017d34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017d38:	f001 ffec 	bl	8019d14 <vPortExitCritical>
				return pdPASS;
 8017d3c:	2301      	movs	r3, #1
 8017d3e:	e063      	b.n	8017e08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d103      	bne.n	8017d4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017d46:	f001 ffe5 	bl	8019d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	e05c      	b.n	8017e08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d106      	bne.n	8017d62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017d54:	f107 0314 	add.w	r3, r7, #20
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f001 f8bd 	bl	8018ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017d5e:	2301      	movs	r3, #1
 8017d60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017d62:	f001 ffd7 	bl	8019d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017d66:	f000 fd7b 	bl	8018860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017d6a:	f001 ffa3 	bl	8019cb4 <vPortEnterCritical>
 8017d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d74:	b25b      	sxtb	r3, r3
 8017d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d7a:	d103      	bne.n	8017d84 <xQueueGenericSend+0x16c>
 8017d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d7e:	2200      	movs	r2, #0
 8017d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d8a:	b25b      	sxtb	r3, r3
 8017d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d90:	d103      	bne.n	8017d9a <xQueueGenericSend+0x182>
 8017d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d94:	2200      	movs	r2, #0
 8017d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017d9a:	f001 ffbb 	bl	8019d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017d9e:	1d3a      	adds	r2, r7, #4
 8017da0:	f107 0314 	add.w	r3, r7, #20
 8017da4:	4611      	mov	r1, r2
 8017da6:	4618      	mov	r0, r3
 8017da8:	f001 f8ac 	bl	8018f04 <xTaskCheckForTimeOut>
 8017dac:	4603      	mov	r3, r0
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d124      	bne.n	8017dfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017db4:	f000 faa2 	bl	80182fc <prvIsQueueFull>
 8017db8:	4603      	mov	r3, r0
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d018      	beq.n	8017df0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc0:	3310      	adds	r3, #16
 8017dc2:	687a      	ldr	r2, [r7, #4]
 8017dc4:	4611      	mov	r1, r2
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f000 ff34 	bl	8018c34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017dce:	f000 fa2d 	bl	801822c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017dd2:	f000 fd53 	bl	801887c <xTaskResumeAll>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	f47f af7c 	bne.w	8017cd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017dde:	4b0c      	ldr	r3, [pc, #48]	; (8017e10 <xQueueGenericSend+0x1f8>)
 8017de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017de4:	601a      	str	r2, [r3, #0]
 8017de6:	f3bf 8f4f 	dsb	sy
 8017dea:	f3bf 8f6f 	isb	sy
 8017dee:	e772      	b.n	8017cd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017df2:	f000 fa1b 	bl	801822c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017df6:	f000 fd41 	bl	801887c <xTaskResumeAll>
 8017dfa:	e76c      	b.n	8017cd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017dfe:	f000 fa15 	bl	801822c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017e02:	f000 fd3b 	bl	801887c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017e06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017e08:	4618      	mov	r0, r3
 8017e0a:	3738      	adds	r7, #56	; 0x38
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bd80      	pop	{r7, pc}
 8017e10:	e000ed04 	.word	0xe000ed04

08017e14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b090      	sub	sp, #64	; 0x40
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	60f8      	str	r0, [r7, #12]
 8017e1c:	60b9      	str	r1, [r7, #8]
 8017e1e:	607a      	str	r2, [r7, #4]
 8017e20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d10a      	bne.n	8017e42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e30:	f383 8811 	msr	BASEPRI, r3
 8017e34:	f3bf 8f6f 	isb	sy
 8017e38:	f3bf 8f4f 	dsb	sy
 8017e3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017e3e:	bf00      	nop
 8017e40:	e7fe      	b.n	8017e40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e42:	68bb      	ldr	r3, [r7, #8]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d103      	bne.n	8017e50 <xQueueGenericSendFromISR+0x3c>
 8017e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d101      	bne.n	8017e54 <xQueueGenericSendFromISR+0x40>
 8017e50:	2301      	movs	r3, #1
 8017e52:	e000      	b.n	8017e56 <xQueueGenericSendFromISR+0x42>
 8017e54:	2300      	movs	r3, #0
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d10a      	bne.n	8017e70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e5e:	f383 8811 	msr	BASEPRI, r3
 8017e62:	f3bf 8f6f 	isb	sy
 8017e66:	f3bf 8f4f 	dsb	sy
 8017e6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017e6c:	bf00      	nop
 8017e6e:	e7fe      	b.n	8017e6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	2b02      	cmp	r3, #2
 8017e74:	d103      	bne.n	8017e7e <xQueueGenericSendFromISR+0x6a>
 8017e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e7a:	2b01      	cmp	r3, #1
 8017e7c:	d101      	bne.n	8017e82 <xQueueGenericSendFromISR+0x6e>
 8017e7e:	2301      	movs	r3, #1
 8017e80:	e000      	b.n	8017e84 <xQueueGenericSendFromISR+0x70>
 8017e82:	2300      	movs	r3, #0
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d10a      	bne.n	8017e9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e8c:	f383 8811 	msr	BASEPRI, r3
 8017e90:	f3bf 8f6f 	isb	sy
 8017e94:	f3bf 8f4f 	dsb	sy
 8017e98:	623b      	str	r3, [r7, #32]
}
 8017e9a:	bf00      	nop
 8017e9c:	e7fe      	b.n	8017e9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017e9e:	f001 ffeb 	bl	8019e78 <vPortValidateInterruptPriority>
	__asm volatile
 8017ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8017ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eaa:	f383 8811 	msr	BASEPRI, r3
 8017eae:	f3bf 8f6f 	isb	sy
 8017eb2:	f3bf 8f4f 	dsb	sy
 8017eb6:	61fa      	str	r2, [r7, #28]
 8017eb8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017eba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017ebc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ec6:	429a      	cmp	r2, r3
 8017ec8:	d302      	bcc.n	8017ed0 <xQueueGenericSendFromISR+0xbc>
 8017eca:	683b      	ldr	r3, [r7, #0]
 8017ecc:	2b02      	cmp	r3, #2
 8017ece:	d12f      	bne.n	8017f30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ede:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ee0:	683a      	ldr	r2, [r7, #0]
 8017ee2:	68b9      	ldr	r1, [r7, #8]
 8017ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017ee6:	f000 f911 	bl	801810c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017eea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ef2:	d112      	bne.n	8017f1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d016      	beq.n	8017f2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017efe:	3324      	adds	r3, #36	; 0x24
 8017f00:	4618      	mov	r0, r3
 8017f02:	f000 ff23 	bl	8018d4c <xTaskRemoveFromEventList>
 8017f06:	4603      	mov	r3, r0
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d00e      	beq.n	8017f2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d00b      	beq.n	8017f2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	2201      	movs	r2, #1
 8017f16:	601a      	str	r2, [r3, #0]
 8017f18:	e007      	b.n	8017f2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017f1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017f1e:	3301      	adds	r3, #1
 8017f20:	b2db      	uxtb	r3, r3
 8017f22:	b25a      	sxtb	r2, r3
 8017f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017f2a:	2301      	movs	r3, #1
 8017f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017f2e:	e001      	b.n	8017f34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017f30:	2300      	movs	r3, #0
 8017f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f36:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017f38:	697b      	ldr	r3, [r7, #20]
 8017f3a:	f383 8811 	msr	BASEPRI, r3
}
 8017f3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017f42:	4618      	mov	r0, r3
 8017f44:	3740      	adds	r7, #64	; 0x40
 8017f46:	46bd      	mov	sp, r7
 8017f48:	bd80      	pop	{r7, pc}
	...

08017f4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b08c      	sub	sp, #48	; 0x30
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	60f8      	str	r0, [r7, #12]
 8017f54:	60b9      	str	r1, [r7, #8]
 8017f56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017f58:	2300      	movs	r3, #0
 8017f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d10a      	bne.n	8017f7c <xQueueReceive+0x30>
	__asm volatile
 8017f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f6a:	f383 8811 	msr	BASEPRI, r3
 8017f6e:	f3bf 8f6f 	isb	sy
 8017f72:	f3bf 8f4f 	dsb	sy
 8017f76:	623b      	str	r3, [r7, #32]
}
 8017f78:	bf00      	nop
 8017f7a:	e7fe      	b.n	8017f7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d103      	bne.n	8017f8a <xQueueReceive+0x3e>
 8017f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d101      	bne.n	8017f8e <xQueueReceive+0x42>
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	e000      	b.n	8017f90 <xQueueReceive+0x44>
 8017f8e:	2300      	movs	r3, #0
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d10a      	bne.n	8017faa <xQueueReceive+0x5e>
	__asm volatile
 8017f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f98:	f383 8811 	msr	BASEPRI, r3
 8017f9c:	f3bf 8f6f 	isb	sy
 8017fa0:	f3bf 8f4f 	dsb	sy
 8017fa4:	61fb      	str	r3, [r7, #28]
}
 8017fa6:	bf00      	nop
 8017fa8:	e7fe      	b.n	8017fa8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017faa:	f001 f8ef 	bl	801918c <xTaskGetSchedulerState>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d102      	bne.n	8017fba <xQueueReceive+0x6e>
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d101      	bne.n	8017fbe <xQueueReceive+0x72>
 8017fba:	2301      	movs	r3, #1
 8017fbc:	e000      	b.n	8017fc0 <xQueueReceive+0x74>
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d10a      	bne.n	8017fda <xQueueReceive+0x8e>
	__asm volatile
 8017fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fc8:	f383 8811 	msr	BASEPRI, r3
 8017fcc:	f3bf 8f6f 	isb	sy
 8017fd0:	f3bf 8f4f 	dsb	sy
 8017fd4:	61bb      	str	r3, [r7, #24]
}
 8017fd6:	bf00      	nop
 8017fd8:	e7fe      	b.n	8017fd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017fda:	f001 fe6b 	bl	8019cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fe2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d01f      	beq.n	801802a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017fea:	68b9      	ldr	r1, [r7, #8]
 8017fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fee:	f000 f8f7 	bl	80181e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff4:	1e5a      	subs	r2, r3, #1
 8017ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ffc:	691b      	ldr	r3, [r3, #16]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d00f      	beq.n	8018022 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018004:	3310      	adds	r3, #16
 8018006:	4618      	mov	r0, r3
 8018008:	f000 fea0 	bl	8018d4c <xTaskRemoveFromEventList>
 801800c:	4603      	mov	r3, r0
 801800e:	2b00      	cmp	r3, #0
 8018010:	d007      	beq.n	8018022 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018012:	4b3d      	ldr	r3, [pc, #244]	; (8018108 <xQueueReceive+0x1bc>)
 8018014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018018:	601a      	str	r2, [r3, #0]
 801801a:	f3bf 8f4f 	dsb	sy
 801801e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018022:	f001 fe77 	bl	8019d14 <vPortExitCritical>
				return pdPASS;
 8018026:	2301      	movs	r3, #1
 8018028:	e069      	b.n	80180fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d103      	bne.n	8018038 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018030:	f001 fe70 	bl	8019d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018034:	2300      	movs	r3, #0
 8018036:	e062      	b.n	80180fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801803a:	2b00      	cmp	r3, #0
 801803c:	d106      	bne.n	801804c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801803e:	f107 0310 	add.w	r3, r7, #16
 8018042:	4618      	mov	r0, r3
 8018044:	f000 ff48 	bl	8018ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018048:	2301      	movs	r3, #1
 801804a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801804c:	f001 fe62 	bl	8019d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018050:	f000 fc06 	bl	8018860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018054:	f001 fe2e 	bl	8019cb4 <vPortEnterCritical>
 8018058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801805a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801805e:	b25b      	sxtb	r3, r3
 8018060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018064:	d103      	bne.n	801806e <xQueueReceive+0x122>
 8018066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018068:	2200      	movs	r2, #0
 801806a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018074:	b25b      	sxtb	r3, r3
 8018076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801807a:	d103      	bne.n	8018084 <xQueueReceive+0x138>
 801807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801807e:	2200      	movs	r2, #0
 8018080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018084:	f001 fe46 	bl	8019d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018088:	1d3a      	adds	r2, r7, #4
 801808a:	f107 0310 	add.w	r3, r7, #16
 801808e:	4611      	mov	r1, r2
 8018090:	4618      	mov	r0, r3
 8018092:	f000 ff37 	bl	8018f04 <xTaskCheckForTimeOut>
 8018096:	4603      	mov	r3, r0
 8018098:	2b00      	cmp	r3, #0
 801809a:	d123      	bne.n	80180e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801809c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801809e:	f000 f917 	bl	80182d0 <prvIsQueueEmpty>
 80180a2:	4603      	mov	r3, r0
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d017      	beq.n	80180d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80180a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180aa:	3324      	adds	r3, #36	; 0x24
 80180ac:	687a      	ldr	r2, [r7, #4]
 80180ae:	4611      	mov	r1, r2
 80180b0:	4618      	mov	r0, r3
 80180b2:	f000 fdbf 	bl	8018c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80180b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180b8:	f000 f8b8 	bl	801822c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80180bc:	f000 fbde 	bl	801887c <xTaskResumeAll>
 80180c0:	4603      	mov	r3, r0
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d189      	bne.n	8017fda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80180c6:	4b10      	ldr	r3, [pc, #64]	; (8018108 <xQueueReceive+0x1bc>)
 80180c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180cc:	601a      	str	r2, [r3, #0]
 80180ce:	f3bf 8f4f 	dsb	sy
 80180d2:	f3bf 8f6f 	isb	sy
 80180d6:	e780      	b.n	8017fda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80180d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180da:	f000 f8a7 	bl	801822c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80180de:	f000 fbcd 	bl	801887c <xTaskResumeAll>
 80180e2:	e77a      	b.n	8017fda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80180e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180e6:	f000 f8a1 	bl	801822c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80180ea:	f000 fbc7 	bl	801887c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80180ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180f0:	f000 f8ee 	bl	80182d0 <prvIsQueueEmpty>
 80180f4:	4603      	mov	r3, r0
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	f43f af6f 	beq.w	8017fda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80180fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80180fe:	4618      	mov	r0, r3
 8018100:	3730      	adds	r7, #48	; 0x30
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}
 8018106:	bf00      	nop
 8018108:	e000ed04 	.word	0xe000ed04

0801810c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b086      	sub	sp, #24
 8018110:	af00      	add	r7, sp, #0
 8018112:	60f8      	str	r0, [r7, #12]
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018118:	2300      	movs	r3, #0
 801811a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018120:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018126:	2b00      	cmp	r3, #0
 8018128:	d10d      	bne.n	8018146 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d14d      	bne.n	80181ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	689b      	ldr	r3, [r3, #8]
 8018136:	4618      	mov	r0, r3
 8018138:	f001 f846 	bl	80191c8 <xTaskPriorityDisinherit>
 801813c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	2200      	movs	r2, #0
 8018142:	609a      	str	r2, [r3, #8]
 8018144:	e043      	b.n	80181ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d119      	bne.n	8018180 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	6858      	ldr	r0, [r3, #4]
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018154:	461a      	mov	r2, r3
 8018156:	68b9      	ldr	r1, [r7, #8]
 8018158:	f002 f8e2 	bl	801a320 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	685a      	ldr	r2, [r3, #4]
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018164:	441a      	add	r2, r3
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	685a      	ldr	r2, [r3, #4]
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	689b      	ldr	r3, [r3, #8]
 8018172:	429a      	cmp	r2, r3
 8018174:	d32b      	bcc.n	80181ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	681a      	ldr	r2, [r3, #0]
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	605a      	str	r2, [r3, #4]
 801817e:	e026      	b.n	80181ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	68d8      	ldr	r0, [r3, #12]
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018188:	461a      	mov	r2, r3
 801818a:	68b9      	ldr	r1, [r7, #8]
 801818c:	f002 f8c8 	bl	801a320 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	68da      	ldr	r2, [r3, #12]
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018198:	425b      	negs	r3, r3
 801819a:	441a      	add	r2, r3
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	68da      	ldr	r2, [r3, #12]
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	429a      	cmp	r2, r3
 80181aa:	d207      	bcs.n	80181bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	689a      	ldr	r2, [r3, #8]
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181b4:	425b      	negs	r3, r3
 80181b6:	441a      	add	r2, r3
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	2b02      	cmp	r3, #2
 80181c0:	d105      	bne.n	80181ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80181c2:	693b      	ldr	r3, [r7, #16]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d002      	beq.n	80181ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80181c8:	693b      	ldr	r3, [r7, #16]
 80181ca:	3b01      	subs	r3, #1
 80181cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80181ce:	693b      	ldr	r3, [r7, #16]
 80181d0:	1c5a      	adds	r2, r3, #1
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80181d6:	697b      	ldr	r3, [r7, #20]
}
 80181d8:	4618      	mov	r0, r3
 80181da:	3718      	adds	r7, #24
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}

080181e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b082      	sub	sp, #8
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
 80181e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d018      	beq.n	8018224 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	68da      	ldr	r2, [r3, #12]
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181fa:	441a      	add	r2, r3
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	68da      	ldr	r2, [r3, #12]
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	689b      	ldr	r3, [r3, #8]
 8018208:	429a      	cmp	r2, r3
 801820a:	d303      	bcc.n	8018214 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681a      	ldr	r2, [r3, #0]
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	68d9      	ldr	r1, [r3, #12]
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801821c:	461a      	mov	r2, r3
 801821e:	6838      	ldr	r0, [r7, #0]
 8018220:	f002 f87e 	bl	801a320 <memcpy>
	}
}
 8018224:	bf00      	nop
 8018226:	3708      	adds	r7, #8
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}

0801822c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b084      	sub	sp, #16
 8018230:	af00      	add	r7, sp, #0
 8018232:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018234:	f001 fd3e 	bl	8019cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801823e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018240:	e011      	b.n	8018266 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018246:	2b00      	cmp	r3, #0
 8018248:	d012      	beq.n	8018270 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	3324      	adds	r3, #36	; 0x24
 801824e:	4618      	mov	r0, r3
 8018250:	f000 fd7c 	bl	8018d4c <xTaskRemoveFromEventList>
 8018254:	4603      	mov	r3, r0
 8018256:	2b00      	cmp	r3, #0
 8018258:	d001      	beq.n	801825e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801825a:	f000 feb5 	bl	8018fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801825e:	7bfb      	ldrb	r3, [r7, #15]
 8018260:	3b01      	subs	r3, #1
 8018262:	b2db      	uxtb	r3, r3
 8018264:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801826a:	2b00      	cmp	r3, #0
 801826c:	dce9      	bgt.n	8018242 <prvUnlockQueue+0x16>
 801826e:	e000      	b.n	8018272 <prvUnlockQueue+0x46>
					break;
 8018270:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	22ff      	movs	r2, #255	; 0xff
 8018276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801827a:	f001 fd4b 	bl	8019d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801827e:	f001 fd19 	bl	8019cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018288:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801828a:	e011      	b.n	80182b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	691b      	ldr	r3, [r3, #16]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d012      	beq.n	80182ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	3310      	adds	r3, #16
 8018298:	4618      	mov	r0, r3
 801829a:	f000 fd57 	bl	8018d4c <xTaskRemoveFromEventList>
 801829e:	4603      	mov	r3, r0
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d001      	beq.n	80182a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80182a4:	f000 fe90 	bl	8018fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80182a8:	7bbb      	ldrb	r3, [r7, #14]
 80182aa:	3b01      	subs	r3, #1
 80182ac:	b2db      	uxtb	r3, r3
 80182ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80182b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	dce9      	bgt.n	801828c <prvUnlockQueue+0x60>
 80182b8:	e000      	b.n	80182bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80182ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	22ff      	movs	r2, #255	; 0xff
 80182c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80182c4:	f001 fd26 	bl	8019d14 <vPortExitCritical>
}
 80182c8:	bf00      	nop
 80182ca:	3710      	adds	r7, #16
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}

080182d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b084      	sub	sp, #16
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80182d8:	f001 fcec 	bl	8019cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d102      	bne.n	80182ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80182e4:	2301      	movs	r3, #1
 80182e6:	60fb      	str	r3, [r7, #12]
 80182e8:	e001      	b.n	80182ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80182ea:	2300      	movs	r3, #0
 80182ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80182ee:	f001 fd11 	bl	8019d14 <vPortExitCritical>

	return xReturn;
 80182f2:	68fb      	ldr	r3, [r7, #12]
}
 80182f4:	4618      	mov	r0, r3
 80182f6:	3710      	adds	r7, #16
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}

080182fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b084      	sub	sp, #16
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018304:	f001 fcd6 	bl	8019cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018310:	429a      	cmp	r2, r3
 8018312:	d102      	bne.n	801831a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018314:	2301      	movs	r3, #1
 8018316:	60fb      	str	r3, [r7, #12]
 8018318:	e001      	b.n	801831e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801831a:	2300      	movs	r3, #0
 801831c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801831e:	f001 fcf9 	bl	8019d14 <vPortExitCritical>

	return xReturn;
 8018322:	68fb      	ldr	r3, [r7, #12]
}
 8018324:	4618      	mov	r0, r3
 8018326:	3710      	adds	r7, #16
 8018328:	46bd      	mov	sp, r7
 801832a:	bd80      	pop	{r7, pc}

0801832c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801832c:	b480      	push	{r7}
 801832e:	b085      	sub	sp, #20
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
 8018334:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018336:	2300      	movs	r3, #0
 8018338:	60fb      	str	r3, [r7, #12]
 801833a:	e014      	b.n	8018366 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801833c:	4a0f      	ldr	r2, [pc, #60]	; (801837c <vQueueAddToRegistry+0x50>)
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d10b      	bne.n	8018360 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018348:	490c      	ldr	r1, [pc, #48]	; (801837c <vQueueAddToRegistry+0x50>)
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	683a      	ldr	r2, [r7, #0]
 801834e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018352:	4a0a      	ldr	r2, [pc, #40]	; (801837c <vQueueAddToRegistry+0x50>)
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	00db      	lsls	r3, r3, #3
 8018358:	4413      	add	r3, r2
 801835a:	687a      	ldr	r2, [r7, #4]
 801835c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801835e:	e006      	b.n	801836e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	3301      	adds	r3, #1
 8018364:	60fb      	str	r3, [r7, #12]
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	2b07      	cmp	r3, #7
 801836a:	d9e7      	bls.n	801833c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801836c:	bf00      	nop
 801836e:	bf00      	nop
 8018370:	3714      	adds	r7, #20
 8018372:	46bd      	mov	sp, r7
 8018374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018378:	4770      	bx	lr
 801837a:	bf00      	nop
 801837c:	240026d8 	.word	0x240026d8

08018380 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018380:	b580      	push	{r7, lr}
 8018382:	b086      	sub	sp, #24
 8018384:	af00      	add	r7, sp, #0
 8018386:	60f8      	str	r0, [r7, #12]
 8018388:	60b9      	str	r1, [r7, #8]
 801838a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018390:	f001 fc90 	bl	8019cb4 <vPortEnterCritical>
 8018394:	697b      	ldr	r3, [r7, #20]
 8018396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801839a:	b25b      	sxtb	r3, r3
 801839c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183a0:	d103      	bne.n	80183aa <vQueueWaitForMessageRestricted+0x2a>
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	2200      	movs	r2, #0
 80183a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80183aa:	697b      	ldr	r3, [r7, #20]
 80183ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80183b0:	b25b      	sxtb	r3, r3
 80183b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183b6:	d103      	bne.n	80183c0 <vQueueWaitForMessageRestricted+0x40>
 80183b8:	697b      	ldr	r3, [r7, #20]
 80183ba:	2200      	movs	r2, #0
 80183bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80183c0:	f001 fca8 	bl	8019d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80183c4:	697b      	ldr	r3, [r7, #20]
 80183c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d106      	bne.n	80183da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80183cc:	697b      	ldr	r3, [r7, #20]
 80183ce:	3324      	adds	r3, #36	; 0x24
 80183d0:	687a      	ldr	r2, [r7, #4]
 80183d2:	68b9      	ldr	r1, [r7, #8]
 80183d4:	4618      	mov	r0, r3
 80183d6:	f000 fc8d 	bl	8018cf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80183da:	6978      	ldr	r0, [r7, #20]
 80183dc:	f7ff ff26 	bl	801822c <prvUnlockQueue>
	}
 80183e0:	bf00      	nop
 80183e2:	3718      	adds	r7, #24
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bd80      	pop	{r7, pc}

080183e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b08e      	sub	sp, #56	; 0x38
 80183ec:	af04      	add	r7, sp, #16
 80183ee:	60f8      	str	r0, [r7, #12]
 80183f0:	60b9      	str	r1, [r7, #8]
 80183f2:	607a      	str	r2, [r7, #4]
 80183f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80183f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d10a      	bne.n	8018412 <xTaskCreateStatic+0x2a>
	__asm volatile
 80183fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018400:	f383 8811 	msr	BASEPRI, r3
 8018404:	f3bf 8f6f 	isb	sy
 8018408:	f3bf 8f4f 	dsb	sy
 801840c:	623b      	str	r3, [r7, #32]
}
 801840e:	bf00      	nop
 8018410:	e7fe      	b.n	8018410 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018414:	2b00      	cmp	r3, #0
 8018416:	d10a      	bne.n	801842e <xTaskCreateStatic+0x46>
	__asm volatile
 8018418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801841c:	f383 8811 	msr	BASEPRI, r3
 8018420:	f3bf 8f6f 	isb	sy
 8018424:	f3bf 8f4f 	dsb	sy
 8018428:	61fb      	str	r3, [r7, #28]
}
 801842a:	bf00      	nop
 801842c:	e7fe      	b.n	801842c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801842e:	235c      	movs	r3, #92	; 0x5c
 8018430:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018432:	693b      	ldr	r3, [r7, #16]
 8018434:	2b5c      	cmp	r3, #92	; 0x5c
 8018436:	d00a      	beq.n	801844e <xTaskCreateStatic+0x66>
	__asm volatile
 8018438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801843c:	f383 8811 	msr	BASEPRI, r3
 8018440:	f3bf 8f6f 	isb	sy
 8018444:	f3bf 8f4f 	dsb	sy
 8018448:	61bb      	str	r3, [r7, #24]
}
 801844a:	bf00      	nop
 801844c:	e7fe      	b.n	801844c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801844e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018452:	2b00      	cmp	r3, #0
 8018454:	d01e      	beq.n	8018494 <xTaskCreateStatic+0xac>
 8018456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018458:	2b00      	cmp	r3, #0
 801845a:	d01b      	beq.n	8018494 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801845e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018464:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018468:	2202      	movs	r2, #2
 801846a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801846e:	2300      	movs	r3, #0
 8018470:	9303      	str	r3, [sp, #12]
 8018472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018474:	9302      	str	r3, [sp, #8]
 8018476:	f107 0314 	add.w	r3, r7, #20
 801847a:	9301      	str	r3, [sp, #4]
 801847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801847e:	9300      	str	r3, [sp, #0]
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	687a      	ldr	r2, [r7, #4]
 8018484:	68b9      	ldr	r1, [r7, #8]
 8018486:	68f8      	ldr	r0, [r7, #12]
 8018488:	f000 f850 	bl	801852c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801848c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801848e:	f000 f8dd 	bl	801864c <prvAddNewTaskToReadyList>
 8018492:	e001      	b.n	8018498 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018494:	2300      	movs	r3, #0
 8018496:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018498:	697b      	ldr	r3, [r7, #20]
	}
 801849a:	4618      	mov	r0, r3
 801849c:	3728      	adds	r7, #40	; 0x28
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}

080184a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80184a2:	b580      	push	{r7, lr}
 80184a4:	b08c      	sub	sp, #48	; 0x30
 80184a6:	af04      	add	r7, sp, #16
 80184a8:	60f8      	str	r0, [r7, #12]
 80184aa:	60b9      	str	r1, [r7, #8]
 80184ac:	603b      	str	r3, [r7, #0]
 80184ae:	4613      	mov	r3, r2
 80184b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80184b2:	88fb      	ldrh	r3, [r7, #6]
 80184b4:	009b      	lsls	r3, r3, #2
 80184b6:	4618      	mov	r0, r3
 80184b8:	f001 fd1e 	bl	8019ef8 <pvPortMalloc>
 80184bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80184be:	697b      	ldr	r3, [r7, #20]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d00e      	beq.n	80184e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80184c4:	205c      	movs	r0, #92	; 0x5c
 80184c6:	f001 fd17 	bl	8019ef8 <pvPortMalloc>
 80184ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80184cc:	69fb      	ldr	r3, [r7, #28]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d003      	beq.n	80184da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80184d2:	69fb      	ldr	r3, [r7, #28]
 80184d4:	697a      	ldr	r2, [r7, #20]
 80184d6:	631a      	str	r2, [r3, #48]	; 0x30
 80184d8:	e005      	b.n	80184e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80184da:	6978      	ldr	r0, [r7, #20]
 80184dc:	f001 fdd8 	bl	801a090 <vPortFree>
 80184e0:	e001      	b.n	80184e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80184e2:	2300      	movs	r3, #0
 80184e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80184e6:	69fb      	ldr	r3, [r7, #28]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d017      	beq.n	801851c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80184ec:	69fb      	ldr	r3, [r7, #28]
 80184ee:	2200      	movs	r2, #0
 80184f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80184f4:	88fa      	ldrh	r2, [r7, #6]
 80184f6:	2300      	movs	r3, #0
 80184f8:	9303      	str	r3, [sp, #12]
 80184fa:	69fb      	ldr	r3, [r7, #28]
 80184fc:	9302      	str	r3, [sp, #8]
 80184fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018500:	9301      	str	r3, [sp, #4]
 8018502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018504:	9300      	str	r3, [sp, #0]
 8018506:	683b      	ldr	r3, [r7, #0]
 8018508:	68b9      	ldr	r1, [r7, #8]
 801850a:	68f8      	ldr	r0, [r7, #12]
 801850c:	f000 f80e 	bl	801852c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018510:	69f8      	ldr	r0, [r7, #28]
 8018512:	f000 f89b 	bl	801864c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018516:	2301      	movs	r3, #1
 8018518:	61bb      	str	r3, [r7, #24]
 801851a:	e002      	b.n	8018522 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801851c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018520:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018522:	69bb      	ldr	r3, [r7, #24]
	}
 8018524:	4618      	mov	r0, r3
 8018526:	3720      	adds	r7, #32
 8018528:	46bd      	mov	sp, r7
 801852a:	bd80      	pop	{r7, pc}

0801852c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b088      	sub	sp, #32
 8018530:	af00      	add	r7, sp, #0
 8018532:	60f8      	str	r0, [r7, #12]
 8018534:	60b9      	str	r1, [r7, #8]
 8018536:	607a      	str	r2, [r7, #4]
 8018538:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801853c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	009b      	lsls	r3, r3, #2
 8018542:	461a      	mov	r2, r3
 8018544:	21a5      	movs	r1, #165	; 0xa5
 8018546:	f001 fef9 	bl	801a33c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801854c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801854e:	6879      	ldr	r1, [r7, #4]
 8018550:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018554:	440b      	add	r3, r1
 8018556:	009b      	lsls	r3, r3, #2
 8018558:	4413      	add	r3, r2
 801855a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801855c:	69bb      	ldr	r3, [r7, #24]
 801855e:	f023 0307 	bic.w	r3, r3, #7
 8018562:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018564:	69bb      	ldr	r3, [r7, #24]
 8018566:	f003 0307 	and.w	r3, r3, #7
 801856a:	2b00      	cmp	r3, #0
 801856c:	d00a      	beq.n	8018584 <prvInitialiseNewTask+0x58>
	__asm volatile
 801856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018572:	f383 8811 	msr	BASEPRI, r3
 8018576:	f3bf 8f6f 	isb	sy
 801857a:	f3bf 8f4f 	dsb	sy
 801857e:	617b      	str	r3, [r7, #20]
}
 8018580:	bf00      	nop
 8018582:	e7fe      	b.n	8018582 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d01f      	beq.n	80185ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801858a:	2300      	movs	r3, #0
 801858c:	61fb      	str	r3, [r7, #28]
 801858e:	e012      	b.n	80185b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018590:	68ba      	ldr	r2, [r7, #8]
 8018592:	69fb      	ldr	r3, [r7, #28]
 8018594:	4413      	add	r3, r2
 8018596:	7819      	ldrb	r1, [r3, #0]
 8018598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801859a:	69fb      	ldr	r3, [r7, #28]
 801859c:	4413      	add	r3, r2
 801859e:	3334      	adds	r3, #52	; 0x34
 80185a0:	460a      	mov	r2, r1
 80185a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80185a4:	68ba      	ldr	r2, [r7, #8]
 80185a6:	69fb      	ldr	r3, [r7, #28]
 80185a8:	4413      	add	r3, r2
 80185aa:	781b      	ldrb	r3, [r3, #0]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d006      	beq.n	80185be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80185b0:	69fb      	ldr	r3, [r7, #28]
 80185b2:	3301      	adds	r3, #1
 80185b4:	61fb      	str	r3, [r7, #28]
 80185b6:	69fb      	ldr	r3, [r7, #28]
 80185b8:	2b0f      	cmp	r3, #15
 80185ba:	d9e9      	bls.n	8018590 <prvInitialiseNewTask+0x64>
 80185bc:	e000      	b.n	80185c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80185be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80185c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185c2:	2200      	movs	r2, #0
 80185c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80185c8:	e003      	b.n	80185d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80185ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185cc:	2200      	movs	r2, #0
 80185ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80185d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d4:	2b37      	cmp	r3, #55	; 0x37
 80185d6:	d901      	bls.n	80185dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80185d8:	2337      	movs	r3, #55	; 0x37
 80185da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80185dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80185e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80185e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ea:	2200      	movs	r2, #0
 80185ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80185ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f0:	3304      	adds	r3, #4
 80185f2:	4618      	mov	r0, r3
 80185f4:	f7ff f978 	bl	80178e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80185f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185fa:	3318      	adds	r3, #24
 80185fc:	4618      	mov	r0, r3
 80185fe:	f7ff f973 	bl	80178e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018606:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801860a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018610:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018616:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861a:	2200      	movs	r2, #0
 801861c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018620:	2200      	movs	r2, #0
 8018622:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018626:	683a      	ldr	r2, [r7, #0]
 8018628:	68f9      	ldr	r1, [r7, #12]
 801862a:	69b8      	ldr	r0, [r7, #24]
 801862c:	f001 fa14 	bl	8019a58 <pxPortInitialiseStack>
 8018630:	4602      	mov	r2, r0
 8018632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018634:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018638:	2b00      	cmp	r3, #0
 801863a:	d002      	beq.n	8018642 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801863e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018642:	bf00      	nop
 8018644:	3720      	adds	r7, #32
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}
	...

0801864c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b082      	sub	sp, #8
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018654:	f001 fb2e 	bl	8019cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018658:	4b2d      	ldr	r3, [pc, #180]	; (8018710 <prvAddNewTaskToReadyList+0xc4>)
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	3301      	adds	r3, #1
 801865e:	4a2c      	ldr	r2, [pc, #176]	; (8018710 <prvAddNewTaskToReadyList+0xc4>)
 8018660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018662:	4b2c      	ldr	r3, [pc, #176]	; (8018714 <prvAddNewTaskToReadyList+0xc8>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d109      	bne.n	801867e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801866a:	4a2a      	ldr	r2, [pc, #168]	; (8018714 <prvAddNewTaskToReadyList+0xc8>)
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018670:	4b27      	ldr	r3, [pc, #156]	; (8018710 <prvAddNewTaskToReadyList+0xc4>)
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	2b01      	cmp	r3, #1
 8018676:	d110      	bne.n	801869a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018678:	f000 fcca 	bl	8019010 <prvInitialiseTaskLists>
 801867c:	e00d      	b.n	801869a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801867e:	4b26      	ldr	r3, [pc, #152]	; (8018718 <prvAddNewTaskToReadyList+0xcc>)
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d109      	bne.n	801869a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018686:	4b23      	ldr	r3, [pc, #140]	; (8018714 <prvAddNewTaskToReadyList+0xc8>)
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018690:	429a      	cmp	r2, r3
 8018692:	d802      	bhi.n	801869a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018694:	4a1f      	ldr	r2, [pc, #124]	; (8018714 <prvAddNewTaskToReadyList+0xc8>)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801869a:	4b20      	ldr	r3, [pc, #128]	; (801871c <prvAddNewTaskToReadyList+0xd0>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	3301      	adds	r3, #1
 80186a0:	4a1e      	ldr	r2, [pc, #120]	; (801871c <prvAddNewTaskToReadyList+0xd0>)
 80186a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80186a4:	4b1d      	ldr	r3, [pc, #116]	; (801871c <prvAddNewTaskToReadyList+0xd0>)
 80186a6:	681a      	ldr	r2, [r3, #0]
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186b0:	4b1b      	ldr	r3, [pc, #108]	; (8018720 <prvAddNewTaskToReadyList+0xd4>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	429a      	cmp	r2, r3
 80186b6:	d903      	bls.n	80186c0 <prvAddNewTaskToReadyList+0x74>
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186bc:	4a18      	ldr	r2, [pc, #96]	; (8018720 <prvAddNewTaskToReadyList+0xd4>)
 80186be:	6013      	str	r3, [r2, #0]
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186c4:	4613      	mov	r3, r2
 80186c6:	009b      	lsls	r3, r3, #2
 80186c8:	4413      	add	r3, r2
 80186ca:	009b      	lsls	r3, r3, #2
 80186cc:	4a15      	ldr	r2, [pc, #84]	; (8018724 <prvAddNewTaskToReadyList+0xd8>)
 80186ce:	441a      	add	r2, r3
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	3304      	adds	r3, #4
 80186d4:	4619      	mov	r1, r3
 80186d6:	4610      	mov	r0, r2
 80186d8:	f7ff f913 	bl	8017902 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80186dc:	f001 fb1a 	bl	8019d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80186e0:	4b0d      	ldr	r3, [pc, #52]	; (8018718 <prvAddNewTaskToReadyList+0xcc>)
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d00e      	beq.n	8018706 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80186e8:	4b0a      	ldr	r3, [pc, #40]	; (8018714 <prvAddNewTaskToReadyList+0xc8>)
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186f2:	429a      	cmp	r2, r3
 80186f4:	d207      	bcs.n	8018706 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80186f6:	4b0c      	ldr	r3, [pc, #48]	; (8018728 <prvAddNewTaskToReadyList+0xdc>)
 80186f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186fc:	601a      	str	r2, [r3, #0]
 80186fe:	f3bf 8f4f 	dsb	sy
 8018702:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018706:	bf00      	nop
 8018708:	3708      	adds	r7, #8
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}
 801870e:	bf00      	nop
 8018710:	24002bec 	.word	0x24002bec
 8018714:	24002718 	.word	0x24002718
 8018718:	24002bf8 	.word	0x24002bf8
 801871c:	24002c08 	.word	0x24002c08
 8018720:	24002bf4 	.word	0x24002bf4
 8018724:	2400271c 	.word	0x2400271c
 8018728:	e000ed04 	.word	0xe000ed04

0801872c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801872c:	b580      	push	{r7, lr}
 801872e:	b084      	sub	sp, #16
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018734:	2300      	movs	r3, #0
 8018736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d017      	beq.n	801876e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801873e:	4b13      	ldr	r3, [pc, #76]	; (801878c <vTaskDelay+0x60>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d00a      	beq.n	801875c <vTaskDelay+0x30>
	__asm volatile
 8018746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801874a:	f383 8811 	msr	BASEPRI, r3
 801874e:	f3bf 8f6f 	isb	sy
 8018752:	f3bf 8f4f 	dsb	sy
 8018756:	60bb      	str	r3, [r7, #8]
}
 8018758:	bf00      	nop
 801875a:	e7fe      	b.n	801875a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801875c:	f000 f880 	bl	8018860 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018760:	2100      	movs	r1, #0
 8018762:	6878      	ldr	r0, [r7, #4]
 8018764:	f000 fdb6 	bl	80192d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018768:	f000 f888 	bl	801887c <xTaskResumeAll>
 801876c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d107      	bne.n	8018784 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018774:	4b06      	ldr	r3, [pc, #24]	; (8018790 <vTaskDelay+0x64>)
 8018776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801877a:	601a      	str	r2, [r3, #0]
 801877c:	f3bf 8f4f 	dsb	sy
 8018780:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018784:	bf00      	nop
 8018786:	3710      	adds	r7, #16
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}
 801878c:	24002c14 	.word	0x24002c14
 8018790:	e000ed04 	.word	0xe000ed04

08018794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b08a      	sub	sp, #40	; 0x28
 8018798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801879a:	2300      	movs	r3, #0
 801879c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801879e:	2300      	movs	r3, #0
 80187a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80187a2:	463a      	mov	r2, r7
 80187a4:	1d39      	adds	r1, r7, #4
 80187a6:	f107 0308 	add.w	r3, r7, #8
 80187aa:	4618      	mov	r0, r3
 80187ac:	f7fe fddc 	bl	8017368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80187b0:	6839      	ldr	r1, [r7, #0]
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	68ba      	ldr	r2, [r7, #8]
 80187b6:	9202      	str	r2, [sp, #8]
 80187b8:	9301      	str	r3, [sp, #4]
 80187ba:	2300      	movs	r3, #0
 80187bc:	9300      	str	r3, [sp, #0]
 80187be:	2300      	movs	r3, #0
 80187c0:	460a      	mov	r2, r1
 80187c2:	4921      	ldr	r1, [pc, #132]	; (8018848 <vTaskStartScheduler+0xb4>)
 80187c4:	4821      	ldr	r0, [pc, #132]	; (801884c <vTaskStartScheduler+0xb8>)
 80187c6:	f7ff fe0f 	bl	80183e8 <xTaskCreateStatic>
 80187ca:	4603      	mov	r3, r0
 80187cc:	4a20      	ldr	r2, [pc, #128]	; (8018850 <vTaskStartScheduler+0xbc>)
 80187ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80187d0:	4b1f      	ldr	r3, [pc, #124]	; (8018850 <vTaskStartScheduler+0xbc>)
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d002      	beq.n	80187de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80187d8:	2301      	movs	r3, #1
 80187da:	617b      	str	r3, [r7, #20]
 80187dc:	e001      	b.n	80187e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80187de:	2300      	movs	r3, #0
 80187e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80187e2:	697b      	ldr	r3, [r7, #20]
 80187e4:	2b01      	cmp	r3, #1
 80187e6:	d102      	bne.n	80187ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80187e8:	f000 fdc8 	bl	801937c <xTimerCreateTimerTask>
 80187ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80187ee:	697b      	ldr	r3, [r7, #20]
 80187f0:	2b01      	cmp	r3, #1
 80187f2:	d116      	bne.n	8018822 <vTaskStartScheduler+0x8e>
	__asm volatile
 80187f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187f8:	f383 8811 	msr	BASEPRI, r3
 80187fc:	f3bf 8f6f 	isb	sy
 8018800:	f3bf 8f4f 	dsb	sy
 8018804:	613b      	str	r3, [r7, #16]
}
 8018806:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018808:	4b12      	ldr	r3, [pc, #72]	; (8018854 <vTaskStartScheduler+0xc0>)
 801880a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801880e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018810:	4b11      	ldr	r3, [pc, #68]	; (8018858 <vTaskStartScheduler+0xc4>)
 8018812:	2201      	movs	r2, #1
 8018814:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018816:	4b11      	ldr	r3, [pc, #68]	; (801885c <vTaskStartScheduler+0xc8>)
 8018818:	2200      	movs	r2, #0
 801881a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801881c:	f001 f9a8 	bl	8019b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018820:	e00e      	b.n	8018840 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018822:	697b      	ldr	r3, [r7, #20]
 8018824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018828:	d10a      	bne.n	8018840 <vTaskStartScheduler+0xac>
	__asm volatile
 801882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801882e:	f383 8811 	msr	BASEPRI, r3
 8018832:	f3bf 8f6f 	isb	sy
 8018836:	f3bf 8f4f 	dsb	sy
 801883a:	60fb      	str	r3, [r7, #12]
}
 801883c:	bf00      	nop
 801883e:	e7fe      	b.n	801883e <vTaskStartScheduler+0xaa>
}
 8018840:	bf00      	nop
 8018842:	3718      	adds	r7, #24
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}
 8018848:	0801afb0 	.word	0x0801afb0
 801884c:	08018fe1 	.word	0x08018fe1
 8018850:	24002c10 	.word	0x24002c10
 8018854:	24002c0c 	.word	0x24002c0c
 8018858:	24002bf8 	.word	0x24002bf8
 801885c:	24002bf0 	.word	0x24002bf0

08018860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018860:	b480      	push	{r7}
 8018862:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018864:	4b04      	ldr	r3, [pc, #16]	; (8018878 <vTaskSuspendAll+0x18>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	3301      	adds	r3, #1
 801886a:	4a03      	ldr	r2, [pc, #12]	; (8018878 <vTaskSuspendAll+0x18>)
 801886c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801886e:	bf00      	nop
 8018870:	46bd      	mov	sp, r7
 8018872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018876:	4770      	bx	lr
 8018878:	24002c14 	.word	0x24002c14

0801887c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b084      	sub	sp, #16
 8018880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018882:	2300      	movs	r3, #0
 8018884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018886:	2300      	movs	r3, #0
 8018888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801888a:	4b42      	ldr	r3, [pc, #264]	; (8018994 <xTaskResumeAll+0x118>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d10a      	bne.n	80188a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8018892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018896:	f383 8811 	msr	BASEPRI, r3
 801889a:	f3bf 8f6f 	isb	sy
 801889e:	f3bf 8f4f 	dsb	sy
 80188a2:	603b      	str	r3, [r7, #0]
}
 80188a4:	bf00      	nop
 80188a6:	e7fe      	b.n	80188a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80188a8:	f001 fa04 	bl	8019cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80188ac:	4b39      	ldr	r3, [pc, #228]	; (8018994 <xTaskResumeAll+0x118>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	3b01      	subs	r3, #1
 80188b2:	4a38      	ldr	r2, [pc, #224]	; (8018994 <xTaskResumeAll+0x118>)
 80188b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80188b6:	4b37      	ldr	r3, [pc, #220]	; (8018994 <xTaskResumeAll+0x118>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d162      	bne.n	8018984 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80188be:	4b36      	ldr	r3, [pc, #216]	; (8018998 <xTaskResumeAll+0x11c>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d05e      	beq.n	8018984 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80188c6:	e02f      	b.n	8018928 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188c8:	4b34      	ldr	r3, [pc, #208]	; (801899c <xTaskResumeAll+0x120>)
 80188ca:	68db      	ldr	r3, [r3, #12]
 80188cc:	68db      	ldr	r3, [r3, #12]
 80188ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	3318      	adds	r3, #24
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7ff f871 	bl	80179bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	3304      	adds	r3, #4
 80188de:	4618      	mov	r0, r3
 80188e0:	f7ff f86c 	bl	80179bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188e8:	4b2d      	ldr	r3, [pc, #180]	; (80189a0 <xTaskResumeAll+0x124>)
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	429a      	cmp	r2, r3
 80188ee:	d903      	bls.n	80188f8 <xTaskResumeAll+0x7c>
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188f4:	4a2a      	ldr	r2, [pc, #168]	; (80189a0 <xTaskResumeAll+0x124>)
 80188f6:	6013      	str	r3, [r2, #0]
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188fc:	4613      	mov	r3, r2
 80188fe:	009b      	lsls	r3, r3, #2
 8018900:	4413      	add	r3, r2
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	4a27      	ldr	r2, [pc, #156]	; (80189a4 <xTaskResumeAll+0x128>)
 8018906:	441a      	add	r2, r3
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	3304      	adds	r3, #4
 801890c:	4619      	mov	r1, r3
 801890e:	4610      	mov	r0, r2
 8018910:	f7fe fff7 	bl	8017902 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018918:	4b23      	ldr	r3, [pc, #140]	; (80189a8 <xTaskResumeAll+0x12c>)
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801891e:	429a      	cmp	r2, r3
 8018920:	d302      	bcc.n	8018928 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018922:	4b22      	ldr	r3, [pc, #136]	; (80189ac <xTaskResumeAll+0x130>)
 8018924:	2201      	movs	r2, #1
 8018926:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018928:	4b1c      	ldr	r3, [pc, #112]	; (801899c <xTaskResumeAll+0x120>)
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d1cb      	bne.n	80188c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d001      	beq.n	801893a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018936:	f000 fc09 	bl	801914c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801893a:	4b1d      	ldr	r3, [pc, #116]	; (80189b0 <xTaskResumeAll+0x134>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d010      	beq.n	8018968 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018946:	f000 f847 	bl	80189d8 <xTaskIncrementTick>
 801894a:	4603      	mov	r3, r0
 801894c:	2b00      	cmp	r3, #0
 801894e:	d002      	beq.n	8018956 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018950:	4b16      	ldr	r3, [pc, #88]	; (80189ac <xTaskResumeAll+0x130>)
 8018952:	2201      	movs	r2, #1
 8018954:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	3b01      	subs	r3, #1
 801895a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d1f1      	bne.n	8018946 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018962:	4b13      	ldr	r3, [pc, #76]	; (80189b0 <xTaskResumeAll+0x134>)
 8018964:	2200      	movs	r2, #0
 8018966:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018968:	4b10      	ldr	r3, [pc, #64]	; (80189ac <xTaskResumeAll+0x130>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d009      	beq.n	8018984 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018970:	2301      	movs	r3, #1
 8018972:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018974:	4b0f      	ldr	r3, [pc, #60]	; (80189b4 <xTaskResumeAll+0x138>)
 8018976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801897a:	601a      	str	r2, [r3, #0]
 801897c:	f3bf 8f4f 	dsb	sy
 8018980:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018984:	f001 f9c6 	bl	8019d14 <vPortExitCritical>

	return xAlreadyYielded;
 8018988:	68bb      	ldr	r3, [r7, #8]
}
 801898a:	4618      	mov	r0, r3
 801898c:	3710      	adds	r7, #16
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}
 8018992:	bf00      	nop
 8018994:	24002c14 	.word	0x24002c14
 8018998:	24002bec 	.word	0x24002bec
 801899c:	24002bac 	.word	0x24002bac
 80189a0:	24002bf4 	.word	0x24002bf4
 80189a4:	2400271c 	.word	0x2400271c
 80189a8:	24002718 	.word	0x24002718
 80189ac:	24002c00 	.word	0x24002c00
 80189b0:	24002bfc 	.word	0x24002bfc
 80189b4:	e000ed04 	.word	0xe000ed04

080189b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80189b8:	b480      	push	{r7}
 80189ba:	b083      	sub	sp, #12
 80189bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80189be:	4b05      	ldr	r3, [pc, #20]	; (80189d4 <xTaskGetTickCount+0x1c>)
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80189c4:	687b      	ldr	r3, [r7, #4]
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	370c      	adds	r7, #12
 80189ca:	46bd      	mov	sp, r7
 80189cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d0:	4770      	bx	lr
 80189d2:	bf00      	nop
 80189d4:	24002bf0 	.word	0x24002bf0

080189d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b086      	sub	sp, #24
 80189dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80189de:	2300      	movs	r3, #0
 80189e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80189e2:	4b53      	ldr	r3, [pc, #332]	; (8018b30 <xTaskIncrementTick+0x158>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	f040 8095 	bne.w	8018b16 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80189ec:	4b51      	ldr	r3, [pc, #324]	; (8018b34 <xTaskIncrementTick+0x15c>)
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	3301      	adds	r3, #1
 80189f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80189f4:	4a4f      	ldr	r2, [pc, #316]	; (8018b34 <xTaskIncrementTick+0x15c>)
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80189fa:	693b      	ldr	r3, [r7, #16]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d120      	bne.n	8018a42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018a00:	4b4d      	ldr	r3, [pc, #308]	; (8018b38 <xTaskIncrementTick+0x160>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d00a      	beq.n	8018a20 <xTaskIncrementTick+0x48>
	__asm volatile
 8018a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a0e:	f383 8811 	msr	BASEPRI, r3
 8018a12:	f3bf 8f6f 	isb	sy
 8018a16:	f3bf 8f4f 	dsb	sy
 8018a1a:	603b      	str	r3, [r7, #0]
}
 8018a1c:	bf00      	nop
 8018a1e:	e7fe      	b.n	8018a1e <xTaskIncrementTick+0x46>
 8018a20:	4b45      	ldr	r3, [pc, #276]	; (8018b38 <xTaskIncrementTick+0x160>)
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	60fb      	str	r3, [r7, #12]
 8018a26:	4b45      	ldr	r3, [pc, #276]	; (8018b3c <xTaskIncrementTick+0x164>)
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	4a43      	ldr	r2, [pc, #268]	; (8018b38 <xTaskIncrementTick+0x160>)
 8018a2c:	6013      	str	r3, [r2, #0]
 8018a2e:	4a43      	ldr	r2, [pc, #268]	; (8018b3c <xTaskIncrementTick+0x164>)
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	6013      	str	r3, [r2, #0]
 8018a34:	4b42      	ldr	r3, [pc, #264]	; (8018b40 <xTaskIncrementTick+0x168>)
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	3301      	adds	r3, #1
 8018a3a:	4a41      	ldr	r2, [pc, #260]	; (8018b40 <xTaskIncrementTick+0x168>)
 8018a3c:	6013      	str	r3, [r2, #0]
 8018a3e:	f000 fb85 	bl	801914c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018a42:	4b40      	ldr	r3, [pc, #256]	; (8018b44 <xTaskIncrementTick+0x16c>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	693a      	ldr	r2, [r7, #16]
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	d349      	bcc.n	8018ae0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018a4c:	4b3a      	ldr	r3, [pc, #232]	; (8018b38 <xTaskIncrementTick+0x160>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d104      	bne.n	8018a60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a56:	4b3b      	ldr	r3, [pc, #236]	; (8018b44 <xTaskIncrementTick+0x16c>)
 8018a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018a5c:	601a      	str	r2, [r3, #0]
					break;
 8018a5e:	e03f      	b.n	8018ae0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a60:	4b35      	ldr	r3, [pc, #212]	; (8018b38 <xTaskIncrementTick+0x160>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	68db      	ldr	r3, [r3, #12]
 8018a66:	68db      	ldr	r3, [r3, #12]
 8018a68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018a6a:	68bb      	ldr	r3, [r7, #8]
 8018a6c:	685b      	ldr	r3, [r3, #4]
 8018a6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018a70:	693a      	ldr	r2, [r7, #16]
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	429a      	cmp	r2, r3
 8018a76:	d203      	bcs.n	8018a80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018a78:	4a32      	ldr	r2, [pc, #200]	; (8018b44 <xTaskIncrementTick+0x16c>)
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018a7e:	e02f      	b.n	8018ae0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	3304      	adds	r3, #4
 8018a84:	4618      	mov	r0, r3
 8018a86:	f7fe ff99 	bl	80179bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d004      	beq.n	8018a9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018a92:	68bb      	ldr	r3, [r7, #8]
 8018a94:	3318      	adds	r3, #24
 8018a96:	4618      	mov	r0, r3
 8018a98:	f7fe ff90 	bl	80179bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018a9c:	68bb      	ldr	r3, [r7, #8]
 8018a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018aa0:	4b29      	ldr	r3, [pc, #164]	; (8018b48 <xTaskIncrementTick+0x170>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	429a      	cmp	r2, r3
 8018aa6:	d903      	bls.n	8018ab0 <xTaskIncrementTick+0xd8>
 8018aa8:	68bb      	ldr	r3, [r7, #8]
 8018aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aac:	4a26      	ldr	r2, [pc, #152]	; (8018b48 <xTaskIncrementTick+0x170>)
 8018aae:	6013      	str	r3, [r2, #0]
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ab4:	4613      	mov	r3, r2
 8018ab6:	009b      	lsls	r3, r3, #2
 8018ab8:	4413      	add	r3, r2
 8018aba:	009b      	lsls	r3, r3, #2
 8018abc:	4a23      	ldr	r2, [pc, #140]	; (8018b4c <xTaskIncrementTick+0x174>)
 8018abe:	441a      	add	r2, r3
 8018ac0:	68bb      	ldr	r3, [r7, #8]
 8018ac2:	3304      	adds	r3, #4
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	4610      	mov	r0, r2
 8018ac8:	f7fe ff1b 	bl	8017902 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ad0:	4b1f      	ldr	r3, [pc, #124]	; (8018b50 <xTaskIncrementTick+0x178>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	d3b8      	bcc.n	8018a4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018ada:	2301      	movs	r3, #1
 8018adc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018ade:	e7b5      	b.n	8018a4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018ae0:	4b1b      	ldr	r3, [pc, #108]	; (8018b50 <xTaskIncrementTick+0x178>)
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ae6:	4919      	ldr	r1, [pc, #100]	; (8018b4c <xTaskIncrementTick+0x174>)
 8018ae8:	4613      	mov	r3, r2
 8018aea:	009b      	lsls	r3, r3, #2
 8018aec:	4413      	add	r3, r2
 8018aee:	009b      	lsls	r3, r3, #2
 8018af0:	440b      	add	r3, r1
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	2b01      	cmp	r3, #1
 8018af6:	d901      	bls.n	8018afc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018af8:	2301      	movs	r3, #1
 8018afa:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018afc:	4b15      	ldr	r3, [pc, #84]	; (8018b54 <xTaskIncrementTick+0x17c>)
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d101      	bne.n	8018b08 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018b04:	f7e9 fcae 	bl	8002464 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018b08:	4b13      	ldr	r3, [pc, #76]	; (8018b58 <xTaskIncrementTick+0x180>)
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d009      	beq.n	8018b24 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018b10:	2301      	movs	r3, #1
 8018b12:	617b      	str	r3, [r7, #20]
 8018b14:	e006      	b.n	8018b24 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018b16:	4b0f      	ldr	r3, [pc, #60]	; (8018b54 <xTaskIncrementTick+0x17c>)
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	3301      	adds	r3, #1
 8018b1c:	4a0d      	ldr	r2, [pc, #52]	; (8018b54 <xTaskIncrementTick+0x17c>)
 8018b1e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018b20:	f7e9 fca0 	bl	8002464 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018b24:	697b      	ldr	r3, [r7, #20]
}
 8018b26:	4618      	mov	r0, r3
 8018b28:	3718      	adds	r7, #24
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}
 8018b2e:	bf00      	nop
 8018b30:	24002c14 	.word	0x24002c14
 8018b34:	24002bf0 	.word	0x24002bf0
 8018b38:	24002ba4 	.word	0x24002ba4
 8018b3c:	24002ba8 	.word	0x24002ba8
 8018b40:	24002c04 	.word	0x24002c04
 8018b44:	24002c0c 	.word	0x24002c0c
 8018b48:	24002bf4 	.word	0x24002bf4
 8018b4c:	2400271c 	.word	0x2400271c
 8018b50:	24002718 	.word	0x24002718
 8018b54:	24002bfc 	.word	0x24002bfc
 8018b58:	24002c00 	.word	0x24002c00

08018b5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b084      	sub	sp, #16
 8018b60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018b62:	4b2f      	ldr	r3, [pc, #188]	; (8018c20 <vTaskSwitchContext+0xc4>)
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d003      	beq.n	8018b72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018b6a:	4b2e      	ldr	r3, [pc, #184]	; (8018c24 <vTaskSwitchContext+0xc8>)
 8018b6c:	2201      	movs	r2, #1
 8018b6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018b70:	e052      	b.n	8018c18 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018b72:	4b2c      	ldr	r3, [pc, #176]	; (8018c24 <vTaskSwitchContext+0xc8>)
 8018b74:	2200      	movs	r2, #0
 8018b76:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018b78:	4b2b      	ldr	r3, [pc, #172]	; (8018c28 <vTaskSwitchContext+0xcc>)
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	681a      	ldr	r2, [r3, #0]
 8018b7e:	4b2a      	ldr	r3, [pc, #168]	; (8018c28 <vTaskSwitchContext+0xcc>)
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b84:	429a      	cmp	r2, r3
 8018b86:	d808      	bhi.n	8018b9a <vTaskSwitchContext+0x3e>
 8018b88:	4b27      	ldr	r3, [pc, #156]	; (8018c28 <vTaskSwitchContext+0xcc>)
 8018b8a:	681a      	ldr	r2, [r3, #0]
 8018b8c:	4b26      	ldr	r3, [pc, #152]	; (8018c28 <vTaskSwitchContext+0xcc>)
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	3334      	adds	r3, #52	; 0x34
 8018b92:	4619      	mov	r1, r3
 8018b94:	4610      	mov	r0, r2
 8018b96:	f7e9 fc73 	bl	8002480 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b9a:	4b24      	ldr	r3, [pc, #144]	; (8018c2c <vTaskSwitchContext+0xd0>)
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	60fb      	str	r3, [r7, #12]
 8018ba0:	e010      	b.n	8018bc4 <vTaskSwitchContext+0x68>
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d10a      	bne.n	8018bbe <vTaskSwitchContext+0x62>
	__asm volatile
 8018ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bac:	f383 8811 	msr	BASEPRI, r3
 8018bb0:	f3bf 8f6f 	isb	sy
 8018bb4:	f3bf 8f4f 	dsb	sy
 8018bb8:	607b      	str	r3, [r7, #4]
}
 8018bba:	bf00      	nop
 8018bbc:	e7fe      	b.n	8018bbc <vTaskSwitchContext+0x60>
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	3b01      	subs	r3, #1
 8018bc2:	60fb      	str	r3, [r7, #12]
 8018bc4:	491a      	ldr	r1, [pc, #104]	; (8018c30 <vTaskSwitchContext+0xd4>)
 8018bc6:	68fa      	ldr	r2, [r7, #12]
 8018bc8:	4613      	mov	r3, r2
 8018bca:	009b      	lsls	r3, r3, #2
 8018bcc:	4413      	add	r3, r2
 8018bce:	009b      	lsls	r3, r3, #2
 8018bd0:	440b      	add	r3, r1
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d0e4      	beq.n	8018ba2 <vTaskSwitchContext+0x46>
 8018bd8:	68fa      	ldr	r2, [r7, #12]
 8018bda:	4613      	mov	r3, r2
 8018bdc:	009b      	lsls	r3, r3, #2
 8018bde:	4413      	add	r3, r2
 8018be0:	009b      	lsls	r3, r3, #2
 8018be2:	4a13      	ldr	r2, [pc, #76]	; (8018c30 <vTaskSwitchContext+0xd4>)
 8018be4:	4413      	add	r3, r2
 8018be6:	60bb      	str	r3, [r7, #8]
 8018be8:	68bb      	ldr	r3, [r7, #8]
 8018bea:	685b      	ldr	r3, [r3, #4]
 8018bec:	685a      	ldr	r2, [r3, #4]
 8018bee:	68bb      	ldr	r3, [r7, #8]
 8018bf0:	605a      	str	r2, [r3, #4]
 8018bf2:	68bb      	ldr	r3, [r7, #8]
 8018bf4:	685a      	ldr	r2, [r3, #4]
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	3308      	adds	r3, #8
 8018bfa:	429a      	cmp	r2, r3
 8018bfc:	d104      	bne.n	8018c08 <vTaskSwitchContext+0xac>
 8018bfe:	68bb      	ldr	r3, [r7, #8]
 8018c00:	685b      	ldr	r3, [r3, #4]
 8018c02:	685a      	ldr	r2, [r3, #4]
 8018c04:	68bb      	ldr	r3, [r7, #8]
 8018c06:	605a      	str	r2, [r3, #4]
 8018c08:	68bb      	ldr	r3, [r7, #8]
 8018c0a:	685b      	ldr	r3, [r3, #4]
 8018c0c:	68db      	ldr	r3, [r3, #12]
 8018c0e:	4a06      	ldr	r2, [pc, #24]	; (8018c28 <vTaskSwitchContext+0xcc>)
 8018c10:	6013      	str	r3, [r2, #0]
 8018c12:	4a06      	ldr	r2, [pc, #24]	; (8018c2c <vTaskSwitchContext+0xd0>)
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	6013      	str	r3, [r2, #0]
}
 8018c18:	bf00      	nop
 8018c1a:	3710      	adds	r7, #16
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd80      	pop	{r7, pc}
 8018c20:	24002c14 	.word	0x24002c14
 8018c24:	24002c00 	.word	0x24002c00
 8018c28:	24002718 	.word	0x24002718
 8018c2c:	24002bf4 	.word	0x24002bf4
 8018c30:	2400271c 	.word	0x2400271c

08018c34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b084      	sub	sp, #16
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
 8018c3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d10a      	bne.n	8018c5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c48:	f383 8811 	msr	BASEPRI, r3
 8018c4c:	f3bf 8f6f 	isb	sy
 8018c50:	f3bf 8f4f 	dsb	sy
 8018c54:	60fb      	str	r3, [r7, #12]
}
 8018c56:	bf00      	nop
 8018c58:	e7fe      	b.n	8018c58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018c5a:	4b07      	ldr	r3, [pc, #28]	; (8018c78 <vTaskPlaceOnEventList+0x44>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	3318      	adds	r3, #24
 8018c60:	4619      	mov	r1, r3
 8018c62:	6878      	ldr	r0, [r7, #4]
 8018c64:	f7fe fe71 	bl	801794a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018c68:	2101      	movs	r1, #1
 8018c6a:	6838      	ldr	r0, [r7, #0]
 8018c6c:	f000 fb32 	bl	80192d4 <prvAddCurrentTaskToDelayedList>
}
 8018c70:	bf00      	nop
 8018c72:	3710      	adds	r7, #16
 8018c74:	46bd      	mov	sp, r7
 8018c76:	bd80      	pop	{r7, pc}
 8018c78:	24002718 	.word	0x24002718

08018c7c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b086      	sub	sp, #24
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	60f8      	str	r0, [r7, #12]
 8018c84:	60b9      	str	r1, [r7, #8]
 8018c86:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d10a      	bne.n	8018ca4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8018c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c92:	f383 8811 	msr	BASEPRI, r3
 8018c96:	f3bf 8f6f 	isb	sy
 8018c9a:	f3bf 8f4f 	dsb	sy
 8018c9e:	617b      	str	r3, [r7, #20]
}
 8018ca0:	bf00      	nop
 8018ca2:	e7fe      	b.n	8018ca2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018ca4:	4b11      	ldr	r3, [pc, #68]	; (8018cec <vTaskPlaceOnUnorderedEventList+0x70>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d10a      	bne.n	8018cc2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cb0:	f383 8811 	msr	BASEPRI, r3
 8018cb4:	f3bf 8f6f 	isb	sy
 8018cb8:	f3bf 8f4f 	dsb	sy
 8018cbc:	613b      	str	r3, [r7, #16]
}
 8018cbe:	bf00      	nop
 8018cc0:	e7fe      	b.n	8018cc0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018cc2:	4b0b      	ldr	r3, [pc, #44]	; (8018cf0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	68ba      	ldr	r2, [r7, #8]
 8018cc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018ccc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018cce:	4b08      	ldr	r3, [pc, #32]	; (8018cf0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	3318      	adds	r3, #24
 8018cd4:	4619      	mov	r1, r3
 8018cd6:	68f8      	ldr	r0, [r7, #12]
 8018cd8:	f7fe fe13 	bl	8017902 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018cdc:	2101      	movs	r1, #1
 8018cde:	6878      	ldr	r0, [r7, #4]
 8018ce0:	f000 faf8 	bl	80192d4 <prvAddCurrentTaskToDelayedList>
}
 8018ce4:	bf00      	nop
 8018ce6:	3718      	adds	r7, #24
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}
 8018cec:	24002c14 	.word	0x24002c14
 8018cf0:	24002718 	.word	0x24002718

08018cf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b086      	sub	sp, #24
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	60f8      	str	r0, [r7, #12]
 8018cfc:	60b9      	str	r1, [r7, #8]
 8018cfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d10a      	bne.n	8018d1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d0a:	f383 8811 	msr	BASEPRI, r3
 8018d0e:	f3bf 8f6f 	isb	sy
 8018d12:	f3bf 8f4f 	dsb	sy
 8018d16:	617b      	str	r3, [r7, #20]
}
 8018d18:	bf00      	nop
 8018d1a:	e7fe      	b.n	8018d1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018d1c:	4b0a      	ldr	r3, [pc, #40]	; (8018d48 <vTaskPlaceOnEventListRestricted+0x54>)
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	3318      	adds	r3, #24
 8018d22:	4619      	mov	r1, r3
 8018d24:	68f8      	ldr	r0, [r7, #12]
 8018d26:	f7fe fdec 	bl	8017902 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d002      	beq.n	8018d36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018d36:	6879      	ldr	r1, [r7, #4]
 8018d38:	68b8      	ldr	r0, [r7, #8]
 8018d3a:	f000 facb 	bl	80192d4 <prvAddCurrentTaskToDelayedList>
	}
 8018d3e:	bf00      	nop
 8018d40:	3718      	adds	r7, #24
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}
 8018d46:	bf00      	nop
 8018d48:	24002718 	.word	0x24002718

08018d4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b086      	sub	sp, #24
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	68db      	ldr	r3, [r3, #12]
 8018d58:	68db      	ldr	r3, [r3, #12]
 8018d5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018d5c:	693b      	ldr	r3, [r7, #16]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d10a      	bne.n	8018d78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d66:	f383 8811 	msr	BASEPRI, r3
 8018d6a:	f3bf 8f6f 	isb	sy
 8018d6e:	f3bf 8f4f 	dsb	sy
 8018d72:	60fb      	str	r3, [r7, #12]
}
 8018d74:	bf00      	nop
 8018d76:	e7fe      	b.n	8018d76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018d78:	693b      	ldr	r3, [r7, #16]
 8018d7a:	3318      	adds	r3, #24
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f7fe fe1d 	bl	80179bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018d82:	4b1e      	ldr	r3, [pc, #120]	; (8018dfc <xTaskRemoveFromEventList+0xb0>)
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d11d      	bne.n	8018dc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018d8a:	693b      	ldr	r3, [r7, #16]
 8018d8c:	3304      	adds	r3, #4
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f7fe fe14 	bl	80179bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018d94:	693b      	ldr	r3, [r7, #16]
 8018d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d98:	4b19      	ldr	r3, [pc, #100]	; (8018e00 <xTaskRemoveFromEventList+0xb4>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	d903      	bls.n	8018da8 <xTaskRemoveFromEventList+0x5c>
 8018da0:	693b      	ldr	r3, [r7, #16]
 8018da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018da4:	4a16      	ldr	r2, [pc, #88]	; (8018e00 <xTaskRemoveFromEventList+0xb4>)
 8018da6:	6013      	str	r3, [r2, #0]
 8018da8:	693b      	ldr	r3, [r7, #16]
 8018daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018dac:	4613      	mov	r3, r2
 8018dae:	009b      	lsls	r3, r3, #2
 8018db0:	4413      	add	r3, r2
 8018db2:	009b      	lsls	r3, r3, #2
 8018db4:	4a13      	ldr	r2, [pc, #76]	; (8018e04 <xTaskRemoveFromEventList+0xb8>)
 8018db6:	441a      	add	r2, r3
 8018db8:	693b      	ldr	r3, [r7, #16]
 8018dba:	3304      	adds	r3, #4
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	4610      	mov	r0, r2
 8018dc0:	f7fe fd9f 	bl	8017902 <vListInsertEnd>
 8018dc4:	e005      	b.n	8018dd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018dc6:	693b      	ldr	r3, [r7, #16]
 8018dc8:	3318      	adds	r3, #24
 8018dca:	4619      	mov	r1, r3
 8018dcc:	480e      	ldr	r0, [pc, #56]	; (8018e08 <xTaskRemoveFromEventList+0xbc>)
 8018dce:	f7fe fd98 	bl	8017902 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018dd6:	4b0d      	ldr	r3, [pc, #52]	; (8018e0c <xTaskRemoveFromEventList+0xc0>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d905      	bls.n	8018dec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018de0:	2301      	movs	r3, #1
 8018de2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018de4:	4b0a      	ldr	r3, [pc, #40]	; (8018e10 <xTaskRemoveFromEventList+0xc4>)
 8018de6:	2201      	movs	r2, #1
 8018de8:	601a      	str	r2, [r3, #0]
 8018dea:	e001      	b.n	8018df0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018dec:	2300      	movs	r3, #0
 8018dee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018df0:	697b      	ldr	r3, [r7, #20]
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	3718      	adds	r7, #24
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd80      	pop	{r7, pc}
 8018dfa:	bf00      	nop
 8018dfc:	24002c14 	.word	0x24002c14
 8018e00:	24002bf4 	.word	0x24002bf4
 8018e04:	2400271c 	.word	0x2400271c
 8018e08:	24002bac 	.word	0x24002bac
 8018e0c:	24002718 	.word	0x24002718
 8018e10:	24002c00 	.word	0x24002c00

08018e14 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b086      	sub	sp, #24
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
 8018e1c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018e1e:	4b29      	ldr	r3, [pc, #164]	; (8018ec4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d10a      	bne.n	8018e3c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e2a:	f383 8811 	msr	BASEPRI, r3
 8018e2e:	f3bf 8f6f 	isb	sy
 8018e32:	f3bf 8f4f 	dsb	sy
 8018e36:	613b      	str	r3, [r7, #16]
}
 8018e38:	bf00      	nop
 8018e3a:	e7fe      	b.n	8018e3a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018e3c:	683b      	ldr	r3, [r7, #0]
 8018e3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	68db      	ldr	r3, [r3, #12]
 8018e4a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018e4c:	697b      	ldr	r3, [r7, #20]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d10a      	bne.n	8018e68 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e56:	f383 8811 	msr	BASEPRI, r3
 8018e5a:	f3bf 8f6f 	isb	sy
 8018e5e:	f3bf 8f4f 	dsb	sy
 8018e62:	60fb      	str	r3, [r7, #12]
}
 8018e64:	bf00      	nop
 8018e66:	e7fe      	b.n	8018e66 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018e68:	6878      	ldr	r0, [r7, #4]
 8018e6a:	f7fe fda7 	bl	80179bc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018e6e:	697b      	ldr	r3, [r7, #20]
 8018e70:	3304      	adds	r3, #4
 8018e72:	4618      	mov	r0, r3
 8018e74:	f7fe fda2 	bl	80179bc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e7c:	4b12      	ldr	r3, [pc, #72]	; (8018ec8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	429a      	cmp	r2, r3
 8018e82:	d903      	bls.n	8018e8c <vTaskRemoveFromUnorderedEventList+0x78>
 8018e84:	697b      	ldr	r3, [r7, #20]
 8018e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e88:	4a0f      	ldr	r2, [pc, #60]	; (8018ec8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018e8a:	6013      	str	r3, [r2, #0]
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e90:	4613      	mov	r3, r2
 8018e92:	009b      	lsls	r3, r3, #2
 8018e94:	4413      	add	r3, r2
 8018e96:	009b      	lsls	r3, r3, #2
 8018e98:	4a0c      	ldr	r2, [pc, #48]	; (8018ecc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018e9a:	441a      	add	r2, r3
 8018e9c:	697b      	ldr	r3, [r7, #20]
 8018e9e:	3304      	adds	r3, #4
 8018ea0:	4619      	mov	r1, r3
 8018ea2:	4610      	mov	r0, r2
 8018ea4:	f7fe fd2d 	bl	8017902 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018ea8:	697b      	ldr	r3, [r7, #20]
 8018eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eac:	4b08      	ldr	r3, [pc, #32]	; (8018ed0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d902      	bls.n	8018ebc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018eb6:	4b07      	ldr	r3, [pc, #28]	; (8018ed4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018eb8:	2201      	movs	r2, #1
 8018eba:	601a      	str	r2, [r3, #0]
	}
}
 8018ebc:	bf00      	nop
 8018ebe:	3718      	adds	r7, #24
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	bd80      	pop	{r7, pc}
 8018ec4:	24002c14 	.word	0x24002c14
 8018ec8:	24002bf4 	.word	0x24002bf4
 8018ecc:	2400271c 	.word	0x2400271c
 8018ed0:	24002718 	.word	0x24002718
 8018ed4:	24002c00 	.word	0x24002c00

08018ed8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018ed8:	b480      	push	{r7}
 8018eda:	b083      	sub	sp, #12
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018ee0:	4b06      	ldr	r3, [pc, #24]	; (8018efc <vTaskInternalSetTimeOutState+0x24>)
 8018ee2:	681a      	ldr	r2, [r3, #0]
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018ee8:	4b05      	ldr	r3, [pc, #20]	; (8018f00 <vTaskInternalSetTimeOutState+0x28>)
 8018eea:	681a      	ldr	r2, [r3, #0]
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	605a      	str	r2, [r3, #4]
}
 8018ef0:	bf00      	nop
 8018ef2:	370c      	adds	r7, #12
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efa:	4770      	bx	lr
 8018efc:	24002c04 	.word	0x24002c04
 8018f00:	24002bf0 	.word	0x24002bf0

08018f04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b088      	sub	sp, #32
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
 8018f0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d10a      	bne.n	8018f2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f18:	f383 8811 	msr	BASEPRI, r3
 8018f1c:	f3bf 8f6f 	isb	sy
 8018f20:	f3bf 8f4f 	dsb	sy
 8018f24:	613b      	str	r3, [r7, #16]
}
 8018f26:	bf00      	nop
 8018f28:	e7fe      	b.n	8018f28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d10a      	bne.n	8018f46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f34:	f383 8811 	msr	BASEPRI, r3
 8018f38:	f3bf 8f6f 	isb	sy
 8018f3c:	f3bf 8f4f 	dsb	sy
 8018f40:	60fb      	str	r3, [r7, #12]
}
 8018f42:	bf00      	nop
 8018f44:	e7fe      	b.n	8018f44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018f46:	f000 feb5 	bl	8019cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018f4a:	4b1d      	ldr	r3, [pc, #116]	; (8018fc0 <xTaskCheckForTimeOut+0xbc>)
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	685b      	ldr	r3, [r3, #4]
 8018f54:	69ba      	ldr	r2, [r7, #24]
 8018f56:	1ad3      	subs	r3, r2, r3
 8018f58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f62:	d102      	bne.n	8018f6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018f64:	2300      	movs	r3, #0
 8018f66:	61fb      	str	r3, [r7, #28]
 8018f68:	e023      	b.n	8018fb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	681a      	ldr	r2, [r3, #0]
 8018f6e:	4b15      	ldr	r3, [pc, #84]	; (8018fc4 <xTaskCheckForTimeOut+0xc0>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d007      	beq.n	8018f86 <xTaskCheckForTimeOut+0x82>
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	685b      	ldr	r3, [r3, #4]
 8018f7a:	69ba      	ldr	r2, [r7, #24]
 8018f7c:	429a      	cmp	r2, r3
 8018f7e:	d302      	bcc.n	8018f86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018f80:	2301      	movs	r3, #1
 8018f82:	61fb      	str	r3, [r7, #28]
 8018f84:	e015      	b.n	8018fb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018f86:	683b      	ldr	r3, [r7, #0]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	697a      	ldr	r2, [r7, #20]
 8018f8c:	429a      	cmp	r2, r3
 8018f8e:	d20b      	bcs.n	8018fa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018f90:	683b      	ldr	r3, [r7, #0]
 8018f92:	681a      	ldr	r2, [r3, #0]
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	1ad2      	subs	r2, r2, r3
 8018f98:	683b      	ldr	r3, [r7, #0]
 8018f9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018f9c:	6878      	ldr	r0, [r7, #4]
 8018f9e:	f7ff ff9b 	bl	8018ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	61fb      	str	r3, [r7, #28]
 8018fa6:	e004      	b.n	8018fb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	2200      	movs	r2, #0
 8018fac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018fae:	2301      	movs	r3, #1
 8018fb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018fb2:	f000 feaf 	bl	8019d14 <vPortExitCritical>

	return xReturn;
 8018fb6:	69fb      	ldr	r3, [r7, #28]
}
 8018fb8:	4618      	mov	r0, r3
 8018fba:	3720      	adds	r7, #32
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}
 8018fc0:	24002bf0 	.word	0x24002bf0
 8018fc4:	24002c04 	.word	0x24002c04

08018fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018fc8:	b480      	push	{r7}
 8018fca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018fcc:	4b03      	ldr	r3, [pc, #12]	; (8018fdc <vTaskMissedYield+0x14>)
 8018fce:	2201      	movs	r2, #1
 8018fd0:	601a      	str	r2, [r3, #0]
}
 8018fd2:	bf00      	nop
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fda:	4770      	bx	lr
 8018fdc:	24002c00 	.word	0x24002c00

08018fe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b082      	sub	sp, #8
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018fe8:	f000 f852 	bl	8019090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018fec:	4b06      	ldr	r3, [pc, #24]	; (8019008 <prvIdleTask+0x28>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	2b01      	cmp	r3, #1
 8018ff2:	d9f9      	bls.n	8018fe8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018ff4:	4b05      	ldr	r3, [pc, #20]	; (801900c <prvIdleTask+0x2c>)
 8018ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ffa:	601a      	str	r2, [r3, #0]
 8018ffc:	f3bf 8f4f 	dsb	sy
 8019000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019004:	e7f0      	b.n	8018fe8 <prvIdleTask+0x8>
 8019006:	bf00      	nop
 8019008:	2400271c 	.word	0x2400271c
 801900c:	e000ed04 	.word	0xe000ed04

08019010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b082      	sub	sp, #8
 8019014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019016:	2300      	movs	r3, #0
 8019018:	607b      	str	r3, [r7, #4]
 801901a:	e00c      	b.n	8019036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801901c:	687a      	ldr	r2, [r7, #4]
 801901e:	4613      	mov	r3, r2
 8019020:	009b      	lsls	r3, r3, #2
 8019022:	4413      	add	r3, r2
 8019024:	009b      	lsls	r3, r3, #2
 8019026:	4a12      	ldr	r2, [pc, #72]	; (8019070 <prvInitialiseTaskLists+0x60>)
 8019028:	4413      	add	r3, r2
 801902a:	4618      	mov	r0, r3
 801902c:	f7fe fc3c 	bl	80178a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	3301      	adds	r3, #1
 8019034:	607b      	str	r3, [r7, #4]
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	2b37      	cmp	r3, #55	; 0x37
 801903a:	d9ef      	bls.n	801901c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801903c:	480d      	ldr	r0, [pc, #52]	; (8019074 <prvInitialiseTaskLists+0x64>)
 801903e:	f7fe fc33 	bl	80178a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019042:	480d      	ldr	r0, [pc, #52]	; (8019078 <prvInitialiseTaskLists+0x68>)
 8019044:	f7fe fc30 	bl	80178a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019048:	480c      	ldr	r0, [pc, #48]	; (801907c <prvInitialiseTaskLists+0x6c>)
 801904a:	f7fe fc2d 	bl	80178a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801904e:	480c      	ldr	r0, [pc, #48]	; (8019080 <prvInitialiseTaskLists+0x70>)
 8019050:	f7fe fc2a 	bl	80178a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019054:	480b      	ldr	r0, [pc, #44]	; (8019084 <prvInitialiseTaskLists+0x74>)
 8019056:	f7fe fc27 	bl	80178a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801905a:	4b0b      	ldr	r3, [pc, #44]	; (8019088 <prvInitialiseTaskLists+0x78>)
 801905c:	4a05      	ldr	r2, [pc, #20]	; (8019074 <prvInitialiseTaskLists+0x64>)
 801905e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019060:	4b0a      	ldr	r3, [pc, #40]	; (801908c <prvInitialiseTaskLists+0x7c>)
 8019062:	4a05      	ldr	r2, [pc, #20]	; (8019078 <prvInitialiseTaskLists+0x68>)
 8019064:	601a      	str	r2, [r3, #0]
}
 8019066:	bf00      	nop
 8019068:	3708      	adds	r7, #8
 801906a:	46bd      	mov	sp, r7
 801906c:	bd80      	pop	{r7, pc}
 801906e:	bf00      	nop
 8019070:	2400271c 	.word	0x2400271c
 8019074:	24002b7c 	.word	0x24002b7c
 8019078:	24002b90 	.word	0x24002b90
 801907c:	24002bac 	.word	0x24002bac
 8019080:	24002bc0 	.word	0x24002bc0
 8019084:	24002bd8 	.word	0x24002bd8
 8019088:	24002ba4 	.word	0x24002ba4
 801908c:	24002ba8 	.word	0x24002ba8

08019090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b082      	sub	sp, #8
 8019094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019096:	e019      	b.n	80190cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019098:	f000 fe0c 	bl	8019cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801909c:	4b10      	ldr	r3, [pc, #64]	; (80190e0 <prvCheckTasksWaitingTermination+0x50>)
 801909e:	68db      	ldr	r3, [r3, #12]
 80190a0:	68db      	ldr	r3, [r3, #12]
 80190a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	3304      	adds	r3, #4
 80190a8:	4618      	mov	r0, r3
 80190aa:	f7fe fc87 	bl	80179bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80190ae:	4b0d      	ldr	r3, [pc, #52]	; (80190e4 <prvCheckTasksWaitingTermination+0x54>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	3b01      	subs	r3, #1
 80190b4:	4a0b      	ldr	r2, [pc, #44]	; (80190e4 <prvCheckTasksWaitingTermination+0x54>)
 80190b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80190b8:	4b0b      	ldr	r3, [pc, #44]	; (80190e8 <prvCheckTasksWaitingTermination+0x58>)
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	3b01      	subs	r3, #1
 80190be:	4a0a      	ldr	r2, [pc, #40]	; (80190e8 <prvCheckTasksWaitingTermination+0x58>)
 80190c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80190c2:	f000 fe27 	bl	8019d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80190c6:	6878      	ldr	r0, [r7, #4]
 80190c8:	f000 f810 	bl	80190ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80190cc:	4b06      	ldr	r3, [pc, #24]	; (80190e8 <prvCheckTasksWaitingTermination+0x58>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d1e1      	bne.n	8019098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80190d4:	bf00      	nop
 80190d6:	bf00      	nop
 80190d8:	3708      	adds	r7, #8
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd80      	pop	{r7, pc}
 80190de:	bf00      	nop
 80190e0:	24002bc0 	.word	0x24002bc0
 80190e4:	24002bec 	.word	0x24002bec
 80190e8:	24002bd4 	.word	0x24002bd4

080190ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b084      	sub	sp, #16
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d108      	bne.n	8019110 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019102:	4618      	mov	r0, r3
 8019104:	f000 ffc4 	bl	801a090 <vPortFree>
				vPortFree( pxTCB );
 8019108:	6878      	ldr	r0, [r7, #4]
 801910a:	f000 ffc1 	bl	801a090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801910e:	e018      	b.n	8019142 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019116:	2b01      	cmp	r3, #1
 8019118:	d103      	bne.n	8019122 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801911a:	6878      	ldr	r0, [r7, #4]
 801911c:	f000 ffb8 	bl	801a090 <vPortFree>
	}
 8019120:	e00f      	b.n	8019142 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019128:	2b02      	cmp	r3, #2
 801912a:	d00a      	beq.n	8019142 <prvDeleteTCB+0x56>
	__asm volatile
 801912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019130:	f383 8811 	msr	BASEPRI, r3
 8019134:	f3bf 8f6f 	isb	sy
 8019138:	f3bf 8f4f 	dsb	sy
 801913c:	60fb      	str	r3, [r7, #12]
}
 801913e:	bf00      	nop
 8019140:	e7fe      	b.n	8019140 <prvDeleteTCB+0x54>
	}
 8019142:	bf00      	nop
 8019144:	3710      	adds	r7, #16
 8019146:	46bd      	mov	sp, r7
 8019148:	bd80      	pop	{r7, pc}
	...

0801914c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801914c:	b480      	push	{r7}
 801914e:	b083      	sub	sp, #12
 8019150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019152:	4b0c      	ldr	r3, [pc, #48]	; (8019184 <prvResetNextTaskUnblockTime+0x38>)
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d104      	bne.n	8019166 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801915c:	4b0a      	ldr	r3, [pc, #40]	; (8019188 <prvResetNextTaskUnblockTime+0x3c>)
 801915e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019162:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019164:	e008      	b.n	8019178 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019166:	4b07      	ldr	r3, [pc, #28]	; (8019184 <prvResetNextTaskUnblockTime+0x38>)
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	68db      	ldr	r3, [r3, #12]
 801916c:	68db      	ldr	r3, [r3, #12]
 801916e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	685b      	ldr	r3, [r3, #4]
 8019174:	4a04      	ldr	r2, [pc, #16]	; (8019188 <prvResetNextTaskUnblockTime+0x3c>)
 8019176:	6013      	str	r3, [r2, #0]
}
 8019178:	bf00      	nop
 801917a:	370c      	adds	r7, #12
 801917c:	46bd      	mov	sp, r7
 801917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019182:	4770      	bx	lr
 8019184:	24002ba4 	.word	0x24002ba4
 8019188:	24002c0c 	.word	0x24002c0c

0801918c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801918c:	b480      	push	{r7}
 801918e:	b083      	sub	sp, #12
 8019190:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8019192:	4b0b      	ldr	r3, [pc, #44]	; (80191c0 <xTaskGetSchedulerState+0x34>)
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d102      	bne.n	80191a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801919a:	2301      	movs	r3, #1
 801919c:	607b      	str	r3, [r7, #4]
 801919e:	e008      	b.n	80191b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80191a0:	4b08      	ldr	r3, [pc, #32]	; (80191c4 <xTaskGetSchedulerState+0x38>)
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d102      	bne.n	80191ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80191a8:	2302      	movs	r3, #2
 80191aa:	607b      	str	r3, [r7, #4]
 80191ac:	e001      	b.n	80191b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80191ae:	2300      	movs	r3, #0
 80191b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80191b2:	687b      	ldr	r3, [r7, #4]
	}
 80191b4:	4618      	mov	r0, r3
 80191b6:	370c      	adds	r7, #12
 80191b8:	46bd      	mov	sp, r7
 80191ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191be:	4770      	bx	lr
 80191c0:	24002bf8 	.word	0x24002bf8
 80191c4:	24002c14 	.word	0x24002c14

080191c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b086      	sub	sp, #24
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80191d4:	2300      	movs	r3, #0
 80191d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d056      	beq.n	801928c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80191de:	4b2e      	ldr	r3, [pc, #184]	; (8019298 <xTaskPriorityDisinherit+0xd0>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	693a      	ldr	r2, [r7, #16]
 80191e4:	429a      	cmp	r2, r3
 80191e6:	d00a      	beq.n	80191fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80191e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191ec:	f383 8811 	msr	BASEPRI, r3
 80191f0:	f3bf 8f6f 	isb	sy
 80191f4:	f3bf 8f4f 	dsb	sy
 80191f8:	60fb      	str	r3, [r7, #12]
}
 80191fa:	bf00      	nop
 80191fc:	e7fe      	b.n	80191fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80191fe:	693b      	ldr	r3, [r7, #16]
 8019200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019202:	2b00      	cmp	r3, #0
 8019204:	d10a      	bne.n	801921c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801920a:	f383 8811 	msr	BASEPRI, r3
 801920e:	f3bf 8f6f 	isb	sy
 8019212:	f3bf 8f4f 	dsb	sy
 8019216:	60bb      	str	r3, [r7, #8]
}
 8019218:	bf00      	nop
 801921a:	e7fe      	b.n	801921a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801921c:	693b      	ldr	r3, [r7, #16]
 801921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019220:	1e5a      	subs	r2, r3, #1
 8019222:	693b      	ldr	r3, [r7, #16]
 8019224:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019226:	693b      	ldr	r3, [r7, #16]
 8019228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801922a:	693b      	ldr	r3, [r7, #16]
 801922c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801922e:	429a      	cmp	r2, r3
 8019230:	d02c      	beq.n	801928c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019232:	693b      	ldr	r3, [r7, #16]
 8019234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019236:	2b00      	cmp	r3, #0
 8019238:	d128      	bne.n	801928c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801923a:	693b      	ldr	r3, [r7, #16]
 801923c:	3304      	adds	r3, #4
 801923e:	4618      	mov	r0, r3
 8019240:	f7fe fbbc 	bl	80179bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019244:	693b      	ldr	r3, [r7, #16]
 8019246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019248:	693b      	ldr	r3, [r7, #16]
 801924a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801924c:	693b      	ldr	r3, [r7, #16]
 801924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019250:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019254:	693b      	ldr	r3, [r7, #16]
 8019256:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019258:	693b      	ldr	r3, [r7, #16]
 801925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801925c:	4b0f      	ldr	r3, [pc, #60]	; (801929c <xTaskPriorityDisinherit+0xd4>)
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	429a      	cmp	r2, r3
 8019262:	d903      	bls.n	801926c <xTaskPriorityDisinherit+0xa4>
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019268:	4a0c      	ldr	r2, [pc, #48]	; (801929c <xTaskPriorityDisinherit+0xd4>)
 801926a:	6013      	str	r3, [r2, #0]
 801926c:	693b      	ldr	r3, [r7, #16]
 801926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019270:	4613      	mov	r3, r2
 8019272:	009b      	lsls	r3, r3, #2
 8019274:	4413      	add	r3, r2
 8019276:	009b      	lsls	r3, r3, #2
 8019278:	4a09      	ldr	r2, [pc, #36]	; (80192a0 <xTaskPriorityDisinherit+0xd8>)
 801927a:	441a      	add	r2, r3
 801927c:	693b      	ldr	r3, [r7, #16]
 801927e:	3304      	adds	r3, #4
 8019280:	4619      	mov	r1, r3
 8019282:	4610      	mov	r0, r2
 8019284:	f7fe fb3d 	bl	8017902 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019288:	2301      	movs	r3, #1
 801928a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801928c:	697b      	ldr	r3, [r7, #20]
	}
 801928e:	4618      	mov	r0, r3
 8019290:	3718      	adds	r7, #24
 8019292:	46bd      	mov	sp, r7
 8019294:	bd80      	pop	{r7, pc}
 8019296:	bf00      	nop
 8019298:	24002718 	.word	0x24002718
 801929c:	24002bf4 	.word	0x24002bf4
 80192a0:	2400271c 	.word	0x2400271c

080192a4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80192a4:	b480      	push	{r7}
 80192a6:	b083      	sub	sp, #12
 80192a8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80192aa:	4b09      	ldr	r3, [pc, #36]	; (80192d0 <uxTaskResetEventItemValue+0x2c>)
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	699b      	ldr	r3, [r3, #24]
 80192b0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192b2:	4b07      	ldr	r3, [pc, #28]	; (80192d0 <uxTaskResetEventItemValue+0x2c>)
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192b8:	4b05      	ldr	r3, [pc, #20]	; (80192d0 <uxTaskResetEventItemValue+0x2c>)
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80192c0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80192c2:	687b      	ldr	r3, [r7, #4]
}
 80192c4:	4618      	mov	r0, r3
 80192c6:	370c      	adds	r7, #12
 80192c8:	46bd      	mov	sp, r7
 80192ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ce:	4770      	bx	lr
 80192d0:	24002718 	.word	0x24002718

080192d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b084      	sub	sp, #16
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
 80192dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80192de:	4b21      	ldr	r3, [pc, #132]	; (8019364 <prvAddCurrentTaskToDelayedList+0x90>)
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80192e4:	4b20      	ldr	r3, [pc, #128]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	3304      	adds	r3, #4
 80192ea:	4618      	mov	r0, r3
 80192ec:	f7fe fb66 	bl	80179bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80192f6:	d10a      	bne.n	801930e <prvAddCurrentTaskToDelayedList+0x3a>
 80192f8:	683b      	ldr	r3, [r7, #0]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d007      	beq.n	801930e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80192fe:	4b1a      	ldr	r3, [pc, #104]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	3304      	adds	r3, #4
 8019304:	4619      	mov	r1, r3
 8019306:	4819      	ldr	r0, [pc, #100]	; (801936c <prvAddCurrentTaskToDelayedList+0x98>)
 8019308:	f7fe fafb 	bl	8017902 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801930c:	e026      	b.n	801935c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801930e:	68fa      	ldr	r2, [r7, #12]
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	4413      	add	r3, r2
 8019314:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019316:	4b14      	ldr	r3, [pc, #80]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	68ba      	ldr	r2, [r7, #8]
 801931c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801931e:	68ba      	ldr	r2, [r7, #8]
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	429a      	cmp	r2, r3
 8019324:	d209      	bcs.n	801933a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019326:	4b12      	ldr	r3, [pc, #72]	; (8019370 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019328:	681a      	ldr	r2, [r3, #0]
 801932a:	4b0f      	ldr	r3, [pc, #60]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	3304      	adds	r3, #4
 8019330:	4619      	mov	r1, r3
 8019332:	4610      	mov	r0, r2
 8019334:	f7fe fb09 	bl	801794a <vListInsert>
}
 8019338:	e010      	b.n	801935c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801933a:	4b0e      	ldr	r3, [pc, #56]	; (8019374 <prvAddCurrentTaskToDelayedList+0xa0>)
 801933c:	681a      	ldr	r2, [r3, #0]
 801933e:	4b0a      	ldr	r3, [pc, #40]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	3304      	adds	r3, #4
 8019344:	4619      	mov	r1, r3
 8019346:	4610      	mov	r0, r2
 8019348:	f7fe faff 	bl	801794a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801934c:	4b0a      	ldr	r3, [pc, #40]	; (8019378 <prvAddCurrentTaskToDelayedList+0xa4>)
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	68ba      	ldr	r2, [r7, #8]
 8019352:	429a      	cmp	r2, r3
 8019354:	d202      	bcs.n	801935c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019356:	4a08      	ldr	r2, [pc, #32]	; (8019378 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019358:	68bb      	ldr	r3, [r7, #8]
 801935a:	6013      	str	r3, [r2, #0]
}
 801935c:	bf00      	nop
 801935e:	3710      	adds	r7, #16
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}
 8019364:	24002bf0 	.word	0x24002bf0
 8019368:	24002718 	.word	0x24002718
 801936c:	24002bd8 	.word	0x24002bd8
 8019370:	24002ba8 	.word	0x24002ba8
 8019374:	24002ba4 	.word	0x24002ba4
 8019378:	24002c0c 	.word	0x24002c0c

0801937c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b08a      	sub	sp, #40	; 0x28
 8019380:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019382:	2300      	movs	r3, #0
 8019384:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019386:	f000 fb07 	bl	8019998 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801938a:	4b1c      	ldr	r3, [pc, #112]	; (80193fc <xTimerCreateTimerTask+0x80>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d021      	beq.n	80193d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019392:	2300      	movs	r3, #0
 8019394:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019396:	2300      	movs	r3, #0
 8019398:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801939a:	1d3a      	adds	r2, r7, #4
 801939c:	f107 0108 	add.w	r1, r7, #8
 80193a0:	f107 030c 	add.w	r3, r7, #12
 80193a4:	4618      	mov	r0, r3
 80193a6:	f7fd fff9 	bl	801739c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80193aa:	6879      	ldr	r1, [r7, #4]
 80193ac:	68bb      	ldr	r3, [r7, #8]
 80193ae:	68fa      	ldr	r2, [r7, #12]
 80193b0:	9202      	str	r2, [sp, #8]
 80193b2:	9301      	str	r3, [sp, #4]
 80193b4:	2302      	movs	r3, #2
 80193b6:	9300      	str	r3, [sp, #0]
 80193b8:	2300      	movs	r3, #0
 80193ba:	460a      	mov	r2, r1
 80193bc:	4910      	ldr	r1, [pc, #64]	; (8019400 <xTimerCreateTimerTask+0x84>)
 80193be:	4811      	ldr	r0, [pc, #68]	; (8019404 <xTimerCreateTimerTask+0x88>)
 80193c0:	f7ff f812 	bl	80183e8 <xTaskCreateStatic>
 80193c4:	4603      	mov	r3, r0
 80193c6:	4a10      	ldr	r2, [pc, #64]	; (8019408 <xTimerCreateTimerTask+0x8c>)
 80193c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80193ca:	4b0f      	ldr	r3, [pc, #60]	; (8019408 <xTimerCreateTimerTask+0x8c>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d001      	beq.n	80193d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80193d2:	2301      	movs	r3, #1
 80193d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80193d6:	697b      	ldr	r3, [r7, #20]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d10a      	bne.n	80193f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80193dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193e0:	f383 8811 	msr	BASEPRI, r3
 80193e4:	f3bf 8f6f 	isb	sy
 80193e8:	f3bf 8f4f 	dsb	sy
 80193ec:	613b      	str	r3, [r7, #16]
}
 80193ee:	bf00      	nop
 80193f0:	e7fe      	b.n	80193f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80193f2:	697b      	ldr	r3, [r7, #20]
}
 80193f4:	4618      	mov	r0, r3
 80193f6:	3718      	adds	r7, #24
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}
 80193fc:	24002c48 	.word	0x24002c48
 8019400:	0801afb8 	.word	0x0801afb8
 8019404:	08019541 	.word	0x08019541
 8019408:	24002c4c 	.word	0x24002c4c

0801940c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b08a      	sub	sp, #40	; 0x28
 8019410:	af00      	add	r7, sp, #0
 8019412:	60f8      	str	r0, [r7, #12]
 8019414:	60b9      	str	r1, [r7, #8]
 8019416:	607a      	str	r2, [r7, #4]
 8019418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801941a:	2300      	movs	r3, #0
 801941c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d10a      	bne.n	801943a <xTimerGenericCommand+0x2e>
	__asm volatile
 8019424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019428:	f383 8811 	msr	BASEPRI, r3
 801942c:	f3bf 8f6f 	isb	sy
 8019430:	f3bf 8f4f 	dsb	sy
 8019434:	623b      	str	r3, [r7, #32]
}
 8019436:	bf00      	nop
 8019438:	e7fe      	b.n	8019438 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801943a:	4b1a      	ldr	r3, [pc, #104]	; (80194a4 <xTimerGenericCommand+0x98>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d02a      	beq.n	8019498 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019442:	68bb      	ldr	r3, [r7, #8]
 8019444:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801944e:	68bb      	ldr	r3, [r7, #8]
 8019450:	2b05      	cmp	r3, #5
 8019452:	dc18      	bgt.n	8019486 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019454:	f7ff fe9a 	bl	801918c <xTaskGetSchedulerState>
 8019458:	4603      	mov	r3, r0
 801945a:	2b02      	cmp	r3, #2
 801945c:	d109      	bne.n	8019472 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801945e:	4b11      	ldr	r3, [pc, #68]	; (80194a4 <xTimerGenericCommand+0x98>)
 8019460:	6818      	ldr	r0, [r3, #0]
 8019462:	f107 0110 	add.w	r1, r7, #16
 8019466:	2300      	movs	r3, #0
 8019468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801946a:	f7fe fbd5 	bl	8017c18 <xQueueGenericSend>
 801946e:	6278      	str	r0, [r7, #36]	; 0x24
 8019470:	e012      	b.n	8019498 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019472:	4b0c      	ldr	r3, [pc, #48]	; (80194a4 <xTimerGenericCommand+0x98>)
 8019474:	6818      	ldr	r0, [r3, #0]
 8019476:	f107 0110 	add.w	r1, r7, #16
 801947a:	2300      	movs	r3, #0
 801947c:	2200      	movs	r2, #0
 801947e:	f7fe fbcb 	bl	8017c18 <xQueueGenericSend>
 8019482:	6278      	str	r0, [r7, #36]	; 0x24
 8019484:	e008      	b.n	8019498 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019486:	4b07      	ldr	r3, [pc, #28]	; (80194a4 <xTimerGenericCommand+0x98>)
 8019488:	6818      	ldr	r0, [r3, #0]
 801948a:	f107 0110 	add.w	r1, r7, #16
 801948e:	2300      	movs	r3, #0
 8019490:	683a      	ldr	r2, [r7, #0]
 8019492:	f7fe fcbf 	bl	8017e14 <xQueueGenericSendFromISR>
 8019496:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801949a:	4618      	mov	r0, r3
 801949c:	3728      	adds	r7, #40	; 0x28
 801949e:	46bd      	mov	sp, r7
 80194a0:	bd80      	pop	{r7, pc}
 80194a2:	bf00      	nop
 80194a4:	24002c48 	.word	0x24002c48

080194a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b088      	sub	sp, #32
 80194ac:	af02      	add	r7, sp, #8
 80194ae:	6078      	str	r0, [r7, #4]
 80194b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194b2:	4b22      	ldr	r3, [pc, #136]	; (801953c <prvProcessExpiredTimer+0x94>)
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	68db      	ldr	r3, [r3, #12]
 80194b8:	68db      	ldr	r3, [r3, #12]
 80194ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80194bc:	697b      	ldr	r3, [r7, #20]
 80194be:	3304      	adds	r3, #4
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7fe fa7b 	bl	80179bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194cc:	f003 0304 	and.w	r3, r3, #4
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d022      	beq.n	801951a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80194d4:	697b      	ldr	r3, [r7, #20]
 80194d6:	699a      	ldr	r2, [r3, #24]
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	18d1      	adds	r1, r2, r3
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	683a      	ldr	r2, [r7, #0]
 80194e0:	6978      	ldr	r0, [r7, #20]
 80194e2:	f000 f8d1 	bl	8019688 <prvInsertTimerInActiveList>
 80194e6:	4603      	mov	r3, r0
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d01f      	beq.n	801952c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80194ec:	2300      	movs	r3, #0
 80194ee:	9300      	str	r3, [sp, #0]
 80194f0:	2300      	movs	r3, #0
 80194f2:	687a      	ldr	r2, [r7, #4]
 80194f4:	2100      	movs	r1, #0
 80194f6:	6978      	ldr	r0, [r7, #20]
 80194f8:	f7ff ff88 	bl	801940c <xTimerGenericCommand>
 80194fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80194fe:	693b      	ldr	r3, [r7, #16]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d113      	bne.n	801952c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019508:	f383 8811 	msr	BASEPRI, r3
 801950c:	f3bf 8f6f 	isb	sy
 8019510:	f3bf 8f4f 	dsb	sy
 8019514:	60fb      	str	r3, [r7, #12]
}
 8019516:	bf00      	nop
 8019518:	e7fe      	b.n	8019518 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019520:	f023 0301 	bic.w	r3, r3, #1
 8019524:	b2da      	uxtb	r2, r3
 8019526:	697b      	ldr	r3, [r7, #20]
 8019528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801952c:	697b      	ldr	r3, [r7, #20]
 801952e:	6a1b      	ldr	r3, [r3, #32]
 8019530:	6978      	ldr	r0, [r7, #20]
 8019532:	4798      	blx	r3
}
 8019534:	bf00      	nop
 8019536:	3718      	adds	r7, #24
 8019538:	46bd      	mov	sp, r7
 801953a:	bd80      	pop	{r7, pc}
 801953c:	24002c40 	.word	0x24002c40

08019540 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b084      	sub	sp, #16
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019548:	f107 0308 	add.w	r3, r7, #8
 801954c:	4618      	mov	r0, r3
 801954e:	f000 f857 	bl	8019600 <prvGetNextExpireTime>
 8019552:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019554:	68bb      	ldr	r3, [r7, #8]
 8019556:	4619      	mov	r1, r3
 8019558:	68f8      	ldr	r0, [r7, #12]
 801955a:	f000 f803 	bl	8019564 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801955e:	f000 f8d5 	bl	801970c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019562:	e7f1      	b.n	8019548 <prvTimerTask+0x8>

08019564 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801956e:	f7ff f977 	bl	8018860 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019572:	f107 0308 	add.w	r3, r7, #8
 8019576:	4618      	mov	r0, r3
 8019578:	f000 f866 	bl	8019648 <prvSampleTimeNow>
 801957c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801957e:	68bb      	ldr	r3, [r7, #8]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d130      	bne.n	80195e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d10a      	bne.n	80195a0 <prvProcessTimerOrBlockTask+0x3c>
 801958a:	687a      	ldr	r2, [r7, #4]
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	429a      	cmp	r2, r3
 8019590:	d806      	bhi.n	80195a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019592:	f7ff f973 	bl	801887c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019596:	68f9      	ldr	r1, [r7, #12]
 8019598:	6878      	ldr	r0, [r7, #4]
 801959a:	f7ff ff85 	bl	80194a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801959e:	e024      	b.n	80195ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d008      	beq.n	80195b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80195a6:	4b13      	ldr	r3, [pc, #76]	; (80195f4 <prvProcessTimerOrBlockTask+0x90>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d101      	bne.n	80195b4 <prvProcessTimerOrBlockTask+0x50>
 80195b0:	2301      	movs	r3, #1
 80195b2:	e000      	b.n	80195b6 <prvProcessTimerOrBlockTask+0x52>
 80195b4:	2300      	movs	r3, #0
 80195b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80195b8:	4b0f      	ldr	r3, [pc, #60]	; (80195f8 <prvProcessTimerOrBlockTask+0x94>)
 80195ba:	6818      	ldr	r0, [r3, #0]
 80195bc:	687a      	ldr	r2, [r7, #4]
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	1ad3      	subs	r3, r2, r3
 80195c2:	683a      	ldr	r2, [r7, #0]
 80195c4:	4619      	mov	r1, r3
 80195c6:	f7fe fedb 	bl	8018380 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80195ca:	f7ff f957 	bl	801887c <xTaskResumeAll>
 80195ce:	4603      	mov	r3, r0
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d10a      	bne.n	80195ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80195d4:	4b09      	ldr	r3, [pc, #36]	; (80195fc <prvProcessTimerOrBlockTask+0x98>)
 80195d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80195da:	601a      	str	r2, [r3, #0]
 80195dc:	f3bf 8f4f 	dsb	sy
 80195e0:	f3bf 8f6f 	isb	sy
}
 80195e4:	e001      	b.n	80195ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80195e6:	f7ff f949 	bl	801887c <xTaskResumeAll>
}
 80195ea:	bf00      	nop
 80195ec:	3710      	adds	r7, #16
 80195ee:	46bd      	mov	sp, r7
 80195f0:	bd80      	pop	{r7, pc}
 80195f2:	bf00      	nop
 80195f4:	24002c44 	.word	0x24002c44
 80195f8:	24002c48 	.word	0x24002c48
 80195fc:	e000ed04 	.word	0xe000ed04

08019600 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019600:	b480      	push	{r7}
 8019602:	b085      	sub	sp, #20
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019608:	4b0e      	ldr	r3, [pc, #56]	; (8019644 <prvGetNextExpireTime+0x44>)
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d101      	bne.n	8019616 <prvGetNextExpireTime+0x16>
 8019612:	2201      	movs	r2, #1
 8019614:	e000      	b.n	8019618 <prvGetNextExpireTime+0x18>
 8019616:	2200      	movs	r2, #0
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d105      	bne.n	8019630 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019624:	4b07      	ldr	r3, [pc, #28]	; (8019644 <prvGetNextExpireTime+0x44>)
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	68db      	ldr	r3, [r3, #12]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	60fb      	str	r3, [r7, #12]
 801962e:	e001      	b.n	8019634 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019630:	2300      	movs	r3, #0
 8019632:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019634:	68fb      	ldr	r3, [r7, #12]
}
 8019636:	4618      	mov	r0, r3
 8019638:	3714      	adds	r7, #20
 801963a:	46bd      	mov	sp, r7
 801963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019640:	4770      	bx	lr
 8019642:	bf00      	nop
 8019644:	24002c40 	.word	0x24002c40

08019648 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019648:	b580      	push	{r7, lr}
 801964a:	b084      	sub	sp, #16
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019650:	f7ff f9b2 	bl	80189b8 <xTaskGetTickCount>
 8019654:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019656:	4b0b      	ldr	r3, [pc, #44]	; (8019684 <prvSampleTimeNow+0x3c>)
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	68fa      	ldr	r2, [r7, #12]
 801965c:	429a      	cmp	r2, r3
 801965e:	d205      	bcs.n	801966c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019660:	f000 f936 	bl	80198d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2201      	movs	r2, #1
 8019668:	601a      	str	r2, [r3, #0]
 801966a:	e002      	b.n	8019672 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	2200      	movs	r2, #0
 8019670:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019672:	4a04      	ldr	r2, [pc, #16]	; (8019684 <prvSampleTimeNow+0x3c>)
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019678:	68fb      	ldr	r3, [r7, #12]
}
 801967a:	4618      	mov	r0, r3
 801967c:	3710      	adds	r7, #16
 801967e:	46bd      	mov	sp, r7
 8019680:	bd80      	pop	{r7, pc}
 8019682:	bf00      	nop
 8019684:	24002c50 	.word	0x24002c50

08019688 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b086      	sub	sp, #24
 801968c:	af00      	add	r7, sp, #0
 801968e:	60f8      	str	r0, [r7, #12]
 8019690:	60b9      	str	r1, [r7, #8]
 8019692:	607a      	str	r2, [r7, #4]
 8019694:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019696:	2300      	movs	r3, #0
 8019698:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	68ba      	ldr	r2, [r7, #8]
 801969e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	68fa      	ldr	r2, [r7, #12]
 80196a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80196a6:	68ba      	ldr	r2, [r7, #8]
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	429a      	cmp	r2, r3
 80196ac:	d812      	bhi.n	80196d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196ae:	687a      	ldr	r2, [r7, #4]
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	1ad2      	subs	r2, r2, r3
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	699b      	ldr	r3, [r3, #24]
 80196b8:	429a      	cmp	r2, r3
 80196ba:	d302      	bcc.n	80196c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80196bc:	2301      	movs	r3, #1
 80196be:	617b      	str	r3, [r7, #20]
 80196c0:	e01b      	b.n	80196fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80196c2:	4b10      	ldr	r3, [pc, #64]	; (8019704 <prvInsertTimerInActiveList+0x7c>)
 80196c4:	681a      	ldr	r2, [r3, #0]
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	3304      	adds	r3, #4
 80196ca:	4619      	mov	r1, r3
 80196cc:	4610      	mov	r0, r2
 80196ce:	f7fe f93c 	bl	801794a <vListInsert>
 80196d2:	e012      	b.n	80196fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80196d4:	687a      	ldr	r2, [r7, #4]
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	429a      	cmp	r2, r3
 80196da:	d206      	bcs.n	80196ea <prvInsertTimerInActiveList+0x62>
 80196dc:	68ba      	ldr	r2, [r7, #8]
 80196de:	683b      	ldr	r3, [r7, #0]
 80196e0:	429a      	cmp	r2, r3
 80196e2:	d302      	bcc.n	80196ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80196e4:	2301      	movs	r3, #1
 80196e6:	617b      	str	r3, [r7, #20]
 80196e8:	e007      	b.n	80196fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80196ea:	4b07      	ldr	r3, [pc, #28]	; (8019708 <prvInsertTimerInActiveList+0x80>)
 80196ec:	681a      	ldr	r2, [r3, #0]
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	3304      	adds	r3, #4
 80196f2:	4619      	mov	r1, r3
 80196f4:	4610      	mov	r0, r2
 80196f6:	f7fe f928 	bl	801794a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80196fa:	697b      	ldr	r3, [r7, #20]
}
 80196fc:	4618      	mov	r0, r3
 80196fe:	3718      	adds	r7, #24
 8019700:	46bd      	mov	sp, r7
 8019702:	bd80      	pop	{r7, pc}
 8019704:	24002c44 	.word	0x24002c44
 8019708:	24002c40 	.word	0x24002c40

0801970c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b08e      	sub	sp, #56	; 0x38
 8019710:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019712:	e0ca      	b.n	80198aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	2b00      	cmp	r3, #0
 8019718:	da18      	bge.n	801974c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801971a:	1d3b      	adds	r3, r7, #4
 801971c:	3304      	adds	r3, #4
 801971e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019722:	2b00      	cmp	r3, #0
 8019724:	d10a      	bne.n	801973c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801972a:	f383 8811 	msr	BASEPRI, r3
 801972e:	f3bf 8f6f 	isb	sy
 8019732:	f3bf 8f4f 	dsb	sy
 8019736:	61fb      	str	r3, [r7, #28]
}
 8019738:	bf00      	nop
 801973a:	e7fe      	b.n	801973a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019742:	6850      	ldr	r0, [r2, #4]
 8019744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019746:	6892      	ldr	r2, [r2, #8]
 8019748:	4611      	mov	r1, r2
 801974a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	2b00      	cmp	r3, #0
 8019750:	f2c0 80aa 	blt.w	80198a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801975a:	695b      	ldr	r3, [r3, #20]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d004      	beq.n	801976a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019762:	3304      	adds	r3, #4
 8019764:	4618      	mov	r0, r3
 8019766:	f7fe f929 	bl	80179bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801976a:	463b      	mov	r3, r7
 801976c:	4618      	mov	r0, r3
 801976e:	f7ff ff6b 	bl	8019648 <prvSampleTimeNow>
 8019772:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	2b09      	cmp	r3, #9
 8019778:	f200 8097 	bhi.w	80198aa <prvProcessReceivedCommands+0x19e>
 801977c:	a201      	add	r2, pc, #4	; (adr r2, 8019784 <prvProcessReceivedCommands+0x78>)
 801977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019782:	bf00      	nop
 8019784:	080197ad 	.word	0x080197ad
 8019788:	080197ad 	.word	0x080197ad
 801978c:	080197ad 	.word	0x080197ad
 8019790:	08019821 	.word	0x08019821
 8019794:	08019835 	.word	0x08019835
 8019798:	0801987f 	.word	0x0801987f
 801979c:	080197ad 	.word	0x080197ad
 80197a0:	080197ad 	.word	0x080197ad
 80197a4:	08019821 	.word	0x08019821
 80197a8:	08019835 	.word	0x08019835
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80197ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197b2:	f043 0301 	orr.w	r3, r3, #1
 80197b6:	b2da      	uxtb	r2, r3
 80197b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80197be:	68ba      	ldr	r2, [r7, #8]
 80197c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197c2:	699b      	ldr	r3, [r3, #24]
 80197c4:	18d1      	adds	r1, r2, r3
 80197c6:	68bb      	ldr	r3, [r7, #8]
 80197c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197cc:	f7ff ff5c 	bl	8019688 <prvInsertTimerInActiveList>
 80197d0:	4603      	mov	r3, r0
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d069      	beq.n	80198aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80197d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197d8:	6a1b      	ldr	r3, [r3, #32]
 80197da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80197de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197e4:	f003 0304 	and.w	r3, r3, #4
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d05e      	beq.n	80198aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80197ec:	68ba      	ldr	r2, [r7, #8]
 80197ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f0:	699b      	ldr	r3, [r3, #24]
 80197f2:	441a      	add	r2, r3
 80197f4:	2300      	movs	r3, #0
 80197f6:	9300      	str	r3, [sp, #0]
 80197f8:	2300      	movs	r3, #0
 80197fa:	2100      	movs	r1, #0
 80197fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197fe:	f7ff fe05 	bl	801940c <xTimerGenericCommand>
 8019802:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019804:	6a3b      	ldr	r3, [r7, #32]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d14f      	bne.n	80198aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801980e:	f383 8811 	msr	BASEPRI, r3
 8019812:	f3bf 8f6f 	isb	sy
 8019816:	f3bf 8f4f 	dsb	sy
 801981a:	61bb      	str	r3, [r7, #24]
}
 801981c:	bf00      	nop
 801981e:	e7fe      	b.n	801981e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019826:	f023 0301 	bic.w	r3, r3, #1
 801982a:	b2da      	uxtb	r2, r3
 801982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801982e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019832:	e03a      	b.n	80198aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801983a:	f043 0301 	orr.w	r3, r3, #1
 801983e:	b2da      	uxtb	r2, r3
 8019840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019846:	68ba      	ldr	r2, [r7, #8]
 8019848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801984a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801984e:	699b      	ldr	r3, [r3, #24]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d10a      	bne.n	801986a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019858:	f383 8811 	msr	BASEPRI, r3
 801985c:	f3bf 8f6f 	isb	sy
 8019860:	f3bf 8f4f 	dsb	sy
 8019864:	617b      	str	r3, [r7, #20]
}
 8019866:	bf00      	nop
 8019868:	e7fe      	b.n	8019868 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801986c:	699a      	ldr	r2, [r3, #24]
 801986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019870:	18d1      	adds	r1, r2, r3
 8019872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019878:	f7ff ff06 	bl	8019688 <prvInsertTimerInActiveList>
					break;
 801987c:	e015      	b.n	80198aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019884:	f003 0302 	and.w	r3, r3, #2
 8019888:	2b00      	cmp	r3, #0
 801988a:	d103      	bne.n	8019894 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801988c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801988e:	f000 fbff 	bl	801a090 <vPortFree>
 8019892:	e00a      	b.n	80198aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801989a:	f023 0301 	bic.w	r3, r3, #1
 801989e:	b2da      	uxtb	r2, r3
 80198a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80198a6:	e000      	b.n	80198aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80198a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80198aa:	4b08      	ldr	r3, [pc, #32]	; (80198cc <prvProcessReceivedCommands+0x1c0>)
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	1d39      	adds	r1, r7, #4
 80198b0:	2200      	movs	r2, #0
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7fe fb4a 	bl	8017f4c <xQueueReceive>
 80198b8:	4603      	mov	r3, r0
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	f47f af2a 	bne.w	8019714 <prvProcessReceivedCommands+0x8>
	}
}
 80198c0:	bf00      	nop
 80198c2:	bf00      	nop
 80198c4:	3730      	adds	r7, #48	; 0x30
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bd80      	pop	{r7, pc}
 80198ca:	bf00      	nop
 80198cc:	24002c48 	.word	0x24002c48

080198d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b088      	sub	sp, #32
 80198d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80198d6:	e048      	b.n	801996a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80198d8:	4b2d      	ldr	r3, [pc, #180]	; (8019990 <prvSwitchTimerLists+0xc0>)
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	68db      	ldr	r3, [r3, #12]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198e2:	4b2b      	ldr	r3, [pc, #172]	; (8019990 <prvSwitchTimerLists+0xc0>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	68db      	ldr	r3, [r3, #12]
 80198e8:	68db      	ldr	r3, [r3, #12]
 80198ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	3304      	adds	r3, #4
 80198f0:	4618      	mov	r0, r3
 80198f2:	f7fe f863 	bl	80179bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	6a1b      	ldr	r3, [r3, #32]
 80198fa:	68f8      	ldr	r0, [r7, #12]
 80198fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019904:	f003 0304 	and.w	r3, r3, #4
 8019908:	2b00      	cmp	r3, #0
 801990a:	d02e      	beq.n	801996a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	699b      	ldr	r3, [r3, #24]
 8019910:	693a      	ldr	r2, [r7, #16]
 8019912:	4413      	add	r3, r2
 8019914:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019916:	68ba      	ldr	r2, [r7, #8]
 8019918:	693b      	ldr	r3, [r7, #16]
 801991a:	429a      	cmp	r2, r3
 801991c:	d90e      	bls.n	801993c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	68ba      	ldr	r2, [r7, #8]
 8019922:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	68fa      	ldr	r2, [r7, #12]
 8019928:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801992a:	4b19      	ldr	r3, [pc, #100]	; (8019990 <prvSwitchTimerLists+0xc0>)
 801992c:	681a      	ldr	r2, [r3, #0]
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	3304      	adds	r3, #4
 8019932:	4619      	mov	r1, r3
 8019934:	4610      	mov	r0, r2
 8019936:	f7fe f808 	bl	801794a <vListInsert>
 801993a:	e016      	b.n	801996a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801993c:	2300      	movs	r3, #0
 801993e:	9300      	str	r3, [sp, #0]
 8019940:	2300      	movs	r3, #0
 8019942:	693a      	ldr	r2, [r7, #16]
 8019944:	2100      	movs	r1, #0
 8019946:	68f8      	ldr	r0, [r7, #12]
 8019948:	f7ff fd60 	bl	801940c <xTimerGenericCommand>
 801994c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d10a      	bne.n	801996a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019958:	f383 8811 	msr	BASEPRI, r3
 801995c:	f3bf 8f6f 	isb	sy
 8019960:	f3bf 8f4f 	dsb	sy
 8019964:	603b      	str	r3, [r7, #0]
}
 8019966:	bf00      	nop
 8019968:	e7fe      	b.n	8019968 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801996a:	4b09      	ldr	r3, [pc, #36]	; (8019990 <prvSwitchTimerLists+0xc0>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d1b1      	bne.n	80198d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019974:	4b06      	ldr	r3, [pc, #24]	; (8019990 <prvSwitchTimerLists+0xc0>)
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801997a:	4b06      	ldr	r3, [pc, #24]	; (8019994 <prvSwitchTimerLists+0xc4>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	4a04      	ldr	r2, [pc, #16]	; (8019990 <prvSwitchTimerLists+0xc0>)
 8019980:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019982:	4a04      	ldr	r2, [pc, #16]	; (8019994 <prvSwitchTimerLists+0xc4>)
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	6013      	str	r3, [r2, #0]
}
 8019988:	bf00      	nop
 801998a:	3718      	adds	r7, #24
 801998c:	46bd      	mov	sp, r7
 801998e:	bd80      	pop	{r7, pc}
 8019990:	24002c40 	.word	0x24002c40
 8019994:	24002c44 	.word	0x24002c44

08019998 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b082      	sub	sp, #8
 801999c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801999e:	f000 f989 	bl	8019cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80199a2:	4b15      	ldr	r3, [pc, #84]	; (80199f8 <prvCheckForValidListAndQueue+0x60>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d120      	bne.n	80199ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80199aa:	4814      	ldr	r0, [pc, #80]	; (80199fc <prvCheckForValidListAndQueue+0x64>)
 80199ac:	f7fd ff7c 	bl	80178a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80199b0:	4813      	ldr	r0, [pc, #76]	; (8019a00 <prvCheckForValidListAndQueue+0x68>)
 80199b2:	f7fd ff79 	bl	80178a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80199b6:	4b13      	ldr	r3, [pc, #76]	; (8019a04 <prvCheckForValidListAndQueue+0x6c>)
 80199b8:	4a10      	ldr	r2, [pc, #64]	; (80199fc <prvCheckForValidListAndQueue+0x64>)
 80199ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80199bc:	4b12      	ldr	r3, [pc, #72]	; (8019a08 <prvCheckForValidListAndQueue+0x70>)
 80199be:	4a10      	ldr	r2, [pc, #64]	; (8019a00 <prvCheckForValidListAndQueue+0x68>)
 80199c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80199c2:	2300      	movs	r3, #0
 80199c4:	9300      	str	r3, [sp, #0]
 80199c6:	4b11      	ldr	r3, [pc, #68]	; (8019a0c <prvCheckForValidListAndQueue+0x74>)
 80199c8:	4a11      	ldr	r2, [pc, #68]	; (8019a10 <prvCheckForValidListAndQueue+0x78>)
 80199ca:	2110      	movs	r1, #16
 80199cc:	200a      	movs	r0, #10
 80199ce:	f7fe f887 	bl	8017ae0 <xQueueGenericCreateStatic>
 80199d2:	4603      	mov	r3, r0
 80199d4:	4a08      	ldr	r2, [pc, #32]	; (80199f8 <prvCheckForValidListAndQueue+0x60>)
 80199d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80199d8:	4b07      	ldr	r3, [pc, #28]	; (80199f8 <prvCheckForValidListAndQueue+0x60>)
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d005      	beq.n	80199ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80199e0:	4b05      	ldr	r3, [pc, #20]	; (80199f8 <prvCheckForValidListAndQueue+0x60>)
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	490b      	ldr	r1, [pc, #44]	; (8019a14 <prvCheckForValidListAndQueue+0x7c>)
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7fe fca0 	bl	801832c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80199ec:	f000 f992 	bl	8019d14 <vPortExitCritical>
}
 80199f0:	bf00      	nop
 80199f2:	46bd      	mov	sp, r7
 80199f4:	bd80      	pop	{r7, pc}
 80199f6:	bf00      	nop
 80199f8:	24002c48 	.word	0x24002c48
 80199fc:	24002c18 	.word	0x24002c18
 8019a00:	24002c2c 	.word	0x24002c2c
 8019a04:	24002c40 	.word	0x24002c40
 8019a08:	24002c44 	.word	0x24002c44
 8019a0c:	24002cf4 	.word	0x24002cf4
 8019a10:	24002c54 	.word	0x24002c54
 8019a14:	0801afc0 	.word	0x0801afc0

08019a18 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b08a      	sub	sp, #40	; 0x28
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	60f8      	str	r0, [r7, #12]
 8019a20:	60b9      	str	r1, [r7, #8]
 8019a22:	607a      	str	r2, [r7, #4]
 8019a24:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019a26:	f06f 0301 	mvn.w	r3, #1
 8019a2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019a38:	4b06      	ldr	r3, [pc, #24]	; (8019a54 <xTimerPendFunctionCallFromISR+0x3c>)
 8019a3a:	6818      	ldr	r0, [r3, #0]
 8019a3c:	f107 0114 	add.w	r1, r7, #20
 8019a40:	2300      	movs	r3, #0
 8019a42:	683a      	ldr	r2, [r7, #0]
 8019a44:	f7fe f9e6 	bl	8017e14 <xQueueGenericSendFromISR>
 8019a48:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	3728      	adds	r7, #40	; 0x28
 8019a50:	46bd      	mov	sp, r7
 8019a52:	bd80      	pop	{r7, pc}
 8019a54:	24002c48 	.word	0x24002c48

08019a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019a58:	b480      	push	{r7}
 8019a5a:	b085      	sub	sp, #20
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	60f8      	str	r0, [r7, #12]
 8019a60:	60b9      	str	r1, [r7, #8]
 8019a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	3b04      	subs	r3, #4
 8019a68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	3b04      	subs	r3, #4
 8019a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	f023 0201 	bic.w	r2, r3, #1
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	3b04      	subs	r3, #4
 8019a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019a88:	4a0c      	ldr	r2, [pc, #48]	; (8019abc <pxPortInitialiseStack+0x64>)
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	3b14      	subs	r3, #20
 8019a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019a94:	687a      	ldr	r2, [r7, #4]
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	3b04      	subs	r3, #4
 8019a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	f06f 0202 	mvn.w	r2, #2
 8019aa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	3b20      	subs	r3, #32
 8019aac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019aae:	68fb      	ldr	r3, [r7, #12]
}
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	3714      	adds	r7, #20
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aba:	4770      	bx	lr
 8019abc:	08019ac1 	.word	0x08019ac1

08019ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019ac0:	b480      	push	{r7}
 8019ac2:	b085      	sub	sp, #20
 8019ac4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019aca:	4b12      	ldr	r3, [pc, #72]	; (8019b14 <prvTaskExitError+0x54>)
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019ad2:	d00a      	beq.n	8019aea <prvTaskExitError+0x2a>
	__asm volatile
 8019ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ad8:	f383 8811 	msr	BASEPRI, r3
 8019adc:	f3bf 8f6f 	isb	sy
 8019ae0:	f3bf 8f4f 	dsb	sy
 8019ae4:	60fb      	str	r3, [r7, #12]
}
 8019ae6:	bf00      	nop
 8019ae8:	e7fe      	b.n	8019ae8 <prvTaskExitError+0x28>
	__asm volatile
 8019aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aee:	f383 8811 	msr	BASEPRI, r3
 8019af2:	f3bf 8f6f 	isb	sy
 8019af6:	f3bf 8f4f 	dsb	sy
 8019afa:	60bb      	str	r3, [r7, #8]
}
 8019afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019afe:	bf00      	nop
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d0fc      	beq.n	8019b00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019b06:	bf00      	nop
 8019b08:	bf00      	nop
 8019b0a:	3714      	adds	r7, #20
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b12:	4770      	bx	lr
 8019b14:	240000d0 	.word	0x240000d0
	...

08019b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019b20:	4b07      	ldr	r3, [pc, #28]	; (8019b40 <pxCurrentTCBConst2>)
 8019b22:	6819      	ldr	r1, [r3, #0]
 8019b24:	6808      	ldr	r0, [r1, #0]
 8019b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b2a:	f380 8809 	msr	PSP, r0
 8019b2e:	f3bf 8f6f 	isb	sy
 8019b32:	f04f 0000 	mov.w	r0, #0
 8019b36:	f380 8811 	msr	BASEPRI, r0
 8019b3a:	4770      	bx	lr
 8019b3c:	f3af 8000 	nop.w

08019b40 <pxCurrentTCBConst2>:
 8019b40:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019b44:	bf00      	nop
 8019b46:	bf00      	nop

08019b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019b48:	4808      	ldr	r0, [pc, #32]	; (8019b6c <prvPortStartFirstTask+0x24>)
 8019b4a:	6800      	ldr	r0, [r0, #0]
 8019b4c:	6800      	ldr	r0, [r0, #0]
 8019b4e:	f380 8808 	msr	MSP, r0
 8019b52:	f04f 0000 	mov.w	r0, #0
 8019b56:	f380 8814 	msr	CONTROL, r0
 8019b5a:	b662      	cpsie	i
 8019b5c:	b661      	cpsie	f
 8019b5e:	f3bf 8f4f 	dsb	sy
 8019b62:	f3bf 8f6f 	isb	sy
 8019b66:	df00      	svc	0
 8019b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019b6a:	bf00      	nop
 8019b6c:	e000ed08 	.word	0xe000ed08

08019b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b086      	sub	sp, #24
 8019b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019b76:	4b46      	ldr	r3, [pc, #280]	; (8019c90 <xPortStartScheduler+0x120>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	4a46      	ldr	r2, [pc, #280]	; (8019c94 <xPortStartScheduler+0x124>)
 8019b7c:	4293      	cmp	r3, r2
 8019b7e:	d10a      	bne.n	8019b96 <xPortStartScheduler+0x26>
	__asm volatile
 8019b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b84:	f383 8811 	msr	BASEPRI, r3
 8019b88:	f3bf 8f6f 	isb	sy
 8019b8c:	f3bf 8f4f 	dsb	sy
 8019b90:	613b      	str	r3, [r7, #16]
}
 8019b92:	bf00      	nop
 8019b94:	e7fe      	b.n	8019b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019b96:	4b3e      	ldr	r3, [pc, #248]	; (8019c90 <xPortStartScheduler+0x120>)
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	4a3f      	ldr	r2, [pc, #252]	; (8019c98 <xPortStartScheduler+0x128>)
 8019b9c:	4293      	cmp	r3, r2
 8019b9e:	d10a      	bne.n	8019bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8019ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ba4:	f383 8811 	msr	BASEPRI, r3
 8019ba8:	f3bf 8f6f 	isb	sy
 8019bac:	f3bf 8f4f 	dsb	sy
 8019bb0:	60fb      	str	r3, [r7, #12]
}
 8019bb2:	bf00      	nop
 8019bb4:	e7fe      	b.n	8019bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019bb6:	4b39      	ldr	r3, [pc, #228]	; (8019c9c <xPortStartScheduler+0x12c>)
 8019bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019bba:	697b      	ldr	r3, [r7, #20]
 8019bbc:	781b      	ldrb	r3, [r3, #0]
 8019bbe:	b2db      	uxtb	r3, r3
 8019bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019bc2:	697b      	ldr	r3, [r7, #20]
 8019bc4:	22ff      	movs	r2, #255	; 0xff
 8019bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019bc8:	697b      	ldr	r3, [r7, #20]
 8019bca:	781b      	ldrb	r3, [r3, #0]
 8019bcc:	b2db      	uxtb	r3, r3
 8019bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019bd0:	78fb      	ldrb	r3, [r7, #3]
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019bd8:	b2da      	uxtb	r2, r3
 8019bda:	4b31      	ldr	r3, [pc, #196]	; (8019ca0 <xPortStartScheduler+0x130>)
 8019bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019bde:	4b31      	ldr	r3, [pc, #196]	; (8019ca4 <xPortStartScheduler+0x134>)
 8019be0:	2207      	movs	r2, #7
 8019be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019be4:	e009      	b.n	8019bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019be6:	4b2f      	ldr	r3, [pc, #188]	; (8019ca4 <xPortStartScheduler+0x134>)
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	3b01      	subs	r3, #1
 8019bec:	4a2d      	ldr	r2, [pc, #180]	; (8019ca4 <xPortStartScheduler+0x134>)
 8019bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019bf0:	78fb      	ldrb	r3, [r7, #3]
 8019bf2:	b2db      	uxtb	r3, r3
 8019bf4:	005b      	lsls	r3, r3, #1
 8019bf6:	b2db      	uxtb	r3, r3
 8019bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019bfa:	78fb      	ldrb	r3, [r7, #3]
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019c02:	2b80      	cmp	r3, #128	; 0x80
 8019c04:	d0ef      	beq.n	8019be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019c06:	4b27      	ldr	r3, [pc, #156]	; (8019ca4 <xPortStartScheduler+0x134>)
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	f1c3 0307 	rsb	r3, r3, #7
 8019c0e:	2b04      	cmp	r3, #4
 8019c10:	d00a      	beq.n	8019c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8019c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c16:	f383 8811 	msr	BASEPRI, r3
 8019c1a:	f3bf 8f6f 	isb	sy
 8019c1e:	f3bf 8f4f 	dsb	sy
 8019c22:	60bb      	str	r3, [r7, #8]
}
 8019c24:	bf00      	nop
 8019c26:	e7fe      	b.n	8019c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019c28:	4b1e      	ldr	r3, [pc, #120]	; (8019ca4 <xPortStartScheduler+0x134>)
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	021b      	lsls	r3, r3, #8
 8019c2e:	4a1d      	ldr	r2, [pc, #116]	; (8019ca4 <xPortStartScheduler+0x134>)
 8019c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019c32:	4b1c      	ldr	r3, [pc, #112]	; (8019ca4 <xPortStartScheduler+0x134>)
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8019c3a:	4a1a      	ldr	r2, [pc, #104]	; (8019ca4 <xPortStartScheduler+0x134>)
 8019c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	b2da      	uxtb	r2, r3
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019c46:	4b18      	ldr	r3, [pc, #96]	; (8019ca8 <xPortStartScheduler+0x138>)
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	4a17      	ldr	r2, [pc, #92]	; (8019ca8 <xPortStartScheduler+0x138>)
 8019c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019c52:	4b15      	ldr	r3, [pc, #84]	; (8019ca8 <xPortStartScheduler+0x138>)
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	4a14      	ldr	r2, [pc, #80]	; (8019ca8 <xPortStartScheduler+0x138>)
 8019c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8019c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019c5e:	f000 f8dd 	bl	8019e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019c62:	4b12      	ldr	r3, [pc, #72]	; (8019cac <xPortStartScheduler+0x13c>)
 8019c64:	2200      	movs	r2, #0
 8019c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019c68:	f000 f8fc 	bl	8019e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019c6c:	4b10      	ldr	r3, [pc, #64]	; (8019cb0 <xPortStartScheduler+0x140>)
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	4a0f      	ldr	r2, [pc, #60]	; (8019cb0 <xPortStartScheduler+0x140>)
 8019c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019c78:	f7ff ff66 	bl	8019b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019c7c:	f7fe ff6e 	bl	8018b5c <vTaskSwitchContext>
	prvTaskExitError();
 8019c80:	f7ff ff1e 	bl	8019ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019c84:	2300      	movs	r3, #0
}
 8019c86:	4618      	mov	r0, r3
 8019c88:	3718      	adds	r7, #24
 8019c8a:	46bd      	mov	sp, r7
 8019c8c:	bd80      	pop	{r7, pc}
 8019c8e:	bf00      	nop
 8019c90:	e000ed00 	.word	0xe000ed00
 8019c94:	410fc271 	.word	0x410fc271
 8019c98:	410fc270 	.word	0x410fc270
 8019c9c:	e000e400 	.word	0xe000e400
 8019ca0:	24002d44 	.word	0x24002d44
 8019ca4:	24002d48 	.word	0x24002d48
 8019ca8:	e000ed20 	.word	0xe000ed20
 8019cac:	240000d0 	.word	0x240000d0
 8019cb0:	e000ef34 	.word	0xe000ef34

08019cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019cb4:	b480      	push	{r7}
 8019cb6:	b083      	sub	sp, #12
 8019cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8019cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cbe:	f383 8811 	msr	BASEPRI, r3
 8019cc2:	f3bf 8f6f 	isb	sy
 8019cc6:	f3bf 8f4f 	dsb	sy
 8019cca:	607b      	str	r3, [r7, #4]
}
 8019ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019cce:	4b0f      	ldr	r3, [pc, #60]	; (8019d0c <vPortEnterCritical+0x58>)
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	3301      	adds	r3, #1
 8019cd4:	4a0d      	ldr	r2, [pc, #52]	; (8019d0c <vPortEnterCritical+0x58>)
 8019cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019cd8:	4b0c      	ldr	r3, [pc, #48]	; (8019d0c <vPortEnterCritical+0x58>)
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	2b01      	cmp	r3, #1
 8019cde:	d10f      	bne.n	8019d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019ce0:	4b0b      	ldr	r3, [pc, #44]	; (8019d10 <vPortEnterCritical+0x5c>)
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	b2db      	uxtb	r3, r3
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d00a      	beq.n	8019d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8019cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cee:	f383 8811 	msr	BASEPRI, r3
 8019cf2:	f3bf 8f6f 	isb	sy
 8019cf6:	f3bf 8f4f 	dsb	sy
 8019cfa:	603b      	str	r3, [r7, #0]
}
 8019cfc:	bf00      	nop
 8019cfe:	e7fe      	b.n	8019cfe <vPortEnterCritical+0x4a>
	}
}
 8019d00:	bf00      	nop
 8019d02:	370c      	adds	r7, #12
 8019d04:	46bd      	mov	sp, r7
 8019d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0a:	4770      	bx	lr
 8019d0c:	240000d0 	.word	0x240000d0
 8019d10:	e000ed04 	.word	0xe000ed04

08019d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019d14:	b480      	push	{r7}
 8019d16:	b083      	sub	sp, #12
 8019d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019d1a:	4b12      	ldr	r3, [pc, #72]	; (8019d64 <vPortExitCritical+0x50>)
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d10a      	bne.n	8019d38 <vPortExitCritical+0x24>
	__asm volatile
 8019d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d26:	f383 8811 	msr	BASEPRI, r3
 8019d2a:	f3bf 8f6f 	isb	sy
 8019d2e:	f3bf 8f4f 	dsb	sy
 8019d32:	607b      	str	r3, [r7, #4]
}
 8019d34:	bf00      	nop
 8019d36:	e7fe      	b.n	8019d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019d38:	4b0a      	ldr	r3, [pc, #40]	; (8019d64 <vPortExitCritical+0x50>)
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	3b01      	subs	r3, #1
 8019d3e:	4a09      	ldr	r2, [pc, #36]	; (8019d64 <vPortExitCritical+0x50>)
 8019d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019d42:	4b08      	ldr	r3, [pc, #32]	; (8019d64 <vPortExitCritical+0x50>)
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d105      	bne.n	8019d56 <vPortExitCritical+0x42>
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019d4e:	683b      	ldr	r3, [r7, #0]
 8019d50:	f383 8811 	msr	BASEPRI, r3
}
 8019d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019d56:	bf00      	nop
 8019d58:	370c      	adds	r7, #12
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d60:	4770      	bx	lr
 8019d62:	bf00      	nop
 8019d64:	240000d0 	.word	0x240000d0
	...

08019d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019d70:	f3ef 8009 	mrs	r0, PSP
 8019d74:	f3bf 8f6f 	isb	sy
 8019d78:	4b15      	ldr	r3, [pc, #84]	; (8019dd0 <pxCurrentTCBConst>)
 8019d7a:	681a      	ldr	r2, [r3, #0]
 8019d7c:	f01e 0f10 	tst.w	lr, #16
 8019d80:	bf08      	it	eq
 8019d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d8a:	6010      	str	r0, [r2, #0]
 8019d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019d94:	f380 8811 	msr	BASEPRI, r0
 8019d98:	f3bf 8f4f 	dsb	sy
 8019d9c:	f3bf 8f6f 	isb	sy
 8019da0:	f7fe fedc 	bl	8018b5c <vTaskSwitchContext>
 8019da4:	f04f 0000 	mov.w	r0, #0
 8019da8:	f380 8811 	msr	BASEPRI, r0
 8019dac:	bc09      	pop	{r0, r3}
 8019dae:	6819      	ldr	r1, [r3, #0]
 8019db0:	6808      	ldr	r0, [r1, #0]
 8019db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019db6:	f01e 0f10 	tst.w	lr, #16
 8019dba:	bf08      	it	eq
 8019dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019dc0:	f380 8809 	msr	PSP, r0
 8019dc4:	f3bf 8f6f 	isb	sy
 8019dc8:	4770      	bx	lr
 8019dca:	bf00      	nop
 8019dcc:	f3af 8000 	nop.w

08019dd0 <pxCurrentTCBConst>:
 8019dd0:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019dd4:	bf00      	nop
 8019dd6:	bf00      	nop

08019dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b082      	sub	sp, #8
 8019ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8019dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019de2:	f383 8811 	msr	BASEPRI, r3
 8019de6:	f3bf 8f6f 	isb	sy
 8019dea:	f3bf 8f4f 	dsb	sy
 8019dee:	607b      	str	r3, [r7, #4]
}
 8019df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019df2:	f7fe fdf1 	bl	80189d8 <xTaskIncrementTick>
 8019df6:	4603      	mov	r3, r0
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d003      	beq.n	8019e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019dfc:	4b06      	ldr	r3, [pc, #24]	; (8019e18 <xPortSysTickHandler+0x40>)
 8019dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e02:	601a      	str	r2, [r3, #0]
 8019e04:	2300      	movs	r3, #0
 8019e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019e08:	683b      	ldr	r3, [r7, #0]
 8019e0a:	f383 8811 	msr	BASEPRI, r3
}
 8019e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019e10:	bf00      	nop
 8019e12:	3708      	adds	r7, #8
 8019e14:	46bd      	mov	sp, r7
 8019e16:	bd80      	pop	{r7, pc}
 8019e18:	e000ed04 	.word	0xe000ed04

08019e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019e1c:	b480      	push	{r7}
 8019e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019e20:	4b0b      	ldr	r3, [pc, #44]	; (8019e50 <vPortSetupTimerInterrupt+0x34>)
 8019e22:	2200      	movs	r2, #0
 8019e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019e26:	4b0b      	ldr	r3, [pc, #44]	; (8019e54 <vPortSetupTimerInterrupt+0x38>)
 8019e28:	2200      	movs	r2, #0
 8019e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019e2c:	4b0a      	ldr	r3, [pc, #40]	; (8019e58 <vPortSetupTimerInterrupt+0x3c>)
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	4a0a      	ldr	r2, [pc, #40]	; (8019e5c <vPortSetupTimerInterrupt+0x40>)
 8019e32:	fba2 2303 	umull	r2, r3, r2, r3
 8019e36:	099b      	lsrs	r3, r3, #6
 8019e38:	4a09      	ldr	r2, [pc, #36]	; (8019e60 <vPortSetupTimerInterrupt+0x44>)
 8019e3a:	3b01      	subs	r3, #1
 8019e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019e3e:	4b04      	ldr	r3, [pc, #16]	; (8019e50 <vPortSetupTimerInterrupt+0x34>)
 8019e40:	2207      	movs	r2, #7
 8019e42:	601a      	str	r2, [r3, #0]
}
 8019e44:	bf00      	nop
 8019e46:	46bd      	mov	sp, r7
 8019e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4c:	4770      	bx	lr
 8019e4e:	bf00      	nop
 8019e50:	e000e010 	.word	0xe000e010
 8019e54:	e000e018 	.word	0xe000e018
 8019e58:	240000c0 	.word	0x240000c0
 8019e5c:	10624dd3 	.word	0x10624dd3
 8019e60:	e000e014 	.word	0xe000e014

08019e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019e74 <vPortEnableVFP+0x10>
 8019e68:	6801      	ldr	r1, [r0, #0]
 8019e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019e6e:	6001      	str	r1, [r0, #0]
 8019e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019e72:	bf00      	nop
 8019e74:	e000ed88 	.word	0xe000ed88

08019e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019e78:	b480      	push	{r7}
 8019e7a:	b085      	sub	sp, #20
 8019e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019e7e:	f3ef 8305 	mrs	r3, IPSR
 8019e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	2b0f      	cmp	r3, #15
 8019e88:	d914      	bls.n	8019eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019e8a:	4a17      	ldr	r2, [pc, #92]	; (8019ee8 <vPortValidateInterruptPriority+0x70>)
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	4413      	add	r3, r2
 8019e90:	781b      	ldrb	r3, [r3, #0]
 8019e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019e94:	4b15      	ldr	r3, [pc, #84]	; (8019eec <vPortValidateInterruptPriority+0x74>)
 8019e96:	781b      	ldrb	r3, [r3, #0]
 8019e98:	7afa      	ldrb	r2, [r7, #11]
 8019e9a:	429a      	cmp	r2, r3
 8019e9c:	d20a      	bcs.n	8019eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ea2:	f383 8811 	msr	BASEPRI, r3
 8019ea6:	f3bf 8f6f 	isb	sy
 8019eaa:	f3bf 8f4f 	dsb	sy
 8019eae:	607b      	str	r3, [r7, #4]
}
 8019eb0:	bf00      	nop
 8019eb2:	e7fe      	b.n	8019eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019eb4:	4b0e      	ldr	r3, [pc, #56]	; (8019ef0 <vPortValidateInterruptPriority+0x78>)
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019ebc:	4b0d      	ldr	r3, [pc, #52]	; (8019ef4 <vPortValidateInterruptPriority+0x7c>)
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	429a      	cmp	r2, r3
 8019ec2:	d90a      	bls.n	8019eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ec8:	f383 8811 	msr	BASEPRI, r3
 8019ecc:	f3bf 8f6f 	isb	sy
 8019ed0:	f3bf 8f4f 	dsb	sy
 8019ed4:	603b      	str	r3, [r7, #0]
}
 8019ed6:	bf00      	nop
 8019ed8:	e7fe      	b.n	8019ed8 <vPortValidateInterruptPriority+0x60>
	}
 8019eda:	bf00      	nop
 8019edc:	3714      	adds	r7, #20
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ee4:	4770      	bx	lr
 8019ee6:	bf00      	nop
 8019ee8:	e000e3f0 	.word	0xe000e3f0
 8019eec:	24002d44 	.word	0x24002d44
 8019ef0:	e000ed0c 	.word	0xe000ed0c
 8019ef4:	24002d48 	.word	0x24002d48

08019ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019ef8:	b580      	push	{r7, lr}
 8019efa:	b08a      	sub	sp, #40	; 0x28
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019f00:	2300      	movs	r3, #0
 8019f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019f04:	f7fe fcac 	bl	8018860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019f08:	4b5b      	ldr	r3, [pc, #364]	; (801a078 <pvPortMalloc+0x180>)
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d101      	bne.n	8019f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019f10:	f000 f920 	bl	801a154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019f14:	4b59      	ldr	r3, [pc, #356]	; (801a07c <pvPortMalloc+0x184>)
 8019f16:	681a      	ldr	r2, [r3, #0]
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	4013      	ands	r3, r2
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	f040 8093 	bne.w	801a048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d01d      	beq.n	8019f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019f28:	2208      	movs	r2, #8
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	4413      	add	r3, r2
 8019f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	f003 0307 	and.w	r3, r3, #7
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d014      	beq.n	8019f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	f023 0307 	bic.w	r3, r3, #7
 8019f40:	3308      	adds	r3, #8
 8019f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	f003 0307 	and.w	r3, r3, #7
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d00a      	beq.n	8019f64 <pvPortMalloc+0x6c>
	__asm volatile
 8019f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f52:	f383 8811 	msr	BASEPRI, r3
 8019f56:	f3bf 8f6f 	isb	sy
 8019f5a:	f3bf 8f4f 	dsb	sy
 8019f5e:	617b      	str	r3, [r7, #20]
}
 8019f60:	bf00      	nop
 8019f62:	e7fe      	b.n	8019f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d06e      	beq.n	801a048 <pvPortMalloc+0x150>
 8019f6a:	4b45      	ldr	r3, [pc, #276]	; (801a080 <pvPortMalloc+0x188>)
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	687a      	ldr	r2, [r7, #4]
 8019f70:	429a      	cmp	r2, r3
 8019f72:	d869      	bhi.n	801a048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019f74:	4b43      	ldr	r3, [pc, #268]	; (801a084 <pvPortMalloc+0x18c>)
 8019f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019f78:	4b42      	ldr	r3, [pc, #264]	; (801a084 <pvPortMalloc+0x18c>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019f7e:	e004      	b.n	8019f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8c:	685b      	ldr	r3, [r3, #4]
 8019f8e:	687a      	ldr	r2, [r7, #4]
 8019f90:	429a      	cmp	r2, r3
 8019f92:	d903      	bls.n	8019f9c <pvPortMalloc+0xa4>
 8019f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d1f1      	bne.n	8019f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019f9c:	4b36      	ldr	r3, [pc, #216]	; (801a078 <pvPortMalloc+0x180>)
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fa2:	429a      	cmp	r2, r3
 8019fa4:	d050      	beq.n	801a048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019fa6:	6a3b      	ldr	r3, [r7, #32]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	2208      	movs	r2, #8
 8019fac:	4413      	add	r3, r2
 8019fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb2:	681a      	ldr	r2, [r3, #0]
 8019fb4:	6a3b      	ldr	r3, [r7, #32]
 8019fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fba:	685a      	ldr	r2, [r3, #4]
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	1ad2      	subs	r2, r2, r3
 8019fc0:	2308      	movs	r3, #8
 8019fc2:	005b      	lsls	r3, r3, #1
 8019fc4:	429a      	cmp	r2, r3
 8019fc6:	d91f      	bls.n	801a008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	4413      	add	r3, r2
 8019fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019fd0:	69bb      	ldr	r3, [r7, #24]
 8019fd2:	f003 0307 	and.w	r3, r3, #7
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d00a      	beq.n	8019ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8019fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fde:	f383 8811 	msr	BASEPRI, r3
 8019fe2:	f3bf 8f6f 	isb	sy
 8019fe6:	f3bf 8f4f 	dsb	sy
 8019fea:	613b      	str	r3, [r7, #16]
}
 8019fec:	bf00      	nop
 8019fee:	e7fe      	b.n	8019fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff2:	685a      	ldr	r2, [r3, #4]
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	1ad2      	subs	r2, r2, r3
 8019ff8:	69bb      	ldr	r3, [r7, #24]
 8019ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ffe:	687a      	ldr	r2, [r7, #4]
 801a000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a002:	69b8      	ldr	r0, [r7, #24]
 801a004:	f000 f908 	bl	801a218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a008:	4b1d      	ldr	r3, [pc, #116]	; (801a080 <pvPortMalloc+0x188>)
 801a00a:	681a      	ldr	r2, [r3, #0]
 801a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a00e:	685b      	ldr	r3, [r3, #4]
 801a010:	1ad3      	subs	r3, r2, r3
 801a012:	4a1b      	ldr	r2, [pc, #108]	; (801a080 <pvPortMalloc+0x188>)
 801a014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a016:	4b1a      	ldr	r3, [pc, #104]	; (801a080 <pvPortMalloc+0x188>)
 801a018:	681a      	ldr	r2, [r3, #0]
 801a01a:	4b1b      	ldr	r3, [pc, #108]	; (801a088 <pvPortMalloc+0x190>)
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	429a      	cmp	r2, r3
 801a020:	d203      	bcs.n	801a02a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a022:	4b17      	ldr	r3, [pc, #92]	; (801a080 <pvPortMalloc+0x188>)
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	4a18      	ldr	r2, [pc, #96]	; (801a088 <pvPortMalloc+0x190>)
 801a028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a02c:	685a      	ldr	r2, [r3, #4]
 801a02e:	4b13      	ldr	r3, [pc, #76]	; (801a07c <pvPortMalloc+0x184>)
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	431a      	orrs	r2, r3
 801a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a03a:	2200      	movs	r2, #0
 801a03c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a03e:	4b13      	ldr	r3, [pc, #76]	; (801a08c <pvPortMalloc+0x194>)
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	3301      	adds	r3, #1
 801a044:	4a11      	ldr	r2, [pc, #68]	; (801a08c <pvPortMalloc+0x194>)
 801a046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a048:	f7fe fc18 	bl	801887c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a04c:	69fb      	ldr	r3, [r7, #28]
 801a04e:	f003 0307 	and.w	r3, r3, #7
 801a052:	2b00      	cmp	r3, #0
 801a054:	d00a      	beq.n	801a06c <pvPortMalloc+0x174>
	__asm volatile
 801a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a05a:	f383 8811 	msr	BASEPRI, r3
 801a05e:	f3bf 8f6f 	isb	sy
 801a062:	f3bf 8f4f 	dsb	sy
 801a066:	60fb      	str	r3, [r7, #12]
}
 801a068:	bf00      	nop
 801a06a:	e7fe      	b.n	801a06a <pvPortMalloc+0x172>
	return pvReturn;
 801a06c:	69fb      	ldr	r3, [r7, #28]
}
 801a06e:	4618      	mov	r0, r3
 801a070:	3728      	adds	r7, #40	; 0x28
 801a072:	46bd      	mov	sp, r7
 801a074:	bd80      	pop	{r7, pc}
 801a076:	bf00      	nop
 801a078:	24006954 	.word	0x24006954
 801a07c:	24006968 	.word	0x24006968
 801a080:	24006958 	.word	0x24006958
 801a084:	2400694c 	.word	0x2400694c
 801a088:	2400695c 	.word	0x2400695c
 801a08c:	24006960 	.word	0x24006960

0801a090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a090:	b580      	push	{r7, lr}
 801a092:	b086      	sub	sp, #24
 801a094:	af00      	add	r7, sp, #0
 801a096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d04d      	beq.n	801a13e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a0a2:	2308      	movs	r3, #8
 801a0a4:	425b      	negs	r3, r3
 801a0a6:	697a      	ldr	r2, [r7, #20]
 801a0a8:	4413      	add	r3, r2
 801a0aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a0ac:	697b      	ldr	r3, [r7, #20]
 801a0ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a0b0:	693b      	ldr	r3, [r7, #16]
 801a0b2:	685a      	ldr	r2, [r3, #4]
 801a0b4:	4b24      	ldr	r3, [pc, #144]	; (801a148 <vPortFree+0xb8>)
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	4013      	ands	r3, r2
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d10a      	bne.n	801a0d4 <vPortFree+0x44>
	__asm volatile
 801a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0c2:	f383 8811 	msr	BASEPRI, r3
 801a0c6:	f3bf 8f6f 	isb	sy
 801a0ca:	f3bf 8f4f 	dsb	sy
 801a0ce:	60fb      	str	r3, [r7, #12]
}
 801a0d0:	bf00      	nop
 801a0d2:	e7fe      	b.n	801a0d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a0d4:	693b      	ldr	r3, [r7, #16]
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d00a      	beq.n	801a0f2 <vPortFree+0x62>
	__asm volatile
 801a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0e0:	f383 8811 	msr	BASEPRI, r3
 801a0e4:	f3bf 8f6f 	isb	sy
 801a0e8:	f3bf 8f4f 	dsb	sy
 801a0ec:	60bb      	str	r3, [r7, #8]
}
 801a0ee:	bf00      	nop
 801a0f0:	e7fe      	b.n	801a0f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a0f2:	693b      	ldr	r3, [r7, #16]
 801a0f4:	685a      	ldr	r2, [r3, #4]
 801a0f6:	4b14      	ldr	r3, [pc, #80]	; (801a148 <vPortFree+0xb8>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	4013      	ands	r3, r2
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d01e      	beq.n	801a13e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a100:	693b      	ldr	r3, [r7, #16]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d11a      	bne.n	801a13e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a108:	693b      	ldr	r3, [r7, #16]
 801a10a:	685a      	ldr	r2, [r3, #4]
 801a10c:	4b0e      	ldr	r3, [pc, #56]	; (801a148 <vPortFree+0xb8>)
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	43db      	mvns	r3, r3
 801a112:	401a      	ands	r2, r3
 801a114:	693b      	ldr	r3, [r7, #16]
 801a116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a118:	f7fe fba2 	bl	8018860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a11c:	693b      	ldr	r3, [r7, #16]
 801a11e:	685a      	ldr	r2, [r3, #4]
 801a120:	4b0a      	ldr	r3, [pc, #40]	; (801a14c <vPortFree+0xbc>)
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	4413      	add	r3, r2
 801a126:	4a09      	ldr	r2, [pc, #36]	; (801a14c <vPortFree+0xbc>)
 801a128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a12a:	6938      	ldr	r0, [r7, #16]
 801a12c:	f000 f874 	bl	801a218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a130:	4b07      	ldr	r3, [pc, #28]	; (801a150 <vPortFree+0xc0>)
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	3301      	adds	r3, #1
 801a136:	4a06      	ldr	r2, [pc, #24]	; (801a150 <vPortFree+0xc0>)
 801a138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a13a:	f7fe fb9f 	bl	801887c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a13e:	bf00      	nop
 801a140:	3718      	adds	r7, #24
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}
 801a146:	bf00      	nop
 801a148:	24006968 	.word	0x24006968
 801a14c:	24006958 	.word	0x24006958
 801a150:	24006964 	.word	0x24006964

0801a154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a154:	b480      	push	{r7}
 801a156:	b085      	sub	sp, #20
 801a158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a15a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a15e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a160:	4b27      	ldr	r3, [pc, #156]	; (801a200 <prvHeapInit+0xac>)
 801a162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	f003 0307 	and.w	r3, r3, #7
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d00c      	beq.n	801a188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	3307      	adds	r3, #7
 801a172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	f023 0307 	bic.w	r3, r3, #7
 801a17a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a17c:	68ba      	ldr	r2, [r7, #8]
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	1ad3      	subs	r3, r2, r3
 801a182:	4a1f      	ldr	r2, [pc, #124]	; (801a200 <prvHeapInit+0xac>)
 801a184:	4413      	add	r3, r2
 801a186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a18c:	4a1d      	ldr	r2, [pc, #116]	; (801a204 <prvHeapInit+0xb0>)
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a192:	4b1c      	ldr	r3, [pc, #112]	; (801a204 <prvHeapInit+0xb0>)
 801a194:	2200      	movs	r2, #0
 801a196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	68ba      	ldr	r2, [r7, #8]
 801a19c:	4413      	add	r3, r2
 801a19e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a1a0:	2208      	movs	r2, #8
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	1a9b      	subs	r3, r3, r2
 801a1a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	f023 0307 	bic.w	r3, r3, #7
 801a1ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	4a15      	ldr	r2, [pc, #84]	; (801a208 <prvHeapInit+0xb4>)
 801a1b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a1b6:	4b14      	ldr	r3, [pc, #80]	; (801a208 <prvHeapInit+0xb4>)
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a1be:	4b12      	ldr	r3, [pc, #72]	; (801a208 <prvHeapInit+0xb4>)
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a1ca:	683b      	ldr	r3, [r7, #0]
 801a1cc:	68fa      	ldr	r2, [r7, #12]
 801a1ce:	1ad2      	subs	r2, r2, r3
 801a1d0:	683b      	ldr	r3, [r7, #0]
 801a1d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a1d4:	4b0c      	ldr	r3, [pc, #48]	; (801a208 <prvHeapInit+0xb4>)
 801a1d6:	681a      	ldr	r2, [r3, #0]
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a1dc:	683b      	ldr	r3, [r7, #0]
 801a1de:	685b      	ldr	r3, [r3, #4]
 801a1e0:	4a0a      	ldr	r2, [pc, #40]	; (801a20c <prvHeapInit+0xb8>)
 801a1e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a1e4:	683b      	ldr	r3, [r7, #0]
 801a1e6:	685b      	ldr	r3, [r3, #4]
 801a1e8:	4a09      	ldr	r2, [pc, #36]	; (801a210 <prvHeapInit+0xbc>)
 801a1ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a1ec:	4b09      	ldr	r3, [pc, #36]	; (801a214 <prvHeapInit+0xc0>)
 801a1ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a1f2:	601a      	str	r2, [r3, #0]
}
 801a1f4:	bf00      	nop
 801a1f6:	3714      	adds	r7, #20
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fe:	4770      	bx	lr
 801a200:	24002d4c 	.word	0x24002d4c
 801a204:	2400694c 	.word	0x2400694c
 801a208:	24006954 	.word	0x24006954
 801a20c:	2400695c 	.word	0x2400695c
 801a210:	24006958 	.word	0x24006958
 801a214:	24006968 	.word	0x24006968

0801a218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a218:	b480      	push	{r7}
 801a21a:	b085      	sub	sp, #20
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a220:	4b28      	ldr	r3, [pc, #160]	; (801a2c4 <prvInsertBlockIntoFreeList+0xac>)
 801a222:	60fb      	str	r3, [r7, #12]
 801a224:	e002      	b.n	801a22c <prvInsertBlockIntoFreeList+0x14>
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	60fb      	str	r3, [r7, #12]
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	687a      	ldr	r2, [r7, #4]
 801a232:	429a      	cmp	r2, r3
 801a234:	d8f7      	bhi.n	801a226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	685b      	ldr	r3, [r3, #4]
 801a23e:	68ba      	ldr	r2, [r7, #8]
 801a240:	4413      	add	r3, r2
 801a242:	687a      	ldr	r2, [r7, #4]
 801a244:	429a      	cmp	r2, r3
 801a246:	d108      	bne.n	801a25a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	685a      	ldr	r2, [r3, #4]
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	685b      	ldr	r3, [r3, #4]
 801a250:	441a      	add	r2, r3
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	685b      	ldr	r3, [r3, #4]
 801a262:	68ba      	ldr	r2, [r7, #8]
 801a264:	441a      	add	r2, r3
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d118      	bne.n	801a2a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	681a      	ldr	r2, [r3, #0]
 801a272:	4b15      	ldr	r3, [pc, #84]	; (801a2c8 <prvInsertBlockIntoFreeList+0xb0>)
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	429a      	cmp	r2, r3
 801a278:	d00d      	beq.n	801a296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	685a      	ldr	r2, [r3, #4]
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	685b      	ldr	r3, [r3, #4]
 801a284:	441a      	add	r2, r3
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	681a      	ldr	r2, [r3, #0]
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	601a      	str	r2, [r3, #0]
 801a294:	e008      	b.n	801a2a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a296:	4b0c      	ldr	r3, [pc, #48]	; (801a2c8 <prvInsertBlockIntoFreeList+0xb0>)
 801a298:	681a      	ldr	r2, [r3, #0]
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	601a      	str	r2, [r3, #0]
 801a29e:	e003      	b.n	801a2a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	681a      	ldr	r2, [r3, #0]
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a2a8:	68fa      	ldr	r2, [r7, #12]
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	429a      	cmp	r2, r3
 801a2ae:	d002      	beq.n	801a2b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	687a      	ldr	r2, [r7, #4]
 801a2b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a2b6:	bf00      	nop
 801a2b8:	3714      	adds	r7, #20
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c0:	4770      	bx	lr
 801a2c2:	bf00      	nop
 801a2c4:	2400694c 	.word	0x2400694c
 801a2c8:	24006954 	.word	0x24006954

0801a2cc <__errno>:
 801a2cc:	4b01      	ldr	r3, [pc, #4]	; (801a2d4 <__errno+0x8>)
 801a2ce:	6818      	ldr	r0, [r3, #0]
 801a2d0:	4770      	bx	lr
 801a2d2:	bf00      	nop
 801a2d4:	240000d4 	.word	0x240000d4

0801a2d8 <__libc_init_array>:
 801a2d8:	b570      	push	{r4, r5, r6, lr}
 801a2da:	4d0d      	ldr	r5, [pc, #52]	; (801a310 <__libc_init_array+0x38>)
 801a2dc:	4c0d      	ldr	r4, [pc, #52]	; (801a314 <__libc_init_array+0x3c>)
 801a2de:	1b64      	subs	r4, r4, r5
 801a2e0:	10a4      	asrs	r4, r4, #2
 801a2e2:	2600      	movs	r6, #0
 801a2e4:	42a6      	cmp	r6, r4
 801a2e6:	d109      	bne.n	801a2fc <__libc_init_array+0x24>
 801a2e8:	4d0b      	ldr	r5, [pc, #44]	; (801a318 <__libc_init_array+0x40>)
 801a2ea:	4c0c      	ldr	r4, [pc, #48]	; (801a31c <__libc_init_array+0x44>)
 801a2ec:	f000 fd2c 	bl	801ad48 <_init>
 801a2f0:	1b64      	subs	r4, r4, r5
 801a2f2:	10a4      	asrs	r4, r4, #2
 801a2f4:	2600      	movs	r6, #0
 801a2f6:	42a6      	cmp	r6, r4
 801a2f8:	d105      	bne.n	801a306 <__libc_init_array+0x2e>
 801a2fa:	bd70      	pop	{r4, r5, r6, pc}
 801a2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a300:	4798      	blx	r3
 801a302:	3601      	adds	r6, #1
 801a304:	e7ee      	b.n	801a2e4 <__libc_init_array+0xc>
 801a306:	f855 3b04 	ldr.w	r3, [r5], #4
 801a30a:	4798      	blx	r3
 801a30c:	3601      	adds	r6, #1
 801a30e:	e7f2      	b.n	801a2f6 <__libc_init_array+0x1e>
 801a310:	0801b200 	.word	0x0801b200
 801a314:	0801b200 	.word	0x0801b200
 801a318:	0801b200 	.word	0x0801b200
 801a31c:	0801b204 	.word	0x0801b204

0801a320 <memcpy>:
 801a320:	440a      	add	r2, r1
 801a322:	4291      	cmp	r1, r2
 801a324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a328:	d100      	bne.n	801a32c <memcpy+0xc>
 801a32a:	4770      	bx	lr
 801a32c:	b510      	push	{r4, lr}
 801a32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a332:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a336:	4291      	cmp	r1, r2
 801a338:	d1f9      	bne.n	801a32e <memcpy+0xe>
 801a33a:	bd10      	pop	{r4, pc}

0801a33c <memset>:
 801a33c:	4402      	add	r2, r0
 801a33e:	4603      	mov	r3, r0
 801a340:	4293      	cmp	r3, r2
 801a342:	d100      	bne.n	801a346 <memset+0xa>
 801a344:	4770      	bx	lr
 801a346:	f803 1b01 	strb.w	r1, [r3], #1
 801a34a:	e7f9      	b.n	801a340 <memset+0x4>

0801a34c <_puts_r>:
 801a34c:	b570      	push	{r4, r5, r6, lr}
 801a34e:	460e      	mov	r6, r1
 801a350:	4605      	mov	r5, r0
 801a352:	b118      	cbz	r0, 801a35c <_puts_r+0x10>
 801a354:	6983      	ldr	r3, [r0, #24]
 801a356:	b90b      	cbnz	r3, 801a35c <_puts_r+0x10>
 801a358:	f000 fa48 	bl	801a7ec <__sinit>
 801a35c:	69ab      	ldr	r3, [r5, #24]
 801a35e:	68ac      	ldr	r4, [r5, #8]
 801a360:	b913      	cbnz	r3, 801a368 <_puts_r+0x1c>
 801a362:	4628      	mov	r0, r5
 801a364:	f000 fa42 	bl	801a7ec <__sinit>
 801a368:	4b2c      	ldr	r3, [pc, #176]	; (801a41c <_puts_r+0xd0>)
 801a36a:	429c      	cmp	r4, r3
 801a36c:	d120      	bne.n	801a3b0 <_puts_r+0x64>
 801a36e:	686c      	ldr	r4, [r5, #4]
 801a370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a372:	07db      	lsls	r3, r3, #31
 801a374:	d405      	bmi.n	801a382 <_puts_r+0x36>
 801a376:	89a3      	ldrh	r3, [r4, #12]
 801a378:	0598      	lsls	r0, r3, #22
 801a37a:	d402      	bmi.n	801a382 <_puts_r+0x36>
 801a37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a37e:	f000 fad3 	bl	801a928 <__retarget_lock_acquire_recursive>
 801a382:	89a3      	ldrh	r3, [r4, #12]
 801a384:	0719      	lsls	r1, r3, #28
 801a386:	d51d      	bpl.n	801a3c4 <_puts_r+0x78>
 801a388:	6923      	ldr	r3, [r4, #16]
 801a38a:	b1db      	cbz	r3, 801a3c4 <_puts_r+0x78>
 801a38c:	3e01      	subs	r6, #1
 801a38e:	68a3      	ldr	r3, [r4, #8]
 801a390:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a394:	3b01      	subs	r3, #1
 801a396:	60a3      	str	r3, [r4, #8]
 801a398:	bb39      	cbnz	r1, 801a3ea <_puts_r+0x9e>
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	da38      	bge.n	801a410 <_puts_r+0xc4>
 801a39e:	4622      	mov	r2, r4
 801a3a0:	210a      	movs	r1, #10
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	f000 f848 	bl	801a438 <__swbuf_r>
 801a3a8:	3001      	adds	r0, #1
 801a3aa:	d011      	beq.n	801a3d0 <_puts_r+0x84>
 801a3ac:	250a      	movs	r5, #10
 801a3ae:	e011      	b.n	801a3d4 <_puts_r+0x88>
 801a3b0:	4b1b      	ldr	r3, [pc, #108]	; (801a420 <_puts_r+0xd4>)
 801a3b2:	429c      	cmp	r4, r3
 801a3b4:	d101      	bne.n	801a3ba <_puts_r+0x6e>
 801a3b6:	68ac      	ldr	r4, [r5, #8]
 801a3b8:	e7da      	b.n	801a370 <_puts_r+0x24>
 801a3ba:	4b1a      	ldr	r3, [pc, #104]	; (801a424 <_puts_r+0xd8>)
 801a3bc:	429c      	cmp	r4, r3
 801a3be:	bf08      	it	eq
 801a3c0:	68ec      	ldreq	r4, [r5, #12]
 801a3c2:	e7d5      	b.n	801a370 <_puts_r+0x24>
 801a3c4:	4621      	mov	r1, r4
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	f000 f888 	bl	801a4dc <__swsetup_r>
 801a3cc:	2800      	cmp	r0, #0
 801a3ce:	d0dd      	beq.n	801a38c <_puts_r+0x40>
 801a3d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a3d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3d6:	07da      	lsls	r2, r3, #31
 801a3d8:	d405      	bmi.n	801a3e6 <_puts_r+0x9a>
 801a3da:	89a3      	ldrh	r3, [r4, #12]
 801a3dc:	059b      	lsls	r3, r3, #22
 801a3de:	d402      	bmi.n	801a3e6 <_puts_r+0x9a>
 801a3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3e2:	f000 faa2 	bl	801a92a <__retarget_lock_release_recursive>
 801a3e6:	4628      	mov	r0, r5
 801a3e8:	bd70      	pop	{r4, r5, r6, pc}
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	da04      	bge.n	801a3f8 <_puts_r+0xac>
 801a3ee:	69a2      	ldr	r2, [r4, #24]
 801a3f0:	429a      	cmp	r2, r3
 801a3f2:	dc06      	bgt.n	801a402 <_puts_r+0xb6>
 801a3f4:	290a      	cmp	r1, #10
 801a3f6:	d004      	beq.n	801a402 <_puts_r+0xb6>
 801a3f8:	6823      	ldr	r3, [r4, #0]
 801a3fa:	1c5a      	adds	r2, r3, #1
 801a3fc:	6022      	str	r2, [r4, #0]
 801a3fe:	7019      	strb	r1, [r3, #0]
 801a400:	e7c5      	b.n	801a38e <_puts_r+0x42>
 801a402:	4622      	mov	r2, r4
 801a404:	4628      	mov	r0, r5
 801a406:	f000 f817 	bl	801a438 <__swbuf_r>
 801a40a:	3001      	adds	r0, #1
 801a40c:	d1bf      	bne.n	801a38e <_puts_r+0x42>
 801a40e:	e7df      	b.n	801a3d0 <_puts_r+0x84>
 801a410:	6823      	ldr	r3, [r4, #0]
 801a412:	250a      	movs	r5, #10
 801a414:	1c5a      	adds	r2, r3, #1
 801a416:	6022      	str	r2, [r4, #0]
 801a418:	701d      	strb	r5, [r3, #0]
 801a41a:	e7db      	b.n	801a3d4 <_puts_r+0x88>
 801a41c:	0801b1b8 	.word	0x0801b1b8
 801a420:	0801b1d8 	.word	0x0801b1d8
 801a424:	0801b198 	.word	0x0801b198

0801a428 <puts>:
 801a428:	4b02      	ldr	r3, [pc, #8]	; (801a434 <puts+0xc>)
 801a42a:	4601      	mov	r1, r0
 801a42c:	6818      	ldr	r0, [r3, #0]
 801a42e:	f7ff bf8d 	b.w	801a34c <_puts_r>
 801a432:	bf00      	nop
 801a434:	240000d4 	.word	0x240000d4

0801a438 <__swbuf_r>:
 801a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a43a:	460e      	mov	r6, r1
 801a43c:	4614      	mov	r4, r2
 801a43e:	4605      	mov	r5, r0
 801a440:	b118      	cbz	r0, 801a44a <__swbuf_r+0x12>
 801a442:	6983      	ldr	r3, [r0, #24]
 801a444:	b90b      	cbnz	r3, 801a44a <__swbuf_r+0x12>
 801a446:	f000 f9d1 	bl	801a7ec <__sinit>
 801a44a:	4b21      	ldr	r3, [pc, #132]	; (801a4d0 <__swbuf_r+0x98>)
 801a44c:	429c      	cmp	r4, r3
 801a44e:	d12b      	bne.n	801a4a8 <__swbuf_r+0x70>
 801a450:	686c      	ldr	r4, [r5, #4]
 801a452:	69a3      	ldr	r3, [r4, #24]
 801a454:	60a3      	str	r3, [r4, #8]
 801a456:	89a3      	ldrh	r3, [r4, #12]
 801a458:	071a      	lsls	r2, r3, #28
 801a45a:	d52f      	bpl.n	801a4bc <__swbuf_r+0x84>
 801a45c:	6923      	ldr	r3, [r4, #16]
 801a45e:	b36b      	cbz	r3, 801a4bc <__swbuf_r+0x84>
 801a460:	6923      	ldr	r3, [r4, #16]
 801a462:	6820      	ldr	r0, [r4, #0]
 801a464:	1ac0      	subs	r0, r0, r3
 801a466:	6963      	ldr	r3, [r4, #20]
 801a468:	b2f6      	uxtb	r6, r6
 801a46a:	4283      	cmp	r3, r0
 801a46c:	4637      	mov	r7, r6
 801a46e:	dc04      	bgt.n	801a47a <__swbuf_r+0x42>
 801a470:	4621      	mov	r1, r4
 801a472:	4628      	mov	r0, r5
 801a474:	f000 f926 	bl	801a6c4 <_fflush_r>
 801a478:	bb30      	cbnz	r0, 801a4c8 <__swbuf_r+0x90>
 801a47a:	68a3      	ldr	r3, [r4, #8]
 801a47c:	3b01      	subs	r3, #1
 801a47e:	60a3      	str	r3, [r4, #8]
 801a480:	6823      	ldr	r3, [r4, #0]
 801a482:	1c5a      	adds	r2, r3, #1
 801a484:	6022      	str	r2, [r4, #0]
 801a486:	701e      	strb	r6, [r3, #0]
 801a488:	6963      	ldr	r3, [r4, #20]
 801a48a:	3001      	adds	r0, #1
 801a48c:	4283      	cmp	r3, r0
 801a48e:	d004      	beq.n	801a49a <__swbuf_r+0x62>
 801a490:	89a3      	ldrh	r3, [r4, #12]
 801a492:	07db      	lsls	r3, r3, #31
 801a494:	d506      	bpl.n	801a4a4 <__swbuf_r+0x6c>
 801a496:	2e0a      	cmp	r6, #10
 801a498:	d104      	bne.n	801a4a4 <__swbuf_r+0x6c>
 801a49a:	4621      	mov	r1, r4
 801a49c:	4628      	mov	r0, r5
 801a49e:	f000 f911 	bl	801a6c4 <_fflush_r>
 801a4a2:	b988      	cbnz	r0, 801a4c8 <__swbuf_r+0x90>
 801a4a4:	4638      	mov	r0, r7
 801a4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4a8:	4b0a      	ldr	r3, [pc, #40]	; (801a4d4 <__swbuf_r+0x9c>)
 801a4aa:	429c      	cmp	r4, r3
 801a4ac:	d101      	bne.n	801a4b2 <__swbuf_r+0x7a>
 801a4ae:	68ac      	ldr	r4, [r5, #8]
 801a4b0:	e7cf      	b.n	801a452 <__swbuf_r+0x1a>
 801a4b2:	4b09      	ldr	r3, [pc, #36]	; (801a4d8 <__swbuf_r+0xa0>)
 801a4b4:	429c      	cmp	r4, r3
 801a4b6:	bf08      	it	eq
 801a4b8:	68ec      	ldreq	r4, [r5, #12]
 801a4ba:	e7ca      	b.n	801a452 <__swbuf_r+0x1a>
 801a4bc:	4621      	mov	r1, r4
 801a4be:	4628      	mov	r0, r5
 801a4c0:	f000 f80c 	bl	801a4dc <__swsetup_r>
 801a4c4:	2800      	cmp	r0, #0
 801a4c6:	d0cb      	beq.n	801a460 <__swbuf_r+0x28>
 801a4c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a4cc:	e7ea      	b.n	801a4a4 <__swbuf_r+0x6c>
 801a4ce:	bf00      	nop
 801a4d0:	0801b1b8 	.word	0x0801b1b8
 801a4d4:	0801b1d8 	.word	0x0801b1d8
 801a4d8:	0801b198 	.word	0x0801b198

0801a4dc <__swsetup_r>:
 801a4dc:	4b32      	ldr	r3, [pc, #200]	; (801a5a8 <__swsetup_r+0xcc>)
 801a4de:	b570      	push	{r4, r5, r6, lr}
 801a4e0:	681d      	ldr	r5, [r3, #0]
 801a4e2:	4606      	mov	r6, r0
 801a4e4:	460c      	mov	r4, r1
 801a4e6:	b125      	cbz	r5, 801a4f2 <__swsetup_r+0x16>
 801a4e8:	69ab      	ldr	r3, [r5, #24]
 801a4ea:	b913      	cbnz	r3, 801a4f2 <__swsetup_r+0x16>
 801a4ec:	4628      	mov	r0, r5
 801a4ee:	f000 f97d 	bl	801a7ec <__sinit>
 801a4f2:	4b2e      	ldr	r3, [pc, #184]	; (801a5ac <__swsetup_r+0xd0>)
 801a4f4:	429c      	cmp	r4, r3
 801a4f6:	d10f      	bne.n	801a518 <__swsetup_r+0x3c>
 801a4f8:	686c      	ldr	r4, [r5, #4]
 801a4fa:	89a3      	ldrh	r3, [r4, #12]
 801a4fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a500:	0719      	lsls	r1, r3, #28
 801a502:	d42c      	bmi.n	801a55e <__swsetup_r+0x82>
 801a504:	06dd      	lsls	r5, r3, #27
 801a506:	d411      	bmi.n	801a52c <__swsetup_r+0x50>
 801a508:	2309      	movs	r3, #9
 801a50a:	6033      	str	r3, [r6, #0]
 801a50c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a510:	81a3      	strh	r3, [r4, #12]
 801a512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a516:	e03e      	b.n	801a596 <__swsetup_r+0xba>
 801a518:	4b25      	ldr	r3, [pc, #148]	; (801a5b0 <__swsetup_r+0xd4>)
 801a51a:	429c      	cmp	r4, r3
 801a51c:	d101      	bne.n	801a522 <__swsetup_r+0x46>
 801a51e:	68ac      	ldr	r4, [r5, #8]
 801a520:	e7eb      	b.n	801a4fa <__swsetup_r+0x1e>
 801a522:	4b24      	ldr	r3, [pc, #144]	; (801a5b4 <__swsetup_r+0xd8>)
 801a524:	429c      	cmp	r4, r3
 801a526:	bf08      	it	eq
 801a528:	68ec      	ldreq	r4, [r5, #12]
 801a52a:	e7e6      	b.n	801a4fa <__swsetup_r+0x1e>
 801a52c:	0758      	lsls	r0, r3, #29
 801a52e:	d512      	bpl.n	801a556 <__swsetup_r+0x7a>
 801a530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a532:	b141      	cbz	r1, 801a546 <__swsetup_r+0x6a>
 801a534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a538:	4299      	cmp	r1, r3
 801a53a:	d002      	beq.n	801a542 <__swsetup_r+0x66>
 801a53c:	4630      	mov	r0, r6
 801a53e:	f000 fa5b 	bl	801a9f8 <_free_r>
 801a542:	2300      	movs	r3, #0
 801a544:	6363      	str	r3, [r4, #52]	; 0x34
 801a546:	89a3      	ldrh	r3, [r4, #12]
 801a548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a54c:	81a3      	strh	r3, [r4, #12]
 801a54e:	2300      	movs	r3, #0
 801a550:	6063      	str	r3, [r4, #4]
 801a552:	6923      	ldr	r3, [r4, #16]
 801a554:	6023      	str	r3, [r4, #0]
 801a556:	89a3      	ldrh	r3, [r4, #12]
 801a558:	f043 0308 	orr.w	r3, r3, #8
 801a55c:	81a3      	strh	r3, [r4, #12]
 801a55e:	6923      	ldr	r3, [r4, #16]
 801a560:	b94b      	cbnz	r3, 801a576 <__swsetup_r+0x9a>
 801a562:	89a3      	ldrh	r3, [r4, #12]
 801a564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a56c:	d003      	beq.n	801a576 <__swsetup_r+0x9a>
 801a56e:	4621      	mov	r1, r4
 801a570:	4630      	mov	r0, r6
 801a572:	f000 fa01 	bl	801a978 <__smakebuf_r>
 801a576:	89a0      	ldrh	r0, [r4, #12]
 801a578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a57c:	f010 0301 	ands.w	r3, r0, #1
 801a580:	d00a      	beq.n	801a598 <__swsetup_r+0xbc>
 801a582:	2300      	movs	r3, #0
 801a584:	60a3      	str	r3, [r4, #8]
 801a586:	6963      	ldr	r3, [r4, #20]
 801a588:	425b      	negs	r3, r3
 801a58a:	61a3      	str	r3, [r4, #24]
 801a58c:	6923      	ldr	r3, [r4, #16]
 801a58e:	b943      	cbnz	r3, 801a5a2 <__swsetup_r+0xc6>
 801a590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a594:	d1ba      	bne.n	801a50c <__swsetup_r+0x30>
 801a596:	bd70      	pop	{r4, r5, r6, pc}
 801a598:	0781      	lsls	r1, r0, #30
 801a59a:	bf58      	it	pl
 801a59c:	6963      	ldrpl	r3, [r4, #20]
 801a59e:	60a3      	str	r3, [r4, #8]
 801a5a0:	e7f4      	b.n	801a58c <__swsetup_r+0xb0>
 801a5a2:	2000      	movs	r0, #0
 801a5a4:	e7f7      	b.n	801a596 <__swsetup_r+0xba>
 801a5a6:	bf00      	nop
 801a5a8:	240000d4 	.word	0x240000d4
 801a5ac:	0801b1b8 	.word	0x0801b1b8
 801a5b0:	0801b1d8 	.word	0x0801b1d8
 801a5b4:	0801b198 	.word	0x0801b198

0801a5b8 <__sflush_r>:
 801a5b8:	898a      	ldrh	r2, [r1, #12]
 801a5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5be:	4605      	mov	r5, r0
 801a5c0:	0710      	lsls	r0, r2, #28
 801a5c2:	460c      	mov	r4, r1
 801a5c4:	d458      	bmi.n	801a678 <__sflush_r+0xc0>
 801a5c6:	684b      	ldr	r3, [r1, #4]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	dc05      	bgt.n	801a5d8 <__sflush_r+0x20>
 801a5cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	dc02      	bgt.n	801a5d8 <__sflush_r+0x20>
 801a5d2:	2000      	movs	r0, #0
 801a5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a5da:	2e00      	cmp	r6, #0
 801a5dc:	d0f9      	beq.n	801a5d2 <__sflush_r+0x1a>
 801a5de:	2300      	movs	r3, #0
 801a5e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a5e4:	682f      	ldr	r7, [r5, #0]
 801a5e6:	602b      	str	r3, [r5, #0]
 801a5e8:	d032      	beq.n	801a650 <__sflush_r+0x98>
 801a5ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a5ec:	89a3      	ldrh	r3, [r4, #12]
 801a5ee:	075a      	lsls	r2, r3, #29
 801a5f0:	d505      	bpl.n	801a5fe <__sflush_r+0x46>
 801a5f2:	6863      	ldr	r3, [r4, #4]
 801a5f4:	1ac0      	subs	r0, r0, r3
 801a5f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a5f8:	b10b      	cbz	r3, 801a5fe <__sflush_r+0x46>
 801a5fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a5fc:	1ac0      	subs	r0, r0, r3
 801a5fe:	2300      	movs	r3, #0
 801a600:	4602      	mov	r2, r0
 801a602:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a604:	6a21      	ldr	r1, [r4, #32]
 801a606:	4628      	mov	r0, r5
 801a608:	47b0      	blx	r6
 801a60a:	1c43      	adds	r3, r0, #1
 801a60c:	89a3      	ldrh	r3, [r4, #12]
 801a60e:	d106      	bne.n	801a61e <__sflush_r+0x66>
 801a610:	6829      	ldr	r1, [r5, #0]
 801a612:	291d      	cmp	r1, #29
 801a614:	d82c      	bhi.n	801a670 <__sflush_r+0xb8>
 801a616:	4a2a      	ldr	r2, [pc, #168]	; (801a6c0 <__sflush_r+0x108>)
 801a618:	40ca      	lsrs	r2, r1
 801a61a:	07d6      	lsls	r6, r2, #31
 801a61c:	d528      	bpl.n	801a670 <__sflush_r+0xb8>
 801a61e:	2200      	movs	r2, #0
 801a620:	6062      	str	r2, [r4, #4]
 801a622:	04d9      	lsls	r1, r3, #19
 801a624:	6922      	ldr	r2, [r4, #16]
 801a626:	6022      	str	r2, [r4, #0]
 801a628:	d504      	bpl.n	801a634 <__sflush_r+0x7c>
 801a62a:	1c42      	adds	r2, r0, #1
 801a62c:	d101      	bne.n	801a632 <__sflush_r+0x7a>
 801a62e:	682b      	ldr	r3, [r5, #0]
 801a630:	b903      	cbnz	r3, 801a634 <__sflush_r+0x7c>
 801a632:	6560      	str	r0, [r4, #84]	; 0x54
 801a634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a636:	602f      	str	r7, [r5, #0]
 801a638:	2900      	cmp	r1, #0
 801a63a:	d0ca      	beq.n	801a5d2 <__sflush_r+0x1a>
 801a63c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a640:	4299      	cmp	r1, r3
 801a642:	d002      	beq.n	801a64a <__sflush_r+0x92>
 801a644:	4628      	mov	r0, r5
 801a646:	f000 f9d7 	bl	801a9f8 <_free_r>
 801a64a:	2000      	movs	r0, #0
 801a64c:	6360      	str	r0, [r4, #52]	; 0x34
 801a64e:	e7c1      	b.n	801a5d4 <__sflush_r+0x1c>
 801a650:	6a21      	ldr	r1, [r4, #32]
 801a652:	2301      	movs	r3, #1
 801a654:	4628      	mov	r0, r5
 801a656:	47b0      	blx	r6
 801a658:	1c41      	adds	r1, r0, #1
 801a65a:	d1c7      	bne.n	801a5ec <__sflush_r+0x34>
 801a65c:	682b      	ldr	r3, [r5, #0]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d0c4      	beq.n	801a5ec <__sflush_r+0x34>
 801a662:	2b1d      	cmp	r3, #29
 801a664:	d001      	beq.n	801a66a <__sflush_r+0xb2>
 801a666:	2b16      	cmp	r3, #22
 801a668:	d101      	bne.n	801a66e <__sflush_r+0xb6>
 801a66a:	602f      	str	r7, [r5, #0]
 801a66c:	e7b1      	b.n	801a5d2 <__sflush_r+0x1a>
 801a66e:	89a3      	ldrh	r3, [r4, #12]
 801a670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a674:	81a3      	strh	r3, [r4, #12]
 801a676:	e7ad      	b.n	801a5d4 <__sflush_r+0x1c>
 801a678:	690f      	ldr	r7, [r1, #16]
 801a67a:	2f00      	cmp	r7, #0
 801a67c:	d0a9      	beq.n	801a5d2 <__sflush_r+0x1a>
 801a67e:	0793      	lsls	r3, r2, #30
 801a680:	680e      	ldr	r6, [r1, #0]
 801a682:	bf08      	it	eq
 801a684:	694b      	ldreq	r3, [r1, #20]
 801a686:	600f      	str	r7, [r1, #0]
 801a688:	bf18      	it	ne
 801a68a:	2300      	movne	r3, #0
 801a68c:	eba6 0807 	sub.w	r8, r6, r7
 801a690:	608b      	str	r3, [r1, #8]
 801a692:	f1b8 0f00 	cmp.w	r8, #0
 801a696:	dd9c      	ble.n	801a5d2 <__sflush_r+0x1a>
 801a698:	6a21      	ldr	r1, [r4, #32]
 801a69a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a69c:	4643      	mov	r3, r8
 801a69e:	463a      	mov	r2, r7
 801a6a0:	4628      	mov	r0, r5
 801a6a2:	47b0      	blx	r6
 801a6a4:	2800      	cmp	r0, #0
 801a6a6:	dc06      	bgt.n	801a6b6 <__sflush_r+0xfe>
 801a6a8:	89a3      	ldrh	r3, [r4, #12]
 801a6aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6ae:	81a3      	strh	r3, [r4, #12]
 801a6b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6b4:	e78e      	b.n	801a5d4 <__sflush_r+0x1c>
 801a6b6:	4407      	add	r7, r0
 801a6b8:	eba8 0800 	sub.w	r8, r8, r0
 801a6bc:	e7e9      	b.n	801a692 <__sflush_r+0xda>
 801a6be:	bf00      	nop
 801a6c0:	20400001 	.word	0x20400001

0801a6c4 <_fflush_r>:
 801a6c4:	b538      	push	{r3, r4, r5, lr}
 801a6c6:	690b      	ldr	r3, [r1, #16]
 801a6c8:	4605      	mov	r5, r0
 801a6ca:	460c      	mov	r4, r1
 801a6cc:	b913      	cbnz	r3, 801a6d4 <_fflush_r+0x10>
 801a6ce:	2500      	movs	r5, #0
 801a6d0:	4628      	mov	r0, r5
 801a6d2:	bd38      	pop	{r3, r4, r5, pc}
 801a6d4:	b118      	cbz	r0, 801a6de <_fflush_r+0x1a>
 801a6d6:	6983      	ldr	r3, [r0, #24]
 801a6d8:	b90b      	cbnz	r3, 801a6de <_fflush_r+0x1a>
 801a6da:	f000 f887 	bl	801a7ec <__sinit>
 801a6de:	4b14      	ldr	r3, [pc, #80]	; (801a730 <_fflush_r+0x6c>)
 801a6e0:	429c      	cmp	r4, r3
 801a6e2:	d11b      	bne.n	801a71c <_fflush_r+0x58>
 801a6e4:	686c      	ldr	r4, [r5, #4]
 801a6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d0ef      	beq.n	801a6ce <_fflush_r+0xa>
 801a6ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a6f0:	07d0      	lsls	r0, r2, #31
 801a6f2:	d404      	bmi.n	801a6fe <_fflush_r+0x3a>
 801a6f4:	0599      	lsls	r1, r3, #22
 801a6f6:	d402      	bmi.n	801a6fe <_fflush_r+0x3a>
 801a6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a6fa:	f000 f915 	bl	801a928 <__retarget_lock_acquire_recursive>
 801a6fe:	4628      	mov	r0, r5
 801a700:	4621      	mov	r1, r4
 801a702:	f7ff ff59 	bl	801a5b8 <__sflush_r>
 801a706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a708:	07da      	lsls	r2, r3, #31
 801a70a:	4605      	mov	r5, r0
 801a70c:	d4e0      	bmi.n	801a6d0 <_fflush_r+0xc>
 801a70e:	89a3      	ldrh	r3, [r4, #12]
 801a710:	059b      	lsls	r3, r3, #22
 801a712:	d4dd      	bmi.n	801a6d0 <_fflush_r+0xc>
 801a714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a716:	f000 f908 	bl	801a92a <__retarget_lock_release_recursive>
 801a71a:	e7d9      	b.n	801a6d0 <_fflush_r+0xc>
 801a71c:	4b05      	ldr	r3, [pc, #20]	; (801a734 <_fflush_r+0x70>)
 801a71e:	429c      	cmp	r4, r3
 801a720:	d101      	bne.n	801a726 <_fflush_r+0x62>
 801a722:	68ac      	ldr	r4, [r5, #8]
 801a724:	e7df      	b.n	801a6e6 <_fflush_r+0x22>
 801a726:	4b04      	ldr	r3, [pc, #16]	; (801a738 <_fflush_r+0x74>)
 801a728:	429c      	cmp	r4, r3
 801a72a:	bf08      	it	eq
 801a72c:	68ec      	ldreq	r4, [r5, #12]
 801a72e:	e7da      	b.n	801a6e6 <_fflush_r+0x22>
 801a730:	0801b1b8 	.word	0x0801b1b8
 801a734:	0801b1d8 	.word	0x0801b1d8
 801a738:	0801b198 	.word	0x0801b198

0801a73c <std>:
 801a73c:	2300      	movs	r3, #0
 801a73e:	b510      	push	{r4, lr}
 801a740:	4604      	mov	r4, r0
 801a742:	e9c0 3300 	strd	r3, r3, [r0]
 801a746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a74a:	6083      	str	r3, [r0, #8]
 801a74c:	8181      	strh	r1, [r0, #12]
 801a74e:	6643      	str	r3, [r0, #100]	; 0x64
 801a750:	81c2      	strh	r2, [r0, #14]
 801a752:	6183      	str	r3, [r0, #24]
 801a754:	4619      	mov	r1, r3
 801a756:	2208      	movs	r2, #8
 801a758:	305c      	adds	r0, #92	; 0x5c
 801a75a:	f7ff fdef 	bl	801a33c <memset>
 801a75e:	4b05      	ldr	r3, [pc, #20]	; (801a774 <std+0x38>)
 801a760:	6263      	str	r3, [r4, #36]	; 0x24
 801a762:	4b05      	ldr	r3, [pc, #20]	; (801a778 <std+0x3c>)
 801a764:	62a3      	str	r3, [r4, #40]	; 0x28
 801a766:	4b05      	ldr	r3, [pc, #20]	; (801a77c <std+0x40>)
 801a768:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a76a:	4b05      	ldr	r3, [pc, #20]	; (801a780 <std+0x44>)
 801a76c:	6224      	str	r4, [r4, #32]
 801a76e:	6323      	str	r3, [r4, #48]	; 0x30
 801a770:	bd10      	pop	{r4, pc}
 801a772:	bf00      	nop
 801a774:	0801abd9 	.word	0x0801abd9
 801a778:	0801abfb 	.word	0x0801abfb
 801a77c:	0801ac33 	.word	0x0801ac33
 801a780:	0801ac57 	.word	0x0801ac57

0801a784 <_cleanup_r>:
 801a784:	4901      	ldr	r1, [pc, #4]	; (801a78c <_cleanup_r+0x8>)
 801a786:	f000 b8af 	b.w	801a8e8 <_fwalk_reent>
 801a78a:	bf00      	nop
 801a78c:	0801a6c5 	.word	0x0801a6c5

0801a790 <__sfmoreglue>:
 801a790:	b570      	push	{r4, r5, r6, lr}
 801a792:	2268      	movs	r2, #104	; 0x68
 801a794:	1e4d      	subs	r5, r1, #1
 801a796:	4355      	muls	r5, r2
 801a798:	460e      	mov	r6, r1
 801a79a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a79e:	f000 f997 	bl	801aad0 <_malloc_r>
 801a7a2:	4604      	mov	r4, r0
 801a7a4:	b140      	cbz	r0, 801a7b8 <__sfmoreglue+0x28>
 801a7a6:	2100      	movs	r1, #0
 801a7a8:	e9c0 1600 	strd	r1, r6, [r0]
 801a7ac:	300c      	adds	r0, #12
 801a7ae:	60a0      	str	r0, [r4, #8]
 801a7b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a7b4:	f7ff fdc2 	bl	801a33c <memset>
 801a7b8:	4620      	mov	r0, r4
 801a7ba:	bd70      	pop	{r4, r5, r6, pc}

0801a7bc <__sfp_lock_acquire>:
 801a7bc:	4801      	ldr	r0, [pc, #4]	; (801a7c4 <__sfp_lock_acquire+0x8>)
 801a7be:	f000 b8b3 	b.w	801a928 <__retarget_lock_acquire_recursive>
 801a7c2:	bf00      	nop
 801a7c4:	2400696d 	.word	0x2400696d

0801a7c8 <__sfp_lock_release>:
 801a7c8:	4801      	ldr	r0, [pc, #4]	; (801a7d0 <__sfp_lock_release+0x8>)
 801a7ca:	f000 b8ae 	b.w	801a92a <__retarget_lock_release_recursive>
 801a7ce:	bf00      	nop
 801a7d0:	2400696d 	.word	0x2400696d

0801a7d4 <__sinit_lock_acquire>:
 801a7d4:	4801      	ldr	r0, [pc, #4]	; (801a7dc <__sinit_lock_acquire+0x8>)
 801a7d6:	f000 b8a7 	b.w	801a928 <__retarget_lock_acquire_recursive>
 801a7da:	bf00      	nop
 801a7dc:	2400696e 	.word	0x2400696e

0801a7e0 <__sinit_lock_release>:
 801a7e0:	4801      	ldr	r0, [pc, #4]	; (801a7e8 <__sinit_lock_release+0x8>)
 801a7e2:	f000 b8a2 	b.w	801a92a <__retarget_lock_release_recursive>
 801a7e6:	bf00      	nop
 801a7e8:	2400696e 	.word	0x2400696e

0801a7ec <__sinit>:
 801a7ec:	b510      	push	{r4, lr}
 801a7ee:	4604      	mov	r4, r0
 801a7f0:	f7ff fff0 	bl	801a7d4 <__sinit_lock_acquire>
 801a7f4:	69a3      	ldr	r3, [r4, #24]
 801a7f6:	b11b      	cbz	r3, 801a800 <__sinit+0x14>
 801a7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7fc:	f7ff bff0 	b.w	801a7e0 <__sinit_lock_release>
 801a800:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a804:	6523      	str	r3, [r4, #80]	; 0x50
 801a806:	4b13      	ldr	r3, [pc, #76]	; (801a854 <__sinit+0x68>)
 801a808:	4a13      	ldr	r2, [pc, #76]	; (801a858 <__sinit+0x6c>)
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a80e:	42a3      	cmp	r3, r4
 801a810:	bf04      	itt	eq
 801a812:	2301      	moveq	r3, #1
 801a814:	61a3      	streq	r3, [r4, #24]
 801a816:	4620      	mov	r0, r4
 801a818:	f000 f820 	bl	801a85c <__sfp>
 801a81c:	6060      	str	r0, [r4, #4]
 801a81e:	4620      	mov	r0, r4
 801a820:	f000 f81c 	bl	801a85c <__sfp>
 801a824:	60a0      	str	r0, [r4, #8]
 801a826:	4620      	mov	r0, r4
 801a828:	f000 f818 	bl	801a85c <__sfp>
 801a82c:	2200      	movs	r2, #0
 801a82e:	60e0      	str	r0, [r4, #12]
 801a830:	2104      	movs	r1, #4
 801a832:	6860      	ldr	r0, [r4, #4]
 801a834:	f7ff ff82 	bl	801a73c <std>
 801a838:	68a0      	ldr	r0, [r4, #8]
 801a83a:	2201      	movs	r2, #1
 801a83c:	2109      	movs	r1, #9
 801a83e:	f7ff ff7d 	bl	801a73c <std>
 801a842:	68e0      	ldr	r0, [r4, #12]
 801a844:	2202      	movs	r2, #2
 801a846:	2112      	movs	r1, #18
 801a848:	f7ff ff78 	bl	801a73c <std>
 801a84c:	2301      	movs	r3, #1
 801a84e:	61a3      	str	r3, [r4, #24]
 801a850:	e7d2      	b.n	801a7f8 <__sinit+0xc>
 801a852:	bf00      	nop
 801a854:	0801b194 	.word	0x0801b194
 801a858:	0801a785 	.word	0x0801a785

0801a85c <__sfp>:
 801a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a85e:	4607      	mov	r7, r0
 801a860:	f7ff ffac 	bl	801a7bc <__sfp_lock_acquire>
 801a864:	4b1e      	ldr	r3, [pc, #120]	; (801a8e0 <__sfp+0x84>)
 801a866:	681e      	ldr	r6, [r3, #0]
 801a868:	69b3      	ldr	r3, [r6, #24]
 801a86a:	b913      	cbnz	r3, 801a872 <__sfp+0x16>
 801a86c:	4630      	mov	r0, r6
 801a86e:	f7ff ffbd 	bl	801a7ec <__sinit>
 801a872:	3648      	adds	r6, #72	; 0x48
 801a874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a878:	3b01      	subs	r3, #1
 801a87a:	d503      	bpl.n	801a884 <__sfp+0x28>
 801a87c:	6833      	ldr	r3, [r6, #0]
 801a87e:	b30b      	cbz	r3, 801a8c4 <__sfp+0x68>
 801a880:	6836      	ldr	r6, [r6, #0]
 801a882:	e7f7      	b.n	801a874 <__sfp+0x18>
 801a884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a888:	b9d5      	cbnz	r5, 801a8c0 <__sfp+0x64>
 801a88a:	4b16      	ldr	r3, [pc, #88]	; (801a8e4 <__sfp+0x88>)
 801a88c:	60e3      	str	r3, [r4, #12]
 801a88e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a892:	6665      	str	r5, [r4, #100]	; 0x64
 801a894:	f000 f847 	bl	801a926 <__retarget_lock_init_recursive>
 801a898:	f7ff ff96 	bl	801a7c8 <__sfp_lock_release>
 801a89c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a8a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a8a4:	6025      	str	r5, [r4, #0]
 801a8a6:	61a5      	str	r5, [r4, #24]
 801a8a8:	2208      	movs	r2, #8
 801a8aa:	4629      	mov	r1, r5
 801a8ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a8b0:	f7ff fd44 	bl	801a33c <memset>
 801a8b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a8b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a8bc:	4620      	mov	r0, r4
 801a8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8c0:	3468      	adds	r4, #104	; 0x68
 801a8c2:	e7d9      	b.n	801a878 <__sfp+0x1c>
 801a8c4:	2104      	movs	r1, #4
 801a8c6:	4638      	mov	r0, r7
 801a8c8:	f7ff ff62 	bl	801a790 <__sfmoreglue>
 801a8cc:	4604      	mov	r4, r0
 801a8ce:	6030      	str	r0, [r6, #0]
 801a8d0:	2800      	cmp	r0, #0
 801a8d2:	d1d5      	bne.n	801a880 <__sfp+0x24>
 801a8d4:	f7ff ff78 	bl	801a7c8 <__sfp_lock_release>
 801a8d8:	230c      	movs	r3, #12
 801a8da:	603b      	str	r3, [r7, #0]
 801a8dc:	e7ee      	b.n	801a8bc <__sfp+0x60>
 801a8de:	bf00      	nop
 801a8e0:	0801b194 	.word	0x0801b194
 801a8e4:	ffff0001 	.word	0xffff0001

0801a8e8 <_fwalk_reent>:
 801a8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8ec:	4606      	mov	r6, r0
 801a8ee:	4688      	mov	r8, r1
 801a8f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a8f4:	2700      	movs	r7, #0
 801a8f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a8fa:	f1b9 0901 	subs.w	r9, r9, #1
 801a8fe:	d505      	bpl.n	801a90c <_fwalk_reent+0x24>
 801a900:	6824      	ldr	r4, [r4, #0]
 801a902:	2c00      	cmp	r4, #0
 801a904:	d1f7      	bne.n	801a8f6 <_fwalk_reent+0xe>
 801a906:	4638      	mov	r0, r7
 801a908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a90c:	89ab      	ldrh	r3, [r5, #12]
 801a90e:	2b01      	cmp	r3, #1
 801a910:	d907      	bls.n	801a922 <_fwalk_reent+0x3a>
 801a912:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a916:	3301      	adds	r3, #1
 801a918:	d003      	beq.n	801a922 <_fwalk_reent+0x3a>
 801a91a:	4629      	mov	r1, r5
 801a91c:	4630      	mov	r0, r6
 801a91e:	47c0      	blx	r8
 801a920:	4307      	orrs	r7, r0
 801a922:	3568      	adds	r5, #104	; 0x68
 801a924:	e7e9      	b.n	801a8fa <_fwalk_reent+0x12>

0801a926 <__retarget_lock_init_recursive>:
 801a926:	4770      	bx	lr

0801a928 <__retarget_lock_acquire_recursive>:
 801a928:	4770      	bx	lr

0801a92a <__retarget_lock_release_recursive>:
 801a92a:	4770      	bx	lr

0801a92c <__swhatbuf_r>:
 801a92c:	b570      	push	{r4, r5, r6, lr}
 801a92e:	460e      	mov	r6, r1
 801a930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a934:	2900      	cmp	r1, #0
 801a936:	b096      	sub	sp, #88	; 0x58
 801a938:	4614      	mov	r4, r2
 801a93a:	461d      	mov	r5, r3
 801a93c:	da08      	bge.n	801a950 <__swhatbuf_r+0x24>
 801a93e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a942:	2200      	movs	r2, #0
 801a944:	602a      	str	r2, [r5, #0]
 801a946:	061a      	lsls	r2, r3, #24
 801a948:	d410      	bmi.n	801a96c <__swhatbuf_r+0x40>
 801a94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a94e:	e00e      	b.n	801a96e <__swhatbuf_r+0x42>
 801a950:	466a      	mov	r2, sp
 801a952:	f000 f9a7 	bl	801aca4 <_fstat_r>
 801a956:	2800      	cmp	r0, #0
 801a958:	dbf1      	blt.n	801a93e <__swhatbuf_r+0x12>
 801a95a:	9a01      	ldr	r2, [sp, #4]
 801a95c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a960:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a964:	425a      	negs	r2, r3
 801a966:	415a      	adcs	r2, r3
 801a968:	602a      	str	r2, [r5, #0]
 801a96a:	e7ee      	b.n	801a94a <__swhatbuf_r+0x1e>
 801a96c:	2340      	movs	r3, #64	; 0x40
 801a96e:	2000      	movs	r0, #0
 801a970:	6023      	str	r3, [r4, #0]
 801a972:	b016      	add	sp, #88	; 0x58
 801a974:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a978 <__smakebuf_r>:
 801a978:	898b      	ldrh	r3, [r1, #12]
 801a97a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a97c:	079d      	lsls	r5, r3, #30
 801a97e:	4606      	mov	r6, r0
 801a980:	460c      	mov	r4, r1
 801a982:	d507      	bpl.n	801a994 <__smakebuf_r+0x1c>
 801a984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a988:	6023      	str	r3, [r4, #0]
 801a98a:	6123      	str	r3, [r4, #16]
 801a98c:	2301      	movs	r3, #1
 801a98e:	6163      	str	r3, [r4, #20]
 801a990:	b002      	add	sp, #8
 801a992:	bd70      	pop	{r4, r5, r6, pc}
 801a994:	ab01      	add	r3, sp, #4
 801a996:	466a      	mov	r2, sp
 801a998:	f7ff ffc8 	bl	801a92c <__swhatbuf_r>
 801a99c:	9900      	ldr	r1, [sp, #0]
 801a99e:	4605      	mov	r5, r0
 801a9a0:	4630      	mov	r0, r6
 801a9a2:	f000 f895 	bl	801aad0 <_malloc_r>
 801a9a6:	b948      	cbnz	r0, 801a9bc <__smakebuf_r+0x44>
 801a9a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9ac:	059a      	lsls	r2, r3, #22
 801a9ae:	d4ef      	bmi.n	801a990 <__smakebuf_r+0x18>
 801a9b0:	f023 0303 	bic.w	r3, r3, #3
 801a9b4:	f043 0302 	orr.w	r3, r3, #2
 801a9b8:	81a3      	strh	r3, [r4, #12]
 801a9ba:	e7e3      	b.n	801a984 <__smakebuf_r+0xc>
 801a9bc:	4b0d      	ldr	r3, [pc, #52]	; (801a9f4 <__smakebuf_r+0x7c>)
 801a9be:	62b3      	str	r3, [r6, #40]	; 0x28
 801a9c0:	89a3      	ldrh	r3, [r4, #12]
 801a9c2:	6020      	str	r0, [r4, #0]
 801a9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9c8:	81a3      	strh	r3, [r4, #12]
 801a9ca:	9b00      	ldr	r3, [sp, #0]
 801a9cc:	6163      	str	r3, [r4, #20]
 801a9ce:	9b01      	ldr	r3, [sp, #4]
 801a9d0:	6120      	str	r0, [r4, #16]
 801a9d2:	b15b      	cbz	r3, 801a9ec <__smakebuf_r+0x74>
 801a9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a9d8:	4630      	mov	r0, r6
 801a9da:	f000 f975 	bl	801acc8 <_isatty_r>
 801a9de:	b128      	cbz	r0, 801a9ec <__smakebuf_r+0x74>
 801a9e0:	89a3      	ldrh	r3, [r4, #12]
 801a9e2:	f023 0303 	bic.w	r3, r3, #3
 801a9e6:	f043 0301 	orr.w	r3, r3, #1
 801a9ea:	81a3      	strh	r3, [r4, #12]
 801a9ec:	89a0      	ldrh	r0, [r4, #12]
 801a9ee:	4305      	orrs	r5, r0
 801a9f0:	81a5      	strh	r5, [r4, #12]
 801a9f2:	e7cd      	b.n	801a990 <__smakebuf_r+0x18>
 801a9f4:	0801a785 	.word	0x0801a785

0801a9f8 <_free_r>:
 801a9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a9fa:	2900      	cmp	r1, #0
 801a9fc:	d044      	beq.n	801aa88 <_free_r+0x90>
 801a9fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa02:	9001      	str	r0, [sp, #4]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	f1a1 0404 	sub.w	r4, r1, #4
 801aa0a:	bfb8      	it	lt
 801aa0c:	18e4      	addlt	r4, r4, r3
 801aa0e:	f000 f97d 	bl	801ad0c <__malloc_lock>
 801aa12:	4a1e      	ldr	r2, [pc, #120]	; (801aa8c <_free_r+0x94>)
 801aa14:	9801      	ldr	r0, [sp, #4]
 801aa16:	6813      	ldr	r3, [r2, #0]
 801aa18:	b933      	cbnz	r3, 801aa28 <_free_r+0x30>
 801aa1a:	6063      	str	r3, [r4, #4]
 801aa1c:	6014      	str	r4, [r2, #0]
 801aa1e:	b003      	add	sp, #12
 801aa20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa24:	f000 b978 	b.w	801ad18 <__malloc_unlock>
 801aa28:	42a3      	cmp	r3, r4
 801aa2a:	d908      	bls.n	801aa3e <_free_r+0x46>
 801aa2c:	6825      	ldr	r5, [r4, #0]
 801aa2e:	1961      	adds	r1, r4, r5
 801aa30:	428b      	cmp	r3, r1
 801aa32:	bf01      	itttt	eq
 801aa34:	6819      	ldreq	r1, [r3, #0]
 801aa36:	685b      	ldreq	r3, [r3, #4]
 801aa38:	1949      	addeq	r1, r1, r5
 801aa3a:	6021      	streq	r1, [r4, #0]
 801aa3c:	e7ed      	b.n	801aa1a <_free_r+0x22>
 801aa3e:	461a      	mov	r2, r3
 801aa40:	685b      	ldr	r3, [r3, #4]
 801aa42:	b10b      	cbz	r3, 801aa48 <_free_r+0x50>
 801aa44:	42a3      	cmp	r3, r4
 801aa46:	d9fa      	bls.n	801aa3e <_free_r+0x46>
 801aa48:	6811      	ldr	r1, [r2, #0]
 801aa4a:	1855      	adds	r5, r2, r1
 801aa4c:	42a5      	cmp	r5, r4
 801aa4e:	d10b      	bne.n	801aa68 <_free_r+0x70>
 801aa50:	6824      	ldr	r4, [r4, #0]
 801aa52:	4421      	add	r1, r4
 801aa54:	1854      	adds	r4, r2, r1
 801aa56:	42a3      	cmp	r3, r4
 801aa58:	6011      	str	r1, [r2, #0]
 801aa5a:	d1e0      	bne.n	801aa1e <_free_r+0x26>
 801aa5c:	681c      	ldr	r4, [r3, #0]
 801aa5e:	685b      	ldr	r3, [r3, #4]
 801aa60:	6053      	str	r3, [r2, #4]
 801aa62:	4421      	add	r1, r4
 801aa64:	6011      	str	r1, [r2, #0]
 801aa66:	e7da      	b.n	801aa1e <_free_r+0x26>
 801aa68:	d902      	bls.n	801aa70 <_free_r+0x78>
 801aa6a:	230c      	movs	r3, #12
 801aa6c:	6003      	str	r3, [r0, #0]
 801aa6e:	e7d6      	b.n	801aa1e <_free_r+0x26>
 801aa70:	6825      	ldr	r5, [r4, #0]
 801aa72:	1961      	adds	r1, r4, r5
 801aa74:	428b      	cmp	r3, r1
 801aa76:	bf04      	itt	eq
 801aa78:	6819      	ldreq	r1, [r3, #0]
 801aa7a:	685b      	ldreq	r3, [r3, #4]
 801aa7c:	6063      	str	r3, [r4, #4]
 801aa7e:	bf04      	itt	eq
 801aa80:	1949      	addeq	r1, r1, r5
 801aa82:	6021      	streq	r1, [r4, #0]
 801aa84:	6054      	str	r4, [r2, #4]
 801aa86:	e7ca      	b.n	801aa1e <_free_r+0x26>
 801aa88:	b003      	add	sp, #12
 801aa8a:	bd30      	pop	{r4, r5, pc}
 801aa8c:	24006970 	.word	0x24006970

0801aa90 <sbrk_aligned>:
 801aa90:	b570      	push	{r4, r5, r6, lr}
 801aa92:	4e0e      	ldr	r6, [pc, #56]	; (801aacc <sbrk_aligned+0x3c>)
 801aa94:	460c      	mov	r4, r1
 801aa96:	6831      	ldr	r1, [r6, #0]
 801aa98:	4605      	mov	r5, r0
 801aa9a:	b911      	cbnz	r1, 801aaa2 <sbrk_aligned+0x12>
 801aa9c:	f000 f88c 	bl	801abb8 <_sbrk_r>
 801aaa0:	6030      	str	r0, [r6, #0]
 801aaa2:	4621      	mov	r1, r4
 801aaa4:	4628      	mov	r0, r5
 801aaa6:	f000 f887 	bl	801abb8 <_sbrk_r>
 801aaaa:	1c43      	adds	r3, r0, #1
 801aaac:	d00a      	beq.n	801aac4 <sbrk_aligned+0x34>
 801aaae:	1cc4      	adds	r4, r0, #3
 801aab0:	f024 0403 	bic.w	r4, r4, #3
 801aab4:	42a0      	cmp	r0, r4
 801aab6:	d007      	beq.n	801aac8 <sbrk_aligned+0x38>
 801aab8:	1a21      	subs	r1, r4, r0
 801aaba:	4628      	mov	r0, r5
 801aabc:	f000 f87c 	bl	801abb8 <_sbrk_r>
 801aac0:	3001      	adds	r0, #1
 801aac2:	d101      	bne.n	801aac8 <sbrk_aligned+0x38>
 801aac4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801aac8:	4620      	mov	r0, r4
 801aaca:	bd70      	pop	{r4, r5, r6, pc}
 801aacc:	24006974 	.word	0x24006974

0801aad0 <_malloc_r>:
 801aad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aad4:	1ccd      	adds	r5, r1, #3
 801aad6:	f025 0503 	bic.w	r5, r5, #3
 801aada:	3508      	adds	r5, #8
 801aadc:	2d0c      	cmp	r5, #12
 801aade:	bf38      	it	cc
 801aae0:	250c      	movcc	r5, #12
 801aae2:	2d00      	cmp	r5, #0
 801aae4:	4607      	mov	r7, r0
 801aae6:	db01      	blt.n	801aaec <_malloc_r+0x1c>
 801aae8:	42a9      	cmp	r1, r5
 801aaea:	d905      	bls.n	801aaf8 <_malloc_r+0x28>
 801aaec:	230c      	movs	r3, #12
 801aaee:	603b      	str	r3, [r7, #0]
 801aaf0:	2600      	movs	r6, #0
 801aaf2:	4630      	mov	r0, r6
 801aaf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aaf8:	4e2e      	ldr	r6, [pc, #184]	; (801abb4 <_malloc_r+0xe4>)
 801aafa:	f000 f907 	bl	801ad0c <__malloc_lock>
 801aafe:	6833      	ldr	r3, [r6, #0]
 801ab00:	461c      	mov	r4, r3
 801ab02:	bb34      	cbnz	r4, 801ab52 <_malloc_r+0x82>
 801ab04:	4629      	mov	r1, r5
 801ab06:	4638      	mov	r0, r7
 801ab08:	f7ff ffc2 	bl	801aa90 <sbrk_aligned>
 801ab0c:	1c43      	adds	r3, r0, #1
 801ab0e:	4604      	mov	r4, r0
 801ab10:	d14d      	bne.n	801abae <_malloc_r+0xde>
 801ab12:	6834      	ldr	r4, [r6, #0]
 801ab14:	4626      	mov	r6, r4
 801ab16:	2e00      	cmp	r6, #0
 801ab18:	d140      	bne.n	801ab9c <_malloc_r+0xcc>
 801ab1a:	6823      	ldr	r3, [r4, #0]
 801ab1c:	4631      	mov	r1, r6
 801ab1e:	4638      	mov	r0, r7
 801ab20:	eb04 0803 	add.w	r8, r4, r3
 801ab24:	f000 f848 	bl	801abb8 <_sbrk_r>
 801ab28:	4580      	cmp	r8, r0
 801ab2a:	d13a      	bne.n	801aba2 <_malloc_r+0xd2>
 801ab2c:	6821      	ldr	r1, [r4, #0]
 801ab2e:	3503      	adds	r5, #3
 801ab30:	1a6d      	subs	r5, r5, r1
 801ab32:	f025 0503 	bic.w	r5, r5, #3
 801ab36:	3508      	adds	r5, #8
 801ab38:	2d0c      	cmp	r5, #12
 801ab3a:	bf38      	it	cc
 801ab3c:	250c      	movcc	r5, #12
 801ab3e:	4629      	mov	r1, r5
 801ab40:	4638      	mov	r0, r7
 801ab42:	f7ff ffa5 	bl	801aa90 <sbrk_aligned>
 801ab46:	3001      	adds	r0, #1
 801ab48:	d02b      	beq.n	801aba2 <_malloc_r+0xd2>
 801ab4a:	6823      	ldr	r3, [r4, #0]
 801ab4c:	442b      	add	r3, r5
 801ab4e:	6023      	str	r3, [r4, #0]
 801ab50:	e00e      	b.n	801ab70 <_malloc_r+0xa0>
 801ab52:	6822      	ldr	r2, [r4, #0]
 801ab54:	1b52      	subs	r2, r2, r5
 801ab56:	d41e      	bmi.n	801ab96 <_malloc_r+0xc6>
 801ab58:	2a0b      	cmp	r2, #11
 801ab5a:	d916      	bls.n	801ab8a <_malloc_r+0xba>
 801ab5c:	1961      	adds	r1, r4, r5
 801ab5e:	42a3      	cmp	r3, r4
 801ab60:	6025      	str	r5, [r4, #0]
 801ab62:	bf18      	it	ne
 801ab64:	6059      	strne	r1, [r3, #4]
 801ab66:	6863      	ldr	r3, [r4, #4]
 801ab68:	bf08      	it	eq
 801ab6a:	6031      	streq	r1, [r6, #0]
 801ab6c:	5162      	str	r2, [r4, r5]
 801ab6e:	604b      	str	r3, [r1, #4]
 801ab70:	4638      	mov	r0, r7
 801ab72:	f104 060b 	add.w	r6, r4, #11
 801ab76:	f000 f8cf 	bl	801ad18 <__malloc_unlock>
 801ab7a:	f026 0607 	bic.w	r6, r6, #7
 801ab7e:	1d23      	adds	r3, r4, #4
 801ab80:	1af2      	subs	r2, r6, r3
 801ab82:	d0b6      	beq.n	801aaf2 <_malloc_r+0x22>
 801ab84:	1b9b      	subs	r3, r3, r6
 801ab86:	50a3      	str	r3, [r4, r2]
 801ab88:	e7b3      	b.n	801aaf2 <_malloc_r+0x22>
 801ab8a:	6862      	ldr	r2, [r4, #4]
 801ab8c:	42a3      	cmp	r3, r4
 801ab8e:	bf0c      	ite	eq
 801ab90:	6032      	streq	r2, [r6, #0]
 801ab92:	605a      	strne	r2, [r3, #4]
 801ab94:	e7ec      	b.n	801ab70 <_malloc_r+0xa0>
 801ab96:	4623      	mov	r3, r4
 801ab98:	6864      	ldr	r4, [r4, #4]
 801ab9a:	e7b2      	b.n	801ab02 <_malloc_r+0x32>
 801ab9c:	4634      	mov	r4, r6
 801ab9e:	6876      	ldr	r6, [r6, #4]
 801aba0:	e7b9      	b.n	801ab16 <_malloc_r+0x46>
 801aba2:	230c      	movs	r3, #12
 801aba4:	603b      	str	r3, [r7, #0]
 801aba6:	4638      	mov	r0, r7
 801aba8:	f000 f8b6 	bl	801ad18 <__malloc_unlock>
 801abac:	e7a1      	b.n	801aaf2 <_malloc_r+0x22>
 801abae:	6025      	str	r5, [r4, #0]
 801abb0:	e7de      	b.n	801ab70 <_malloc_r+0xa0>
 801abb2:	bf00      	nop
 801abb4:	24006970 	.word	0x24006970

0801abb8 <_sbrk_r>:
 801abb8:	b538      	push	{r3, r4, r5, lr}
 801abba:	4d06      	ldr	r5, [pc, #24]	; (801abd4 <_sbrk_r+0x1c>)
 801abbc:	2300      	movs	r3, #0
 801abbe:	4604      	mov	r4, r0
 801abc0:	4608      	mov	r0, r1
 801abc2:	602b      	str	r3, [r5, #0]
 801abc4:	f7e9 ff36 	bl	8004a34 <_sbrk>
 801abc8:	1c43      	adds	r3, r0, #1
 801abca:	d102      	bne.n	801abd2 <_sbrk_r+0x1a>
 801abcc:	682b      	ldr	r3, [r5, #0]
 801abce:	b103      	cbz	r3, 801abd2 <_sbrk_r+0x1a>
 801abd0:	6023      	str	r3, [r4, #0]
 801abd2:	bd38      	pop	{r3, r4, r5, pc}
 801abd4:	24006978 	.word	0x24006978

0801abd8 <__sread>:
 801abd8:	b510      	push	{r4, lr}
 801abda:	460c      	mov	r4, r1
 801abdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abe0:	f000 f8a0 	bl	801ad24 <_read_r>
 801abe4:	2800      	cmp	r0, #0
 801abe6:	bfab      	itete	ge
 801abe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801abea:	89a3      	ldrhlt	r3, [r4, #12]
 801abec:	181b      	addge	r3, r3, r0
 801abee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801abf2:	bfac      	ite	ge
 801abf4:	6563      	strge	r3, [r4, #84]	; 0x54
 801abf6:	81a3      	strhlt	r3, [r4, #12]
 801abf8:	bd10      	pop	{r4, pc}

0801abfa <__swrite>:
 801abfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abfe:	461f      	mov	r7, r3
 801ac00:	898b      	ldrh	r3, [r1, #12]
 801ac02:	05db      	lsls	r3, r3, #23
 801ac04:	4605      	mov	r5, r0
 801ac06:	460c      	mov	r4, r1
 801ac08:	4616      	mov	r6, r2
 801ac0a:	d505      	bpl.n	801ac18 <__swrite+0x1e>
 801ac0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac10:	2302      	movs	r3, #2
 801ac12:	2200      	movs	r2, #0
 801ac14:	f000 f868 	bl	801ace8 <_lseek_r>
 801ac18:	89a3      	ldrh	r3, [r4, #12]
 801ac1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac22:	81a3      	strh	r3, [r4, #12]
 801ac24:	4632      	mov	r2, r6
 801ac26:	463b      	mov	r3, r7
 801ac28:	4628      	mov	r0, r5
 801ac2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac2e:	f000 b817 	b.w	801ac60 <_write_r>

0801ac32 <__sseek>:
 801ac32:	b510      	push	{r4, lr}
 801ac34:	460c      	mov	r4, r1
 801ac36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac3a:	f000 f855 	bl	801ace8 <_lseek_r>
 801ac3e:	1c43      	adds	r3, r0, #1
 801ac40:	89a3      	ldrh	r3, [r4, #12]
 801ac42:	bf15      	itete	ne
 801ac44:	6560      	strne	r0, [r4, #84]	; 0x54
 801ac46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ac4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ac4e:	81a3      	strheq	r3, [r4, #12]
 801ac50:	bf18      	it	ne
 801ac52:	81a3      	strhne	r3, [r4, #12]
 801ac54:	bd10      	pop	{r4, pc}

0801ac56 <__sclose>:
 801ac56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac5a:	f000 b813 	b.w	801ac84 <_close_r>
	...

0801ac60 <_write_r>:
 801ac60:	b538      	push	{r3, r4, r5, lr}
 801ac62:	4d07      	ldr	r5, [pc, #28]	; (801ac80 <_write_r+0x20>)
 801ac64:	4604      	mov	r4, r0
 801ac66:	4608      	mov	r0, r1
 801ac68:	4611      	mov	r1, r2
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	602a      	str	r2, [r5, #0]
 801ac6e:	461a      	mov	r2, r3
 801ac70:	f7e9 fe8f 	bl	8004992 <_write>
 801ac74:	1c43      	adds	r3, r0, #1
 801ac76:	d102      	bne.n	801ac7e <_write_r+0x1e>
 801ac78:	682b      	ldr	r3, [r5, #0]
 801ac7a:	b103      	cbz	r3, 801ac7e <_write_r+0x1e>
 801ac7c:	6023      	str	r3, [r4, #0]
 801ac7e:	bd38      	pop	{r3, r4, r5, pc}
 801ac80:	24006978 	.word	0x24006978

0801ac84 <_close_r>:
 801ac84:	b538      	push	{r3, r4, r5, lr}
 801ac86:	4d06      	ldr	r5, [pc, #24]	; (801aca0 <_close_r+0x1c>)
 801ac88:	2300      	movs	r3, #0
 801ac8a:	4604      	mov	r4, r0
 801ac8c:	4608      	mov	r0, r1
 801ac8e:	602b      	str	r3, [r5, #0]
 801ac90:	f7e9 fe9b 	bl	80049ca <_close>
 801ac94:	1c43      	adds	r3, r0, #1
 801ac96:	d102      	bne.n	801ac9e <_close_r+0x1a>
 801ac98:	682b      	ldr	r3, [r5, #0]
 801ac9a:	b103      	cbz	r3, 801ac9e <_close_r+0x1a>
 801ac9c:	6023      	str	r3, [r4, #0]
 801ac9e:	bd38      	pop	{r3, r4, r5, pc}
 801aca0:	24006978 	.word	0x24006978

0801aca4 <_fstat_r>:
 801aca4:	b538      	push	{r3, r4, r5, lr}
 801aca6:	4d07      	ldr	r5, [pc, #28]	; (801acc4 <_fstat_r+0x20>)
 801aca8:	2300      	movs	r3, #0
 801acaa:	4604      	mov	r4, r0
 801acac:	4608      	mov	r0, r1
 801acae:	4611      	mov	r1, r2
 801acb0:	602b      	str	r3, [r5, #0]
 801acb2:	f7e9 fe96 	bl	80049e2 <_fstat>
 801acb6:	1c43      	adds	r3, r0, #1
 801acb8:	d102      	bne.n	801acc0 <_fstat_r+0x1c>
 801acba:	682b      	ldr	r3, [r5, #0]
 801acbc:	b103      	cbz	r3, 801acc0 <_fstat_r+0x1c>
 801acbe:	6023      	str	r3, [r4, #0]
 801acc0:	bd38      	pop	{r3, r4, r5, pc}
 801acc2:	bf00      	nop
 801acc4:	24006978 	.word	0x24006978

0801acc8 <_isatty_r>:
 801acc8:	b538      	push	{r3, r4, r5, lr}
 801acca:	4d06      	ldr	r5, [pc, #24]	; (801ace4 <_isatty_r+0x1c>)
 801accc:	2300      	movs	r3, #0
 801acce:	4604      	mov	r4, r0
 801acd0:	4608      	mov	r0, r1
 801acd2:	602b      	str	r3, [r5, #0]
 801acd4:	f7e9 fe95 	bl	8004a02 <_isatty>
 801acd8:	1c43      	adds	r3, r0, #1
 801acda:	d102      	bne.n	801ace2 <_isatty_r+0x1a>
 801acdc:	682b      	ldr	r3, [r5, #0]
 801acde:	b103      	cbz	r3, 801ace2 <_isatty_r+0x1a>
 801ace0:	6023      	str	r3, [r4, #0]
 801ace2:	bd38      	pop	{r3, r4, r5, pc}
 801ace4:	24006978 	.word	0x24006978

0801ace8 <_lseek_r>:
 801ace8:	b538      	push	{r3, r4, r5, lr}
 801acea:	4d07      	ldr	r5, [pc, #28]	; (801ad08 <_lseek_r+0x20>)
 801acec:	4604      	mov	r4, r0
 801acee:	4608      	mov	r0, r1
 801acf0:	4611      	mov	r1, r2
 801acf2:	2200      	movs	r2, #0
 801acf4:	602a      	str	r2, [r5, #0]
 801acf6:	461a      	mov	r2, r3
 801acf8:	f7e9 fe8e 	bl	8004a18 <_lseek>
 801acfc:	1c43      	adds	r3, r0, #1
 801acfe:	d102      	bne.n	801ad06 <_lseek_r+0x1e>
 801ad00:	682b      	ldr	r3, [r5, #0]
 801ad02:	b103      	cbz	r3, 801ad06 <_lseek_r+0x1e>
 801ad04:	6023      	str	r3, [r4, #0]
 801ad06:	bd38      	pop	{r3, r4, r5, pc}
 801ad08:	24006978 	.word	0x24006978

0801ad0c <__malloc_lock>:
 801ad0c:	4801      	ldr	r0, [pc, #4]	; (801ad14 <__malloc_lock+0x8>)
 801ad0e:	f7ff be0b 	b.w	801a928 <__retarget_lock_acquire_recursive>
 801ad12:	bf00      	nop
 801ad14:	2400696c 	.word	0x2400696c

0801ad18 <__malloc_unlock>:
 801ad18:	4801      	ldr	r0, [pc, #4]	; (801ad20 <__malloc_unlock+0x8>)
 801ad1a:	f7ff be06 	b.w	801a92a <__retarget_lock_release_recursive>
 801ad1e:	bf00      	nop
 801ad20:	2400696c 	.word	0x2400696c

0801ad24 <_read_r>:
 801ad24:	b538      	push	{r3, r4, r5, lr}
 801ad26:	4d07      	ldr	r5, [pc, #28]	; (801ad44 <_read_r+0x20>)
 801ad28:	4604      	mov	r4, r0
 801ad2a:	4608      	mov	r0, r1
 801ad2c:	4611      	mov	r1, r2
 801ad2e:	2200      	movs	r2, #0
 801ad30:	602a      	str	r2, [r5, #0]
 801ad32:	461a      	mov	r2, r3
 801ad34:	f7e9 fe10 	bl	8004958 <_read>
 801ad38:	1c43      	adds	r3, r0, #1
 801ad3a:	d102      	bne.n	801ad42 <_read_r+0x1e>
 801ad3c:	682b      	ldr	r3, [r5, #0]
 801ad3e:	b103      	cbz	r3, 801ad42 <_read_r+0x1e>
 801ad40:	6023      	str	r3, [r4, #0]
 801ad42:	bd38      	pop	{r3, r4, r5, pc}
 801ad44:	24006978 	.word	0x24006978

0801ad48 <_init>:
 801ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad4a:	bf00      	nop
 801ad4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad4e:	bc08      	pop	{r3}
 801ad50:	469e      	mov	lr, r3
 801ad52:	4770      	bx	lr

0801ad54 <_fini>:
 801ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad56:	bf00      	nop
 801ad58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad5a:	bc08      	pop	{r3}
 801ad5c:	469e      	mov	lr, r3
 801ad5e:	4770      	bx	lr
