
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ec0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08015160  08015160  00025160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015540  08015540  00025540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015548  08015548  00025548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801554c  0801554c  0002554c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08015550  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000549c  24000100  08015650  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400559c  08015650  0003559c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   000327dd  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548e  00000000  00000000  0006290b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a96  00000000  00000000  0006c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000309b2  00000000  00000000  0007428e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019453f  00000000  00000000  000a4c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023917f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000abe4  00000000  00000000  002391d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015148 	.word	0x08015148

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08015148 	.word	0x08015148

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f010 ff74 	bl	80114e8 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f010 ff69 	bl	80114e8 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f010 ff5e 	bl	80114e8 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f014 f9da 	bl	80149e8 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	240004e8 	.word	0x240004e8
 8000640:	24000b3c 	.word	0x24000b3c
 8000644:	24000534 	.word	0x24000534
 8000648:	24000580 	.word	0x24000580
 800064c:	080151b0 	.word	0x080151b0

08000650 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	49f2      	ldr	r1, [pc, #968]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 800065c:	48f2      	ldr	r0, [pc, #968]	; (8000a28 <HAL_UART_RxCpltCallback+0x3d8>)
 800065e:	f00e fa37 	bl	800ead0 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4bf0      	ldr	r3, [pc, #960]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2be0      	cmp	r3, #224	; 0xe0
 800066c:	f200 83c6 	bhi.w	8000dfc <HAL_UART_RxCpltCallback+0x7ac>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000a11 	.word	0x08000a11
 800067c:	08000a4d 	.word	0x08000a4d
 8000680:	08000ad3 	.word	0x08000ad3
 8000684:	08000afd 	.word	0x08000afd
 8000688:	08000b25 	.word	0x08000b25
 800068c:	08000b4f 	.word	0x08000b4f
 8000690:	08000b7b 	.word	0x08000b7b
 8000694:	08000ba7 	.word	0x08000ba7
 8000698:	08000bd1 	.word	0x08000bd1
 800069c:	08000c03 	.word	0x08000c03
 80006a0:	08000c25 	.word	0x08000c25
 80006a4:	08000c41 	.word	0x08000c41
 80006a8:	08000c5d 	.word	0x08000c5d
 80006ac:	08000ca7 	.word	0x08000ca7
 80006b0:	08000da1 	.word	0x08000da1
 80006b4:	08000dd1 	.word	0x08000dd1
 80006b8:	080009fd 	.word	0x080009fd
 80006bc:	08000a39 	.word	0x08000a39
 80006c0:	08000abd 	.word	0x08000abd
 80006c4:	08000ae9 	.word	0x08000ae9
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08000b39 	.word	0x08000b39
 80006d0:	08000b65 	.word	0x08000b65
 80006d4:	08000b91 	.word	0x08000b91
 80006d8:	08000bbd 	.word	0x08000bbd
 80006dc:	08000be5 	.word	0x08000be5
 80006e0:	08000c17 	.word	0x08000c17
 80006e4:	08000c33 	.word	0x08000c33
 80006e8:	08000c4f 	.word	0x08000c4f
 80006ec:	08000c6b 	.word	0x08000c6b
 80006f0:	08000ce3 	.word	0x08000ce3
 80006f4:	08000dc9 	.word	0x08000dc9
 80006f8:	08000dfd 	.word	0x08000dfd
 80006fc:	08000dfd 	.word	0x08000dfd
 8000700:	08000dfd 	.word	0x08000dfd
 8000704:	08000dfd 	.word	0x08000dfd
 8000708:	08000dfd 	.word	0x08000dfd
 800070c:	08000dfd 	.word	0x08000dfd
 8000710:	08000dfd 	.word	0x08000dfd
 8000714:	08000dfd 	.word	0x08000dfd
 8000718:	08000dfd 	.word	0x08000dfd
 800071c:	08000dfd 	.word	0x08000dfd
 8000720:	08000dfd 	.word	0x08000dfd
 8000724:	08000dfd 	.word	0x08000dfd
 8000728:	08000dfd 	.word	0x08000dfd
 800072c:	08000dfd 	.word	0x08000dfd
 8000730:	08000dfd 	.word	0x08000dfd
 8000734:	08000dfd 	.word	0x08000dfd
 8000738:	08000dfd 	.word	0x08000dfd
 800073c:	08000dfd 	.word	0x08000dfd
 8000740:	08000dfd 	.word	0x08000dfd
 8000744:	08000dfd 	.word	0x08000dfd
 8000748:	08000dfd 	.word	0x08000dfd
 800074c:	08000dfd 	.word	0x08000dfd
 8000750:	08000dfd 	.word	0x08000dfd
 8000754:	08000dfd 	.word	0x08000dfd
 8000758:	08000dfd 	.word	0x08000dfd
 800075c:	08000dfd 	.word	0x08000dfd
 8000760:	08000dfd 	.word	0x08000dfd
 8000764:	08000dfd 	.word	0x08000dfd
 8000768:	08000dfd 	.word	0x08000dfd
 800076c:	08000dfd 	.word	0x08000dfd
 8000770:	08000dfd 	.word	0x08000dfd
 8000774:	08000dfd 	.word	0x08000dfd
 8000778:	08000dfd 	.word	0x08000dfd
 800077c:	08000dfd 	.word	0x08000dfd
 8000780:	08000dfd 	.word	0x08000dfd
 8000784:	08000dfd 	.word	0x08000dfd
 8000788:	08000dfd 	.word	0x08000dfd
 800078c:	08000dfd 	.word	0x08000dfd
 8000790:	08000dfd 	.word	0x08000dfd
 8000794:	08000dfd 	.word	0x08000dfd
 8000798:	08000dfd 	.word	0x08000dfd
 800079c:	08000dfd 	.word	0x08000dfd
 80007a0:	08000dfd 	.word	0x08000dfd
 80007a4:	08000dfd 	.word	0x08000dfd
 80007a8:	08000dfd 	.word	0x08000dfd
 80007ac:	08000dfd 	.word	0x08000dfd
 80007b0:	08000dfd 	.word	0x08000dfd
 80007b4:	08000dfd 	.word	0x08000dfd
 80007b8:	08000dfd 	.word	0x08000dfd
 80007bc:	08000dfd 	.word	0x08000dfd
 80007c0:	08000dfd 	.word	0x08000dfd
 80007c4:	08000dfd 	.word	0x08000dfd
 80007c8:	08000dfd 	.word	0x08000dfd
 80007cc:	08000dfd 	.word	0x08000dfd
 80007d0:	08000dfd 	.word	0x08000dfd
 80007d4:	08000dfd 	.word	0x08000dfd
 80007d8:	08000dfd 	.word	0x08000dfd
 80007dc:	08000dfd 	.word	0x08000dfd
 80007e0:	08000dfd 	.word	0x08000dfd
 80007e4:	08000dfd 	.word	0x08000dfd
 80007e8:	08000dfd 	.word	0x08000dfd
 80007ec:	08000dfd 	.word	0x08000dfd
 80007f0:	08000dfd 	.word	0x08000dfd
 80007f4:	08000dfd 	.word	0x08000dfd
 80007f8:	08000dfd 	.word	0x08000dfd
 80007fc:	08000dfd 	.word	0x08000dfd
 8000800:	08000dfd 	.word	0x08000dfd
 8000804:	08000dfd 	.word	0x08000dfd
 8000808:	08000dfd 	.word	0x08000dfd
 800080c:	08000dfd 	.word	0x08000dfd
 8000810:	08000dfd 	.word	0x08000dfd
 8000814:	08000dfd 	.word	0x08000dfd
 8000818:	08000dfd 	.word	0x08000dfd
 800081c:	08000dfd 	.word	0x08000dfd
 8000820:	08000dfd 	.word	0x08000dfd
 8000824:	08000dfd 	.word	0x08000dfd
 8000828:	08000dfd 	.word	0x08000dfd
 800082c:	08000dfd 	.word	0x08000dfd
 8000830:	08000dfd 	.word	0x08000dfd
 8000834:	08000dfd 	.word	0x08000dfd
 8000838:	08000dfd 	.word	0x08000dfd
 800083c:	08000dfd 	.word	0x08000dfd
 8000840:	08000dfd 	.word	0x08000dfd
 8000844:	08000dfd 	.word	0x08000dfd
 8000848:	08000dfd 	.word	0x08000dfd
 800084c:	08000dfd 	.word	0x08000dfd
 8000850:	08000dfd 	.word	0x08000dfd
 8000854:	08000dfd 	.word	0x08000dfd
 8000858:	08000dfd 	.word	0x08000dfd
 800085c:	08000dfd 	.word	0x08000dfd
 8000860:	08000dfd 	.word	0x08000dfd
 8000864:	08000dfd 	.word	0x08000dfd
 8000868:	08000dfd 	.word	0x08000dfd
 800086c:	08000dfd 	.word	0x08000dfd
 8000870:	08000dfd 	.word	0x08000dfd
 8000874:	08000dfd 	.word	0x08000dfd
 8000878:	08000dfd 	.word	0x08000dfd
 800087c:	08000dfd 	.word	0x08000dfd
 8000880:	08000dfd 	.word	0x08000dfd
 8000884:	08000dfd 	.word	0x08000dfd
 8000888:	08000dfd 	.word	0x08000dfd
 800088c:	08000dfd 	.word	0x08000dfd
 8000890:	08000dfd 	.word	0x08000dfd
 8000894:	08000dfd 	.word	0x08000dfd
 8000898:	08000dfd 	.word	0x08000dfd
 800089c:	08000dfd 	.word	0x08000dfd
 80008a0:	08000dfd 	.word	0x08000dfd
 80008a4:	08000dfd 	.word	0x08000dfd
 80008a8:	08000dfd 	.word	0x08000dfd
 80008ac:	08000dfd 	.word	0x08000dfd
 80008b0:	08000dfd 	.word	0x08000dfd
 80008b4:	08000dfd 	.word	0x08000dfd
 80008b8:	08000dfd 	.word	0x08000dfd
 80008bc:	08000dfd 	.word	0x08000dfd
 80008c0:	08000dfd 	.word	0x08000dfd
 80008c4:	08000dfd 	.word	0x08000dfd
 80008c8:	08000dfd 	.word	0x08000dfd
 80008cc:	08000dfd 	.word	0x08000dfd
 80008d0:	08000dfd 	.word	0x08000dfd
 80008d4:	08000dfd 	.word	0x08000dfd
 80008d8:	08000dfd 	.word	0x08000dfd
 80008dc:	08000dfd 	.word	0x08000dfd
 80008e0:	08000dfd 	.word	0x08000dfd
 80008e4:	08000dfd 	.word	0x08000dfd
 80008e8:	08000dfd 	.word	0x08000dfd
 80008ec:	08000dfd 	.word	0x08000dfd
 80008f0:	08000dfd 	.word	0x08000dfd
 80008f4:	08000dfd 	.word	0x08000dfd
 80008f8:	08000dfd 	.word	0x08000dfd
 80008fc:	08000dfd 	.word	0x08000dfd
 8000900:	08000dfd 	.word	0x08000dfd
 8000904:	08000dfd 	.word	0x08000dfd
 8000908:	08000dfd 	.word	0x08000dfd
 800090c:	08000dfd 	.word	0x08000dfd
 8000910:	08000dfd 	.word	0x08000dfd
 8000914:	08000dfd 	.word	0x08000dfd
 8000918:	08000dfd 	.word	0x08000dfd
 800091c:	08000dfd 	.word	0x08000dfd
 8000920:	08000dfd 	.word	0x08000dfd
 8000924:	08000dfd 	.word	0x08000dfd
 8000928:	08000dfd 	.word	0x08000dfd
 800092c:	08000dfd 	.word	0x08000dfd
 8000930:	08000dfd 	.word	0x08000dfd
 8000934:	08000dfd 	.word	0x08000dfd
 8000938:	08000dfd 	.word	0x08000dfd
 800093c:	08000dfd 	.word	0x08000dfd
 8000940:	08000dfd 	.word	0x08000dfd
 8000944:	08000dfd 	.word	0x08000dfd
 8000948:	08000dfd 	.word	0x08000dfd
 800094c:	08000dfd 	.word	0x08000dfd
 8000950:	08000dfd 	.word	0x08000dfd
 8000954:	08000dfd 	.word	0x08000dfd
 8000958:	08000dfd 	.word	0x08000dfd
 800095c:	08000dfd 	.word	0x08000dfd
 8000960:	08000dfd 	.word	0x08000dfd
 8000964:	08000dfd 	.word	0x08000dfd
 8000968:	08000dfd 	.word	0x08000dfd
 800096c:	08000dfd 	.word	0x08000dfd
 8000970:	08000dfd 	.word	0x08000dfd
 8000974:	08000dfd 	.word	0x08000dfd
 8000978:	08000dfd 	.word	0x08000dfd
 800097c:	08000dfd 	.word	0x08000dfd
 8000980:	08000dfd 	.word	0x08000dfd
 8000984:	08000dfd 	.word	0x08000dfd
 8000988:	08000dfd 	.word	0x08000dfd
 800098c:	08000dfd 	.word	0x08000dfd
 8000990:	08000dfd 	.word	0x08000dfd
 8000994:	08000dfd 	.word	0x08000dfd
 8000998:	08000dfd 	.word	0x08000dfd
 800099c:	08000dfd 	.word	0x08000dfd
 80009a0:	08000dfd 	.word	0x08000dfd
 80009a4:	08000dfd 	.word	0x08000dfd
 80009a8:	08000dfd 	.word	0x08000dfd
 80009ac:	08000dfd 	.word	0x08000dfd
 80009b0:	08000dfd 	.word	0x08000dfd
 80009b4:	08000dfd 	.word	0x08000dfd
 80009b8:	08000deb 	.word	0x08000deb
 80009bc:	08000dfd 	.word	0x08000dfd
 80009c0:	08000dfd 	.word	0x08000dfd
 80009c4:	08000dfd 	.word	0x08000dfd
 80009c8:	08000dfd 	.word	0x08000dfd
 80009cc:	08000dfd 	.word	0x08000dfd
 80009d0:	08000dfd 	.word	0x08000dfd
 80009d4:	08000dfd 	.word	0x08000dfd
 80009d8:	08000dfd 	.word	0x08000dfd
 80009dc:	08000dfd 	.word	0x08000dfd
 80009e0:	08000dfd 	.word	0x08000dfd
 80009e4:	08000dfd 	.word	0x08000dfd
 80009e8:	08000dfd 	.word	0x08000dfd
 80009ec:	08000dfd 	.word	0x08000dfd
 80009f0:	08000dfd 	.word	0x08000dfd
 80009f4:	08000dfd 	.word	0x08000dfd
 80009f8:	08000dd9 	.word	0x08000dd9
	case 0x10: {
		printf("SDN1 ON\n");
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <HAL_UART_RxCpltCallback+0x3dc>)
 80009fe:	f013 fff3 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	2201      	movs	r2, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f007 fedf 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000a0e:	e200      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a12:	f013 ffe9 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f007 fed5 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000a22:	e1f6      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
 8000a24:	24000b40 	.word	0x24000b40
 8000a28:	240005cc 	.word	0x240005cc
 8000a2c:	080151c8 	.word	0x080151c8
 8000a30:	58020400 	.word	0x58020400
 8000a34:	080151d0 	.word	0x080151d0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a38:	48b4      	ldr	r0, [pc, #720]	; (8000d0c <HAL_UART_RxCpltCallback+0x6bc>)
 8000a3a:	f013 ffd5 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a3e:	4bb4      	ldr	r3, [pc, #720]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	2201      	movs	r2, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fec1 	bl	80087cc <HAL_GPIO_WritePin>

		break;
 8000a4a:	e1e2      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a4c:	48b1      	ldr	r0, [pc, #708]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a4e:	f013 ffcb 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a52:	4baf      	ldr	r3, [pc, #700]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a54:	2120      	movs	r1, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f007 feb7 	bl	80087cc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a5e:	4bac      	ldr	r3, [pc, #688]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2200      	movs	r2, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f007 feb1 	bl	80087cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a6a:	4bab      	ldr	r3, [pc, #684]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	2200      	movs	r2, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f007 feaa 	bl	80087cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a78:	4ba7      	ldr	r3, [pc, #668]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f007 fea3 	bl	80087cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a86:	4ba4      	ldr	r3, [pc, #656]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f007 fe9c 	bl	80087cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000a94:	4ba0      	ldr	r3, [pc, #640]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fe96 	bl	80087cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000aa0:	4b9d      	ldr	r3, [pc, #628]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fe90 	bl	80087cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aac:	4b9a      	ldr	r3, [pc, #616]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 fe89 	bl	80087cc <HAL_GPIO_WritePin>

		break;
 8000aba:	e1aa      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000abc:	4897      	ldr	r0, [pc, #604]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000abe:	f013 ff93 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ac2:	4b95      	ldr	r3, [pc, #596]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 fe7e 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000ad0:	e19f      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ad2:	4893      	ldr	r0, [pc, #588]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000ad4:	f013 ff88 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ad8:	4b8f      	ldr	r3, [pc, #572]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 fe73 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000ae6:	e194      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000ae8:	488e      	ldr	r0, [pc, #568]	; (8000d24 <HAL_UART_RxCpltCallback+0x6d4>)
 8000aea:	f013 ff7d 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aee:	4b8a      	ldr	r3, [pc, #552]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 fe69 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000afa:	e18a      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000afc:	488a      	ldr	r0, [pc, #552]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000afe:	f013 ff73 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b02:	4b85      	ldr	r3, [pc, #532]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	2200      	movs	r2, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 fe5f 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000b0e:	e180      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b10:	4886      	ldr	r0, [pc, #536]	; (8000d2c <HAL_UART_RxCpltCallback+0x6dc>)
 8000b12:	f013 ff69 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b16:	4b80      	ldr	r3, [pc, #512]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f007 fe55 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000b22:	e176      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b24:	4882      	ldr	r0, [pc, #520]	; (8000d30 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b26:	f013 ff5f 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 fe4b 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000b36:	e16c      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b38:	487e      	ldr	r0, [pc, #504]	; (8000d34 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b3a:	f013 ff55 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b3e:	4b76      	ldr	r3, [pc, #472]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	2201      	movs	r2, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 fe40 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000b4c:	e161      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b4e:	487a      	ldr	r0, [pc, #488]	; (8000d38 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b50:	f013 ff4a 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b54:	4b70      	ldr	r3, [pc, #448]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f007 fe35 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000b62:	e156      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b64:	4875      	ldr	r0, [pc, #468]	; (8000d3c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b66:	f013 ff3f 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b6a:	4b6b      	ldr	r3, [pc, #428]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	2201      	movs	r2, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 fe2a 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000b78:	e14b      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b7a:	4871      	ldr	r0, [pc, #452]	; (8000d40 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b7c:	f013 ff34 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b80:	4b65      	ldr	r3, [pc, #404]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	2200      	movs	r2, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 fe1f 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000b8e:	e140      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000b90:	486c      	ldr	r0, [pc, #432]	; (8000d44 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b92:	f013 ff29 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b96:	4b60      	ldr	r3, [pc, #384]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 fe14 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000ba4:	e135      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000ba6:	4868      	ldr	r0, [pc, #416]	; (8000d48 <HAL_UART_RxCpltCallback+0x6f8>)
 8000ba8:	f013 ff1e 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bac:	4b5a      	ldr	r3, [pc, #360]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 fe09 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000bba:	e12a      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bbc:	4863      	ldr	r0, [pc, #396]	; (8000d4c <HAL_UART_RxCpltCallback+0x6fc>)
 8000bbe:	f013 ff13 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bc2:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 fdff 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000bce:	e120      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bd0:	485f      	ldr	r0, [pc, #380]	; (8000d50 <HAL_UART_RxCpltCallback+0x700>)
 8000bd2:	f013 ff09 	bl	80149e8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bd6:	4b4e      	ldr	r3, [pc, #312]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f007 fdf5 	bl	80087cc <HAL_GPIO_WritePin>
		break;
 8000be2:	e116      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000be4:	485b      	ldr	r0, [pc, #364]	; (8000d54 <HAL_UART_RxCpltCallback+0x704>)
 8000be6:	f013 feff 	bl	80149e8 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000bea:	485b      	ldr	r0, [pc, #364]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000bec:	f00c f954 	bl	800ce98 <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	4a59      	ldr	r2, [pc, #356]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4859      	ldr	r0, [pc, #356]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000bfc:	f004 fa56 	bl	80050ac <HAL_DAC_Start_DMA>
		break;
 8000c00:	e107      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c02:	4858      	ldr	r0, [pc, #352]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c04:	f013 fef0 	bl	80149e8 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000c08:	4853      	ldr	r0, [pc, #332]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000c0a:	f00c f9b5 	bl	800cf78 <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4853      	ldr	r0, [pc, #332]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000c12:	f004 fb0b 	bl	800522c <HAL_DAC_Stop_DMA>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c16:	4854      	ldr	r0, [pc, #336]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000c18:	f013 fee6 	bl	80149e8 <puts>
		ERPA_ON = 1;
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e0f6      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c24:	4852      	ldr	r0, [pc, #328]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c26:	f013 fedf 	bl	80149e8 <puts>
		ERPA_ON = 0;
 8000c2a:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
		break;
 8000c30:	e0ef      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c32:	4850      	ldr	r0, [pc, #320]	; (8000d74 <HAL_UART_RxCpltCallback+0x724>)
 8000c34:	f013 fed8 	bl	80149e8 <puts>
		PMT_ON = 1;
 8000c38:	4b4f      	ldr	r3, [pc, #316]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e0e8      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c40:	484e      	ldr	r0, [pc, #312]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c42:	f013 fed1 	bl	80149e8 <puts>
		PMT_ON = 0;
 8000c46:	4b4c      	ldr	r3, [pc, #304]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
		break;
 8000c4c:	e0e1      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c4e:	484c      	ldr	r0, [pc, #304]	; (8000d80 <HAL_UART_RxCpltCallback+0x730>)
 8000c50:	f013 feca 	bl	80149e8 <puts>
		HK_ON = 1;
 8000c54:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e0da      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c5c:	484a      	ldr	r0, [pc, #296]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c5e:	f013 fec3 	bl	80149e8 <puts>
		HK_ON = 0;
 8000c62:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
		break;
 8000c68:	e0d3      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000c6a:	4848      	ldr	r0, [pc, #288]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c6c:	f013 febc 	bl	80149e8 <puts>
		if (step < 17) {
 8000c70:	4b47      	ldr	r3, [pc, #284]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b10      	cmp	r3, #16
 8000c76:	f200 80c5 	bhi.w	8000e04 <HAL_UART_RxCpltCallback+0x7b4>
			step+=2;
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	3302      	adds	r3, #2
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c84:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000c86:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	4832      	ldr	r0, [pc, #200]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000c98:	f004 fb6b 	bl	8005372 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4830      	ldr	r0, [pc, #192]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000ca0:	f004 f9ac 	bl	8004ffc <HAL_DAC_Start>
		}
		break;
 8000ca4:	e0ae      	b.n	8000e04 <HAL_UART_RxCpltCallback+0x7b4>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000ca6:	483b      	ldr	r0, [pc, #236]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000ca8:	f013 fe9e 	bl	80149e8 <puts>
		if (step > 3) {
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	f240 80a9 	bls.w	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
			step-=2;
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000cc0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4823      	ldr	r0, [pc, #140]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000cd4:	f004 fb4d 	bl	8005372 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4821      	ldr	r0, [pc, #132]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000cdc:	f004 f98e 	bl	8004ffc <HAL_DAC_Start>
		}
		break;
 8000ce0:	e092      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ce2:	482d      	ldr	r0, [pc, #180]	; (8000d98 <HAL_UART_RxCpltCallback+0x748>)
 8000ce4:	f013 fe80 	bl	80149e8 <puts>
		if (cadence <= 50000){
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	f200 808b 	bhi.w	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
			cadence *= 2;
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000cfe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000d00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000d0a:	e07f      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
 8000d0c:	080151dc 	.word	0x080151dc
 8000d10:	58020400 	.word	0x58020400
 8000d14:	080151e8 	.word	0x080151e8
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	080151f4 	.word	0x080151f4
 8000d20:	08015200 	.word	0x08015200
 8000d24:	08015210 	.word	0x08015210
 8000d28:	0801521c 	.word	0x0801521c
 8000d2c:	08015228 	.word	0x08015228
 8000d30:	08015234 	.word	0x08015234
 8000d34:	08015244 	.word	0x08015244
 8000d38:	08015250 	.word	0x08015250
 8000d3c:	0801525c 	.word	0x0801525c
 8000d40:	08015268 	.word	0x08015268
 8000d44:	08015274 	.word	0x08015274
 8000d48:	08015284 	.word	0x08015284
 8000d4c:	08015294 	.word	0x08015294
 8000d50:	080152a0 	.word	0x080152a0
 8000d54:	080152b0 	.word	0x080152b0
 8000d58:	24000534 	.word	0x24000534
 8000d5c:	24000008 	.word	0x24000008
 8000d60:	240002d4 	.word	0x240002d4
 8000d64:	080152c0 	.word	0x080152c0
 8000d68:	080152d0 	.word	0x080152d0
 8000d6c:	24000b37 	.word	0x24000b37
 8000d70:	080152d8 	.word	0x080152d8
 8000d74:	080152e4 	.word	0x080152e4
 8000d78:	24000b36 	.word	0x24000b36
 8000d7c:	080152ec 	.word	0x080152ec
 8000d80:	080152f4 	.word	0x080152f4
 8000d84:	24000b38 	.word	0x24000b38
 8000d88:	080152fc 	.word	0x080152fc
 8000d8c:	08015304 	.word	0x08015304
 8000d90:	24000004 	.word	0x24000004
 8000d94:	0801530c 	.word	0x0801530c
 8000d98:	08015318 	.word	0x08015318
 8000d9c:	24000000 	.word	0x24000000
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000da0:	481e      	ldr	r0, [pc, #120]	; (8000e1c <HAL_UART_RxCpltCallback+0x7cc>)
 8000da2:	f013 fe21 	bl	80149e8 <puts>
		if (cadence >= 6250){
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f641 0269 	movw	r2, #6249	; 0x1869
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d92e      	bls.n	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
			cadence /= 2;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	085b      	lsrs	r3, r3, #1
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000dba:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dc6:	e023      	b.n	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dca:	f013 fe0d 	bl	80149e8 <puts>
		// TODO: Exit stop mode
		break;
 8000dce:	e020      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000dd0:	4815      	ldr	r0, [pc, #84]	; (8000e28 <HAL_UART_RxCpltCallback+0x7d8>)
 8000dd2:	f013 fe09 	bl	80149e8 <puts>
		// TODO: Enter stop mode
		break;
 8000dd6:	e01c      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <HAL_UART_RxCpltCallback+0x7dc>)
 8000dda:	f013 fe05 	bl	80149e8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_UART_RxCpltCallback+0x7e0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f011 fe6a 	bl	8012abc <xTaskResumeFromISR>
		break;
 8000de8:	e013      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000dea:	4812      	ldr	r0, [pc, #72]	; (8000e34 <HAL_UART_RxCpltCallback+0x7e4>)
 8000dec:	f013 fdfc 	bl	80149e8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_RxCpltCallback+0x7e8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f011 fe61 	bl	8012abc <xTaskResumeFromISR>
		break;
 8000dfa:	e00a      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	default:{
		printf("Unknown Command\n");
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <HAL_UART_RxCpltCallback+0x7ec>)
 8000dfe:	f013 fdf3 	bl	80149e8 <puts>
		break;
 8000e02:	e006      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e04:	bf00      	nop
 8000e06:	e004      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e08:	bf00      	nop
 8000e0a:	e002      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e0c:	bf00      	nop
 8000e0e:	e000      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e10:	bf00      	nop
	}
	}
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08015324 	.word	0x08015324
 8000e20:	24000000 	.word	0x24000000
 8000e24:	08015330 	.word	0x08015330
 8000e28:	08015340 	.word	0x08015340
 8000e2c:	08015350 	.word	0x08015350
 8000e30:	24000670 	.word	0x24000670
 8000e34:	0801535c 	.word	0x0801535c
 8000e38:	240008d0 	.word	0x240008d0
 8000e3c:	08015368 	.word	0x08015368

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f002 fb46 	bl	80034d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f89e 	bl	8000f88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e4c:	f000 f94e 	bl	80010ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 fe9e 	bl	8001b90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e54:	f000 fe6c 	bl	8001b30 <MX_DMA_Init>
  MX_TIM3_Init();
 8000e58:	f000 fdd0 	bl	80019fc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e5c:	f000 fe1c 	bl	8001a98 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e60:	f000 fb5a 	bl	8001518 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e64:	f000 fc4e 	bl	8001704 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e68:	f000 fd52 	bl	8001910 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e6c:	f000 fca2 	bl	80017b4 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000e70:	f000 fa8e 	bl	8001390 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000e74:	f000 f96a 	bl	800114c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e78:	f000 fb1c 	bl	80014b4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000e7c:	f000 fbea 	bl	8001654 <MX_SPI1_Init>
  MX_RTC_Init();
 8000e80:	f000 fb8a 	bl	8001598 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000e84:	f000 fefe 	bl	8001c84 <handshake>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <main+0x52>
	{
		Error_Handler();
 8000e8e:	f001 fc45 	bl	800271c <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e92:	2100      	movs	r1, #0
 8000e94:	4825      	ldr	r0, [pc, #148]	; (8000f2c <main+0xec>)
 8000e96:	f00c f90f 	bl	800d0b8 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4824      	ldr	r0, [pc, #144]	; (8000f30 <main+0xf0>)
 8000e9e:	f00c f90b 	bl	800d0b8 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4823      	ldr	r0, [pc, #140]	; (8000f34 <main+0xf4>)
 8000ea6:	f00c f907 	bl	800d0b8 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eaa:	f010 f9a5 	bl	80111f8 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <main+0xf8>)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4822      	ldr	r0, [pc, #136]	; (8000f3c <main+0xfc>)
 8000eb4:	f010 f9ea 	bl	801128c <osThreadNew>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <main+0x100>)
 8000ebc:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ebe:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <main+0x104>)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4821      	ldr	r0, [pc, #132]	; (8000f48 <main+0x108>)
 8000ec4:	f010 f9e2 	bl	801128c <osThreadNew>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <main+0x10c>)
 8000ecc:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000ece:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <main+0x110>)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4820      	ldr	r0, [pc, #128]	; (8000f54 <main+0x114>)
 8000ed4:	f010 f9da 	bl	801128c <osThreadNew>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a1f      	ldr	r2, [pc, #124]	; (8000f58 <main+0x118>)
 8000edc:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <main+0x11c>)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	481f      	ldr	r0, [pc, #124]	; (8000f60 <main+0x120>)
 8000ee4:	f010 f9d2 	bl	801128c <osThreadNew>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <main+0x124>)
 8000eec:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <main+0x128>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <main+0x12c>)
 8000ef4:	f010 f9ca 	bl	801128c <osThreadNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <main+0x130>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <main+0x134>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	481d      	ldr	r0, [pc, #116]	; (8000f78 <main+0x138>)
 8000f04:	f010 f9c2 	bl	801128c <osThreadNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <main+0x13c>)
 8000f0c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f010 faaa 	bl	8011468 <osEventFlagsNew>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <main+0x140>)
 8000f18:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f1a:	f000 ff41 	bl	8001da0 <system_setup>
	printf("Starting kernal...\n");
 8000f1e:	4819      	ldr	r0, [pc, #100]	; (8000f84 <main+0x144>)
 8000f20:	f013 fd62 	bl	80149e8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f24:	f010 f98c 	bl	8011240 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f28:	e7fe      	b.n	8000f28 <main+0xe8>
 8000f2a:	bf00      	nop
 8000f2c:	240004e8 	.word	0x240004e8
 8000f30:	24000534 	.word	0x24000534
 8000f34:	24000580 	.word	0x24000580
 8000f38:	080153c4 	.word	0x080153c4
 8000f3c:	080024b9 	.word	0x080024b9
 8000f40:	24000660 	.word	0x24000660
 8000f44:	080153e8 	.word	0x080153e8
 8000f48:	080024fd 	.word	0x080024fd
 8000f4c:	24000664 	.word	0x24000664
 8000f50:	0801540c 	.word	0x0801540c
 8000f54:	08002541 	.word	0x08002541
 8000f58:	24000668 	.word	0x24000668
 8000f5c:	08015430 	.word	0x08015430
 8000f60:	08002585 	.word	0x08002585
 8000f64:	2400066c 	.word	0x2400066c
 8000f68:	08015454 	.word	0x08015454
 8000f6c:	080025a9 	.word	0x080025a9
 8000f70:	24000670 	.word	0x24000670
 8000f74:	08015478 	.word	0x08015478
 8000f78:	08002651 	.word	0x08002651
 8000f7c:	240008d0 	.word	0x240008d0
 8000f80:	24000b3c 	.word	0x24000b3c
 8000f84:	08015378 	.word	0x08015378

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b09e      	sub	sp, #120	; 0x78
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f92:	224c      	movs	r2, #76	; 0x4c
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f013 fbd0 	bl	801473c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f013 fbc9 	bl	801473c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000faa:	2002      	movs	r0, #2
 8000fac:	f007 fd5c 	bl	8008a68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <SystemClock_Config+0x158>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <SystemClock_Config+0x158>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fc0:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <SystemClock_Config+0x158>)
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <SystemClock_Config+0x15c>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a45      	ldr	r2, [pc, #276]	; (80010e4 <SystemClock_Config+0x15c>)
 8000fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <SystemClock_Config+0x15c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe2:	bf00      	nop
 8000fe4:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <SystemClock_Config+0x15c>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff0:	d1f8      	bne.n	8000fe4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <SystemClock_Config+0x160>)
 8000ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff8:	4a3b      	ldr	r2, [pc, #236]	; (80010e8 <SystemClock_Config+0x160>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <SystemClock_Config+0x160>)
 8001004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <SystemClock_Config+0x15c>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a32      	ldr	r2, [pc, #200]	; (80010e4 <SystemClock_Config+0x15c>)
 800101a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <SystemClock_Config+0x15c>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <SystemClock_Config+0x158>)
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	4a2c      	ldr	r2, [pc, #176]	; (80010e0 <SystemClock_Config+0x158>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <SystemClock_Config+0x158>)
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001042:	bf00      	nop
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <SystemClock_Config+0x15c>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001050:	d1f8      	bne.n	8001044 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001052:	230a      	movs	r3, #10
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001056:	2301      	movs	r3, #1
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105a:	2340      	movs	r3, #64	; 0x40
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800105e:	2301      	movs	r3, #1
 8001060:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001062:	2302      	movs	r3, #2
 8001064:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001066:	2300      	movs	r3, #0
 8001068:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800106a:	2304      	movs	r3, #4
 800106c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800106e:	233c      	movs	r3, #60	; 0x3c
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8001076:	2314      	movs	r3, #20
 8001078:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107a:	2302      	movs	r3, #2
 800107c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800107e:	230c      	movs	r3, #12
 8001080:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001082:	2300      	movs	r3, #0
 8001084:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	4618      	mov	r0, r3
 8001090:	f007 fd24 	bl	8008adc <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800109a:	f001 fb3f 	bl	800271c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	233f      	movs	r3, #63	; 0x3f
 80010a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a2:	2303      	movs	r3, #3
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010aa:	2308      	movs	r3, #8
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010bc:	2340      	movs	r3, #64	; 0x40
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2104      	movs	r1, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f008 f962 	bl	8009390 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x14e>
  {
    Error_Handler();
 80010d2:	f001 fb23 	bl	800271c <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3778      	adds	r7, #120	; 0x78
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	58000400 	.word	0x58000400
 80010e4:	58024800 	.word	0x58024800
 80010e8:	58024400 	.word	0x58024400

080010ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0b0      	sub	sp, #192	; 0xc0
 80010f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	22c0      	movs	r2, #192	; 0xc0
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f013 fb1f 	bl	801473c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800110a:	2304      	movs	r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800110e:	2309      	movs	r3, #9
 8001110:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001112:	2304      	movs	r3, #4
 8001114:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800111e:	23c0      	movs	r3, #192	; 0xc0
 8001120:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001122:	2320      	movs	r3, #32
 8001124:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001126:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4618      	mov	r0, r3
 8001136:	f008 fcf9 	bl	8009b2c <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001140:	f001 faec 	bl	800271c <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	37c0      	adds	r7, #192	; 0xc0
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001170:	4b7a      	ldr	r3, [pc, #488]	; (800135c <MX_ADC1_Init+0x210>)
 8001172:	4a7b      	ldr	r2, [pc, #492]	; (8001360 <MX_ADC1_Init+0x214>)
 8001174:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001176:	4b79      	ldr	r3, [pc, #484]	; (800135c <MX_ADC1_Init+0x210>)
 8001178:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800117c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117e:	4b77      	ldr	r3, [pc, #476]	; (800135c <MX_ADC1_Init+0x210>)
 8001180:	2208      	movs	r2, #8
 8001182:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001184:	4b75      	ldr	r3, [pc, #468]	; (800135c <MX_ADC1_Init+0x210>)
 8001186:	2201      	movs	r2, #1
 8001188:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118a:	4b74      	ldr	r3, [pc, #464]	; (800135c <MX_ADC1_Init+0x210>)
 800118c:	2204      	movs	r2, #4
 800118e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001190:	4b72      	ldr	r3, [pc, #456]	; (800135c <MX_ADC1_Init+0x210>)
 8001192:	2200      	movs	r2, #0
 8001194:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001196:	4b71      	ldr	r3, [pc, #452]	; (800135c <MX_ADC1_Init+0x210>)
 8001198:	2201      	movs	r2, #1
 800119a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <MX_ADC1_Init+0x210>)
 800119e:	220b      	movs	r2, #11
 80011a0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a2:	4b6e      	ldr	r3, [pc, #440]	; (800135c <MX_ADC1_Init+0x210>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a8:	4b6c      	ldr	r3, [pc, #432]	; (800135c <MX_ADC1_Init+0x210>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ae:	4b6b      	ldr	r3, [pc, #428]	; (800135c <MX_ADC1_Init+0x210>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011b4:	4b69      	ldr	r3, [pc, #420]	; (800135c <MX_ADC1_Init+0x210>)
 80011b6:	2203      	movs	r2, #3
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011ba:	4b68      	ldr	r3, [pc, #416]	; (800135c <MX_ADC1_Init+0x210>)
 80011bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011c2:	4b66      	ldr	r3, [pc, #408]	; (800135c <MX_ADC1_Init+0x210>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011c8:	4b64      	ldr	r3, [pc, #400]	; (800135c <MX_ADC1_Init+0x210>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d0:	4862      	ldr	r0, [pc, #392]	; (800135c <MX_ADC1_Init+0x210>)
 80011d2:	f002 fc0b 	bl	80039ec <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011dc:	f001 fa9e 	bl	800271c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	485c      	ldr	r0, [pc, #368]	; (800135c <MX_ADC1_Init+0x210>)
 80011ec:	f003 fd26 	bl	8004c3c <HAL_ADCEx_MultiModeConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011f6:	f001 fa91 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011fa:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <MX_ADC1_Init+0x218>)
 80011fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fe:	2306      	movs	r3, #6
 8001200:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001202:	2307      	movs	r3, #7
 8001204:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001206:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800120c:	2304      	movs	r3, #4
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	484f      	ldr	r0, [pc, #316]	; (800135c <MX_ADC1_Init+0x210>)
 800121e:	f002 fe69 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001228:	f001 fa78 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800122c:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <MX_ADC1_Init+0x21c>)
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001230:	230c      	movs	r3, #12
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4848      	ldr	r0, [pc, #288]	; (800135c <MX_ADC1_Init+0x210>)
 800123a:	f002 fe5b 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001244:	f001 fa6a 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001248:	4b48      	ldr	r3, [pc, #288]	; (800136c <MX_ADC1_Init+0x220>)
 800124a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800124c:	2312      	movs	r3, #18
 800124e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4841      	ldr	r0, [pc, #260]	; (800135c <MX_ADC1_Init+0x210>)
 8001256:	f002 fe4d 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001260:	f001 fa5c 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <MX_ADC1_Init+0x224>)
 8001266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001268:	2318      	movs	r3, #24
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	483a      	ldr	r0, [pc, #232]	; (800135c <MX_ADC1_Init+0x210>)
 8001272:	f002 fe3f 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800127c:	f001 fa4e 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001280:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <MX_ADC1_Init+0x228>)
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001288:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4833      	ldr	r0, [pc, #204]	; (800135c <MX_ADC1_Init+0x210>)
 8001290:	f002 fe30 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800129a:	f001 fa3f 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <MX_ADC1_Init+0x22c>)
 80012a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012a2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	482b      	ldr	r0, [pc, #172]	; (800135c <MX_ADC1_Init+0x210>)
 80012ae:	f002 fe21 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012b8:	f001 fa30 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <MX_ADC1_Init+0x230>)
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012c0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4824      	ldr	r0, [pc, #144]	; (800135c <MX_ADC1_Init+0x210>)
 80012cc:	f002 fe12 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012d6:	f001 fa21 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <MX_ADC1_Init+0x234>)
 80012dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012de:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	481c      	ldr	r0, [pc, #112]	; (800135c <MX_ADC1_Init+0x210>)
 80012ea:	f002 fe03 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80012f4:	f001 fa12 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_ADC1_Init+0x238>)
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012fc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001300:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <MX_ADC1_Init+0x210>)
 8001308:	f002 fdf4 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001312:	f001 fa03 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_ADC1_Init+0x23c>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800131a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_ADC1_Init+0x210>)
 8001326:	f002 fde5 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001330:	f001 f9f4 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_ADC1_Init+0x240>)
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001338:	f240 2306 	movw	r3, #518	; 0x206
 800133c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_ADC1_Init+0x210>)
 8001344:	f002 fdd6 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800134e:	f001 f9e5 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2400011c 	.word	0x2400011c
 8001360:	40022000 	.word	0x40022000
 8001364:	0c900008 	.word	0x0c900008
 8001368:	10c00010 	.word	0x10c00010
 800136c:	14f00020 	.word	0x14f00020
 8001370:	1d500080 	.word	0x1d500080
 8001374:	21800100 	.word	0x21800100
 8001378:	25b00200 	.word	0x25b00200
 800137c:	2a000400 	.word	0x2a000400
 8001380:	2e300800 	.word	0x2e300800
 8001384:	3ac04000 	.word	0x3ac04000
 8001388:	3ef08000 	.word	0x3ef08000
 800138c:	47520000 	.word	0x47520000

08001390 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013a8:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013aa:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <MX_ADC3_Init+0x114>)
 80013ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013ae:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013b0:	2208      	movs	r2, #8
 80013b2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013b4:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013bc:	2204      	movs	r2, #4
 80013be:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013cc:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013ce:	2204      	movs	r2, #4
 80013d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013e4:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013e6:	2203      	movs	r2, #3
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001400:	4827      	ldr	r0, [pc, #156]	; (80014a0 <MX_ADC3_Init+0x110>)
 8001402:	f002 faf3 	bl	80039ec <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800140c:	f001 f986 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MX_ADC3_Init+0x118>)
 8001412:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001414:	2306      	movs	r3, #6
 8001416:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001418:	2307      	movs	r3, #7
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800141c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001420:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001422:	2304      	movs	r3, #4
 8001424:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	481b      	ldr	r0, [pc, #108]	; (80014a0 <MX_ADC3_Init+0x110>)
 8001434:	f002 fd5e 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800143e:	f001 f96d 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_ADC3_Init+0x11c>)
 8001444:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001446:	230c      	movs	r3, #12
 8001448:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <MX_ADC3_Init+0x110>)
 8001450:	f002 fd50 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800145a:	f001 f95f 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001462:	2312      	movs	r3, #18
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_ADC3_Init+0x110>)
 800146c:	f002 fd42 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001476:	f001 f951 	bl	800271c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <MX_ADC3_Init+0x120>)
 800147c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800147e:	2318      	movs	r3, #24
 8001480:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_ADC3_Init+0x110>)
 8001488:	f002 fd34 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001492:	f001 f943 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	24000180 	.word	0x24000180
 80014a4:	58026000 	.word	0x58026000
 80014a8:	cb840000 	.word	0xcb840000
 80014ac:	cfb80000 	.word	0xcfb80000
 80014b0:	04300002 	.word	0x04300002

080014b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2224      	movs	r2, #36	; 0x24
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f013 f93b 	bl	801473c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_DAC1_Init+0x5c>)
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_DAC1_Init+0x60>)
 80014ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <MX_DAC1_Init+0x5c>)
 80014ce:	f003 fd73 	bl	8004fb8 <HAL_DAC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014d8:	f001 f920 	bl	800271c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014e0:	230a      	movs	r3, #10
 80014e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_DAC1_Init+0x5c>)
 80014f8:	f003 ff8e 	bl	8005418 <HAL_DAC_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001502:	f001 f90b 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	240002d4 	.word	0x240002d4
 8001514:	40007400 	.word	0x40007400

08001518 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_I2C1_Init+0x74>)
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <MX_I2C1_Init+0x78>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_I2C1_Init+0x74>)
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <MX_I2C1_Init+0x7c>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_I2C1_Init+0x74>)
 8001530:	2201      	movs	r2, #1
 8001532:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_I2C1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_I2C1_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_I2C1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001552:	480e      	ldr	r0, [pc, #56]	; (800158c <MX_I2C1_Init+0x74>)
 8001554:	f007 f954 	bl	8008800 <HAL_I2C_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800155e:	f001 f8dd 	bl	800271c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001562:	2100      	movs	r1, #0
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <MX_I2C1_Init+0x74>)
 8001566:	f007 f9e7 	bl	8008938 <HAL_I2CEx_ConfigAnalogFilter>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001570:	f001 f8d4 	bl	800271c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001574:	2100      	movs	r1, #0
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_I2C1_Init+0x74>)
 8001578:	f007 fa29 	bl	80089ce <HAL_I2CEx_ConfigDigitalFilter>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001582:	f001 f8cb 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	24000360 	.word	0x24000360
 8001590:	40005400 	.word	0x40005400
 8001594:	307075b1 	.word	0x307075b1

08001598 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_RTC_Init+0xb4>)
 80015b2:	4a27      	ldr	r2, [pc, #156]	; (8001650 <MX_RTC_Init+0xb8>)
 80015b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <MX_RTC_Init+0xb4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_RTC_Init+0xb4>)
 80015be:	2220      	movs	r2, #32
 80015c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <MX_RTC_Init+0xb4>)
 80015c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <MX_RTC_Init+0xb4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MX_RTC_Init+0xb4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_RTC_Init+0xb4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_RTC_Init+0xb4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e2:	481a      	ldr	r0, [pc, #104]	; (800164c <MX_RTC_Init+0xb4>)
 80015e4:	f00a ffa0 	bl	800c528 <HAL_RTC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80015ee:	f001 f895 	bl	800271c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2201      	movs	r2, #1
 800160a:	4619      	mov	r1, r3
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <MX_RTC_Init+0xb4>)
 800160e:	f00b f80d 	bl	800c62c <HAL_RTC_SetTime>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001618:	f001 f880 	bl	800271c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800161c:	2305      	movs	r3, #5
 800161e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001620:	2305      	movs	r3, #5
 8001622:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8001624:	2331      	movs	r3, #49	; 0x31
 8001626:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001628:	2324      	movs	r3, #36	; 0x24
 800162a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <MX_RTC_Init+0xb4>)
 8001634:	f00b f8f4 	bl	800c820 <HAL_RTC_SetDate>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800163e:	f001 f86d 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	240003b4 	.word	0x240003b4
 8001650:	58004000 	.word	0x58004000

08001654 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_SPI1_Init+0xa8>)
 800165a:	4a29      	ldr	r2, [pc, #164]	; (8001700 <MX_SPI1_Init+0xac>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <MX_SPI1_Init+0xa8>)
 8001660:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <MX_SPI1_Init+0xa8>)
 8001668:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800166c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <MX_SPI1_Init+0xa8>)
 8001670:	220f      	movs	r2, #15
 8001672:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_SPI1_Init+0xa8>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <MX_SPI1_Init+0xa8>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_SPI1_Init+0xa8>)
 8001682:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001686:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_SPI1_Init+0xa8>)
 800168a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800168e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_SPI1_Init+0xa8>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_SPI1_Init+0xa8>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_SPI1_Init+0xa8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_SPI1_Init+0xa8>)
 80016e8:	f00b fa40 	bl	800cb6c <HAL_SPI_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80016f2:	f001 f813 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	240003d8 	.word	0x240003d8
 8001700:	40013000 	.word	0x40013000

08001704 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <MX_SPI2_Init+0xa8>)
 800170a:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <MX_SPI2_Init+0xac>)
 800170c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800170e:	4b27      	ldr	r3, [pc, #156]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001710:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001714:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001718:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800171c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001720:	220f      	movs	r2, #15
 8001722:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <MX_SPI2_Init+0xa8>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001732:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001736:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_SPI2_Init+0xa8>)
 800173a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800173e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <MX_SPI2_Init+0xa8>)
 800174e:	2200      	movs	r2, #0
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_SPI2_Init+0xa8>)
 800175a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001762:	2200      	movs	r2, #0
 8001764:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001768:	2200      	movs	r2, #0
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_SPI2_Init+0xa8>)
 800176e:	2200      	movs	r2, #0
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001774:	2200      	movs	r2, #0
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_SPI2_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_SPI2_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_SPI2_Init+0xa8>)
 8001798:	f00b f9e8 	bl	800cb6c <HAL_SPI_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017a2:	f000 ffbb 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	24000460 	.word	0x24000460
 80017b0:	40003800 	.word	0x40003800

080017b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b09a      	sub	sp, #104	; 0x68
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	222c      	movs	r2, #44	; 0x2c
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f012 ffa4 	bl	801473c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f4:	4b44      	ldr	r3, [pc, #272]	; (8001908 <MX_TIM1_Init+0x154>)
 80017f6:	4a45      	ldr	r2, [pc, #276]	; (800190c <MX_TIM1_Init+0x158>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 80017fa:	4b43      	ldr	r3, [pc, #268]	; (8001908 <MX_TIM1_Init+0x154>)
 80017fc:	f240 12df 	movw	r2, #479	; 0x1df
 8001800:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <MX_TIM1_Init+0x154>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001808:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <MX_TIM1_Init+0x154>)
 800180a:	f24f 4223 	movw	r2, #62499	; 0xf423
 800180e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <MX_TIM1_Init+0x154>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001816:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <MX_TIM1_Init+0x154>)
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b3a      	ldr	r3, [pc, #232]	; (8001908 <MX_TIM1_Init+0x154>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001822:	4839      	ldr	r0, [pc, #228]	; (8001908 <MX_TIM1_Init+0x154>)
 8001824:	f00b fae1 	bl	800cdea <HAL_TIM_Base_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800182e:	f000 ff75 	bl	800271c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001836:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001838:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800183c:	4619      	mov	r1, r3
 800183e:	4832      	ldr	r0, [pc, #200]	; (8001908 <MX_TIM1_Init+0x154>)
 8001840:	f00c f920 	bl	800da84 <HAL_TIM_ConfigClockSource>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800184a:	f000 ff67 	bl	800271c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800184e:	482e      	ldr	r0, [pc, #184]	; (8001908 <MX_TIM1_Init+0x154>)
 8001850:	f00b fd8c 	bl	800d36c <HAL_TIM_PWM_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800185a:	f000 ff5f 	bl	800271c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800186e:	4619      	mov	r1, r3
 8001870:	4825      	ldr	r0, [pc, #148]	; (8001908 <MX_TIM1_Init+0x154>)
 8001872:	f00c fe5d 	bl	800e530 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800187c:	f000 ff4e 	bl	800271c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001880:	2360      	movs	r3, #96	; 0x60
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001884:	f240 13df 	movw	r3, #479	; 0x1df
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188a:	2300      	movs	r3, #0
 800188c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800188e:	2300      	movs	r3, #0
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800189e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4818      	ldr	r0, [pc, #96]	; (8001908 <MX_TIM1_Init+0x154>)
 80018a8:	f00b ffd8 	bl	800d85c <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80018b2:	f000 ff33 	bl	800271c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM1_Init+0x154>)
 80018ec:	f00c feae 	bl	800e64c <HAL_TIMEx_ConfigBreakDeadTime>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80018f6:	f000 ff11 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM1_Init+0x154>)
 80018fc:	f001 fa9c 	bl	8002e38 <HAL_TIM_MspPostInit>

}
 8001900:	bf00      	nop
 8001902:	3768      	adds	r7, #104	; 0x68
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	240004e8 	.word	0x240004e8
 800190c:	40010000 	.word	0x40010000

08001910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001948:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <MX_TIM2_Init+0xe8>)
 800194c:	22ef      	movs	r2, #239	; 0xef
 800194e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001958:	f640 4234 	movw	r2, #3124	; 0xc34
 800195c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800196a:	4823      	ldr	r0, [pc, #140]	; (80019f8 <MX_TIM2_Init+0xe8>)
 800196c:	f00b fa3d 	bl	800cdea <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001976:	f000 fed1 	bl	800271c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001980:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001984:	4619      	mov	r1, r3
 8001986:	481c      	ldr	r0, [pc, #112]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001988:	f00c f87c 	bl	800da84 <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001992:	f000 fec3 	bl	800271c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001996:	4818      	ldr	r0, [pc, #96]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001998:	f00b fce8 	bl	800d36c <HAL_TIM_PWM_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019a2:	f000 febb 	bl	800271c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019a6:	2320      	movs	r3, #32
 80019a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4810      	ldr	r0, [pc, #64]	; (80019f8 <MX_TIM2_Init+0xe8>)
 80019b6:	f00c fdbb 	bl	800e530 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019c0:	f000 feac 	bl	800271c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c4:	2360      	movs	r3, #96	; 0x60
 80019c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	220c      	movs	r2, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <MX_TIM2_Init+0xe8>)
 80019dc:	f00b ff3e 	bl	800d85c <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019e6:	f000 fe99 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ea:	4803      	ldr	r0, [pc, #12]	; (80019f8 <MX_TIM2_Init+0xe8>)
 80019ec:	f001 fa24 	bl	8002e38 <HAL_TIM_MspPostInit>

}
 80019f0:	bf00      	nop
 80019f2:	3738      	adds	r7, #56	; 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	24000534 	.word	0x24000534

080019fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a22:	22ef      	movs	r2, #239	; 0xef
 8001a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a40:	4813      	ldr	r0, [pc, #76]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a42:	f00b f9d2 	bl	800cdea <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a4c:	f000 fe66 	bl	800271c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a5e:	f00c f811 	bl	800da84 <HAL_TIM_ConfigClockSource>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a68:	f000 fe58 	bl	800271c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a7a:	f00c fd59 	bl	800e530 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a84:	f000 fe4a 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	24000580 	.word	0x24000580
 8001a94:	40000400 	.word	0x40000400

08001a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001a9e:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <MX_USART1_UART_Init+0x94>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001aa4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae0:	4811      	ldr	r0, [pc, #68]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ae2:	f00c fe4f 	bl	800e784 <HAL_UART_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001aec:	f000 fe16 	bl	800271c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af0:	2100      	movs	r1, #0
 8001af2:	480d      	ldr	r0, [pc, #52]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001af4:	f00f fa71 	bl	8010fda <HAL_UARTEx_SetTxFifoThreshold>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001afe:	f000 fe0d 	bl	800271c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b02:	2100      	movs	r1, #0
 8001b04:	4808      	ldr	r0, [pc, #32]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001b06:	f00f faa6 	bl	8011056 <HAL_UARTEx_SetRxFifoThreshold>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b10:	f000 fe04 	bl	800271c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <MX_USART1_UART_Init+0x90>)
 8001b16:	f00f fa27 	bl	8010f68 <HAL_UARTEx_DisableFifoMode>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b20:	f000 fdfc 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	240005cc 	.word	0x240005cc
 8001b2c:	40011000 	.word	0x40011000

08001b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_DMA_Init+0x5c>)
 8001b38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <MX_DMA_Init+0x5c>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_DMA_Init+0x5c>)
 8001b48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2105      	movs	r1, #5
 8001b58:	200b      	movs	r0, #11
 8001b5a:	f003 fa05 	bl	8004f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b5e:	200b      	movs	r0, #11
 8001b60:	f003 fa1c 	bl	8004f9c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2105      	movs	r1, #5
 8001b68:	200c      	movs	r0, #12
 8001b6a:	f003 f9fd 	bl	8004f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b6e:	200c      	movs	r0, #12
 8001b70:	f003 fa14 	bl	8004f9c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2105      	movs	r1, #5
 8001b78:	2010      	movs	r0, #16
 8001b7a:	f003 f9f5 	bl	8004f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b7e:	2010      	movs	r0, #16
 8001b80:	f003 fa0c 	bl	8004f9c <HAL_NVIC_EnableIRQ>

}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	58024400 	.word	0x58024400

08001b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bac:	4a32      	ldr	r2, [pc, #200]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bca:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be8:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c24:	4815      	ldr	r0, [pc, #84]	; (8001c7c <MX_GPIO_Init+0xec>)
 8001c26:	f006 fdd1 	bl	80087cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2164      	movs	r1, #100	; 0x64
 8001c2e:	4814      	ldr	r0, [pc, #80]	; (8001c80 <MX_GPIO_Init+0xf0>)
 8001c30:	f006 fdcc 	bl	80087cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c34:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480b      	ldr	r0, [pc, #44]	; (8001c7c <MX_GPIO_Init+0xec>)
 8001c4e:	f006 fbf5 	bl	800843c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c52:	2364      	movs	r3, #100	; 0x64
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_GPIO_Init+0xf0>)
 8001c6a:	f006 fbe7 	bl	800843c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58020800 	.word	0x58020800
 8001c80:	58020400 	.word	0x58020400

08001c84 <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b090      	sub	sp, #64	; 0x40
 8001c88:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001c8e:	f107 011c 	add.w	r1, r7, #28
 8001c92:	2364      	movs	r3, #100	; 0x64
 8001c94:	2209      	movs	r2, #9
 8001c96:	4840      	ldr	r0, [pc, #256]	; (8001d98 <handshake+0x114>)
 8001c98:	f00c fe52 	bl	800e940 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001c9c:	7f3b      	ldrb	r3, [r7, #28]
 8001c9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d1f1      	bne.n	8001c8e <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001caa:	7f7b      	ldrb	r3, [r7, #29]
 8001cac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001cb0:	7fbb      	ldrb	r3, [r7, #30]
 8001cb2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
 8001cb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001cbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001cc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001cc8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001ccc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001cd0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001ce8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cec:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001cee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001cf2:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001cf4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001cf8:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cfe:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001d00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001d04:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001d06:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001d0a:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001d0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d0e:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001d10:	f107 0318 	add.w	r3, r7, #24
 8001d14:	2200      	movs	r2, #0
 8001d16:	4619      	mov	r1, r3
 8001d18:	4820      	ldr	r0, [pc, #128]	; (8001d9c <handshake+0x118>)
 8001d1a:	f00a fd81 	bl	800c820 <HAL_RTC_SetDate>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001d24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <handshake+0xac>
	{
		Error_Handler();
 8001d2c:	f000 fcf6 	bl	800271c <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	4619      	mov	r1, r3
 8001d36:	4819      	ldr	r0, [pc, #100]	; (8001d9c <handshake+0x118>)
 8001d38:	f00a fc78 	bl	800c62c <HAL_RTC_SetTime>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001d42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <handshake+0xca>
	{
		Error_Handler();
 8001d4a:	f000 fce7 	bl	800271c <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8001d4e:	23fa      	movs	r3, #250	; 0xfa
 8001d50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001d66:	2302      	movs	r3, #2
 8001d68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d70:	e009      	b.n	8001d86 <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8001d72:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d76:	2364      	movs	r3, #100	; 0x64
 8001d78:	2205      	movs	r2, #5
 8001d7a:	4807      	ldr	r0, [pc, #28]	; (8001d98 <handshake+0x114>)
 8001d7c:	f00c fd52 	bl	800e824 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8001d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d82:	3301      	adds	r3, #1
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbf1      	blt.n	8001d72 <handshake+0xee>
	}

	return 1;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3740      	adds	r7, #64	; 0x40
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	240005cc 	.word	0x240005cc
 8001d9c:	240003b4 	.word	0x240003b4

08001da0 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 8001da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001da8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001dae:	210c      	movs	r1, #12
 8001db0:	4818      	ldr	r0, [pc, #96]	; (8001e14 <system_setup+0x74>)
 8001db2:	f00b fb3d 	bl	800d430 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001db6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001dba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dbe:	4816      	ldr	r0, [pc, #88]	; (8001e18 <system_setup+0x78>)
 8001dc0:	f002 fed8 	bl	8004b74 <HAL_ADCEx_Calibration_Start>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001dca:	f000 fca7 	bl	800271c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001dce:	220b      	movs	r2, #11
 8001dd0:	4912      	ldr	r1, [pc, #72]	; (8001e1c <system_setup+0x7c>)
 8001dd2:	4811      	ldr	r0, [pc, #68]	; (8001e18 <system_setup+0x78>)
 8001dd4:	f001 ffac 	bl	8003d30 <HAL_ADC_Start_DMA>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001dde:	f000 fc9d 	bl	800271c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001de2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001de6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dea:	480d      	ldr	r0, [pc, #52]	; (8001e20 <system_setup+0x80>)
 8001dec:	f002 fec2 	bl	8004b74 <HAL_ADCEx_Calibration_Start>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001df6:	f000 fc91 	bl	800271c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	4909      	ldr	r1, [pc, #36]	; (8001e24 <system_setup+0x84>)
 8001dfe:	4808      	ldr	r0, [pc, #32]	; (8001e20 <system_setup+0x80>)
 8001e00:	f001 ff96 	bl	8003d30 <HAL_ADC_Start_DMA>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e0a:	f000 fc87 	bl	800271c <Error_Handler>
	}
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24000534 	.word	0x24000534
 8001e18:	2400011c 	.word	0x2400011c
 8001e1c:	24000bc0 	.word	0x24000bc0
 8001e20:	24000180 	.word	0x24000180
 8001e24:	24000be0 	.word	0x24000be0

08001e28 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	2200      	movs	r2, #0
 8001e36:	4619      	mov	r1, r3
 8001e38:	481d      	ldr	r0, [pc, #116]	; (8001eb0 <getTimestamp+0x88>)
 8001e3a:	f00a fc95 	bl	800c768 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	2200      	movs	r2, #0
 8001e44:	4619      	mov	r1, r3
 8001e46:	481a      	ldr	r0, [pc, #104]	; (8001eb0 <getTimestamp+0x88>)
 8001e48:	f00a fd72 	bl	800c930 <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e52:	fb03 f202 	mul.w	r2, r3, r2
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <getTimestamp+0x88>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	7b7a      	ldrb	r2, [r7, #13]
 8001e70:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3302      	adds	r3, #2
 8001e76:	7bba      	ldrb	r2, [r7, #14]
 8001e78:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	7c3a      	ldrb	r2, [r7, #16]
 8001e80:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	7c7a      	ldrb	r2, [r7, #17]
 8001e88:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3305      	adds	r3, #5
 8001e8e:	7cba      	ldrb	r2, [r7, #18]
 8001e90:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	0a1a      	lsrs	r2, r3, #8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3306      	adds	r3, #6
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3307      	adds	r3, #7
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]

}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	240003b4 	.word	0x240003b4

08001eb4 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001eba:	bf00      	nop
 8001ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec0:	483c      	ldr	r0, [pc, #240]	; (8001fb4 <sample_pmt+0x100>)
 8001ec2:	f006 fc6b 	bl	800879c <HAL_GPIO_ReadPin>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f7      	bne.n	8001ebc <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001ecc:	200e      	movs	r0, #14
 8001ece:	f012 fc17 	bl	8014700 <malloc>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f012 fc12 	bl	8014700 <malloc>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001ee0:	2008      	movs	r0, #8
 8001ee2:	f012 fc0d 	bl	8014700 <malloc>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff9c 	bl	8001e28 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	220e      	movs	r2, #14
 8001ef4:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	220d      	movs	r2, #13
 8001efc:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	22bb      	movs	r2, #187	; 0xbb
 8001f02:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	22bb      	movs	r2, #187	; 0xbb
 8001f0a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <sample_pmt+0x104>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3302      	adds	r3, #2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <sample_pmt+0x104>)
 8001f1e:	881a      	ldrh	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3303      	adds	r3, #3
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3305      	adds	r3, #5
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	7852      	ldrb	r2, [r2, #1]
 8001f3a:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3306      	adds	r3, #6
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3307      	adds	r3, #7
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	7852      	ldrb	r2, [r2, #1]
 8001f4e:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3308      	adds	r3, #8
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	7892      	ldrb	r2, [r2, #2]
 8001f58:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3309      	adds	r3, #9
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	78d2      	ldrb	r2, [r2, #3]
 8001f62:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	330a      	adds	r3, #10
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	7912      	ldrb	r2, [r2, #4]
 8001f6c:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	330b      	adds	r3, #11
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	7952      	ldrb	r2, [r2, #5]
 8001f76:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	7992      	ldrb	r2, [r2, #6]
 8001f80:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	330d      	adds	r3, #13
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	79d2      	ldrb	r2, [r2, #7]
 8001f8a:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 1);
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	220e      	movs	r2, #14
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	480a      	ldr	r0, [pc, #40]	; (8001fbc <sample_pmt+0x108>)
 8001f94:	f00c fc46 	bl	800e824 <HAL_UART_Transmit>
	free(buffer);
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f012 fbb9 	bl	8014710 <free>
	free(pmt_spi);
 8001f9e:	68b8      	ldr	r0, [r7, #8]
 8001fa0:	f012 fbb6 	bl	8014710 <free>
	free(timestamp);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f012 fbb3 	bl	8014710 <free>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	58020000 	.word	0x58020000
 8001fb8:	24000b30 	.word	0x24000b30
 8001fbc:	240005cc 	.word	0x240005cc

08001fc0 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8001fc6:	bf00      	nop
 8001fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fcc:	4852      	ldr	r0, [pc, #328]	; (8002118 <sample_erpa+0x158>)
 8001fce:	f006 fbe5 	bl	800879c <HAL_GPIO_ReadPin>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f7      	bne.n	8001fc8 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001fd8:	2012      	movs	r0, #18
 8001fda:	f012 fb91 	bl	8014700 <malloc>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	60fb      	str	r3, [r7, #12]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f012 fb8c 	bl	8014700 <malloc>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60bb      	str	r3, [r7, #8]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8001fec:	2004      	movs	r0, #4
 8001fee:	f012 fb87 	bl	8014700 <malloc>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	607b      	str	r3, [r7, #4]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001ff6:	2008      	movs	r0, #8
 8001ff8:	f012 fb82 	bl	8014700 <malloc>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	603b      	str	r3, [r7, #0]
	getTimestamp(timestamp);
 8002000:	6838      	ldr	r0, [r7, #0]
 8002002:	f7ff ff11 	bl	8001e28 <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	220e      	movs	r2, #14
 800200a:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3301      	adds	r3, #1
 8002010:	220d      	movs	r2, #13
 8002012:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	22ee      	movs	r2, #238	; 0xee
 8002018:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3302      	adds	r3, #2
 800201e:	22dd      	movs	r2, #221	; 0xdd
 8002020:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	22aa      	movs	r2, #170	; 0xaa
 8002026:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3301      	adds	r3, #1
 800202c:	22aa      	movs	r2, #170	; 0xaa
 800202e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002030:	4b3a      	ldr	r3, [pc, #232]	; (800211c <sample_erpa+0x15c>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3302      	adds	r3, #2
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002040:	4b36      	ldr	r3, [pc, #216]	; (800211c <sample_erpa+0x15c>)
 8002042:	881a      	ldrh	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3303      	adds	r3, #3
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3304      	adds	r3, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	881a      	ldrh	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3305      	adds	r3, #5
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3302      	adds	r3, #2
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3306      	adds	r3, #6
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3302      	adds	r3, #2
 800207e:	881a      	ldrh	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3307      	adds	r3, #7
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3308      	adds	r3, #8
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	7812      	ldrb	r2, [r2, #0]
 8002090:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3309      	adds	r3, #9
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	7852      	ldrb	r2, [r2, #1]
 800209a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	330a      	adds	r3, #10
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	330b      	adds	r3, #11
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	7852      	ldrb	r2, [r2, #1]
 80020ae:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	330c      	adds	r3, #12
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	7892      	ldrb	r2, [r2, #2]
 80020b8:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	330d      	adds	r3, #13
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	78d2      	ldrb	r2, [r2, #3]
 80020c2:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	330e      	adds	r3, #14
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	7912      	ldrb	r2, [r2, #4]
 80020cc:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	330f      	adds	r3, #15
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	7952      	ldrb	r2, [r2, #5]
 80020d6:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3310      	adds	r3, #16
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	7992      	ldrb	r2, [r2, #6]
 80020e0:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3311      	adds	r3, #17
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	79d2      	ldrb	r2, [r2, #7]
 80020ea:	701a      	strb	r2, [r3, #0]



	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 1);
 80020ec:	2301      	movs	r3, #1
 80020ee:	2212      	movs	r2, #18
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	480b      	ldr	r0, [pc, #44]	; (8002120 <sample_erpa+0x160>)
 80020f4:	f00c fb96 	bl	800e824 <HAL_UART_Transmit>
	free(buffer);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f012 fb09 	bl	8014710 <free>
	free(erpa_spi);
 80020fe:	68b8      	ldr	r0, [r7, #8]
 8002100:	f012 fb06 	bl	8014710 <free>
	free(erpa_adc);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f012 fb03 	bl	8014710 <free>
	free(timestamp);
 800210a:	6838      	ldr	r0, [r7, #0]
 800210c:	f012 fb00 	bl	8014710 <free>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	58020400 	.word	0x58020400
 800211c:	24000b32 	.word	0x24000b32
 8002120:	240005cc 	.word	0x240005cc

08002124 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800212a:	202e      	movs	r0, #46	; 0x2e
 800212c:	f012 fae8 	bl	8014700 <malloc>
 8002130:	4603      	mov	r3, r0
 8002132:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002134:	2008      	movs	r0, #8
 8002136:	f012 fae3 	bl	8014700 <malloc>
 800213a:	4603      	mov	r3, r0
 800213c:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 800213e:	2012      	movs	r0, #18
 8002140:	f012 fade 	bl	8014700 <malloc>
 8002144:	4603      	mov	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8002148:	2008      	movs	r0, #8
 800214a:	f012 fad9 	bl	8014700 <malloc>
 800214e:	4603      	mov	r3, r0
 8002150:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002152:	2008      	movs	r0, #8
 8002154:	f012 fad4 	bl	8014700 <malloc>
 8002158:	4603      	mov	r3, r0
 800215a:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff fe63 	bl	8001e28 <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2211      	movs	r2, #17
 8002166:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	3302      	adds	r3, #2
 800216c:	2212      	movs	r2, #18
 800216e:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	3304      	adds	r3, #4
 8002174:	2213      	movs	r2, #19
 8002176:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3306      	adds	r3, #6
 800217c:	2214      	movs	r2, #20
 800217e:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	22a0      	movs	r2, #160	; 0xa0
 8002184:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3302      	adds	r3, #2
 800218a:	22a1      	movs	r2, #161	; 0xa1
 800218c:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3304      	adds	r3, #4
 8002192:	22a2      	movs	r2, #162	; 0xa2
 8002194:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3306      	adds	r3, #6
 800219a:	22a3      	movs	r2, #163	; 0xa3
 800219c:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3308      	adds	r3, #8
 80021a2:	22a4      	movs	r2, #164	; 0xa4
 80021a4:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	330a      	adds	r3, #10
 80021aa:	22a5      	movs	r2, #165	; 0xa5
 80021ac:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	330c      	adds	r3, #12
 80021b2:	22a6      	movs	r2, #166	; 0xa6
 80021b4:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	330e      	adds	r3, #14
 80021ba:	22a7      	movs	r2, #167	; 0xa7
 80021bc:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3310      	adds	r3, #16
 80021c2:	22a8      	movs	r2, #168	; 0xa8
 80021c4:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	22b0      	movs	r2, #176	; 0xb0
 80021ca:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3302      	adds	r3, #2
 80021d0:	22b1      	movs	r2, #177	; 0xb1
 80021d2:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3304      	adds	r3, #4
 80021d8:	22b2      	movs	r2, #178	; 0xb2
 80021da:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	3306      	adds	r3, #6
 80021e0:	22b3      	movs	r2, #179	; 0xb3
 80021e2:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	22cc      	movs	r2, #204	; 0xcc
 80021e8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	22cc      	movs	r2, #204	; 0xcc
 80021f0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80021f2:	4ba6      	ldr	r3, [pc, #664]	; (800248c <sample_hk+0x368>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3302      	adds	r3, #2
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002202:	4ba2      	ldr	r3, [pc, #648]	; (800248c <sample_hk+0x368>)
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3303      	adds	r3, #3
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3302      	adds	r3, #2
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	b29a      	uxth	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3304      	adds	r3, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3302      	adds	r3, #2
 8002224:	881a      	ldrh	r2, [r3, #0]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3305      	adds	r3, #5
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	b29a      	uxth	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3306      	adds	r3, #6
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	881a      	ldrh	r2, [r3, #0]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3307      	adds	r3, #7
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002250:	121a      	asrs	r2, r3, #8
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3308      	adds	r3, #8
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3309      	adds	r3, #9
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	3302      	adds	r3, #2
 800226c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002270:	121a      	asrs	r2, r3, #8
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	330a      	adds	r3, #10
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	3302      	adds	r3, #2
 800227e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	330b      	adds	r3, #11
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	3304      	adds	r3, #4
 800228e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002292:	121a      	asrs	r2, r3, #8
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	330c      	adds	r3, #12
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	3304      	adds	r3, #4
 80022a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	330d      	adds	r3, #13
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	3306      	adds	r3, #6
 80022b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b4:	121a      	asrs	r2, r3, #8
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	330e      	adds	r3, #14
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	3306      	adds	r3, #6
 80022c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	330f      	adds	r3, #15
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3310      	adds	r3, #16
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3311      	adds	r3, #17
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3302      	adds	r3, #2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3312      	adds	r3, #18
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3302      	adds	r3, #2
 8002300:	881a      	ldrh	r2, [r3, #0]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3313      	adds	r3, #19
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3304      	adds	r3, #4
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	b29a      	uxth	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3314      	adds	r3, #20
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3304      	adds	r3, #4
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3315      	adds	r3, #21
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3306      	adds	r3, #6
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	b29a      	uxth	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3316      	adds	r3, #22
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	3306      	adds	r3, #6
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3317      	adds	r3, #23
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	330c      	adds	r3, #12
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	b29a      	uxth	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3318      	adds	r3, #24
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	330c      	adds	r3, #12
 8002360:	881a      	ldrh	r2, [r3, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3319      	adds	r3, #25
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3306      	adds	r3, #6
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	b29a      	uxth	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	331a      	adds	r3, #26
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3306      	adds	r3, #6
 8002380:	881a      	ldrh	r2, [r3, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	331b      	adds	r3, #27
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	3304      	adds	r3, #4
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	b29a      	uxth	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	331c      	adds	r3, #28
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3304      	adds	r3, #4
 80023a0:	881a      	ldrh	r2, [r3, #0]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	331d      	adds	r3, #29
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	330e      	adds	r3, #14
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	331e      	adds	r3, #30
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	330e      	adds	r3, #14
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	331f      	adds	r3, #31
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3310      	adds	r3, #16
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3320      	adds	r3, #32
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3310      	adds	r3, #16
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3321      	adds	r3, #33	; 0x21
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3308      	adds	r3, #8
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3322      	adds	r3, #34	; 0x22
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3308      	adds	r3, #8
 8002400:	881a      	ldrh	r2, [r3, #0]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3323      	adds	r3, #35	; 0x23
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	330a      	adds	r3, #10
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	b29a      	uxth	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3324      	adds	r3, #36	; 0x24
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	330a      	adds	r3, #10
 8002420:	881a      	ldrh	r2, [r3, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3325      	adds	r3, #37	; 0x25
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3326      	adds	r3, #38	; 0x26
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	7812      	ldrb	r2, [r2, #0]
 8002432:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3327      	adds	r3, #39	; 0x27
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	7852      	ldrb	r2, [r2, #1]
 800243c:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3328      	adds	r3, #40	; 0x28
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	7892      	ldrb	r2, [r2, #2]
 8002446:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3329      	adds	r3, #41	; 0x29
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	78d2      	ldrb	r2, [r2, #3]
 8002450:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	332a      	adds	r3, #42	; 0x2a
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	7912      	ldrb	r2, [r2, #4]
 800245a:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	332b      	adds	r3, #43	; 0x2b
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	7952      	ldrb	r2, [r2, #5]
 8002464:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	332c      	adds	r3, #44	; 0x2c
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	7992      	ldrb	r2, [r2, #6]
 800246e:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	332d      	adds	r3, #45	; 0x2d
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	79d2      	ldrb	r2, [r2, #7]
 8002478:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 1);
 800247a:	2301      	movs	r3, #1
 800247c:	222e      	movs	r2, #46	; 0x2e
 800247e:	6979      	ldr	r1, [r7, #20]
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <sample_hk+0x36c>)
 8002482:	f00c f9cf 	bl	800e824 <HAL_UART_Transmit>
	free(buffer);
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	e004      	b.n	8002494 <sample_hk+0x370>
 800248a:	bf00      	nop
 800248c:	24000b34 	.word	0x24000b34
 8002490:	240005cc 	.word	0x240005cc
 8002494:	f012 f93c 	bl	8014710 <free>
	free(hk_i2c);
 8002498:	6938      	ldr	r0, [r7, #16]
 800249a:	f012 f939 	bl	8014710 <free>
	free(hk_adc1);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f012 f936 	bl	8014710 <free>
	free(hk_adc3);
 80024a4:	68b8      	ldr	r0, [r7, #8]
 80024a6:	f012 f933 	bl	8014710 <free>
	free(timestamp);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f012 f930 	bl	8014710 <free>
}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <PMT_init+0x38>)
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c8:	2200      	movs	r2, #0
 80024ca:	2101      	movs	r1, #1
 80024cc:	f00f f850 	bl	8011570 <osEventFlagsWait>
		if(PMT_ON){
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <PMT_init+0x3c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <PMT_init+0x30>
			sample_pmt();
 80024d8:	f7ff fcec 	bl	8001eb4 <sample_pmt>
			pmt_seq++;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <PMT_init+0x40>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <PMT_init+0x40>)
 80024e6:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 80024e8:	f00e ff62 	bl	80113b0 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80024ec:	e7e8      	b.n	80024c0 <PMT_init+0x8>
 80024ee:	bf00      	nop
 80024f0:	24000b3c 	.word	0x24000b3c
 80024f4:	24000b36 	.word	0x24000b36
 80024f8:	24000b30 	.word	0x24000b30

080024fc <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <ERPA_init+0x38>)
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800250c:	2200      	movs	r2, #0
 800250e:	2102      	movs	r1, #2
 8002510:	f00f f82e 	bl	8011570 <osEventFlagsWait>
		if (ERPA_ON)
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <ERPA_init+0x3c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <ERPA_init+0x30>
		{
			sample_erpa();
 800251c:	f7ff fd50 	bl	8001fc0 <sample_erpa>
			erpa_seq++;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <ERPA_init+0x40>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <ERPA_init+0x40>)
 800252a:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 800252c:	f00e ff40 	bl	80113b0 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002530:	e7e8      	b.n	8002504 <ERPA_init+0x8>
 8002532:	bf00      	nop
 8002534:	24000b3c 	.word	0x24000b3c
 8002538:	24000b37 	.word	0x24000b37
 800253c:	24000b32 	.word	0x24000b32

08002540 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HK_init+0x38>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002550:	2200      	movs	r2, #0
 8002552:	2104      	movs	r1, #4
 8002554:	f00f f80c 	bl	8011570 <osEventFlagsWait>
		if(HK_ON)
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <HK_init+0x3c>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HK_init+0x30>
		{
			sample_hk();
 8002560:	f7ff fde0 	bl	8002124 <sample_hk>
			hk_seq++;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HK_init+0x40>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HK_init+0x40>)
 800256e:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002570:	f00e ff1e 	bl	80113b0 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002574:	e7e8      	b.n	8002548 <HK_init+0x8>
 8002576:	bf00      	nop
 8002578:	24000b3c 	.word	0x24000b3c
 800257c:	24000b38 	.word	0x24000b38
 8002580:	24000b34 	.word	0x24000b34

08002584 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800258c:	2201      	movs	r2, #1
 800258e:	4904      	ldr	r1, [pc, #16]	; (80025a0 <UART_RX_init+0x1c>)
 8002590:	4804      	ldr	r0, [pc, #16]	; (80025a4 <UART_RX_init+0x20>)
 8002592:	f00c fa9d 	bl	800ead0 <HAL_UART_Receive_IT>
		osDelay(5);
 8002596:	2005      	movs	r0, #5
 8002598:	f00e ff4b 	bl	8011432 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800259c:	e7f6      	b.n	800258c <UART_RX_init+0x8>
 800259e:	bf00      	nop
 80025a0:	24000b40 	.word	0x24000b40
 80025a4:	240005cc 	.word	0x240005cc

080025a8 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <GPIO_on_init+0x9c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f00e ff1b 	bl	80113f0 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <GPIO_on_init+0xa0>)
 80025bc:	2104      	movs	r1, #4
 80025be:	2201      	movs	r2, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f006 f903 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 80025c6:	2064      	movs	r0, #100	; 0x64
 80025c8:	f00e ff33 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <GPIO_on_init+0xa0>)
 80025ce:	2120      	movs	r1, #32
 80025d0:	2201      	movs	r2, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f006 f8fa 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 80025d8:	2064      	movs	r0, #100	; 0x64
 80025da:	f00e ff2a 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <GPIO_on_init+0xa4>)
 80025e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025e4:	2201      	movs	r2, #1
 80025e6:	4618      	mov	r0, r3
 80025e8:	f006 f8f0 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	f00e ff20 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <GPIO_on_init+0xa4>)
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	2201      	movs	r2, #1
 80025f8:	4618      	mov	r0, r3
 80025fa:	f006 f8e7 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 80025fe:	2064      	movs	r0, #100	; 0x64
 8002600:	f00e ff17 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <GPIO_on_init+0xa4>)
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	2201      	movs	r2, #1
 800260a:	4618      	mov	r0, r3
 800260c:	f006 f8de 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 8002610:	2064      	movs	r0, #100	; 0x64
 8002612:	f00e ff0e 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <GPIO_on_init+0xa4>)
 8002618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800261c:	2201      	movs	r2, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f006 f8d4 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 8002624:	2064      	movs	r0, #100	; 0x64
 8002626:	f00e ff04 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <GPIO_on_init+0xa4>)
 800262c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002630:	2201      	movs	r2, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f006 f8ca 	bl	80087cc <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002638:	4b02      	ldr	r3, [pc, #8]	; (8002644 <GPIO_on_init+0x9c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f00e fed7 	bl	80113f0 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002642:	e7ba      	b.n	80025ba <GPIO_on_init+0x12>
 8002644:	24000670 	.word	0x24000670
 8002648:	58020400 	.word	0x58020400
 800264c:	58020800 	.word	0x58020800

08002650 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <GPIO_off_init+0x9c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f00e fec7 	bl	80113f0 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <GPIO_off_init+0xa0>)
 8002664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002668:	2200      	movs	r2, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f006 f8ae 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 8002670:	2064      	movs	r0, #100	; 0x64
 8002672:	f00e fede 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <GPIO_off_init+0xa0>)
 8002678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800267c:	2200      	movs	r2, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f006 f8a4 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 8002684:	2064      	movs	r0, #100	; 0x64
 8002686:	f00e fed4 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <GPIO_off_init+0xa0>)
 800268c:	2140      	movs	r1, #64	; 0x40
 800268e:	2200      	movs	r2, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f006 f89b 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 8002696:	2064      	movs	r0, #100	; 0x64
 8002698:	f00e fecb 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <GPIO_off_init+0xa0>)
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	2200      	movs	r2, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f006 f892 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 80026a8:	2064      	movs	r0, #100	; 0x64
 80026aa:	f00e fec2 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <GPIO_off_init+0xa0>)
 80026b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b4:	2200      	movs	r2, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f006 f888 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 80026bc:	2064      	movs	r0, #100	; 0x64
 80026be:	f00e feb8 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <GPIO_off_init+0xa4>)
 80026c4:	2120      	movs	r1, #32
 80026c6:	2200      	movs	r2, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f006 f87f 	bl	80087cc <HAL_GPIO_WritePin>
		osDelay(100);
 80026ce:	2064      	movs	r0, #100	; 0x64
 80026d0:	f00e feaf 	bl	8011432 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <GPIO_off_init+0xa4>)
 80026d6:	2104      	movs	r1, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f006 f876 	bl	80087cc <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 80026e0:	4b02      	ldr	r3, [pc, #8]	; (80026ec <GPIO_off_init+0x9c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f00e fe83 	bl	80113f0 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80026ea:	e7ba      	b.n	8002662 <GPIO_off_init+0x12>
 80026ec:	240008d0 	.word	0x240008d0
 80026f0:	58020800 	.word	0x58020800
 80026f4:	58020400 	.word	0x58020400

080026f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800270a:	f000 ff1f 	bl	800354c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40001000 	.word	0x40001000

0800271c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002724:	e7fe      	b.n	8002724 <Error_Handler+0x8>
	...

08002728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_MspInit+0x38>)
 8002730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002734:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_MspInit+0x38>)
 8002736:	f043 0302 	orr.w	r3, r3, #2
 800273a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_MspInit+0x38>)
 8002740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	210f      	movs	r1, #15
 8002750:	f06f 0001 	mvn.w	r0, #1
 8002754:	f002 fc08 	bl	8004f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	58024400 	.word	0x58024400

08002764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	; 0x38
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a7b      	ldr	r2, [pc, #492]	; (8002970 <HAL_ADC_MspInit+0x20c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	f040 8091 	bne.w	80028aa <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002788:	4b7a      	ldr	r3, [pc, #488]	; (8002974 <HAL_ADC_MspInit+0x210>)
 800278a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800278e:	4a79      	ldr	r2, [pc, #484]	; (8002974 <HAL_ADC_MspInit+0x210>)
 8002790:	f043 0320 	orr.w	r3, r3, #32
 8002794:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002798:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_ADC_MspInit+0x210>)
 800279a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	623b      	str	r3, [r7, #32]
 80027a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a6:	4b73      	ldr	r3, [pc, #460]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	4a71      	ldr	r2, [pc, #452]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b6:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80027b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	4b6b      	ldr	r3, [pc, #428]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80027c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ca:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027d4:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80027d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80027e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e8:	4a62      	ldr	r2, [pc, #392]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027f2:	4b60      	ldr	r3, [pc, #384]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80027f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002800:	2333      	movs	r3, #51	; 0x33
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002804:	2303      	movs	r3, #3
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002810:	4619      	mov	r1, r3
 8002812:	4859      	ldr	r0, [pc, #356]	; (8002978 <HAL_ADC_MspInit+0x214>)
 8002814:	f005 fe12 	bl	800843c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002818:	23ce      	movs	r3, #206	; 0xce
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281c:	2303      	movs	r3, #3
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002828:	4619      	mov	r1, r3
 800282a:	4854      	ldr	r0, [pc, #336]	; (800297c <HAL_ADC_MspInit+0x218>)
 800282c:	f005 fe06 	bl	800843c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002830:	2303      	movs	r3, #3
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002834:	2303      	movs	r3, #3
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	484f      	ldr	r0, [pc, #316]	; (8002980 <HAL_ADC_MspInit+0x21c>)
 8002844:	f005 fdfa 	bl	800843c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002848:	4b4e      	ldr	r3, [pc, #312]	; (8002984 <HAL_ADC_MspInit+0x220>)
 800284a:	4a4f      	ldr	r2, [pc, #316]	; (8002988 <HAL_ADC_MspInit+0x224>)
 800284c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800284e:	4b4d      	ldr	r3, [pc, #308]	; (8002984 <HAL_ADC_MspInit+0x220>)
 8002850:	2209      	movs	r2, #9
 8002852:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_ADC_MspInit+0x220>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800285a:	4b4a      	ldr	r3, [pc, #296]	; (8002984 <HAL_ADC_MspInit+0x220>)
 800285c:	2200      	movs	r2, #0
 800285e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002860:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_ADC_MspInit+0x220>)
 8002862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002866:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002868:	4b46      	ldr	r3, [pc, #280]	; (8002984 <HAL_ADC_MspInit+0x220>)
 800286a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800286e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002870:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_ADC_MspInit+0x220>)
 8002872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002876:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_ADC_MspInit+0x220>)
 800287a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800287e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002880:	4b40      	ldr	r3, [pc, #256]	; (8002984 <HAL_ADC_MspInit+0x220>)
 8002882:	2200      	movs	r2, #0
 8002884:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_ADC_MspInit+0x220>)
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800288c:	483d      	ldr	r0, [pc, #244]	; (8002984 <HAL_ADC_MspInit+0x220>)
 800288e:	f002 ff99 	bl	80057c4 <HAL_DMA_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002898:	f7ff ff40 	bl	800271c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a39      	ldr	r2, [pc, #228]	; (8002984 <HAL_ADC_MspInit+0x220>)
 80028a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80028a2:	4a38      	ldr	r2, [pc, #224]	; (8002984 <HAL_ADC_MspInit+0x220>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80028a8:	e05e      	b.n	8002968 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a37      	ldr	r2, [pc, #220]	; (800298c <HAL_ADC_MspInit+0x228>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d159      	bne.n	8002968 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80028b4:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80028b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ba:	4a2e      	ldr	r2, [pc, #184]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80028bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80028c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d2:	4b28      	ldr	r3, [pc, #160]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80028d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d8:	4a26      	ldr	r2, [pc, #152]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_ADC_MspInit+0x210>)
 80028e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80028f0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80028f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80028f8:	f000 fe54 	bl	80035a4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80028fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002900:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002904:	f000 fe4e 	bl	80035a4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002908:	4b21      	ldr	r3, [pc, #132]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 800290a:	4a22      	ldr	r2, [pc, #136]	; (8002994 <HAL_ADC_MspInit+0x230>)
 800290c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 8002910:	2273      	movs	r2, #115	; 0x73
 8002912:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 800291c:	2200      	movs	r2, #0
 800291e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 8002922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002926:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 800292a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800292e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 8002932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002936:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 800293a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800293e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 8002942:	2200      	movs	r2, #0
 8002944:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 8002948:	2200      	movs	r2, #0
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800294c:	4810      	ldr	r0, [pc, #64]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 800294e:	f002 ff39 	bl	80057c4 <HAL_DMA_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002958:	f7ff fee0 	bl	800271c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 8002960:	64da      	str	r2, [r3, #76]	; 0x4c
 8002962:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <HAL_ADC_MspInit+0x22c>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002968:	bf00      	nop
 800296a:	3738      	adds	r7, #56	; 0x38
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40022000 	.word	0x40022000
 8002974:	58024400 	.word	0x58024400
 8002978:	58020800 	.word	0x58020800
 800297c:	58020000 	.word	0x58020000
 8002980:	58020400 	.word	0x58020400
 8002984:	240001e4 	.word	0x240001e4
 8002988:	40020010 	.word	0x40020010
 800298c:	58026000 	.word	0x58026000
 8002990:	2400025c 	.word	0x2400025c
 8002994:	40020028 	.word	0x40020028

08002998 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a34      	ldr	r2, [pc, #208]	; (8002a88 <HAL_DAC_MspInit+0xf0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d161      	bne.n	8002a7e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_DAC_MspInit+0xf4>)
 80029bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029c0:	4a32      	ldr	r2, [pc, #200]	; (8002a8c <HAL_DAC_MspInit+0xf4>)
 80029c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_DAC_MspInit+0xf4>)
 80029cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <HAL_DAC_MspInit+0xf4>)
 80029da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029de:	4a2b      	ldr	r2, [pc, #172]	; (8002a8c <HAL_DAC_MspInit+0xf4>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <HAL_DAC_MspInit+0xf4>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029f6:	2310      	movs	r3, #16
 80029f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029fa:	2303      	movs	r3, #3
 80029fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4821      	ldr	r0, [pc, #132]	; (8002a90 <HAL_DAC_MspInit+0xf8>)
 8002a0a:	f005 fd17 	bl	800843c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002a0e:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a10:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <HAL_DAC_MspInit+0x100>)
 8002a12:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002a14:	4b1f      	ldr	r3, [pc, #124]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a16:	2243      	movs	r2, #67	; 0x43
 8002a18:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a1c:	2240      	movs	r2, #64	; 0x40
 8002a1e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a2c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a34:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a3c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a44:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002a52:	4810      	ldr	r0, [pc, #64]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a54:	f002 feb6 	bl	80057c4 <HAL_DMA_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002a5e:	f7ff fe5d 	bl	800271c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <HAL_DAC_MspInit+0xfc>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2105      	movs	r1, #5
 8002a72:	2036      	movs	r0, #54	; 0x36
 8002a74:	f002 fa78 	bl	8004f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a78:	2036      	movs	r0, #54	; 0x36
 8002a7a:	f002 fa8f 	bl	8004f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002a7e:	bf00      	nop
 8002a80:	3728      	adds	r7, #40	; 0x28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40007400 	.word	0x40007400
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	58020000 	.word	0x58020000
 8002a94:	240002e8 	.word	0x240002e8
 8002a98:	40020088 	.word	0x40020088

08002a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b0ba      	sub	sp, #232	; 0xe8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	22c0      	movs	r2, #192	; 0xc0
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f011 fe3d 	bl	801473c <memset>
  if(hi2c->Instance==I2C1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a27      	ldr	r2, [pc, #156]	; (8002b64 <HAL_I2C_MspInit+0xc8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d146      	bne.n	8002b5a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002acc:	f04f 0208 	mov.w	r2, #8
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f007 f822 	bl	8009b2c <HAL_RCCEx_PeriphCLKConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002aee:	f7ff fe15 	bl	800271c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_I2C_MspInit+0xcc>)
 8002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <HAL_I2C_MspInit+0xcc>)
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b02:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_I2C_MspInit+0xcc>)
 8002b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b18:	2312      	movs	r3, #18
 8002b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b34:	4619      	mov	r1, r3
 8002b36:	480d      	ldr	r0, [pc, #52]	; (8002b6c <HAL_I2C_MspInit+0xd0>)
 8002b38:	f005 fc80 	bl	800843c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_I2C_MspInit+0xcc>)
 8002b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_I2C_MspInit+0xcc>)
 8002b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_I2C_MspInit+0xcc>)
 8002b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b5a:	bf00      	nop
 8002b5c:	37e8      	adds	r7, #232	; 0xe8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40005400 	.word	0x40005400
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	58020400 	.word	0x58020400

08002b70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0b2      	sub	sp, #200	; 0xc8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	22c0      	movs	r2, #192	; 0xc0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f011 fddb 	bl	801473c <memset>
  if(hrtc->Instance==RTC)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <HAL_RTC_MspInit+0x5c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d119      	bne.n	8002bc4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f006 ffbf 	bl	8009b2c <HAL_RCCEx_PeriphCLKConfig>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002bb4:	f7ff fdb2 	bl	800271c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_RTC_MspInit+0x60>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_RTC_MspInit+0x60>)
 8002bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	37c8      	adds	r7, #200	; 0xc8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	58004000 	.word	0x58004000
 8002bd0:	58024400 	.word	0x58024400

08002bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b0bc      	sub	sp, #240	; 0xf0
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bec:	f107 0318 	add.w	r3, r7, #24
 8002bf0:	22c0      	movs	r2, #192	; 0xc0
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f011 fda1 	bl	801473c <memset>
  if(hspi->Instance==SPI1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a4c      	ldr	r2, [pc, #304]	; (8002d30 <HAL_SPI_MspInit+0x15c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d145      	bne.n	8002c90 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c14:	f107 0318 	add.w	r3, r7, #24
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f006 ff87 	bl	8009b2c <HAL_RCCEx_PeriphCLKConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002c24:	f7ff fd7a 	bl	800271c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c28:	4b42      	ldr	r3, [pc, #264]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c2e:	4a41      	ldr	r2, [pc, #260]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c38:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4c:	4a39      	ldr	r2, [pc, #228]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c56:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002c64:	2318      	movs	r3, #24
 8002c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c7c:	2305      	movs	r3, #5
 8002c7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c82:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c86:	4619      	mov	r1, r3
 8002c88:	482b      	ldr	r0, [pc, #172]	; (8002d38 <HAL_SPI_MspInit+0x164>)
 8002c8a:	f005 fbd7 	bl	800843c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c8e:	e04a      	b.n	8002d26 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <HAL_SPI_MspInit+0x168>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d145      	bne.n	8002d26 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002c9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002caa:	f107 0318 	add.w	r3, r7, #24
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f006 ff3c 	bl	8009b2c <HAL_RCCEx_PeriphCLKConfig>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002cba:	f7ff fd2f 	bl	800271c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc4:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce2:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_SPI_MspInit+0x160>)
 8002cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002cfa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d14:	2305      	movs	r3, #5
 8002d16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4805      	ldr	r0, [pc, #20]	; (8002d38 <HAL_SPI_MspInit+0x164>)
 8002d22:	f005 fb8b 	bl	800843c <HAL_GPIO_Init>
}
 8002d26:	bf00      	nop
 8002d28:	37f0      	adds	r7, #240	; 0xf0
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40013000 	.word	0x40013000
 8002d34:	58024400 	.word	0x58024400
 8002d38:	58020400 	.word	0x58020400
 8002d3c:	40003800 	.word	0x40003800

08002d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a37      	ldr	r2, [pc, #220]	; (8002e2c <HAL_TIM_Base_MspInit+0xec>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d12f      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d52:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_TIM_Base_MspInit+0xf0>)
 8002d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d58:	4a35      	ldr	r2, [pc, #212]	; (8002e30 <HAL_TIM_Base_MspInit+0xf0>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <HAL_TIM_Base_MspInit+0xf0>)
 8002d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2105      	movs	r1, #5
 8002d74:	2018      	movs	r0, #24
 8002d76:	f002 f8f7 	bl	8004f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002d7a:	2018      	movs	r0, #24
 8002d7c:	f002 f90e 	bl	8004f9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2105      	movs	r1, #5
 8002d84:	2019      	movs	r0, #25
 8002d86:	f002 f8ef 	bl	8004f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002d8a:	2019      	movs	r0, #25
 8002d8c:	f002 f906 	bl	8004f9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2105      	movs	r1, #5
 8002d94:	201a      	movs	r0, #26
 8002d96:	f002 f8e7 	bl	8004f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002d9a:	201a      	movs	r0, #26
 8002d9c:	f002 f8fe 	bl	8004f9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002da0:	2200      	movs	r2, #0
 8002da2:	2105      	movs	r1, #5
 8002da4:	201b      	movs	r0, #27
 8002da6:	f002 f8df 	bl	8004f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002daa:	201b      	movs	r0, #27
 8002dac:	f002 f8f6 	bl	8004f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002db0:	e038      	b.n	8002e24 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dba:	d117      	bne.n	8002dec <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_TIM_Base_MspInit+0xf0>)
 8002dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <HAL_TIM_Base_MspInit+0xf0>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_TIM_Base_MspInit+0xf0>)
 8002dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2105      	movs	r1, #5
 8002dde:	201c      	movs	r0, #28
 8002de0:	f002 f8c2 	bl	8004f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002de4:	201c      	movs	r0, #28
 8002de6:	f002 f8d9 	bl	8004f9c <HAL_NVIC_EnableIRQ>
}
 8002dea:	e01b      	b.n	8002e24 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <HAL_TIM_Base_MspInit+0xf4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d116      	bne.n	8002e24 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <HAL_TIM_Base_MspInit+0xf0>)
 8002df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dfc:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <HAL_TIM_Base_MspInit+0xf0>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_TIM_Base_MspInit+0xf0>)
 8002e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2105      	movs	r1, #5
 8002e18:	201d      	movs	r0, #29
 8002e1a:	f002 f8a5 	bl	8004f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e1e:	201d      	movs	r0, #29
 8002e20:	f002 f8bc 	bl	8004f9c <HAL_NVIC_EnableIRQ>
}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	58024400 	.word	0x58024400
 8002e34:	40000400 	.word	0x40000400

08002e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a26      	ldr	r2, [pc, #152]	; (8002ef0 <HAL_TIM_MspPostInit+0xb8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d120      	bne.n	8002e9c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <HAL_TIM_MspPostInit+0xbc>)
 8002e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e60:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_TIM_MspPostInit+0xbc>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_TIM_MspPostInit+0xbc>)
 8002e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	f107 0314 	add.w	r3, r7, #20
 8002e92:	4619      	mov	r1, r3
 8002e94:	4818      	ldr	r0, [pc, #96]	; (8002ef8 <HAL_TIM_MspPostInit+0xc0>)
 8002e96:	f005 fad1 	bl	800843c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e9a:	e024      	b.n	8002ee6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea4:	d11f      	bne.n	8002ee6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_TIM_MspPostInit+0xbc>)
 8002ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eac:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <HAL_TIM_MspPostInit+0xbc>)
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_TIM_MspPostInit+0xbc>)
 8002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ec4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4806      	ldr	r0, [pc, #24]	; (8002efc <HAL_TIM_MspPostInit+0xc4>)
 8002ee2:	f005 faab 	bl	800843c <HAL_GPIO_Init>
}
 8002ee6:	bf00      	nop
 8002ee8:	3728      	adds	r7, #40	; 0x28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	58020000 	.word	0x58020000
 8002efc:	58020400 	.word	0x58020400

08002f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b0ba      	sub	sp, #232	; 0xe8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	22c0      	movs	r2, #192	; 0xc0
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f011 fc0b 	bl	801473c <memset>
  if(huart->Instance==USART1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <HAL_UART_MspInit+0xd8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d14e      	bne.n	8002fce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f30:	f04f 0201 	mov.w	r2, #1
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f42:	f107 0310 	add.w	r3, r7, #16
 8002f46:	4618      	mov	r0, r3
 8002f48:	f006 fdf0 	bl	8009b2c <HAL_RCCEx_PeriphCLKConfig>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002f52:	f7ff fbe3 	bl	800271c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_UART_MspInit+0xdc>)
 8002f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_UART_MspInit+0xdc>)
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_UART_MspInit+0xdc>)
 8002f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_UART_MspInit+0xdc>)
 8002f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7a:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <HAL_UART_MspInit+0xdc>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f84:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_UART_MspInit+0xdc>)
 8002f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fac:	2307      	movs	r3, #7
 8002fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4809      	ldr	r0, [pc, #36]	; (8002fe0 <HAL_UART_MspInit+0xe0>)
 8002fba:	f005 fa3f 	bl	800843c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2105      	movs	r1, #5
 8002fc2:	2025      	movs	r0, #37	; 0x25
 8002fc4:	f001 ffd0 	bl	8004f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fc8:	2025      	movs	r0, #37	; 0x25
 8002fca:	f001 ffe7 	bl	8004f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fce:	bf00      	nop
 8002fd0:	37e8      	adds	r7, #232	; 0xe8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40011000 	.word	0x40011000
 8002fdc:	58024400 	.word	0x58024400
 8002fe0:	58020000 	.word	0x58020000

08002fe4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b090      	sub	sp, #64	; 0x40
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b0f      	cmp	r3, #15
 8002ff0:	d827      	bhi.n	8003042 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	2036      	movs	r0, #54	; 0x36
 8002ff8:	f001 ffb6 	bl	8004f68 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ffc:	2036      	movs	r0, #54	; 0x36
 8002ffe:	f001 ffcd 	bl	8004f9c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003002:	4a29      	ldr	r2, [pc, #164]	; (80030a8 <HAL_InitTick+0xc4>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_InitTick+0xc8>)
 800300a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800300e:	4a27      	ldr	r2, [pc, #156]	; (80030ac <HAL_InitTick+0xc8>)
 8003010:	f043 0310 	orr.w	r3, r3, #16
 8003014:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_InitTick+0xc8>)
 800301a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003026:	f107 0210 	add.w	r2, r7, #16
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f006 fd39 	bl	8009aa8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <HAL_InitTick+0x6a>
 8003040:	e001      	b.n	8003046 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e02b      	b.n	800309e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003046:	f006 fd03 	bl	8009a50 <HAL_RCC_GetPCLK1Freq>
 800304a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800304c:	e004      	b.n	8003058 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800304e:	f006 fcff 	bl	8009a50 <HAL_RCC_GetPCLK1Freq>
 8003052:	4603      	mov	r3, r0
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305a:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <HAL_InitTick+0xcc>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	0c9b      	lsrs	r3, r3, #18
 8003062:	3b01      	subs	r3, #1
 8003064:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_InitTick+0xd0>)
 8003068:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <HAL_InitTick+0xd4>)
 800306a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_InitTick+0xd0>)
 800306e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003072:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003074:	4a0f      	ldr	r2, [pc, #60]	; (80030b4 <HAL_InitTick+0xd0>)
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_InitTick+0xd0>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_InitTick+0xd0>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003086:	480b      	ldr	r0, [pc, #44]	; (80030b4 <HAL_InitTick+0xd0>)
 8003088:	f009 feaf 	bl	800cdea <HAL_TIM_Base_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d104      	bne.n	800309c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003092:	4808      	ldr	r0, [pc, #32]	; (80030b4 <HAL_InitTick+0xd0>)
 8003094:	f009 ff98 	bl	800cfc8 <HAL_TIM_Base_Start_IT>
 8003098:	4603      	mov	r3, r0
 800309a:	e000      	b.n	800309e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3740      	adds	r7, #64	; 0x40
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	24000090 	.word	0x24000090
 80030ac:	58024400 	.word	0x58024400
 80030b0:	431bde83 	.word	0x431bde83
 80030b4:	24000be8 	.word	0x24000be8
 80030b8:	40001000 	.word	0x40001000

080030bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80030c0:	e7fe      	b.n	80030c0 <NMI_Handler+0x4>

080030c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c6:	e7fe      	b.n	80030c6 <HardFault_Handler+0x4>

080030c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030cc:	e7fe      	b.n	80030cc <MemManage_Handler+0x4>

080030ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d2:	e7fe      	b.n	80030d2 <BusFault_Handler+0x4>

080030d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d8:	e7fe      	b.n	80030d8 <UsageFault_Handler+0x4>

080030da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <DMA1_Stream0_IRQHandler+0x10>)
 80030ee:	f003 fe93 	bl	8006e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	240001e4 	.word	0x240001e4

080030fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <DMA1_Stream1_IRQHandler+0x10>)
 8003102:	f003 fe89 	bl	8006e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2400025c 	.word	0x2400025c

08003110 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <DMA1_Stream5_IRQHandler+0x10>)
 8003116:	f003 fe7f 	bl	8006e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	240002e8 	.word	0x240002e8

08003124 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <TIM1_BRK_IRQHandler+0x10>)
 800312a:	f00a fa8f 	bl	800d64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	240004e8 	.word	0x240004e8

08003138 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <TIM1_UP_IRQHandler+0x10>)
 800313e:	f00a fa85 	bl	800d64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	240004e8 	.word	0x240004e8

0800314c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <TIM1_TRG_COM_IRQHandler+0x10>)
 8003152:	f00a fa7b 	bl	800d64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	240004e8 	.word	0x240004e8

08003160 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <TIM1_CC_IRQHandler+0x10>)
 8003166:	f00a fa71 	bl	800d64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	240004e8 	.word	0x240004e8

08003174 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <TIM2_IRQHandler+0x10>)
 800317a:	f00a fa67 	bl	800d64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	24000534 	.word	0x24000534

08003188 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <TIM3_IRQHandler+0x10>)
 800318e:	f00a fa5d 	bl	800d64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	24000580 	.word	0x24000580

0800319c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <USART1_IRQHandler+0x10>)
 80031a2:	f00b fce1 	bl	800eb68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	240005cc 	.word	0x240005cc

080031b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <TIM6_DAC_IRQHandler+0x20>)
 80031b6:	791b      	ldrb	r3, [r3, #4]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80031be:	4804      	ldr	r0, [pc, #16]	; (80031d0 <TIM6_DAC_IRQHandler+0x20>)
 80031c0:	f002 f881 	bl	80052c6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80031c4:	4803      	ldr	r0, [pc, #12]	; (80031d4 <TIM6_DAC_IRQHandler+0x24>)
 80031c6:	f00a fa41 	bl	800d64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	240002d4 	.word	0x240002d4
 80031d4:	24000be8 	.word	0x24000be8

080031d8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <ITM_SendChar+0x48>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <ITM_SendChar+0x48>)
 80031e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ec:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <ITM_SendChar+0x4c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <ITM_SendChar+0x4c>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80031fa:	bf00      	nop
 80031fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f8      	beq.n	80031fc <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800320a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	6013      	str	r3, [r2, #0]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000edfc 	.word	0xe000edfc
 8003224:	e0000e00 	.word	0xe0000e00

08003228 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e00a      	b.n	8003250 <_read+0x28>
		*ptr++ = __io_getchar();
 800323a:	f3af 8000 	nop.w
 800323e:	4601      	mov	r1, r0
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	60ba      	str	r2, [r7, #8]
 8003246:	b2ca      	uxtb	r2, r1
 8003248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	dbf0      	blt.n	800323a <_read+0x12>
	}

	return len;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e009      	b.n	8003288 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	60ba      	str	r2, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ffab 	bl	80031d8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	dbf1      	blt.n	8003274 <_write+0x12>
	}
	return len;
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_close>:

int _close(int file) {
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c2:	605a      	str	r2, [r3, #4]
	return 0;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_isatty>:

int _isatty(int file) {
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <_sbrk+0x64>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <_sbrk+0x64>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <_sbrk+0x68>)
 8003324:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <_sbrk+0x64>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <_sbrk+0x40>
		errno = ENOMEM;
 8003334:	f011 f9ba 	bl	80146ac <__errno>
 8003338:	4603      	mov	r3, r0
 800333a:	220c      	movs	r2, #12
 800333c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003342:	e009      	b.n	8003358 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <_sbrk+0x64>)
 8003354:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	24080000 	.word	0x24080000
 8003364:	00000400 	.word	0x00000400
 8003368:	24000c34 	.word	0x24000c34
 800336c:	240055a0 	.word	0x240055a0

08003370 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003374:	4b37      	ldr	r3, [pc, #220]	; (8003454 <SystemInit+0xe4>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	4a36      	ldr	r2, [pc, #216]	; (8003454 <SystemInit+0xe4>)
 800337c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <SystemInit+0xe8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	2b06      	cmp	r3, #6
 800338e:	d807      	bhi.n	80033a0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <SystemInit+0xe8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 030f 	bic.w	r3, r3, #15
 8003398:	4a2f      	ldr	r2, [pc, #188]	; (8003458 <SystemInit+0xe8>)
 800339a:	f043 0307 	orr.w	r3, r3, #7
 800339e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <SystemInit+0xec>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2d      	ldr	r2, [pc, #180]	; (800345c <SystemInit+0xec>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80033ac:	4b2b      	ldr	r3, [pc, #172]	; (800345c <SystemInit+0xec>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80033b2:	4b2a      	ldr	r3, [pc, #168]	; (800345c <SystemInit+0xec>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4929      	ldr	r1, [pc, #164]	; (800345c <SystemInit+0xec>)
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <SystemInit+0xf0>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033be:	4b26      	ldr	r3, [pc, #152]	; (8003458 <SystemInit+0xe8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <SystemInit+0xe8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 030f 	bic.w	r3, r3, #15
 80033d2:	4a21      	ldr	r2, [pc, #132]	; (8003458 <SystemInit+0xe8>)
 80033d4:	f043 0307 	orr.w	r3, r3, #7
 80033d8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <SystemInit+0xec>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80033e0:	4b1e      	ldr	r3, [pc, #120]	; (800345c <SystemInit+0xec>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <SystemInit+0xec>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <SystemInit+0xec>)
 80033ee:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <SystemInit+0xf4>)
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <SystemInit+0xec>)
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <SystemInit+0xf8>)
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <SystemInit+0xec>)
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <SystemInit+0xfc>)
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80033fe:	4b17      	ldr	r3, [pc, #92]	; (800345c <SystemInit+0xec>)
 8003400:	2200      	movs	r2, #0
 8003402:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003404:	4b15      	ldr	r3, [pc, #84]	; (800345c <SystemInit+0xec>)
 8003406:	4a19      	ldr	r2, [pc, #100]	; (800346c <SystemInit+0xfc>)
 8003408:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800340a:	4b14      	ldr	r3, [pc, #80]	; (800345c <SystemInit+0xec>)
 800340c:	2200      	movs	r2, #0
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <SystemInit+0xec>)
 8003412:	4a16      	ldr	r2, [pc, #88]	; (800346c <SystemInit+0xfc>)
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <SystemInit+0xec>)
 8003418:	2200      	movs	r2, #0
 800341a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <SystemInit+0xec>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0e      	ldr	r2, [pc, #56]	; (800345c <SystemInit+0xec>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <SystemInit+0xec>)
 800342a:	2200      	movs	r2, #0
 800342c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <SystemInit+0x100>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <SystemInit+0x104>)
 8003434:	4013      	ands	r3, r2
 8003436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343a:	d202      	bcs.n	8003442 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800343c:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <SystemInit+0x108>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <SystemInit+0x10c>)
 8003444:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003448:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00
 8003458:	52002000 	.word	0x52002000
 800345c:	58024400 	.word	0x58024400
 8003460:	eaf6ed7f 	.word	0xeaf6ed7f
 8003464:	02020200 	.word	0x02020200
 8003468:	01ff0000 	.word	0x01ff0000
 800346c:	01010280 	.word	0x01010280
 8003470:	5c001000 	.word	0x5c001000
 8003474:	ffff0000 	.word	0xffff0000
 8003478:	51008108 	.word	0x51008108
 800347c:	52004000 	.word	0x52004000

08003480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003484:	f7ff ff74 	bl	8003370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003488:	480c      	ldr	r0, [pc, #48]	; (80034bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800348a:	490d      	ldr	r1, [pc, #52]	; (80034c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800348c:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800348e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003490:	e002      	b.n	8003498 <LoopCopyDataInit>

08003492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003496:	3304      	adds	r3, #4

08003498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800349a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800349c:	d3f9      	bcc.n	8003492 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034a0:	4c0a      	ldr	r4, [pc, #40]	; (80034cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80034a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a4:	e001      	b.n	80034aa <LoopFillZerobss>

080034a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a8:	3204      	adds	r2, #4

080034aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034ac:	d3fb      	bcc.n	80034a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034ae:	f011 f903 	bl	80146b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034b2:	f7fd fcc5 	bl	8000e40 <main>
  bx  lr
 80034b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80034bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80034c0:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 80034c4:	08015550 	.word	0x08015550
  ldr r2, =_sbss
 80034c8:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80034cc:	2400559c 	.word	0x2400559c

080034d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d0:	e7fe      	b.n	80034d0 <ADC3_IRQHandler>
	...

080034d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034da:	2003      	movs	r0, #3
 80034dc:	f001 fd39 	bl	8004f52 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034e0:	f006 f90c 	bl	80096fc <HAL_RCC_GetSysClockFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <HAL_Init+0x68>)
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	4913      	ldr	r1, [pc, #76]	; (8003540 <HAL_Init+0x6c>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
 80034fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <HAL_Init+0x68>)
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <HAL_Init+0x6c>)
 8003508:	5cd3      	ldrb	r3, [r2, r3]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
 8003514:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <HAL_Init+0x70>)
 8003516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003518:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <HAL_Init+0x74>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800351e:	2005      	movs	r0, #5
 8003520:	f7ff fd60 	bl	8002fe4 <HAL_InitTick>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e002      	b.n	8003534 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800352e:	f7ff f8fb 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	58024400 	.word	0x58024400
 8003540:	0801549c 	.word	0x0801549c
 8003544:	2400008c 	.word	0x2400008c
 8003548:	24000088 	.word	0x24000088

0800354c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_IncTick+0x20>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_IncTick+0x24>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4413      	add	r3, r2
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_IncTick+0x24>)
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	24000094 	.word	0x24000094
 8003570:	24000c38 	.word	0x24000c38

08003574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return uwTick;
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_GetTick+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	24000c38 	.word	0x24000c38

0800358c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <HAL_GetREVID+0x14>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0c1b      	lsrs	r3, r3, #16
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	5c001000 	.word	0x5c001000

080035a4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80035ae:	4b07      	ldr	r3, [pc, #28]	; (80035cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	401a      	ands	r2, r3
 80035b8:	4904      	ldr	r1, [pc, #16]	; (80035cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	58000400 	.word	0x58000400

080035d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	609a      	str	r2, [r3, #8]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3360      	adds	r3, #96	; 0x60
 800364a:	461a      	mov	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	430b      	orrs	r3, r1
 8003666:	431a      	orrs	r2, r3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	611a      	str	r2, [r3, #16]
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b087      	sub	sp, #28
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3360      	adds	r3, #96	; 0x60
 80036ba:	461a      	mov	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	601a      	str	r2, [r3, #0]
  }
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003706:	b480      	push	{r7}
 8003708:	b087      	sub	sp, #28
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3330      	adds	r3, #48	; 0x30
 8003716:	461a      	mov	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	4413      	add	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	211f      	movs	r1, #31
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	401a      	ands	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	f003 011f 	and.w	r1, r3, #31
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	431a      	orrs	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f023 0203 	bic.w	r2, r3, #3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3314      	adds	r3, #20
 8003794:	461a      	mov	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	0e5b      	lsrs	r3, r3, #25
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	4413      	add	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	0d1b      	lsrs	r3, r3, #20
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2107      	movs	r1, #7
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	401a      	ands	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	0d1b      	lsrs	r3, r3, #20
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	431a      	orrs	r2, r3
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f003 0318 	and.w	r3, r3, #24
 80037fe:	4908      	ldr	r1, [pc, #32]	; (8003820 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003800:	40d9      	lsrs	r1, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	400b      	ands	r3, r1
 8003806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800380a:	431a      	orrs	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	000fffff 	.word	0x000fffff

08003824 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 031f 	and.w	r3, r3, #31
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <LL_ADC_DisableDeepPowerDown+0x20>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6093      	str	r3, [r2, #8]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	5fffffc0 	.word	0x5fffffc0

08003864 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003878:	d101      	bne.n	800387e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800389a:	4013      	ands	r3, r2
 800389c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	6fffffc0 	.word	0x6fffffc0

080038b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c8:	d101      	bne.n	80038ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <LL_ADC_Enable+0x24>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	7fffffc0 	.word	0x7fffffc0

08003904 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <LL_ADC_Disable+0x24>)
 8003912:	4013      	ands	r3, r2
 8003914:	f043 0202 	orr.w	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	7fffffc0 	.word	0x7fffffc0

0800392c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <LL_ADC_IsEnabled+0x18>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <LL_ADC_IsEnabled+0x1a>
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d101      	bne.n	800396a <LL_ADC_IsDisableOngoing+0x18>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <LL_ADC_IsDisableOngoing+0x1a>
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <LL_ADC_REG_StartConversion+0x24>)
 8003986:	4013      	ands	r3, r2
 8003988:	f043 0204 	orr.w	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	7fffffc0 	.word	0x7fffffc0

080039a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d101      	bne.n	80039b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d101      	bne.n	80039de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e18f      	b.n	8003d26 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fe fea5 	bl	8002764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff19 	bl	8003864 <LL_ADC_IsDeepPowerDownEnabled>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff feff 	bl	8003840 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff34 	bl	80038b4 <LL_ADC_IsInternalRegulatorEnabled>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d114      	bne.n	8003a7c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff ff18 	bl	800388c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a5c:	4b87      	ldr	r3, [pc, #540]	; (8003c7c <HAL_ADC_Init+0x290>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	4a87      	ldr	r2, [pc, #540]	; (8003c80 <HAL_ADC_Init+0x294>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a6e:	e002      	b.n	8003a76 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f9      	bne.n	8003a70 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff17 	bl	80038b4 <LL_ADC_IsInternalRegulatorEnabled>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f043 0210 	orr.w	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f043 0201 	orr.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff77 	bl	80039a0 <LL_ADC_REG_IsConversionOngoing>
 8003ab2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 8129 	bne.w	8003d14 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 8125 	bne.w	8003d14 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ad2:	f043 0202 	orr.w	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff ff24 	bl	800392c <LL_ADC_IsEnabled>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d136      	bne.n	8003b58 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a65      	ldr	r2, [pc, #404]	; (8003c84 <HAL_ADC_Init+0x298>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_ADC_Init+0x112>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a63      	ldr	r2, [pc, #396]	; (8003c88 <HAL_ADC_Init+0x29c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10e      	bne.n	8003b1c <HAL_ADC_Init+0x130>
 8003afe:	4861      	ldr	r0, [pc, #388]	; (8003c84 <HAL_ADC_Init+0x298>)
 8003b00:	f7ff ff14 	bl	800392c <LL_ADC_IsEnabled>
 8003b04:	4604      	mov	r4, r0
 8003b06:	4860      	ldr	r0, [pc, #384]	; (8003c88 <HAL_ADC_Init+0x29c>)
 8003b08:	f7ff ff10 	bl	800392c <LL_ADC_IsEnabled>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4323      	orrs	r3, r4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	e008      	b.n	8003b2e <HAL_ADC_Init+0x142>
 8003b1c:	485b      	ldr	r0, [pc, #364]	; (8003c8c <HAL_ADC_Init+0x2a0>)
 8003b1e:	f7ff ff05 	bl	800392c <LL_ADC_IsEnabled>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a53      	ldr	r2, [pc, #332]	; (8003c84 <HAL_ADC_Init+0x298>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_ADC_Init+0x15a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a51      	ldr	r2, [pc, #324]	; (8003c88 <HAL_ADC_Init+0x29c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_Init+0x15e>
 8003b46:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <HAL_ADC_Init+0x2a4>)
 8003b48:	e000      	b.n	8003b4c <HAL_ADC_Init+0x160>
 8003b4a:	4a52      	ldr	r2, [pc, #328]	; (8003c94 <HAL_ADC_Init+0x2a8>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f7ff fd3c 	bl	80035d0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003b58:	f7ff fd18 	bl	800358c <HAL_GetREVID>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d914      	bls.n	8003b90 <HAL_ADC_Init+0x1a4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d110      	bne.n	8003b90 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	7d5b      	ldrb	r3, [r3, #21]
 8003b72:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b78:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b7e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7f1b      	ldrb	r3, [r3, #28]
 8003b84:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003b86:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b88:	f043 030c 	orr.w	r3, r3, #12
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	e00d      	b.n	8003bac <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7d5b      	ldrb	r3, [r3, #21]
 8003b94:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b9a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ba0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7f1b      	ldrb	r3, [r3, #28]
 8003ba6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7f1b      	ldrb	r3, [r3, #28]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d106      	bne.n	8003bc2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	045b      	lsls	r3, r3, #17
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <HAL_ADC_Init+0x2ac>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	69b9      	ldr	r1, [r7, #24]
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fed2 	bl	80039a0 <LL_ADC_REG_IsConversionOngoing>
 8003bfc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fedf 	bl	80039c6 <LL_ADC_INJ_IsConversionOngoing>
 8003c08:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d15f      	bne.n	8003cd0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d15c      	bne.n	8003cd0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7d1b      	ldrb	r3, [r3, #20]
 8003c1a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	4b1c      	ldr	r3, [pc, #112]	; (8003c9c <HAL_ADC_Init+0x2b0>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d130      	bne.n	8003ca4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <HAL_ADC_Init+0x2b4>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c56:	3a01      	subs	r2, #1
 8003c58:	0411      	lsls	r1, r2, #16
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	611a      	str	r2, [r3, #16]
 8003c78:	e01c      	b.n	8003cb4 <HAL_ADC_Init+0x2c8>
 8003c7a:	bf00      	nop
 8003c7c:	24000088 	.word	0x24000088
 8003c80:	053e2d63 	.word	0x053e2d63
 8003c84:	40022000 	.word	0x40022000
 8003c88:	40022100 	.word	0x40022100
 8003c8c:	58026000 	.word	0x58026000
 8003c90:	40022300 	.word	0x40022300
 8003c94:	58026300 	.word	0x58026300
 8003c98:	fff0c003 	.word	0xfff0c003
 8003c9c:	ffffbffc 	.word	0xffffbffc
 8003ca0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fdec 	bl	80048a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10c      	bne.n	8003cf2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f023 010f 	bic.w	r1, r3, #15
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	1e5a      	subs	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf0:	e007      	b.n	8003d02 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 020f 	bic.w	r2, r2, #15
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
 8003d12:	e007      	b.n	8003d24 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d18:	f043 0210 	orr.w	r2, r3, #16
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d24:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3724      	adds	r7, #36	; 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd90      	pop	{r4, r7, pc}
 8003d2e:	bf00      	nop

08003d30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a55      	ldr	r2, [pc, #340]	; (8003e98 <HAL_ADC_Start_DMA+0x168>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <HAL_ADC_Start_DMA+0x20>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <HAL_ADC_Start_DMA+0x16c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_Start_DMA+0x24>
 8003d50:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <HAL_ADC_Start_DMA+0x170>)
 8003d52:	e000      	b.n	8003d56 <HAL_ADC_Start_DMA+0x26>
 8003d54:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_ADC_Start_DMA+0x174>)
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fd64 	bl	8003824 <LL_ADC_GetMultimode>
 8003d5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fe1c 	bl	80039a0 <LL_ADC_REG_IsConversionOngoing>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 808c 	bne.w	8003e88 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_Start_DMA+0x4e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e087      	b.n	8003e8e <HAL_ADC_Start_DMA+0x15e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d002      	beq.n	8003d98 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d170      	bne.n	8003e7a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fc07 	bl	80045ac <ADC_Enable>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003da2:	7dfb      	ldrb	r3, [r7, #23]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d163      	bne.n	8003e70 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dac:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <HAL_ADC_Start_DMA+0x178>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a37      	ldr	r2, [pc, #220]	; (8003e9c <HAL_ADC_Start_DMA+0x16c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d002      	beq.n	8003dc8 <HAL_ADC_Start_DMA+0x98>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	e000      	b.n	8003dca <HAL_ADC_Start_DMA+0x9a>
 8003dc8:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_ADC_Start_DMA+0x168>)
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d002      	beq.n	8003dd8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	f023 0206 	bic.w	r2, r3, #6
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8003dfc:	e002      	b.n	8003e04 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e08:	4a28      	ldr	r2, [pc, #160]	; (8003eac <HAL_ADC_Start_DMA+0x17c>)
 8003e0a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e10:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <HAL_ADC_Start_DMA+0x180>)
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e18:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <HAL_ADC_Start_DMA+0x184>)
 8003e1a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	221c      	movs	r2, #28
 8003e22:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0210 	orr.w	r2, r2, #16
 8003e3a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f7ff fc89 	bl	800375e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3340      	adds	r3, #64	; 0x40
 8003e56:	4619      	mov	r1, r3
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f002 f80e 	bl	8005e7c <HAL_DMA_Start_IT>
 8003e60:	4603      	mov	r3, r0
 8003e62:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fd85 	bl	8003978 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003e6e:	e00d      	b.n	8003e8c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003e78:	e008      	b.n	8003e8c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e86:	e001      	b.n	8003e8c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40022000 	.word	0x40022000
 8003e9c:	40022100 	.word	0x40022100
 8003ea0:	40022300 	.word	0x40022300
 8003ea4:	58026300 	.word	0x58026300
 8003ea8:	fffff0fe 	.word	0xfffff0fe
 8003eac:	0800477f 	.word	0x0800477f
 8003eb0:	08004857 	.word	0x08004857
 8003eb4:	08004873 	.word	0x08004873

08003eb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b0a1      	sub	sp, #132	; 0x84
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a65      	ldr	r2, [pc, #404]	; (80040a4 <HAL_ADC_ConfigChannel+0x1b0>)
 8003f0e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x2a>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e32e      	b.n	800457c <HAL_ADC_ConfigChannel+0x688>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fd38 	bl	80039a0 <LL_ADC_REG_IsConversionOngoing>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f040 8313 	bne.w	800455e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db2c      	blt.n	8003f9a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x6a>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	0e9b      	lsrs	r3, r3, #26
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2201      	movs	r2, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	e016      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x98>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f6e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003f76:	2320      	movs	r3, #32
 8003f78:	e003      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	2201      	movs	r2, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	69d1      	ldr	r1, [r2, #28]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	430b      	orrs	r3, r1
 8003f98:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f7ff fbad 	bl	8003706 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fcf5 	bl	80039a0 <LL_ADC_REG_IsConversionOngoing>
 8003fb6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fd02 	bl	80039c6 <LL_ADC_INJ_IsConversionOngoing>
 8003fc2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 80b8 	bne.w	800413c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 80b4 	bne.w	800413c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f7ff fbcf 	bl	8003784 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003fe6:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <HAL_ADC_ConfigChannel+0x1b4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ff2:	d10b      	bne.n	800400c <HAL_ADC_ConfigChannel+0x118>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	e01d      	b.n	8004048 <HAL_ADC_ConfigChannel+0x154>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x13e>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	e00a      	b.n	8004048 <HAL_ADC_ConfigChannel+0x154>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b04      	cmp	r3, #4
 8004050:	d02c      	beq.n	80040ac <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6919      	ldr	r1, [r3, #16]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004060:	f7ff faea 	bl	8003638 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6919      	ldr	r1, [r3, #16]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	7e5b      	ldrb	r3, [r3, #25]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d102      	bne.n	800407a <HAL_ADC_ConfigChannel+0x186>
 8004074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004078:	e000      	b.n	800407c <HAL_ADC_ConfigChannel+0x188>
 800407a:	2300      	movs	r3, #0
 800407c:	461a      	mov	r2, r3
 800407e:	f7ff fb14 	bl	80036aa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6919      	ldr	r1, [r3, #16]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	7e1b      	ldrb	r3, [r3, #24]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d102      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x1a4>
 8004092:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004096:	e000      	b.n	800409a <HAL_ADC_ConfigChannel+0x1a6>
 8004098:	2300      	movs	r3, #0
 800409a:	461a      	mov	r2, r3
 800409c:	f7ff faec 	bl	8003678 <LL_ADC_SetDataRightShift>
 80040a0:	e04c      	b.n	800413c <HAL_ADC_ConfigChannel+0x248>
 80040a2:	bf00      	nop
 80040a4:	47ff0000 	.word	0x47ff0000
 80040a8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	069b      	lsls	r3, r3, #26
 80040bc:	429a      	cmp	r2, r3
 80040be:	d107      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040ce:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	069b      	lsls	r3, r3, #26
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d107      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040f2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	069b      	lsls	r3, r3, #26
 8004104:	429a      	cmp	r2, r3
 8004106:	d107      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004116:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	069b      	lsls	r3, r3, #26
 8004128:	429a      	cmp	r2, r3
 800412a:	d107      	bne.n	800413c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800413a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fbf3 	bl	800392c <LL_ADC_IsEnabled>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 8211 	bne.w	8004570 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	461a      	mov	r2, r3
 800415c:	f7ff fb3e 	bl	80037dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4aa1      	ldr	r2, [pc, #644]	; (80043ec <HAL_ADC_ConfigChannel+0x4f8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	f040 812e 	bne.w	80043c8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x2a0>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	0e9b      	lsrs	r3, r3, #26
 8004182:	3301      	adds	r3, #1
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2b09      	cmp	r3, #9
 800418a:	bf94      	ite	ls
 800418c:	2301      	movls	r3, #1
 800418e:	2300      	movhi	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e019      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x2d4>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80041ac:	2320      	movs	r3, #32
 80041ae:	e003      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80041b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2b09      	cmp	r3, #9
 80041c0:	bf94      	ite	ls
 80041c2:	2301      	movls	r3, #1
 80041c4:	2300      	movhi	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d079      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x2f4>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0e9b      	lsrs	r3, r3, #26
 80041de:	3301      	adds	r3, #1
 80041e0:	069b      	lsls	r3, r3, #26
 80041e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041e6:	e015      	b.n	8004214 <HAL_ADC_ConfigChannel+0x320>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80041f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80041fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004200:	2320      	movs	r3, #32
 8004202:	e003      	b.n	800420c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	069b      	lsls	r3, r3, #26
 8004210:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x340>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0e9b      	lsrs	r3, r3, #26
 8004226:	3301      	adds	r3, #1
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	e017      	b.n	8004264 <HAL_ADC_ConfigChannel+0x370>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423c:	fa93 f3a3 	rbit	r3, r3
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800424c:	2320      	movs	r3, #32
 800424e:	e003      	b.n	8004258 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	3301      	adds	r3, #1
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2101      	movs	r1, #1
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	ea42 0103 	orr.w	r1, r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <HAL_ADC_ConfigChannel+0x396>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	3301      	adds	r3, #1
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	051b      	lsls	r3, r3, #20
 8004288:	e018      	b.n	80042bc <HAL_ADC_ConfigChannel+0x3c8>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80042a2:	2320      	movs	r3, #32
 80042a4:	e003      	b.n	80042ae <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	fab3 f383 	clz	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	3301      	adds	r3, #1
 80042b0:	f003 021f 	and.w	r2, r3, #31
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042bc:	430b      	orrs	r3, r1
 80042be:	e07e      	b.n	80043be <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d107      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x3e8>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	3301      	adds	r3, #1
 80042d4:	069b      	lsls	r3, r3, #26
 80042d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042da:	e015      	b.n	8004308 <HAL_ADC_ConfigChannel+0x414>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80042f4:	2320      	movs	r3, #32
 80042f6:	e003      	b.n	8004300 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	069b      	lsls	r3, r3, #26
 8004304:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x434>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	3301      	adds	r3, #1
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	e017      	b.n	8004358 <HAL_ADC_ConfigChannel+0x464>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	61bb      	str	r3, [r7, #24]
  return result;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004340:	2320      	movs	r3, #32
 8004342:	e003      	b.n	800434c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3301      	adds	r3, #1
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2101      	movs	r1, #1
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	ea42 0103 	orr.w	r1, r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x490>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	3301      	adds	r3, #1
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	3b1e      	subs	r3, #30
 800437c:	051b      	lsls	r3, r3, #20
 800437e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004382:	e01b      	b.n	80043bc <HAL_ADC_ConfigChannel+0x4c8>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	60fb      	str	r3, [r7, #12]
  return result;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800439c:	2320      	movs	r3, #32
 800439e:	e003      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	3301      	adds	r3, #1
 80043aa:	f003 021f 	and.w	r2, r3, #31
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	3b1e      	subs	r3, #30
 80043b6:	051b      	lsls	r3, r3, #20
 80043b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043bc:	430b      	orrs	r3, r1
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	6892      	ldr	r2, [r2, #8]
 80043c2:	4619      	mov	r1, r3
 80043c4:	f7ff f9de 	bl	8003784 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f280 80cf 	bge.w	8004570 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <HAL_ADC_ConfigChannel+0x4fc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_ADC_ConfigChannel+0x4f2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <HAL_ADC_ConfigChannel+0x500>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10a      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x508>
 80043e6:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_ADC_ConfigChannel+0x504>)
 80043e8:	e009      	b.n	80043fe <HAL_ADC_ConfigChannel+0x50a>
 80043ea:	bf00      	nop
 80043ec:	47ff0000 	.word	0x47ff0000
 80043f0:	40022000 	.word	0x40022000
 80043f4:	40022100 	.word	0x40022100
 80043f8:	40022300 	.word	0x40022300
 80043fc:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_ADC_ConfigChannel+0x690>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f90c 	bl	800361c <LL_ADC_GetCommonPathInternalCh>
 8004404:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a5f      	ldr	r2, [pc, #380]	; (8004588 <HAL_ADC_ConfigChannel+0x694>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_ADC_ConfigChannel+0x526>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a5d      	ldr	r2, [pc, #372]	; (800458c <HAL_ADC_ConfigChannel+0x698>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10e      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x544>
 800441a:	485b      	ldr	r0, [pc, #364]	; (8004588 <HAL_ADC_ConfigChannel+0x694>)
 800441c:	f7ff fa86 	bl	800392c <LL_ADC_IsEnabled>
 8004420:	4604      	mov	r4, r0
 8004422:	485a      	ldr	r0, [pc, #360]	; (800458c <HAL_ADC_ConfigChannel+0x698>)
 8004424:	f7ff fa82 	bl	800392c <LL_ADC_IsEnabled>
 8004428:	4603      	mov	r3, r0
 800442a:	4323      	orrs	r3, r4
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e008      	b.n	800444a <HAL_ADC_ConfigChannel+0x556>
 8004438:	4855      	ldr	r0, [pc, #340]	; (8004590 <HAL_ADC_ConfigChannel+0x69c>)
 800443a:	f7ff fa77 	bl	800392c <LL_ADC_IsEnabled>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d07d      	beq.n	800454a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a50      	ldr	r2, [pc, #320]	; (8004594 <HAL_ADC_ConfigChannel+0x6a0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d130      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x5c6>
 8004458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d12b      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a4a      	ldr	r2, [pc, #296]	; (8004590 <HAL_ADC_ConfigChannel+0x69c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	f040 8081 	bne.w	8004570 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a45      	ldr	r2, [pc, #276]	; (8004588 <HAL_ADC_ConfigChannel+0x694>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_ADC_ConfigChannel+0x58e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a43      	ldr	r2, [pc, #268]	; (800458c <HAL_ADC_ConfigChannel+0x698>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x592>
 8004482:	4a45      	ldr	r2, [pc, #276]	; (8004598 <HAL_ADC_ConfigChannel+0x6a4>)
 8004484:	e000      	b.n	8004488 <HAL_ADC_ConfigChannel+0x594>
 8004486:	4a3f      	ldr	r2, [pc, #252]	; (8004584 <HAL_ADC_ConfigChannel+0x690>)
 8004488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7ff f8b0 	bl	80035f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_ADC_ConfigChannel+0x6a8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	4a40      	ldr	r2, [pc, #256]	; (80045a0 <HAL_ADC_ConfigChannel+0x6ac>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	3301      	adds	r3, #1
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044aa:	e002      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f9      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b8:	e05a      	b.n	8004570 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a39      	ldr	r2, [pc, #228]	; (80045a4 <HAL_ADC_ConfigChannel+0x6b0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d11e      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x60e>
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d119      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2f      	ldr	r2, [pc, #188]	; (8004590 <HAL_ADC_ConfigChannel+0x69c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d14b      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <HAL_ADC_ConfigChannel+0x694>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_ConfigChannel+0x5f8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a29      	ldr	r2, [pc, #164]	; (800458c <HAL_ADC_ConfigChannel+0x698>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x5fc>
 80044ec:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <HAL_ADC_ConfigChannel+0x6a4>)
 80044ee:	e000      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x5fe>
 80044f0:	4a24      	ldr	r2, [pc, #144]	; (8004584 <HAL_ADC_ConfigChannel+0x690>)
 80044f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f7ff f87b 	bl	80035f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004500:	e036      	b.n	8004570 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a28      	ldr	r2, [pc, #160]	; (80045a8 <HAL_ADC_ConfigChannel+0x6b4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d131      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x67c>
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d12c      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <HAL_ADC_ConfigChannel+0x69c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d127      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a18      	ldr	r2, [pc, #96]	; (8004588 <HAL_ADC_ConfigChannel+0x694>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_ADC_ConfigChannel+0x640>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <HAL_ADC_ConfigChannel+0x698>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d101      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x644>
 8004534:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_ADC_ConfigChannel+0x6a4>)
 8004536:	e000      	b.n	800453a <HAL_ADC_ConfigChannel+0x646>
 8004538:	4a12      	ldr	r2, [pc, #72]	; (8004584 <HAL_ADC_ConfigChannel+0x690>)
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7ff f857 	bl	80035f6 <LL_ADC_SetCommonPathInternalCh>
 8004548:	e012      	b.n	8004570 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	f043 0220 	orr.w	r2, r3, #32
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800455c:	e008      	b.n	8004570 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004578:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800457c:	4618      	mov	r0, r3
 800457e:	3784      	adds	r7, #132	; 0x84
 8004580:	46bd      	mov	sp, r7
 8004582:	bd90      	pop	{r4, r7, pc}
 8004584:	58026300 	.word	0x58026300
 8004588:	40022000 	.word	0x40022000
 800458c:	40022100 	.word	0x40022100
 8004590:	58026000 	.word	0x58026000
 8004594:	cb840000 	.word	0xcb840000
 8004598:	40022300 	.word	0x40022300
 800459c:	24000088 	.word	0x24000088
 80045a0:	053e2d63 	.word	0x053e2d63
 80045a4:	c7520000 	.word	0xc7520000
 80045a8:	cfb80000 	.word	0xcfb80000

080045ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff f9b7 	bl	800392c <LL_ADC_IsEnabled>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d16e      	bne.n	80046a2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	4b38      	ldr	r3, [pc, #224]	; (80046ac <ADC_Enable+0x100>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	f043 0210 	orr.w	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	f043 0201 	orr.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e05a      	b.n	80046a4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff f972 	bl	80038dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045f8:	f7fe ffbc 	bl	8003574 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2b      	ldr	r2, [pc, #172]	; (80046b0 <ADC_Enable+0x104>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d004      	beq.n	8004612 <ADC_Enable+0x66>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a29      	ldr	r2, [pc, #164]	; (80046b4 <ADC_Enable+0x108>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d101      	bne.n	8004616 <ADC_Enable+0x6a>
 8004612:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <ADC_Enable+0x10c>)
 8004614:	e000      	b.n	8004618 <ADC_Enable+0x6c>
 8004616:	4b29      	ldr	r3, [pc, #164]	; (80046bc <ADC_Enable+0x110>)
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff f903 	bl	8003824 <LL_ADC_GetMultimode>
 800461e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a23      	ldr	r2, [pc, #140]	; (80046b4 <ADC_Enable+0x108>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d002      	beq.n	8004630 <ADC_Enable+0x84>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	e000      	b.n	8004632 <ADC_Enable+0x86>
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <ADC_Enable+0x104>)
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	4293      	cmp	r3, r2
 8004638:	d02c      	beq.n	8004694 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d130      	bne.n	80046a2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004640:	e028      	b.n	8004694 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff f970 	bl	800392c <LL_ADC_IsEnabled>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f940 	bl	80038dc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800465c:	f7fe ff8a 	bl	8003574 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d914      	bls.n	8004694 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d00d      	beq.n	8004694 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f043 0210 	orr.w	r2, r3, #16
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	f043 0201 	orr.w	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e007      	b.n	80046a4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d1cf      	bne.n	8004642 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	8000003f 	.word	0x8000003f
 80046b0:	40022000 	.word	0x40022000
 80046b4:	40022100 	.word	0x40022100
 80046b8:	40022300 	.word	0x40022300
 80046bc:	58026300 	.word	0x58026300

080046c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff f940 	bl	8003952 <LL_ADC_IsDisableOngoing>
 80046d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff f927 	bl	800392c <LL_ADC_IsEnabled>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d047      	beq.n	8004774 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d144      	bne.n	8004774 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030d 	and.w	r3, r3, #13
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d10c      	bne.n	8004712 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff f901 	bl	8003904 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2203      	movs	r2, #3
 8004708:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800470a:	f7fe ff33 	bl	8003574 <HAL_GetTick>
 800470e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004710:	e029      	b.n	8004766 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f043 0210 	orr.w	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	f043 0201 	orr.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e023      	b.n	8004776 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800472e:	f7fe ff21 	bl	8003574 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d914      	bls.n	8004766 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00d      	beq.n	8004766 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	f043 0210 	orr.w	r2, r3, #16
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e007      	b.n	8004776 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1dc      	bne.n	800472e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004794:	2b00      	cmp	r3, #0
 8004796:	d14b      	bne.n	8004830 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d021      	beq.n	80047f6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe ff92 	bl	80036e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d032      	beq.n	8004828 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d12b      	bne.n	8004828 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d11f      	bne.n	8004828 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	f043 0201 	orr.w	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
 80047f4:	e018      	b.n	8004828 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d111      	bne.n	8004828 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	f043 0201 	orr.w	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7ff fb45 	bl	8003eb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800482e:	e00e      	b.n	800484e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff fb4f 	bl	8003ee0 <HAL_ADC_ErrorCallback>
}
 8004842:	e004      	b.n	800484e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff fb31 	bl	8003ecc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004890:	f043 0204 	orr.w	r2, r3, #4
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff fb21 	bl	8003ee0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a7a      	ldr	r2, [pc, #488]	; (8004aa0 <ADC_ConfigureBoostMode+0x1f8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <ADC_ConfigureBoostMode+0x1c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a79      	ldr	r2, [pc, #484]	; (8004aa4 <ADC_ConfigureBoostMode+0x1fc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d109      	bne.n	80048d8 <ADC_ConfigureBoostMode+0x30>
 80048c4:	4b78      	ldr	r3, [pc, #480]	; (8004aa8 <ADC_ConfigureBoostMode+0x200>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bf14      	ite	ne
 80048d0:	2301      	movne	r3, #1
 80048d2:	2300      	moveq	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	e008      	b.n	80048ea <ADC_ConfigureBoostMode+0x42>
 80048d8:	4b74      	ldr	r3, [pc, #464]	; (8004aac <ADC_ConfigureBoostMode+0x204>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01c      	beq.n	8004928 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80048ee:	f005 f87f 	bl	80099f0 <HAL_RCC_GetHCLKFreq>
 80048f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048fc:	d010      	beq.n	8004920 <ADC_ConfigureBoostMode+0x78>
 80048fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004902:	d873      	bhi.n	80049ec <ADC_ConfigureBoostMode+0x144>
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004908:	d002      	beq.n	8004910 <ADC_ConfigureBoostMode+0x68>
 800490a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800490e:	d16d      	bne.n	80049ec <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	60fb      	str	r3, [r7, #12]
        break;
 800491e:	e068      	b.n	80049f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	60fb      	str	r3, [r7, #12]
        break;
 8004926:	e064      	b.n	80049f2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004928:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800492c:	f04f 0100 	mov.w	r1, #0
 8004930:	f006 fb06 	bl	800af40 <HAL_RCCEx_GetPeriphCLKFreq>
 8004934:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800493e:	d051      	beq.n	80049e4 <ADC_ConfigureBoostMode+0x13c>
 8004940:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004944:	d854      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x148>
 8004946:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800494a:	d047      	beq.n	80049dc <ADC_ConfigureBoostMode+0x134>
 800494c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004950:	d84e      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x148>
 8004952:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004956:	d03d      	beq.n	80049d4 <ADC_ConfigureBoostMode+0x12c>
 8004958:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800495c:	d848      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x148>
 800495e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004962:	d033      	beq.n	80049cc <ADC_ConfigureBoostMode+0x124>
 8004964:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004968:	d842      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x148>
 800496a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800496e:	d029      	beq.n	80049c4 <ADC_ConfigureBoostMode+0x11c>
 8004970:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004974:	d83c      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x148>
 8004976:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800497a:	d01a      	beq.n	80049b2 <ADC_ConfigureBoostMode+0x10a>
 800497c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004980:	d836      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x148>
 8004982:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004986:	d014      	beq.n	80049b2 <ADC_ConfigureBoostMode+0x10a>
 8004988:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800498c:	d830      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x148>
 800498e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004992:	d00e      	beq.n	80049b2 <ADC_ConfigureBoostMode+0x10a>
 8004994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004998:	d82a      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x148>
 800499a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800499e:	d008      	beq.n	80049b2 <ADC_ConfigureBoostMode+0x10a>
 80049a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049a4:	d824      	bhi.n	80049f0 <ADC_ConfigureBoostMode+0x148>
 80049a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049aa:	d002      	beq.n	80049b2 <ADC_ConfigureBoostMode+0x10a>
 80049ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049b0:	d11e      	bne.n	80049f0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	0c9b      	lsrs	r3, r3, #18
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	60fb      	str	r3, [r7, #12]
        break;
 80049c2:	e016      	b.n	80049f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	60fb      	str	r3, [r7, #12]
        break;
 80049ca:	e012      	b.n	80049f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	60fb      	str	r3, [r7, #12]
        break;
 80049d2:	e00e      	b.n	80049f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	60fb      	str	r3, [r7, #12]
        break;
 80049da:	e00a      	b.n	80049f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	09db      	lsrs	r3, r3, #7
 80049e0:	60fb      	str	r3, [r7, #12]
        break;
 80049e2:	e006      	b.n	80049f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	60fb      	str	r3, [r7, #12]
        break;
 80049ea:	e002      	b.n	80049f2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80049ec:	bf00      	nop
 80049ee:	e000      	b.n	80049f2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80049f0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80049f2:	f7fe fdcb 	bl	800358c <HAL_GetREVID>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d815      	bhi.n	8004a2c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a2b      	ldr	r2, [pc, #172]	; (8004ab0 <ADC_ConfigureBoostMode+0x208>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d908      	bls.n	8004a1a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a16:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a18:	e03e      	b.n	8004a98 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a28:	609a      	str	r2, [r3, #8]
}
 8004a2a:	e035      	b.n	8004a98 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <ADC_ConfigureBoostMode+0x20c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d808      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a48:	609a      	str	r2, [r3, #8]
}
 8004a4a:	e025      	b.n	8004a98 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <ADC_ConfigureBoostMode+0x210>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d80a      	bhi.n	8004a6a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a66:	609a      	str	r2, [r3, #8]
}
 8004a68:	e016      	b.n	8004a98 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a13      	ldr	r2, [pc, #76]	; (8004abc <ADC_ConfigureBoostMode+0x214>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d80a      	bhi.n	8004a88 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a84:	609a      	str	r2, [r3, #8]
}
 8004a86:	e007      	b.n	8004a98 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40022000 	.word	0x40022000
 8004aa4:	40022100 	.word	0x40022100
 8004aa8:	40022300 	.word	0x40022300
 8004aac:	58026300 	.word	0x58026300
 8004ab0:	01312d00 	.word	0x01312d00
 8004ab4:	005f5e10 	.word	0x005f5e10
 8004ab8:	00bebc20 	.word	0x00bebc20
 8004abc:	017d7840 	.word	0x017d7840

08004ac0 <LL_ADC_IsEnabled>:
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <LL_ADC_IsEnabled+0x18>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <LL_ADC_IsEnabled+0x1a>
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <LL_ADC_StartCalibration>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <LL_ADC_StartCalibration+0x38>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	3ffeffc0 	.word	0x3ffeffc0

08004b24 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b38:	d101      	bne.n	8004b3e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_ADC_REG_IsConversionOngoing>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d101      	bne.n	8004b64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADCEx_Calibration_Start+0x1e>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e04c      	b.n	8004c2c <HAL_ADCEx_Calibration_Start+0xb8>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff fd90 	bl	80046c0 <ADC_Disable>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d135      	bne.n	8004c16 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bae:	4b21      	ldr	r3, [pc, #132]	; (8004c34 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	f043 0202 	orr.w	r2, r3, #2
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff ff90 	bl	8004ae8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004bc8:	e014      	b.n	8004bf4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d30d      	bcc.n	8004bf4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	f023 0312 	bic.w	r3, r3, #18
 8004be0:	f043 0210 	orr.w	r2, r3, #16
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e01b      	b.n	8004c2c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff93 	bl	8004b24 <LL_ADC_IsCalibrationOnGoing>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e2      	bne.n	8004bca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	f023 0303 	bic.w	r3, r3, #3
 8004c0c:	f043 0201 	orr.w	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	655a      	str	r2, [r3, #84]	; 0x54
 8004c14:	e005      	b.n	8004c22 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	f043 0210 	orr.w	r2, r3, #16
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	ffffeefd 	.word	0xffffeefd
 8004c38:	25c3f800 	.word	0x25c3f800

08004c3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b09f      	sub	sp, #124	; 0x7c
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e0be      	b.n	8004dd8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004c62:	2300      	movs	r3, #0
 8004c64:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a5c      	ldr	r2, [pc, #368]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d102      	bne.n	8004c7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c74:	4b5b      	ldr	r3, [pc, #364]	; (8004de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	e001      	b.n	8004c7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e09d      	b.n	8004dd8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ff54 	bl	8004b4c <LL_ADC_REG_IsConversionOngoing>
 8004ca4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff ff4e 	bl	8004b4c <LL_ADC_REG_IsConversionOngoing>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d17f      	bne.n	8004db6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d17c      	bne.n	8004db6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a47      	ldr	r2, [pc, #284]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a46      	ldr	r2, [pc, #280]	; (8004de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cd2:	e000      	b.n	8004cd6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004cd4:	4b45      	ldr	r3, [pc, #276]	; (8004dec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cd6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d039      	beq.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a3a      	ldr	r2, [pc, #232]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a38      	ldr	r2, [pc, #224]	; (8004de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d10e      	bne.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d06:	4836      	ldr	r0, [pc, #216]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d08:	f7ff feda 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	4835      	ldr	r0, [pc, #212]	; (8004de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d10:	f7ff fed6 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4323      	orrs	r3, r4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e008      	b.n	8004d36 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004d24:	4832      	ldr	r0, [pc, #200]	; (8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d26:	f7ff fecb 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d047      	beq.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	6811      	ldr	r1, [r2, #0]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	6892      	ldr	r2, [r2, #8]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d52:	e03a      	b.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d10e      	bne.n	8004d92 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004d74:	481a      	ldr	r0, [pc, #104]	; (8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d76:	f7ff fea3 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	4819      	ldr	r0, [pc, #100]	; (8004de4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d7e:	f7ff fe9f 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004d82:	4603      	mov	r3, r0
 8004d84:	4323      	orrs	r3, r4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	e008      	b.n	8004da4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004d92:	4817      	ldr	r0, [pc, #92]	; (8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d94:	f7ff fe94 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bf0c      	ite	eq
 8004d9e:	2301      	moveq	r3, #1
 8004da0:	2300      	movne	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d010      	beq.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004db2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004db4:	e009      	b.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004dc8:	e000      	b.n	8004dcc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004dd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	377c      	adds	r7, #124	; 0x7c
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd90      	pop	{r4, r7, pc}
 8004de0:	40022000 	.word	0x40022000
 8004de4:	40022100 	.word	0x40022100
 8004de8:	40022300 	.word	0x40022300
 8004dec:	58026300 	.word	0x58026300
 8004df0:	58026000 	.word	0x58026000
 8004df4:	fffff0e0 	.word	0xfffff0e0

08004df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <__NVIC_SetPriorityGrouping+0x40>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e14:	4013      	ands	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <__NVIC_SetPriorityGrouping+0x44>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e26:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <__NVIC_SetPriorityGrouping+0x40>)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	60d3      	str	r3, [r2, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	e000ed00 	.word	0xe000ed00
 8004e3c:	05fa0000 	.word	0x05fa0000

08004e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <__NVIC_GetPriorityGrouping+0x18>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	0a1b      	lsrs	r3, r3, #8
 8004e4a:	f003 0307 	and.w	r3, r3, #7
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	e000ed00 	.word	0xe000ed00

08004e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	db0b      	blt.n	8004e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	f003 021f 	and.w	r2, r3, #31
 8004e74:	4907      	ldr	r1, [pc, #28]	; (8004e94 <__NVIC_EnableIRQ+0x38>)
 8004e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	e000e100 	.word	0xe000e100

08004e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	6039      	str	r1, [r7, #0]
 8004ea2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	db0a      	blt.n	8004ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	490c      	ldr	r1, [pc, #48]	; (8004ee4 <__NVIC_SetPriority+0x4c>)
 8004eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eb6:	0112      	lsls	r2, r2, #4
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	440b      	add	r3, r1
 8004ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ec0:	e00a      	b.n	8004ed8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	4908      	ldr	r1, [pc, #32]	; (8004ee8 <__NVIC_SetPriority+0x50>)
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	3b04      	subs	r3, #4
 8004ed0:	0112      	lsls	r2, r2, #4
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	761a      	strb	r2, [r3, #24]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	e000e100 	.word	0xe000e100
 8004ee8:	e000ed00 	.word	0xe000ed00

08004eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b089      	sub	sp, #36	; 0x24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f1c3 0307 	rsb	r3, r3, #7
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	bf28      	it	cs
 8004f0a:	2304      	movcs	r3, #4
 8004f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3304      	adds	r3, #4
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d902      	bls.n	8004f1c <NVIC_EncodePriority+0x30>
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3b03      	subs	r3, #3
 8004f1a:	e000      	b.n	8004f1e <NVIC_EncodePriority+0x32>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	401a      	ands	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3e:	43d9      	mvns	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f44:	4313      	orrs	r3, r2
         );
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3724      	adds	r7, #36	; 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ff4c 	bl	8004df8 <__NVIC_SetPriorityGrouping>
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f76:	f7ff ff63 	bl	8004e40 <__NVIC_GetPriorityGrouping>
 8004f7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	6978      	ldr	r0, [r7, #20]
 8004f82:	f7ff ffb3 	bl	8004eec <NVIC_EncodePriority>
 8004f86:	4602      	mov	r2, r0
 8004f88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff ff82 	bl	8004e98 <__NVIC_SetPriority>
}
 8004f94:	bf00      	nop
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff ff56 	bl	8004e5c <__NVIC_EnableIRQ>
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e014      	b.n	8004ff4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	791b      	ldrb	r3, [r3, #4]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fd fcdc 	bl	8002998 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e046      	b.n	800509e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	795b      	ldrb	r3, [r3, #5]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_DAC_Start+0x20>
 8005018:	2302      	movs	r3, #2
 800501a:	e040      	b.n	800509e <HAL_DAC_Start+0xa2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6819      	ldr	r1, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2201      	movs	r2, #1
 8005036:	409a      	lsls	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10f      	bne.n	8005066 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005050:	2b02      	cmp	r3, #2
 8005052:	d11d      	bne.n	8005090 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	605a      	str	r2, [r3, #4]
 8005064:	e014      	b.n	8005090 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	2102      	movs	r1, #2
 8005078:	fa01 f303 	lsl.w	r3, r1, r3
 800507c:	429a      	cmp	r2, r3
 800507e:	d107      	bne.n	8005090 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0202 	orr.w	r2, r2, #2
 800508e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0a2      	b.n	800520a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	795b      	ldrb	r3, [r3, #5]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_DAC_Start_DMA+0x24>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e09c      	b.n	800520a <HAL_DAC_Start_DMA+0x15e>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2202      	movs	r2, #2
 80050da:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d129      	bne.n	8005136 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	4a4b      	ldr	r2, [pc, #300]	; (8005214 <HAL_DAC_Start_DMA+0x168>)
 80050e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	4a4a      	ldr	r2, [pc, #296]	; (8005218 <HAL_DAC_Start_DMA+0x16c>)
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4a49      	ldr	r2, [pc, #292]	; (800521c <HAL_DAC_Start_DMA+0x170>)
 80050f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005108:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_DAC_Start_DMA+0x6c>
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d005      	beq.n	8005122 <HAL_DAC_Start_DMA+0x76>
 8005116:	e009      	b.n	800512c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3308      	adds	r3, #8
 800511e:	613b      	str	r3, [r7, #16]
        break;
 8005120:	e033      	b.n	800518a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	613b      	str	r3, [r7, #16]
        break;
 800512a:	e02e      	b.n	800518a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3310      	adds	r3, #16
 8005132:	613b      	str	r3, [r7, #16]
        break;
 8005134:	e029      	b.n	800518a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	4a39      	ldr	r2, [pc, #228]	; (8005220 <HAL_DAC_Start_DMA+0x174>)
 800513c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	4a38      	ldr	r2, [pc, #224]	; (8005224 <HAL_DAC_Start_DMA+0x178>)
 8005144:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4a37      	ldr	r2, [pc, #220]	; (8005228 <HAL_DAC_Start_DMA+0x17c>)
 800514c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800515c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_DAC_Start_DMA+0xc0>
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d005      	beq.n	8005176 <HAL_DAC_Start_DMA+0xca>
 800516a:	e009      	b.n	8005180 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3314      	adds	r3, #20
 8005172:	613b      	str	r3, [r7, #16]
        break;
 8005174:	e009      	b.n	800518a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3318      	adds	r3, #24
 800517c:	613b      	str	r3, [r7, #16]
        break;
 800517e:	e004      	b.n	800518a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	331c      	adds	r3, #28
 8005186:	613b      	str	r3, [r7, #16]
        break;
 8005188:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d111      	bne.n	80051b4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800519e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6898      	ldr	r0, [r3, #8]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	f000 fe67 	bl	8005e7c <HAL_DMA_Start_IT>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75fb      	strb	r3, [r7, #23]
 80051b2:	e010      	b.n	80051d6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68d8      	ldr	r0, [r3, #12]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	f000 fe55 	bl	8005e7c <HAL_DMA_Start_IT>
 80051d2:	4603      	mov	r3, r0
 80051d4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10c      	bne.n	80051fc <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6819      	ldr	r1, [r3, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2201      	movs	r2, #1
 80051f0:	409a      	lsls	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e005      	b.n	8005208 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f043 0204 	orr.w	r2, r3, #4
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005208:	7dfb      	ldrb	r3, [r7, #23]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	0800569d 	.word	0x0800569d
 8005218:	080056bf 	.word	0x080056bf
 800521c:	080056db 	.word	0x080056db
 8005220:	08005759 	.word	0x08005759
 8005224:	0800577b 	.word	0x0800577b
 8005228:	08005797 	.word	0x08005797

0800522c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e03e      	b.n	80052be <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6819      	ldr	r1, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	43da      	mvns	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	400a      	ands	r2, r1
 800525c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2201      	movs	r2, #1
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	43da      	mvns	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	400a      	ands	r2, r1
 8005278:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10d      	bne.n	800529c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4618      	mov	r0, r3
 8005286:	f001 f863 	bl	8006350 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e00c      	b.n	80052b6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 f855 	bl	8006350 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80052b4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01d      	beq.n	8005324 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d018      	beq.n	8005324 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2204      	movs	r2, #4
 80052f6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800530c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800531c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f86f 	bl	8005402 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01d      	beq.n	800536a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d018      	beq.n	800536a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2204      	movs	r2, #4
 800533c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f043 0202 	orr.w	r2, r3, #2
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005352:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f9ed 	bl	8005744 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005372:	b480      	push	{r7}
 8005374:	b087      	sub	sp, #28
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e015      	b.n	80053ba <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4413      	add	r3, r2
 80053a0:	3308      	adds	r3, #8
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e004      	b.n	80053b0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4413      	add	r3, r2
 80053ac:	3314      	adds	r3, #20
 80053ae:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	461a      	mov	r2, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <HAL_DAC_ConfigChannel+0x1e>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e12a      	b.n	8005690 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	795b      	ldrb	r3, [r3, #5]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_DAC_ConfigChannel+0x2e>
 8005442:	2302      	movs	r3, #2
 8005444:	e124      	b.n	8005690 <HAL_DAC_ConfigChannel+0x278>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2202      	movs	r2, #2
 8005450:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d17a      	bne.n	8005550 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800545a:	f7fe f88b 	bl	8003574 <HAL_GetTick>
 800545e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d13d      	bne.n	80054e2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005466:	e018      	b.n	800549a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005468:	f7fe f884 	bl	8003574 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d911      	bls.n	800549a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547c:	4b86      	ldr	r3, [pc, #536]	; (8005698 <HAL_DAC_ConfigChannel+0x280>)
 800547e:	4013      	ands	r3, r2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f043 0208 	orr.w	r2, r3, #8
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2203      	movs	r2, #3
 8005494:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e0fa      	b.n	8005690 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a0:	4b7d      	ldr	r3, [pc, #500]	; (8005698 <HAL_DAC_ConfigChannel+0x280>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1df      	bne.n	8005468 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	6992      	ldr	r2, [r2, #24]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40
 80054b2:	e020      	b.n	80054f6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80054b4:	f7fe f85e 	bl	8003574 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d90f      	bls.n	80054e2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	da0a      	bge.n	80054e2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f043 0208 	orr.w	r2, r3, #8
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2203      	movs	r2, #3
 80054dc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e0d6      	b.n	8005690 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	dbe3      	blt.n	80054b4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	6992      	ldr	r2, [r2, #24]
 80054f4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	43db      	mvns	r3, r3
 800550c:	ea02 0103 	and.w	r1, r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	409a      	lsls	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	21ff      	movs	r1, #255	; 0xff
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	43db      	mvns	r3, r3
 8005538:	ea02 0103 	and.w	r1, r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	409a      	lsls	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d11d      	bne.n	8005594 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	221f      	movs	r2, #31
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2207      	movs	r2, #7
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d102      	bne.n	80055be <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
 80055bc:	e00f      	b.n	80055de <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d102      	bne.n	80055cc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80055c6:	2301      	movs	r3, #1
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ca:	e008      	b.n	80055de <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d102      	bne.n	80055da <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80055d4:	2301      	movs	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	e001      	b.n	80055de <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6819      	ldr	r1, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	43da      	mvns	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	400a      	ands	r2, r1
 8005624:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	43db      	mvns	r3, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4013      	ands	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4313      	orrs	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6819      	ldr	r1, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	22c0      	movs	r2, #192	; 0xc0
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43da      	mvns	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	400a      	ands	r2, r1
 800567e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800568c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005690:	4618      	mov	r0, r3
 8005692:	3728      	adds	r7, #40	; 0x28
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20008000 	.word	0x20008000

0800569c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff fe8b 	bl	80053c6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	711a      	strb	r2, [r3, #4]
}
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff fe84 	bl	80053da <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f043 0204 	orr.w	r2, r3, #4
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff fe7a 	bl	80053ee <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	711a      	strb	r2, [r3, #4]
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff ffce 	bl	8005708 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	711a      	strb	r2, [r3, #4]
}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7ff ffc7 	bl	800571c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f043 0204 	orr.w	r2, r3, #4
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff ffbd 	bl	8005730 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	711a      	strb	r2, [r3, #4]
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80057cc:	f7fd fed2 	bl	8003574 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e316      	b.n	8005e0a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a66      	ldr	r2, [pc, #408]	; (800597c <HAL_DMA_Init+0x1b8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d04a      	beq.n	800587c <HAL_DMA_Init+0xb8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a65      	ldr	r2, [pc, #404]	; (8005980 <HAL_DMA_Init+0x1bc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d045      	beq.n	800587c <HAL_DMA_Init+0xb8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a63      	ldr	r2, [pc, #396]	; (8005984 <HAL_DMA_Init+0x1c0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d040      	beq.n	800587c <HAL_DMA_Init+0xb8>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a62      	ldr	r2, [pc, #392]	; (8005988 <HAL_DMA_Init+0x1c4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d03b      	beq.n	800587c <HAL_DMA_Init+0xb8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a60      	ldr	r2, [pc, #384]	; (800598c <HAL_DMA_Init+0x1c8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d036      	beq.n	800587c <HAL_DMA_Init+0xb8>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a5f      	ldr	r2, [pc, #380]	; (8005990 <HAL_DMA_Init+0x1cc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d031      	beq.n	800587c <HAL_DMA_Init+0xb8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a5d      	ldr	r2, [pc, #372]	; (8005994 <HAL_DMA_Init+0x1d0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d02c      	beq.n	800587c <HAL_DMA_Init+0xb8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a5c      	ldr	r2, [pc, #368]	; (8005998 <HAL_DMA_Init+0x1d4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d027      	beq.n	800587c <HAL_DMA_Init+0xb8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a5a      	ldr	r2, [pc, #360]	; (800599c <HAL_DMA_Init+0x1d8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d022      	beq.n	800587c <HAL_DMA_Init+0xb8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a59      	ldr	r2, [pc, #356]	; (80059a0 <HAL_DMA_Init+0x1dc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d01d      	beq.n	800587c <HAL_DMA_Init+0xb8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a57      	ldr	r2, [pc, #348]	; (80059a4 <HAL_DMA_Init+0x1e0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d018      	beq.n	800587c <HAL_DMA_Init+0xb8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a56      	ldr	r2, [pc, #344]	; (80059a8 <HAL_DMA_Init+0x1e4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d013      	beq.n	800587c <HAL_DMA_Init+0xb8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a54      	ldr	r2, [pc, #336]	; (80059ac <HAL_DMA_Init+0x1e8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00e      	beq.n	800587c <HAL_DMA_Init+0xb8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a53      	ldr	r2, [pc, #332]	; (80059b0 <HAL_DMA_Init+0x1ec>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_DMA_Init+0xb8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a51      	ldr	r2, [pc, #324]	; (80059b4 <HAL_DMA_Init+0x1f0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_DMA_Init+0xb8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a50      	ldr	r2, [pc, #320]	; (80059b8 <HAL_DMA_Init+0x1f4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_DMA_Init+0xbc>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <HAL_DMA_Init+0xbe>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 813b 	beq.w	8005afe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a37      	ldr	r2, [pc, #220]	; (800597c <HAL_DMA_Init+0x1b8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d04a      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a36      	ldr	r2, [pc, #216]	; (8005980 <HAL_DMA_Init+0x1bc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d045      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a34      	ldr	r2, [pc, #208]	; (8005984 <HAL_DMA_Init+0x1c0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d040      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a33      	ldr	r2, [pc, #204]	; (8005988 <HAL_DMA_Init+0x1c4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d03b      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a31      	ldr	r2, [pc, #196]	; (800598c <HAL_DMA_Init+0x1c8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d036      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a30      	ldr	r2, [pc, #192]	; (8005990 <HAL_DMA_Init+0x1cc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d031      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a2e      	ldr	r2, [pc, #184]	; (8005994 <HAL_DMA_Init+0x1d0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d02c      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a2d      	ldr	r2, [pc, #180]	; (8005998 <HAL_DMA_Init+0x1d4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d027      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a2b      	ldr	r2, [pc, #172]	; (800599c <HAL_DMA_Init+0x1d8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d022      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <HAL_DMA_Init+0x1dc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d01d      	beq.n	8005938 <HAL_DMA_Init+0x174>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a28      	ldr	r2, [pc, #160]	; (80059a4 <HAL_DMA_Init+0x1e0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d018      	beq.n	8005938 <HAL_DMA_Init+0x174>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a27      	ldr	r2, [pc, #156]	; (80059a8 <HAL_DMA_Init+0x1e4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d013      	beq.n	8005938 <HAL_DMA_Init+0x174>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a25      	ldr	r2, [pc, #148]	; (80059ac <HAL_DMA_Init+0x1e8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00e      	beq.n	8005938 <HAL_DMA_Init+0x174>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a24      	ldr	r2, [pc, #144]	; (80059b0 <HAL_DMA_Init+0x1ec>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d009      	beq.n	8005938 <HAL_DMA_Init+0x174>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a22      	ldr	r2, [pc, #136]	; (80059b4 <HAL_DMA_Init+0x1f0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <HAL_DMA_Init+0x174>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <HAL_DMA_Init+0x1f4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d108      	bne.n	800594a <HAL_DMA_Init+0x186>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	e007      	b.n	800595a <HAL_DMA_Init+0x196>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800595a:	e02f      	b.n	80059bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800595c:	f7fd fe0a 	bl	8003574 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b05      	cmp	r3, #5
 8005968:	d928      	bls.n	80059bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2203      	movs	r2, #3
 8005974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e246      	b.n	8005e0a <HAL_DMA_Init+0x646>
 800597c:	40020010 	.word	0x40020010
 8005980:	40020028 	.word	0x40020028
 8005984:	40020040 	.word	0x40020040
 8005988:	40020058 	.word	0x40020058
 800598c:	40020070 	.word	0x40020070
 8005990:	40020088 	.word	0x40020088
 8005994:	400200a0 	.word	0x400200a0
 8005998:	400200b8 	.word	0x400200b8
 800599c:	40020410 	.word	0x40020410
 80059a0:	40020428 	.word	0x40020428
 80059a4:	40020440 	.word	0x40020440
 80059a8:	40020458 	.word	0x40020458
 80059ac:	40020470 	.word	0x40020470
 80059b0:	40020488 	.word	0x40020488
 80059b4:	400204a0 	.word	0x400204a0
 80059b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1c8      	bne.n	800595c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4b83      	ldr	r3, [pc, #524]	; (8005be4 <HAL_DMA_Init+0x420>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80059e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d107      	bne.n	8005a20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005a20:	4b71      	ldr	r3, [pc, #452]	; (8005be8 <HAL_DMA_Init+0x424>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b71      	ldr	r3, [pc, #452]	; (8005bec <HAL_DMA_Init+0x428>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a2c:	d328      	bcc.n	8005a80 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b28      	cmp	r3, #40	; 0x28
 8005a34:	d903      	bls.n	8005a3e <HAL_DMA_Init+0x27a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a3c:	d917      	bls.n	8005a6e <HAL_DMA_Init+0x2aa>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b3e      	cmp	r3, #62	; 0x3e
 8005a44:	d903      	bls.n	8005a4e <HAL_DMA_Init+0x28a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b42      	cmp	r3, #66	; 0x42
 8005a4c:	d90f      	bls.n	8005a6e <HAL_DMA_Init+0x2aa>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b46      	cmp	r3, #70	; 0x46
 8005a54:	d903      	bls.n	8005a5e <HAL_DMA_Init+0x29a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b48      	cmp	r3, #72	; 0x48
 8005a5c:	d907      	bls.n	8005a6e <HAL_DMA_Init+0x2aa>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b4e      	cmp	r3, #78	; 0x4e
 8005a64:	d905      	bls.n	8005a72 <HAL_DMA_Init+0x2ae>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b52      	cmp	r3, #82	; 0x52
 8005a6c:	d801      	bhi.n	8005a72 <HAL_DMA_Init+0x2ae>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <HAL_DMA_Init+0x2b0>
 8005a72:	2300      	movs	r3, #0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a7e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0307 	bic.w	r3, r3, #7
 8005a96:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d117      	bne.n	8005ada <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00e      	beq.n	8005ada <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f002 fb33 	bl	8008128 <DMA_CheckFifoParam>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2240      	movs	r2, #64	; 0x40
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e197      	b.n	8005e0a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f002 fa6e 	bl	8007fc4 <DMA_CalcBaseAndBitshift>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	223f      	movs	r2, #63	; 0x3f
 8005af6:	409a      	lsls	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	609a      	str	r2, [r3, #8]
 8005afc:	e0cd      	b.n	8005c9a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a3b      	ldr	r2, [pc, #236]	; (8005bf0 <HAL_DMA_Init+0x42c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d022      	beq.n	8005b4e <HAL_DMA_Init+0x38a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a39      	ldr	r2, [pc, #228]	; (8005bf4 <HAL_DMA_Init+0x430>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01d      	beq.n	8005b4e <HAL_DMA_Init+0x38a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a38      	ldr	r2, [pc, #224]	; (8005bf8 <HAL_DMA_Init+0x434>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d018      	beq.n	8005b4e <HAL_DMA_Init+0x38a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a36      	ldr	r2, [pc, #216]	; (8005bfc <HAL_DMA_Init+0x438>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_DMA_Init+0x38a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a35      	ldr	r2, [pc, #212]	; (8005c00 <HAL_DMA_Init+0x43c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00e      	beq.n	8005b4e <HAL_DMA_Init+0x38a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a33      	ldr	r2, [pc, #204]	; (8005c04 <HAL_DMA_Init+0x440>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_DMA_Init+0x38a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a32      	ldr	r2, [pc, #200]	; (8005c08 <HAL_DMA_Init+0x444>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d004      	beq.n	8005b4e <HAL_DMA_Init+0x38a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a30      	ldr	r2, [pc, #192]	; (8005c0c <HAL_DMA_Init+0x448>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <HAL_DMA_Init+0x38e>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_DMA_Init+0x390>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8097 	beq.w	8005c88 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a24      	ldr	r2, [pc, #144]	; (8005bf0 <HAL_DMA_Init+0x42c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d021      	beq.n	8005ba8 <HAL_DMA_Init+0x3e4>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a22      	ldr	r2, [pc, #136]	; (8005bf4 <HAL_DMA_Init+0x430>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01c      	beq.n	8005ba8 <HAL_DMA_Init+0x3e4>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a21      	ldr	r2, [pc, #132]	; (8005bf8 <HAL_DMA_Init+0x434>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d017      	beq.n	8005ba8 <HAL_DMA_Init+0x3e4>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1f      	ldr	r2, [pc, #124]	; (8005bfc <HAL_DMA_Init+0x438>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d012      	beq.n	8005ba8 <HAL_DMA_Init+0x3e4>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <HAL_DMA_Init+0x43c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00d      	beq.n	8005ba8 <HAL_DMA_Init+0x3e4>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <HAL_DMA_Init+0x440>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d008      	beq.n	8005ba8 <HAL_DMA_Init+0x3e4>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_DMA_Init+0x444>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <HAL_DMA_Init+0x3e4>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <HAL_DMA_Init+0x448>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <HAL_DMA_Init+0x44c>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d020      	beq.n	8005c14 <HAL_DMA_Init+0x450>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b80      	cmp	r3, #128	; 0x80
 8005bd8:	d102      	bne.n	8005be0 <HAL_DMA_Init+0x41c>
 8005bda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bde:	e01a      	b.n	8005c16 <HAL_DMA_Init+0x452>
 8005be0:	2300      	movs	r3, #0
 8005be2:	e018      	b.n	8005c16 <HAL_DMA_Init+0x452>
 8005be4:	fe10803f 	.word	0xfe10803f
 8005be8:	5c001000 	.word	0x5c001000
 8005bec:	ffff0000 	.word	0xffff0000
 8005bf0:	58025408 	.word	0x58025408
 8005bf4:	5802541c 	.word	0x5802541c
 8005bf8:	58025430 	.word	0x58025430
 8005bfc:	58025444 	.word	0x58025444
 8005c00:	58025458 	.word	0x58025458
 8005c04:	5802546c 	.word	0x5802546c
 8005c08:	58025480 	.word	0x58025480
 8005c0c:	58025494 	.word	0x58025494
 8005c10:	fffe000f 	.word	0xfffe000f
 8005c14:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68d2      	ldr	r2, [r2, #12]
 8005c1a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c44:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4b6e      	ldr	r3, [pc, #440]	; (8005e14 <HAL_DMA_Init+0x650>)
 8005c5c:	4413      	add	r3, r2
 8005c5e:	4a6e      	ldr	r2, [pc, #440]	; (8005e18 <HAL_DMA_Init+0x654>)
 8005c60:	fba2 2303 	umull	r2, r3, r2, r3
 8005c64:	091b      	lsrs	r3, r3, #4
 8005c66:	009a      	lsls	r2, r3, #2
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f002 f9a9 	bl	8007fc4 <DMA_CalcBaseAndBitshift>
 8005c72:	4603      	mov	r3, r0
 8005c74:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2201      	movs	r2, #1
 8005c80:	409a      	lsls	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	e008      	b.n	8005c9a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2240      	movs	r2, #64	; 0x40
 8005c8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2203      	movs	r2, #3
 8005c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e0b7      	b.n	8005e0a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a5f      	ldr	r2, [pc, #380]	; (8005e1c <HAL_DMA_Init+0x658>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d072      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a5d      	ldr	r2, [pc, #372]	; (8005e20 <HAL_DMA_Init+0x65c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d06d      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a5c      	ldr	r2, [pc, #368]	; (8005e24 <HAL_DMA_Init+0x660>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d068      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a5a      	ldr	r2, [pc, #360]	; (8005e28 <HAL_DMA_Init+0x664>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d063      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a59      	ldr	r2, [pc, #356]	; (8005e2c <HAL_DMA_Init+0x668>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d05e      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a57      	ldr	r2, [pc, #348]	; (8005e30 <HAL_DMA_Init+0x66c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d059      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a56      	ldr	r2, [pc, #344]	; (8005e34 <HAL_DMA_Init+0x670>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d054      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a54      	ldr	r2, [pc, #336]	; (8005e38 <HAL_DMA_Init+0x674>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d04f      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a53      	ldr	r2, [pc, #332]	; (8005e3c <HAL_DMA_Init+0x678>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d04a      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a51      	ldr	r2, [pc, #324]	; (8005e40 <HAL_DMA_Init+0x67c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d045      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a50      	ldr	r2, [pc, #320]	; (8005e44 <HAL_DMA_Init+0x680>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d040      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a4e      	ldr	r2, [pc, #312]	; (8005e48 <HAL_DMA_Init+0x684>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d03b      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a4d      	ldr	r2, [pc, #308]	; (8005e4c <HAL_DMA_Init+0x688>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d036      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a4b      	ldr	r2, [pc, #300]	; (8005e50 <HAL_DMA_Init+0x68c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d031      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a4a      	ldr	r2, [pc, #296]	; (8005e54 <HAL_DMA_Init+0x690>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d02c      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a48      	ldr	r2, [pc, #288]	; (8005e58 <HAL_DMA_Init+0x694>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d027      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a47      	ldr	r2, [pc, #284]	; (8005e5c <HAL_DMA_Init+0x698>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a45      	ldr	r2, [pc, #276]	; (8005e60 <HAL_DMA_Init+0x69c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a44      	ldr	r2, [pc, #272]	; (8005e64 <HAL_DMA_Init+0x6a0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a42      	ldr	r2, [pc, #264]	; (8005e68 <HAL_DMA_Init+0x6a4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a41      	ldr	r2, [pc, #260]	; (8005e6c <HAL_DMA_Init+0x6a8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a3f      	ldr	r2, [pc, #252]	; (8005e70 <HAL_DMA_Init+0x6ac>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3e      	ldr	r2, [pc, #248]	; (8005e74 <HAL_DMA_Init+0x6b0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_DMA_Init+0x5c6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a3c      	ldr	r2, [pc, #240]	; (8005e78 <HAL_DMA_Init+0x6b4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_DMA_Init+0x5ca>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <HAL_DMA_Init+0x5cc>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d032      	beq.n	8005dfa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f002 fa43 	bl	8008220 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b80      	cmp	r3, #128	; 0x80
 8005da0:	d102      	bne.n	8005da8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dbc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d010      	beq.n	8005de8 <HAL_DMA_Init+0x624>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d80c      	bhi.n	8005de8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f002 fac0 	bl	8008354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	e008      	b.n	8005dfa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	a7fdabf8 	.word	0xa7fdabf8
 8005e18:	cccccccd 	.word	0xcccccccd
 8005e1c:	40020010 	.word	0x40020010
 8005e20:	40020028 	.word	0x40020028
 8005e24:	40020040 	.word	0x40020040
 8005e28:	40020058 	.word	0x40020058
 8005e2c:	40020070 	.word	0x40020070
 8005e30:	40020088 	.word	0x40020088
 8005e34:	400200a0 	.word	0x400200a0
 8005e38:	400200b8 	.word	0x400200b8
 8005e3c:	40020410 	.word	0x40020410
 8005e40:	40020428 	.word	0x40020428
 8005e44:	40020440 	.word	0x40020440
 8005e48:	40020458 	.word	0x40020458
 8005e4c:	40020470 	.word	0x40020470
 8005e50:	40020488 	.word	0x40020488
 8005e54:	400204a0 	.word	0x400204a0
 8005e58:	400204b8 	.word	0x400204b8
 8005e5c:	58025408 	.word	0x58025408
 8005e60:	5802541c 	.word	0x5802541c
 8005e64:	58025430 	.word	0x58025430
 8005e68:	58025444 	.word	0x58025444
 8005e6c:	58025458 	.word	0x58025458
 8005e70:	5802546c 	.word	0x5802546c
 8005e74:	58025480 	.word	0x58025480
 8005e78:	58025494 	.word	0x58025494

08005e7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e226      	b.n	80062e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_DMA_Start_IT+0x2a>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e21f      	b.n	80062e6 <HAL_DMA_Start_IT+0x46a>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	f040 820a 	bne.w	80062d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a68      	ldr	r2, [pc, #416]	; (8006070 <HAL_DMA_Start_IT+0x1f4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d04a      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a66      	ldr	r2, [pc, #408]	; (8006074 <HAL_DMA_Start_IT+0x1f8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d045      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a65      	ldr	r2, [pc, #404]	; (8006078 <HAL_DMA_Start_IT+0x1fc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d040      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a63      	ldr	r2, [pc, #396]	; (800607c <HAL_DMA_Start_IT+0x200>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d03b      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a62      	ldr	r2, [pc, #392]	; (8006080 <HAL_DMA_Start_IT+0x204>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d036      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a60      	ldr	r2, [pc, #384]	; (8006084 <HAL_DMA_Start_IT+0x208>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d031      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a5f      	ldr	r2, [pc, #380]	; (8006088 <HAL_DMA_Start_IT+0x20c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d02c      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a5d      	ldr	r2, [pc, #372]	; (800608c <HAL_DMA_Start_IT+0x210>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d027      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a5c      	ldr	r2, [pc, #368]	; (8006090 <HAL_DMA_Start_IT+0x214>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d022      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a5a      	ldr	r2, [pc, #360]	; (8006094 <HAL_DMA_Start_IT+0x218>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d01d      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a59      	ldr	r2, [pc, #356]	; (8006098 <HAL_DMA_Start_IT+0x21c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d018      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a57      	ldr	r2, [pc, #348]	; (800609c <HAL_DMA_Start_IT+0x220>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a56      	ldr	r2, [pc, #344]	; (80060a0 <HAL_DMA_Start_IT+0x224>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00e      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a54      	ldr	r2, [pc, #336]	; (80060a4 <HAL_DMA_Start_IT+0x228>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d009      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a53      	ldr	r2, [pc, #332]	; (80060a8 <HAL_DMA_Start_IT+0x22c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d004      	beq.n	8005f6a <HAL_DMA_Start_IT+0xee>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a51      	ldr	r2, [pc, #324]	; (80060ac <HAL_DMA_Start_IT+0x230>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d108      	bne.n	8005f7c <HAL_DMA_Start_IT+0x100>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0201 	bic.w	r2, r2, #1
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e007      	b.n	8005f8c <HAL_DMA_Start_IT+0x110>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f001 fe6a 	bl	8007c6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a34      	ldr	r2, [pc, #208]	; (8006070 <HAL_DMA_Start_IT+0x1f4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d04a      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a33      	ldr	r2, [pc, #204]	; (8006074 <HAL_DMA_Start_IT+0x1f8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d045      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a31      	ldr	r2, [pc, #196]	; (8006078 <HAL_DMA_Start_IT+0x1fc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d040      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a30      	ldr	r2, [pc, #192]	; (800607c <HAL_DMA_Start_IT+0x200>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d03b      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a2e      	ldr	r2, [pc, #184]	; (8006080 <HAL_DMA_Start_IT+0x204>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d036      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <HAL_DMA_Start_IT+0x208>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d031      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2b      	ldr	r2, [pc, #172]	; (8006088 <HAL_DMA_Start_IT+0x20c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d02c      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	; (800608c <HAL_DMA_Start_IT+0x210>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d027      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a28      	ldr	r2, [pc, #160]	; (8006090 <HAL_DMA_Start_IT+0x214>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d022      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a27      	ldr	r2, [pc, #156]	; (8006094 <HAL_DMA_Start_IT+0x218>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d01d      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a25      	ldr	r2, [pc, #148]	; (8006098 <HAL_DMA_Start_IT+0x21c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d018      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a24      	ldr	r2, [pc, #144]	; (800609c <HAL_DMA_Start_IT+0x220>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a22      	ldr	r2, [pc, #136]	; (80060a0 <HAL_DMA_Start_IT+0x224>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00e      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a21      	ldr	r2, [pc, #132]	; (80060a4 <HAL_DMA_Start_IT+0x228>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d009      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1f      	ldr	r2, [pc, #124]	; (80060a8 <HAL_DMA_Start_IT+0x22c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_DMA_Start_IT+0x1bc>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <HAL_DMA_Start_IT+0x230>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <HAL_DMA_Start_IT+0x1c0>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <HAL_DMA_Start_IT+0x1c2>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d036      	beq.n	80060b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f023 021e 	bic.w	r2, r3, #30
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0216 	orr.w	r2, r2, #22
 8006054:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d03e      	beq.n	80060dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0208 	orr.w	r2, r2, #8
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e035      	b.n	80060dc <HAL_DMA_Start_IT+0x260>
 8006070:	40020010 	.word	0x40020010
 8006074:	40020028 	.word	0x40020028
 8006078:	40020040 	.word	0x40020040
 800607c:	40020058 	.word	0x40020058
 8006080:	40020070 	.word	0x40020070
 8006084:	40020088 	.word	0x40020088
 8006088:	400200a0 	.word	0x400200a0
 800608c:	400200b8 	.word	0x400200b8
 8006090:	40020410 	.word	0x40020410
 8006094:	40020428 	.word	0x40020428
 8006098:	40020440 	.word	0x40020440
 800609c:	40020458 	.word	0x40020458
 80060a0:	40020470 	.word	0x40020470
 80060a4:	40020488 	.word	0x40020488
 80060a8:	400204a0 	.word	0x400204a0
 80060ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 020e 	bic.w	r2, r3, #14
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 020a 	orr.w	r2, r2, #10
 80060c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d007      	beq.n	80060dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0204 	orr.w	r2, r2, #4
 80060da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a83      	ldr	r2, [pc, #524]	; (80062f0 <HAL_DMA_Start_IT+0x474>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d072      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a82      	ldr	r2, [pc, #520]	; (80062f4 <HAL_DMA_Start_IT+0x478>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d06d      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a80      	ldr	r2, [pc, #512]	; (80062f8 <HAL_DMA_Start_IT+0x47c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d068      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a7f      	ldr	r2, [pc, #508]	; (80062fc <HAL_DMA_Start_IT+0x480>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d063      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a7d      	ldr	r2, [pc, #500]	; (8006300 <HAL_DMA_Start_IT+0x484>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d05e      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a7c      	ldr	r2, [pc, #496]	; (8006304 <HAL_DMA_Start_IT+0x488>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d059      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a7a      	ldr	r2, [pc, #488]	; (8006308 <HAL_DMA_Start_IT+0x48c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d054      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a79      	ldr	r2, [pc, #484]	; (800630c <HAL_DMA_Start_IT+0x490>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d04f      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a77      	ldr	r2, [pc, #476]	; (8006310 <HAL_DMA_Start_IT+0x494>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d04a      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a76      	ldr	r2, [pc, #472]	; (8006314 <HAL_DMA_Start_IT+0x498>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d045      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a74      	ldr	r2, [pc, #464]	; (8006318 <HAL_DMA_Start_IT+0x49c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d040      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a73      	ldr	r2, [pc, #460]	; (800631c <HAL_DMA_Start_IT+0x4a0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d03b      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a71      	ldr	r2, [pc, #452]	; (8006320 <HAL_DMA_Start_IT+0x4a4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d036      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a70      	ldr	r2, [pc, #448]	; (8006324 <HAL_DMA_Start_IT+0x4a8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d031      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a6e      	ldr	r2, [pc, #440]	; (8006328 <HAL_DMA_Start_IT+0x4ac>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d02c      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a6d      	ldr	r2, [pc, #436]	; (800632c <HAL_DMA_Start_IT+0x4b0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d027      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a6b      	ldr	r2, [pc, #428]	; (8006330 <HAL_DMA_Start_IT+0x4b4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d022      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a6a      	ldr	r2, [pc, #424]	; (8006334 <HAL_DMA_Start_IT+0x4b8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d01d      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a68      	ldr	r2, [pc, #416]	; (8006338 <HAL_DMA_Start_IT+0x4bc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d018      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a67      	ldr	r2, [pc, #412]	; (800633c <HAL_DMA_Start_IT+0x4c0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d013      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a65      	ldr	r2, [pc, #404]	; (8006340 <HAL_DMA_Start_IT+0x4c4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00e      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a64      	ldr	r2, [pc, #400]	; (8006344 <HAL_DMA_Start_IT+0x4c8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d009      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a62      	ldr	r2, [pc, #392]	; (8006348 <HAL_DMA_Start_IT+0x4cc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <HAL_DMA_Start_IT+0x350>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a61      	ldr	r2, [pc, #388]	; (800634c <HAL_DMA_Start_IT+0x4d0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d101      	bne.n	80061d0 <HAL_DMA_Start_IT+0x354>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <HAL_DMA_Start_IT+0x356>
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01a      	beq.n	800620c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d007      	beq.n	80061f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800620a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a37      	ldr	r2, [pc, #220]	; (80062f0 <HAL_DMA_Start_IT+0x474>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d04a      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a36      	ldr	r2, [pc, #216]	; (80062f4 <HAL_DMA_Start_IT+0x478>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d045      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a34      	ldr	r2, [pc, #208]	; (80062f8 <HAL_DMA_Start_IT+0x47c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d040      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a33      	ldr	r2, [pc, #204]	; (80062fc <HAL_DMA_Start_IT+0x480>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d03b      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a31      	ldr	r2, [pc, #196]	; (8006300 <HAL_DMA_Start_IT+0x484>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d036      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a30      	ldr	r2, [pc, #192]	; (8006304 <HAL_DMA_Start_IT+0x488>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d031      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a2e      	ldr	r2, [pc, #184]	; (8006308 <HAL_DMA_Start_IT+0x48c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d02c      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a2d      	ldr	r2, [pc, #180]	; (800630c <HAL_DMA_Start_IT+0x490>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d027      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2b      	ldr	r2, [pc, #172]	; (8006310 <HAL_DMA_Start_IT+0x494>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d022      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2a      	ldr	r2, [pc, #168]	; (8006314 <HAL_DMA_Start_IT+0x498>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d01d      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a28      	ldr	r2, [pc, #160]	; (8006318 <HAL_DMA_Start_IT+0x49c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d018      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a27      	ldr	r2, [pc, #156]	; (800631c <HAL_DMA_Start_IT+0x4a0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a25      	ldr	r2, [pc, #148]	; (8006320 <HAL_DMA_Start_IT+0x4a4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00e      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a24      	ldr	r2, [pc, #144]	; (8006324 <HAL_DMA_Start_IT+0x4a8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a22      	ldr	r2, [pc, #136]	; (8006328 <HAL_DMA_Start_IT+0x4ac>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_DMA_Start_IT+0x430>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a21      	ldr	r2, [pc, #132]	; (800632c <HAL_DMA_Start_IT+0x4b0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d108      	bne.n	80062be <HAL_DMA_Start_IT+0x442>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e012      	b.n	80062e4 <HAL_DMA_Start_IT+0x468>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0201 	orr.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e009      	b.n	80062e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40020010 	.word	0x40020010
 80062f4:	40020028 	.word	0x40020028
 80062f8:	40020040 	.word	0x40020040
 80062fc:	40020058 	.word	0x40020058
 8006300:	40020070 	.word	0x40020070
 8006304:	40020088 	.word	0x40020088
 8006308:	400200a0 	.word	0x400200a0
 800630c:	400200b8 	.word	0x400200b8
 8006310:	40020410 	.word	0x40020410
 8006314:	40020428 	.word	0x40020428
 8006318:	40020440 	.word	0x40020440
 800631c:	40020458 	.word	0x40020458
 8006320:	40020470 	.word	0x40020470
 8006324:	40020488 	.word	0x40020488
 8006328:	400204a0 	.word	0x400204a0
 800632c:	400204b8 	.word	0x400204b8
 8006330:	58025408 	.word	0x58025408
 8006334:	5802541c 	.word	0x5802541c
 8006338:	58025430 	.word	0x58025430
 800633c:	58025444 	.word	0x58025444
 8006340:	58025458 	.word	0x58025458
 8006344:	5802546c 	.word	0x5802546c
 8006348:	58025480 	.word	0x58025480
 800634c:	58025494 	.word	0x58025494

08006350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006358:	f7fd f90c 	bl	8003574 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e2dc      	b.n	8006922 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d008      	beq.n	8006386 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2280      	movs	r2, #128	; 0x80
 8006378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e2cd      	b.n	8006922 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a76      	ldr	r2, [pc, #472]	; (8006564 <HAL_DMA_Abort+0x214>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d04a      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a74      	ldr	r2, [pc, #464]	; (8006568 <HAL_DMA_Abort+0x218>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d045      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a73      	ldr	r2, [pc, #460]	; (800656c <HAL_DMA_Abort+0x21c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d040      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a71      	ldr	r2, [pc, #452]	; (8006570 <HAL_DMA_Abort+0x220>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d03b      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a70      	ldr	r2, [pc, #448]	; (8006574 <HAL_DMA_Abort+0x224>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d036      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a6e      	ldr	r2, [pc, #440]	; (8006578 <HAL_DMA_Abort+0x228>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d031      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6d      	ldr	r2, [pc, #436]	; (800657c <HAL_DMA_Abort+0x22c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d02c      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a6b      	ldr	r2, [pc, #428]	; (8006580 <HAL_DMA_Abort+0x230>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d027      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6a      	ldr	r2, [pc, #424]	; (8006584 <HAL_DMA_Abort+0x234>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d022      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a68      	ldr	r2, [pc, #416]	; (8006588 <HAL_DMA_Abort+0x238>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01d      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a67      	ldr	r2, [pc, #412]	; (800658c <HAL_DMA_Abort+0x23c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d018      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a65      	ldr	r2, [pc, #404]	; (8006590 <HAL_DMA_Abort+0x240>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a64      	ldr	r2, [pc, #400]	; (8006594 <HAL_DMA_Abort+0x244>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00e      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a62      	ldr	r2, [pc, #392]	; (8006598 <HAL_DMA_Abort+0x248>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d009      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a61      	ldr	r2, [pc, #388]	; (800659c <HAL_DMA_Abort+0x24c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d004      	beq.n	8006426 <HAL_DMA_Abort+0xd6>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a5f      	ldr	r2, [pc, #380]	; (80065a0 <HAL_DMA_Abort+0x250>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d101      	bne.n	800642a <HAL_DMA_Abort+0xda>
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <HAL_DMA_Abort+0xdc>
 800642a:	2300      	movs	r3, #0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d013      	beq.n	8006458 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 021e 	bic.w	r2, r2, #30
 800643e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800644e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	e00a      	b.n	800646e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 020e 	bic.w	r2, r2, #14
 8006466:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a3c      	ldr	r2, [pc, #240]	; (8006564 <HAL_DMA_Abort+0x214>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d072      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a3a      	ldr	r2, [pc, #232]	; (8006568 <HAL_DMA_Abort+0x218>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d06d      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a39      	ldr	r2, [pc, #228]	; (800656c <HAL_DMA_Abort+0x21c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d068      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a37      	ldr	r2, [pc, #220]	; (8006570 <HAL_DMA_Abort+0x220>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d063      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a36      	ldr	r2, [pc, #216]	; (8006574 <HAL_DMA_Abort+0x224>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d05e      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a34      	ldr	r2, [pc, #208]	; (8006578 <HAL_DMA_Abort+0x228>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d059      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a33      	ldr	r2, [pc, #204]	; (800657c <HAL_DMA_Abort+0x22c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d054      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a31      	ldr	r2, [pc, #196]	; (8006580 <HAL_DMA_Abort+0x230>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d04f      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a30      	ldr	r2, [pc, #192]	; (8006584 <HAL_DMA_Abort+0x234>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d04a      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a2e      	ldr	r2, [pc, #184]	; (8006588 <HAL_DMA_Abort+0x238>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d045      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a2d      	ldr	r2, [pc, #180]	; (800658c <HAL_DMA_Abort+0x23c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d040      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2b      	ldr	r2, [pc, #172]	; (8006590 <HAL_DMA_Abort+0x240>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d03b      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2a      	ldr	r2, [pc, #168]	; (8006594 <HAL_DMA_Abort+0x244>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d036      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a28      	ldr	r2, [pc, #160]	; (8006598 <HAL_DMA_Abort+0x248>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d031      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a27      	ldr	r2, [pc, #156]	; (800659c <HAL_DMA_Abort+0x24c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d02c      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a25      	ldr	r2, [pc, #148]	; (80065a0 <HAL_DMA_Abort+0x250>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d027      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a24      	ldr	r2, [pc, #144]	; (80065a4 <HAL_DMA_Abort+0x254>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d022      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a22      	ldr	r2, [pc, #136]	; (80065a8 <HAL_DMA_Abort+0x258>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01d      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a21      	ldr	r2, [pc, #132]	; (80065ac <HAL_DMA_Abort+0x25c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d018      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <HAL_DMA_Abort+0x260>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1e      	ldr	r2, [pc, #120]	; (80065b4 <HAL_DMA_Abort+0x264>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00e      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1c      	ldr	r2, [pc, #112]	; (80065b8 <HAL_DMA_Abort+0x268>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <HAL_DMA_Abort+0x26c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_DMA_Abort+0x20e>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <HAL_DMA_Abort+0x270>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d132      	bne.n	80065c4 <HAL_DMA_Abort+0x274>
 800655e:	2301      	movs	r3, #1
 8006560:	e031      	b.n	80065c6 <HAL_DMA_Abort+0x276>
 8006562:	bf00      	nop
 8006564:	40020010 	.word	0x40020010
 8006568:	40020028 	.word	0x40020028
 800656c:	40020040 	.word	0x40020040
 8006570:	40020058 	.word	0x40020058
 8006574:	40020070 	.word	0x40020070
 8006578:	40020088 	.word	0x40020088
 800657c:	400200a0 	.word	0x400200a0
 8006580:	400200b8 	.word	0x400200b8
 8006584:	40020410 	.word	0x40020410
 8006588:	40020428 	.word	0x40020428
 800658c:	40020440 	.word	0x40020440
 8006590:	40020458 	.word	0x40020458
 8006594:	40020470 	.word	0x40020470
 8006598:	40020488 	.word	0x40020488
 800659c:	400204a0 	.word	0x400204a0
 80065a0:	400204b8 	.word	0x400204b8
 80065a4:	58025408 	.word	0x58025408
 80065a8:	5802541c 	.word	0x5802541c
 80065ac:	58025430 	.word	0x58025430
 80065b0:	58025444 	.word	0x58025444
 80065b4:	58025458 	.word	0x58025458
 80065b8:	5802546c 	.word	0x5802546c
 80065bc:	58025480 	.word	0x58025480
 80065c0:	58025494 	.word	0x58025494
 80065c4:	2300      	movs	r3, #0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a6d      	ldr	r2, [pc, #436]	; (8006794 <HAL_DMA_Abort+0x444>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d04a      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a6b      	ldr	r2, [pc, #428]	; (8006798 <HAL_DMA_Abort+0x448>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d045      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a6a      	ldr	r2, [pc, #424]	; (800679c <HAL_DMA_Abort+0x44c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d040      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a68      	ldr	r2, [pc, #416]	; (80067a0 <HAL_DMA_Abort+0x450>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d03b      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a67      	ldr	r2, [pc, #412]	; (80067a4 <HAL_DMA_Abort+0x454>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d036      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a65      	ldr	r2, [pc, #404]	; (80067a8 <HAL_DMA_Abort+0x458>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d031      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a64      	ldr	r2, [pc, #400]	; (80067ac <HAL_DMA_Abort+0x45c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d02c      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a62      	ldr	r2, [pc, #392]	; (80067b0 <HAL_DMA_Abort+0x460>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d027      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a61      	ldr	r2, [pc, #388]	; (80067b4 <HAL_DMA_Abort+0x464>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d022      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5f      	ldr	r2, [pc, #380]	; (80067b8 <HAL_DMA_Abort+0x468>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d01d      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a5e      	ldr	r2, [pc, #376]	; (80067bc <HAL_DMA_Abort+0x46c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d018      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a5c      	ldr	r2, [pc, #368]	; (80067c0 <HAL_DMA_Abort+0x470>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a5b      	ldr	r2, [pc, #364]	; (80067c4 <HAL_DMA_Abort+0x474>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00e      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a59      	ldr	r2, [pc, #356]	; (80067c8 <HAL_DMA_Abort+0x478>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a58      	ldr	r2, [pc, #352]	; (80067cc <HAL_DMA_Abort+0x47c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d004      	beq.n	800667a <HAL_DMA_Abort+0x32a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a56      	ldr	r2, [pc, #344]	; (80067d0 <HAL_DMA_Abort+0x480>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d108      	bne.n	800668c <HAL_DMA_Abort+0x33c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e007      	b.n	800669c <HAL_DMA_Abort+0x34c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800669c:	e013      	b.n	80066c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800669e:	f7fc ff69 	bl	8003574 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b05      	cmp	r3, #5
 80066aa:	d90c      	bls.n	80066c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2203      	movs	r2, #3
 80066b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e12d      	b.n	8006922 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e5      	bne.n	800669e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2f      	ldr	r2, [pc, #188]	; (8006794 <HAL_DMA_Abort+0x444>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d04a      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a2d      	ldr	r2, [pc, #180]	; (8006798 <HAL_DMA_Abort+0x448>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d045      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a2c      	ldr	r2, [pc, #176]	; (800679c <HAL_DMA_Abort+0x44c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d040      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a2a      	ldr	r2, [pc, #168]	; (80067a0 <HAL_DMA_Abort+0x450>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d03b      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a29      	ldr	r2, [pc, #164]	; (80067a4 <HAL_DMA_Abort+0x454>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d036      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a27      	ldr	r2, [pc, #156]	; (80067a8 <HAL_DMA_Abort+0x458>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d031      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a26      	ldr	r2, [pc, #152]	; (80067ac <HAL_DMA_Abort+0x45c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d02c      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a24      	ldr	r2, [pc, #144]	; (80067b0 <HAL_DMA_Abort+0x460>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d027      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a23      	ldr	r2, [pc, #140]	; (80067b4 <HAL_DMA_Abort+0x464>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d022      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a21      	ldr	r2, [pc, #132]	; (80067b8 <HAL_DMA_Abort+0x468>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d01d      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a20      	ldr	r2, [pc, #128]	; (80067bc <HAL_DMA_Abort+0x46c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d018      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <HAL_DMA_Abort+0x470>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d013      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <HAL_DMA_Abort+0x474>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00e      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1b      	ldr	r2, [pc, #108]	; (80067c8 <HAL_DMA_Abort+0x478>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d009      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1a      	ldr	r2, [pc, #104]	; (80067cc <HAL_DMA_Abort+0x47c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_DMA_Abort+0x422>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a18      	ldr	r2, [pc, #96]	; (80067d0 <HAL_DMA_Abort+0x480>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d101      	bne.n	8006776 <HAL_DMA_Abort+0x426>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <HAL_DMA_Abort+0x428>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d02b      	beq.n	80067d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006780:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	223f      	movs	r2, #63	; 0x3f
 800678c:	409a      	lsls	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	609a      	str	r2, [r3, #8]
 8006792:	e02a      	b.n	80067ea <HAL_DMA_Abort+0x49a>
 8006794:	40020010 	.word	0x40020010
 8006798:	40020028 	.word	0x40020028
 800679c:	40020040 	.word	0x40020040
 80067a0:	40020058 	.word	0x40020058
 80067a4:	40020070 	.word	0x40020070
 80067a8:	40020088 	.word	0x40020088
 80067ac:	400200a0 	.word	0x400200a0
 80067b0:	400200b8 	.word	0x400200b8
 80067b4:	40020410 	.word	0x40020410
 80067b8:	40020428 	.word	0x40020428
 80067bc:	40020440 	.word	0x40020440
 80067c0:	40020458 	.word	0x40020458
 80067c4:	40020470 	.word	0x40020470
 80067c8:	40020488 	.word	0x40020488
 80067cc:	400204a0 	.word	0x400204a0
 80067d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2201      	movs	r2, #1
 80067e4:	409a      	lsls	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a4f      	ldr	r2, [pc, #316]	; (800692c <HAL_DMA_Abort+0x5dc>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d072      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a4d      	ldr	r2, [pc, #308]	; (8006930 <HAL_DMA_Abort+0x5e0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d06d      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a4c      	ldr	r2, [pc, #304]	; (8006934 <HAL_DMA_Abort+0x5e4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d068      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a4a      	ldr	r2, [pc, #296]	; (8006938 <HAL_DMA_Abort+0x5e8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d063      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a49      	ldr	r2, [pc, #292]	; (800693c <HAL_DMA_Abort+0x5ec>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d05e      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a47      	ldr	r2, [pc, #284]	; (8006940 <HAL_DMA_Abort+0x5f0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d059      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a46      	ldr	r2, [pc, #280]	; (8006944 <HAL_DMA_Abort+0x5f4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d054      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a44      	ldr	r2, [pc, #272]	; (8006948 <HAL_DMA_Abort+0x5f8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d04f      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a43      	ldr	r2, [pc, #268]	; (800694c <HAL_DMA_Abort+0x5fc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d04a      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a41      	ldr	r2, [pc, #260]	; (8006950 <HAL_DMA_Abort+0x600>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d045      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a40      	ldr	r2, [pc, #256]	; (8006954 <HAL_DMA_Abort+0x604>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d040      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a3e      	ldr	r2, [pc, #248]	; (8006958 <HAL_DMA_Abort+0x608>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d03b      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a3d      	ldr	r2, [pc, #244]	; (800695c <HAL_DMA_Abort+0x60c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d036      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a3b      	ldr	r2, [pc, #236]	; (8006960 <HAL_DMA_Abort+0x610>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d031      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3a      	ldr	r2, [pc, #232]	; (8006964 <HAL_DMA_Abort+0x614>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d02c      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a38      	ldr	r2, [pc, #224]	; (8006968 <HAL_DMA_Abort+0x618>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d027      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a37      	ldr	r2, [pc, #220]	; (800696c <HAL_DMA_Abort+0x61c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d022      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a35      	ldr	r2, [pc, #212]	; (8006970 <HAL_DMA_Abort+0x620>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01d      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a34      	ldr	r2, [pc, #208]	; (8006974 <HAL_DMA_Abort+0x624>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a32      	ldr	r2, [pc, #200]	; (8006978 <HAL_DMA_Abort+0x628>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a31      	ldr	r2, [pc, #196]	; (800697c <HAL_DMA_Abort+0x62c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2f      	ldr	r2, [pc, #188]	; (8006980 <HAL_DMA_Abort+0x630>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a2e      	ldr	r2, [pc, #184]	; (8006984 <HAL_DMA_Abort+0x634>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_DMA_Abort+0x58a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2c      	ldr	r2, [pc, #176]	; (8006988 <HAL_DMA_Abort+0x638>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d101      	bne.n	80068de <HAL_DMA_Abort+0x58e>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <HAL_DMA_Abort+0x590>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d015      	beq.n	8006910 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00c      	beq.n	8006910 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006904:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800690e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40020010 	.word	0x40020010
 8006930:	40020028 	.word	0x40020028
 8006934:	40020040 	.word	0x40020040
 8006938:	40020058 	.word	0x40020058
 800693c:	40020070 	.word	0x40020070
 8006940:	40020088 	.word	0x40020088
 8006944:	400200a0 	.word	0x400200a0
 8006948:	400200b8 	.word	0x400200b8
 800694c:	40020410 	.word	0x40020410
 8006950:	40020428 	.word	0x40020428
 8006954:	40020440 	.word	0x40020440
 8006958:	40020458 	.word	0x40020458
 800695c:	40020470 	.word	0x40020470
 8006960:	40020488 	.word	0x40020488
 8006964:	400204a0 	.word	0x400204a0
 8006968:	400204b8 	.word	0x400204b8
 800696c:	58025408 	.word	0x58025408
 8006970:	5802541c 	.word	0x5802541c
 8006974:	58025430 	.word	0x58025430
 8006978:	58025444 	.word	0x58025444
 800697c:	58025458 	.word	0x58025458
 8006980:	5802546c 	.word	0x5802546c
 8006984:	58025480 	.word	0x58025480
 8006988:	58025494 	.word	0x58025494

0800698c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e237      	b.n	8006e0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d004      	beq.n	80069b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2280      	movs	r2, #128	; 0x80
 80069ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e22c      	b.n	8006e0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a5c      	ldr	r2, [pc, #368]	; (8006b2c <HAL_DMA_Abort_IT+0x1a0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d04a      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a5b      	ldr	r2, [pc, #364]	; (8006b30 <HAL_DMA_Abort_IT+0x1a4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d045      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a59      	ldr	r2, [pc, #356]	; (8006b34 <HAL_DMA_Abort_IT+0x1a8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d040      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a58      	ldr	r2, [pc, #352]	; (8006b38 <HAL_DMA_Abort_IT+0x1ac>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d03b      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a56      	ldr	r2, [pc, #344]	; (8006b3c <HAL_DMA_Abort_IT+0x1b0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d036      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a55      	ldr	r2, [pc, #340]	; (8006b40 <HAL_DMA_Abort_IT+0x1b4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d031      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a53      	ldr	r2, [pc, #332]	; (8006b44 <HAL_DMA_Abort_IT+0x1b8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d02c      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a52      	ldr	r2, [pc, #328]	; (8006b48 <HAL_DMA_Abort_IT+0x1bc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d027      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a50      	ldr	r2, [pc, #320]	; (8006b4c <HAL_DMA_Abort_IT+0x1c0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d022      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a4f      	ldr	r2, [pc, #316]	; (8006b50 <HAL_DMA_Abort_IT+0x1c4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d01d      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a4d      	ldr	r2, [pc, #308]	; (8006b54 <HAL_DMA_Abort_IT+0x1c8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d018      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a4c      	ldr	r2, [pc, #304]	; (8006b58 <HAL_DMA_Abort_IT+0x1cc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a4a      	ldr	r2, [pc, #296]	; (8006b5c <HAL_DMA_Abort_IT+0x1d0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00e      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a49      	ldr	r2, [pc, #292]	; (8006b60 <HAL_DMA_Abort_IT+0x1d4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a47      	ldr	r2, [pc, #284]	; (8006b64 <HAL_DMA_Abort_IT+0x1d8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <HAL_DMA_Abort_IT+0xc8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a46      	ldr	r2, [pc, #280]	; (8006b68 <HAL_DMA_Abort_IT+0x1dc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d101      	bne.n	8006a58 <HAL_DMA_Abort_IT+0xcc>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <HAL_DMA_Abort_IT+0xce>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 8086 	beq.w	8006b6c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2204      	movs	r2, #4
 8006a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a2f      	ldr	r2, [pc, #188]	; (8006b2c <HAL_DMA_Abort_IT+0x1a0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d04a      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a2e      	ldr	r2, [pc, #184]	; (8006b30 <HAL_DMA_Abort_IT+0x1a4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d045      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a2c      	ldr	r2, [pc, #176]	; (8006b34 <HAL_DMA_Abort_IT+0x1a8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d040      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a2b      	ldr	r2, [pc, #172]	; (8006b38 <HAL_DMA_Abort_IT+0x1ac>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d03b      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a29      	ldr	r2, [pc, #164]	; (8006b3c <HAL_DMA_Abort_IT+0x1b0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d036      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a28      	ldr	r2, [pc, #160]	; (8006b40 <HAL_DMA_Abort_IT+0x1b4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d031      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a26      	ldr	r2, [pc, #152]	; (8006b44 <HAL_DMA_Abort_IT+0x1b8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d02c      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a25      	ldr	r2, [pc, #148]	; (8006b48 <HAL_DMA_Abort_IT+0x1bc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d027      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a23      	ldr	r2, [pc, #140]	; (8006b4c <HAL_DMA_Abort_IT+0x1c0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d022      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a22      	ldr	r2, [pc, #136]	; (8006b50 <HAL_DMA_Abort_IT+0x1c4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d01d      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a20      	ldr	r2, [pc, #128]	; (8006b54 <HAL_DMA_Abort_IT+0x1c8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d018      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1f      	ldr	r2, [pc, #124]	; (8006b58 <HAL_DMA_Abort_IT+0x1cc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d013      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1d      	ldr	r2, [pc, #116]	; (8006b5c <HAL_DMA_Abort_IT+0x1d0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00e      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1c      	ldr	r2, [pc, #112]	; (8006b60 <HAL_DMA_Abort_IT+0x1d4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d009      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1a      	ldr	r2, [pc, #104]	; (8006b64 <HAL_DMA_Abort_IT+0x1d8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x17c>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a19      	ldr	r2, [pc, #100]	; (8006b68 <HAL_DMA_Abort_IT+0x1dc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d108      	bne.n	8006b1a <HAL_DMA_Abort_IT+0x18e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e178      	b.n	8006e0c <HAL_DMA_Abort_IT+0x480>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0201 	bic.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e16f      	b.n	8006e0c <HAL_DMA_Abort_IT+0x480>
 8006b2c:	40020010 	.word	0x40020010
 8006b30:	40020028 	.word	0x40020028
 8006b34:	40020040 	.word	0x40020040
 8006b38:	40020058 	.word	0x40020058
 8006b3c:	40020070 	.word	0x40020070
 8006b40:	40020088 	.word	0x40020088
 8006b44:	400200a0 	.word	0x400200a0
 8006b48:	400200b8 	.word	0x400200b8
 8006b4c:	40020410 	.word	0x40020410
 8006b50:	40020428 	.word	0x40020428
 8006b54:	40020440 	.word	0x40020440
 8006b58:	40020458 	.word	0x40020458
 8006b5c:	40020470 	.word	0x40020470
 8006b60:	40020488 	.word	0x40020488
 8006b64:	400204a0 	.word	0x400204a0
 8006b68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 020e 	bic.w	r2, r2, #14
 8006b7a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a6c      	ldr	r2, [pc, #432]	; (8006d34 <HAL_DMA_Abort_IT+0x3a8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d04a      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a6b      	ldr	r2, [pc, #428]	; (8006d38 <HAL_DMA_Abort_IT+0x3ac>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d045      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a69      	ldr	r2, [pc, #420]	; (8006d3c <HAL_DMA_Abort_IT+0x3b0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d040      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a68      	ldr	r2, [pc, #416]	; (8006d40 <HAL_DMA_Abort_IT+0x3b4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d03b      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a66      	ldr	r2, [pc, #408]	; (8006d44 <HAL_DMA_Abort_IT+0x3b8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d036      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a65      	ldr	r2, [pc, #404]	; (8006d48 <HAL_DMA_Abort_IT+0x3bc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d031      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a63      	ldr	r2, [pc, #396]	; (8006d4c <HAL_DMA_Abort_IT+0x3c0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d02c      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a62      	ldr	r2, [pc, #392]	; (8006d50 <HAL_DMA_Abort_IT+0x3c4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d027      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a60      	ldr	r2, [pc, #384]	; (8006d54 <HAL_DMA_Abort_IT+0x3c8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d022      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a5f      	ldr	r2, [pc, #380]	; (8006d58 <HAL_DMA_Abort_IT+0x3cc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d01d      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a5d      	ldr	r2, [pc, #372]	; (8006d5c <HAL_DMA_Abort_IT+0x3d0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d018      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a5c      	ldr	r2, [pc, #368]	; (8006d60 <HAL_DMA_Abort_IT+0x3d4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a5a      	ldr	r2, [pc, #360]	; (8006d64 <HAL_DMA_Abort_IT+0x3d8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00e      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a59      	ldr	r2, [pc, #356]	; (8006d68 <HAL_DMA_Abort_IT+0x3dc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a57      	ldr	r2, [pc, #348]	; (8006d6c <HAL_DMA_Abort_IT+0x3e0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x290>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a56      	ldr	r2, [pc, #344]	; (8006d70 <HAL_DMA_Abort_IT+0x3e4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d108      	bne.n	8006c2e <HAL_DMA_Abort_IT+0x2a2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e007      	b.n	8006c3e <HAL_DMA_Abort_IT+0x2b2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3c      	ldr	r2, [pc, #240]	; (8006d34 <HAL_DMA_Abort_IT+0x3a8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d072      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a3a      	ldr	r2, [pc, #232]	; (8006d38 <HAL_DMA_Abort_IT+0x3ac>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d06d      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a39      	ldr	r2, [pc, #228]	; (8006d3c <HAL_DMA_Abort_IT+0x3b0>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d068      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a37      	ldr	r2, [pc, #220]	; (8006d40 <HAL_DMA_Abort_IT+0x3b4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d063      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a36      	ldr	r2, [pc, #216]	; (8006d44 <HAL_DMA_Abort_IT+0x3b8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d05e      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a34      	ldr	r2, [pc, #208]	; (8006d48 <HAL_DMA_Abort_IT+0x3bc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d059      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a33      	ldr	r2, [pc, #204]	; (8006d4c <HAL_DMA_Abort_IT+0x3c0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d054      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a31      	ldr	r2, [pc, #196]	; (8006d50 <HAL_DMA_Abort_IT+0x3c4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d04f      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a30      	ldr	r2, [pc, #192]	; (8006d54 <HAL_DMA_Abort_IT+0x3c8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d04a      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a2e      	ldr	r2, [pc, #184]	; (8006d58 <HAL_DMA_Abort_IT+0x3cc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d045      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a2d      	ldr	r2, [pc, #180]	; (8006d5c <HAL_DMA_Abort_IT+0x3d0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d040      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a2b      	ldr	r2, [pc, #172]	; (8006d60 <HAL_DMA_Abort_IT+0x3d4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d03b      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a2a      	ldr	r2, [pc, #168]	; (8006d64 <HAL_DMA_Abort_IT+0x3d8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d036      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a28      	ldr	r2, [pc, #160]	; (8006d68 <HAL_DMA_Abort_IT+0x3dc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d031      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a27      	ldr	r2, [pc, #156]	; (8006d6c <HAL_DMA_Abort_IT+0x3e0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d02c      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a25      	ldr	r2, [pc, #148]	; (8006d70 <HAL_DMA_Abort_IT+0x3e4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d027      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a24      	ldr	r2, [pc, #144]	; (8006d74 <HAL_DMA_Abort_IT+0x3e8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a22      	ldr	r2, [pc, #136]	; (8006d78 <HAL_DMA_Abort_IT+0x3ec>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01d      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a21      	ldr	r2, [pc, #132]	; (8006d7c <HAL_DMA_Abort_IT+0x3f0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <HAL_DMA_Abort_IT+0x3f4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <HAL_DMA_Abort_IT+0x3f8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <HAL_DMA_Abort_IT+0x3fc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1b      	ldr	r2, [pc, #108]	; (8006d8c <HAL_DMA_Abort_IT+0x400>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x3a2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a19      	ldr	r2, [pc, #100]	; (8006d90 <HAL_DMA_Abort_IT+0x404>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d132      	bne.n	8006d94 <HAL_DMA_Abort_IT+0x408>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e031      	b.n	8006d96 <HAL_DMA_Abort_IT+0x40a>
 8006d32:	bf00      	nop
 8006d34:	40020010 	.word	0x40020010
 8006d38:	40020028 	.word	0x40020028
 8006d3c:	40020040 	.word	0x40020040
 8006d40:	40020058 	.word	0x40020058
 8006d44:	40020070 	.word	0x40020070
 8006d48:	40020088 	.word	0x40020088
 8006d4c:	400200a0 	.word	0x400200a0
 8006d50:	400200b8 	.word	0x400200b8
 8006d54:	40020410 	.word	0x40020410
 8006d58:	40020428 	.word	0x40020428
 8006d5c:	40020440 	.word	0x40020440
 8006d60:	40020458 	.word	0x40020458
 8006d64:	40020470 	.word	0x40020470
 8006d68:	40020488 	.word	0x40020488
 8006d6c:	400204a0 	.word	0x400204a0
 8006d70:	400204b8 	.word	0x400204b8
 8006d74:	58025408 	.word	0x58025408
 8006d78:	5802541c 	.word	0x5802541c
 8006d7c:	58025430 	.word	0x58025430
 8006d80:	58025444 	.word	0x58025444
 8006d84:	58025458 	.word	0x58025458
 8006d88:	5802546c 	.word	0x5802546c
 8006d8c:	58025480 	.word	0x58025480
 8006d90:	58025494 	.word	0x58025494
 8006d94:	2300      	movs	r3, #0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d028      	beq.n	8006dec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006da8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db4:	f003 031f 	and.w	r3, r3, #31
 8006db8:	2201      	movs	r2, #1
 8006dba:	409a      	lsls	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006dc8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00c      	beq.n	8006dec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006de0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop

08006e18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e24:	4b67      	ldr	r3, [pc, #412]	; (8006fc4 <HAL_DMA_IRQHandler+0x1ac>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a67      	ldr	r2, [pc, #412]	; (8006fc8 <HAL_DMA_IRQHandler+0x1b0>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	0a9b      	lsrs	r3, r3, #10
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a5f      	ldr	r2, [pc, #380]	; (8006fcc <HAL_DMA_IRQHandler+0x1b4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d04a      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5d      	ldr	r2, [pc, #372]	; (8006fd0 <HAL_DMA_IRQHandler+0x1b8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d045      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a5c      	ldr	r2, [pc, #368]	; (8006fd4 <HAL_DMA_IRQHandler+0x1bc>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d040      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5a      	ldr	r2, [pc, #360]	; (8006fd8 <HAL_DMA_IRQHandler+0x1c0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d03b      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a59      	ldr	r2, [pc, #356]	; (8006fdc <HAL_DMA_IRQHandler+0x1c4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d036      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a57      	ldr	r2, [pc, #348]	; (8006fe0 <HAL_DMA_IRQHandler+0x1c8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d031      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a56      	ldr	r2, [pc, #344]	; (8006fe4 <HAL_DMA_IRQHandler+0x1cc>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d02c      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a54      	ldr	r2, [pc, #336]	; (8006fe8 <HAL_DMA_IRQHandler+0x1d0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d027      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a53      	ldr	r2, [pc, #332]	; (8006fec <HAL_DMA_IRQHandler+0x1d4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d022      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a51      	ldr	r2, [pc, #324]	; (8006ff0 <HAL_DMA_IRQHandler+0x1d8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d01d      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a50      	ldr	r2, [pc, #320]	; (8006ff4 <HAL_DMA_IRQHandler+0x1dc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d018      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a4e      	ldr	r2, [pc, #312]	; (8006ff8 <HAL_DMA_IRQHandler+0x1e0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a4d      	ldr	r2, [pc, #308]	; (8006ffc <HAL_DMA_IRQHandler+0x1e4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a4b      	ldr	r2, [pc, #300]	; (8007000 <HAL_DMA_IRQHandler+0x1e8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a4a      	ldr	r2, [pc, #296]	; (8007004 <HAL_DMA_IRQHandler+0x1ec>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_DMA_IRQHandler+0xd2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a48      	ldr	r2, [pc, #288]	; (8007008 <HAL_DMA_IRQHandler+0x1f0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d101      	bne.n	8006eee <HAL_DMA_IRQHandler+0xd6>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <HAL_DMA_IRQHandler+0xd8>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 842b 	beq.w	800774c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2208      	movs	r2, #8
 8006f00:	409a      	lsls	r2, r3
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 80a2 	beq.w	8007050 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2e      	ldr	r2, [pc, #184]	; (8006fcc <HAL_DMA_IRQHandler+0x1b4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d04a      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <HAL_DMA_IRQHandler+0x1b8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d045      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a2b      	ldr	r2, [pc, #172]	; (8006fd4 <HAL_DMA_IRQHandler+0x1bc>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d040      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <HAL_DMA_IRQHandler+0x1c0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d03b      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a28      	ldr	r2, [pc, #160]	; (8006fdc <HAL_DMA_IRQHandler+0x1c4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d036      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a27      	ldr	r2, [pc, #156]	; (8006fe0 <HAL_DMA_IRQHandler+0x1c8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d031      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a25      	ldr	r2, [pc, #148]	; (8006fe4 <HAL_DMA_IRQHandler+0x1cc>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d02c      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a24      	ldr	r2, [pc, #144]	; (8006fe8 <HAL_DMA_IRQHandler+0x1d0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d027      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a22      	ldr	r2, [pc, #136]	; (8006fec <HAL_DMA_IRQHandler+0x1d4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d022      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a21      	ldr	r2, [pc, #132]	; (8006ff0 <HAL_DMA_IRQHandler+0x1d8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d01d      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1f      	ldr	r2, [pc, #124]	; (8006ff4 <HAL_DMA_IRQHandler+0x1dc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d018      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <HAL_DMA_IRQHandler+0x1e0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d013      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1c      	ldr	r2, [pc, #112]	; (8006ffc <HAL_DMA_IRQHandler+0x1e4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00e      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <HAL_DMA_IRQHandler+0x1e8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d009      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	; (8007004 <HAL_DMA_IRQHandler+0x1ec>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_DMA_IRQHandler+0x194>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	; (8007008 <HAL_DMA_IRQHandler+0x1f0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d12f      	bne.n	800700c <HAL_DMA_IRQHandler+0x1f4>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bf14      	ite	ne
 8006fba:	2301      	movne	r3, #1
 8006fbc:	2300      	moveq	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	e02e      	b.n	8007020 <HAL_DMA_IRQHandler+0x208>
 8006fc2:	bf00      	nop
 8006fc4:	24000088 	.word	0x24000088
 8006fc8:	1b4e81b5 	.word	0x1b4e81b5
 8006fcc:	40020010 	.word	0x40020010
 8006fd0:	40020028 	.word	0x40020028
 8006fd4:	40020040 	.word	0x40020040
 8006fd8:	40020058 	.word	0x40020058
 8006fdc:	40020070 	.word	0x40020070
 8006fe0:	40020088 	.word	0x40020088
 8006fe4:	400200a0 	.word	0x400200a0
 8006fe8:	400200b8 	.word	0x400200b8
 8006fec:	40020410 	.word	0x40020410
 8006ff0:	40020428 	.word	0x40020428
 8006ff4:	40020440 	.word	0x40020440
 8006ff8:	40020458 	.word	0x40020458
 8006ffc:	40020470 	.word	0x40020470
 8007000:	40020488 	.word	0x40020488
 8007004:	400204a0 	.word	0x400204a0
 8007008:	400204b8 	.word	0x400204b8
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b00      	cmp	r3, #0
 8007018:	bf14      	ite	ne
 800701a:	2301      	movne	r3, #1
 800701c:	2300      	moveq	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d015      	beq.n	8007050 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0204 	bic.w	r2, r2, #4
 8007032:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007038:	f003 031f 	and.w	r3, r3, #31
 800703c:	2208      	movs	r2, #8
 800703e:	409a      	lsls	r2, r3
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007048:	f043 0201 	orr.w	r2, r3, #1
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	fa22 f303 	lsr.w	r3, r2, r3
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d06e      	beq.n	8007144 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a69      	ldr	r2, [pc, #420]	; (8007210 <HAL_DMA_IRQHandler+0x3f8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d04a      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a67      	ldr	r2, [pc, #412]	; (8007214 <HAL_DMA_IRQHandler+0x3fc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d045      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a66      	ldr	r2, [pc, #408]	; (8007218 <HAL_DMA_IRQHandler+0x400>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d040      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a64      	ldr	r2, [pc, #400]	; (800721c <HAL_DMA_IRQHandler+0x404>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d03b      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a63      	ldr	r2, [pc, #396]	; (8007220 <HAL_DMA_IRQHandler+0x408>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d036      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a61      	ldr	r2, [pc, #388]	; (8007224 <HAL_DMA_IRQHandler+0x40c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d031      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a60      	ldr	r2, [pc, #384]	; (8007228 <HAL_DMA_IRQHandler+0x410>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d02c      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a5e      	ldr	r2, [pc, #376]	; (800722c <HAL_DMA_IRQHandler+0x414>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d027      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a5d      	ldr	r2, [pc, #372]	; (8007230 <HAL_DMA_IRQHandler+0x418>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a5b      	ldr	r2, [pc, #364]	; (8007234 <HAL_DMA_IRQHandler+0x41c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d01d      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a5a      	ldr	r2, [pc, #360]	; (8007238 <HAL_DMA_IRQHandler+0x420>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a58      	ldr	r2, [pc, #352]	; (800723c <HAL_DMA_IRQHandler+0x424>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a57      	ldr	r2, [pc, #348]	; (8007240 <HAL_DMA_IRQHandler+0x428>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a55      	ldr	r2, [pc, #340]	; (8007244 <HAL_DMA_IRQHandler+0x42c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a54      	ldr	r2, [pc, #336]	; (8007248 <HAL_DMA_IRQHandler+0x430>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_DMA_IRQHandler+0x2ee>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a52      	ldr	r2, [pc, #328]	; (800724c <HAL_DMA_IRQHandler+0x434>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d10a      	bne.n	800711c <HAL_DMA_IRQHandler+0x304>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007110:	2b00      	cmp	r3, #0
 8007112:	bf14      	ite	ne
 8007114:	2301      	movne	r3, #1
 8007116:	2300      	moveq	r3, #0
 8007118:	b2db      	uxtb	r3, r3
 800711a:	e003      	b.n	8007124 <HAL_DMA_IRQHandler+0x30c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2300      	movs	r3, #0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00d      	beq.n	8007144 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	2201      	movs	r2, #1
 8007132:	409a      	lsls	r2, r3
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713c:	f043 0202 	orr.w	r2, r3, #2
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	2204      	movs	r2, #4
 800714e:	409a      	lsls	r2, r3
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	4013      	ands	r3, r2
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 808f 	beq.w	8007278 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2c      	ldr	r2, [pc, #176]	; (8007210 <HAL_DMA_IRQHandler+0x3f8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d04a      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <HAL_DMA_IRQHandler+0x3fc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d045      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a29      	ldr	r2, [pc, #164]	; (8007218 <HAL_DMA_IRQHandler+0x400>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d040      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a27      	ldr	r2, [pc, #156]	; (800721c <HAL_DMA_IRQHandler+0x404>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d03b      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a26      	ldr	r2, [pc, #152]	; (8007220 <HAL_DMA_IRQHandler+0x408>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d036      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a24      	ldr	r2, [pc, #144]	; (8007224 <HAL_DMA_IRQHandler+0x40c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d031      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a23      	ldr	r2, [pc, #140]	; (8007228 <HAL_DMA_IRQHandler+0x410>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d02c      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a21      	ldr	r2, [pc, #132]	; (800722c <HAL_DMA_IRQHandler+0x414>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d027      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a20      	ldr	r2, [pc, #128]	; (8007230 <HAL_DMA_IRQHandler+0x418>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d022      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <HAL_DMA_IRQHandler+0x41c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d01d      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1d      	ldr	r2, [pc, #116]	; (8007238 <HAL_DMA_IRQHandler+0x420>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d018      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1b      	ldr	r2, [pc, #108]	; (800723c <HAL_DMA_IRQHandler+0x424>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1a      	ldr	r2, [pc, #104]	; (8007240 <HAL_DMA_IRQHandler+0x428>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00e      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a18      	ldr	r2, [pc, #96]	; (8007244 <HAL_DMA_IRQHandler+0x42c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d009      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a17      	ldr	r2, [pc, #92]	; (8007248 <HAL_DMA_IRQHandler+0x430>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d004      	beq.n	80071fa <HAL_DMA_IRQHandler+0x3e2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a15      	ldr	r2, [pc, #84]	; (800724c <HAL_DMA_IRQHandler+0x434>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d12a      	bne.n	8007250 <HAL_DMA_IRQHandler+0x438>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	bf14      	ite	ne
 8007208:	2301      	movne	r3, #1
 800720a:	2300      	moveq	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	e023      	b.n	8007258 <HAL_DMA_IRQHandler+0x440>
 8007210:	40020010 	.word	0x40020010
 8007214:	40020028 	.word	0x40020028
 8007218:	40020040 	.word	0x40020040
 800721c:	40020058 	.word	0x40020058
 8007220:	40020070 	.word	0x40020070
 8007224:	40020088 	.word	0x40020088
 8007228:	400200a0 	.word	0x400200a0
 800722c:	400200b8 	.word	0x400200b8
 8007230:	40020410 	.word	0x40020410
 8007234:	40020428 	.word	0x40020428
 8007238:	40020440 	.word	0x40020440
 800723c:	40020458 	.word	0x40020458
 8007240:	40020470 	.word	0x40020470
 8007244:	40020488 	.word	0x40020488
 8007248:	400204a0 	.word	0x400204a0
 800724c:	400204b8 	.word	0x400204b8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2300      	movs	r3, #0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00d      	beq.n	8007278 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	2204      	movs	r2, #4
 8007266:	409a      	lsls	r2, r3
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007270:	f043 0204 	orr.w	r2, r3, #4
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2210      	movs	r2, #16
 8007282:	409a      	lsls	r2, r3
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	4013      	ands	r3, r2
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 80a6 	beq.w	80073da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a85      	ldr	r2, [pc, #532]	; (80074a8 <HAL_DMA_IRQHandler+0x690>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d04a      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a83      	ldr	r2, [pc, #524]	; (80074ac <HAL_DMA_IRQHandler+0x694>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d045      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a82      	ldr	r2, [pc, #520]	; (80074b0 <HAL_DMA_IRQHandler+0x698>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d040      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a80      	ldr	r2, [pc, #512]	; (80074b4 <HAL_DMA_IRQHandler+0x69c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d03b      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a7f      	ldr	r2, [pc, #508]	; (80074b8 <HAL_DMA_IRQHandler+0x6a0>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d036      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a7d      	ldr	r2, [pc, #500]	; (80074bc <HAL_DMA_IRQHandler+0x6a4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d031      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a7c      	ldr	r2, [pc, #496]	; (80074c0 <HAL_DMA_IRQHandler+0x6a8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d02c      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a7a      	ldr	r2, [pc, #488]	; (80074c4 <HAL_DMA_IRQHandler+0x6ac>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d027      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a79      	ldr	r2, [pc, #484]	; (80074c8 <HAL_DMA_IRQHandler+0x6b0>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d022      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a77      	ldr	r2, [pc, #476]	; (80074cc <HAL_DMA_IRQHandler+0x6b4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01d      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a76      	ldr	r2, [pc, #472]	; (80074d0 <HAL_DMA_IRQHandler+0x6b8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d018      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a74      	ldr	r2, [pc, #464]	; (80074d4 <HAL_DMA_IRQHandler+0x6bc>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d013      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a73      	ldr	r2, [pc, #460]	; (80074d8 <HAL_DMA_IRQHandler+0x6c0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00e      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a71      	ldr	r2, [pc, #452]	; (80074dc <HAL_DMA_IRQHandler+0x6c4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d009      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a70      	ldr	r2, [pc, #448]	; (80074e0 <HAL_DMA_IRQHandler+0x6c8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d004      	beq.n	800732e <HAL_DMA_IRQHandler+0x516>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a6e      	ldr	r2, [pc, #440]	; (80074e4 <HAL_DMA_IRQHandler+0x6cc>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d10a      	bne.n	8007344 <HAL_DMA_IRQHandler+0x52c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b00      	cmp	r3, #0
 800733a:	bf14      	ite	ne
 800733c:	2301      	movne	r3, #1
 800733e:	2300      	moveq	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	e009      	b.n	8007358 <HAL_DMA_IRQHandler+0x540>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	bf14      	ite	ne
 8007352:	2301      	movne	r3, #1
 8007354:	2300      	moveq	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d03e      	beq.n	80073da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	2210      	movs	r2, #16
 8007366:	409a      	lsls	r2, r3
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d018      	beq.n	80073ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d108      	bne.n	800739a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d024      	beq.n	80073da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	4798      	blx	r3
 8007398:	e01f      	b.n	80073da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01b      	beq.n	80073da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
 80073aa:	e016      	b.n	80073da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d107      	bne.n	80073ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0208 	bic.w	r2, r2, #8
 80073c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	2220      	movs	r2, #32
 80073e4:	409a      	lsls	r2, r3
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 8110 	beq.w	8007610 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a2c      	ldr	r2, [pc, #176]	; (80074a8 <HAL_DMA_IRQHandler+0x690>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d04a      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a2b      	ldr	r2, [pc, #172]	; (80074ac <HAL_DMA_IRQHandler+0x694>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d045      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a29      	ldr	r2, [pc, #164]	; (80074b0 <HAL_DMA_IRQHandler+0x698>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d040      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a28      	ldr	r2, [pc, #160]	; (80074b4 <HAL_DMA_IRQHandler+0x69c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d03b      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a26      	ldr	r2, [pc, #152]	; (80074b8 <HAL_DMA_IRQHandler+0x6a0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d036      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a25      	ldr	r2, [pc, #148]	; (80074bc <HAL_DMA_IRQHandler+0x6a4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d031      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a23      	ldr	r2, [pc, #140]	; (80074c0 <HAL_DMA_IRQHandler+0x6a8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d02c      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <HAL_DMA_IRQHandler+0x6ac>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d027      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a20      	ldr	r2, [pc, #128]	; (80074c8 <HAL_DMA_IRQHandler+0x6b0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d022      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a1f      	ldr	r2, [pc, #124]	; (80074cc <HAL_DMA_IRQHandler+0x6b4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d01d      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a1d      	ldr	r2, [pc, #116]	; (80074d0 <HAL_DMA_IRQHandler+0x6b8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d018      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <HAL_DMA_IRQHandler+0x6bc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d013      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1a      	ldr	r2, [pc, #104]	; (80074d8 <HAL_DMA_IRQHandler+0x6c0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00e      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a19      	ldr	r2, [pc, #100]	; (80074dc <HAL_DMA_IRQHandler+0x6c4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d009      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <HAL_DMA_IRQHandler+0x6c8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_DMA_IRQHandler+0x678>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <HAL_DMA_IRQHandler+0x6cc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d12b      	bne.n	80074e8 <HAL_DMA_IRQHandler+0x6d0>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0310 	and.w	r3, r3, #16
 800749a:	2b00      	cmp	r3, #0
 800749c:	bf14      	ite	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	2300      	moveq	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	e02a      	b.n	80074fc <HAL_DMA_IRQHandler+0x6e4>
 80074a6:	bf00      	nop
 80074a8:	40020010 	.word	0x40020010
 80074ac:	40020028 	.word	0x40020028
 80074b0:	40020040 	.word	0x40020040
 80074b4:	40020058 	.word	0x40020058
 80074b8:	40020070 	.word	0x40020070
 80074bc:	40020088 	.word	0x40020088
 80074c0:	400200a0 	.word	0x400200a0
 80074c4:	400200b8 	.word	0x400200b8
 80074c8:	40020410 	.word	0x40020410
 80074cc:	40020428 	.word	0x40020428
 80074d0:	40020440 	.word	0x40020440
 80074d4:	40020458 	.word	0x40020458
 80074d8:	40020470 	.word	0x40020470
 80074dc:	40020488 	.word	0x40020488
 80074e0:	400204a0 	.word	0x400204a0
 80074e4:	400204b8 	.word	0x400204b8
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bf14      	ite	ne
 80074f6:	2301      	movne	r3, #1
 80074f8:	2300      	moveq	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 8087 	beq.w	8007610 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	2220      	movs	r2, #32
 800750c:	409a      	lsls	r2, r3
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b04      	cmp	r3, #4
 800751c:	d139      	bne.n	8007592 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0216 	bic.w	r2, r2, #22
 800752c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695a      	ldr	r2, [r3, #20]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800753c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <HAL_DMA_IRQHandler+0x736>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754a:	2b00      	cmp	r3, #0
 800754c:	d007      	beq.n	800755e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0208 	bic.w	r2, r2, #8
 800755c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	223f      	movs	r2, #63	; 0x3f
 8007568:	409a      	lsls	r2, r3
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 834a 	beq.w	8007c1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	4798      	blx	r3
          }
          return;
 8007590:	e344      	b.n	8007c1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d018      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d108      	bne.n	80075c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d02c      	beq.n	8007610 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
 80075be:	e027      	b.n	8007610 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d023      	beq.n	8007610 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
 80075d0:	e01e      	b.n	8007610 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10f      	bne.n	8007600 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0210 	bic.w	r2, r2, #16
 80075ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 8306 	beq.w	8007c26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 8088 	beq.w	8007738 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2204      	movs	r2, #4
 800762c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a7a      	ldr	r2, [pc, #488]	; (8007820 <HAL_DMA_IRQHandler+0xa08>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d04a      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a79      	ldr	r2, [pc, #484]	; (8007824 <HAL_DMA_IRQHandler+0xa0c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d045      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a77      	ldr	r2, [pc, #476]	; (8007828 <HAL_DMA_IRQHandler+0xa10>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d040      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a76      	ldr	r2, [pc, #472]	; (800782c <HAL_DMA_IRQHandler+0xa14>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d03b      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a74      	ldr	r2, [pc, #464]	; (8007830 <HAL_DMA_IRQHandler+0xa18>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d036      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a73      	ldr	r2, [pc, #460]	; (8007834 <HAL_DMA_IRQHandler+0xa1c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d031      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a71      	ldr	r2, [pc, #452]	; (8007838 <HAL_DMA_IRQHandler+0xa20>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d02c      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a70      	ldr	r2, [pc, #448]	; (800783c <HAL_DMA_IRQHandler+0xa24>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d027      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a6e      	ldr	r2, [pc, #440]	; (8007840 <HAL_DMA_IRQHandler+0xa28>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d022      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a6d      	ldr	r2, [pc, #436]	; (8007844 <HAL_DMA_IRQHandler+0xa2c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d01d      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a6b      	ldr	r2, [pc, #428]	; (8007848 <HAL_DMA_IRQHandler+0xa30>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d018      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a6a      	ldr	r2, [pc, #424]	; (800784c <HAL_DMA_IRQHandler+0xa34>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d013      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a68      	ldr	r2, [pc, #416]	; (8007850 <HAL_DMA_IRQHandler+0xa38>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00e      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a67      	ldr	r2, [pc, #412]	; (8007854 <HAL_DMA_IRQHandler+0xa3c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d009      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a65      	ldr	r2, [pc, #404]	; (8007858 <HAL_DMA_IRQHandler+0xa40>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d004      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x8b8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a64      	ldr	r2, [pc, #400]	; (800785c <HAL_DMA_IRQHandler+0xa44>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d108      	bne.n	80076e2 <HAL_DMA_IRQHandler+0x8ca>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0201 	bic.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	e007      	b.n	80076f2 <HAL_DMA_IRQHandler+0x8da>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0201 	bic.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3301      	adds	r3, #1
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d307      	bcc.n	800770e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1f2      	bne.n	80076f2 <HAL_DMA_IRQHandler+0x8da>
 800770c:	e000      	b.n	8007710 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800770e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d004      	beq.n	8007728 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2203      	movs	r2, #3
 8007722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007726:	e003      	b.n	8007730 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8272 	beq.w	8007c26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
 800774a:	e26c      	b.n	8007c26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a43      	ldr	r2, [pc, #268]	; (8007860 <HAL_DMA_IRQHandler+0xa48>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d022      	beq.n	800779c <HAL_DMA_IRQHandler+0x984>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a42      	ldr	r2, [pc, #264]	; (8007864 <HAL_DMA_IRQHandler+0xa4c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d01d      	beq.n	800779c <HAL_DMA_IRQHandler+0x984>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a40      	ldr	r2, [pc, #256]	; (8007868 <HAL_DMA_IRQHandler+0xa50>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d018      	beq.n	800779c <HAL_DMA_IRQHandler+0x984>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a3f      	ldr	r2, [pc, #252]	; (800786c <HAL_DMA_IRQHandler+0xa54>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d013      	beq.n	800779c <HAL_DMA_IRQHandler+0x984>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a3d      	ldr	r2, [pc, #244]	; (8007870 <HAL_DMA_IRQHandler+0xa58>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00e      	beq.n	800779c <HAL_DMA_IRQHandler+0x984>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a3c      	ldr	r2, [pc, #240]	; (8007874 <HAL_DMA_IRQHandler+0xa5c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d009      	beq.n	800779c <HAL_DMA_IRQHandler+0x984>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a3a      	ldr	r2, [pc, #232]	; (8007878 <HAL_DMA_IRQHandler+0xa60>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <HAL_DMA_IRQHandler+0x984>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a39      	ldr	r2, [pc, #228]	; (800787c <HAL_DMA_IRQHandler+0xa64>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d101      	bne.n	80077a0 <HAL_DMA_IRQHandler+0x988>
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <HAL_DMA_IRQHandler+0x98a>
 80077a0:	2300      	movs	r3, #0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 823f 	beq.w	8007c26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b4:	f003 031f 	and.w	r3, r3, #31
 80077b8:	2204      	movs	r2, #4
 80077ba:	409a      	lsls	r2, r3
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80cd 	beq.w	8007960 <HAL_DMA_IRQHandler+0xb48>
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80c7 	beq.w	8007960 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	2204      	movs	r2, #4
 80077dc:	409a      	lsls	r2, r3
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d049      	beq.n	8007880 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8210 	beq.w	8007c20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007808:	e20a      	b.n	8007c20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8206 	beq.w	8007c20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800781c:	e200      	b.n	8007c20 <HAL_DMA_IRQHandler+0xe08>
 800781e:	bf00      	nop
 8007820:	40020010 	.word	0x40020010
 8007824:	40020028 	.word	0x40020028
 8007828:	40020040 	.word	0x40020040
 800782c:	40020058 	.word	0x40020058
 8007830:	40020070 	.word	0x40020070
 8007834:	40020088 	.word	0x40020088
 8007838:	400200a0 	.word	0x400200a0
 800783c:	400200b8 	.word	0x400200b8
 8007840:	40020410 	.word	0x40020410
 8007844:	40020428 	.word	0x40020428
 8007848:	40020440 	.word	0x40020440
 800784c:	40020458 	.word	0x40020458
 8007850:	40020470 	.word	0x40020470
 8007854:	40020488 	.word	0x40020488
 8007858:	400204a0 	.word	0x400204a0
 800785c:	400204b8 	.word	0x400204b8
 8007860:	58025408 	.word	0x58025408
 8007864:	5802541c 	.word	0x5802541c
 8007868:	58025430 	.word	0x58025430
 800786c:	58025444 	.word	0x58025444
 8007870:	58025458 	.word	0x58025458
 8007874:	5802546c 	.word	0x5802546c
 8007878:	58025480 	.word	0x58025480
 800787c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d160      	bne.n	800794c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a7f      	ldr	r2, [pc, #508]	; (8007a8c <HAL_DMA_IRQHandler+0xc74>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d04a      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a7d      	ldr	r2, [pc, #500]	; (8007a90 <HAL_DMA_IRQHandler+0xc78>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d045      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a7c      	ldr	r2, [pc, #496]	; (8007a94 <HAL_DMA_IRQHandler+0xc7c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d040      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a7a      	ldr	r2, [pc, #488]	; (8007a98 <HAL_DMA_IRQHandler+0xc80>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d03b      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a79      	ldr	r2, [pc, #484]	; (8007a9c <HAL_DMA_IRQHandler+0xc84>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d036      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a77      	ldr	r2, [pc, #476]	; (8007aa0 <HAL_DMA_IRQHandler+0xc88>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d031      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a76      	ldr	r2, [pc, #472]	; (8007aa4 <HAL_DMA_IRQHandler+0xc8c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d02c      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a74      	ldr	r2, [pc, #464]	; (8007aa8 <HAL_DMA_IRQHandler+0xc90>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d027      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a73      	ldr	r2, [pc, #460]	; (8007aac <HAL_DMA_IRQHandler+0xc94>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d022      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a71      	ldr	r2, [pc, #452]	; (8007ab0 <HAL_DMA_IRQHandler+0xc98>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d01d      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a70      	ldr	r2, [pc, #448]	; (8007ab4 <HAL_DMA_IRQHandler+0xc9c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d018      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a6e      	ldr	r2, [pc, #440]	; (8007ab8 <HAL_DMA_IRQHandler+0xca0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d013      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a6d      	ldr	r2, [pc, #436]	; (8007abc <HAL_DMA_IRQHandler+0xca4>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00e      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a6b      	ldr	r2, [pc, #428]	; (8007ac0 <HAL_DMA_IRQHandler+0xca8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d009      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a6a      	ldr	r2, [pc, #424]	; (8007ac4 <HAL_DMA_IRQHandler+0xcac>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d004      	beq.n	800792a <HAL_DMA_IRQHandler+0xb12>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a68      	ldr	r2, [pc, #416]	; (8007ac8 <HAL_DMA_IRQHandler+0xcb0>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d108      	bne.n	800793c <HAL_DMA_IRQHandler+0xb24>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0208 	bic.w	r2, r2, #8
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e007      	b.n	800794c <HAL_DMA_IRQHandler+0xb34>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0204 	bic.w	r2, r2, #4
 800794a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8165 	beq.w	8007c20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800795e:	e15f      	b.n	8007c20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	2202      	movs	r2, #2
 800796a:	409a      	lsls	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	4013      	ands	r3, r2
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80c5 	beq.w	8007b00 <HAL_DMA_IRQHandler+0xce8>
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80bf 	beq.w	8007b00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2202      	movs	r2, #2
 800798c:	409a      	lsls	r2, r3
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d018      	beq.n	80079ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d109      	bne.n	80079ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 813a 	beq.w	8007c24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079b8:	e134      	b.n	8007c24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8130 	beq.w	8007c24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079cc:	e12a      	b.n	8007c24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f040 8089 	bne.w	8007aec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a2b      	ldr	r2, [pc, #172]	; (8007a8c <HAL_DMA_IRQHandler+0xc74>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d04a      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a29      	ldr	r2, [pc, #164]	; (8007a90 <HAL_DMA_IRQHandler+0xc78>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d045      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a28      	ldr	r2, [pc, #160]	; (8007a94 <HAL_DMA_IRQHandler+0xc7c>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d040      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a26      	ldr	r2, [pc, #152]	; (8007a98 <HAL_DMA_IRQHandler+0xc80>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d03b      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a25      	ldr	r2, [pc, #148]	; (8007a9c <HAL_DMA_IRQHandler+0xc84>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d036      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a23      	ldr	r2, [pc, #140]	; (8007aa0 <HAL_DMA_IRQHandler+0xc88>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d031      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a22      	ldr	r2, [pc, #136]	; (8007aa4 <HAL_DMA_IRQHandler+0xc8c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d02c      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a20      	ldr	r2, [pc, #128]	; (8007aa8 <HAL_DMA_IRQHandler+0xc90>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d027      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a1f      	ldr	r2, [pc, #124]	; (8007aac <HAL_DMA_IRQHandler+0xc94>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d022      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <HAL_DMA_IRQHandler+0xc98>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01d      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1c      	ldr	r2, [pc, #112]	; (8007ab4 <HAL_DMA_IRQHandler+0xc9c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d018      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a1a      	ldr	r2, [pc, #104]	; (8007ab8 <HAL_DMA_IRQHandler+0xca0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a19      	ldr	r2, [pc, #100]	; (8007abc <HAL_DMA_IRQHandler+0xca4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00e      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a17      	ldr	r2, [pc, #92]	; (8007ac0 <HAL_DMA_IRQHandler+0xca8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d009      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a16      	ldr	r2, [pc, #88]	; (8007ac4 <HAL_DMA_IRQHandler+0xcac>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d004      	beq.n	8007a7a <HAL_DMA_IRQHandler+0xc62>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a14      	ldr	r2, [pc, #80]	; (8007ac8 <HAL_DMA_IRQHandler+0xcb0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d128      	bne.n	8007acc <HAL_DMA_IRQHandler+0xcb4>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0214 	bic.w	r2, r2, #20
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	e027      	b.n	8007adc <HAL_DMA_IRQHandler+0xcc4>
 8007a8c:	40020010 	.word	0x40020010
 8007a90:	40020028 	.word	0x40020028
 8007a94:	40020040 	.word	0x40020040
 8007a98:	40020058 	.word	0x40020058
 8007a9c:	40020070 	.word	0x40020070
 8007aa0:	40020088 	.word	0x40020088
 8007aa4:	400200a0 	.word	0x400200a0
 8007aa8:	400200b8 	.word	0x400200b8
 8007aac:	40020410 	.word	0x40020410
 8007ab0:	40020428 	.word	0x40020428
 8007ab4:	40020440 	.word	0x40020440
 8007ab8:	40020458 	.word	0x40020458
 8007abc:	40020470 	.word	0x40020470
 8007ac0:	40020488 	.word	0x40020488
 8007ac4:	400204a0 	.word	0x400204a0
 8007ac8:	400204b8 	.word	0x400204b8
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 020a 	bic.w	r2, r2, #10
 8007ada:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 8097 	beq.w	8007c24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007afe:	e091      	b.n	8007c24 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b04:	f003 031f 	and.w	r3, r3, #31
 8007b08:	2208      	movs	r2, #8
 8007b0a:	409a      	lsls	r2, r3
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8088 	beq.w	8007c26 <HAL_DMA_IRQHandler+0xe0e>
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f003 0308 	and.w	r3, r3, #8
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8082 	beq.w	8007c26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a41      	ldr	r2, [pc, #260]	; (8007c2c <HAL_DMA_IRQHandler+0xe14>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d04a      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a3f      	ldr	r2, [pc, #252]	; (8007c30 <HAL_DMA_IRQHandler+0xe18>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d045      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a3e      	ldr	r2, [pc, #248]	; (8007c34 <HAL_DMA_IRQHandler+0xe1c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d040      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a3c      	ldr	r2, [pc, #240]	; (8007c38 <HAL_DMA_IRQHandler+0xe20>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d03b      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a3b      	ldr	r2, [pc, #236]	; (8007c3c <HAL_DMA_IRQHandler+0xe24>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d036      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a39      	ldr	r2, [pc, #228]	; (8007c40 <HAL_DMA_IRQHandler+0xe28>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d031      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a38      	ldr	r2, [pc, #224]	; (8007c44 <HAL_DMA_IRQHandler+0xe2c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d02c      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a36      	ldr	r2, [pc, #216]	; (8007c48 <HAL_DMA_IRQHandler+0xe30>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d027      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a35      	ldr	r2, [pc, #212]	; (8007c4c <HAL_DMA_IRQHandler+0xe34>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d022      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a33      	ldr	r2, [pc, #204]	; (8007c50 <HAL_DMA_IRQHandler+0xe38>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01d      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a32      	ldr	r2, [pc, #200]	; (8007c54 <HAL_DMA_IRQHandler+0xe3c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d018      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a30      	ldr	r2, [pc, #192]	; (8007c58 <HAL_DMA_IRQHandler+0xe40>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a2f      	ldr	r2, [pc, #188]	; (8007c5c <HAL_DMA_IRQHandler+0xe44>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a2d      	ldr	r2, [pc, #180]	; (8007c60 <HAL_DMA_IRQHandler+0xe48>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2c      	ldr	r2, [pc, #176]	; (8007c64 <HAL_DMA_IRQHandler+0xe4c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xdaa>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a2a      	ldr	r2, [pc, #168]	; (8007c68 <HAL_DMA_IRQHandler+0xe50>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d108      	bne.n	8007bd4 <HAL_DMA_IRQHandler+0xdbc>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 021c 	bic.w	r2, r2, #28
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	e007      	b.n	8007be4 <HAL_DMA_IRQHandler+0xdcc>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 020e 	bic.w	r2, r2, #14
 8007be2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	2201      	movs	r2, #1
 8007bee:	409a      	lsls	r2, r3
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
 8007c1a:	e004      	b.n	8007c26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c1c:	bf00      	nop
 8007c1e:	e002      	b.n	8007c26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c20:	bf00      	nop
 8007c22:	e000      	b.n	8007c26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c26:	3728      	adds	r7, #40	; 0x28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40020010 	.word	0x40020010
 8007c30:	40020028 	.word	0x40020028
 8007c34:	40020040 	.word	0x40020040
 8007c38:	40020058 	.word	0x40020058
 8007c3c:	40020070 	.word	0x40020070
 8007c40:	40020088 	.word	0x40020088
 8007c44:	400200a0 	.word	0x400200a0
 8007c48:	400200b8 	.word	0x400200b8
 8007c4c:	40020410 	.word	0x40020410
 8007c50:	40020428 	.word	0x40020428
 8007c54:	40020440 	.word	0x40020440
 8007c58:	40020458 	.word	0x40020458
 8007c5c:	40020470 	.word	0x40020470
 8007c60:	40020488 	.word	0x40020488
 8007c64:	400204a0 	.word	0x400204a0
 8007c68:	400204b8 	.word	0x400204b8

08007c6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a7f      	ldr	r2, [pc, #508]	; (8007e88 <DMA_SetConfig+0x21c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d072      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a7d      	ldr	r2, [pc, #500]	; (8007e8c <DMA_SetConfig+0x220>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d06d      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a7c      	ldr	r2, [pc, #496]	; (8007e90 <DMA_SetConfig+0x224>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d068      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a7a      	ldr	r2, [pc, #488]	; (8007e94 <DMA_SetConfig+0x228>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d063      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a79      	ldr	r2, [pc, #484]	; (8007e98 <DMA_SetConfig+0x22c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d05e      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a77      	ldr	r2, [pc, #476]	; (8007e9c <DMA_SetConfig+0x230>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d059      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a76      	ldr	r2, [pc, #472]	; (8007ea0 <DMA_SetConfig+0x234>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d054      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a74      	ldr	r2, [pc, #464]	; (8007ea4 <DMA_SetConfig+0x238>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d04f      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a73      	ldr	r2, [pc, #460]	; (8007ea8 <DMA_SetConfig+0x23c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d04a      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a71      	ldr	r2, [pc, #452]	; (8007eac <DMA_SetConfig+0x240>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d045      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a70      	ldr	r2, [pc, #448]	; (8007eb0 <DMA_SetConfig+0x244>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d040      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a6e      	ldr	r2, [pc, #440]	; (8007eb4 <DMA_SetConfig+0x248>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d03b      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a6d      	ldr	r2, [pc, #436]	; (8007eb8 <DMA_SetConfig+0x24c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d036      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a6b      	ldr	r2, [pc, #428]	; (8007ebc <DMA_SetConfig+0x250>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d031      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a6a      	ldr	r2, [pc, #424]	; (8007ec0 <DMA_SetConfig+0x254>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d02c      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a68      	ldr	r2, [pc, #416]	; (8007ec4 <DMA_SetConfig+0x258>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d027      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a67      	ldr	r2, [pc, #412]	; (8007ec8 <DMA_SetConfig+0x25c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d022      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a65      	ldr	r2, [pc, #404]	; (8007ecc <DMA_SetConfig+0x260>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d01d      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a64      	ldr	r2, [pc, #400]	; (8007ed0 <DMA_SetConfig+0x264>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d018      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a62      	ldr	r2, [pc, #392]	; (8007ed4 <DMA_SetConfig+0x268>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d013      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a61      	ldr	r2, [pc, #388]	; (8007ed8 <DMA_SetConfig+0x26c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00e      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a5f      	ldr	r2, [pc, #380]	; (8007edc <DMA_SetConfig+0x270>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d009      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a5e      	ldr	r2, [pc, #376]	; (8007ee0 <DMA_SetConfig+0x274>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d004      	beq.n	8007d76 <DMA_SetConfig+0x10a>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a5c      	ldr	r2, [pc, #368]	; (8007ee4 <DMA_SetConfig+0x278>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d101      	bne.n	8007d7a <DMA_SetConfig+0x10e>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <DMA_SetConfig+0x110>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00d      	beq.n	8007d9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a39      	ldr	r2, [pc, #228]	; (8007e88 <DMA_SetConfig+0x21c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d04a      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a38      	ldr	r2, [pc, #224]	; (8007e8c <DMA_SetConfig+0x220>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d045      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a36      	ldr	r2, [pc, #216]	; (8007e90 <DMA_SetConfig+0x224>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d040      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a35      	ldr	r2, [pc, #212]	; (8007e94 <DMA_SetConfig+0x228>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d03b      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a33      	ldr	r2, [pc, #204]	; (8007e98 <DMA_SetConfig+0x22c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d036      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a32      	ldr	r2, [pc, #200]	; (8007e9c <DMA_SetConfig+0x230>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d031      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a30      	ldr	r2, [pc, #192]	; (8007ea0 <DMA_SetConfig+0x234>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d02c      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a2f      	ldr	r2, [pc, #188]	; (8007ea4 <DMA_SetConfig+0x238>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d027      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a2d      	ldr	r2, [pc, #180]	; (8007ea8 <DMA_SetConfig+0x23c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d022      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a2c      	ldr	r2, [pc, #176]	; (8007eac <DMA_SetConfig+0x240>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d01d      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a2a      	ldr	r2, [pc, #168]	; (8007eb0 <DMA_SetConfig+0x244>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d018      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a29      	ldr	r2, [pc, #164]	; (8007eb4 <DMA_SetConfig+0x248>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d013      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a27      	ldr	r2, [pc, #156]	; (8007eb8 <DMA_SetConfig+0x24c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00e      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a26      	ldr	r2, [pc, #152]	; (8007ebc <DMA_SetConfig+0x250>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d009      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a24      	ldr	r2, [pc, #144]	; (8007ec0 <DMA_SetConfig+0x254>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <DMA_SetConfig+0x1d0>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a23      	ldr	r2, [pc, #140]	; (8007ec4 <DMA_SetConfig+0x258>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d101      	bne.n	8007e40 <DMA_SetConfig+0x1d4>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e000      	b.n	8007e42 <DMA_SetConfig+0x1d6>
 8007e40:	2300      	movs	r3, #0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d059      	beq.n	8007efa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4a:	f003 031f 	and.w	r3, r3, #31
 8007e4e:	223f      	movs	r2, #63	; 0x3f
 8007e50:	409a      	lsls	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b40      	cmp	r3, #64	; 0x40
 8007e74:	d138      	bne.n	8007ee8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e86:	e086      	b.n	8007f96 <DMA_SetConfig+0x32a>
 8007e88:	40020010 	.word	0x40020010
 8007e8c:	40020028 	.word	0x40020028
 8007e90:	40020040 	.word	0x40020040
 8007e94:	40020058 	.word	0x40020058
 8007e98:	40020070 	.word	0x40020070
 8007e9c:	40020088 	.word	0x40020088
 8007ea0:	400200a0 	.word	0x400200a0
 8007ea4:	400200b8 	.word	0x400200b8
 8007ea8:	40020410 	.word	0x40020410
 8007eac:	40020428 	.word	0x40020428
 8007eb0:	40020440 	.word	0x40020440
 8007eb4:	40020458 	.word	0x40020458
 8007eb8:	40020470 	.word	0x40020470
 8007ebc:	40020488 	.word	0x40020488
 8007ec0:	400204a0 	.word	0x400204a0
 8007ec4:	400204b8 	.word	0x400204b8
 8007ec8:	58025408 	.word	0x58025408
 8007ecc:	5802541c 	.word	0x5802541c
 8007ed0:	58025430 	.word	0x58025430
 8007ed4:	58025444 	.word	0x58025444
 8007ed8:	58025458 	.word	0x58025458
 8007edc:	5802546c 	.word	0x5802546c
 8007ee0:	58025480 	.word	0x58025480
 8007ee4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	60da      	str	r2, [r3, #12]
}
 8007ef8:	e04d      	b.n	8007f96 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a29      	ldr	r2, [pc, #164]	; (8007fa4 <DMA_SetConfig+0x338>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d022      	beq.n	8007f4a <DMA_SetConfig+0x2de>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a27      	ldr	r2, [pc, #156]	; (8007fa8 <DMA_SetConfig+0x33c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d01d      	beq.n	8007f4a <DMA_SetConfig+0x2de>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a26      	ldr	r2, [pc, #152]	; (8007fac <DMA_SetConfig+0x340>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d018      	beq.n	8007f4a <DMA_SetConfig+0x2de>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a24      	ldr	r2, [pc, #144]	; (8007fb0 <DMA_SetConfig+0x344>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d013      	beq.n	8007f4a <DMA_SetConfig+0x2de>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a23      	ldr	r2, [pc, #140]	; (8007fb4 <DMA_SetConfig+0x348>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00e      	beq.n	8007f4a <DMA_SetConfig+0x2de>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a21      	ldr	r2, [pc, #132]	; (8007fb8 <DMA_SetConfig+0x34c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d009      	beq.n	8007f4a <DMA_SetConfig+0x2de>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a20      	ldr	r2, [pc, #128]	; (8007fbc <DMA_SetConfig+0x350>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d004      	beq.n	8007f4a <DMA_SetConfig+0x2de>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1e      	ldr	r2, [pc, #120]	; (8007fc0 <DMA_SetConfig+0x354>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d101      	bne.n	8007f4e <DMA_SetConfig+0x2e2>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <DMA_SetConfig+0x2e4>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d020      	beq.n	8007f96 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f58:	f003 031f 	and.w	r3, r3, #31
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	409a      	lsls	r2, r3
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b40      	cmp	r3, #64	; 0x40
 8007f72:	d108      	bne.n	8007f86 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	60da      	str	r2, [r3, #12]
}
 8007f84:	e007      	b.n	8007f96 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	60da      	str	r2, [r3, #12]
}
 8007f96:	bf00      	nop
 8007f98:	371c      	adds	r7, #28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	58025408 	.word	0x58025408
 8007fa8:	5802541c 	.word	0x5802541c
 8007fac:	58025430 	.word	0x58025430
 8007fb0:	58025444 	.word	0x58025444
 8007fb4:	58025458 	.word	0x58025458
 8007fb8:	5802546c 	.word	0x5802546c
 8007fbc:	58025480 	.word	0x58025480
 8007fc0:	58025494 	.word	0x58025494

08007fc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a42      	ldr	r2, [pc, #264]	; (80080dc <DMA_CalcBaseAndBitshift+0x118>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d04a      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a41      	ldr	r2, [pc, #260]	; (80080e0 <DMA_CalcBaseAndBitshift+0x11c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d045      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a3f      	ldr	r2, [pc, #252]	; (80080e4 <DMA_CalcBaseAndBitshift+0x120>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d040      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a3e      	ldr	r2, [pc, #248]	; (80080e8 <DMA_CalcBaseAndBitshift+0x124>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d03b      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a3c      	ldr	r2, [pc, #240]	; (80080ec <DMA_CalcBaseAndBitshift+0x128>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d036      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a3b      	ldr	r2, [pc, #236]	; (80080f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d031      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a39      	ldr	r2, [pc, #228]	; (80080f4 <DMA_CalcBaseAndBitshift+0x130>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d02c      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a38      	ldr	r2, [pc, #224]	; (80080f8 <DMA_CalcBaseAndBitshift+0x134>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d027      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a36      	ldr	r2, [pc, #216]	; (80080fc <DMA_CalcBaseAndBitshift+0x138>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d022      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a35      	ldr	r2, [pc, #212]	; (8008100 <DMA_CalcBaseAndBitshift+0x13c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d01d      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a33      	ldr	r2, [pc, #204]	; (8008104 <DMA_CalcBaseAndBitshift+0x140>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d018      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a32      	ldr	r2, [pc, #200]	; (8008108 <DMA_CalcBaseAndBitshift+0x144>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d013      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a30      	ldr	r2, [pc, #192]	; (800810c <DMA_CalcBaseAndBitshift+0x148>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00e      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a2f      	ldr	r2, [pc, #188]	; (8008110 <DMA_CalcBaseAndBitshift+0x14c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d009      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a2d      	ldr	r2, [pc, #180]	; (8008114 <DMA_CalcBaseAndBitshift+0x150>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <DMA_CalcBaseAndBitshift+0xa8>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a2c      	ldr	r2, [pc, #176]	; (8008118 <DMA_CalcBaseAndBitshift+0x154>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d101      	bne.n	8008070 <DMA_CalcBaseAndBitshift+0xac>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <DMA_CalcBaseAndBitshift+0xae>
 8008070:	2300      	movs	r3, #0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d024      	beq.n	80080c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	3b10      	subs	r3, #16
 800807e:	4a27      	ldr	r2, [pc, #156]	; (800811c <DMA_CalcBaseAndBitshift+0x158>)
 8008080:	fba2 2303 	umull	r2, r3, r2, r3
 8008084:	091b      	lsrs	r3, r3, #4
 8008086:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f003 0307 	and.w	r3, r3, #7
 800808e:	4a24      	ldr	r2, [pc, #144]	; (8008120 <DMA_CalcBaseAndBitshift+0x15c>)
 8008090:	5cd3      	ldrb	r3, [r2, r3]
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b03      	cmp	r3, #3
 800809c:	d908      	bls.n	80080b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	4b1f      	ldr	r3, [pc, #124]	; (8008124 <DMA_CalcBaseAndBitshift+0x160>)
 80080a6:	4013      	ands	r3, r2
 80080a8:	1d1a      	adds	r2, r3, #4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	659a      	str	r2, [r3, #88]	; 0x58
 80080ae:	e00d      	b.n	80080cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <DMA_CalcBaseAndBitshift+0x160>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6593      	str	r3, [r2, #88]	; 0x58
 80080be:	e005      	b.n	80080cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	40020010 	.word	0x40020010
 80080e0:	40020028 	.word	0x40020028
 80080e4:	40020040 	.word	0x40020040
 80080e8:	40020058 	.word	0x40020058
 80080ec:	40020070 	.word	0x40020070
 80080f0:	40020088 	.word	0x40020088
 80080f4:	400200a0 	.word	0x400200a0
 80080f8:	400200b8 	.word	0x400200b8
 80080fc:	40020410 	.word	0x40020410
 8008100:	40020428 	.word	0x40020428
 8008104:	40020440 	.word	0x40020440
 8008108:	40020458 	.word	0x40020458
 800810c:	40020470 	.word	0x40020470
 8008110:	40020488 	.word	0x40020488
 8008114:	400204a0 	.word	0x400204a0
 8008118:	400204b8 	.word	0x400204b8
 800811c:	aaaaaaab 	.word	0xaaaaaaab
 8008120:	080154ac 	.word	0x080154ac
 8008124:	fffffc00 	.word	0xfffffc00

08008128 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d120      	bne.n	800817e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	2b03      	cmp	r3, #3
 8008142:	d858      	bhi.n	80081f6 <DMA_CheckFifoParam+0xce>
 8008144:	a201      	add	r2, pc, #4	; (adr r2, 800814c <DMA_CheckFifoParam+0x24>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	0800815d 	.word	0x0800815d
 8008150:	0800816f 	.word	0x0800816f
 8008154:	0800815d 	.word	0x0800815d
 8008158:	080081f7 	.word	0x080081f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d048      	beq.n	80081fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800816c:	e045      	b.n	80081fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008176:	d142      	bne.n	80081fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800817c:	e03f      	b.n	80081fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008186:	d123      	bne.n	80081d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	2b03      	cmp	r3, #3
 800818e:	d838      	bhi.n	8008202 <DMA_CheckFifoParam+0xda>
 8008190:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <DMA_CheckFifoParam+0x70>)
 8008192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008196:	bf00      	nop
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081af 	.word	0x080081af
 80081a0:	080081a9 	.word	0x080081a9
 80081a4:	080081c1 	.word	0x080081c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
        break;
 80081ac:	e030      	b.n	8008210 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d025      	beq.n	8008206 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081be:	e022      	b.n	8008206 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081c8:	d11f      	bne.n	800820a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081ce:	e01c      	b.n	800820a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d902      	bls.n	80081de <DMA_CheckFifoParam+0xb6>
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d003      	beq.n	80081e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80081dc:	e018      	b.n	8008210 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	73fb      	strb	r3, [r7, #15]
        break;
 80081e2:	e015      	b.n	8008210 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00e      	beq.n	800820e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	73fb      	strb	r3, [r7, #15]
    break;
 80081f4:	e00b      	b.n	800820e <DMA_CheckFifoParam+0xe6>
        break;
 80081f6:	bf00      	nop
 80081f8:	e00a      	b.n	8008210 <DMA_CheckFifoParam+0xe8>
        break;
 80081fa:	bf00      	nop
 80081fc:	e008      	b.n	8008210 <DMA_CheckFifoParam+0xe8>
        break;
 80081fe:	bf00      	nop
 8008200:	e006      	b.n	8008210 <DMA_CheckFifoParam+0xe8>
        break;
 8008202:	bf00      	nop
 8008204:	e004      	b.n	8008210 <DMA_CheckFifoParam+0xe8>
        break;
 8008206:	bf00      	nop
 8008208:	e002      	b.n	8008210 <DMA_CheckFifoParam+0xe8>
        break;
 800820a:	bf00      	nop
 800820c:	e000      	b.n	8008210 <DMA_CheckFifoParam+0xe8>
    break;
 800820e:	bf00      	nop
    }
  }

  return status;
 8008210:	7bfb      	ldrb	r3, [r7, #15]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop

08008220 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a38      	ldr	r2, [pc, #224]	; (8008314 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d022      	beq.n	800827e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a36      	ldr	r2, [pc, #216]	; (8008318 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d01d      	beq.n	800827e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a35      	ldr	r2, [pc, #212]	; (800831c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d018      	beq.n	800827e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a33      	ldr	r2, [pc, #204]	; (8008320 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d013      	beq.n	800827e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a32      	ldr	r2, [pc, #200]	; (8008324 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00e      	beq.n	800827e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a30      	ldr	r2, [pc, #192]	; (8008328 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d009      	beq.n	800827e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a2f      	ldr	r2, [pc, #188]	; (800832c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d004      	beq.n	800827e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a2d      	ldr	r2, [pc, #180]	; (8008330 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d101      	bne.n	8008282 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800827e:	2301      	movs	r3, #1
 8008280:	e000      	b.n	8008284 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008282:	2300      	movs	r3, #0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01a      	beq.n	80082be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	3b08      	subs	r3, #8
 8008290:	4a28      	ldr	r2, [pc, #160]	; (8008334 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	091b      	lsrs	r3, r3, #4
 8008298:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4b26      	ldr	r3, [pc, #152]	; (8008338 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a24      	ldr	r2, [pc, #144]	; (800833c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80082ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f003 031f 	and.w	r3, r3, #31
 80082b4:	2201      	movs	r2, #1
 80082b6:	409a      	lsls	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80082bc:	e024      	b.n	8008308 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	3b10      	subs	r3, #16
 80082c6:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80082c8:	fba2 2303 	umull	r2, r3, r2, r3
 80082cc:	091b      	lsrs	r3, r3, #4
 80082ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4a1c      	ldr	r2, [pc, #112]	; (8008344 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d806      	bhi.n	80082e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4a1b      	ldr	r2, [pc, #108]	; (8008348 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d902      	bls.n	80082e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3308      	adds	r3, #8
 80082e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	4b18      	ldr	r3, [pc, #96]	; (800834c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a16      	ldr	r2, [pc, #88]	; (8008350 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80082f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 031f 	and.w	r3, r3, #31
 8008300:	2201      	movs	r2, #1
 8008302:	409a      	lsls	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	58025408 	.word	0x58025408
 8008318:	5802541c 	.word	0x5802541c
 800831c:	58025430 	.word	0x58025430
 8008320:	58025444 	.word	0x58025444
 8008324:	58025458 	.word	0x58025458
 8008328:	5802546c 	.word	0x5802546c
 800832c:	58025480 	.word	0x58025480
 8008330:	58025494 	.word	0x58025494
 8008334:	cccccccd 	.word	0xcccccccd
 8008338:	16009600 	.word	0x16009600
 800833c:	58025880 	.word	0x58025880
 8008340:	aaaaaaab 	.word	0xaaaaaaab
 8008344:	400204b8 	.word	0x400204b8
 8008348:	4002040f 	.word	0x4002040f
 800834c:	10008200 	.word	0x10008200
 8008350:	40020880 	.word	0x40020880

08008354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d04a      	beq.n	8008400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b08      	cmp	r3, #8
 800836e:	d847      	bhi.n	8008400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a25      	ldr	r2, [pc, #148]	; (800840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d022      	beq.n	80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a24      	ldr	r2, [pc, #144]	; (8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d01d      	beq.n	80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a22      	ldr	r2, [pc, #136]	; (8008414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d018      	beq.n	80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a21      	ldr	r2, [pc, #132]	; (8008418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d013      	beq.n	80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1f      	ldr	r2, [pc, #124]	; (800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00e      	beq.n	80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1e      	ldr	r2, [pc, #120]	; (8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d009      	beq.n	80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a1c      	ldr	r2, [pc, #112]	; (8008424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d004      	beq.n	80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a1b      	ldr	r2, [pc, #108]	; (8008428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d101      	bne.n	80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80083c0:	2301      	movs	r3, #1
 80083c2:	e000      	b.n	80083c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80083c4:	2300      	movs	r3, #0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4b17      	ldr	r3, [pc, #92]	; (800842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	461a      	mov	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a15      	ldr	r2, [pc, #84]	; (8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80083dc:	671a      	str	r2, [r3, #112]	; 0x70
 80083de:	e009      	b.n	80083f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	4b14      	ldr	r3, [pc, #80]	; (8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a11      	ldr	r2, [pc, #68]	; (8008438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80083f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	2201      	movs	r2, #1
 80083fa:	409a      	lsls	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008400:	bf00      	nop
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	58025408 	.word	0x58025408
 8008410:	5802541c 	.word	0x5802541c
 8008414:	58025430 	.word	0x58025430
 8008418:	58025444 	.word	0x58025444
 800841c:	58025458 	.word	0x58025458
 8008420:	5802546c 	.word	0x5802546c
 8008424:	58025480 	.word	0x58025480
 8008428:	58025494 	.word	0x58025494
 800842c:	1600963f 	.word	0x1600963f
 8008430:	58025940 	.word	0x58025940
 8008434:	1000823f 	.word	0x1000823f
 8008438:	40020940 	.word	0x40020940

0800843c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800843c:	b480      	push	{r7}
 800843e:	b089      	sub	sp, #36	; 0x24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008446:	2300      	movs	r3, #0
 8008448:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800844a:	4b89      	ldr	r3, [pc, #548]	; (8008670 <HAL_GPIO_Init+0x234>)
 800844c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800844e:	e194      	b.n	800877a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	2101      	movs	r1, #1
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	fa01 f303 	lsl.w	r3, r1, r3
 800845c:	4013      	ands	r3, r2
 800845e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 8186 	beq.w	8008774 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	2b01      	cmp	r3, #1
 8008472:	d005      	beq.n	8008480 <HAL_GPIO_Init+0x44>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d130      	bne.n	80084e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	2203      	movs	r2, #3
 800848c:	fa02 f303 	lsl.w	r3, r2, r3
 8008490:	43db      	mvns	r3, r3
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	4013      	ands	r3, r2
 8008496:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	005b      	lsls	r3, r3, #1
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80084b6:	2201      	movs	r2, #1
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	fa02 f303 	lsl.w	r3, r2, r3
 80084be:	43db      	mvns	r3, r3
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	4013      	ands	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	091b      	lsrs	r3, r3, #4
 80084cc:	f003 0201 	and.w	r2, r3, #1
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	fa02 f303 	lsl.w	r3, r2, r3
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	4313      	orrs	r3, r2
 80084da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d017      	beq.n	800851e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	2203      	movs	r2, #3
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	43db      	mvns	r3, r3
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	4013      	ands	r3, r2
 8008504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	fa02 f303 	lsl.w	r3, r2, r3
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	4313      	orrs	r3, r2
 8008516:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d123      	bne.n	8008572 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	08da      	lsrs	r2, r3, #3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3208      	adds	r2, #8
 8008532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	220f      	movs	r2, #15
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	4013      	ands	r3, r2
 800854c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	691a      	ldr	r2, [r3, #16]
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	f003 0307 	and.w	r3, r3, #7
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	4313      	orrs	r3, r2
 8008562:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	08da      	lsrs	r2, r3, #3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3208      	adds	r2, #8
 800856c:	69b9      	ldr	r1, [r7, #24]
 800856e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	2203      	movs	r2, #3
 800857e:	fa02 f303 	lsl.w	r3, r2, r3
 8008582:	43db      	mvns	r3, r3
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	4013      	ands	r3, r2
 8008588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f003 0203 	and.w	r2, r3, #3
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	fa02 f303 	lsl.w	r3, r2, r3
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	4313      	orrs	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 80e0 	beq.w	8008774 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085b4:	4b2f      	ldr	r3, [pc, #188]	; (8008674 <HAL_GPIO_Init+0x238>)
 80085b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085ba:	4a2e      	ldr	r2, [pc, #184]	; (8008674 <HAL_GPIO_Init+0x238>)
 80085bc:	f043 0302 	orr.w	r3, r3, #2
 80085c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80085c4:	4b2b      	ldr	r3, [pc, #172]	; (8008674 <HAL_GPIO_Init+0x238>)
 80085c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085d2:	4a29      	ldr	r2, [pc, #164]	; (8008678 <HAL_GPIO_Init+0x23c>)
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	089b      	lsrs	r3, r3, #2
 80085d8:	3302      	adds	r3, #2
 80085da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	220f      	movs	r2, #15
 80085ea:	fa02 f303 	lsl.w	r3, r2, r3
 80085ee:	43db      	mvns	r3, r3
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	4013      	ands	r3, r2
 80085f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a20      	ldr	r2, [pc, #128]	; (800867c <HAL_GPIO_Init+0x240>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d052      	beq.n	80086a4 <HAL_GPIO_Init+0x268>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a1f      	ldr	r2, [pc, #124]	; (8008680 <HAL_GPIO_Init+0x244>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d031      	beq.n	800866a <HAL_GPIO_Init+0x22e>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a1e      	ldr	r2, [pc, #120]	; (8008684 <HAL_GPIO_Init+0x248>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d02b      	beq.n	8008666 <HAL_GPIO_Init+0x22a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a1d      	ldr	r2, [pc, #116]	; (8008688 <HAL_GPIO_Init+0x24c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d025      	beq.n	8008662 <HAL_GPIO_Init+0x226>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a1c      	ldr	r2, [pc, #112]	; (800868c <HAL_GPIO_Init+0x250>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d01f      	beq.n	800865e <HAL_GPIO_Init+0x222>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a1b      	ldr	r2, [pc, #108]	; (8008690 <HAL_GPIO_Init+0x254>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d019      	beq.n	800865a <HAL_GPIO_Init+0x21e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a1a      	ldr	r2, [pc, #104]	; (8008694 <HAL_GPIO_Init+0x258>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d013      	beq.n	8008656 <HAL_GPIO_Init+0x21a>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a19      	ldr	r2, [pc, #100]	; (8008698 <HAL_GPIO_Init+0x25c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00d      	beq.n	8008652 <HAL_GPIO_Init+0x216>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a18      	ldr	r2, [pc, #96]	; (800869c <HAL_GPIO_Init+0x260>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d007      	beq.n	800864e <HAL_GPIO_Init+0x212>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a17      	ldr	r2, [pc, #92]	; (80086a0 <HAL_GPIO_Init+0x264>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d101      	bne.n	800864a <HAL_GPIO_Init+0x20e>
 8008646:	2309      	movs	r3, #9
 8008648:	e02d      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 800864a:	230a      	movs	r3, #10
 800864c:	e02b      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 800864e:	2308      	movs	r3, #8
 8008650:	e029      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 8008652:	2307      	movs	r3, #7
 8008654:	e027      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 8008656:	2306      	movs	r3, #6
 8008658:	e025      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 800865a:	2305      	movs	r3, #5
 800865c:	e023      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 800865e:	2304      	movs	r3, #4
 8008660:	e021      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 8008662:	2303      	movs	r3, #3
 8008664:	e01f      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 8008666:	2302      	movs	r3, #2
 8008668:	e01d      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 800866a:	2301      	movs	r3, #1
 800866c:	e01b      	b.n	80086a6 <HAL_GPIO_Init+0x26a>
 800866e:	bf00      	nop
 8008670:	58000080 	.word	0x58000080
 8008674:	58024400 	.word	0x58024400
 8008678:	58000400 	.word	0x58000400
 800867c:	58020000 	.word	0x58020000
 8008680:	58020400 	.word	0x58020400
 8008684:	58020800 	.word	0x58020800
 8008688:	58020c00 	.word	0x58020c00
 800868c:	58021000 	.word	0x58021000
 8008690:	58021400 	.word	0x58021400
 8008694:	58021800 	.word	0x58021800
 8008698:	58021c00 	.word	0x58021c00
 800869c:	58022000 	.word	0x58022000
 80086a0:	58022400 	.word	0x58022400
 80086a4:	2300      	movs	r3, #0
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	f002 0203 	and.w	r2, r2, #3
 80086ac:	0092      	lsls	r2, r2, #2
 80086ae:	4093      	lsls	r3, r2
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086b6:	4938      	ldr	r1, [pc, #224]	; (8008798 <HAL_GPIO_Init+0x35c>)
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	089b      	lsrs	r3, r3, #2
 80086bc:	3302      	adds	r3, #2
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80086c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	43db      	mvns	r3, r3
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	4013      	ands	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80086ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80086f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	43db      	mvns	r3, r3
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	4013      	ands	r3, r2
 8008702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	4313      	orrs	r3, r2
 8008716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	43db      	mvns	r3, r3
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	4013      	ands	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	4313      	orrs	r3, r2
 8008742:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	43db      	mvns	r3, r3
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	4013      	ands	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	3301      	adds	r3, #1
 8008778:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	fa22 f303 	lsr.w	r3, r2, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	f47f ae63 	bne.w	8008450 <HAL_GPIO_Init+0x14>
  }
}
 800878a:	bf00      	nop
 800878c:	bf00      	nop
 800878e:	3724      	adds	r7, #36	; 0x24
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	58000400 	.word	0x58000400

0800879c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691a      	ldr	r2, [r3, #16]
 80087ac:	887b      	ldrh	r3, [r7, #2]
 80087ae:	4013      	ands	r3, r2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087b4:	2301      	movs	r3, #1
 80087b6:	73fb      	strb	r3, [r7, #15]
 80087b8:	e001      	b.n	80087be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	807b      	strh	r3, [r7, #2]
 80087d8:	4613      	mov	r3, r2
 80087da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087dc:	787b      	ldrb	r3, [r7, #1]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087e2:	887a      	ldrh	r2, [r7, #2]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80087e8:	e003      	b.n	80087f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80087ea:	887b      	ldrh	r3, [r7, #2]
 80087ec:	041a      	lsls	r2, r3, #16
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	619a      	str	r2, [r3, #24]
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e08b      	b.n	800892a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7fa f938 	bl	8002a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2224      	movs	r2, #36	; 0x24
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0201 	bic.w	r2, r2, #1
 8008842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d107      	bne.n	800887a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689a      	ldr	r2, [r3, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008876:	609a      	str	r2, [r3, #8]
 8008878:	e006      	b.n	8008888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689a      	ldr	r2, [r3, #8]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d108      	bne.n	80088a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800889e:	605a      	str	r2, [r3, #4]
 80088a0:	e007      	b.n	80088b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6859      	ldr	r1, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <HAL_I2C_Init+0x134>)
 80088be:	430b      	orrs	r3, r1
 80088c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691a      	ldr	r2, [r3, #16]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	69d9      	ldr	r1, [r3, #28]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a1a      	ldr	r2, [r3, #32]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0201 	orr.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	02008000 	.word	0x02008000

08008938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b20      	cmp	r3, #32
 800894c:	d138      	bne.n	80089c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008958:	2302      	movs	r3, #2
 800895a:	e032      	b.n	80089c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2224      	movs	r2, #36	; 0x24
 8008968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0201 	bic.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800898a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6819      	ldr	r1, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f042 0201 	orr.w	r2, r2, #1
 80089aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	e000      	b.n	80089c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089c0:	2302      	movs	r3, #2
  }
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	d139      	bne.n	8008a58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80089ee:	2302      	movs	r3, #2
 80089f0:	e033      	b.n	8008a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2224      	movs	r2, #36	; 0x24
 80089fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 0201 	bic.w	r2, r2, #1
 8008a10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	021b      	lsls	r3, r3, #8
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0201 	orr.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	e000      	b.n	8008a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a58:	2302      	movs	r3, #2
  }
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
	...

08008a68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a70:	4b19      	ldr	r3, [pc, #100]	; (8008ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d00a      	beq.n	8008a92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a7c:	4b16      	ldr	r3, [pc, #88]	; (8008ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d001      	beq.n	8008a8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e01f      	b.n	8008ace <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e01d      	b.n	8008ace <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a92:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f023 0207 	bic.w	r2, r3, #7
 8008a9a:	490f      	ldr	r1, [pc, #60]	; (8008ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008aa2:	f7fa fd67 	bl	8003574 <HAL_GetTick>
 8008aa6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008aa8:	e009      	b.n	8008abe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008aaa:	f7fa fd63 	bl	8003574 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ab8:	d901      	bls.n	8008abe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e007      	b.n	8008ace <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008abe:	4b06      	ldr	r3, [pc, #24]	; (8008ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aca:	d1ee      	bne.n	8008aaa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	58024800 	.word	0x58024800

08008adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08c      	sub	sp, #48	; 0x30
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f000 bc48 	b.w	8009380 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 8088 	beq.w	8008c0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008afe:	4b99      	ldr	r3, [pc, #612]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b08:	4b96      	ldr	r3, [pc, #600]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	d007      	beq.n	8008b24 <HAL_RCC_OscConfig+0x48>
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	2b18      	cmp	r3, #24
 8008b18:	d111      	bne.n	8008b3e <HAL_RCC_OscConfig+0x62>
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d10c      	bne.n	8008b3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b24:	4b8f      	ldr	r3, [pc, #572]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d06d      	beq.n	8008c0c <HAL_RCC_OscConfig+0x130>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d169      	bne.n	8008c0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f000 bc21 	b.w	8009380 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b46:	d106      	bne.n	8008b56 <HAL_RCC_OscConfig+0x7a>
 8008b48:	4b86      	ldr	r3, [pc, #536]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a85      	ldr	r2, [pc, #532]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	e02e      	b.n	8008bb4 <HAL_RCC_OscConfig+0xd8>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10c      	bne.n	8008b78 <HAL_RCC_OscConfig+0x9c>
 8008b5e:	4b81      	ldr	r3, [pc, #516]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a80      	ldr	r2, [pc, #512]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	4b7e      	ldr	r3, [pc, #504]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a7d      	ldr	r2, [pc, #500]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	e01d      	b.n	8008bb4 <HAL_RCC_OscConfig+0xd8>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b80:	d10c      	bne.n	8008b9c <HAL_RCC_OscConfig+0xc0>
 8008b82:	4b78      	ldr	r3, [pc, #480]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a77      	ldr	r2, [pc, #476]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	4b75      	ldr	r3, [pc, #468]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a74      	ldr	r2, [pc, #464]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	e00b      	b.n	8008bb4 <HAL_RCC_OscConfig+0xd8>
 8008b9c:	4b71      	ldr	r3, [pc, #452]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a70      	ldr	r2, [pc, #448]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	4b6e      	ldr	r3, [pc, #440]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a6d      	ldr	r2, [pc, #436]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d013      	beq.n	8008be4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bbc:	f7fa fcda 	bl	8003574 <HAL_GetTick>
 8008bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bc4:	f7fa fcd6 	bl	8003574 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b64      	cmp	r3, #100	; 0x64
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e3d4      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bd6:	4b63      	ldr	r3, [pc, #396]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0f0      	beq.n	8008bc4 <HAL_RCC_OscConfig+0xe8>
 8008be2:	e014      	b.n	8008c0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be4:	f7fa fcc6 	bl	8003574 <HAL_GetTick>
 8008be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bec:	f7fa fcc2 	bl	8003574 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b64      	cmp	r3, #100	; 0x64
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e3c0      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bfe:	4b59      	ldr	r3, [pc, #356]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f0      	bne.n	8008bec <HAL_RCC_OscConfig+0x110>
 8008c0a:	e000      	b.n	8008c0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80ca 	beq.w	8008db0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c1c:	4b51      	ldr	r3, [pc, #324]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c26:	4b4f      	ldr	r3, [pc, #316]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d007      	beq.n	8008c42 <HAL_RCC_OscConfig+0x166>
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	2b18      	cmp	r3, #24
 8008c36:	d156      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x20a>
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d151      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c42:	4b48      	ldr	r3, [pc, #288]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d005      	beq.n	8008c5a <HAL_RCC_OscConfig+0x17e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e392      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c5a:	4b42      	ldr	r3, [pc, #264]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f023 0219 	bic.w	r2, r3, #25
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	493f      	ldr	r1, [pc, #252]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c6c:	f7fa fc82 	bl	8003574 <HAL_GetTick>
 8008c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c72:	e008      	b.n	8008c86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c74:	f7fa fc7e 	bl	8003574 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e37c      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c86:	4b37      	ldr	r3, [pc, #220]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0f0      	beq.n	8008c74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c92:	f7fa fc7b 	bl	800358c <HAL_GetREVID>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f241 0203 	movw	r2, #4099	; 0x1003
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d817      	bhi.n	8008cd0 <HAL_RCC_OscConfig+0x1f4>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b40      	cmp	r3, #64	; 0x40
 8008ca6:	d108      	bne.n	8008cba <HAL_RCC_OscConfig+0x1de>
 8008ca8:	4b2e      	ldr	r3, [pc, #184]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008cb0:	4a2c      	ldr	r2, [pc, #176]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cb8:	e07a      	b.n	8008db0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cba:	4b2a      	ldr	r3, [pc, #168]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	031b      	lsls	r3, r3, #12
 8008cc8:	4926      	ldr	r1, [pc, #152]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cce:	e06f      	b.n	8008db0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cd0:	4b24      	ldr	r3, [pc, #144]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	061b      	lsls	r3, r3, #24
 8008cde:	4921      	ldr	r1, [pc, #132]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ce4:	e064      	b.n	8008db0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d047      	beq.n	8008d7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cee:	4b1d      	ldr	r3, [pc, #116]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f023 0219 	bic.w	r2, r3, #25
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	491a      	ldr	r1, [pc, #104]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d00:	f7fa fc38 	bl	8003574 <HAL_GetTick>
 8008d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d06:	e008      	b.n	8008d1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d08:	f7fa fc34 	bl	8003574 <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e332      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d1a:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0f0      	beq.n	8008d08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d26:	f7fa fc31 	bl	800358c <HAL_GetREVID>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d819      	bhi.n	8008d68 <HAL_RCC_OscConfig+0x28c>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b40      	cmp	r3, #64	; 0x40
 8008d3a:	d108      	bne.n	8008d4e <HAL_RCC_OscConfig+0x272>
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d44:	4a07      	ldr	r2, [pc, #28]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4a:	6053      	str	r3, [r2, #4]
 8008d4c:	e030      	b.n	8008db0 <HAL_RCC_OscConfig+0x2d4>
 8008d4e:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	031b      	lsls	r3, r3, #12
 8008d5c:	4901      	ldr	r1, [pc, #4]	; (8008d64 <HAL_RCC_OscConfig+0x288>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	604b      	str	r3, [r1, #4]
 8008d62:	e025      	b.n	8008db0 <HAL_RCC_OscConfig+0x2d4>
 8008d64:	58024400 	.word	0x58024400
 8008d68:	4b9a      	ldr	r3, [pc, #616]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	061b      	lsls	r3, r3, #24
 8008d76:	4997      	ldr	r1, [pc, #604]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	604b      	str	r3, [r1, #4]
 8008d7c:	e018      	b.n	8008db0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d7e:	4b95      	ldr	r3, [pc, #596]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a94      	ldr	r2, [pc, #592]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d8a:	f7fa fbf3 	bl	8003574 <HAL_GetTick>
 8008d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d90:	e008      	b.n	8008da4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d92:	f7fa fbef 	bl	8003574 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d901      	bls.n	8008da4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e2ed      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008da4:	4b8b      	ldr	r3, [pc, #556]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1f0      	bne.n	8008d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 80a9 	beq.w	8008f10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dbe:	4b85      	ldr	r3, [pc, #532]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dc8:	4b82      	ldr	r3, [pc, #520]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dcc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d007      	beq.n	8008de4 <HAL_RCC_OscConfig+0x308>
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	2b18      	cmp	r3, #24
 8008dd8:	d13a      	bne.n	8008e50 <HAL_RCC_OscConfig+0x374>
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f003 0303 	and.w	r3, r3, #3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d135      	bne.n	8008e50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008de4:	4b7b      	ldr	r3, [pc, #492]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d005      	beq.n	8008dfc <HAL_RCC_OscConfig+0x320>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	69db      	ldr	r3, [r3, #28]
 8008df4:	2b80      	cmp	r3, #128	; 0x80
 8008df6:	d001      	beq.n	8008dfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e2c1      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008dfc:	f7fa fbc6 	bl	800358c <HAL_GetREVID>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d817      	bhi.n	8008e3a <HAL_RCC_OscConfig+0x35e>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d108      	bne.n	8008e24 <HAL_RCC_OscConfig+0x348>
 8008e12:	4b70      	ldr	r3, [pc, #448]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008e1a:	4a6e      	ldr	r2, [pc, #440]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008e1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e22:	e075      	b.n	8008f10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e24:	4b6b      	ldr	r3, [pc, #428]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	069b      	lsls	r3, r3, #26
 8008e32:	4968      	ldr	r1, [pc, #416]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e38:	e06a      	b.n	8008f10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e3a:	4b66      	ldr	r3, [pc, #408]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	061b      	lsls	r3, r3, #24
 8008e48:	4962      	ldr	r1, [pc, #392]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e4e:	e05f      	b.n	8008f10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d042      	beq.n	8008ede <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008e58:	4b5e      	ldr	r3, [pc, #376]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a5d      	ldr	r2, [pc, #372]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e64:	f7fa fb86 	bl	8003574 <HAL_GetTick>
 8008e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008e6c:	f7fa fb82 	bl	8003574 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e280      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e7e:	4b55      	ldr	r3, [pc, #340]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0f0      	beq.n	8008e6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e8a:	f7fa fb7f 	bl	800358c <HAL_GetREVID>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d817      	bhi.n	8008ec8 <HAL_RCC_OscConfig+0x3ec>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	2b20      	cmp	r3, #32
 8008e9e:	d108      	bne.n	8008eb2 <HAL_RCC_OscConfig+0x3d6>
 8008ea0:	4b4c      	ldr	r3, [pc, #304]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ea8:	4a4a      	ldr	r2, [pc, #296]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eae:	6053      	str	r3, [r2, #4]
 8008eb0:	e02e      	b.n	8008f10 <HAL_RCC_OscConfig+0x434>
 8008eb2:	4b48      	ldr	r3, [pc, #288]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	069b      	lsls	r3, r3, #26
 8008ec0:	4944      	ldr	r1, [pc, #272]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	604b      	str	r3, [r1, #4]
 8008ec6:	e023      	b.n	8008f10 <HAL_RCC_OscConfig+0x434>
 8008ec8:	4b42      	ldr	r3, [pc, #264]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	061b      	lsls	r3, r3, #24
 8008ed6:	493f      	ldr	r1, [pc, #252]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60cb      	str	r3, [r1, #12]
 8008edc:	e018      	b.n	8008f10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008ede:	4b3d      	ldr	r3, [pc, #244]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a3c      	ldr	r2, [pc, #240]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eea:	f7fa fb43 	bl	8003574 <HAL_GetTick>
 8008eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ef0:	e008      	b.n	8008f04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008ef2:	f7fa fb3f 	bl	8003574 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d901      	bls.n	8008f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e23d      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f04:	4b33      	ldr	r3, [pc, #204]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1f0      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0308 	and.w	r3, r3, #8
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d036      	beq.n	8008f8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d019      	beq.n	8008f58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f24:	4b2b      	ldr	r3, [pc, #172]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f28:	4a2a      	ldr	r2, [pc, #168]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008f2a:	f043 0301 	orr.w	r3, r3, #1
 8008f2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f30:	f7fa fb20 	bl	8003574 <HAL_GetTick>
 8008f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f38:	f7fa fb1c 	bl	8003574 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e21a      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f4a:	4b22      	ldr	r3, [pc, #136]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0f0      	beq.n	8008f38 <HAL_RCC_OscConfig+0x45c>
 8008f56:	e018      	b.n	8008f8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f58:	4b1e      	ldr	r3, [pc, #120]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5c:	4a1d      	ldr	r2, [pc, #116]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008f5e:	f023 0301 	bic.w	r3, r3, #1
 8008f62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f64:	f7fa fb06 	bl	8003574 <HAL_GetTick>
 8008f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f6a:	e008      	b.n	8008f7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f6c:	f7fa fb02 	bl	8003574 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e200      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f7e:	4b15      	ldr	r3, [pc, #84]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1f0      	bne.n	8008f6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0320 	and.w	r3, r3, #32
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d039      	beq.n	800900a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d01c      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a0c      	ldr	r2, [pc, #48]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fa8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008faa:	f7fa fae3 	bl	8003574 <HAL_GetTick>
 8008fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fb0:	e008      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fb2:	f7fa fadf 	bl	8003574 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d901      	bls.n	8008fc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e1dd      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fc4:	4b03      	ldr	r3, [pc, #12]	; (8008fd4 <HAL_RCC_OscConfig+0x4f8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d0f0      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x4d6>
 8008fd0:	e01b      	b.n	800900a <HAL_RCC_OscConfig+0x52e>
 8008fd2:	bf00      	nop
 8008fd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fd8:	4b9b      	ldr	r3, [pc, #620]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a9a      	ldr	r2, [pc, #616]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8008fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fe2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fe4:	f7fa fac6 	bl	8003574 <HAL_GetTick>
 8008fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fea:	e008      	b.n	8008ffe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fec:	f7fa fac2 	bl	8003574 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d901      	bls.n	8008ffe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e1c0      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ffe:	4b92      	ldr	r3, [pc, #584]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1f0      	bne.n	8008fec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0304 	and.w	r3, r3, #4
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 8081 	beq.w	800911a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009018:	4b8c      	ldr	r3, [pc, #560]	; (800924c <HAL_RCC_OscConfig+0x770>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a8b      	ldr	r2, [pc, #556]	; (800924c <HAL_RCC_OscConfig+0x770>)
 800901e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009024:	f7fa faa6 	bl	8003574 <HAL_GetTick>
 8009028:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800902c:	f7fa faa2 	bl	8003574 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b64      	cmp	r3, #100	; 0x64
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e1a0      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800903e:	4b83      	ldr	r3, [pc, #524]	; (800924c <HAL_RCC_OscConfig+0x770>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0f0      	beq.n	800902c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d106      	bne.n	8009060 <HAL_RCC_OscConfig+0x584>
 8009052:	4b7d      	ldr	r3, [pc, #500]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009056:	4a7c      	ldr	r2, [pc, #496]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009058:	f043 0301 	orr.w	r3, r3, #1
 800905c:	6713      	str	r3, [r2, #112]	; 0x70
 800905e:	e02d      	b.n	80090bc <HAL_RCC_OscConfig+0x5e0>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10c      	bne.n	8009082 <HAL_RCC_OscConfig+0x5a6>
 8009068:	4b77      	ldr	r3, [pc, #476]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 800906a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906c:	4a76      	ldr	r2, [pc, #472]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 800906e:	f023 0301 	bic.w	r3, r3, #1
 8009072:	6713      	str	r3, [r2, #112]	; 0x70
 8009074:	4b74      	ldr	r3, [pc, #464]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009078:	4a73      	ldr	r2, [pc, #460]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 800907a:	f023 0304 	bic.w	r3, r3, #4
 800907e:	6713      	str	r3, [r2, #112]	; 0x70
 8009080:	e01c      	b.n	80090bc <HAL_RCC_OscConfig+0x5e0>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	2b05      	cmp	r3, #5
 8009088:	d10c      	bne.n	80090a4 <HAL_RCC_OscConfig+0x5c8>
 800908a:	4b6f      	ldr	r3, [pc, #444]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 800908c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908e:	4a6e      	ldr	r2, [pc, #440]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009090:	f043 0304 	orr.w	r3, r3, #4
 8009094:	6713      	str	r3, [r2, #112]	; 0x70
 8009096:	4b6c      	ldr	r3, [pc, #432]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800909a:	4a6b      	ldr	r2, [pc, #428]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 800909c:	f043 0301 	orr.w	r3, r3, #1
 80090a0:	6713      	str	r3, [r2, #112]	; 0x70
 80090a2:	e00b      	b.n	80090bc <HAL_RCC_OscConfig+0x5e0>
 80090a4:	4b68      	ldr	r3, [pc, #416]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80090a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a8:	4a67      	ldr	r2, [pc, #412]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80090aa:	f023 0301 	bic.w	r3, r3, #1
 80090ae:	6713      	str	r3, [r2, #112]	; 0x70
 80090b0:	4b65      	ldr	r3, [pc, #404]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80090b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b4:	4a64      	ldr	r2, [pc, #400]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80090b6:	f023 0304 	bic.w	r3, r3, #4
 80090ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d015      	beq.n	80090f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c4:	f7fa fa56 	bl	8003574 <HAL_GetTick>
 80090c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090ca:	e00a      	b.n	80090e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090cc:	f7fa fa52 	bl	8003574 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090da:	4293      	cmp	r3, r2
 80090dc:	d901      	bls.n	80090e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e14e      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090e2:	4b59      	ldr	r3, [pc, #356]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80090e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0ee      	beq.n	80090cc <HAL_RCC_OscConfig+0x5f0>
 80090ee:	e014      	b.n	800911a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f0:	f7fa fa40 	bl	8003574 <HAL_GetTick>
 80090f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090f6:	e00a      	b.n	800910e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090f8:	f7fa fa3c 	bl	8003574 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	f241 3288 	movw	r2, #5000	; 0x1388
 8009106:	4293      	cmp	r3, r2
 8009108:	d901      	bls.n	800910e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e138      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800910e:	4b4e      	ldr	r3, [pc, #312]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1ee      	bne.n	80090f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 812d 	beq.w	800937e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009124:	4b48      	ldr	r3, [pc, #288]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800912c:	2b18      	cmp	r3, #24
 800912e:	f000 80bd 	beq.w	80092ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	2b02      	cmp	r3, #2
 8009138:	f040 809e 	bne.w	8009278 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800913c:	4b42      	ldr	r3, [pc, #264]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a41      	ldr	r2, [pc, #260]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009148:	f7fa fa14 	bl	8003574 <HAL_GetTick>
 800914c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800914e:	e008      	b.n	8009162 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009150:	f7fa fa10 	bl	8003574 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d901      	bls.n	8009162 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e10e      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009162:	4b39      	ldr	r3, [pc, #228]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1f0      	bne.n	8009150 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800916e:	4b36      	ldr	r3, [pc, #216]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009172:	4b37      	ldr	r3, [pc, #220]	; (8009250 <HAL_RCC_OscConfig+0x774>)
 8009174:	4013      	ands	r3, r2
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800917e:	0112      	lsls	r2, r2, #4
 8009180:	430a      	orrs	r2, r1
 8009182:	4931      	ldr	r1, [pc, #196]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009184:	4313      	orrs	r3, r2
 8009186:	628b      	str	r3, [r1, #40]	; 0x28
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918c:	3b01      	subs	r3, #1
 800918e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009196:	3b01      	subs	r3, #1
 8009198:	025b      	lsls	r3, r3, #9
 800919a:	b29b      	uxth	r3, r3
 800919c:	431a      	orrs	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	3b01      	subs	r3, #1
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b0:	3b01      	subs	r3, #1
 80091b2:	061b      	lsls	r3, r3, #24
 80091b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091b8:	4923      	ldr	r1, [pc, #140]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80091be:	4b22      	ldr	r3, [pc, #136]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80091c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c2:	4a21      	ldr	r2, [pc, #132]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80091c4:	f023 0301 	bic.w	r3, r3, #1
 80091c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091ca:	4b1f      	ldr	r3, [pc, #124]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80091cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ce:	4b21      	ldr	r3, [pc, #132]	; (8009254 <HAL_RCC_OscConfig+0x778>)
 80091d0:	4013      	ands	r3, r2
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80091d6:	00d2      	lsls	r2, r2, #3
 80091d8:	491b      	ldr	r1, [pc, #108]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091de:	4b1a      	ldr	r3, [pc, #104]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	f023 020c 	bic.w	r2, r3, #12
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ea:	4917      	ldr	r1, [pc, #92]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80091f0:	4b15      	ldr	r3, [pc, #84]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	f023 0202 	bic.w	r2, r3, #2
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fc:	4912      	ldr	r1, [pc, #72]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009202:	4b11      	ldr	r3, [pc, #68]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	4a10      	ldr	r2, [pc, #64]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800920c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800920e:	4b0e      	ldr	r3, [pc, #56]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	4a0d      	ldr	r2, [pc, #52]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009218:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800921a:	4b0b      	ldr	r3, [pc, #44]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	4a0a      	ldr	r2, [pc, #40]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009224:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009226:	4b08      	ldr	r3, [pc, #32]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	4a07      	ldr	r2, [pc, #28]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 800922c:	f043 0301 	orr.w	r3, r3, #1
 8009230:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009232:	4b05      	ldr	r3, [pc, #20]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a04      	ldr	r2, [pc, #16]	; (8009248 <HAL_RCC_OscConfig+0x76c>)
 8009238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800923c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800923e:	f7fa f999 	bl	8003574 <HAL_GetTick>
 8009242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009244:	e011      	b.n	800926a <HAL_RCC_OscConfig+0x78e>
 8009246:	bf00      	nop
 8009248:	58024400 	.word	0x58024400
 800924c:	58024800 	.word	0x58024800
 8009250:	fffffc0c 	.word	0xfffffc0c
 8009254:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009258:	f7fa f98c 	bl	8003574 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	2b02      	cmp	r3, #2
 8009264:	d901      	bls.n	800926a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e08a      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800926a:	4b47      	ldr	r3, [pc, #284]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0f0      	beq.n	8009258 <HAL_RCC_OscConfig+0x77c>
 8009276:	e082      	b.n	800937e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009278:	4b43      	ldr	r3, [pc, #268]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a42      	ldr	r2, [pc, #264]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 800927e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009284:	f7fa f976 	bl	8003574 <HAL_GetTick>
 8009288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800928a:	e008      	b.n	800929e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800928c:	f7fa f972 	bl	8003574 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	2b02      	cmp	r3, #2
 8009298:	d901      	bls.n	800929e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e070      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800929e:	4b3a      	ldr	r3, [pc, #232]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1f0      	bne.n	800928c <HAL_RCC_OscConfig+0x7b0>
 80092aa:	e068      	b.n	800937e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80092ac:	4b36      	ldr	r3, [pc, #216]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80092b2:	4b35      	ldr	r3, [pc, #212]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d031      	beq.n	8009324 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f003 0203 	and.w	r2, r3, #3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d12a      	bne.n	8009324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	091b      	lsrs	r3, r3, #4
 80092d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092da:	429a      	cmp	r2, r3
 80092dc:	d122      	bne.n	8009324 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d11a      	bne.n	8009324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	0a5b      	lsrs	r3, r3, #9
 80092f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d111      	bne.n	8009324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	0c1b      	lsrs	r3, r3, #16
 8009304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800930e:	429a      	cmp	r2, r3
 8009310:	d108      	bne.n	8009324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	0e1b      	lsrs	r3, r3, #24
 8009316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009320:	429a      	cmp	r2, r3
 8009322:	d001      	beq.n	8009328 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e02b      	b.n	8009380 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009328:	4b17      	ldr	r3, [pc, #92]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 800932a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932c:	08db      	lsrs	r3, r3, #3
 800932e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009332:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	429a      	cmp	r2, r3
 800933c:	d01f      	beq.n	800937e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	4a11      	ldr	r2, [pc, #68]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 8009344:	f023 0301 	bic.w	r3, r3, #1
 8009348:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800934a:	f7fa f913 	bl	8003574 <HAL_GetTick>
 800934e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009350:	bf00      	nop
 8009352:	f7fa f90f 	bl	8003574 <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	4293      	cmp	r3, r2
 800935c:	d0f9      	beq.n	8009352 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800935e:	4b0a      	ldr	r3, [pc, #40]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 8009360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009362:	4b0a      	ldr	r3, [pc, #40]	; (800938c <HAL_RCC_OscConfig+0x8b0>)
 8009364:	4013      	ands	r3, r2
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800936a:	00d2      	lsls	r2, r2, #3
 800936c:	4906      	ldr	r1, [pc, #24]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 800936e:	4313      	orrs	r3, r2
 8009370:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009372:	4b05      	ldr	r3, [pc, #20]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 8009374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009376:	4a04      	ldr	r2, [pc, #16]	; (8009388 <HAL_RCC_OscConfig+0x8ac>)
 8009378:	f043 0301 	orr.w	r3, r3, #1
 800937c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3730      	adds	r7, #48	; 0x30
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	58024400 	.word	0x58024400
 800938c:	ffff0007 	.word	0xffff0007

08009390 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e19c      	b.n	80096de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093a4:	4b8a      	ldr	r3, [pc, #552]	; (80095d0 <HAL_RCC_ClockConfig+0x240>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d910      	bls.n	80093d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093b2:	4b87      	ldr	r3, [pc, #540]	; (80095d0 <HAL_RCC_ClockConfig+0x240>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f023 020f 	bic.w	r2, r3, #15
 80093ba:	4985      	ldr	r1, [pc, #532]	; (80095d0 <HAL_RCC_ClockConfig+0x240>)
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	4313      	orrs	r3, r2
 80093c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093c2:	4b83      	ldr	r3, [pc, #524]	; (80095d0 <HAL_RCC_ClockConfig+0x240>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d001      	beq.n	80093d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e184      	b.n	80096de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d010      	beq.n	8009402 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	691a      	ldr	r2, [r3, #16]
 80093e4:	4b7b      	ldr	r3, [pc, #492]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d908      	bls.n	8009402 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093f0:	4b78      	ldr	r3, [pc, #480]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	4975      	ldr	r1, [pc, #468]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0308 	and.w	r3, r3, #8
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	695a      	ldr	r2, [r3, #20]
 8009412:	4b70      	ldr	r3, [pc, #448]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800941a:	429a      	cmp	r2, r3
 800941c:	d908      	bls.n	8009430 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800941e:	4b6d      	ldr	r3, [pc, #436]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	496a      	ldr	r1, [pc, #424]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 800942c:	4313      	orrs	r3, r2
 800942e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0310 	and.w	r3, r3, #16
 8009438:	2b00      	cmp	r3, #0
 800943a:	d010      	beq.n	800945e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	699a      	ldr	r2, [r3, #24]
 8009440:	4b64      	ldr	r3, [pc, #400]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009448:	429a      	cmp	r2, r3
 800944a:	d908      	bls.n	800945e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800944c:	4b61      	ldr	r3, [pc, #388]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	495e      	ldr	r1, [pc, #376]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 800945a:	4313      	orrs	r3, r2
 800945c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b00      	cmp	r3, #0
 8009468:	d010      	beq.n	800948c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69da      	ldr	r2, [r3, #28]
 800946e:	4b59      	ldr	r3, [pc, #356]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009476:	429a      	cmp	r2, r3
 8009478:	d908      	bls.n	800948c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800947a:	4b56      	ldr	r3, [pc, #344]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	4953      	ldr	r1, [pc, #332]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009488:	4313      	orrs	r3, r2
 800948a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d010      	beq.n	80094ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68da      	ldr	r2, [r3, #12]
 800949c:	4b4d      	ldr	r3, [pc, #308]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d908      	bls.n	80094ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094a8:	4b4a      	ldr	r3, [pc, #296]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	f023 020f 	bic.w	r2, r3, #15
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	4947      	ldr	r1, [pc, #284]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d055      	beq.n	8009572 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80094c6:	4b43      	ldr	r3, [pc, #268]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	4940      	ldr	r1, [pc, #256]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d107      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094e0:	4b3c      	ldr	r3, [pc, #240]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d121      	bne.n	8009530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e0f6      	b.n	80096de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d107      	bne.n	8009508 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094f8:	4b36      	ldr	r3, [pc, #216]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d115      	bne.n	8009530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e0ea      	b.n	80096de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d107      	bne.n	8009520 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009510:	4b30      	ldr	r3, [pc, #192]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009518:	2b00      	cmp	r3, #0
 800951a:	d109      	bne.n	8009530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e0de      	b.n	80096de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009520:	4b2c      	ldr	r3, [pc, #176]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e0d6      	b.n	80096de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009530:	4b28      	ldr	r3, [pc, #160]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f023 0207 	bic.w	r2, r3, #7
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	4925      	ldr	r1, [pc, #148]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 800953e:	4313      	orrs	r3, r2
 8009540:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009542:	f7fa f817 	bl	8003574 <HAL_GetTick>
 8009546:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009548:	e00a      	b.n	8009560 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800954a:	f7fa f813 	bl	8003574 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	f241 3288 	movw	r2, #5000	; 0x1388
 8009558:	4293      	cmp	r3, r2
 800955a:	d901      	bls.n	8009560 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e0be      	b.n	80096de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009560:	4b1c      	ldr	r3, [pc, #112]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	429a      	cmp	r2, r3
 8009570:	d1eb      	bne.n	800954a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d010      	beq.n	80095a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	4b14      	ldr	r3, [pc, #80]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	429a      	cmp	r2, r3
 800958c:	d208      	bcs.n	80095a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800958e:	4b11      	ldr	r3, [pc, #68]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	f023 020f 	bic.w	r2, r3, #15
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	490e      	ldr	r1, [pc, #56]	; (80095d4 <HAL_RCC_ClockConfig+0x244>)
 800959c:	4313      	orrs	r3, r2
 800959e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095a0:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <HAL_RCC_ClockConfig+0x240>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d214      	bcs.n	80095d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ae:	4b08      	ldr	r3, [pc, #32]	; (80095d0 <HAL_RCC_ClockConfig+0x240>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f023 020f 	bic.w	r2, r3, #15
 80095b6:	4906      	ldr	r1, [pc, #24]	; (80095d0 <HAL_RCC_ClockConfig+0x240>)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095be:	4b04      	ldr	r3, [pc, #16]	; (80095d0 <HAL_RCC_ClockConfig+0x240>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d005      	beq.n	80095d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e086      	b.n	80096de <HAL_RCC_ClockConfig+0x34e>
 80095d0:	52002000 	.word	0x52002000
 80095d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d010      	beq.n	8009606 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	691a      	ldr	r2, [r3, #16]
 80095e8:	4b3f      	ldr	r3, [pc, #252]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d208      	bcs.n	8009606 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095f4:	4b3c      	ldr	r3, [pc, #240]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	4939      	ldr	r1, [pc, #228]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 8009602:	4313      	orrs	r3, r2
 8009604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0308 	and.w	r3, r3, #8
 800960e:	2b00      	cmp	r3, #0
 8009610:	d010      	beq.n	8009634 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	695a      	ldr	r2, [r3, #20]
 8009616:	4b34      	ldr	r3, [pc, #208]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800961e:	429a      	cmp	r2, r3
 8009620:	d208      	bcs.n	8009634 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009622:	4b31      	ldr	r3, [pc, #196]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	492e      	ldr	r1, [pc, #184]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 8009630:	4313      	orrs	r3, r2
 8009632:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 0310 	and.w	r3, r3, #16
 800963c:	2b00      	cmp	r3, #0
 800963e:	d010      	beq.n	8009662 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	699a      	ldr	r2, [r3, #24]
 8009644:	4b28      	ldr	r3, [pc, #160]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800964c:	429a      	cmp	r2, r3
 800964e:	d208      	bcs.n	8009662 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009650:	4b25      	ldr	r3, [pc, #148]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	4922      	ldr	r1, [pc, #136]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 800965e:	4313      	orrs	r3, r2
 8009660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b00      	cmp	r3, #0
 800966c:	d010      	beq.n	8009690 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	69da      	ldr	r2, [r3, #28]
 8009672:	4b1d      	ldr	r3, [pc, #116]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800967a:	429a      	cmp	r2, r3
 800967c:	d208      	bcs.n	8009690 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800967e:	4b1a      	ldr	r3, [pc, #104]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	4917      	ldr	r1, [pc, #92]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 800968c:	4313      	orrs	r3, r2
 800968e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009690:	f000 f834 	bl	80096fc <HAL_RCC_GetSysClockFreq>
 8009694:	4602      	mov	r2, r0
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	0a1b      	lsrs	r3, r3, #8
 800969c:	f003 030f 	and.w	r3, r3, #15
 80096a0:	4912      	ldr	r1, [pc, #72]	; (80096ec <HAL_RCC_ClockConfig+0x35c>)
 80096a2:	5ccb      	ldrb	r3, [r1, r3]
 80096a4:	f003 031f 	and.w	r3, r3, #31
 80096a8:	fa22 f303 	lsr.w	r3, r2, r3
 80096ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80096ae:	4b0e      	ldr	r3, [pc, #56]	; (80096e8 <HAL_RCC_ClockConfig+0x358>)
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	f003 030f 	and.w	r3, r3, #15
 80096b6:	4a0d      	ldr	r2, [pc, #52]	; (80096ec <HAL_RCC_ClockConfig+0x35c>)
 80096b8:	5cd3      	ldrb	r3, [r2, r3]
 80096ba:	f003 031f 	and.w	r3, r3, #31
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
 80096c4:	4a0a      	ldr	r2, [pc, #40]	; (80096f0 <HAL_RCC_ClockConfig+0x360>)
 80096c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096c8:	4a0a      	ldr	r2, [pc, #40]	; (80096f4 <HAL_RCC_ClockConfig+0x364>)
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80096ce:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <HAL_RCC_ClockConfig+0x368>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f9 fc86 	bl	8002fe4 <HAL_InitTick>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	58024400 	.word	0x58024400
 80096ec:	0801549c 	.word	0x0801549c
 80096f0:	2400008c 	.word	0x2400008c
 80096f4:	24000088 	.word	0x24000088
 80096f8:	24000090 	.word	0x24000090

080096fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b089      	sub	sp, #36	; 0x24
 8009700:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009702:	4bb3      	ldr	r3, [pc, #716]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800970a:	2b18      	cmp	r3, #24
 800970c:	f200 8155 	bhi.w	80099ba <HAL_RCC_GetSysClockFreq+0x2be>
 8009710:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	0800977d 	.word	0x0800977d
 800971c:	080099bb 	.word	0x080099bb
 8009720:	080099bb 	.word	0x080099bb
 8009724:	080099bb 	.word	0x080099bb
 8009728:	080099bb 	.word	0x080099bb
 800972c:	080099bb 	.word	0x080099bb
 8009730:	080099bb 	.word	0x080099bb
 8009734:	080099bb 	.word	0x080099bb
 8009738:	080097a3 	.word	0x080097a3
 800973c:	080099bb 	.word	0x080099bb
 8009740:	080099bb 	.word	0x080099bb
 8009744:	080099bb 	.word	0x080099bb
 8009748:	080099bb 	.word	0x080099bb
 800974c:	080099bb 	.word	0x080099bb
 8009750:	080099bb 	.word	0x080099bb
 8009754:	080099bb 	.word	0x080099bb
 8009758:	080097a9 	.word	0x080097a9
 800975c:	080099bb 	.word	0x080099bb
 8009760:	080099bb 	.word	0x080099bb
 8009764:	080099bb 	.word	0x080099bb
 8009768:	080099bb 	.word	0x080099bb
 800976c:	080099bb 	.word	0x080099bb
 8009770:	080099bb 	.word	0x080099bb
 8009774:	080099bb 	.word	0x080099bb
 8009778:	080097af 	.word	0x080097af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800977c:	4b94      	ldr	r3, [pc, #592]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	d009      	beq.n	800979c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009788:	4b91      	ldr	r3, [pc, #580]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	08db      	lsrs	r3, r3, #3
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	4a90      	ldr	r2, [pc, #576]	; (80099d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009794:	fa22 f303 	lsr.w	r3, r2, r3
 8009798:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800979a:	e111      	b.n	80099c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800979c:	4b8d      	ldr	r3, [pc, #564]	; (80099d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800979e:	61bb      	str	r3, [r7, #24]
      break;
 80097a0:	e10e      	b.n	80099c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80097a2:	4b8d      	ldr	r3, [pc, #564]	; (80099d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80097a4:	61bb      	str	r3, [r7, #24]
      break;
 80097a6:	e10b      	b.n	80099c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80097a8:	4b8c      	ldr	r3, [pc, #560]	; (80099dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80097aa:	61bb      	str	r3, [r7, #24]
      break;
 80097ac:	e108      	b.n	80099c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097ae:	4b88      	ldr	r3, [pc, #544]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b2:	f003 0303 	and.w	r3, r3, #3
 80097b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80097b8:	4b85      	ldr	r3, [pc, #532]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097bc:	091b      	lsrs	r3, r3, #4
 80097be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80097c4:	4b82      	ldr	r3, [pc, #520]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097ce:	4b80      	ldr	r3, [pc, #512]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d2:	08db      	lsrs	r3, r3, #3
 80097d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	fb02 f303 	mul.w	r3, r2, r3
 80097de:	ee07 3a90 	vmov	s15, r3
 80097e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 80e1 	beq.w	80099b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	f000 8083 	beq.w	8009900 <HAL_RCC_GetSysClockFreq+0x204>
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	f200 80a1 	bhi.w	8009944 <HAL_RCC_GetSysClockFreq+0x248>
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <HAL_RCC_GetSysClockFreq+0x114>
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d056      	beq.n	80098bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800980e:	e099      	b.n	8009944 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009810:	4b6f      	ldr	r3, [pc, #444]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0320 	and.w	r3, r3, #32
 8009818:	2b00      	cmp	r3, #0
 800981a:	d02d      	beq.n	8009878 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800981c:	4b6c      	ldr	r3, [pc, #432]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	08db      	lsrs	r3, r3, #3
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	4a6b      	ldr	r2, [pc, #428]	; (80099d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
 800982c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	ee07 3a90 	vmov	s15, r3
 8009834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009846:	4b62      	ldr	r3, [pc, #392]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009856:	ed97 6a02 	vldr	s12, [r7, #8]
 800985a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80099e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800985e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800986a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800986e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009872:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009876:	e087      	b.n	8009988 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009882:	eddf 6a58 	vldr	s13, [pc, #352]	; 80099e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800988a:	4b51      	ldr	r3, [pc, #324]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009892:	ee07 3a90 	vmov	s15, r3
 8009896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800989a:	ed97 6a02 	vldr	s12, [r7, #8]
 800989e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80099e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80098ba:	e065      	b.n	8009988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80099e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80098ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ce:	4b40      	ldr	r3, [pc, #256]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098de:	ed97 6a02 	vldr	s12, [r7, #8]
 80098e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80099e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80098fe:	e043      	b.n	8009988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80099ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800990e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009912:	4b2f      	ldr	r3, [pc, #188]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800991a:	ee07 3a90 	vmov	s15, r3
 800991e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009922:	ed97 6a02 	vldr	s12, [r7, #8]
 8009926:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80099e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800992a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800993a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009942:	e021      	b.n	8009988 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80099e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009956:	4b1e      	ldr	r3, [pc, #120]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995e:	ee07 3a90 	vmov	s15, r3
 8009962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009966:	ed97 6a02 	vldr	s12, [r7, #8]
 800996a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80099e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800996e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800997a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009986:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009988:	4b11      	ldr	r3, [pc, #68]	; (80099d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800998a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998c:	0a5b      	lsrs	r3, r3, #9
 800998e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009992:	3301      	adds	r3, #1
 8009994:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	ee07 3a90 	vmov	s15, r3
 800999c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80099a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ac:	ee17 3a90 	vmov	r3, s15
 80099b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80099b2:	e005      	b.n	80099c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	61bb      	str	r3, [r7, #24]
      break;
 80099b8:	e002      	b.n	80099c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80099ba:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80099bc:	61bb      	str	r3, [r7, #24]
      break;
 80099be:	bf00      	nop
  }

  return sysclockfreq;
 80099c0:	69bb      	ldr	r3, [r7, #24]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3724      	adds	r7, #36	; 0x24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	58024400 	.word	0x58024400
 80099d4:	03d09000 	.word	0x03d09000
 80099d8:	003d0900 	.word	0x003d0900
 80099dc:	017d7840 	.word	0x017d7840
 80099e0:	46000000 	.word	0x46000000
 80099e4:	4c742400 	.word	0x4c742400
 80099e8:	4a742400 	.word	0x4a742400
 80099ec:	4bbebc20 	.word	0x4bbebc20

080099f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80099f6:	f7ff fe81 	bl	80096fc <HAL_RCC_GetSysClockFreq>
 80099fa:	4602      	mov	r2, r0
 80099fc:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <HAL_RCC_GetHCLKFreq+0x50>)
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	0a1b      	lsrs	r3, r3, #8
 8009a02:	f003 030f 	and.w	r3, r3, #15
 8009a06:	490f      	ldr	r1, [pc, #60]	; (8009a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a08:	5ccb      	ldrb	r3, [r1, r3]
 8009a0a:	f003 031f 	and.w	r3, r3, #31
 8009a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a14:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	f003 030f 	and.w	r3, r3, #15
 8009a1c:	4a09      	ldr	r2, [pc, #36]	; (8009a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a1e:	5cd3      	ldrb	r3, [r2, r3]
 8009a20:	f003 031f 	and.w	r3, r3, #31
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	fa22 f303 	lsr.w	r3, r2, r3
 8009a2a:	4a07      	ldr	r2, [pc, #28]	; (8009a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a2e:	4a07      	ldr	r2, [pc, #28]	; (8009a4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a34:	4b04      	ldr	r3, [pc, #16]	; (8009a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a36:	681b      	ldr	r3, [r3, #0]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	58024400 	.word	0x58024400
 8009a44:	0801549c 	.word	0x0801549c
 8009a48:	2400008c 	.word	0x2400008c
 8009a4c:	24000088 	.word	0x24000088

08009a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a54:	f7ff ffcc 	bl	80099f0 <HAL_RCC_GetHCLKFreq>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	4b06      	ldr	r3, [pc, #24]	; (8009a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	091b      	lsrs	r3, r3, #4
 8009a60:	f003 0307 	and.w	r3, r3, #7
 8009a64:	4904      	ldr	r1, [pc, #16]	; (8009a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a66:	5ccb      	ldrb	r3, [r1, r3]
 8009a68:	f003 031f 	and.w	r3, r3, #31
 8009a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	58024400 	.word	0x58024400
 8009a78:	0801549c 	.word	0x0801549c

08009a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a80:	f7ff ffb6 	bl	80099f0 <HAL_RCC_GetHCLKFreq>
 8009a84:	4602      	mov	r2, r0
 8009a86:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	f003 0307 	and.w	r3, r3, #7
 8009a90:	4904      	ldr	r1, [pc, #16]	; (8009aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a92:	5ccb      	ldrb	r3, [r1, r3]
 8009a94:	f003 031f 	and.w	r3, r3, #31
 8009a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	58024400 	.word	0x58024400
 8009aa4:	0801549c 	.word	0x0801549c

08009aa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	223f      	movs	r2, #63	; 0x3f
 8009ab6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009ab8:	4b1a      	ldr	r3, [pc, #104]	; (8009b24 <HAL_RCC_GetClockConfig+0x7c>)
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	f003 0207 	and.w	r2, r3, #7
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009ac4:	4b17      	ldr	r3, [pc, #92]	; (8009b24 <HAL_RCC_GetClockConfig+0x7c>)
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009ad0:	4b14      	ldr	r3, [pc, #80]	; (8009b24 <HAL_RCC_GetClockConfig+0x7c>)
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	f003 020f 	and.w	r2, r3, #15
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009adc:	4b11      	ldr	r3, [pc, #68]	; (8009b24 <HAL_RCC_GetClockConfig+0x7c>)
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009ae8:	4b0e      	ldr	r3, [pc, #56]	; (8009b24 <HAL_RCC_GetClockConfig+0x7c>)
 8009aea:	69db      	ldr	r3, [r3, #28]
 8009aec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009af4:	4b0b      	ldr	r3, [pc, #44]	; (8009b24 <HAL_RCC_GetClockConfig+0x7c>)
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009b00:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <HAL_RCC_GetClockConfig+0x7c>)
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009b0c:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <HAL_RCC_GetClockConfig+0x80>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 020f 	and.w	r2, r3, #15
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	601a      	str	r2, [r3, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	58024400 	.word	0x58024400
 8009b28:	52002000 	.word	0x52002000

08009b2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b30:	b0ca      	sub	sp, #296	; 0x128
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009b50:	2500      	movs	r5, #0
 8009b52:	ea54 0305 	orrs.w	r3, r4, r5
 8009b56:	d049      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b62:	d02f      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009b64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b68:	d828      	bhi.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b6e:	d01a      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009b70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b74:	d822      	bhi.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b7e:	d007      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b80:	e01c      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b82:	4bb8      	ldr	r3, [pc, #736]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	4ab7      	ldr	r2, [pc, #732]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009b8e:	e01a      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b94:	3308      	adds	r3, #8
 8009b96:	2102      	movs	r1, #2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f002 fb61 	bl	800c260 <RCCEx_PLL2_Config>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ba4:	e00f      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009baa:	3328      	adds	r3, #40	; 0x28
 8009bac:	2102      	movs	r1, #2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f002 fc08 	bl	800c3c4 <RCCEx_PLL3_Config>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009bba:	e004      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bc2:	e000      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009bce:	4ba5      	ldr	r3, [pc, #660]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bdc:	4aa1      	ldr	r2, [pc, #644]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bde:	430b      	orrs	r3, r1
 8009be0:	6513      	str	r3, [r2, #80]	; 0x50
 8009be2:	e003      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009be8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009bf8:	f04f 0900 	mov.w	r9, #0
 8009bfc:	ea58 0309 	orrs.w	r3, r8, r9
 8009c00:	d047      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	d82a      	bhi.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009c0c:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c29 	.word	0x08009c29
 8009c18:	08009c37 	.word	0x08009c37
 8009c1c:	08009c4d 	.word	0x08009c4d
 8009c20:	08009c6b 	.word	0x08009c6b
 8009c24:	08009c6b 	.word	0x08009c6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c28:	4b8e      	ldr	r3, [pc, #568]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	4a8d      	ldr	r2, [pc, #564]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c34:	e01a      	b.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f002 fb0e 	bl	800c260 <RCCEx_PLL2_Config>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c4a:	e00f      	b.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c50:	3328      	adds	r3, #40	; 0x28
 8009c52:	2100      	movs	r1, #0
 8009c54:	4618      	mov	r0, r3
 8009c56:	f002 fbb5 	bl	800c3c4 <RCCEx_PLL3_Config>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c60:	e004      	b.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c68:	e000      	b.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10a      	bne.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c74:	4b7b      	ldr	r3, [pc, #492]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c78:	f023 0107 	bic.w	r1, r3, #7
 8009c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c82:	4a78      	ldr	r2, [pc, #480]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c84:	430b      	orrs	r3, r1
 8009c86:	6513      	str	r3, [r2, #80]	; 0x50
 8009c88:	e003      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009c9e:	f04f 0b00 	mov.w	fp, #0
 8009ca2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ca6:	d04c      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb2:	d030      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb8:	d829      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009cba:	2bc0      	cmp	r3, #192	; 0xc0
 8009cbc:	d02d      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8009cc0:	d825      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009cc2:	2b80      	cmp	r3, #128	; 0x80
 8009cc4:	d018      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009cc6:	2b80      	cmp	r3, #128	; 0x80
 8009cc8:	d821      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009cce:	2b40      	cmp	r3, #64	; 0x40
 8009cd0:	d007      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009cd2:	e01c      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cd4:	4b63      	ldr	r3, [pc, #396]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd8:	4a62      	ldr	r2, [pc, #392]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009ce0:	e01c      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce6:	3308      	adds	r3, #8
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f002 fab8 	bl	800c260 <RCCEx_PLL2_Config>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009cf6:	e011      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfc:	3328      	adds	r3, #40	; 0x28
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f002 fb5f 	bl	800c3c4 <RCCEx_PLL3_Config>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d0c:	e006      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d14:	e002      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d16:	bf00      	nop
 8009d18:	e000      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009d24:	4b4f      	ldr	r3, [pc, #316]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d28:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d32:	4a4c      	ldr	r2, [pc, #304]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d34:	430b      	orrs	r3, r1
 8009d36:	6513      	str	r3, [r2, #80]	; 0x50
 8009d38:	e003      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009d4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d52:	2300      	movs	r3, #0
 8009d54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009d58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	d053      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d6e:	d035      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009d70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d74:	d82e      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009d76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d7a:	d031      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009d7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d80:	d828      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d86:	d01a      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d8c:	d822      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d96:	d007      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009d98:	e01c      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d9a:	4b32      	ldr	r3, [pc, #200]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	4a31      	ldr	r2, [pc, #196]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009da4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009da6:	e01c      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dac:	3308      	adds	r3, #8
 8009dae:	2100      	movs	r1, #0
 8009db0:	4618      	mov	r0, r3
 8009db2:	f002 fa55 	bl	800c260 <RCCEx_PLL2_Config>
 8009db6:	4603      	mov	r3, r0
 8009db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009dbc:	e011      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc2:	3328      	adds	r3, #40	; 0x28
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f002 fafc 	bl	800c3c4 <RCCEx_PLL3_Config>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009dd2:	e006      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dda:	e002      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ddc:	bf00      	nop
 8009dde:	e000      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10b      	bne.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009dea:	4b1e      	ldr	r3, [pc, #120]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dfa:	4a1a      	ldr	r2, [pc, #104]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dfc:	430b      	orrs	r3, r1
 8009dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8009e00:	e003      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009e16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009e24:	460b      	mov	r3, r1
 8009e26:	4313      	orrs	r3, r2
 8009e28:	d056      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e36:	d038      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e3c:	d831      	bhi.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e42:	d034      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009e44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e48:	d82b      	bhi.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e4e:	d01d      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009e50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e54:	d825      	bhi.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d006      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009e5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e5e:	d00a      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009e60:	e01f      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e62:	bf00      	nop
 8009e64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e68:	4ba2      	ldr	r3, [pc, #648]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6c:	4aa1      	ldr	r2, [pc, #644]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e74:	e01c      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f002 f9ee 	bl	800c260 <RCCEx_PLL2_Config>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e8a:	e011      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e90:	3328      	adds	r3, #40	; 0x28
 8009e92:	2100      	movs	r1, #0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 fa95 	bl	800c3c4 <RCCEx_PLL3_Config>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ea0:	e006      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ea8:	e002      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009eaa:	bf00      	nop
 8009eac:	e000      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10b      	bne.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009eb8:	4b8e      	ldr	r3, [pc, #568]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ebc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ec8:	4a8a      	ldr	r2, [pc, #552]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8009ece:	e003      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009eee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	d03a      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efe:	2b30      	cmp	r3, #48	; 0x30
 8009f00:	d01f      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009f02:	2b30      	cmp	r3, #48	; 0x30
 8009f04:	d819      	bhi.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f06:	2b20      	cmp	r3, #32
 8009f08:	d00c      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009f0a:	2b20      	cmp	r3, #32
 8009f0c:	d815      	bhi.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d019      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009f12:	2b10      	cmp	r3, #16
 8009f14:	d111      	bne.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f16:	4b77      	ldr	r3, [pc, #476]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1a:	4a76      	ldr	r2, [pc, #472]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009f22:	e011      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f28:	3308      	adds	r3, #8
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f002 f997 	bl	800c260 <RCCEx_PLL2_Config>
 8009f32:	4603      	mov	r3, r0
 8009f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009f38:	e006      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f40:	e002      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009f42:	bf00      	nop
 8009f44:	e000      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10a      	bne.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009f50:	4b68      	ldr	r3, [pc, #416]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5e:	4a65      	ldr	r2, [pc, #404]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f60:	430b      	orrs	r3, r1
 8009f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f64:	e003      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009f7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009f84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	d051      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f98:	d035      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f9e:	d82e      	bhi.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009fa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fa4:	d031      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009fa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009faa:	d828      	bhi.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb0:	d01a      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb6:	d822      	bhi.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc0:	d007      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009fc2:	e01c      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc4:	4b4b      	ldr	r3, [pc, #300]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	4a4a      	ldr	r2, [pc, #296]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009fd0:	e01c      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f002 f940 	bl	800c260 <RCCEx_PLL2_Config>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009fe6:	e011      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fec:	3328      	adds	r3, #40	; 0x28
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f002 f9e7 	bl	800c3c4 <RCCEx_PLL3_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ffc:	e006      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a004:	e002      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a006:	bf00      	nop
 800a008:	e000      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a00a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a00c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a014:	4b37      	ldr	r3, [pc, #220]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a018:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a022:	4a34      	ldr	r2, [pc, #208]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a024:	430b      	orrs	r3, r1
 800a026:	6513      	str	r3, [r2, #80]	; 0x50
 800a028:	e003      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a02a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a02e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a03e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a042:	2300      	movs	r3, #0
 800a044:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a048:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a04c:	460b      	mov	r3, r1
 800a04e:	4313      	orrs	r3, r2
 800a050:	d056      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a05c:	d033      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a05e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a062:	d82c      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a064:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a068:	d02f      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a06a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a06e:	d826      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a070:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a074:	d02b      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a076:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a07a:	d820      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a07c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a080:	d012      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a086:	d81a      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d022      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a08c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a090:	d115      	bne.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a096:	3308      	adds	r3, #8
 800a098:	2101      	movs	r1, #1
 800a09a:	4618      	mov	r0, r3
 800a09c:	f002 f8e0 	bl	800c260 <RCCEx_PLL2_Config>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a0a6:	e015      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ac:	3328      	adds	r3, #40	; 0x28
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f002 f987 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a0bc:	e00a      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0c4:	e006      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a0c6:	bf00      	nop
 800a0c8:	e004      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a0ca:	bf00      	nop
 800a0cc:	e002      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a0ce:	bf00      	nop
 800a0d0:	e000      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a0d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10d      	bne.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a0dc:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0ea:	4a02      	ldr	r2, [pc, #8]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0ec:	430b      	orrs	r3, r1
 800a0ee:	6513      	str	r3, [r2, #80]	; 0x50
 800a0f0:	e006      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a0f2:	bf00      	nop
 800a0f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a10c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a110:	2300      	movs	r3, #0
 800a112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a116:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4313      	orrs	r3, r2
 800a11e:	d055      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a12c:	d033      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a12e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a132:	d82c      	bhi.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a138:	d02f      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13e:	d826      	bhi.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a144:	d02b      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a14a:	d820      	bhi.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a14c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a150:	d012      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a156:	d81a      	bhi.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d022      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a15c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a160:	d115      	bne.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a166:	3308      	adds	r3, #8
 800a168:	2101      	movs	r1, #1
 800a16a:	4618      	mov	r0, r3
 800a16c:	f002 f878 	bl	800c260 <RCCEx_PLL2_Config>
 800a170:	4603      	mov	r3, r0
 800a172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a176:	e015      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17c:	3328      	adds	r3, #40	; 0x28
 800a17e:	2101      	movs	r1, #1
 800a180:	4618      	mov	r0, r3
 800a182:	f002 f91f 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a186:	4603      	mov	r3, r0
 800a188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a18c:	e00a      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a194:	e006      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a196:	bf00      	nop
 800a198:	e004      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a19a:	bf00      	nop
 800a19c:	e002      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a19e:	bf00      	nop
 800a1a0:	e000      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10b      	bne.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a1ac:	4ba3      	ldr	r3, [pc, #652]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1b0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1bc:	4a9f      	ldr	r2, [pc, #636]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1be:	430b      	orrs	r3, r1
 800a1c0:	6593      	str	r3, [r2, #88]	; 0x58
 800a1c2:	e003      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a1d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a1e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	d037      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1f6:	d00e      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a1f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1fc:	d816      	bhi.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d018      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a206:	d111      	bne.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a208:	4b8c      	ldr	r3, [pc, #560]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	4a8b      	ldr	r2, [pc, #556]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a20e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a214:	e00f      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a21a:	3308      	adds	r3, #8
 800a21c:	2101      	movs	r1, #1
 800a21e:	4618      	mov	r0, r3
 800a220:	f002 f81e 	bl	800c260 <RCCEx_PLL2_Config>
 800a224:	4603      	mov	r3, r0
 800a226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a22a:	e004      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a232:	e000      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a234:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a23e:	4b7f      	ldr	r3, [pc, #508]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a242:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24c:	4a7b      	ldr	r2, [pc, #492]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a24e:	430b      	orrs	r3, r1
 800a250:	6513      	str	r3, [r2, #80]	; 0x50
 800a252:	e003      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a258:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a26c:	2300      	movs	r3, #0
 800a26e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a272:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a276:	460b      	mov	r3, r1
 800a278:	4313      	orrs	r3, r2
 800a27a:	d039      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a282:	2b03      	cmp	r3, #3
 800a284:	d81c      	bhi.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a286:	a201      	add	r2, pc, #4	; (adr r2, 800a28c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28c:	0800a2c9 	.word	0x0800a2c9
 800a290:	0800a29d 	.word	0x0800a29d
 800a294:	0800a2ab 	.word	0x0800a2ab
 800a298:	0800a2c9 	.word	0x0800a2c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a29c:	4b67      	ldr	r3, [pc, #412]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	4a66      	ldr	r2, [pc, #408]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a2a8:	e00f      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	2102      	movs	r1, #2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f001 ffd4 	bl	800c260 <RCCEx_PLL2_Config>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a2be:	e004      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2c6:	e000      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a2c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a2d2:	4b5a      	ldr	r3, [pc, #360]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2d6:	f023 0103 	bic.w	r1, r3, #3
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2e0:	4a56      	ldr	r2, [pc, #344]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2e6:	e003      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a2fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a300:	2300      	movs	r3, #0
 800a302:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a306:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a30a:	460b      	mov	r3, r1
 800a30c:	4313      	orrs	r3, r2
 800a30e:	f000 809f 	beq.w	800a450 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a312:	4b4b      	ldr	r3, [pc, #300]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a4a      	ldr	r2, [pc, #296]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a31c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a31e:	f7f9 f929 	bl	8003574 <HAL_GetTick>
 800a322:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a326:	e00b      	b.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a328:	f7f9 f924 	bl	8003574 <HAL_GetTick>
 800a32c:	4602      	mov	r2, r0
 800a32e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	2b64      	cmp	r3, #100	; 0x64
 800a336:	d903      	bls.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a33e:	e005      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a340:	4b3f      	ldr	r3, [pc, #252]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0ed      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a34c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a350:	2b00      	cmp	r3, #0
 800a352:	d179      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a354:	4b39      	ldr	r3, [pc, #228]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a356:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a360:	4053      	eors	r3, r2
 800a362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a366:	2b00      	cmp	r3, #0
 800a368:	d015      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a36a:	4b34      	ldr	r3, [pc, #208]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a36e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a372:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a376:	4b31      	ldr	r3, [pc, #196]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37a:	4a30      	ldr	r2, [pc, #192]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a37c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a380:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a382:	4b2e      	ldr	r3, [pc, #184]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a386:	4a2d      	ldr	r2, [pc, #180]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a38c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a38e:	4a2b      	ldr	r2, [pc, #172]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a390:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a394:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a2:	d118      	bne.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3a4:	f7f9 f8e6 	bl	8003574 <HAL_GetTick>
 800a3a8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3ac:	e00d      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ae:	f7f9 f8e1 	bl	8003574 <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a3b8:	1ad2      	subs	r2, r2, r3
 800a3ba:	f241 3388 	movw	r3, #5000	; 0x1388
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d903      	bls.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a3c8:	e005      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3ca:	4b1c      	ldr	r3, [pc, #112]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ce:	f003 0302 	and.w	r3, r3, #2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0eb      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d129      	bne.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3ee:	d10e      	bne.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a3f0:	4b12      	ldr	r3, [pc, #72]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a400:	091a      	lsrs	r2, r3, #4
 800a402:	4b10      	ldr	r3, [pc, #64]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a404:	4013      	ands	r3, r2
 800a406:	4a0d      	ldr	r2, [pc, #52]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a408:	430b      	orrs	r3, r1
 800a40a:	6113      	str	r3, [r2, #16]
 800a40c:	e005      	b.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a40e:	4b0b      	ldr	r3, [pc, #44]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	4a0a      	ldr	r2, [pc, #40]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a414:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a418:	6113      	str	r3, [r2, #16]
 800a41a:	4b08      	ldr	r3, [pc, #32]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a41c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a41e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a42a:	4a04      	ldr	r2, [pc, #16]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a42c:	430b      	orrs	r3, r1
 800a42e:	6713      	str	r3, [r2, #112]	; 0x70
 800a430:	e00e      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a43a:	e009      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a43c:	58024400 	.word	0x58024400
 800a440:	58024800 	.word	0x58024800
 800a444:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a44c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f002 0301 	and.w	r3, r2, #1
 800a45c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a460:	2300      	movs	r3, #0
 800a462:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a466:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4313      	orrs	r3, r2
 800a46e:	f000 8089 	beq.w	800a584 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a478:	2b28      	cmp	r3, #40	; 0x28
 800a47a:	d86b      	bhi.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a47c:	a201      	add	r2, pc, #4	; (adr r2, 800a484 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a482:	bf00      	nop
 800a484:	0800a55d 	.word	0x0800a55d
 800a488:	0800a555 	.word	0x0800a555
 800a48c:	0800a555 	.word	0x0800a555
 800a490:	0800a555 	.word	0x0800a555
 800a494:	0800a555 	.word	0x0800a555
 800a498:	0800a555 	.word	0x0800a555
 800a49c:	0800a555 	.word	0x0800a555
 800a4a0:	0800a555 	.word	0x0800a555
 800a4a4:	0800a529 	.word	0x0800a529
 800a4a8:	0800a555 	.word	0x0800a555
 800a4ac:	0800a555 	.word	0x0800a555
 800a4b0:	0800a555 	.word	0x0800a555
 800a4b4:	0800a555 	.word	0x0800a555
 800a4b8:	0800a555 	.word	0x0800a555
 800a4bc:	0800a555 	.word	0x0800a555
 800a4c0:	0800a555 	.word	0x0800a555
 800a4c4:	0800a53f 	.word	0x0800a53f
 800a4c8:	0800a555 	.word	0x0800a555
 800a4cc:	0800a555 	.word	0x0800a555
 800a4d0:	0800a555 	.word	0x0800a555
 800a4d4:	0800a555 	.word	0x0800a555
 800a4d8:	0800a555 	.word	0x0800a555
 800a4dc:	0800a555 	.word	0x0800a555
 800a4e0:	0800a555 	.word	0x0800a555
 800a4e4:	0800a55d 	.word	0x0800a55d
 800a4e8:	0800a555 	.word	0x0800a555
 800a4ec:	0800a555 	.word	0x0800a555
 800a4f0:	0800a555 	.word	0x0800a555
 800a4f4:	0800a555 	.word	0x0800a555
 800a4f8:	0800a555 	.word	0x0800a555
 800a4fc:	0800a555 	.word	0x0800a555
 800a500:	0800a555 	.word	0x0800a555
 800a504:	0800a55d 	.word	0x0800a55d
 800a508:	0800a555 	.word	0x0800a555
 800a50c:	0800a555 	.word	0x0800a555
 800a510:	0800a555 	.word	0x0800a555
 800a514:	0800a555 	.word	0x0800a555
 800a518:	0800a555 	.word	0x0800a555
 800a51c:	0800a555 	.word	0x0800a555
 800a520:	0800a555 	.word	0x0800a555
 800a524:	0800a55d 	.word	0x0800a55d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a52c:	3308      	adds	r3, #8
 800a52e:	2101      	movs	r1, #1
 800a530:	4618      	mov	r0, r3
 800a532:	f001 fe95 	bl	800c260 <RCCEx_PLL2_Config>
 800a536:	4603      	mov	r3, r0
 800a538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a53c:	e00f      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a542:	3328      	adds	r3, #40	; 0x28
 800a544:	2101      	movs	r1, #1
 800a546:	4618      	mov	r0, r3
 800a548:	f001 ff3c 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a552:	e004      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a55a:	e000      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a55c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a55e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10a      	bne.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a566:	4bbf      	ldr	r3, [pc, #764]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a574:	4abb      	ldr	r2, [pc, #748]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a576:	430b      	orrs	r3, r1
 800a578:	6553      	str	r3, [r2, #84]	; 0x54
 800a57a:	e003      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a57c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a580:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f002 0302 	and.w	r3, r2, #2
 800a590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a594:	2300      	movs	r3, #0
 800a596:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a59a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	d041      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5aa:	2b05      	cmp	r3, #5
 800a5ac:	d824      	bhi.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a5ae:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a601 	.word	0x0800a601
 800a5b8:	0800a5cd 	.word	0x0800a5cd
 800a5bc:	0800a5e3 	.word	0x0800a5e3
 800a5c0:	0800a601 	.word	0x0800a601
 800a5c4:	0800a601 	.word	0x0800a601
 800a5c8:	0800a601 	.word	0x0800a601
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 fe43 	bl	800c260 <RCCEx_PLL2_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a5e0:	e00f      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e6:	3328      	adds	r3, #40	; 0x28
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 feea 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a5f6:	e004      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5fe:	e000      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a600:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10a      	bne.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a60a:	4b96      	ldr	r3, [pc, #600]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60e:	f023 0107 	bic.w	r1, r3, #7
 800a612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a618:	4a92      	ldr	r2, [pc, #584]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a61a:	430b      	orrs	r3, r1
 800a61c:	6553      	str	r3, [r2, #84]	; 0x54
 800a61e:	e003      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a620:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a624:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	f002 0304 	and.w	r3, r2, #4
 800a634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a638:	2300      	movs	r3, #0
 800a63a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a63e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a642:	460b      	mov	r3, r1
 800a644:	4313      	orrs	r3, r2
 800a646:	d044      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a64c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a650:	2b05      	cmp	r3, #5
 800a652:	d825      	bhi.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a654:	a201      	add	r2, pc, #4	; (adr r2, 800a65c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65a:	bf00      	nop
 800a65c:	0800a6a9 	.word	0x0800a6a9
 800a660:	0800a675 	.word	0x0800a675
 800a664:	0800a68b 	.word	0x0800a68b
 800a668:	0800a6a9 	.word	0x0800a6a9
 800a66c:	0800a6a9 	.word	0x0800a6a9
 800a670:	0800a6a9 	.word	0x0800a6a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a678:	3308      	adds	r3, #8
 800a67a:	2101      	movs	r1, #1
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 fdef 	bl	800c260 <RCCEx_PLL2_Config>
 800a682:	4603      	mov	r3, r0
 800a684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a688:	e00f      	b.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a68e:	3328      	adds	r3, #40	; 0x28
 800a690:	2101      	movs	r1, #1
 800a692:	4618      	mov	r0, r3
 800a694:	f001 fe96 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a698:	4603      	mov	r3, r0
 800a69a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a69e:	e004      	b.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6a6:	e000      	b.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10b      	bne.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6b2:	4b6c      	ldr	r3, [pc, #432]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b6:	f023 0107 	bic.w	r1, r3, #7
 800a6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6c2:	4a68      	ldr	r2, [pc, #416]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a6c8:	e003      	b.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f002 0320 	and.w	r3, r2, #32
 800a6de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a6e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	d055      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6fe:	d033      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a704:	d82c      	bhi.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a70a:	d02f      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a70c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a710:	d826      	bhi.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a716:	d02b      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a71c:	d820      	bhi.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a71e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a722:	d012      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a728:	d81a      	bhi.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d022      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a72e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a732:	d115      	bne.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a738:	3308      	adds	r3, #8
 800a73a:	2100      	movs	r1, #0
 800a73c:	4618      	mov	r0, r3
 800a73e:	f001 fd8f 	bl	800c260 <RCCEx_PLL2_Config>
 800a742:	4603      	mov	r3, r0
 800a744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a748:	e015      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74e:	3328      	adds	r3, #40	; 0x28
 800a750:	2102      	movs	r1, #2
 800a752:	4618      	mov	r0, r3
 800a754:	f001 fe36 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a75e:	e00a      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a766:	e006      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a768:	bf00      	nop
 800a76a:	e004      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a76c:	bf00      	nop
 800a76e:	e002      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a770:	bf00      	nop
 800a772:	e000      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10b      	bne.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a77e:	4b39      	ldr	r3, [pc, #228]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a782:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a78e:	4a35      	ldr	r2, [pc, #212]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a790:	430b      	orrs	r3, r1
 800a792:	6553      	str	r3, [r2, #84]	; 0x54
 800a794:	e003      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a79a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a7aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a7b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	d058      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a7ca:	d033      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a7cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a7d0:	d82c      	bhi.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a7d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d6:	d02f      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a7d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7dc:	d826      	bhi.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a7de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7e2:	d02b      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a7e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7e8:	d820      	bhi.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a7ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7ee:	d012      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a7f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f4:	d81a      	bhi.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d022      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a7fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7fe:	d115      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a804:	3308      	adds	r3, #8
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 fd29 	bl	800c260 <RCCEx_PLL2_Config>
 800a80e:	4603      	mov	r3, r0
 800a810:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a814:	e015      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a81a:	3328      	adds	r3, #40	; 0x28
 800a81c:	2102      	movs	r1, #2
 800a81e:	4618      	mov	r0, r3
 800a820:	f001 fdd0 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a824:	4603      	mov	r3, r0
 800a826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a82a:	e00a      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a832:	e006      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a834:	bf00      	nop
 800a836:	e004      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a838:	bf00      	nop
 800a83a:	e002      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a83c:	bf00      	nop
 800a83e:	e000      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10e      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a84a:	4b06      	ldr	r3, [pc, #24]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a84c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a84e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a85a:	4a02      	ldr	r2, [pc, #8]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a85c:	430b      	orrs	r3, r1
 800a85e:	6593      	str	r3, [r2, #88]	; 0x58
 800a860:	e006      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a862:	bf00      	nop
 800a864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a86c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a87c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a880:	2300      	movs	r3, #0
 800a882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a886:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a88a:	460b      	mov	r3, r1
 800a88c:	4313      	orrs	r3, r2
 800a88e:	d055      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a894:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a898:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a89c:	d033      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a89e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8a2:	d82c      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a8a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8a8:	d02f      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a8aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8ae:	d826      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a8b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8b4:	d02b      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a8b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8ba:	d820      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a8bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8c0:	d012      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a8c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8c6:	d81a      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d022      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a8cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8d0:	d115      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	2100      	movs	r1, #0
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f001 fcc0 	bl	800c260 <RCCEx_PLL2_Config>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a8e6:	e015      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ec:	3328      	adds	r3, #40	; 0x28
 800a8ee:	2102      	movs	r1, #2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f001 fd67 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a8fc:	e00a      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a904:	e006      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a906:	bf00      	nop
 800a908:	e004      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a90a:	bf00      	nop
 800a90c:	e002      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a90e:	bf00      	nop
 800a910:	e000      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a912:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10b      	bne.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a91c:	4ba1      	ldr	r3, [pc, #644]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a91e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a920:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a92c:	4a9d      	ldr	r2, [pc, #628]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a92e:	430b      	orrs	r3, r1
 800a930:	6593      	str	r3, [r2, #88]	; 0x58
 800a932:	e003      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f002 0308 	and.w	r3, r2, #8
 800a948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a94c:	2300      	movs	r3, #0
 800a94e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a952:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a956:	460b      	mov	r3, r1
 800a958:	4313      	orrs	r3, r2
 800a95a:	d01e      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a968:	d10c      	bne.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96e:	3328      	adds	r3, #40	; 0x28
 800a970:	2102      	movs	r1, #2
 800a972:	4618      	mov	r0, r3
 800a974:	f001 fd26 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a984:	4b87      	ldr	r3, [pc, #540]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a988:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a994:	4a83      	ldr	r2, [pc, #524]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a996:	430b      	orrs	r3, r1
 800a998:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	f002 0310 	and.w	r3, r2, #16
 800a9a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a9b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	d01e      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9c6:	d10c      	bne.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9cc:	3328      	adds	r3, #40	; 0x28
 800a9ce:	2102      	movs	r1, #2
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f001 fcf7 	bl	800c3c4 <RCCEx_PLL3_Config>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9e2:	4b70      	ldr	r3, [pc, #448]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9f2:	4a6c      	ldr	r2, [pc, #432]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9f4:	430b      	orrs	r3, r1
 800a9f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800aa04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800aa12:	460b      	mov	r3, r1
 800aa14:	4313      	orrs	r3, r2
 800aa16:	d03e      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aa18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa24:	d022      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800aa26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa2a:	d81b      	bhi.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800aa30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa34:	d00b      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800aa36:	e015      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	2100      	movs	r1, #0
 800aa40:	4618      	mov	r0, r3
 800aa42:	f001 fc0d 	bl	800c260 <RCCEx_PLL2_Config>
 800aa46:	4603      	mov	r3, r0
 800aa48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa4c:	e00f      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa52:	3328      	adds	r3, #40	; 0x28
 800aa54:	2102      	movs	r1, #2
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 fcb4 	bl	800c3c4 <RCCEx_PLL3_Config>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa62:	e004      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa6a:	e000      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800aa6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10b      	bne.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa76:	4b4b      	ldr	r3, [pc, #300]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa7a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800aa7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa86:	4a47      	ldr	r2, [pc, #284]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa88:	430b      	orrs	r3, r1
 800aa8a:	6593      	str	r3, [r2, #88]	; 0x58
 800aa8c:	e003      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800aaa2:	67bb      	str	r3, [r7, #120]	; 0x78
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aaa8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800aaac:	460b      	mov	r3, r1
 800aaae:	4313      	orrs	r3, r2
 800aab0:	d03b      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800aab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aabe:	d01f      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800aac0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aac4:	d818      	bhi.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800aac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaca:	d003      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800aacc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aad0:	d007      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800aad2:	e011      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad4:	4b33      	ldr	r3, [pc, #204]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	4a32      	ldr	r2, [pc, #200]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800aae0:	e00f      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae6:	3328      	adds	r3, #40	; 0x28
 800aae8:	2101      	movs	r1, #1
 800aaea:	4618      	mov	r0, r3
 800aaec:	f001 fc6a 	bl	800c3c4 <RCCEx_PLL3_Config>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800aaf6:	e004      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aafe:	e000      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ab00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10b      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab0a:	4b26      	ldr	r3, [pc, #152]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab1a:	4a22      	ldr	r2, [pc, #136]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	6553      	str	r3, [r2, #84]	; 0x54
 800ab20:	e003      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ab36:	673b      	str	r3, [r7, #112]	; 0x70
 800ab38:	2300      	movs	r3, #0
 800ab3a:	677b      	str	r3, [r7, #116]	; 0x74
 800ab3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ab40:	460b      	mov	r3, r1
 800ab42:	4313      	orrs	r3, r2
 800ab44:	d034      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ab46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d003      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab54:	d007      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ab56:	e011      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab58:	4b12      	ldr	r3, [pc, #72]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5c:	4a11      	ldr	r2, [pc, #68]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ab64:	e00e      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	2102      	movs	r1, #2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f001 fb76 	bl	800c260 <RCCEx_PLL2_Config>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ab7a:	e003      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10d      	bne.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ab8c:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9a:	4a02      	ldr	r2, [pc, #8]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aba0:	e006      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800aba2:	bf00      	nop
 800aba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800abb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800abbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800abbe:	2300      	movs	r3, #0
 800abc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800abc6:	460b      	mov	r3, r1
 800abc8:	4313      	orrs	r3, r2
 800abca:	d00c      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abd0:	3328      	adds	r3, #40	; 0x28
 800abd2:	2102      	movs	r1, #2
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 fbf5 	bl	800c3c4 <RCCEx_PLL3_Config>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800abe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800abf2:	663b      	str	r3, [r7, #96]	; 0x60
 800abf4:	2300      	movs	r3, #0
 800abf6:	667b      	str	r3, [r7, #100]	; 0x64
 800abf8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800abfc:	460b      	mov	r3, r1
 800abfe:	4313      	orrs	r3, r2
 800ac00:	d038      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac0e:	d018      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ac10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac14:	d811      	bhi.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac1a:	d014      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ac1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac20:	d80b      	bhi.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d011      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ac26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac2a:	d106      	bne.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac2c:	4bc3      	ldr	r3, [pc, #780]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac30:	4ac2      	ldr	r2, [pc, #776]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ac38:	e008      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac40:	e004      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac42:	bf00      	nop
 800ac44:	e002      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac46:	bf00      	nop
 800ac48:	e000      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10b      	bne.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ac54:	4bb9      	ldr	r3, [pc, #740]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ac5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac64:	4ab5      	ldr	r2, [pc, #724]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac66:	430b      	orrs	r3, r1
 800ac68:	6553      	str	r3, [r2, #84]	; 0x54
 800ac6a:	e003      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ac74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ac80:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac82:	2300      	movs	r3, #0
 800ac84:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	d009      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac90:	4baa      	ldr	r3, [pc, #680]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac9e:	4aa7      	ldr	r2, [pc, #668]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aca0:	430b      	orrs	r3, r1
 800aca2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800acb0:	653b      	str	r3, [r7, #80]	; 0x50
 800acb2:	2300      	movs	r3, #0
 800acb4:	657b      	str	r3, [r7, #84]	; 0x54
 800acb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800acba:	460b      	mov	r3, r1
 800acbc:	4313      	orrs	r3, r2
 800acbe:	d00a      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800acc0:	4b9e      	ldr	r3, [pc, #632]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800acc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800accc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800acd0:	4a9a      	ldr	r2, [pc, #616]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acd2:	430b      	orrs	r3, r1
 800acd4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800acd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ace2:	64bb      	str	r3, [r7, #72]	; 0x48
 800ace4:	2300      	movs	r3, #0
 800ace6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ace8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800acec:	460b      	mov	r3, r1
 800acee:	4313      	orrs	r3, r2
 800acf0:	d009      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800acf2:	4b92      	ldr	r3, [pc, #584]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800acfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad00:	4a8e      	ldr	r2, [pc, #568]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad02:	430b      	orrs	r3, r1
 800ad04:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ad12:	643b      	str	r3, [r7, #64]	; 0x40
 800ad14:	2300      	movs	r3, #0
 800ad16:	647b      	str	r3, [r7, #68]	; 0x44
 800ad18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	d00e      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad22:	4b86      	ldr	r3, [pc, #536]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	4a85      	ldr	r2, [pc, #532]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad2c:	6113      	str	r3, [r2, #16]
 800ad2e:	4b83      	ldr	r3, [pc, #524]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad30:	6919      	ldr	r1, [r3, #16]
 800ad32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ad3a:	4a80      	ldr	r2, [pc, #512]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ad4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad4e:	2300      	movs	r3, #0
 800ad50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ad56:	460b      	mov	r3, r1
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	d009      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ad5c:	4b77      	ldr	r3, [pc, #476]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad60:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ad64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6a:	4a74      	ldr	r2, [pc, #464]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ad7c:	633b      	str	r3, [r7, #48]	; 0x30
 800ad7e:	2300      	movs	r3, #0
 800ad80:	637b      	str	r3, [r7, #52]	; 0x34
 800ad82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ad86:	460b      	mov	r3, r1
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	d00a      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad8c:	4b6b      	ldr	r3, [pc, #428]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad90:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ad94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad9c:	4a67      	ldr	r2, [pc, #412]	; (800af3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad9e:	430b      	orrs	r3, r1
 800ada0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ada2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	2100      	movs	r1, #0
 800adac:	62b9      	str	r1, [r7, #40]	; 0x28
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800adb8:	460b      	mov	r3, r1
 800adba:	4313      	orrs	r3, r2
 800adbc:	d011      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc2:	3308      	adds	r3, #8
 800adc4:	2100      	movs	r1, #0
 800adc6:	4618      	mov	r0, r3
 800adc8:	f001 fa4a 	bl	800c260 <RCCEx_PLL2_Config>
 800adcc:	4603      	mov	r3, r0
 800adce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800add2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ade2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	2100      	movs	r1, #0
 800adec:	6239      	str	r1, [r7, #32]
 800adee:	f003 0302 	and.w	r3, r3, #2
 800adf2:	627b      	str	r3, [r7, #36]	; 0x24
 800adf4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800adf8:	460b      	mov	r3, r1
 800adfa:	4313      	orrs	r3, r2
 800adfc:	d011      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae02:	3308      	adds	r3, #8
 800ae04:	2101      	movs	r1, #1
 800ae06:	4618      	mov	r0, r3
 800ae08:	f001 fa2a 	bl	800c260 <RCCEx_PLL2_Config>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ae22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	61b9      	str	r1, [r7, #24]
 800ae2e:	f003 0304 	and.w	r3, r3, #4
 800ae32:	61fb      	str	r3, [r7, #28]
 800ae34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	d011      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae42:	3308      	adds	r3, #8
 800ae44:	2102      	movs	r1, #2
 800ae46:	4618      	mov	r0, r3
 800ae48:	f001 fa0a 	bl	800c260 <RCCEx_PLL2_Config>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ae62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	6139      	str	r1, [r7, #16]
 800ae6e:	f003 0308 	and.w	r3, r3, #8
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	d011      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae82:	3328      	adds	r3, #40	; 0x28
 800ae84:	2100      	movs	r1, #0
 800ae86:	4618      	mov	r0, r3
 800ae88:	f001 fa9c 	bl	800c3c4 <RCCEx_PLL3_Config>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ae92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	2100      	movs	r1, #0
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	f003 0310 	and.w	r3, r3, #16
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4313      	orrs	r3, r2
 800aebc:	d011      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec2:	3328      	adds	r3, #40	; 0x28
 800aec4:	2101      	movs	r1, #1
 800aec6:	4618      	mov	r0, r3
 800aec8:	f001 fa7c 	bl	800c3c4 <RCCEx_PLL3_Config>
 800aecc:	4603      	mov	r3, r0
 800aece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aede:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	2100      	movs	r1, #0
 800aeec:	6039      	str	r1, [r7, #0]
 800aeee:	f003 0320 	and.w	r3, r3, #32
 800aef2:	607b      	str	r3, [r7, #4]
 800aef4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aef8:	460b      	mov	r3, r1
 800aefa:	4313      	orrs	r3, r2
 800aefc:	d011      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af02:	3328      	adds	r3, #40	; 0x28
 800af04:	2102      	movs	r1, #2
 800af06:	4618      	mov	r0, r3
 800af08:	f001 fa5c 	bl	800c3c4 <RCCEx_PLL3_Config>
 800af0c:	4603      	mov	r3, r0
 800af0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800af22:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	e000      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
}
 800af30:	4618      	mov	r0, r3
 800af32:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800af36:	46bd      	mov	sp, r7
 800af38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af3c:	58024400 	.word	0x58024400

0800af40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b090      	sub	sp, #64	; 0x40
 800af44:	af00      	add	r7, sp, #0
 800af46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af4e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800af52:	430b      	orrs	r3, r1
 800af54:	f040 8094 	bne.w	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800af58:	4b9e      	ldr	r3, [pc, #632]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af5c:	f003 0307 	and.w	r3, r3, #7
 800af60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	2b04      	cmp	r3, #4
 800af66:	f200 8087 	bhi.w	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800af6a:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800af85 	.word	0x0800af85
 800af74:	0800afad 	.word	0x0800afad
 800af78:	0800afd5 	.word	0x0800afd5
 800af7c:	0800b071 	.word	0x0800b071
 800af80:	0800affd 	.word	0x0800affd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af84:	4b93      	ldr	r3, [pc, #588]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af90:	d108      	bne.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af96:	4618      	mov	r0, r3
 800af98:	f001 f810 	bl	800bfbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afa0:	f000 bd45 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa8:	f000 bd41 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afac:	4b89      	ldr	r3, [pc, #548]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afb8:	d108      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afba:	f107 0318 	add.w	r3, r7, #24
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 fd54 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afc8:	f000 bd31 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd0:	f000 bd2d 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afd4:	4b7f      	ldr	r3, [pc, #508]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afe0:	d108      	bne.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afe2:	f107 030c 	add.w	r3, r7, #12
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fe94 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff0:	f000 bd1d 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff8:	f000 bd19 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800affc:	4b75      	ldr	r3, [pc, #468]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800affe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b004:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b006:	4b73      	ldr	r3, [pc, #460]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0304 	and.w	r3, r3, #4
 800b00e:	2b04      	cmp	r3, #4
 800b010:	d10c      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b014:	2b00      	cmp	r3, #0
 800b016:	d109      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b018:	4b6e      	ldr	r3, [pc, #440]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	08db      	lsrs	r3, r3, #3
 800b01e:	f003 0303 	and.w	r3, r3, #3
 800b022:	4a6d      	ldr	r2, [pc, #436]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b024:	fa22 f303 	lsr.w	r3, r2, r3
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b02a:	e01f      	b.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b02c:	4b69      	ldr	r3, [pc, #420]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b038:	d106      	bne.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b03c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b040:	d102      	bne.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b042:	4b66      	ldr	r3, [pc, #408]	; (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b044:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b046:	e011      	b.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b048:	4b62      	ldr	r3, [pc, #392]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b054:	d106      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b05c:	d102      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b05e:	4b60      	ldr	r3, [pc, #384]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b060:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b062:	e003      	b.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b068:	f000 bce1 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b06c:	f000 bcdf 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b070:	4b5c      	ldr	r3, [pc, #368]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b074:	f000 bcdb 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b07c:	f000 bcd7 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b080:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b084:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b088:	430b      	orrs	r3, r1
 800b08a:	f040 80ad 	bne.w	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b08e:	4b51      	ldr	r3, [pc, #324]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b092:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b096:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b09e:	d056      	beq.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a6:	f200 8090 	bhi.w	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	2bc0      	cmp	r3, #192	; 0xc0
 800b0ae:	f000 8088 	beq.w	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	2bc0      	cmp	r3, #192	; 0xc0
 800b0b6:	f200 8088 	bhi.w	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	2b80      	cmp	r3, #128	; 0x80
 800b0be:	d032      	beq.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	2b80      	cmp	r3, #128	; 0x80
 800b0c4:	f200 8081 	bhi.w	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d003      	beq.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	2b40      	cmp	r3, #64	; 0x40
 800b0d2:	d014      	beq.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b0d4:	e079      	b.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0d6:	4b3f      	ldr	r3, [pc, #252]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0e2:	d108      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 ff67 	bl	800bfbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f2:	f000 bc9c 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0fa:	f000 bc98 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0fe:	4b35      	ldr	r3, [pc, #212]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b10a:	d108      	bne.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b10c:	f107 0318 	add.w	r3, r7, #24
 800b110:	4618      	mov	r0, r3
 800b112:	f000 fcab 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b11a:	f000 bc88 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b122:	f000 bc84 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b126:	4b2b      	ldr	r3, [pc, #172]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b12e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b132:	d108      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b134:	f107 030c 	add.w	r3, r7, #12
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 fdeb 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b142:	f000 bc74 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b14a:	f000 bc70 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b14e:	4b21      	ldr	r3, [pc, #132]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b152:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b156:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b158:	4b1e      	ldr	r3, [pc, #120]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0304 	and.w	r3, r3, #4
 800b160:	2b04      	cmp	r3, #4
 800b162:	d10c      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b166:	2b00      	cmp	r3, #0
 800b168:	d109      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b16a:	4b1a      	ldr	r3, [pc, #104]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	08db      	lsrs	r3, r3, #3
 800b170:	f003 0303 	and.w	r3, r3, #3
 800b174:	4a18      	ldr	r2, [pc, #96]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b176:	fa22 f303 	lsr.w	r3, r2, r3
 800b17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b17c:	e01f      	b.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b17e:	4b15      	ldr	r3, [pc, #84]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b18a:	d106      	bne.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b192:	d102      	bne.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b194:	4b11      	ldr	r3, [pc, #68]	; (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b196:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b198:	e011      	b.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b19a:	4b0e      	ldr	r3, [pc, #56]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1a6:	d106      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ae:	d102      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1b4:	e003      	b.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b1ba:	f000 bc38 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1be:	f000 bc36 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1c2:	4b08      	ldr	r3, [pc, #32]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c6:	f000 bc32 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ce:	f000 bc2e 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1d2:	bf00      	nop
 800b1d4:	58024400 	.word	0x58024400
 800b1d8:	03d09000 	.word	0x03d09000
 800b1dc:	003d0900 	.word	0x003d0900
 800b1e0:	017d7840 	.word	0x017d7840
 800b1e4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b1e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b1f0:	430b      	orrs	r3, r1
 800b1f2:	f040 809c 	bne.w	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b1f6:	4b9e      	ldr	r3, [pc, #632]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1fa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b1fe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b206:	d054      	beq.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b20e:	f200 808b 	bhi.w	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b218:	f000 8083 	beq.w	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b222:	f200 8081 	bhi.w	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b22c:	d02f      	beq.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b234:	d878      	bhi.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b242:	d012      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b244:	e070      	b.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b246:	4b8a      	ldr	r3, [pc, #552]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b24e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b252:	d107      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 feaf 	bl	800bfbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b262:	e3e4      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b268:	e3e1      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b26a:	4b81      	ldr	r3, [pc, #516]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b276:	d107      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b278:	f107 0318 	add.w	r3, r7, #24
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 fbf5 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b286:	e3d2      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b28c:	e3cf      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b28e:	4b78      	ldr	r3, [pc, #480]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b29a:	d107      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29c:	f107 030c 	add.w	r3, r7, #12
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fd37 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2aa:	e3c0      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b0:	e3bd      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2b2:	4b6f      	ldr	r3, [pc, #444]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2ba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2bc:	4b6c      	ldr	r3, [pc, #432]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	d10c      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d109      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2ce:	4b68      	ldr	r3, [pc, #416]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	08db      	lsrs	r3, r3, #3
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	4a66      	ldr	r2, [pc, #408]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b2da:	fa22 f303 	lsr.w	r3, r2, r3
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e0:	e01e      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2e2:	4b63      	ldr	r3, [pc, #396]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ee:	d106      	bne.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2f6:	d102      	bne.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2f8:	4b5f      	ldr	r3, [pc, #380]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2fc:	e010      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2fe:	4b5c      	ldr	r3, [pc, #368]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b30a:	d106      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b312:	d102      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b314:	4b59      	ldr	r3, [pc, #356]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b316:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b318:	e002      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b31e:	e386      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b320:	e385      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b322:	4b57      	ldr	r3, [pc, #348]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b326:	e382      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32c:	e37f      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b32e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b332:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b336:	430b      	orrs	r3, r1
 800b338:	f040 80a7 	bne.w	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b33c:	4b4c      	ldr	r3, [pc, #304]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b340:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b344:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b34c:	d055      	beq.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b354:	f200 8096 	bhi.w	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b35e:	f000 8084 	beq.w	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b368:	f200 808c 	bhi.w	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b372:	d030      	beq.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b37a:	f200 8083 	bhi.w	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b380:	2b00      	cmp	r3, #0
 800b382:	d004      	beq.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b38a:	d012      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b38c:	e07a      	b.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b38e:	4b38      	ldr	r3, [pc, #224]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b39a:	d107      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b39c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fe0b 	bl	800bfbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3aa:	e340      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b0:	e33d      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3b2:	4b2f      	ldr	r3, [pc, #188]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3be:	d107      	bne.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3c0:	f107 0318 	add.w	r3, r7, #24
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f000 fb51 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ce:	e32e      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d4:	e32b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3d6:	4b26      	ldr	r3, [pc, #152]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3e2:	d107      	bne.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3e4:	f107 030c 	add.w	r3, r7, #12
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 fc93 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3f2:	e31c      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3f8:	e319      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3fa:	4b1d      	ldr	r3, [pc, #116]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b402:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b404:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	2b04      	cmp	r3, #4
 800b40e:	d10c      	bne.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b412:	2b00      	cmp	r3, #0
 800b414:	d109      	bne.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b416:	4b16      	ldr	r3, [pc, #88]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	08db      	lsrs	r3, r3, #3
 800b41c:	f003 0303 	and.w	r3, r3, #3
 800b420:	4a14      	ldr	r2, [pc, #80]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b422:	fa22 f303 	lsr.w	r3, r2, r3
 800b426:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b428:	e01e      	b.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b42a:	4b11      	ldr	r3, [pc, #68]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b436:	d106      	bne.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b43e:	d102      	bne.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b440:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b444:	e010      	b.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b446:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b44e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b452:	d106      	bne.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b45a:	d102      	bne.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b45c:	4b07      	ldr	r3, [pc, #28]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b45e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b460:	e002      	b.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b462:	2300      	movs	r3, #0
 800b464:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b466:	e2e2      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b468:	e2e1      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b46a:	4b05      	ldr	r3, [pc, #20]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b46e:	e2de      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b470:	58024400 	.word	0x58024400
 800b474:	03d09000 	.word	0x03d09000
 800b478:	003d0900 	.word	0x003d0900
 800b47c:	017d7840 	.word	0x017d7840
 800b480:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b488:	e2d1      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b48a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b48e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b492:	430b      	orrs	r3, r1
 800b494:	f040 809c 	bne.w	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b498:	4b93      	ldr	r3, [pc, #588]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b49c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b4a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4a8:	d054      	beq.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4b0:	f200 808b 	bhi.w	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4ba:	f000 8083 	beq.w	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4c4:	f200 8081 	bhi.w	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ce:	d02f      	beq.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4d6:	d878      	bhi.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d004      	beq.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e4:	d012      	beq.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b4e6:	e070      	b.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4e8:	4b7f      	ldr	r3, [pc, #508]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4f4:	d107      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f000 fd5e 	bl	800bfbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b504:	e293      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b50a:	e290      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b50c:	4b76      	ldr	r3, [pc, #472]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b518:	d107      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b51a:	f107 0318 	add.w	r3, r7, #24
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 faa4 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b528:	e281      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b52e:	e27e      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b530:	4b6d      	ldr	r3, [pc, #436]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b53c:	d107      	bne.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b53e:	f107 030c 	add.w	r3, r7, #12
 800b542:	4618      	mov	r0, r3
 800b544:	f000 fbe6 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b54c:	e26f      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b552:	e26c      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b554:	4b64      	ldr	r3, [pc, #400]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b55c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b55e:	4b62      	ldr	r3, [pc, #392]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 0304 	and.w	r3, r3, #4
 800b566:	2b04      	cmp	r3, #4
 800b568:	d10c      	bne.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d109      	bne.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b570:	4b5d      	ldr	r3, [pc, #372]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	08db      	lsrs	r3, r3, #3
 800b576:	f003 0303 	and.w	r3, r3, #3
 800b57a:	4a5c      	ldr	r2, [pc, #368]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b57c:	fa22 f303 	lsr.w	r3, r2, r3
 800b580:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b582:	e01e      	b.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b584:	4b58      	ldr	r3, [pc, #352]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b590:	d106      	bne.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b598:	d102      	bne.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b59a:	4b55      	ldr	r3, [pc, #340]	; (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b59c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b59e:	e010      	b.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5a0:	4b51      	ldr	r3, [pc, #324]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ac:	d106      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b4:	d102      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b5b6:	4b4f      	ldr	r3, [pc, #316]	; (800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ba:	e002      	b.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b5c0:	e235      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5c2:	e234      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5c4:	4b4c      	ldr	r3, [pc, #304]	; (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c8:	e231      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ce:	e22e      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b5d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5d4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b5d8:	430b      	orrs	r3, r1
 800b5da:	f040 808f 	bne.w	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b5de:	4b42      	ldr	r3, [pc, #264]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b5e6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5ee:	d06b      	beq.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5f6:	d874      	bhi.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5fe:	d056      	beq.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b602:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b606:	d86c      	bhi.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b60e:	d03b      	beq.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b612:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b616:	d864      	bhi.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b61e:	d021      	beq.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b626:	d85c      	bhi.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d004      	beq.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b634:	d004      	beq.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b636:	e054      	b.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b638:	f7fe fa0a 	bl	8009a50 <HAL_RCC_GetPCLK1Freq>
 800b63c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b63e:	e1f6      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b640:	4b29      	ldr	r3, [pc, #164]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b64c:	d107      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b64e:	f107 0318 	add.w	r3, r7, #24
 800b652:	4618      	mov	r0, r3
 800b654:	f000 fa0a 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b65c:	e1e7      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b662:	e1e4      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b664:	4b20      	ldr	r3, [pc, #128]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b670:	d107      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b672:	f107 030c 	add.w	r3, r7, #12
 800b676:	4618      	mov	r0, r3
 800b678:	f000 fb4c 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b680:	e1d5      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b686:	e1d2      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b688:	4b17      	ldr	r3, [pc, #92]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 0304 	and.w	r3, r3, #4
 800b690:	2b04      	cmp	r3, #4
 800b692:	d109      	bne.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b694:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	08db      	lsrs	r3, r3, #3
 800b69a:	f003 0303 	and.w	r3, r3, #3
 800b69e:	4a13      	ldr	r2, [pc, #76]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6a6:	e1c2      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6ac:	e1bf      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b6ae:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ba:	d102      	bne.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b6bc:	4b0c      	ldr	r3, [pc, #48]	; (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6c0:	e1b5      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6c6:	e1b2      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6c8:	4b07      	ldr	r3, [pc, #28]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6d4:	d102      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b6d6:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6da:	e1a8      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e0:	e1a5      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e6:	e1a2      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6e8:	58024400 	.word	0x58024400
 800b6ec:	03d09000 	.word	0x03d09000
 800b6f0:	003d0900 	.word	0x003d0900
 800b6f4:	017d7840 	.word	0x017d7840
 800b6f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b6fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b700:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b704:	430b      	orrs	r3, r1
 800b706:	d173      	bne.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b708:	4b9c      	ldr	r3, [pc, #624]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b70a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b70c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b710:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b718:	d02f      	beq.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b720:	d863      	bhi.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	2b00      	cmp	r3, #0
 800b726:	d004      	beq.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b72e:	d012      	beq.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b730:	e05b      	b.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b732:	4b92      	ldr	r3, [pc, #584]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b73a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b73e:	d107      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b740:	f107 0318 	add.w	r3, r7, #24
 800b744:	4618      	mov	r0, r3
 800b746:	f000 f991 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b74e:	e16e      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b754:	e16b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b756:	4b89      	ldr	r3, [pc, #548]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b75e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b762:	d107      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b764:	f107 030c 	add.w	r3, r7, #12
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fad3 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b772:	e15c      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b774:	2300      	movs	r3, #0
 800b776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b778:	e159      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b77a:	4b80      	ldr	r3, [pc, #512]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b77e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b782:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b784:	4b7d      	ldr	r3, [pc, #500]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 0304 	and.w	r3, r3, #4
 800b78c:	2b04      	cmp	r3, #4
 800b78e:	d10c      	bne.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b792:	2b00      	cmp	r3, #0
 800b794:	d109      	bne.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b796:	4b79      	ldr	r3, [pc, #484]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	08db      	lsrs	r3, r3, #3
 800b79c:	f003 0303 	and.w	r3, r3, #3
 800b7a0:	4a77      	ldr	r2, [pc, #476]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7a8:	e01e      	b.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7aa:	4b74      	ldr	r3, [pc, #464]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7b6:	d106      	bne.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7be:	d102      	bne.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7c0:	4b70      	ldr	r3, [pc, #448]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7c4:	e010      	b.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7c6:	4b6d      	ldr	r3, [pc, #436]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7d2:	d106      	bne.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7da:	d102      	bne.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7dc:	4b6a      	ldr	r3, [pc, #424]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7e0:	e002      	b.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b7e6:	e122      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b7e8:	e121      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ee:	e11e      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b7f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7f4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b7f8:	430b      	orrs	r3, r1
 800b7fa:	d133      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b7fc:	4b5f      	ldr	r3, [pc, #380]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b804:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d004      	beq.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b812:	d012      	beq.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b814:	e023      	b.n	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b816:	4b59      	ldr	r3, [pc, #356]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b81e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b822:	d107      	bne.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 fbc7 	bl	800bfbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b832:	e0fc      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b838:	e0f9      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b83a:	4b50      	ldr	r3, [pc, #320]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b846:	d107      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b848:	f107 0318 	add.w	r3, r7, #24
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 f90d 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b856:	e0ea      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b85c:	e0e7      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b862:	e0e4      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b864:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b868:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b86c:	430b      	orrs	r3, r1
 800b86e:	f040 808d 	bne.w	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b872:	4b42      	ldr	r3, [pc, #264]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b876:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b87a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b882:	d06b      	beq.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b88a:	d874      	bhi.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b892:	d056      	beq.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b89a:	d86c      	bhi.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8a2:	d03b      	beq.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8aa:	d864      	bhi.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8b2:	d021      	beq.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ba:	d85c      	bhi.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d004      	beq.n	800b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8c8:	d004      	beq.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b8ca:	e054      	b.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b8cc:	f000 f8b8 	bl	800ba40 <HAL_RCCEx_GetD3PCLK1Freq>
 800b8d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8d2:	e0ac      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8d4:	4b29      	ldr	r3, [pc, #164]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8e0:	d107      	bne.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8e2:	f107 0318 	add.w	r3, r7, #24
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 f8c0 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8f0:	e09d      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f6:	e09a      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8f8:	4b20      	ldr	r3, [pc, #128]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b904:	d107      	bne.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b906:	f107 030c 	add.w	r3, r7, #12
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 fa02 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b914:	e08b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b91a:	e088      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b91c:	4b17      	ldr	r3, [pc, #92]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0304 	and.w	r3, r3, #4
 800b924:	2b04      	cmp	r3, #4
 800b926:	d109      	bne.n	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b928:	4b14      	ldr	r3, [pc, #80]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	08db      	lsrs	r3, r3, #3
 800b92e:	f003 0303 	and.w	r3, r3, #3
 800b932:	4a13      	ldr	r2, [pc, #76]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b934:	fa22 f303 	lsr.w	r3, r2, r3
 800b938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b93a:	e078      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b93c:	2300      	movs	r3, #0
 800b93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b940:	e075      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b942:	4b0e      	ldr	r3, [pc, #56]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b94a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b94e:	d102      	bne.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b950:	4b0c      	ldr	r3, [pc, #48]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b954:	e06b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b956:	2300      	movs	r3, #0
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b95a:	e068      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b95c:	4b07      	ldr	r3, [pc, #28]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b968:	d102      	bne.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b96a:	4b07      	ldr	r3, [pc, #28]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b96e:	e05e      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b974:	e05b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b97a:	e058      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b97c:	58024400 	.word	0x58024400
 800b980:	03d09000 	.word	0x03d09000
 800b984:	003d0900 	.word	0x003d0900
 800b988:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b990:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b994:	430b      	orrs	r3, r1
 800b996:	d148      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b998:	4b27      	ldr	r3, [pc, #156]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b99c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9a8:	d02a      	beq.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9b0:	d838      	bhi.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d004      	beq.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9be:	d00d      	beq.n	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b9c0:	e030      	b.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9c2:	4b1d      	ldr	r3, [pc, #116]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9ce:	d102      	bne.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b9d0:	4b1a      	ldr	r3, [pc, #104]	; (800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9d4:	e02b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9da:	e028      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9dc:	4b16      	ldr	r3, [pc, #88]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9e8:	d107      	bne.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 fae4 	bl	800bfbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9f8:	e019      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9fe:	e016      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba00:	4b0d      	ldr	r3, [pc, #52]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba0c:	d107      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba0e:	f107 0318 	add.w	r3, r7, #24
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 f82a 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba1c:	e007      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba22:	e004      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba28:	e001      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ba2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3740      	adds	r7, #64	; 0x40
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	58024400 	.word	0x58024400
 800ba3c:	017d7840 	.word	0x017d7840

0800ba40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba44:	f7fd ffd4 	bl	80099f0 <HAL_RCC_GetHCLKFreq>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	4b06      	ldr	r3, [pc, #24]	; (800ba64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	091b      	lsrs	r3, r3, #4
 800ba50:	f003 0307 	and.w	r3, r3, #7
 800ba54:	4904      	ldr	r1, [pc, #16]	; (800ba68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ba56:	5ccb      	ldrb	r3, [r1, r3]
 800ba58:	f003 031f 	and.w	r3, r3, #31
 800ba5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	58024400 	.word	0x58024400
 800ba68:	0801549c 	.word	0x0801549c

0800ba6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b089      	sub	sp, #36	; 0x24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba74:	4ba1      	ldr	r3, [pc, #644]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba78:	f003 0303 	and.w	r3, r3, #3
 800ba7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba7e:	4b9f      	ldr	r3, [pc, #636]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba82:	0b1b      	lsrs	r3, r3, #12
 800ba84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba8a:	4b9c      	ldr	r3, [pc, #624]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8e:	091b      	lsrs	r3, r3, #4
 800ba90:	f003 0301 	and.w	r3, r3, #1
 800ba94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba96:	4b99      	ldr	r3, [pc, #612]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9a:	08db      	lsrs	r3, r3, #3
 800ba9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	fb02 f303 	mul.w	r3, r2, r3
 800baa6:	ee07 3a90 	vmov	s15, r3
 800baaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 8111 	beq.w	800bcdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	2b02      	cmp	r3, #2
 800babe:	f000 8083 	beq.w	800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	f200 80a1 	bhi.w	800bc0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d003      	beq.n	800bad8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d056      	beq.n	800bb84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bad6:	e099      	b.n	800bc0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bad8:	4b88      	ldr	r3, [pc, #544]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0320 	and.w	r3, r3, #32
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d02d      	beq.n	800bb40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bae4:	4b85      	ldr	r3, [pc, #532]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	08db      	lsrs	r3, r3, #3
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	4a84      	ldr	r2, [pc, #528]	; (800bd00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800baf0:	fa22 f303 	lsr.w	r3, r2, r3
 800baf4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	ee07 3a90 	vmov	s15, r3
 800bafc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb0e:	4b7b      	ldr	r3, [pc, #492]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb22:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bd04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb3e:	e087      	b.n	800bc50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bd08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bb4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb52:	4b6a      	ldr	r3, [pc, #424]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb62:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb66:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bd04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb82:	e065      	b.n	800bc50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb96:	4b59      	ldr	r3, [pc, #356]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bba6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bd04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbc6:	e043      	b.n	800bc50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	ee07 3a90 	vmov	s15, r3
 800bbce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bd10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bbd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbda:	4b48      	ldr	r3, [pc, #288]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe2:	ee07 3a90 	vmov	s15, r3
 800bbe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbea:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bd04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc0a:	e021      	b.n	800bc50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	ee07 3a90 	vmov	s15, r3
 800bc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bd0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc1e:	4b37      	ldr	r3, [pc, #220]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc26:	ee07 3a90 	vmov	s15, r3
 800bc2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc32:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bc50:	4b2a      	ldr	r3, [pc, #168]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc54:	0a5b      	lsrs	r3, r3, #9
 800bc56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc5a:	ee07 3a90 	vmov	s15, r3
 800bc5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc76:	ee17 2a90 	vmov	r2, s15
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bc7e:	4b1f      	ldr	r3, [pc, #124]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc82:	0c1b      	lsrs	r3, r3, #16
 800bc84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc88:	ee07 3a90 	vmov	s15, r3
 800bc8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc98:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca4:	ee17 2a90 	vmov	r2, s15
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bcac:	4b13      	ldr	r3, [pc, #76]	; (800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb0:	0e1b      	lsrs	r3, r3, #24
 800bcb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd2:	ee17 2a90 	vmov	r2, s15
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bcda:	e008      	b.n	800bcee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	609a      	str	r2, [r3, #8]
}
 800bcee:	bf00      	nop
 800bcf0:	3724      	adds	r7, #36	; 0x24
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	58024400 	.word	0x58024400
 800bd00:	03d09000 	.word	0x03d09000
 800bd04:	46000000 	.word	0x46000000
 800bd08:	4c742400 	.word	0x4c742400
 800bd0c:	4a742400 	.word	0x4a742400
 800bd10:	4bbebc20 	.word	0x4bbebc20

0800bd14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b089      	sub	sp, #36	; 0x24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd1c:	4ba1      	ldr	r3, [pc, #644]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd20:	f003 0303 	and.w	r3, r3, #3
 800bd24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bd26:	4b9f      	ldr	r3, [pc, #636]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2a:	0d1b      	lsrs	r3, r3, #20
 800bd2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd32:	4b9c      	ldr	r3, [pc, #624]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	0a1b      	lsrs	r3, r3, #8
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bd3e:	4b99      	ldr	r3, [pc, #612]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd42:	08db      	lsrs	r3, r3, #3
 800bd44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	fb02 f303 	mul.w	r3, r2, r3
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8111 	beq.w	800bf84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	f000 8083 	beq.w	800be70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	f200 80a1 	bhi.w	800beb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d003      	beq.n	800bd80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d056      	beq.n	800be2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bd7e:	e099      	b.n	800beb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd80:	4b88      	ldr	r3, [pc, #544]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0320 	and.w	r3, r3, #32
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d02d      	beq.n	800bde8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd8c:	4b85      	ldr	r3, [pc, #532]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	08db      	lsrs	r3, r3, #3
 800bd92:	f003 0303 	and.w	r3, r3, #3
 800bd96:	4a84      	ldr	r2, [pc, #528]	; (800bfa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bd98:	fa22 f303 	lsr.w	r3, r2, r3
 800bd9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	ee07 3a90 	vmov	s15, r3
 800bda4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdb6:	4b7b      	ldr	r3, [pc, #492]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdbe:	ee07 3a90 	vmov	s15, r3
 800bdc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bfac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bde2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bde6:	e087      	b.n	800bef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	ee07 3a90 	vmov	s15, r3
 800bdee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bfb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bdf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdfa:	4b6a      	ldr	r3, [pc, #424]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bfac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be2a:	e065      	b.n	800bef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	ee07 3a90 	vmov	s15, r3
 800be32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bfb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be3e:	4b59      	ldr	r3, [pc, #356]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be52:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bfac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be6e:	e043      	b.n	800bef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	ee07 3a90 	vmov	s15, r3
 800be76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bfb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800be7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be82:	4b48      	ldr	r3, [pc, #288]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be8a:	ee07 3a90 	vmov	s15, r3
 800be8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be92:	ed97 6a03 	vldr	s12, [r7, #12]
 800be96:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bfac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beb2:	e021      	b.n	800bef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	ee07 3a90 	vmov	s15, r3
 800beba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bebe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bfb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bec6:	4b37      	ldr	r3, [pc, #220]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bece:	ee07 3a90 	vmov	s15, r3
 800bed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bed6:	ed97 6a03 	vldr	s12, [r7, #12]
 800beda:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bfac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bef6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bef8:	4b2a      	ldr	r3, [pc, #168]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800befa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befc:	0a5b      	lsrs	r3, r3, #9
 800befe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf02:	ee07 3a90 	vmov	s15, r3
 800bf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf12:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf1e:	ee17 2a90 	vmov	r2, s15
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bf26:	4b1f      	ldr	r3, [pc, #124]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2a:	0c1b      	lsrs	r3, r3, #16
 800bf2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf30:	ee07 3a90 	vmov	s15, r3
 800bf34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf40:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf4c:	ee17 2a90 	vmov	r2, s15
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bf54:	4b13      	ldr	r3, [pc, #76]	; (800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf58:	0e1b      	lsrs	r3, r3, #24
 800bf5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf7a:	ee17 2a90 	vmov	r2, s15
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf82:	e008      	b.n	800bf96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	609a      	str	r2, [r3, #8]
}
 800bf96:	bf00      	nop
 800bf98:	3724      	adds	r7, #36	; 0x24
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	58024400 	.word	0x58024400
 800bfa8:	03d09000 	.word	0x03d09000
 800bfac:	46000000 	.word	0x46000000
 800bfb0:	4c742400 	.word	0x4c742400
 800bfb4:	4a742400 	.word	0x4a742400
 800bfb8:	4bbebc20 	.word	0x4bbebc20

0800bfbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b089      	sub	sp, #36	; 0x24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfc4:	4ba0      	ldr	r3, [pc, #640]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc8:	f003 0303 	and.w	r3, r3, #3
 800bfcc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bfce:	4b9e      	ldr	r3, [pc, #632]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd2:	091b      	lsrs	r3, r3, #4
 800bfd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfd8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bfda:	4b9b      	ldr	r3, [pc, #620]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bfe4:	4b98      	ldr	r3, [pc, #608]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe8:	08db      	lsrs	r3, r3, #3
 800bfea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	fb02 f303 	mul.w	r3, r2, r3
 800bff4:	ee07 3a90 	vmov	s15, r3
 800bff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2b00      	cmp	r3, #0
 800c004:	f000 8111 	beq.w	800c22a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	f000 8083 	beq.w	800c116 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	2b02      	cmp	r3, #2
 800c014:	f200 80a1 	bhi.w	800c15a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d003      	beq.n	800c026 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d056      	beq.n	800c0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c024:	e099      	b.n	800c15a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c026:	4b88      	ldr	r3, [pc, #544]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 0320 	and.w	r3, r3, #32
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d02d      	beq.n	800c08e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c032:	4b85      	ldr	r3, [pc, #532]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	08db      	lsrs	r3, r3, #3
 800c038:	f003 0303 	and.w	r3, r3, #3
 800c03c:	4a83      	ldr	r2, [pc, #524]	; (800c24c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c03e:	fa22 f303 	lsr.w	r3, r2, r3
 800c042:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	ee07 3a90 	vmov	s15, r3
 800c04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	ee07 3a90 	vmov	s15, r3
 800c054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c05c:	4b7a      	ldr	r3, [pc, #488]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c064:	ee07 3a90 	vmov	s15, r3
 800c068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c06c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c070:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c07c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c088:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c08c:	e087      	b.n	800c19e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	ee07 3a90 	vmov	s15, r3
 800c094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c098:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0a0:	4b69      	ldr	r3, [pc, #420]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0d0:	e065      	b.n	800c19e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	ee07 3a90 	vmov	s15, r3
 800c0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c258 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c0e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0e4:	4b58      	ldr	r3, [pc, #352]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ec:	ee07 3a90 	vmov	s15, r3
 800c0f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c10c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c110:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c114:	e043      	b.n	800c19e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	ee07 3a90 	vmov	s15, r3
 800c11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c120:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c128:	4b47      	ldr	r3, [pc, #284]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c130:	ee07 3a90 	vmov	s15, r3
 800c134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c138:	ed97 6a03 	vldr	s12, [r7, #12]
 800c13c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c14c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c150:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c154:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c158:	e021      	b.n	800c19e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	ee07 3a90 	vmov	s15, r3
 800c160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c164:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c16c:	4b36      	ldr	r3, [pc, #216]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c174:	ee07 3a90 	vmov	s15, r3
 800c178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c17c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c180:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c18c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c194:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c198:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c19c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c19e:	4b2a      	ldr	r3, [pc, #168]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a2:	0a5b      	lsrs	r3, r3, #9
 800c1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1a8:	ee07 3a90 	vmov	s15, r3
 800c1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1c4:	ee17 2a90 	vmov	r2, s15
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c1cc:	4b1e      	ldr	r3, [pc, #120]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d0:	0c1b      	lsrs	r3, r3, #16
 800c1d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1d6:	ee07 3a90 	vmov	s15, r3
 800c1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1f2:	ee17 2a90 	vmov	r2, s15
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c1fa:	4b13      	ldr	r3, [pc, #76]	; (800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fe:	0e1b      	lsrs	r3, r3, #24
 800c200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c204:	ee07 3a90 	vmov	s15, r3
 800c208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c210:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c214:	edd7 6a07 	vldr	s13, [r7, #28]
 800c218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c21c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c220:	ee17 2a90 	vmov	r2, s15
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c228:	e008      	b.n	800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	609a      	str	r2, [r3, #8]
}
 800c23c:	bf00      	nop
 800c23e:	3724      	adds	r7, #36	; 0x24
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	58024400 	.word	0x58024400
 800c24c:	03d09000 	.word	0x03d09000
 800c250:	46000000 	.word	0x46000000
 800c254:	4c742400 	.word	0x4c742400
 800c258:	4a742400 	.word	0x4a742400
 800c25c:	4bbebc20 	.word	0x4bbebc20

0800c260 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c26e:	4b53      	ldr	r3, [pc, #332]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c272:	f003 0303 	and.w	r3, r3, #3
 800c276:	2b03      	cmp	r3, #3
 800c278:	d101      	bne.n	800c27e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e099      	b.n	800c3b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c27e:	4b4f      	ldr	r3, [pc, #316]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a4e      	ldr	r2, [pc, #312]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c284:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c28a:	f7f7 f973 	bl	8003574 <HAL_GetTick>
 800c28e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c290:	e008      	b.n	800c2a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c292:	f7f7 f96f 	bl	8003574 <HAL_GetTick>
 800c296:	4602      	mov	r2, r0
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d901      	bls.n	800c2a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	e086      	b.n	800c3b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2a4:	4b45      	ldr	r3, [pc, #276]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1f0      	bne.n	800c292 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c2b0:	4b42      	ldr	r3, [pc, #264]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	031b      	lsls	r3, r3, #12
 800c2be:	493f      	ldr	r1, [pc, #252]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	628b      	str	r3, [r1, #40]	; 0x28
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	025b      	lsls	r3, r3, #9
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	431a      	orrs	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	041b      	lsls	r3, r3, #16
 800c2e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c2e6:	431a      	orrs	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	061b      	lsls	r3, r3, #24
 800c2f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c2f4:	4931      	ldr	r1, [pc, #196]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c2fa:	4b30      	ldr	r3, [pc, #192]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	695b      	ldr	r3, [r3, #20]
 800c306:	492d      	ldr	r1, [pc, #180]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c308:	4313      	orrs	r3, r2
 800c30a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c30c:	4b2b      	ldr	r3, [pc, #172]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c310:	f023 0220 	bic.w	r2, r3, #32
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	699b      	ldr	r3, [r3, #24]
 800c318:	4928      	ldr	r1, [pc, #160]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c31a:	4313      	orrs	r3, r2
 800c31c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c31e:	4b27      	ldr	r3, [pc, #156]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c322:	4a26      	ldr	r2, [pc, #152]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c324:	f023 0310 	bic.w	r3, r3, #16
 800c328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c32a:	4b24      	ldr	r3, [pc, #144]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c32c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c32e:	4b24      	ldr	r3, [pc, #144]	; (800c3c0 <RCCEx_PLL2_Config+0x160>)
 800c330:	4013      	ands	r3, r2
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	69d2      	ldr	r2, [r2, #28]
 800c336:	00d2      	lsls	r2, r2, #3
 800c338:	4920      	ldr	r1, [pc, #128]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c33e:	4b1f      	ldr	r3, [pc, #124]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c342:	4a1e      	ldr	r2, [pc, #120]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c344:	f043 0310 	orr.w	r3, r3, #16
 800c348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d106      	bne.n	800c35e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c350:	4b1a      	ldr	r3, [pc, #104]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	4a19      	ldr	r2, [pc, #100]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c35a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c35c:	e00f      	b.n	800c37e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d106      	bne.n	800c372 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c364:	4b15      	ldr	r3, [pc, #84]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c368:	4a14      	ldr	r2, [pc, #80]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c36a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c36e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c370:	e005      	b.n	800c37e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c372:	4b12      	ldr	r3, [pc, #72]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c376:	4a11      	ldr	r2, [pc, #68]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c37c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c37e:	4b0f      	ldr	r3, [pc, #60]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a0e      	ldr	r2, [pc, #56]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c38a:	f7f7 f8f3 	bl	8003574 <HAL_GetTick>
 800c38e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c390:	e008      	b.n	800c3a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c392:	f7f7 f8ef 	bl	8003574 <HAL_GetTick>
 800c396:	4602      	mov	r2, r0
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d901      	bls.n	800c3a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e006      	b.n	800c3b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3a4:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <RCCEx_PLL2_Config+0x15c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d0f0      	beq.n	800c392 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	58024400 	.word	0x58024400
 800c3c0:	ffff0007 	.word	0xffff0007

0800c3c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3d2:	4b53      	ldr	r3, [pc, #332]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d6:	f003 0303 	and.w	r3, r3, #3
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d101      	bne.n	800c3e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e099      	b.n	800c516 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c3e2:	4b4f      	ldr	r3, [pc, #316]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a4e      	ldr	r2, [pc, #312]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c3e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3ee:	f7f7 f8c1 	bl	8003574 <HAL_GetTick>
 800c3f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3f4:	e008      	b.n	800c408 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3f6:	f7f7 f8bd 	bl	8003574 <HAL_GetTick>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	1ad3      	subs	r3, r2, r3
 800c400:	2b02      	cmp	r3, #2
 800c402:	d901      	bls.n	800c408 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c404:	2303      	movs	r3, #3
 800c406:	e086      	b.n	800c516 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c408:	4b45      	ldr	r3, [pc, #276]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1f0      	bne.n	800c3f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c414:	4b42      	ldr	r3, [pc, #264]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c418:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	051b      	lsls	r3, r3, #20
 800c422:	493f      	ldr	r1, [pc, #252]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c424:	4313      	orrs	r3, r2
 800c426:	628b      	str	r3, [r1, #40]	; 0x28
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	3b01      	subs	r3, #1
 800c438:	025b      	lsls	r3, r3, #9
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	431a      	orrs	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	3b01      	subs	r3, #1
 800c444:	041b      	lsls	r3, r3, #16
 800c446:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c44a:	431a      	orrs	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	3b01      	subs	r3, #1
 800c452:	061b      	lsls	r3, r3, #24
 800c454:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c458:	4931      	ldr	r1, [pc, #196]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c45a:	4313      	orrs	r3, r2
 800c45c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c45e:	4b30      	ldr	r3, [pc, #192]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	492d      	ldr	r1, [pc, #180]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c46c:	4313      	orrs	r3, r2
 800c46e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c470:	4b2b      	ldr	r3, [pc, #172]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c474:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	4928      	ldr	r1, [pc, #160]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c47e:	4313      	orrs	r3, r2
 800c480:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c482:	4b27      	ldr	r3, [pc, #156]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c486:	4a26      	ldr	r2, [pc, #152]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c48c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c48e:	4b24      	ldr	r3, [pc, #144]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c492:	4b24      	ldr	r3, [pc, #144]	; (800c524 <RCCEx_PLL3_Config+0x160>)
 800c494:	4013      	ands	r3, r2
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	69d2      	ldr	r2, [r2, #28]
 800c49a:	00d2      	lsls	r2, r2, #3
 800c49c:	4920      	ldr	r1, [pc, #128]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c4a2:	4b1f      	ldr	r3, [pc, #124]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a6:	4a1e      	ldr	r2, [pc, #120]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d106      	bne.n	800c4c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c4b4:	4b1a      	ldr	r3, [pc, #104]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b8:	4a19      	ldr	r2, [pc, #100]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c4be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4c0:	e00f      	b.n	800c4e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d106      	bne.n	800c4d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c4c8:	4b15      	ldr	r3, [pc, #84]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4cc:	4a14      	ldr	r2, [pc, #80]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c4d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4d4:	e005      	b.n	800c4e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c4d6:	4b12      	ldr	r3, [pc, #72]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4da:	4a11      	ldr	r2, [pc, #68]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c4e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c4e2:	4b0f      	ldr	r3, [pc, #60]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a0e      	ldr	r2, [pc, #56]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c4e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4ee:	f7f7 f841 	bl	8003574 <HAL_GetTick>
 800c4f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4f4:	e008      	b.n	800c508 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c4f6:	f7f7 f83d 	bl	8003574 <HAL_GetTick>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	2b02      	cmp	r3, #2
 800c502:	d901      	bls.n	800c508 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c504:	2303      	movs	r3, #3
 800c506:	e006      	b.n	800c516 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c508:	4b05      	ldr	r3, [pc, #20]	; (800c520 <RCCEx_PLL3_Config+0x15c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0f0      	beq.n	800c4f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c514:	7bfb      	ldrb	r3, [r7, #15]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	58024400 	.word	0x58024400
 800c524:	ffff0007 	.word	0xffff0007

0800c528 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d071      	beq.n	800c61e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d106      	bne.n	800c554 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7f6 fb0e 	bl	8002b70 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2202      	movs	r2, #2
 800c558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	f003 0310 	and.w	r3, r3, #16
 800c566:	2b10      	cmp	r3, #16
 800c568:	d050      	beq.n	800c60c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	22ca      	movs	r2, #202	; 0xca
 800c570:	625a      	str	r2, [r3, #36]	; 0x24
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2253      	movs	r2, #83	; 0x53
 800c578:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa4a 	bl	800ca14 <RTC_EnterInitMode>
 800c580:	4603      	mov	r3, r0
 800c582:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c584:	7bfb      	ldrb	r3, [r7, #15]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d124      	bne.n	800c5d4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	6899      	ldr	r1, [r3, #8]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	4b24      	ldr	r3, [pc, #144]	; (800c628 <HAL_RTC_Init+0x100>)
 800c596:	400b      	ands	r3, r1
 800c598:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6899      	ldr	r1, [r3, #8]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	431a      	orrs	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	431a      	orrs	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	430a      	orrs	r2, r1
 800c5b6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	0419      	lsls	r1, r3, #16
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68da      	ldr	r2, [r3, #12]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	430a      	orrs	r2, r1
 800c5c8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fa56 	bl	800ca7c <RTC_ExitInitMode>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c5d4:	7bfb      	ldrb	r3, [r7, #15]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d113      	bne.n	800c602 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f022 0203 	bic.w	r2, r2, #3
 800c5e8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	69da      	ldr	r2, [r3, #28]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	431a      	orrs	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	430a      	orrs	r2, r1
 800c600:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	22ff      	movs	r2, #255	; 0xff
 800c608:	625a      	str	r2, [r3, #36]	; 0x24
 800c60a:	e001      	b.n	800c610 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c610:	7bfb      	ldrb	r3, [r7, #15]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d103      	bne.n	800c61e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	ff8fffbf 	.word	0xff8fffbf

0800c62c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c62c:	b590      	push	{r4, r7, lr}
 800c62e:	b087      	sub	sp, #28
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d101      	bne.n	800c646 <HAL_RTC_SetTime+0x1a>
 800c642:	2302      	movs	r3, #2
 800c644:	e089      	b.n	800c75a <HAL_RTC_SetTime+0x12e>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2202      	movs	r2, #2
 800c652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	22ca      	movs	r2, #202	; 0xca
 800c65c:	625a      	str	r2, [r3, #36]	; 0x24
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2253      	movs	r2, #83	; 0x53
 800c664:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f000 f9d4 	bl	800ca14 <RTC_EnterInitMode>
 800c66c:	4603      	mov	r3, r0
 800c66e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c670:	7cfb      	ldrb	r3, [r7, #19]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d161      	bne.n	800c73a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d126      	bne.n	800c6ca <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	d102      	bne.n	800c690 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2200      	movs	r2, #0
 800c68e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	4618      	mov	r0, r3
 800c696:	f000 fa2f 	bl	800caf8 <RTC_ByteToBcd2>
 800c69a:	4603      	mov	r3, r0
 800c69c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	785b      	ldrb	r3, [r3, #1]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fa28 	bl	800caf8 <RTC_ByteToBcd2>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6ac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	789b      	ldrb	r3, [r3, #2]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 fa20 	bl	800caf8 <RTC_ByteToBcd2>
 800c6b8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c6ba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	78db      	ldrb	r3, [r3, #3]
 800c6c2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	617b      	str	r3, [r7, #20]
 800c6c8:	e018      	b.n	800c6fc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d102      	bne.n	800c6de <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	785b      	ldrb	r3, [r3, #1]
 800c6e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6ea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c6f0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	78db      	ldrb	r3, [r3, #3]
 800c6f6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	6979      	ldr	r1, [r7, #20]
 800c702:	4b18      	ldr	r3, [pc, #96]	; (800c764 <HAL_RTC_SetTime+0x138>)
 800c704:	400b      	ands	r3, r1
 800c706:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689a      	ldr	r2, [r3, #8]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c716:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6899      	ldr	r1, [r3, #8]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	68da      	ldr	r2, [r3, #12]
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	431a      	orrs	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	430a      	orrs	r2, r1
 800c72e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f000 f9a3 	bl	800ca7c <RTC_ExitInitMode>
 800c736:	4603      	mov	r3, r0
 800c738:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	22ff      	movs	r2, #255	; 0xff
 800c740:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c742:	7cfb      	ldrb	r3, [r7, #19]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d103      	bne.n	800c750 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c758:	7cfb      	ldrb	r3, [r7, #19]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	371c      	adds	r7, #28
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd90      	pop	{r4, r7, pc}
 800c762:	bf00      	nop
 800c764:	007f7f7f 	.word	0x007f7f7f

0800c768 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	4b22      	ldr	r3, [pc, #136]	; (800c81c <HAL_RTC_GetTime+0xb4>)
 800c794:	4013      	ands	r3, r2
 800c796:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	0c1b      	lsrs	r3, r3, #16
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	0a1b      	lsrs	r3, r3, #8
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	0d9b      	lsrs	r3, r3, #22
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d11a      	bne.n	800c812 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f000 f9a9 	bl	800cb38 <RTC_Bcd2ToByte>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	785b      	ldrb	r3, [r3, #1]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 f9a0 	bl	800cb38 <RTC_Bcd2ToByte>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	789b      	ldrb	r3, [r3, #2]
 800c804:	4618      	mov	r0, r3
 800c806:	f000 f997 	bl	800cb38 <RTC_Bcd2ToByte>
 800c80a:	4603      	mov	r3, r0
 800c80c:	461a      	mov	r2, r3
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3718      	adds	r7, #24
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	007f7f7f 	.word	0x007f7f7f

0800c820 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c820:	b590      	push	{r4, r7, lr}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d101      	bne.n	800c83a <HAL_RTC_SetDate+0x1a>
 800c836:	2302      	movs	r3, #2
 800c838:	e073      	b.n	800c922 <HAL_RTC_SetDate+0x102>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2202      	movs	r2, #2
 800c846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10e      	bne.n	800c86e <HAL_RTC_SetDate+0x4e>
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	785b      	ldrb	r3, [r3, #1]
 800c854:	f003 0310 	and.w	r3, r3, #16
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d008      	beq.n	800c86e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	785b      	ldrb	r3, [r3, #1]
 800c860:	f023 0310 	bic.w	r3, r3, #16
 800c864:	b2db      	uxtb	r3, r3
 800c866:	330a      	adds	r3, #10
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d11c      	bne.n	800c8ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	78db      	ldrb	r3, [r3, #3]
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 f93d 	bl	800caf8 <RTC_ByteToBcd2>
 800c87e:	4603      	mov	r3, r0
 800c880:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	785b      	ldrb	r3, [r3, #1]
 800c886:	4618      	mov	r0, r3
 800c888:	f000 f936 	bl	800caf8 <RTC_ByteToBcd2>
 800c88c:	4603      	mov	r3, r0
 800c88e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c890:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	789b      	ldrb	r3, [r3, #2]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f92e 	bl	800caf8 <RTC_ByteToBcd2>
 800c89c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c89e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	617b      	str	r3, [r7, #20]
 800c8ac:	e00e      	b.n	800c8cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	78db      	ldrb	r3, [r3, #3]
 800c8b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	785b      	ldrb	r3, [r3, #1]
 800c8b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8ba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c8c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	22ca      	movs	r2, #202	; 0xca
 800c8d2:	625a      	str	r2, [r3, #36]	; 0x24
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2253      	movs	r2, #83	; 0x53
 800c8da:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f000 f899 	bl	800ca14 <RTC_EnterInitMode>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c8e6:	7cfb      	ldrb	r3, [r7, #19]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10a      	bne.n	800c902 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	6979      	ldr	r1, [r7, #20]
 800c8f2:	4b0e      	ldr	r3, [pc, #56]	; (800c92c <HAL_RTC_SetDate+0x10c>)
 800c8f4:	400b      	ands	r3, r1
 800c8f6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f000 f8bf 	bl	800ca7c <RTC_ExitInitMode>
 800c8fe:	4603      	mov	r3, r0
 800c900:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	22ff      	movs	r2, #255	; 0xff
 800c908:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c90a:	7cfb      	ldrb	r3, [r7, #19]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d103      	bne.n	800c918 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c920:	7cfb      	ldrb	r3, [r7, #19]


}
 800c922:	4618      	mov	r0, r3
 800c924:	371c      	adds	r7, #28
 800c926:	46bd      	mov	sp, r7
 800c928:	bd90      	pop	{r4, r7, pc}
 800c92a:	bf00      	nop
 800c92c:	00ffff3f 	.word	0x00ffff3f

0800c930 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	685a      	ldr	r2, [r3, #4]
 800c942:	4b21      	ldr	r3, [pc, #132]	; (800c9c8 <HAL_RTC_GetDate+0x98>)
 800c944:	4013      	ands	r3, r2
 800c946:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	0c1b      	lsrs	r3, r3, #16
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	0a1b      	lsrs	r3, r3, #8
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f003 031f 	and.w	r3, r3, #31
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	b2db      	uxtb	r3, r3
 800c966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c96a:	b2da      	uxtb	r2, r3
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	0b5b      	lsrs	r3, r3, #13
 800c974:	b2db      	uxtb	r3, r3
 800c976:	f003 0307 	and.w	r3, r3, #7
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d11a      	bne.n	800c9bc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	78db      	ldrb	r3, [r3, #3]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 f8d4 	bl	800cb38 <RTC_Bcd2ToByte>
 800c990:	4603      	mov	r3, r0
 800c992:	461a      	mov	r2, r3
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	785b      	ldrb	r3, [r3, #1]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 f8cb 	bl	800cb38 <RTC_Bcd2ToByte>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	789b      	ldrb	r3, [r3, #2]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 f8c2 	bl	800cb38 <RTC_Bcd2ToByte>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3718      	adds	r7, #24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	00ffff3f 	.word	0x00ffff3f

0800c9cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a0d      	ldr	r2, [pc, #52]	; (800ca10 <HAL_RTC_WaitForSynchro+0x44>)
 800c9da:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c9dc:	f7f6 fdca 	bl	8003574 <HAL_GetTick>
 800c9e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c9e2:	e009      	b.n	800c9f8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c9e4:	f7f6 fdc6 	bl	8003574 <HAL_GetTick>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	1ad3      	subs	r3, r2, r3
 800c9ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9f2:	d901      	bls.n	800c9f8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	e007      	b.n	800ca08 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	f003 0320 	and.w	r3, r3, #32
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d0ee      	beq.n	800c9e4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	0003ff5f 	.word	0x0003ff5f

0800ca14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d120      	bne.n	800ca70 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ca38:	f7f6 fd9c 	bl	8003574 <HAL_GetTick>
 800ca3c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ca3e:	e00d      	b.n	800ca5c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ca40:	f7f6 fd98 	bl	8003574 <HAL_GetTick>
 800ca44:	4602      	mov	r2, r0
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca4e:	d905      	bls.n	800ca5c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ca50:	2303      	movs	r3, #3
 800ca52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2203      	movs	r2, #3
 800ca58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d102      	bne.n	800ca70 <RTC_EnterInitMode+0x5c>
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	2b03      	cmp	r3, #3
 800ca6e:	d1e7      	bne.n	800ca40 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
	...

0800ca7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca84:	2300      	movs	r3, #0
 800ca86:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800ca88:	4b1a      	ldr	r3, [pc, #104]	; (800caf4 <RTC_ExitInitMode+0x78>)
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	4a19      	ldr	r2, [pc, #100]	; (800caf4 <RTC_ExitInitMode+0x78>)
 800ca8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca92:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ca94:	4b17      	ldr	r3, [pc, #92]	; (800caf4 <RTC_ExitInitMode+0x78>)
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	f003 0320 	and.w	r3, r3, #32
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10c      	bne.n	800caba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7ff ff93 	bl	800c9cc <HAL_RTC_WaitForSynchro>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d01e      	beq.n	800caea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2203      	movs	r2, #3
 800cab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cab4:	2303      	movs	r3, #3
 800cab6:	73fb      	strb	r3, [r7, #15]
 800cab8:	e017      	b.n	800caea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800caba:	4b0e      	ldr	r3, [pc, #56]	; (800caf4 <RTC_ExitInitMode+0x78>)
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	4a0d      	ldr	r2, [pc, #52]	; (800caf4 <RTC_ExitInitMode+0x78>)
 800cac0:	f023 0320 	bic.w	r3, r3, #32
 800cac4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7ff ff80 	bl	800c9cc <HAL_RTC_WaitForSynchro>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d005      	beq.n	800cade <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2203      	movs	r2, #3
 800cad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cada:	2303      	movs	r3, #3
 800cadc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cade:	4b05      	ldr	r3, [pc, #20]	; (800caf4 <RTC_ExitInitMode+0x78>)
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	4a04      	ldr	r2, [pc, #16]	; (800caf4 <RTC_ExitInitMode+0x78>)
 800cae4:	f043 0320 	orr.w	r3, r3, #32
 800cae8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800caea:	7bfb      	ldrb	r3, [r7, #15]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	58004000 	.word	0x58004000

0800caf8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	4603      	mov	r3, r0
 800cb00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cb02:	2300      	movs	r3, #0
 800cb04:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800cb0a:	e005      	b.n	800cb18 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800cb12:	7afb      	ldrb	r3, [r7, #11]
 800cb14:	3b0a      	subs	r3, #10
 800cb16:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800cb18:	7afb      	ldrb	r3, [r7, #11]
 800cb1a:	2b09      	cmp	r3, #9
 800cb1c:	d8f6      	bhi.n	800cb0c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	011b      	lsls	r3, r3, #4
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	7afb      	ldrb	r3, [r7, #11]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	b2db      	uxtb	r3, r3
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800cb42:	79fb      	ldrb	r3, [r7, #7]
 800cb44:	091b      	lsrs	r3, r3, #4
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	461a      	mov	r2, r3
 800cb4a:	0092      	lsls	r2, r2, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	005b      	lsls	r3, r3, #1
 800cb50:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cb52:	79fb      	ldrb	r3, [r7, #7]
 800cb54:	f003 030f 	and.w	r3, r3, #15
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	b2db      	uxtb	r3, r3
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3714      	adds	r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e10f      	b.n	800cd9e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a87      	ldr	r2, [pc, #540]	; (800cda8 <HAL_SPI_Init+0x23c>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d00f      	beq.n	800cbae <HAL_SPI_Init+0x42>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a86      	ldr	r2, [pc, #536]	; (800cdac <HAL_SPI_Init+0x240>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d00a      	beq.n	800cbae <HAL_SPI_Init+0x42>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a84      	ldr	r2, [pc, #528]	; (800cdb0 <HAL_SPI_Init+0x244>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d005      	beq.n	800cbae <HAL_SPI_Init+0x42>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	2b0f      	cmp	r3, #15
 800cba8:	d901      	bls.n	800cbae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e0f7      	b.n	800cd9e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f900 	bl	800cdb4 <SPI_GetPacketSize>
 800cbb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a7b      	ldr	r2, [pc, #492]	; (800cda8 <HAL_SPI_Init+0x23c>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d00c      	beq.n	800cbda <HAL_SPI_Init+0x6e>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a79      	ldr	r2, [pc, #484]	; (800cdac <HAL_SPI_Init+0x240>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d007      	beq.n	800cbda <HAL_SPI_Init+0x6e>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a78      	ldr	r2, [pc, #480]	; (800cdb0 <HAL_SPI_Init+0x244>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d002      	beq.n	800cbda <HAL_SPI_Init+0x6e>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2b08      	cmp	r3, #8
 800cbd8:	d811      	bhi.n	800cbfe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cbde:	4a72      	ldr	r2, [pc, #456]	; (800cda8 <HAL_SPI_Init+0x23c>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d009      	beq.n	800cbf8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a70      	ldr	r2, [pc, #448]	; (800cdac <HAL_SPI_Init+0x240>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d004      	beq.n	800cbf8 <HAL_SPI_Init+0x8c>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a6f      	ldr	r2, [pc, #444]	; (800cdb0 <HAL_SPI_Init+0x244>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d104      	bne.n	800cc02 <HAL_SPI_Init+0x96>
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2b10      	cmp	r3, #16
 800cbfc:	d901      	bls.n	800cc02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e0cd      	b.n	800cd9e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d106      	bne.n	800cc1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7f5 ffdc 	bl	8002bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2202      	movs	r2, #2
 800cc20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f022 0201 	bic.w	r2, r2, #1
 800cc32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cc3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc48:	d119      	bne.n	800cc7e <HAL_SPI_Init+0x112>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc52:	d103      	bne.n	800cc5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d008      	beq.n	800cc6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10c      	bne.n	800cc7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cc68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc6c:	d107      	bne.n	800cc7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cc7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00f      	beq.n	800ccaa <HAL_SPI_Init+0x13e>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	2b06      	cmp	r3, #6
 800cc90:	d90b      	bls.n	800ccaa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	430a      	orrs	r2, r1
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	e007      	b.n	800ccba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ccb8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	69da      	ldr	r2, [r3, #28]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cccc:	ea42 0103 	orr.w	r1, r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68da      	ldr	r2, [r3, #12]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	430a      	orrs	r2, r1
 800ccda:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce4:	431a      	orrs	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccea:	431a      	orrs	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	699b      	ldr	r3, [r3, #24]
 800ccf0:	431a      	orrs	r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	695b      	ldr	r3, [r3, #20]
 800ccfc:	431a      	orrs	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a1b      	ldr	r3, [r3, #32]
 800cd02:	431a      	orrs	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	431a      	orrs	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	431a      	orrs	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd1a:	ea42 0103 	orr.w	r1, r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	430a      	orrs	r2, r1
 800cd28:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d113      	bne.n	800cd5a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f022 0201 	bic.w	r2, r2, #1
 800cd68:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00a      	beq.n	800cd8c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	430a      	orrs	r2, r1
 800cd8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	40013000 	.word	0x40013000
 800cdac:	40003800 	.word	0x40003800
 800cdb0:	40003c00 	.word	0x40003c00

0800cdb4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc0:	095b      	lsrs	r3, r3, #5
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	3307      	adds	r3, #7
 800cdd2:	08db      	lsrs	r3, r3, #3
 800cdd4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	fb02 f303 	mul.w	r3, r2, r3
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b082      	sub	sp, #8
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d101      	bne.n	800cdfc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e049      	b.n	800ce90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d106      	bne.n	800ce16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7f5 ff95 	bl	8002d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2202      	movs	r2, #2
 800ce1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3304      	adds	r3, #4
 800ce26:	4619      	mov	r1, r3
 800ce28:	4610      	mov	r0, r2
 800ce2a:	f000 ff41 	bl	800dcb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2201      	movs	r2, #1
 800ce62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2201      	movs	r2, #1
 800ce6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2201      	movs	r2, #1
 800ce72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d001      	beq.n	800ceb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ceac:	2301      	movs	r3, #1
 800ceae:	e04c      	b.n	800cf4a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2202      	movs	r2, #2
 800ceb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a26      	ldr	r2, [pc, #152]	; (800cf58 <HAL_TIM_Base_Start+0xc0>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d022      	beq.n	800cf08 <HAL_TIM_Base_Start+0x70>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceca:	d01d      	beq.n	800cf08 <HAL_TIM_Base_Start+0x70>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a22      	ldr	r2, [pc, #136]	; (800cf5c <HAL_TIM_Base_Start+0xc4>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d018      	beq.n	800cf08 <HAL_TIM_Base_Start+0x70>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a21      	ldr	r2, [pc, #132]	; (800cf60 <HAL_TIM_Base_Start+0xc8>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d013      	beq.n	800cf08 <HAL_TIM_Base_Start+0x70>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a1f      	ldr	r2, [pc, #124]	; (800cf64 <HAL_TIM_Base_Start+0xcc>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d00e      	beq.n	800cf08 <HAL_TIM_Base_Start+0x70>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a1e      	ldr	r2, [pc, #120]	; (800cf68 <HAL_TIM_Base_Start+0xd0>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d009      	beq.n	800cf08 <HAL_TIM_Base_Start+0x70>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a1c      	ldr	r2, [pc, #112]	; (800cf6c <HAL_TIM_Base_Start+0xd4>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d004      	beq.n	800cf08 <HAL_TIM_Base_Start+0x70>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a1b      	ldr	r2, [pc, #108]	; (800cf70 <HAL_TIM_Base_Start+0xd8>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d115      	bne.n	800cf34 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	689a      	ldr	r2, [r3, #8]
 800cf0e:	4b19      	ldr	r3, [pc, #100]	; (800cf74 <HAL_TIM_Base_Start+0xdc>)
 800cf10:	4013      	ands	r3, r2
 800cf12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b06      	cmp	r3, #6
 800cf18:	d015      	beq.n	800cf46 <HAL_TIM_Base_Start+0xae>
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf20:	d011      	beq.n	800cf46 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f042 0201 	orr.w	r2, r2, #1
 800cf30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf32:	e008      	b.n	800cf46 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f042 0201 	orr.w	r2, r2, #1
 800cf42:	601a      	str	r2, [r3, #0]
 800cf44:	e000      	b.n	800cf48 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf48:	2300      	movs	r3, #0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3714      	adds	r7, #20
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	40010000 	.word	0x40010000
 800cf5c:	40000400 	.word	0x40000400
 800cf60:	40000800 	.word	0x40000800
 800cf64:	40000c00 	.word	0x40000c00
 800cf68:	40010400 	.word	0x40010400
 800cf6c:	40001800 	.word	0x40001800
 800cf70:	40014000 	.word	0x40014000
 800cf74:	00010007 	.word	0x00010007

0800cf78 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6a1a      	ldr	r2, [r3, #32]
 800cf86:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10f      	bne.n	800cfb0 <HAL_TIM_Base_Stop+0x38>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6a1a      	ldr	r2, [r3, #32]
 800cf96:	f240 4344 	movw	r3, #1092	; 0x444
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d107      	bne.n	800cfb0 <HAL_TIM_Base_Stop+0x38>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f022 0201 	bic.w	r2, r2, #1
 800cfae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	370c      	adds	r7, #12
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
	...

0800cfc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d001      	beq.n	800cfe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e054      	b.n	800d08a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2202      	movs	r2, #2
 800cfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	68da      	ldr	r2, [r3, #12]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f042 0201 	orr.w	r2, r2, #1
 800cff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a26      	ldr	r2, [pc, #152]	; (800d098 <HAL_TIM_Base_Start_IT+0xd0>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d022      	beq.n	800d048 <HAL_TIM_Base_Start_IT+0x80>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d00a:	d01d      	beq.n	800d048 <HAL_TIM_Base_Start_IT+0x80>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a22      	ldr	r2, [pc, #136]	; (800d09c <HAL_TIM_Base_Start_IT+0xd4>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d018      	beq.n	800d048 <HAL_TIM_Base_Start_IT+0x80>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a21      	ldr	r2, [pc, #132]	; (800d0a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d013      	beq.n	800d048 <HAL_TIM_Base_Start_IT+0x80>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a1f      	ldr	r2, [pc, #124]	; (800d0a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d00e      	beq.n	800d048 <HAL_TIM_Base_Start_IT+0x80>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a1e      	ldr	r2, [pc, #120]	; (800d0a8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d009      	beq.n	800d048 <HAL_TIM_Base_Start_IT+0x80>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a1c      	ldr	r2, [pc, #112]	; (800d0ac <HAL_TIM_Base_Start_IT+0xe4>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d004      	beq.n	800d048 <HAL_TIM_Base_Start_IT+0x80>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a1b      	ldr	r2, [pc, #108]	; (800d0b0 <HAL_TIM_Base_Start_IT+0xe8>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d115      	bne.n	800d074 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	689a      	ldr	r2, [r3, #8]
 800d04e:	4b19      	ldr	r3, [pc, #100]	; (800d0b4 <HAL_TIM_Base_Start_IT+0xec>)
 800d050:	4013      	ands	r3, r2
 800d052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2b06      	cmp	r3, #6
 800d058:	d015      	beq.n	800d086 <HAL_TIM_Base_Start_IT+0xbe>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d060:	d011      	beq.n	800d086 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f042 0201 	orr.w	r2, r2, #1
 800d070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d072:	e008      	b.n	800d086 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f042 0201 	orr.w	r2, r2, #1
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	e000      	b.n	800d088 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d086:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	40010000 	.word	0x40010000
 800d09c:	40000400 	.word	0x40000400
 800d0a0:	40000800 	.word	0x40000800
 800d0a4:	40000c00 	.word	0x40000c00
 800d0a8:	40010400 	.word	0x40010400
 800d0ac:	40001800 	.word	0x40001800
 800d0b0:	40014000 	.word	0x40014000
 800d0b4:	00010007 	.word	0x00010007

0800d0b8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d109      	bne.n	800d0e0 <HAL_TIM_OC_Start_IT+0x28>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	bf14      	ite	ne
 800d0d8:	2301      	movne	r3, #1
 800d0da:	2300      	moveq	r3, #0
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	e03c      	b.n	800d15a <HAL_TIM_OC_Start_IT+0xa2>
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2b04      	cmp	r3, #4
 800d0e4:	d109      	bne.n	800d0fa <HAL_TIM_OC_Start_IT+0x42>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	bf14      	ite	ne
 800d0f2:	2301      	movne	r3, #1
 800d0f4:	2300      	moveq	r3, #0
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	e02f      	b.n	800d15a <HAL_TIM_OC_Start_IT+0xa2>
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b08      	cmp	r3, #8
 800d0fe:	d109      	bne.n	800d114 <HAL_TIM_OC_Start_IT+0x5c>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b01      	cmp	r3, #1
 800d10a:	bf14      	ite	ne
 800d10c:	2301      	movne	r3, #1
 800d10e:	2300      	moveq	r3, #0
 800d110:	b2db      	uxtb	r3, r3
 800d112:	e022      	b.n	800d15a <HAL_TIM_OC_Start_IT+0xa2>
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2b0c      	cmp	r3, #12
 800d118:	d109      	bne.n	800d12e <HAL_TIM_OC_Start_IT+0x76>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b01      	cmp	r3, #1
 800d124:	bf14      	ite	ne
 800d126:	2301      	movne	r3, #1
 800d128:	2300      	moveq	r3, #0
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	e015      	b.n	800d15a <HAL_TIM_OC_Start_IT+0xa2>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b10      	cmp	r3, #16
 800d132:	d109      	bne.n	800d148 <HAL_TIM_OC_Start_IT+0x90>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	bf14      	ite	ne
 800d140:	2301      	movne	r3, #1
 800d142:	2300      	moveq	r3, #0
 800d144:	b2db      	uxtb	r3, r3
 800d146:	e008      	b.n	800d15a <HAL_TIM_OC_Start_IT+0xa2>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b01      	cmp	r3, #1
 800d152:	bf14      	ite	ne
 800d154:	2301      	movne	r3, #1
 800d156:	2300      	moveq	r3, #0
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e0ec      	b.n	800d33c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d104      	bne.n	800d172 <HAL_TIM_OC_Start_IT+0xba>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2202      	movs	r2, #2
 800d16c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d170:	e023      	b.n	800d1ba <HAL_TIM_OC_Start_IT+0x102>
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b04      	cmp	r3, #4
 800d176:	d104      	bne.n	800d182 <HAL_TIM_OC_Start_IT+0xca>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2202      	movs	r2, #2
 800d17c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d180:	e01b      	b.n	800d1ba <HAL_TIM_OC_Start_IT+0x102>
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b08      	cmp	r3, #8
 800d186:	d104      	bne.n	800d192 <HAL_TIM_OC_Start_IT+0xda>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2202      	movs	r2, #2
 800d18c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d190:	e013      	b.n	800d1ba <HAL_TIM_OC_Start_IT+0x102>
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2b0c      	cmp	r3, #12
 800d196:	d104      	bne.n	800d1a2 <HAL_TIM_OC_Start_IT+0xea>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2202      	movs	r2, #2
 800d19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1a0:	e00b      	b.n	800d1ba <HAL_TIM_OC_Start_IT+0x102>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b10      	cmp	r3, #16
 800d1a6:	d104      	bne.n	800d1b2 <HAL_TIM_OC_Start_IT+0xfa>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1b0:	e003      	b.n	800d1ba <HAL_TIM_OC_Start_IT+0x102>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2202      	movs	r2, #2
 800d1b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b0c      	cmp	r3, #12
 800d1be:	d841      	bhi.n	800d244 <HAL_TIM_OC_Start_IT+0x18c>
 800d1c0:	a201      	add	r2, pc, #4	; (adr r2, 800d1c8 <HAL_TIM_OC_Start_IT+0x110>)
 800d1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c6:	bf00      	nop
 800d1c8:	0800d1fd 	.word	0x0800d1fd
 800d1cc:	0800d245 	.word	0x0800d245
 800d1d0:	0800d245 	.word	0x0800d245
 800d1d4:	0800d245 	.word	0x0800d245
 800d1d8:	0800d20f 	.word	0x0800d20f
 800d1dc:	0800d245 	.word	0x0800d245
 800d1e0:	0800d245 	.word	0x0800d245
 800d1e4:	0800d245 	.word	0x0800d245
 800d1e8:	0800d221 	.word	0x0800d221
 800d1ec:	0800d245 	.word	0x0800d245
 800d1f0:	0800d245 	.word	0x0800d245
 800d1f4:	0800d245 	.word	0x0800d245
 800d1f8:	0800d233 	.word	0x0800d233
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68da      	ldr	r2, [r3, #12]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f042 0202 	orr.w	r2, r2, #2
 800d20a:	60da      	str	r2, [r3, #12]
      break;
 800d20c:	e01d      	b.n	800d24a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68da      	ldr	r2, [r3, #12]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f042 0204 	orr.w	r2, r2, #4
 800d21c:	60da      	str	r2, [r3, #12]
      break;
 800d21e:	e014      	b.n	800d24a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68da      	ldr	r2, [r3, #12]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f042 0208 	orr.w	r2, r2, #8
 800d22e:	60da      	str	r2, [r3, #12]
      break;
 800d230:	e00b      	b.n	800d24a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	68da      	ldr	r2, [r3, #12]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f042 0210 	orr.w	r2, r2, #16
 800d240:	60da      	str	r2, [r3, #12]
      break;
 800d242:	e002      	b.n	800d24a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	73fb      	strb	r3, [r7, #15]
      break;
 800d248:	bf00      	nop
  }

  if (status == HAL_OK)
 800d24a:	7bfb      	ldrb	r3, [r7, #15]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d174      	bne.n	800d33a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2201      	movs	r2, #1
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	4618      	mov	r0, r3
 800d25a:	f001 f943 	bl	800e4e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a38      	ldr	r2, [pc, #224]	; (800d344 <HAL_TIM_OC_Start_IT+0x28c>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d013      	beq.n	800d290 <HAL_TIM_OC_Start_IT+0x1d8>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a36      	ldr	r2, [pc, #216]	; (800d348 <HAL_TIM_OC_Start_IT+0x290>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d00e      	beq.n	800d290 <HAL_TIM_OC_Start_IT+0x1d8>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a35      	ldr	r2, [pc, #212]	; (800d34c <HAL_TIM_OC_Start_IT+0x294>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d009      	beq.n	800d290 <HAL_TIM_OC_Start_IT+0x1d8>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a33      	ldr	r2, [pc, #204]	; (800d350 <HAL_TIM_OC_Start_IT+0x298>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d004      	beq.n	800d290 <HAL_TIM_OC_Start_IT+0x1d8>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a32      	ldr	r2, [pc, #200]	; (800d354 <HAL_TIM_OC_Start_IT+0x29c>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d101      	bne.n	800d294 <HAL_TIM_OC_Start_IT+0x1dc>
 800d290:	2301      	movs	r3, #1
 800d292:	e000      	b.n	800d296 <HAL_TIM_OC_Start_IT+0x1de>
 800d294:	2300      	movs	r3, #0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d007      	beq.n	800d2aa <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a25      	ldr	r2, [pc, #148]	; (800d344 <HAL_TIM_OC_Start_IT+0x28c>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d022      	beq.n	800d2fa <HAL_TIM_OC_Start_IT+0x242>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2bc:	d01d      	beq.n	800d2fa <HAL_TIM_OC_Start_IT+0x242>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a25      	ldr	r2, [pc, #148]	; (800d358 <HAL_TIM_OC_Start_IT+0x2a0>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d018      	beq.n	800d2fa <HAL_TIM_OC_Start_IT+0x242>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a23      	ldr	r2, [pc, #140]	; (800d35c <HAL_TIM_OC_Start_IT+0x2a4>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d013      	beq.n	800d2fa <HAL_TIM_OC_Start_IT+0x242>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a22      	ldr	r2, [pc, #136]	; (800d360 <HAL_TIM_OC_Start_IT+0x2a8>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d00e      	beq.n	800d2fa <HAL_TIM_OC_Start_IT+0x242>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a19      	ldr	r2, [pc, #100]	; (800d348 <HAL_TIM_OC_Start_IT+0x290>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d009      	beq.n	800d2fa <HAL_TIM_OC_Start_IT+0x242>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a1e      	ldr	r2, [pc, #120]	; (800d364 <HAL_TIM_OC_Start_IT+0x2ac>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d004      	beq.n	800d2fa <HAL_TIM_OC_Start_IT+0x242>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a15      	ldr	r2, [pc, #84]	; (800d34c <HAL_TIM_OC_Start_IT+0x294>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d115      	bne.n	800d326 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	689a      	ldr	r2, [r3, #8]
 800d300:	4b19      	ldr	r3, [pc, #100]	; (800d368 <HAL_TIM_OC_Start_IT+0x2b0>)
 800d302:	4013      	ands	r3, r2
 800d304:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b06      	cmp	r3, #6
 800d30a:	d015      	beq.n	800d338 <HAL_TIM_OC_Start_IT+0x280>
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d312:	d011      	beq.n	800d338 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f042 0201 	orr.w	r2, r2, #1
 800d322:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d324:	e008      	b.n	800d338 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f042 0201 	orr.w	r2, r2, #1
 800d334:	601a      	str	r2, [r3, #0]
 800d336:	e000      	b.n	800d33a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d338:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	40010000 	.word	0x40010000
 800d348:	40010400 	.word	0x40010400
 800d34c:	40014000 	.word	0x40014000
 800d350:	40014400 	.word	0x40014400
 800d354:	40014800 	.word	0x40014800
 800d358:	40000400 	.word	0x40000400
 800d35c:	40000800 	.word	0x40000800
 800d360:	40000c00 	.word	0x40000c00
 800d364:	40001800 	.word	0x40001800
 800d368:	00010007 	.word	0x00010007

0800d36c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	e049      	b.n	800d412 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	d106      	bne.n	800d398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f841 	bl	800d41a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2202      	movs	r2, #2
 800d39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	f000 fc80 	bl	800dcb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d41a:	b480      	push	{r7}
 800d41c:	b083      	sub	sp, #12
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d422:	bf00      	nop
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
	...

0800d430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d109      	bne.n	800d454 <HAL_TIM_PWM_Start+0x24>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b01      	cmp	r3, #1
 800d44a:	bf14      	ite	ne
 800d44c:	2301      	movne	r3, #1
 800d44e:	2300      	moveq	r3, #0
 800d450:	b2db      	uxtb	r3, r3
 800d452:	e03c      	b.n	800d4ce <HAL_TIM_PWM_Start+0x9e>
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2b04      	cmp	r3, #4
 800d458:	d109      	bne.n	800d46e <HAL_TIM_PWM_Start+0x3e>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b01      	cmp	r3, #1
 800d464:	bf14      	ite	ne
 800d466:	2301      	movne	r3, #1
 800d468:	2300      	moveq	r3, #0
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	e02f      	b.n	800d4ce <HAL_TIM_PWM_Start+0x9e>
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	2b08      	cmp	r3, #8
 800d472:	d109      	bne.n	800d488 <HAL_TIM_PWM_Start+0x58>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	bf14      	ite	ne
 800d480:	2301      	movne	r3, #1
 800d482:	2300      	moveq	r3, #0
 800d484:	b2db      	uxtb	r3, r3
 800d486:	e022      	b.n	800d4ce <HAL_TIM_PWM_Start+0x9e>
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b0c      	cmp	r3, #12
 800d48c:	d109      	bne.n	800d4a2 <HAL_TIM_PWM_Start+0x72>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b01      	cmp	r3, #1
 800d498:	bf14      	ite	ne
 800d49a:	2301      	movne	r3, #1
 800d49c:	2300      	moveq	r3, #0
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	e015      	b.n	800d4ce <HAL_TIM_PWM_Start+0x9e>
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2b10      	cmp	r3, #16
 800d4a6:	d109      	bne.n	800d4bc <HAL_TIM_PWM_Start+0x8c>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	bf14      	ite	ne
 800d4b4:	2301      	movne	r3, #1
 800d4b6:	2300      	moveq	r3, #0
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	e008      	b.n	800d4ce <HAL_TIM_PWM_Start+0x9e>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	bf14      	ite	ne
 800d4c8:	2301      	movne	r3, #1
 800d4ca:	2300      	moveq	r3, #0
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d001      	beq.n	800d4d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e0a1      	b.n	800d61a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d104      	bne.n	800d4e6 <HAL_TIM_PWM_Start+0xb6>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2202      	movs	r2, #2
 800d4e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4e4:	e023      	b.n	800d52e <HAL_TIM_PWM_Start+0xfe>
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	2b04      	cmp	r3, #4
 800d4ea:	d104      	bne.n	800d4f6 <HAL_TIM_PWM_Start+0xc6>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2202      	movs	r2, #2
 800d4f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4f4:	e01b      	b.n	800d52e <HAL_TIM_PWM_Start+0xfe>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b08      	cmp	r3, #8
 800d4fa:	d104      	bne.n	800d506 <HAL_TIM_PWM_Start+0xd6>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2202      	movs	r2, #2
 800d500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d504:	e013      	b.n	800d52e <HAL_TIM_PWM_Start+0xfe>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b0c      	cmp	r3, #12
 800d50a:	d104      	bne.n	800d516 <HAL_TIM_PWM_Start+0xe6>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2202      	movs	r2, #2
 800d510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d514:	e00b      	b.n	800d52e <HAL_TIM_PWM_Start+0xfe>
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	2b10      	cmp	r3, #16
 800d51a:	d104      	bne.n	800d526 <HAL_TIM_PWM_Start+0xf6>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2202      	movs	r2, #2
 800d520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d524:	e003      	b.n	800d52e <HAL_TIM_PWM_Start+0xfe>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2202      	movs	r2, #2
 800d52a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2201      	movs	r2, #1
 800d534:	6839      	ldr	r1, [r7, #0]
 800d536:	4618      	mov	r0, r3
 800d538:	f000 ffd4 	bl	800e4e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a38      	ldr	r2, [pc, #224]	; (800d624 <HAL_TIM_PWM_Start+0x1f4>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d013      	beq.n	800d56e <HAL_TIM_PWM_Start+0x13e>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a37      	ldr	r2, [pc, #220]	; (800d628 <HAL_TIM_PWM_Start+0x1f8>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d00e      	beq.n	800d56e <HAL_TIM_PWM_Start+0x13e>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a35      	ldr	r2, [pc, #212]	; (800d62c <HAL_TIM_PWM_Start+0x1fc>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d009      	beq.n	800d56e <HAL_TIM_PWM_Start+0x13e>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a34      	ldr	r2, [pc, #208]	; (800d630 <HAL_TIM_PWM_Start+0x200>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d004      	beq.n	800d56e <HAL_TIM_PWM_Start+0x13e>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a32      	ldr	r2, [pc, #200]	; (800d634 <HAL_TIM_PWM_Start+0x204>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d101      	bne.n	800d572 <HAL_TIM_PWM_Start+0x142>
 800d56e:	2301      	movs	r3, #1
 800d570:	e000      	b.n	800d574 <HAL_TIM_PWM_Start+0x144>
 800d572:	2300      	movs	r3, #0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d007      	beq.n	800d588 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d586:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a25      	ldr	r2, [pc, #148]	; (800d624 <HAL_TIM_PWM_Start+0x1f4>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d022      	beq.n	800d5d8 <HAL_TIM_PWM_Start+0x1a8>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d59a:	d01d      	beq.n	800d5d8 <HAL_TIM_PWM_Start+0x1a8>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a25      	ldr	r2, [pc, #148]	; (800d638 <HAL_TIM_PWM_Start+0x208>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d018      	beq.n	800d5d8 <HAL_TIM_PWM_Start+0x1a8>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a24      	ldr	r2, [pc, #144]	; (800d63c <HAL_TIM_PWM_Start+0x20c>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d013      	beq.n	800d5d8 <HAL_TIM_PWM_Start+0x1a8>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a22      	ldr	r2, [pc, #136]	; (800d640 <HAL_TIM_PWM_Start+0x210>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d00e      	beq.n	800d5d8 <HAL_TIM_PWM_Start+0x1a8>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a1a      	ldr	r2, [pc, #104]	; (800d628 <HAL_TIM_PWM_Start+0x1f8>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d009      	beq.n	800d5d8 <HAL_TIM_PWM_Start+0x1a8>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a1e      	ldr	r2, [pc, #120]	; (800d644 <HAL_TIM_PWM_Start+0x214>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d004      	beq.n	800d5d8 <HAL_TIM_PWM_Start+0x1a8>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a16      	ldr	r2, [pc, #88]	; (800d62c <HAL_TIM_PWM_Start+0x1fc>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d115      	bne.n	800d604 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	4b1a      	ldr	r3, [pc, #104]	; (800d648 <HAL_TIM_PWM_Start+0x218>)
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b06      	cmp	r3, #6
 800d5e8:	d015      	beq.n	800d616 <HAL_TIM_PWM_Start+0x1e6>
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5f0:	d011      	beq.n	800d616 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f042 0201 	orr.w	r2, r2, #1
 800d600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d602:	e008      	b.n	800d616 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f042 0201 	orr.w	r2, r2, #1
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	e000      	b.n	800d618 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	40010000 	.word	0x40010000
 800d628:	40010400 	.word	0x40010400
 800d62c:	40014000 	.word	0x40014000
 800d630:	40014400 	.word	0x40014400
 800d634:	40014800 	.word	0x40014800
 800d638:	40000400 	.word	0x40000400
 800d63c:	40000800 	.word	0x40000800
 800d640:	40000c00 	.word	0x40000c00
 800d644:	40001800 	.word	0x40001800
 800d648:	00010007 	.word	0x00010007

0800d64c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	f003 0302 	and.w	r3, r3, #2
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d020      	beq.n	800d6b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d01b      	beq.n	800d6b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f06f 0202 	mvn.w	r2, #2
 800d680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	699b      	ldr	r3, [r3, #24]
 800d68e:	f003 0303 	and.w	r3, r3, #3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 faec 	bl	800dc74 <HAL_TIM_IC_CaptureCallback>
 800d69c:	e005      	b.n	800d6aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7f2 ffa0 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 faef 	bl	800dc88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	f003 0304 	and.w	r3, r3, #4
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d020      	beq.n	800d6fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f003 0304 	and.w	r3, r3, #4
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d01b      	beq.n	800d6fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f06f 0204 	mvn.w	r2, #4
 800d6cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2202      	movs	r2, #2
 800d6d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d003      	beq.n	800d6ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fac6 	bl	800dc74 <HAL_TIM_IC_CaptureCallback>
 800d6e8:	e005      	b.n	800d6f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7f2 ff7a 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 fac9 	bl	800dc88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	f003 0308 	and.w	r3, r3, #8
 800d702:	2b00      	cmp	r3, #0
 800d704:	d020      	beq.n	800d748 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f003 0308 	and.w	r3, r3, #8
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d01b      	beq.n	800d748 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f06f 0208 	mvn.w	r2, #8
 800d718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2204      	movs	r2, #4
 800d71e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	69db      	ldr	r3, [r3, #28]
 800d726:	f003 0303 	and.w	r3, r3, #3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d003      	beq.n	800d736 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 faa0 	bl	800dc74 <HAL_TIM_IC_CaptureCallback>
 800d734:	e005      	b.n	800d742 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7f2 ff54 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 faa3 	bl	800dc88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	f003 0310 	and.w	r3, r3, #16
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d020      	beq.n	800d794 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f003 0310 	and.w	r3, r3, #16
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d01b      	beq.n	800d794 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f06f 0210 	mvn.w	r2, #16
 800d764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2208      	movs	r2, #8
 800d76a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	69db      	ldr	r3, [r3, #28]
 800d772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d776:	2b00      	cmp	r3, #0
 800d778:	d003      	beq.n	800d782 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 fa7a 	bl	800dc74 <HAL_TIM_IC_CaptureCallback>
 800d780:	e005      	b.n	800d78e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7f2 ff2e 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fa7d 	bl	800dc88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f003 0301 	and.w	r3, r3, #1
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00c      	beq.n	800d7b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d007      	beq.n	800d7b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f06f 0201 	mvn.w	r2, #1
 800d7b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7f4 ffa0 	bl	80026f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d104      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00c      	beq.n	800d7e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d007      	beq.n	800d7e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d7de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 ffbb 	bl	800e75c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00c      	beq.n	800d80a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d007      	beq.n	800d80a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 ffb3 	bl	800e770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00c      	beq.n	800d82e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d007      	beq.n	800d82e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fa37 	bl	800dc9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	f003 0320 	and.w	r3, r3, #32
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00c      	beq.n	800d852 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f003 0320 	and.w	r3, r3, #32
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d007      	beq.n	800d852 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f06f 0220 	mvn.w	r2, #32
 800d84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 ff7b 	bl	800e748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d852:	bf00      	nop
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
	...

0800d85c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d872:	2b01      	cmp	r3, #1
 800d874:	d101      	bne.n	800d87a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d876:	2302      	movs	r3, #2
 800d878:	e0ff      	b.n	800da7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2b14      	cmp	r3, #20
 800d886:	f200 80f0 	bhi.w	800da6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d88a:	a201      	add	r2, pc, #4	; (adr r2, 800d890 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d890:	0800d8e5 	.word	0x0800d8e5
 800d894:	0800da6b 	.word	0x0800da6b
 800d898:	0800da6b 	.word	0x0800da6b
 800d89c:	0800da6b 	.word	0x0800da6b
 800d8a0:	0800d925 	.word	0x0800d925
 800d8a4:	0800da6b 	.word	0x0800da6b
 800d8a8:	0800da6b 	.word	0x0800da6b
 800d8ac:	0800da6b 	.word	0x0800da6b
 800d8b0:	0800d967 	.word	0x0800d967
 800d8b4:	0800da6b 	.word	0x0800da6b
 800d8b8:	0800da6b 	.word	0x0800da6b
 800d8bc:	0800da6b 	.word	0x0800da6b
 800d8c0:	0800d9a7 	.word	0x0800d9a7
 800d8c4:	0800da6b 	.word	0x0800da6b
 800d8c8:	0800da6b 	.word	0x0800da6b
 800d8cc:	0800da6b 	.word	0x0800da6b
 800d8d0:	0800d9e9 	.word	0x0800d9e9
 800d8d4:	0800da6b 	.word	0x0800da6b
 800d8d8:	0800da6b 	.word	0x0800da6b
 800d8dc:	0800da6b 	.word	0x0800da6b
 800d8e0:	0800da29 	.word	0x0800da29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	68b9      	ldr	r1, [r7, #8]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 fa86 	bl	800ddfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	699a      	ldr	r2, [r3, #24]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f042 0208 	orr.w	r2, r2, #8
 800d8fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	699a      	ldr	r2, [r3, #24]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f022 0204 	bic.w	r2, r2, #4
 800d90e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6999      	ldr	r1, [r3, #24]
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	691a      	ldr	r2, [r3, #16]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	430a      	orrs	r2, r1
 800d920:	619a      	str	r2, [r3, #24]
      break;
 800d922:	e0a5      	b.n	800da70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68b9      	ldr	r1, [r7, #8]
 800d92a:	4618      	mov	r0, r3
 800d92c:	f000 faf6 	bl	800df1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	699a      	ldr	r2, [r3, #24]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d93e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	699a      	ldr	r2, [r3, #24]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d94e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6999      	ldr	r1, [r3, #24]
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	691b      	ldr	r3, [r3, #16]
 800d95a:	021a      	lsls	r2, r3, #8
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	430a      	orrs	r2, r1
 800d962:	619a      	str	r2, [r3, #24]
      break;
 800d964:	e084      	b.n	800da70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68b9      	ldr	r1, [r7, #8]
 800d96c:	4618      	mov	r0, r3
 800d96e:	f000 fb5f 	bl	800e030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	69da      	ldr	r2, [r3, #28]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f042 0208 	orr.w	r2, r2, #8
 800d980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	69da      	ldr	r2, [r3, #28]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f022 0204 	bic.w	r2, r2, #4
 800d990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	69d9      	ldr	r1, [r3, #28]
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	691a      	ldr	r2, [r3, #16]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	430a      	orrs	r2, r1
 800d9a2:	61da      	str	r2, [r3, #28]
      break;
 800d9a4:	e064      	b.n	800da70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	68b9      	ldr	r1, [r7, #8]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f000 fbc7 	bl	800e140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	69da      	ldr	r2, [r3, #28]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	69da      	ldr	r2, [r3, #28]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	69d9      	ldr	r1, [r3, #28]
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	021a      	lsls	r2, r3, #8
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	430a      	orrs	r2, r1
 800d9e4:	61da      	str	r2, [r3, #28]
      break;
 800d9e6:	e043      	b.n	800da70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	68b9      	ldr	r1, [r7, #8]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 fc10 	bl	800e214 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f042 0208 	orr.w	r2, r2, #8
 800da02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f022 0204 	bic.w	r2, r2, #4
 800da12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	691a      	ldr	r2, [r3, #16]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	430a      	orrs	r2, r1
 800da24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800da26:	e023      	b.n	800da70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68b9      	ldr	r1, [r7, #8]
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 fc54 	bl	800e2dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	021a      	lsls	r2, r3, #8
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	430a      	orrs	r2, r1
 800da66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800da68:	e002      	b.n	800da70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800da6a:	2301      	movs	r3, #1
 800da6c:	75fb      	strb	r3, [r7, #23]
      break;
 800da6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800da78:	7dfb      	ldrb	r3, [r7, #23]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3718      	adds	r7, #24
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop

0800da84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da8e:	2300      	movs	r3, #0
 800da90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d101      	bne.n	800daa0 <HAL_TIM_ConfigClockSource+0x1c>
 800da9c:	2302      	movs	r3, #2
 800da9e:	e0dc      	b.n	800dc5a <HAL_TIM_ConfigClockSource+0x1d6>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2202      	movs	r2, #2
 800daac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dab8:	68ba      	ldr	r2, [r7, #8]
 800daba:	4b6a      	ldr	r3, [pc, #424]	; (800dc64 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dabc:	4013      	ands	r3, r2
 800dabe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a64      	ldr	r2, [pc, #400]	; (800dc68 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	f000 80a9 	beq.w	800dc2e <HAL_TIM_ConfigClockSource+0x1aa>
 800dadc:	4a62      	ldr	r2, [pc, #392]	; (800dc68 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	f200 80ae 	bhi.w	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800dae4:	4a61      	ldr	r2, [pc, #388]	; (800dc6c <HAL_TIM_ConfigClockSource+0x1e8>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	f000 80a1 	beq.w	800dc2e <HAL_TIM_ConfigClockSource+0x1aa>
 800daec:	4a5f      	ldr	r2, [pc, #380]	; (800dc6c <HAL_TIM_ConfigClockSource+0x1e8>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	f200 80a6 	bhi.w	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800daf4:	4a5e      	ldr	r2, [pc, #376]	; (800dc70 <HAL_TIM_ConfigClockSource+0x1ec>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	f000 8099 	beq.w	800dc2e <HAL_TIM_ConfigClockSource+0x1aa>
 800dafc:	4a5c      	ldr	r2, [pc, #368]	; (800dc70 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	f200 809e 	bhi.w	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db08:	f000 8091 	beq.w	800dc2e <HAL_TIM_ConfigClockSource+0x1aa>
 800db0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db10:	f200 8096 	bhi.w	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db18:	f000 8089 	beq.w	800dc2e <HAL_TIM_ConfigClockSource+0x1aa>
 800db1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db20:	f200 808e 	bhi.w	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db28:	d03e      	beq.n	800dba8 <HAL_TIM_ConfigClockSource+0x124>
 800db2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db2e:	f200 8087 	bhi.w	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db36:	f000 8086 	beq.w	800dc46 <HAL_TIM_ConfigClockSource+0x1c2>
 800db3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db3e:	d87f      	bhi.n	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db40:	2b70      	cmp	r3, #112	; 0x70
 800db42:	d01a      	beq.n	800db7a <HAL_TIM_ConfigClockSource+0xf6>
 800db44:	2b70      	cmp	r3, #112	; 0x70
 800db46:	d87b      	bhi.n	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db48:	2b60      	cmp	r3, #96	; 0x60
 800db4a:	d050      	beq.n	800dbee <HAL_TIM_ConfigClockSource+0x16a>
 800db4c:	2b60      	cmp	r3, #96	; 0x60
 800db4e:	d877      	bhi.n	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db50:	2b50      	cmp	r3, #80	; 0x50
 800db52:	d03c      	beq.n	800dbce <HAL_TIM_ConfigClockSource+0x14a>
 800db54:	2b50      	cmp	r3, #80	; 0x50
 800db56:	d873      	bhi.n	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db58:	2b40      	cmp	r3, #64	; 0x40
 800db5a:	d058      	beq.n	800dc0e <HAL_TIM_ConfigClockSource+0x18a>
 800db5c:	2b40      	cmp	r3, #64	; 0x40
 800db5e:	d86f      	bhi.n	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db60:	2b30      	cmp	r3, #48	; 0x30
 800db62:	d064      	beq.n	800dc2e <HAL_TIM_ConfigClockSource+0x1aa>
 800db64:	2b30      	cmp	r3, #48	; 0x30
 800db66:	d86b      	bhi.n	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db68:	2b20      	cmp	r3, #32
 800db6a:	d060      	beq.n	800dc2e <HAL_TIM_ConfigClockSource+0x1aa>
 800db6c:	2b20      	cmp	r3, #32
 800db6e:	d867      	bhi.n	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
 800db70:	2b00      	cmp	r3, #0
 800db72:	d05c      	beq.n	800dc2e <HAL_TIM_ConfigClockSource+0x1aa>
 800db74:	2b10      	cmp	r3, #16
 800db76:	d05a      	beq.n	800dc2e <HAL_TIM_ConfigClockSource+0x1aa>
 800db78:	e062      	b.n	800dc40 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6818      	ldr	r0, [r3, #0]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	6899      	ldr	r1, [r3, #8]
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	685a      	ldr	r2, [r3, #4]
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	f000 fc8b 	bl	800e4a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800db9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	609a      	str	r2, [r3, #8]
      break;
 800dba6:	e04f      	b.n	800dc48 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6818      	ldr	r0, [r3, #0]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	6899      	ldr	r1, [r3, #8]
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	685a      	ldr	r2, [r3, #4]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	f000 fc74 	bl	800e4a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	689a      	ldr	r2, [r3, #8]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dbca:	609a      	str	r2, [r3, #8]
      break;
 800dbcc:	e03c      	b.n	800dc48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6818      	ldr	r0, [r3, #0]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	6859      	ldr	r1, [r3, #4]
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	461a      	mov	r2, r3
 800dbdc:	f000 fbe4 	bl	800e3a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2150      	movs	r1, #80	; 0x50
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 fc3e 	bl	800e468 <TIM_ITRx_SetConfig>
      break;
 800dbec:	e02c      	b.n	800dc48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6818      	ldr	r0, [r3, #0]
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	6859      	ldr	r1, [r3, #4]
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	f000 fc03 	bl	800e406 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2160      	movs	r1, #96	; 0x60
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 fc2e 	bl	800e468 <TIM_ITRx_SetConfig>
      break;
 800dc0c:	e01c      	b.n	800dc48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6818      	ldr	r0, [r3, #0]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	6859      	ldr	r1, [r3, #4]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	f000 fbc4 	bl	800e3a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2140      	movs	r1, #64	; 0x40
 800dc26:	4618      	mov	r0, r3
 800dc28:	f000 fc1e 	bl	800e468 <TIM_ITRx_SetConfig>
      break;
 800dc2c:	e00c      	b.n	800dc48 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4619      	mov	r1, r3
 800dc38:	4610      	mov	r0, r2
 800dc3a:	f000 fc15 	bl	800e468 <TIM_ITRx_SetConfig>
      break;
 800dc3e:	e003      	b.n	800dc48 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	73fb      	strb	r3, [r7, #15]
      break;
 800dc44:	e000      	b.n	800dc48 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dc46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	ffceff88 	.word	0xffceff88
 800dc68:	00100040 	.word	0x00100040
 800dc6c:	00100030 	.word	0x00100030
 800dc70:	00100020 	.word	0x00100020

0800dc74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc7c:	bf00      	nop
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc90:	bf00      	nop
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4a46      	ldr	r2, [pc, #280]	; (800dddc <TIM_Base_SetConfig+0x12c>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d013      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcce:	d00f      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4a43      	ldr	r2, [pc, #268]	; (800dde0 <TIM_Base_SetConfig+0x130>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d00b      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a42      	ldr	r2, [pc, #264]	; (800dde4 <TIM_Base_SetConfig+0x134>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d007      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a41      	ldr	r2, [pc, #260]	; (800dde8 <TIM_Base_SetConfig+0x138>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d003      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a40      	ldr	r2, [pc, #256]	; (800ddec <TIM_Base_SetConfig+0x13c>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d108      	bne.n	800dd02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a35      	ldr	r2, [pc, #212]	; (800dddc <TIM_Base_SetConfig+0x12c>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d01f      	beq.n	800dd4a <TIM_Base_SetConfig+0x9a>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd10:	d01b      	beq.n	800dd4a <TIM_Base_SetConfig+0x9a>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a32      	ldr	r2, [pc, #200]	; (800dde0 <TIM_Base_SetConfig+0x130>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d017      	beq.n	800dd4a <TIM_Base_SetConfig+0x9a>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a31      	ldr	r2, [pc, #196]	; (800dde4 <TIM_Base_SetConfig+0x134>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d013      	beq.n	800dd4a <TIM_Base_SetConfig+0x9a>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a30      	ldr	r2, [pc, #192]	; (800dde8 <TIM_Base_SetConfig+0x138>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d00f      	beq.n	800dd4a <TIM_Base_SetConfig+0x9a>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4a2f      	ldr	r2, [pc, #188]	; (800ddec <TIM_Base_SetConfig+0x13c>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d00b      	beq.n	800dd4a <TIM_Base_SetConfig+0x9a>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4a2e      	ldr	r2, [pc, #184]	; (800ddf0 <TIM_Base_SetConfig+0x140>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d007      	beq.n	800dd4a <TIM_Base_SetConfig+0x9a>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a2d      	ldr	r2, [pc, #180]	; (800ddf4 <TIM_Base_SetConfig+0x144>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d003      	beq.n	800dd4a <TIM_Base_SetConfig+0x9a>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a2c      	ldr	r2, [pc, #176]	; (800ddf8 <TIM_Base_SetConfig+0x148>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d108      	bne.n	800dd5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	695b      	ldr	r3, [r3, #20]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	689a      	ldr	r2, [r3, #8]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4a16      	ldr	r2, [pc, #88]	; (800dddc <TIM_Base_SetConfig+0x12c>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d00f      	beq.n	800dda8 <TIM_Base_SetConfig+0xf8>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a18      	ldr	r2, [pc, #96]	; (800ddec <TIM_Base_SetConfig+0x13c>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d00b      	beq.n	800dda8 <TIM_Base_SetConfig+0xf8>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	4a17      	ldr	r2, [pc, #92]	; (800ddf0 <TIM_Base_SetConfig+0x140>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d007      	beq.n	800dda8 <TIM_Base_SetConfig+0xf8>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4a16      	ldr	r2, [pc, #88]	; (800ddf4 <TIM_Base_SetConfig+0x144>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d003      	beq.n	800dda8 <TIM_Base_SetConfig+0xf8>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a15      	ldr	r2, [pc, #84]	; (800ddf8 <TIM_Base_SetConfig+0x148>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d103      	bne.n	800ddb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	691a      	ldr	r2, [r3, #16]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	f003 0301 	and.w	r3, r3, #1
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d105      	bne.n	800ddce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	f023 0201 	bic.w	r2, r3, #1
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	611a      	str	r2, [r3, #16]
  }
}
 800ddce:	bf00      	nop
 800ddd0:	3714      	adds	r7, #20
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	40010000 	.word	0x40010000
 800dde0:	40000400 	.word	0x40000400
 800dde4:	40000800 	.word	0x40000800
 800dde8:	40000c00 	.word	0x40000c00
 800ddec:	40010400 	.word	0x40010400
 800ddf0:	40014000 	.word	0x40014000
 800ddf4:	40014400 	.word	0x40014400
 800ddf8:	40014800 	.word	0x40014800

0800ddfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b087      	sub	sp, #28
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6a1b      	ldr	r3, [r3, #32]
 800de0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6a1b      	ldr	r3, [r3, #32]
 800de10:	f023 0201 	bic.w	r2, r3, #1
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	699b      	ldr	r3, [r3, #24]
 800de22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	4b37      	ldr	r3, [pc, #220]	; (800df04 <TIM_OC1_SetConfig+0x108>)
 800de28:	4013      	ands	r3, r2
 800de2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f023 0303 	bic.w	r3, r3, #3
 800de32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	4313      	orrs	r3, r2
 800de3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	f023 0302 	bic.w	r3, r3, #2
 800de44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	697a      	ldr	r2, [r7, #20]
 800de4c:	4313      	orrs	r3, r2
 800de4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4a2d      	ldr	r2, [pc, #180]	; (800df08 <TIM_OC1_SetConfig+0x10c>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d00f      	beq.n	800de78 <TIM_OC1_SetConfig+0x7c>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a2c      	ldr	r2, [pc, #176]	; (800df0c <TIM_OC1_SetConfig+0x110>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d00b      	beq.n	800de78 <TIM_OC1_SetConfig+0x7c>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a2b      	ldr	r2, [pc, #172]	; (800df10 <TIM_OC1_SetConfig+0x114>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d007      	beq.n	800de78 <TIM_OC1_SetConfig+0x7c>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a2a      	ldr	r2, [pc, #168]	; (800df14 <TIM_OC1_SetConfig+0x118>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d003      	beq.n	800de78 <TIM_OC1_SetConfig+0x7c>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a29      	ldr	r2, [pc, #164]	; (800df18 <TIM_OC1_SetConfig+0x11c>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d10c      	bne.n	800de92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	f023 0308 	bic.w	r3, r3, #8
 800de7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	4313      	orrs	r3, r2
 800de88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	f023 0304 	bic.w	r3, r3, #4
 800de90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	4a1c      	ldr	r2, [pc, #112]	; (800df08 <TIM_OC1_SetConfig+0x10c>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d00f      	beq.n	800deba <TIM_OC1_SetConfig+0xbe>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a1b      	ldr	r2, [pc, #108]	; (800df0c <TIM_OC1_SetConfig+0x110>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d00b      	beq.n	800deba <TIM_OC1_SetConfig+0xbe>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a1a      	ldr	r2, [pc, #104]	; (800df10 <TIM_OC1_SetConfig+0x114>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d007      	beq.n	800deba <TIM_OC1_SetConfig+0xbe>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a19      	ldr	r2, [pc, #100]	; (800df14 <TIM_OC1_SetConfig+0x118>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d003      	beq.n	800deba <TIM_OC1_SetConfig+0xbe>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4a18      	ldr	r2, [pc, #96]	; (800df18 <TIM_OC1_SetConfig+0x11c>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d111      	bne.n	800dede <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	695b      	ldr	r3, [r3, #20]
 800dece:	693a      	ldr	r2, [r7, #16]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	699b      	ldr	r3, [r3, #24]
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	4313      	orrs	r3, r2
 800dedc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	693a      	ldr	r2, [r7, #16]
 800dee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	68fa      	ldr	r2, [r7, #12]
 800dee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	685a      	ldr	r2, [r3, #4]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	697a      	ldr	r2, [r7, #20]
 800def6:	621a      	str	r2, [r3, #32]
}
 800def8:	bf00      	nop
 800defa:	371c      	adds	r7, #28
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr
 800df04:	fffeff8f 	.word	0xfffeff8f
 800df08:	40010000 	.word	0x40010000
 800df0c:	40010400 	.word	0x40010400
 800df10:	40014000 	.word	0x40014000
 800df14:	40014400 	.word	0x40014400
 800df18:	40014800 	.word	0x40014800

0800df1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b087      	sub	sp, #28
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a1b      	ldr	r3, [r3, #32]
 800df2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6a1b      	ldr	r3, [r3, #32]
 800df30:	f023 0210 	bic.w	r2, r3, #16
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	699b      	ldr	r3, [r3, #24]
 800df42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	4b34      	ldr	r3, [pc, #208]	; (800e018 <TIM_OC2_SetConfig+0xfc>)
 800df48:	4013      	ands	r3, r2
 800df4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	021b      	lsls	r3, r3, #8
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	f023 0320 	bic.w	r3, r3, #32
 800df66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	011b      	lsls	r3, r3, #4
 800df6e:	697a      	ldr	r2, [r7, #20]
 800df70:	4313      	orrs	r3, r2
 800df72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4a29      	ldr	r2, [pc, #164]	; (800e01c <TIM_OC2_SetConfig+0x100>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d003      	beq.n	800df84 <TIM_OC2_SetConfig+0x68>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4a28      	ldr	r2, [pc, #160]	; (800e020 <TIM_OC2_SetConfig+0x104>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d10d      	bne.n	800dfa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	011b      	lsls	r3, r3, #4
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	4313      	orrs	r3, r2
 800df96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4a1e      	ldr	r2, [pc, #120]	; (800e01c <TIM_OC2_SetConfig+0x100>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d00f      	beq.n	800dfc8 <TIM_OC2_SetConfig+0xac>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4a1d      	ldr	r2, [pc, #116]	; (800e020 <TIM_OC2_SetConfig+0x104>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d00b      	beq.n	800dfc8 <TIM_OC2_SetConfig+0xac>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a1c      	ldr	r2, [pc, #112]	; (800e024 <TIM_OC2_SetConfig+0x108>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d007      	beq.n	800dfc8 <TIM_OC2_SetConfig+0xac>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a1b      	ldr	r2, [pc, #108]	; (800e028 <TIM_OC2_SetConfig+0x10c>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d003      	beq.n	800dfc8 <TIM_OC2_SetConfig+0xac>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a1a      	ldr	r2, [pc, #104]	; (800e02c <TIM_OC2_SetConfig+0x110>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d113      	bne.n	800dff0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dfce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	699b      	ldr	r3, [r3, #24]
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	4313      	orrs	r3, r2
 800dfee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	693a      	ldr	r2, [r7, #16]
 800dff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	685a      	ldr	r2, [r3, #4]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	697a      	ldr	r2, [r7, #20]
 800e008:	621a      	str	r2, [r3, #32]
}
 800e00a:	bf00      	nop
 800e00c:	371c      	adds	r7, #28
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	feff8fff 	.word	0xfeff8fff
 800e01c:	40010000 	.word	0x40010000
 800e020:	40010400 	.word	0x40010400
 800e024:	40014000 	.word	0x40014000
 800e028:	40014400 	.word	0x40014400
 800e02c:	40014800 	.word	0x40014800

0800e030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e030:	b480      	push	{r7}
 800e032:	b087      	sub	sp, #28
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6a1b      	ldr	r3, [r3, #32]
 800e044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	69db      	ldr	r3, [r3, #28]
 800e056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e058:	68fa      	ldr	r2, [r7, #12]
 800e05a:	4b33      	ldr	r3, [pc, #204]	; (800e128 <TIM_OC3_SetConfig+0xf8>)
 800e05c:	4013      	ands	r3, r2
 800e05e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f023 0303 	bic.w	r3, r3, #3
 800e066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	4313      	orrs	r3, r2
 800e070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	021b      	lsls	r3, r3, #8
 800e080:	697a      	ldr	r2, [r7, #20]
 800e082:	4313      	orrs	r3, r2
 800e084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4a28      	ldr	r2, [pc, #160]	; (800e12c <TIM_OC3_SetConfig+0xfc>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d003      	beq.n	800e096 <TIM_OC3_SetConfig+0x66>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a27      	ldr	r2, [pc, #156]	; (800e130 <TIM_OC3_SetConfig+0x100>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d10d      	bne.n	800e0b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e09c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	021b      	lsls	r3, r3, #8
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e0b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4a1d      	ldr	r2, [pc, #116]	; (800e12c <TIM_OC3_SetConfig+0xfc>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d00f      	beq.n	800e0da <TIM_OC3_SetConfig+0xaa>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	4a1c      	ldr	r2, [pc, #112]	; (800e130 <TIM_OC3_SetConfig+0x100>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d00b      	beq.n	800e0da <TIM_OC3_SetConfig+0xaa>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4a1b      	ldr	r2, [pc, #108]	; (800e134 <TIM_OC3_SetConfig+0x104>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d007      	beq.n	800e0da <TIM_OC3_SetConfig+0xaa>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4a1a      	ldr	r2, [pc, #104]	; (800e138 <TIM_OC3_SetConfig+0x108>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d003      	beq.n	800e0da <TIM_OC3_SetConfig+0xaa>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	4a19      	ldr	r2, [pc, #100]	; (800e13c <TIM_OC3_SetConfig+0x10c>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d113      	bne.n	800e102 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	695b      	ldr	r3, [r3, #20]
 800e0ee:	011b      	lsls	r3, r3, #4
 800e0f0:	693a      	ldr	r2, [r7, #16]
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	011b      	lsls	r3, r3, #4
 800e0fc:	693a      	ldr	r2, [r7, #16]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	693a      	ldr	r2, [r7, #16]
 800e106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	685a      	ldr	r2, [r3, #4]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	697a      	ldr	r2, [r7, #20]
 800e11a:	621a      	str	r2, [r3, #32]
}
 800e11c:	bf00      	nop
 800e11e:	371c      	adds	r7, #28
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr
 800e128:	fffeff8f 	.word	0xfffeff8f
 800e12c:	40010000 	.word	0x40010000
 800e130:	40010400 	.word	0x40010400
 800e134:	40014000 	.word	0x40014000
 800e138:	40014400 	.word	0x40014400
 800e13c:	40014800 	.word	0x40014800

0800e140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e140:	b480      	push	{r7}
 800e142:	b087      	sub	sp, #28
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a1b      	ldr	r3, [r3, #32]
 800e14e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6a1b      	ldr	r3, [r3, #32]
 800e154:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	69db      	ldr	r3, [r3, #28]
 800e166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	4b24      	ldr	r3, [pc, #144]	; (800e1fc <TIM_OC4_SetConfig+0xbc>)
 800e16c:	4013      	ands	r3, r2
 800e16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	021b      	lsls	r3, r3, #8
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	4313      	orrs	r3, r2
 800e182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e18a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	031b      	lsls	r3, r3, #12
 800e192:	693a      	ldr	r2, [r7, #16]
 800e194:	4313      	orrs	r3, r2
 800e196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4a19      	ldr	r2, [pc, #100]	; (800e200 <TIM_OC4_SetConfig+0xc0>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d00f      	beq.n	800e1c0 <TIM_OC4_SetConfig+0x80>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a18      	ldr	r2, [pc, #96]	; (800e204 <TIM_OC4_SetConfig+0xc4>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d00b      	beq.n	800e1c0 <TIM_OC4_SetConfig+0x80>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a17      	ldr	r2, [pc, #92]	; (800e208 <TIM_OC4_SetConfig+0xc8>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d007      	beq.n	800e1c0 <TIM_OC4_SetConfig+0x80>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4a16      	ldr	r2, [pc, #88]	; (800e20c <TIM_OC4_SetConfig+0xcc>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d003      	beq.n	800e1c0 <TIM_OC4_SetConfig+0x80>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	4a15      	ldr	r2, [pc, #84]	; (800e210 <TIM_OC4_SetConfig+0xd0>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d109      	bne.n	800e1d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	695b      	ldr	r3, [r3, #20]
 800e1cc:	019b      	lsls	r3, r3, #6
 800e1ce:	697a      	ldr	r2, [r7, #20]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	68fa      	ldr	r2, [r7, #12]
 800e1de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	685a      	ldr	r2, [r3, #4]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	693a      	ldr	r2, [r7, #16]
 800e1ec:	621a      	str	r2, [r3, #32]
}
 800e1ee:	bf00      	nop
 800e1f0:	371c      	adds	r7, #28
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	feff8fff 	.word	0xfeff8fff
 800e200:	40010000 	.word	0x40010000
 800e204:	40010400 	.word	0x40010400
 800e208:	40014000 	.word	0x40014000
 800e20c:	40014400 	.word	0x40014400
 800e210:	40014800 	.word	0x40014800

0800e214 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e214:	b480      	push	{r7}
 800e216:	b087      	sub	sp, #28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a1b      	ldr	r3, [r3, #32]
 800e222:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6a1b      	ldr	r3, [r3, #32]
 800e228:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	4b21      	ldr	r3, [pc, #132]	; (800e2c4 <TIM_OC5_SetConfig+0xb0>)
 800e240:	4013      	ands	r3, r2
 800e242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e254:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	041b      	lsls	r3, r3, #16
 800e25c:	693a      	ldr	r2, [r7, #16]
 800e25e:	4313      	orrs	r3, r2
 800e260:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4a18      	ldr	r2, [pc, #96]	; (800e2c8 <TIM_OC5_SetConfig+0xb4>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d00f      	beq.n	800e28a <TIM_OC5_SetConfig+0x76>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4a17      	ldr	r2, [pc, #92]	; (800e2cc <TIM_OC5_SetConfig+0xb8>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d00b      	beq.n	800e28a <TIM_OC5_SetConfig+0x76>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a16      	ldr	r2, [pc, #88]	; (800e2d0 <TIM_OC5_SetConfig+0xbc>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d007      	beq.n	800e28a <TIM_OC5_SetConfig+0x76>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a15      	ldr	r2, [pc, #84]	; (800e2d4 <TIM_OC5_SetConfig+0xc0>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d003      	beq.n	800e28a <TIM_OC5_SetConfig+0x76>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a14      	ldr	r2, [pc, #80]	; (800e2d8 <TIM_OC5_SetConfig+0xc4>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d109      	bne.n	800e29e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e290:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	695b      	ldr	r3, [r3, #20]
 800e296:	021b      	lsls	r3, r3, #8
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	697a      	ldr	r2, [r7, #20]
 800e2a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	693a      	ldr	r2, [r7, #16]
 800e2b6:	621a      	str	r2, [r3, #32]
}
 800e2b8:	bf00      	nop
 800e2ba:	371c      	adds	r7, #28
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr
 800e2c4:	fffeff8f 	.word	0xfffeff8f
 800e2c8:	40010000 	.word	0x40010000
 800e2cc:	40010400 	.word	0x40010400
 800e2d0:	40014000 	.word	0x40014000
 800e2d4:	40014400 	.word	0x40014400
 800e2d8:	40014800 	.word	0x40014800

0800e2dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b087      	sub	sp, #28
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6a1b      	ldr	r3, [r3, #32]
 800e2ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6a1b      	ldr	r3, [r3, #32]
 800e2f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	4b22      	ldr	r3, [pc, #136]	; (800e390 <TIM_OC6_SetConfig+0xb4>)
 800e308:	4013      	ands	r3, r2
 800e30a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	021b      	lsls	r3, r3, #8
 800e312:	68fa      	ldr	r2, [r7, #12]
 800e314:	4313      	orrs	r3, r2
 800e316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e31e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	051b      	lsls	r3, r3, #20
 800e326:	693a      	ldr	r2, [r7, #16]
 800e328:	4313      	orrs	r3, r2
 800e32a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a19      	ldr	r2, [pc, #100]	; (800e394 <TIM_OC6_SetConfig+0xb8>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d00f      	beq.n	800e354 <TIM_OC6_SetConfig+0x78>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	4a18      	ldr	r2, [pc, #96]	; (800e398 <TIM_OC6_SetConfig+0xbc>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d00b      	beq.n	800e354 <TIM_OC6_SetConfig+0x78>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a17      	ldr	r2, [pc, #92]	; (800e39c <TIM_OC6_SetConfig+0xc0>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d007      	beq.n	800e354 <TIM_OC6_SetConfig+0x78>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4a16      	ldr	r2, [pc, #88]	; (800e3a0 <TIM_OC6_SetConfig+0xc4>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d003      	beq.n	800e354 <TIM_OC6_SetConfig+0x78>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4a15      	ldr	r2, [pc, #84]	; (800e3a4 <TIM_OC6_SetConfig+0xc8>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d109      	bne.n	800e368 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e35a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	695b      	ldr	r3, [r3, #20]
 800e360:	029b      	lsls	r3, r3, #10
 800e362:	697a      	ldr	r2, [r7, #20]
 800e364:	4313      	orrs	r3, r2
 800e366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	697a      	ldr	r2, [r7, #20]
 800e36c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	685a      	ldr	r2, [r3, #4]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	693a      	ldr	r2, [r7, #16]
 800e380:	621a      	str	r2, [r3, #32]
}
 800e382:	bf00      	nop
 800e384:	371c      	adds	r7, #28
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	feff8fff 	.word	0xfeff8fff
 800e394:	40010000 	.word	0x40010000
 800e398:	40010400 	.word	0x40010400
 800e39c:	40014000 	.word	0x40014000
 800e3a0:	40014400 	.word	0x40014400
 800e3a4:	40014800 	.word	0x40014800

0800e3a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b087      	sub	sp, #28
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6a1b      	ldr	r3, [r3, #32]
 800e3b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6a1b      	ldr	r3, [r3, #32]
 800e3be:	f023 0201 	bic.w	r2, r3, #1
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	699b      	ldr	r3, [r3, #24]
 800e3ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e3d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	011b      	lsls	r3, r3, #4
 800e3d8:	693a      	ldr	r2, [r7, #16]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f023 030a 	bic.w	r3, r3, #10
 800e3e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	693a      	ldr	r2, [r7, #16]
 800e3f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	621a      	str	r2, [r3, #32]
}
 800e3fa:	bf00      	nop
 800e3fc:	371c      	adds	r7, #28
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr

0800e406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e406:	b480      	push	{r7}
 800e408:	b087      	sub	sp, #28
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	60f8      	str	r0, [r7, #12]
 800e40e:	60b9      	str	r1, [r7, #8]
 800e410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6a1b      	ldr	r3, [r3, #32]
 800e41c:	f023 0210 	bic.w	r2, r3, #16
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	031b      	lsls	r3, r3, #12
 800e436:	693a      	ldr	r2, [r7, #16]
 800e438:	4313      	orrs	r3, r2
 800e43a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	011b      	lsls	r3, r3, #4
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	4313      	orrs	r3, r2
 800e44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	693a      	ldr	r2, [r7, #16]
 800e452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	697a      	ldr	r2, [r7, #20]
 800e458:	621a      	str	r2, [r3, #32]
}
 800e45a:	bf00      	nop
 800e45c:	371c      	adds	r7, #28
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr
	...

0800e468 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	689b      	ldr	r3, [r3, #8]
 800e476:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e478:	68fa      	ldr	r2, [r7, #12]
 800e47a:	4b09      	ldr	r3, [pc, #36]	; (800e4a0 <TIM_ITRx_SetConfig+0x38>)
 800e47c:	4013      	ands	r3, r2
 800e47e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e480:	683a      	ldr	r2, [r7, #0]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	4313      	orrs	r3, r2
 800e486:	f043 0307 	orr.w	r3, r3, #7
 800e48a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	609a      	str	r2, [r3, #8]
}
 800e492:	bf00      	nop
 800e494:	3714      	adds	r7, #20
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	ffcfff8f 	.word	0xffcfff8f

0800e4a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b087      	sub	sp, #28
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
 800e4b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e4be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	021a      	lsls	r2, r3, #8
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	431a      	orrs	r2, r3
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	697a      	ldr	r2, [r7, #20]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	697a      	ldr	r2, [r7, #20]
 800e4d6:	609a      	str	r2, [r3, #8]
}
 800e4d8:	bf00      	nop
 800e4da:	371c      	adds	r7, #28
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b087      	sub	sp, #28
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	f003 031f 	and.w	r3, r3, #31
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6a1a      	ldr	r2, [r3, #32]
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	43db      	mvns	r3, r3
 800e506:	401a      	ands	r2, r3
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6a1a      	ldr	r2, [r3, #32]
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	f003 031f 	and.w	r3, r3, #31
 800e516:	6879      	ldr	r1, [r7, #4]
 800e518:	fa01 f303 	lsl.w	r3, r1, r3
 800e51c:	431a      	orrs	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	621a      	str	r2, [r3, #32]
}
 800e522:	bf00      	nop
 800e524:	371c      	adds	r7, #28
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr
	...

0800e530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e530:	b480      	push	{r7}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e540:	2b01      	cmp	r3, #1
 800e542:	d101      	bne.n	800e548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e544:	2302      	movs	r3, #2
 800e546:	e06d      	b.n	800e624 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2202      	movs	r2, #2
 800e554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a30      	ldr	r2, [pc, #192]	; (800e630 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d004      	beq.n	800e57c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a2f      	ldr	r2, [pc, #188]	; (800e634 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d108      	bne.n	800e58e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e582:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	68fa      	ldr	r2, [r7, #12]
 800e58a:	4313      	orrs	r3, r2
 800e58c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e594:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a20      	ldr	r2, [pc, #128]	; (800e630 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d022      	beq.n	800e5f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5ba:	d01d      	beq.n	800e5f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a1d      	ldr	r2, [pc, #116]	; (800e638 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d018      	beq.n	800e5f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a1c      	ldr	r2, [pc, #112]	; (800e63c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d013      	beq.n	800e5f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4a1a      	ldr	r2, [pc, #104]	; (800e640 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d00e      	beq.n	800e5f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4a15      	ldr	r2, [pc, #84]	; (800e634 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d009      	beq.n	800e5f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a16      	ldr	r2, [pc, #88]	; (800e644 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d004      	beq.n	800e5f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4a15      	ldr	r2, [pc, #84]	; (800e648 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d10c      	bne.n	800e612 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	68ba      	ldr	r2, [r7, #8]
 800e606:	4313      	orrs	r3, r2
 800e608:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	68ba      	ldr	r2, [r7, #8]
 800e610:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3714      	adds	r7, #20
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr
 800e630:	40010000 	.word	0x40010000
 800e634:	40010400 	.word	0x40010400
 800e638:	40000400 	.word	0x40000400
 800e63c:	40000800 	.word	0x40000800
 800e640:	40000c00 	.word	0x40000c00
 800e644:	40001800 	.word	0x40001800
 800e648:	40014000 	.word	0x40014000

0800e64c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e656:	2300      	movs	r3, #0
 800e658:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e660:	2b01      	cmp	r3, #1
 800e662:	d101      	bne.n	800e668 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e664:	2302      	movs	r3, #2
 800e666:	e065      	b.n	800e734 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2201      	movs	r2, #1
 800e66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	4313      	orrs	r3, r2
 800e67c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	4313      	orrs	r3, r2
 800e68a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	4313      	orrs	r3, r2
 800e698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	691b      	ldr	r3, [r3, #16]
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	695b      	ldr	r3, [r3, #20]
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	699b      	ldr	r3, [r3, #24]
 800e6dc:	041b      	lsls	r3, r3, #16
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	4a16      	ldr	r2, [pc, #88]	; (800e740 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d004      	beq.n	800e6f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a14      	ldr	r2, [pc, #80]	; (800e744 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d115      	bne.n	800e722 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e700:	051b      	lsls	r3, r3, #20
 800e702:	4313      	orrs	r3, r2
 800e704:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	69db      	ldr	r3, [r3, #28]
 800e710:	4313      	orrs	r3, r2
 800e712:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	4313      	orrs	r3, r2
 800e720:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	68fa      	ldr	r2, [r7, #12]
 800e728:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2200      	movs	r2, #0
 800e72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3714      	adds	r7, #20
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	40010000 	.word	0x40010000
 800e744:	40010400 	.word	0x40010400

0800e748 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e750:	bf00      	nop
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	e042      	b.n	800e81c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d106      	bne.n	800e7ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7f4 fba9 	bl	8002f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2224      	movs	r2, #36	; 0x24
 800e7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f022 0201 	bic.w	r2, r2, #1
 800e7c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d002      	beq.n	800e7d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f001 fb0c 	bl	800fdec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 fda1 	bl	800f31c <UART_SetConfig>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d101      	bne.n	800e7e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e01b      	b.n	800e81c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	685a      	ldr	r2, [r3, #4]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	689a      	ldr	r2, [r3, #8]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f042 0201 	orr.w	r2, r2, #1
 800e812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f001 fb8b 	bl	800ff30 <UART_CheckIdleState>
 800e81a:	4603      	mov	r3, r0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b08a      	sub	sp, #40	; 0x28
 800e828:	af02      	add	r7, sp, #8
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	603b      	str	r3, [r7, #0]
 800e830:	4613      	mov	r3, r2
 800e832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e83a:	2b20      	cmp	r3, #32
 800e83c:	d17b      	bne.n	800e936 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d002      	beq.n	800e84a <HAL_UART_Transmit+0x26>
 800e844:	88fb      	ldrh	r3, [r7, #6]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d101      	bne.n	800e84e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e84a:	2301      	movs	r3, #1
 800e84c:	e074      	b.n	800e938 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2200      	movs	r2, #0
 800e852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2221      	movs	r2, #33	; 0x21
 800e85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e85e:	f7f4 fe89 	bl	8003574 <HAL_GetTick>
 800e862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	88fa      	ldrh	r2, [r7, #6]
 800e868:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	88fa      	ldrh	r2, [r7, #6]
 800e870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e87c:	d108      	bne.n	800e890 <HAL_UART_Transmit+0x6c>
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	691b      	ldr	r3, [r3, #16]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d104      	bne.n	800e890 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e886:	2300      	movs	r3, #0
 800e888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	61bb      	str	r3, [r7, #24]
 800e88e:	e003      	b.n	800e898 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e894:	2300      	movs	r3, #0
 800e896:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e898:	e030      	b.n	800e8fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	2180      	movs	r1, #128	; 0x80
 800e8a4:	68f8      	ldr	r0, [r7, #12]
 800e8a6:	f001 fbed 	bl	8010084 <UART_WaitOnFlagUntilTimeout>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d005      	beq.n	800e8bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2220      	movs	r2, #32
 800e8b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e8b8:	2303      	movs	r3, #3
 800e8ba:	e03d      	b.n	800e938 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d10b      	bne.n	800e8da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	881b      	ldrh	r3, [r3, #0]
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e8d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	3302      	adds	r3, #2
 800e8d6:	61bb      	str	r3, [r7, #24]
 800e8d8:	e007      	b.n	800e8ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	781a      	ldrb	r2, [r3, #0]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	3b01      	subs	r3, #1
 800e8f4:	b29a      	uxth	r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e902:	b29b      	uxth	r3, r3
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1c8      	bne.n	800e89a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	2200      	movs	r2, #0
 800e910:	2140      	movs	r1, #64	; 0x40
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f001 fbb6 	bl	8010084 <UART_WaitOnFlagUntilTimeout>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d005      	beq.n	800e92a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2220      	movs	r2, #32
 800e922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e926:	2303      	movs	r3, #3
 800e928:	e006      	b.n	800e938 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2220      	movs	r2, #32
 800e92e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e932:	2300      	movs	r3, #0
 800e934:	e000      	b.n	800e938 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e936:	2302      	movs	r3, #2
  }
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3720      	adds	r7, #32
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b08a      	sub	sp, #40	; 0x28
 800e944:	af02      	add	r7, sp, #8
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	603b      	str	r3, [r7, #0]
 800e94c:	4613      	mov	r3, r2
 800e94e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e956:	2b20      	cmp	r3, #32
 800e958:	f040 80b5 	bne.w	800eac6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d002      	beq.n	800e968 <HAL_UART_Receive+0x28>
 800e962:	88fb      	ldrh	r3, [r7, #6]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d101      	bne.n	800e96c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e968:	2301      	movs	r3, #1
 800e96a:	e0ad      	b.n	800eac8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2200      	movs	r2, #0
 800e970:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2222      	movs	r2, #34	; 0x22
 800e978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2200      	movs	r2, #0
 800e980:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e982:	f7f4 fdf7 	bl	8003574 <HAL_GetTick>
 800e986:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	88fa      	ldrh	r2, [r7, #6]
 800e98c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	88fa      	ldrh	r2, [r7, #6]
 800e994:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9a0:	d10e      	bne.n	800e9c0 <HAL_UART_Receive+0x80>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d105      	bne.n	800e9b6 <HAL_UART_Receive+0x76>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e9b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9b4:	e02d      	b.n	800ea12 <HAL_UART_Receive+0xd2>
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	22ff      	movs	r2, #255	; 0xff
 800e9ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9be:	e028      	b.n	800ea12 <HAL_UART_Receive+0xd2>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d10d      	bne.n	800e9e4 <HAL_UART_Receive+0xa4>
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	691b      	ldr	r3, [r3, #16]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d104      	bne.n	800e9da <HAL_UART_Receive+0x9a>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	22ff      	movs	r2, #255	; 0xff
 800e9d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9d8:	e01b      	b.n	800ea12 <HAL_UART_Receive+0xd2>
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	227f      	movs	r2, #127	; 0x7f
 800e9de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9e2:	e016      	b.n	800ea12 <HAL_UART_Receive+0xd2>
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9ec:	d10d      	bne.n	800ea0a <HAL_UART_Receive+0xca>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	691b      	ldr	r3, [r3, #16]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d104      	bne.n	800ea00 <HAL_UART_Receive+0xc0>
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	227f      	movs	r2, #127	; 0x7f
 800e9fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9fe:	e008      	b.n	800ea12 <HAL_UART_Receive+0xd2>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	223f      	movs	r2, #63	; 0x3f
 800ea04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea08:	e003      	b.n	800ea12 <HAL_UART_Receive+0xd2>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea22:	d108      	bne.n	800ea36 <HAL_UART_Receive+0xf6>
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d104      	bne.n	800ea36 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	61bb      	str	r3, [r7, #24]
 800ea34:	e003      	b.n	800ea3e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ea3e:	e036      	b.n	800eaae <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	2200      	movs	r2, #0
 800ea48:	2120      	movs	r1, #32
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f001 fb1a 	bl	8010084 <UART_WaitOnFlagUntilTimeout>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d005      	beq.n	800ea62 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2220      	movs	r2, #32
 800ea5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800ea5e:	2303      	movs	r3, #3
 800ea60:	e032      	b.n	800eac8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d10c      	bne.n	800ea82 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	8a7b      	ldrh	r3, [r7, #18]
 800ea72:	4013      	ands	r3, r2
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	3302      	adds	r3, #2
 800ea7e:	61bb      	str	r3, [r7, #24]
 800ea80:	e00c      	b.n	800ea9c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	8a7b      	ldrh	r3, [r7, #18]
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	4013      	ands	r3, r2
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1c2      	bne.n	800ea40 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2220      	movs	r2, #32
 800eabe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800eac2:	2300      	movs	r3, #0
 800eac4:	e000      	b.n	800eac8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800eac6:	2302      	movs	r3, #2
  }
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3720      	adds	r7, #32
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b08a      	sub	sp, #40	; 0x28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	4613      	mov	r3, r2
 800eadc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eae4:	2b20      	cmp	r3, #32
 800eae6:	d137      	bne.n	800eb58 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d002      	beq.n	800eaf4 <HAL_UART_Receive_IT+0x24>
 800eaee:	88fb      	ldrh	r3, [r7, #6]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d101      	bne.n	800eaf8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e030      	b.n	800eb5a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2200      	movs	r2, #0
 800eafc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4a18      	ldr	r2, [pc, #96]	; (800eb64 <HAL_UART_Receive_IT+0x94>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d01f      	beq.n	800eb48 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d018      	beq.n	800eb48 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	e853 3f00 	ldrex	r3, [r3]
 800eb22:	613b      	str	r3, [r7, #16]
   return(result);
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eb2a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	461a      	mov	r2, r3
 800eb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb34:	623b      	str	r3, [r7, #32]
 800eb36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb38:	69f9      	ldr	r1, [r7, #28]
 800eb3a:	6a3a      	ldr	r2, [r7, #32]
 800eb3c:	e841 2300 	strex	r3, r2, [r1]
 800eb40:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1e6      	bne.n	800eb16 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800eb48:	88fb      	ldrh	r3, [r7, #6]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	68b9      	ldr	r1, [r7, #8]
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f001 fb06 	bl	8010160 <UART_Start_Receive_IT>
 800eb54:	4603      	mov	r3, r0
 800eb56:	e000      	b.n	800eb5a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eb58:	2302      	movs	r3, #2
  }
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3728      	adds	r7, #40	; 0x28
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	58000c00 	.word	0x58000c00

0800eb68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b0ba      	sub	sp, #232	; 0xe8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	69db      	ldr	r3, [r3, #28]
 800eb76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eb8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eb92:	f640 030f 	movw	r3, #2063	; 0x80f
 800eb96:	4013      	ands	r3, r2
 800eb98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800eb9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d11b      	bne.n	800ebdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eba8:	f003 0320 	and.w	r3, r3, #32
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d015      	beq.n	800ebdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ebb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebb4:	f003 0320 	and.w	r3, r3, #32
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d105      	bne.n	800ebc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ebbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d009      	beq.n	800ebdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f000 8377 	beq.w	800f2c0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	4798      	blx	r3
      }
      return;
 800ebda:	e371      	b.n	800f2c0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ebdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 8123 	beq.w	800ee2c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ebe6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ebea:	4b8d      	ldr	r3, [pc, #564]	; (800ee20 <HAL_UART_IRQHandler+0x2b8>)
 800ebec:	4013      	ands	r3, r2
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d106      	bne.n	800ec00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ebf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ebf6:	4b8b      	ldr	r3, [pc, #556]	; (800ee24 <HAL_UART_IRQHandler+0x2bc>)
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f000 8116 	beq.w	800ee2c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ec00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec04:	f003 0301 	and.w	r3, r3, #1
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d011      	beq.n	800ec30 <HAL_UART_IRQHandler+0xc8>
 800ec0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00b      	beq.n	800ec30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec26:	f043 0201 	orr.w	r2, r3, #1
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec34:	f003 0302 	and.w	r3, r3, #2
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d011      	beq.n	800ec60 <HAL_UART_IRQHandler+0xf8>
 800ec3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec40:	f003 0301 	and.w	r3, r3, #1
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00b      	beq.n	800ec60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2202      	movs	r2, #2
 800ec4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec56:	f043 0204 	orr.w	r2, r3, #4
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec64:	f003 0304 	and.w	r3, r3, #4
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d011      	beq.n	800ec90 <HAL_UART_IRQHandler+0x128>
 800ec6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec70:	f003 0301 	and.w	r3, r3, #1
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00b      	beq.n	800ec90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2204      	movs	r2, #4
 800ec7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec86:	f043 0202 	orr.w	r2, r3, #2
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ec90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec94:	f003 0308 	and.w	r3, r3, #8
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d017      	beq.n	800eccc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eca0:	f003 0320 	and.w	r3, r3, #32
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d105      	bne.n	800ecb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eca8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ecac:	4b5c      	ldr	r3, [pc, #368]	; (800ee20 <HAL_UART_IRQHandler+0x2b8>)
 800ecae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00b      	beq.n	800eccc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2208      	movs	r2, #8
 800ecba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecc2:	f043 0208 	orr.w	r2, r3, #8
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d012      	beq.n	800ecfe <HAL_UART_IRQHandler+0x196>
 800ecd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00c      	beq.n	800ecfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecf4:	f043 0220 	orr.w	r2, r3, #32
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 82dd 	beq.w	800f2c4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ed0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed0e:	f003 0320 	and.w	r3, r3, #32
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d013      	beq.n	800ed3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ed16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed1a:	f003 0320 	and.w	r3, r3, #32
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d105      	bne.n	800ed2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ed22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d007      	beq.n	800ed3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d003      	beq.n	800ed3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed52:	2b40      	cmp	r3, #64	; 0x40
 800ed54:	d005      	beq.n	800ed62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ed56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ed5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d054      	beq.n	800ee0c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f001 fb1e 	bl	80103a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed72:	2b40      	cmp	r3, #64	; 0x40
 800ed74:	d146      	bne.n	800ee04 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	3308      	adds	r3, #8
 800ed7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ed84:	e853 3f00 	ldrex	r3, [r3]
 800ed88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ed8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ed90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800eda2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800eda6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800edae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800edb2:	e841 2300 	strex	r3, r2, [r1]
 800edb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800edba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1d9      	bne.n	800ed76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d017      	beq.n	800edfc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edd2:	4a15      	ldr	r2, [pc, #84]	; (800ee28 <HAL_UART_IRQHandler+0x2c0>)
 800edd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eddc:	4618      	mov	r0, r3
 800edde:	f7f7 fdd5 	bl	800698c <HAL_DMA_Abort_IT>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d019      	beq.n	800ee1c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800edf6:	4610      	mov	r0, r2
 800edf8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edfa:	e00f      	b.n	800ee1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 fa77 	bl	800f2f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee02:	e00b      	b.n	800ee1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 fa73 	bl	800f2f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee0a:	e007      	b.n	800ee1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f000 fa6f 	bl	800f2f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ee1a:	e253      	b.n	800f2c4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee1c:	bf00      	nop
    return;
 800ee1e:	e251      	b.n	800f2c4 <HAL_UART_IRQHandler+0x75c>
 800ee20:	10000001 	.word	0x10000001
 800ee24:	04000120 	.word	0x04000120
 800ee28:	08010471 	.word	0x08010471

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	f040 81e7 	bne.w	800f204 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ee36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee3a:	f003 0310 	and.w	r3, r3, #16
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f000 81e0 	beq.w	800f204 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ee44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee48:	f003 0310 	and.w	r3, r3, #16
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f000 81d9 	beq.w	800f204 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2210      	movs	r2, #16
 800ee58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee64:	2b40      	cmp	r3, #64	; 0x40
 800ee66:	f040 8151 	bne.w	800f10c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a96      	ldr	r2, [pc, #600]	; (800f0cc <HAL_UART_IRQHandler+0x564>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d068      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a93      	ldr	r2, [pc, #588]	; (800f0d0 <HAL_UART_IRQHandler+0x568>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d061      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a91      	ldr	r2, [pc, #580]	; (800f0d4 <HAL_UART_IRQHandler+0x56c>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d05a      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a8e      	ldr	r2, [pc, #568]	; (800f0d8 <HAL_UART_IRQHandler+0x570>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d053      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a8c      	ldr	r2, [pc, #560]	; (800f0dc <HAL_UART_IRQHandler+0x574>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d04c      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a89      	ldr	r2, [pc, #548]	; (800f0e0 <HAL_UART_IRQHandler+0x578>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d045      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a87      	ldr	r2, [pc, #540]	; (800f0e4 <HAL_UART_IRQHandler+0x57c>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d03e      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a84      	ldr	r2, [pc, #528]	; (800f0e8 <HAL_UART_IRQHandler+0x580>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d037      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a82      	ldr	r2, [pc, #520]	; (800f0ec <HAL_UART_IRQHandler+0x584>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d030      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a7f      	ldr	r2, [pc, #508]	; (800f0f0 <HAL_UART_IRQHandler+0x588>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d029      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	4a7d      	ldr	r2, [pc, #500]	; (800f0f4 <HAL_UART_IRQHandler+0x58c>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d022      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a7a      	ldr	r2, [pc, #488]	; (800f0f8 <HAL_UART_IRQHandler+0x590>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d01b      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a78      	ldr	r2, [pc, #480]	; (800f0fc <HAL_UART_IRQHandler+0x594>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d014      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a75      	ldr	r2, [pc, #468]	; (800f100 <HAL_UART_IRQHandler+0x598>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d00d      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a73      	ldr	r2, [pc, #460]	; (800f104 <HAL_UART_IRQHandler+0x59c>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d006      	beq.n	800ef4a <HAL_UART_IRQHandler+0x3e2>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a70      	ldr	r2, [pc, #448]	; (800f108 <HAL_UART_IRQHandler+0x5a0>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d106      	bne.n	800ef58 <HAL_UART_IRQHandler+0x3f0>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	e005      	b.n	800ef64 <HAL_UART_IRQHandler+0x3fc>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ef68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f000 81ab 	beq.w	800f2c8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ef78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	f080 81a3 	bcs.w	800f2c8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ef88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef92:	69db      	ldr	r3, [r3, #28]
 800ef94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef98:	f000 8087 	beq.w	800f0aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800efa8:	e853 3f00 	ldrex	r3, [r3]
 800efac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800efb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800efb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	461a      	mov	r2, r3
 800efc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800efc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800efca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800efd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800efd6:	e841 2300 	strex	r3, r2, [r1]
 800efda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800efde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1da      	bne.n	800ef9c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	3308      	adds	r3, #8
 800efec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eff0:	e853 3f00 	ldrex	r3, [r3]
 800eff4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800eff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eff8:	f023 0301 	bic.w	r3, r3, #1
 800effc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	3308      	adds	r3, #8
 800f006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f00a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f00e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f016:	e841 2300 	strex	r3, r2, [r1]
 800f01a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f01c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1e1      	bne.n	800efe6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	3308      	adds	r3, #8
 800f028:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f02c:	e853 3f00 	ldrex	r3, [r3]
 800f030:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	3308      	adds	r3, #8
 800f042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f046:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f04c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f04e:	e841 2300 	strex	r3, r2, [r1]
 800f052:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1e3      	bne.n	800f022 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2220      	movs	r2, #32
 800f05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f070:	e853 3f00 	ldrex	r3, [r3]
 800f074:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f078:	f023 0310 	bic.w	r3, r3, #16
 800f07c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	461a      	mov	r2, r3
 800f086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f08a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f08c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f092:	e841 2300 	strex	r3, r2, [r1]
 800f096:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1e4      	bne.n	800f068 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f7 f953 	bl	8006350 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2202      	movs	r2, #2
 800f0ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f000 f91d 	bl	800f304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f0ca:	e0fd      	b.n	800f2c8 <HAL_UART_IRQHandler+0x760>
 800f0cc:	40020010 	.word	0x40020010
 800f0d0:	40020028 	.word	0x40020028
 800f0d4:	40020040 	.word	0x40020040
 800f0d8:	40020058 	.word	0x40020058
 800f0dc:	40020070 	.word	0x40020070
 800f0e0:	40020088 	.word	0x40020088
 800f0e4:	400200a0 	.word	0x400200a0
 800f0e8:	400200b8 	.word	0x400200b8
 800f0ec:	40020410 	.word	0x40020410
 800f0f0:	40020428 	.word	0x40020428
 800f0f4:	40020440 	.word	0x40020440
 800f0f8:	40020458 	.word	0x40020458
 800f0fc:	40020470 	.word	0x40020470
 800f100:	40020488 	.word	0x40020488
 800f104:	400204a0 	.word	0x400204a0
 800f108:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f118:	b29b      	uxth	r3, r3
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f126:	b29b      	uxth	r3, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f000 80cf 	beq.w	800f2cc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f12e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f132:	2b00      	cmp	r3, #0
 800f134:	f000 80ca 	beq.w	800f2cc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f140:	e853 3f00 	ldrex	r3, [r3]
 800f144:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f14c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	461a      	mov	r2, r3
 800f156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f15a:	647b      	str	r3, [r7, #68]	; 0x44
 800f15c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f162:	e841 2300 	strex	r3, r2, [r1]
 800f166:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1e4      	bne.n	800f138 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	3308      	adds	r3, #8
 800f174:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f178:	e853 3f00 	ldrex	r3, [r3]
 800f17c:	623b      	str	r3, [r7, #32]
   return(result);
 800f17e:	6a3a      	ldr	r2, [r7, #32]
 800f180:	4b55      	ldr	r3, [pc, #340]	; (800f2d8 <HAL_UART_IRQHandler+0x770>)
 800f182:	4013      	ands	r3, r2
 800f184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	3308      	adds	r3, #8
 800f18e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f192:	633a      	str	r2, [r7, #48]	; 0x30
 800f194:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f19a:	e841 2300 	strex	r3, r2, [r1]
 800f19e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1e3      	bne.n	800f16e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2220      	movs	r2, #32
 800f1aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	e853 3f00 	ldrex	r3, [r3]
 800f1c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f023 0310 	bic.w	r3, r3, #16
 800f1ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f1dc:	61fb      	str	r3, [r7, #28]
 800f1de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e0:	69b9      	ldr	r1, [r7, #24]
 800f1e2:	69fa      	ldr	r2, [r7, #28]
 800f1e4:	e841 2300 	strex	r3, r2, [r1]
 800f1e8:	617b      	str	r3, [r7, #20]
   return(result);
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1e4      	bne.n	800f1ba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2202      	movs	r2, #2
 800f1f4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f1f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f881 	bl	800f304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f202:	e063      	b.n	800f2cc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00e      	beq.n	800f22e <HAL_UART_IRQHandler+0x6c6>
 800f210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d008      	beq.n	800f22e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f001 fe80 	bl	8010f2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f22c:	e051      	b.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f236:	2b00      	cmp	r3, #0
 800f238:	d014      	beq.n	800f264 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f242:	2b00      	cmp	r3, #0
 800f244:	d105      	bne.n	800f252 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f24a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d008      	beq.n	800f264 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f256:	2b00      	cmp	r3, #0
 800f258:	d03a      	beq.n	800f2d0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	4798      	blx	r3
    }
    return;
 800f262:	e035      	b.n	800f2d0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d009      	beq.n	800f284 <HAL_UART_IRQHandler+0x71c>
 800f270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d003      	beq.n	800f284 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f001 f90d 	bl	801049c <UART_EndTransmit_IT>
    return;
 800f282:	e026      	b.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d009      	beq.n	800f2a4 <HAL_UART_IRQHandler+0x73c>
 800f290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f294:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d003      	beq.n	800f2a4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f001 fe59 	bl	8010f54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2a2:	e016      	b.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d010      	beq.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
 800f2b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	da0c      	bge.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f001 fe41 	bl	8010f40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2be:	e008      	b.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f2c0:	bf00      	nop
 800f2c2:	e006      	b.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
    return;
 800f2c4:	bf00      	nop
 800f2c6:	e004      	b.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f2c8:	bf00      	nop
 800f2ca:	e002      	b.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f2cc:	bf00      	nop
 800f2ce:	e000      	b.n	800f2d2 <HAL_UART_IRQHandler+0x76a>
    return;
 800f2d0:	bf00      	nop
  }
}
 800f2d2:	37e8      	adds	r7, #232	; 0xe8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	effffffe 	.word	0xeffffffe

0800f2dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f2e4:	bf00      	nop
 800f2e6:	370c      	adds	r7, #12
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f2f8:	bf00      	nop
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	460b      	mov	r3, r1
 800f30e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f31c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f320:	b092      	sub	sp, #72	; 0x48
 800f322:	af00      	add	r7, sp, #0
 800f324:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f326:	2300      	movs	r3, #0
 800f328:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	689a      	ldr	r2, [r3, #8]
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	431a      	orrs	r2, r3
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	695b      	ldr	r3, [r3, #20]
 800f33a:	431a      	orrs	r2, r3
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	69db      	ldr	r3, [r3, #28]
 800f340:	4313      	orrs	r3, r2
 800f342:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	4bbe      	ldr	r3, [pc, #760]	; (800f644 <UART_SetConfig+0x328>)
 800f34c:	4013      	ands	r3, r2
 800f34e:	697a      	ldr	r2, [r7, #20]
 800f350:	6812      	ldr	r2, [r2, #0]
 800f352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f354:	430b      	orrs	r3, r1
 800f356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	68da      	ldr	r2, [r3, #12]
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	430a      	orrs	r2, r1
 800f36c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	699b      	ldr	r3, [r3, #24]
 800f372:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4ab3      	ldr	r2, [pc, #716]	; (800f648 <UART_SetConfig+0x32c>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d004      	beq.n	800f388 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	6a1b      	ldr	r3, [r3, #32]
 800f382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f384:	4313      	orrs	r3, r2
 800f386:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	689a      	ldr	r2, [r3, #8]
 800f38e:	4baf      	ldr	r3, [pc, #700]	; (800f64c <UART_SetConfig+0x330>)
 800f390:	4013      	ands	r3, r2
 800f392:	697a      	ldr	r2, [r7, #20]
 800f394:	6812      	ldr	r2, [r2, #0]
 800f396:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f398:	430b      	orrs	r3, r1
 800f39a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3a2:	f023 010f 	bic.w	r1, r3, #15
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	430a      	orrs	r2, r1
 800f3b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4aa6      	ldr	r2, [pc, #664]	; (800f650 <UART_SetConfig+0x334>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d177      	bne.n	800f4ac <UART_SetConfig+0x190>
 800f3bc:	4ba5      	ldr	r3, [pc, #660]	; (800f654 <UART_SetConfig+0x338>)
 800f3be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f3c4:	2b28      	cmp	r3, #40	; 0x28
 800f3c6:	d86d      	bhi.n	800f4a4 <UART_SetConfig+0x188>
 800f3c8:	a201      	add	r2, pc, #4	; (adr r2, 800f3d0 <UART_SetConfig+0xb4>)
 800f3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ce:	bf00      	nop
 800f3d0:	0800f475 	.word	0x0800f475
 800f3d4:	0800f4a5 	.word	0x0800f4a5
 800f3d8:	0800f4a5 	.word	0x0800f4a5
 800f3dc:	0800f4a5 	.word	0x0800f4a5
 800f3e0:	0800f4a5 	.word	0x0800f4a5
 800f3e4:	0800f4a5 	.word	0x0800f4a5
 800f3e8:	0800f4a5 	.word	0x0800f4a5
 800f3ec:	0800f4a5 	.word	0x0800f4a5
 800f3f0:	0800f47d 	.word	0x0800f47d
 800f3f4:	0800f4a5 	.word	0x0800f4a5
 800f3f8:	0800f4a5 	.word	0x0800f4a5
 800f3fc:	0800f4a5 	.word	0x0800f4a5
 800f400:	0800f4a5 	.word	0x0800f4a5
 800f404:	0800f4a5 	.word	0x0800f4a5
 800f408:	0800f4a5 	.word	0x0800f4a5
 800f40c:	0800f4a5 	.word	0x0800f4a5
 800f410:	0800f485 	.word	0x0800f485
 800f414:	0800f4a5 	.word	0x0800f4a5
 800f418:	0800f4a5 	.word	0x0800f4a5
 800f41c:	0800f4a5 	.word	0x0800f4a5
 800f420:	0800f4a5 	.word	0x0800f4a5
 800f424:	0800f4a5 	.word	0x0800f4a5
 800f428:	0800f4a5 	.word	0x0800f4a5
 800f42c:	0800f4a5 	.word	0x0800f4a5
 800f430:	0800f48d 	.word	0x0800f48d
 800f434:	0800f4a5 	.word	0x0800f4a5
 800f438:	0800f4a5 	.word	0x0800f4a5
 800f43c:	0800f4a5 	.word	0x0800f4a5
 800f440:	0800f4a5 	.word	0x0800f4a5
 800f444:	0800f4a5 	.word	0x0800f4a5
 800f448:	0800f4a5 	.word	0x0800f4a5
 800f44c:	0800f4a5 	.word	0x0800f4a5
 800f450:	0800f495 	.word	0x0800f495
 800f454:	0800f4a5 	.word	0x0800f4a5
 800f458:	0800f4a5 	.word	0x0800f4a5
 800f45c:	0800f4a5 	.word	0x0800f4a5
 800f460:	0800f4a5 	.word	0x0800f4a5
 800f464:	0800f4a5 	.word	0x0800f4a5
 800f468:	0800f4a5 	.word	0x0800f4a5
 800f46c:	0800f4a5 	.word	0x0800f4a5
 800f470:	0800f49d 	.word	0x0800f49d
 800f474:	2301      	movs	r3, #1
 800f476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f47a:	e222      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f47c:	2304      	movs	r3, #4
 800f47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f482:	e21e      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f484:	2308      	movs	r3, #8
 800f486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f48a:	e21a      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f48c:	2310      	movs	r3, #16
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f492:	e216      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f494:	2320      	movs	r3, #32
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f49a:	e212      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f49c:	2340      	movs	r3, #64	; 0x40
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4a2:	e20e      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f4a4:	2380      	movs	r3, #128	; 0x80
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e20a      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	4a69      	ldr	r2, [pc, #420]	; (800f658 <UART_SetConfig+0x33c>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d130      	bne.n	800f518 <UART_SetConfig+0x1fc>
 800f4b6:	4b67      	ldr	r3, [pc, #412]	; (800f654 <UART_SetConfig+0x338>)
 800f4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ba:	f003 0307 	and.w	r3, r3, #7
 800f4be:	2b05      	cmp	r3, #5
 800f4c0:	d826      	bhi.n	800f510 <UART_SetConfig+0x1f4>
 800f4c2:	a201      	add	r2, pc, #4	; (adr r2, 800f4c8 <UART_SetConfig+0x1ac>)
 800f4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c8:	0800f4e1 	.word	0x0800f4e1
 800f4cc:	0800f4e9 	.word	0x0800f4e9
 800f4d0:	0800f4f1 	.word	0x0800f4f1
 800f4d4:	0800f4f9 	.word	0x0800f4f9
 800f4d8:	0800f501 	.word	0x0800f501
 800f4dc:	0800f509 	.word	0x0800f509
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4e6:	e1ec      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f4e8:	2304      	movs	r3, #4
 800f4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ee:	e1e8      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f4f0:	2308      	movs	r3, #8
 800f4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4f6:	e1e4      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f4f8:	2310      	movs	r3, #16
 800f4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4fe:	e1e0      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f500:	2320      	movs	r3, #32
 800f502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f506:	e1dc      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f508:	2340      	movs	r3, #64	; 0x40
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f50e:	e1d8      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f510:	2380      	movs	r3, #128	; 0x80
 800f512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f516:	e1d4      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	4a4f      	ldr	r2, [pc, #316]	; (800f65c <UART_SetConfig+0x340>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d130      	bne.n	800f584 <UART_SetConfig+0x268>
 800f522:	4b4c      	ldr	r3, [pc, #304]	; (800f654 <UART_SetConfig+0x338>)
 800f524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f526:	f003 0307 	and.w	r3, r3, #7
 800f52a:	2b05      	cmp	r3, #5
 800f52c:	d826      	bhi.n	800f57c <UART_SetConfig+0x260>
 800f52e:	a201      	add	r2, pc, #4	; (adr r2, 800f534 <UART_SetConfig+0x218>)
 800f530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f534:	0800f54d 	.word	0x0800f54d
 800f538:	0800f555 	.word	0x0800f555
 800f53c:	0800f55d 	.word	0x0800f55d
 800f540:	0800f565 	.word	0x0800f565
 800f544:	0800f56d 	.word	0x0800f56d
 800f548:	0800f575 	.word	0x0800f575
 800f54c:	2300      	movs	r3, #0
 800f54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f552:	e1b6      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f554:	2304      	movs	r3, #4
 800f556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f55a:	e1b2      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f55c:	2308      	movs	r3, #8
 800f55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f562:	e1ae      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f564:	2310      	movs	r3, #16
 800f566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f56a:	e1aa      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f56c:	2320      	movs	r3, #32
 800f56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f572:	e1a6      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f574:	2340      	movs	r3, #64	; 0x40
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f57a:	e1a2      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f57c:	2380      	movs	r3, #128	; 0x80
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f582:	e19e      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a35      	ldr	r2, [pc, #212]	; (800f660 <UART_SetConfig+0x344>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d130      	bne.n	800f5f0 <UART_SetConfig+0x2d4>
 800f58e:	4b31      	ldr	r3, [pc, #196]	; (800f654 <UART_SetConfig+0x338>)
 800f590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f592:	f003 0307 	and.w	r3, r3, #7
 800f596:	2b05      	cmp	r3, #5
 800f598:	d826      	bhi.n	800f5e8 <UART_SetConfig+0x2cc>
 800f59a:	a201      	add	r2, pc, #4	; (adr r2, 800f5a0 <UART_SetConfig+0x284>)
 800f59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a0:	0800f5b9 	.word	0x0800f5b9
 800f5a4:	0800f5c1 	.word	0x0800f5c1
 800f5a8:	0800f5c9 	.word	0x0800f5c9
 800f5ac:	0800f5d1 	.word	0x0800f5d1
 800f5b0:	0800f5d9 	.word	0x0800f5d9
 800f5b4:	0800f5e1 	.word	0x0800f5e1
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5be:	e180      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f5c0:	2304      	movs	r3, #4
 800f5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5c6:	e17c      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f5c8:	2308      	movs	r3, #8
 800f5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ce:	e178      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f5d0:	2310      	movs	r3, #16
 800f5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5d6:	e174      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f5d8:	2320      	movs	r3, #32
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5de:	e170      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f5e0:	2340      	movs	r3, #64	; 0x40
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e6:	e16c      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f5e8:	2380      	movs	r3, #128	; 0x80
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ee:	e168      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a1b      	ldr	r2, [pc, #108]	; (800f664 <UART_SetConfig+0x348>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d142      	bne.n	800f680 <UART_SetConfig+0x364>
 800f5fa:	4b16      	ldr	r3, [pc, #88]	; (800f654 <UART_SetConfig+0x338>)
 800f5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5fe:	f003 0307 	and.w	r3, r3, #7
 800f602:	2b05      	cmp	r3, #5
 800f604:	d838      	bhi.n	800f678 <UART_SetConfig+0x35c>
 800f606:	a201      	add	r2, pc, #4	; (adr r2, 800f60c <UART_SetConfig+0x2f0>)
 800f608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f60c:	0800f625 	.word	0x0800f625
 800f610:	0800f62d 	.word	0x0800f62d
 800f614:	0800f635 	.word	0x0800f635
 800f618:	0800f63d 	.word	0x0800f63d
 800f61c:	0800f669 	.word	0x0800f669
 800f620:	0800f671 	.word	0x0800f671
 800f624:	2300      	movs	r3, #0
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62a:	e14a      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f62c:	2304      	movs	r3, #4
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f632:	e146      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f634:	2308      	movs	r3, #8
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63a:	e142      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f63c:	2310      	movs	r3, #16
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f642:	e13e      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f644:	cfff69f3 	.word	0xcfff69f3
 800f648:	58000c00 	.word	0x58000c00
 800f64c:	11fff4ff 	.word	0x11fff4ff
 800f650:	40011000 	.word	0x40011000
 800f654:	58024400 	.word	0x58024400
 800f658:	40004400 	.word	0x40004400
 800f65c:	40004800 	.word	0x40004800
 800f660:	40004c00 	.word	0x40004c00
 800f664:	40005000 	.word	0x40005000
 800f668:	2320      	movs	r3, #32
 800f66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66e:	e128      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f670:	2340      	movs	r3, #64	; 0x40
 800f672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f676:	e124      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f678:	2380      	movs	r3, #128	; 0x80
 800f67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67e:	e120      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4acb      	ldr	r2, [pc, #812]	; (800f9b4 <UART_SetConfig+0x698>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d176      	bne.n	800f778 <UART_SetConfig+0x45c>
 800f68a:	4bcb      	ldr	r3, [pc, #812]	; (800f9b8 <UART_SetConfig+0x69c>)
 800f68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f68e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f692:	2b28      	cmp	r3, #40	; 0x28
 800f694:	d86c      	bhi.n	800f770 <UART_SetConfig+0x454>
 800f696:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <UART_SetConfig+0x380>)
 800f698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69c:	0800f741 	.word	0x0800f741
 800f6a0:	0800f771 	.word	0x0800f771
 800f6a4:	0800f771 	.word	0x0800f771
 800f6a8:	0800f771 	.word	0x0800f771
 800f6ac:	0800f771 	.word	0x0800f771
 800f6b0:	0800f771 	.word	0x0800f771
 800f6b4:	0800f771 	.word	0x0800f771
 800f6b8:	0800f771 	.word	0x0800f771
 800f6bc:	0800f749 	.word	0x0800f749
 800f6c0:	0800f771 	.word	0x0800f771
 800f6c4:	0800f771 	.word	0x0800f771
 800f6c8:	0800f771 	.word	0x0800f771
 800f6cc:	0800f771 	.word	0x0800f771
 800f6d0:	0800f771 	.word	0x0800f771
 800f6d4:	0800f771 	.word	0x0800f771
 800f6d8:	0800f771 	.word	0x0800f771
 800f6dc:	0800f751 	.word	0x0800f751
 800f6e0:	0800f771 	.word	0x0800f771
 800f6e4:	0800f771 	.word	0x0800f771
 800f6e8:	0800f771 	.word	0x0800f771
 800f6ec:	0800f771 	.word	0x0800f771
 800f6f0:	0800f771 	.word	0x0800f771
 800f6f4:	0800f771 	.word	0x0800f771
 800f6f8:	0800f771 	.word	0x0800f771
 800f6fc:	0800f759 	.word	0x0800f759
 800f700:	0800f771 	.word	0x0800f771
 800f704:	0800f771 	.word	0x0800f771
 800f708:	0800f771 	.word	0x0800f771
 800f70c:	0800f771 	.word	0x0800f771
 800f710:	0800f771 	.word	0x0800f771
 800f714:	0800f771 	.word	0x0800f771
 800f718:	0800f771 	.word	0x0800f771
 800f71c:	0800f761 	.word	0x0800f761
 800f720:	0800f771 	.word	0x0800f771
 800f724:	0800f771 	.word	0x0800f771
 800f728:	0800f771 	.word	0x0800f771
 800f72c:	0800f771 	.word	0x0800f771
 800f730:	0800f771 	.word	0x0800f771
 800f734:	0800f771 	.word	0x0800f771
 800f738:	0800f771 	.word	0x0800f771
 800f73c:	0800f769 	.word	0x0800f769
 800f740:	2301      	movs	r3, #1
 800f742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f746:	e0bc      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f748:	2304      	movs	r3, #4
 800f74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f74e:	e0b8      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f750:	2308      	movs	r3, #8
 800f752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f756:	e0b4      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f758:	2310      	movs	r3, #16
 800f75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f75e:	e0b0      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f760:	2320      	movs	r3, #32
 800f762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f766:	e0ac      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f768:	2340      	movs	r3, #64	; 0x40
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f76e:	e0a8      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f770:	2380      	movs	r3, #128	; 0x80
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f776:	e0a4      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a8f      	ldr	r2, [pc, #572]	; (800f9bc <UART_SetConfig+0x6a0>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d130      	bne.n	800f7e4 <UART_SetConfig+0x4c8>
 800f782:	4b8d      	ldr	r3, [pc, #564]	; (800f9b8 <UART_SetConfig+0x69c>)
 800f784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f786:	f003 0307 	and.w	r3, r3, #7
 800f78a:	2b05      	cmp	r3, #5
 800f78c:	d826      	bhi.n	800f7dc <UART_SetConfig+0x4c0>
 800f78e:	a201      	add	r2, pc, #4	; (adr r2, 800f794 <UART_SetConfig+0x478>)
 800f790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f794:	0800f7ad 	.word	0x0800f7ad
 800f798:	0800f7b5 	.word	0x0800f7b5
 800f79c:	0800f7bd 	.word	0x0800f7bd
 800f7a0:	0800f7c5 	.word	0x0800f7c5
 800f7a4:	0800f7cd 	.word	0x0800f7cd
 800f7a8:	0800f7d5 	.word	0x0800f7d5
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7b2:	e086      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f7b4:	2304      	movs	r3, #4
 800f7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ba:	e082      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f7bc:	2308      	movs	r3, #8
 800f7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7c2:	e07e      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f7c4:	2310      	movs	r3, #16
 800f7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ca:	e07a      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f7cc:	2320      	movs	r3, #32
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7d2:	e076      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f7d4:	2340      	movs	r3, #64	; 0x40
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7da:	e072      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f7dc:	2380      	movs	r3, #128	; 0x80
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e2:	e06e      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a75      	ldr	r2, [pc, #468]	; (800f9c0 <UART_SetConfig+0x6a4>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d130      	bne.n	800f850 <UART_SetConfig+0x534>
 800f7ee:	4b72      	ldr	r3, [pc, #456]	; (800f9b8 <UART_SetConfig+0x69c>)
 800f7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7f2:	f003 0307 	and.w	r3, r3, #7
 800f7f6:	2b05      	cmp	r3, #5
 800f7f8:	d826      	bhi.n	800f848 <UART_SetConfig+0x52c>
 800f7fa:	a201      	add	r2, pc, #4	; (adr r2, 800f800 <UART_SetConfig+0x4e4>)
 800f7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f800:	0800f819 	.word	0x0800f819
 800f804:	0800f821 	.word	0x0800f821
 800f808:	0800f829 	.word	0x0800f829
 800f80c:	0800f831 	.word	0x0800f831
 800f810:	0800f839 	.word	0x0800f839
 800f814:	0800f841 	.word	0x0800f841
 800f818:	2300      	movs	r3, #0
 800f81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f81e:	e050      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f820:	2304      	movs	r3, #4
 800f822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f826:	e04c      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f828:	2308      	movs	r3, #8
 800f82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f82e:	e048      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f830:	2310      	movs	r3, #16
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f836:	e044      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f838:	2320      	movs	r3, #32
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f83e:	e040      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f840:	2340      	movs	r3, #64	; 0x40
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f846:	e03c      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f848:	2380      	movs	r3, #128	; 0x80
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f84e:	e038      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a5b      	ldr	r2, [pc, #364]	; (800f9c4 <UART_SetConfig+0x6a8>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d130      	bne.n	800f8bc <UART_SetConfig+0x5a0>
 800f85a:	4b57      	ldr	r3, [pc, #348]	; (800f9b8 <UART_SetConfig+0x69c>)
 800f85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f85e:	f003 0307 	and.w	r3, r3, #7
 800f862:	2b05      	cmp	r3, #5
 800f864:	d826      	bhi.n	800f8b4 <UART_SetConfig+0x598>
 800f866:	a201      	add	r2, pc, #4	; (adr r2, 800f86c <UART_SetConfig+0x550>)
 800f868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f86c:	0800f885 	.word	0x0800f885
 800f870:	0800f88d 	.word	0x0800f88d
 800f874:	0800f895 	.word	0x0800f895
 800f878:	0800f89d 	.word	0x0800f89d
 800f87c:	0800f8a5 	.word	0x0800f8a5
 800f880:	0800f8ad 	.word	0x0800f8ad
 800f884:	2302      	movs	r3, #2
 800f886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f88a:	e01a      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f88c:	2304      	movs	r3, #4
 800f88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f892:	e016      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f894:	2308      	movs	r3, #8
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89a:	e012      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f89c:	2310      	movs	r3, #16
 800f89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8a2:	e00e      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f8a4:	2320      	movs	r3, #32
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8aa:	e00a      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f8ac:	2340      	movs	r3, #64	; 0x40
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b2:	e006      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f8b4:	2380      	movs	r3, #128	; 0x80
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ba:	e002      	b.n	800f8c2 <UART_SetConfig+0x5a6>
 800f8bc:	2380      	movs	r3, #128	; 0x80
 800f8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4a3f      	ldr	r2, [pc, #252]	; (800f9c4 <UART_SetConfig+0x6a8>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	f040 80f8 	bne.w	800fabe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f8ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f8d2:	2b20      	cmp	r3, #32
 800f8d4:	dc46      	bgt.n	800f964 <UART_SetConfig+0x648>
 800f8d6:	2b02      	cmp	r3, #2
 800f8d8:	f2c0 8082 	blt.w	800f9e0 <UART_SetConfig+0x6c4>
 800f8dc:	3b02      	subs	r3, #2
 800f8de:	2b1e      	cmp	r3, #30
 800f8e0:	d87e      	bhi.n	800f9e0 <UART_SetConfig+0x6c4>
 800f8e2:	a201      	add	r2, pc, #4	; (adr r2, 800f8e8 <UART_SetConfig+0x5cc>)
 800f8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e8:	0800f96b 	.word	0x0800f96b
 800f8ec:	0800f9e1 	.word	0x0800f9e1
 800f8f0:	0800f973 	.word	0x0800f973
 800f8f4:	0800f9e1 	.word	0x0800f9e1
 800f8f8:	0800f9e1 	.word	0x0800f9e1
 800f8fc:	0800f9e1 	.word	0x0800f9e1
 800f900:	0800f983 	.word	0x0800f983
 800f904:	0800f9e1 	.word	0x0800f9e1
 800f908:	0800f9e1 	.word	0x0800f9e1
 800f90c:	0800f9e1 	.word	0x0800f9e1
 800f910:	0800f9e1 	.word	0x0800f9e1
 800f914:	0800f9e1 	.word	0x0800f9e1
 800f918:	0800f9e1 	.word	0x0800f9e1
 800f91c:	0800f9e1 	.word	0x0800f9e1
 800f920:	0800f993 	.word	0x0800f993
 800f924:	0800f9e1 	.word	0x0800f9e1
 800f928:	0800f9e1 	.word	0x0800f9e1
 800f92c:	0800f9e1 	.word	0x0800f9e1
 800f930:	0800f9e1 	.word	0x0800f9e1
 800f934:	0800f9e1 	.word	0x0800f9e1
 800f938:	0800f9e1 	.word	0x0800f9e1
 800f93c:	0800f9e1 	.word	0x0800f9e1
 800f940:	0800f9e1 	.word	0x0800f9e1
 800f944:	0800f9e1 	.word	0x0800f9e1
 800f948:	0800f9e1 	.word	0x0800f9e1
 800f94c:	0800f9e1 	.word	0x0800f9e1
 800f950:	0800f9e1 	.word	0x0800f9e1
 800f954:	0800f9e1 	.word	0x0800f9e1
 800f958:	0800f9e1 	.word	0x0800f9e1
 800f95c:	0800f9e1 	.word	0x0800f9e1
 800f960:	0800f9d3 	.word	0x0800f9d3
 800f964:	2b40      	cmp	r3, #64	; 0x40
 800f966:	d037      	beq.n	800f9d8 <UART_SetConfig+0x6bc>
 800f968:	e03a      	b.n	800f9e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f96a:	f7fc f869 	bl	800ba40 <HAL_RCCEx_GetD3PCLK1Freq>
 800f96e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f970:	e03c      	b.n	800f9ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f976:	4618      	mov	r0, r3
 800f978:	f7fc f878 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f980:	e034      	b.n	800f9ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f982:	f107 0318 	add.w	r3, r7, #24
 800f986:	4618      	mov	r0, r3
 800f988:	f7fc f9c4 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f990:	e02c      	b.n	800f9ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f992:	4b09      	ldr	r3, [pc, #36]	; (800f9b8 <UART_SetConfig+0x69c>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f003 0320 	and.w	r3, r3, #32
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d016      	beq.n	800f9cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f99e:	4b06      	ldr	r3, [pc, #24]	; (800f9b8 <UART_SetConfig+0x69c>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	08db      	lsrs	r3, r3, #3
 800f9a4:	f003 0303 	and.w	r3, r3, #3
 800f9a8:	4a07      	ldr	r2, [pc, #28]	; (800f9c8 <UART_SetConfig+0x6ac>)
 800f9aa:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f9b0:	e01c      	b.n	800f9ec <UART_SetConfig+0x6d0>
 800f9b2:	bf00      	nop
 800f9b4:	40011400 	.word	0x40011400
 800f9b8:	58024400 	.word	0x58024400
 800f9bc:	40007800 	.word	0x40007800
 800f9c0:	40007c00 	.word	0x40007c00
 800f9c4:	58000c00 	.word	0x58000c00
 800f9c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f9cc:	4b9d      	ldr	r3, [pc, #628]	; (800fc44 <UART_SetConfig+0x928>)
 800f9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9d0:	e00c      	b.n	800f9ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f9d2:	4b9d      	ldr	r3, [pc, #628]	; (800fc48 <UART_SetConfig+0x92c>)
 800f9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9d6:	e009      	b.n	800f9ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f9d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9de:	e005      	b.n	800f9ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f9ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	f000 81de 	beq.w	800fdb0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f8:	4a94      	ldr	r2, [pc, #592]	; (800fc4c <UART_SetConfig+0x930>)
 800f9fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9fe:	461a      	mov	r2, r3
 800fa00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa02:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa06:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	685a      	ldr	r2, [r3, #4]
 800fa0c:	4613      	mov	r3, r2
 800fa0e:	005b      	lsls	r3, r3, #1
 800fa10:	4413      	add	r3, r2
 800fa12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d305      	bcc.n	800fa24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d903      	bls.n	800fa2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fa24:	2301      	movs	r3, #1
 800fa26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fa2a:	e1c1      	b.n	800fdb0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa2e:	2200      	movs	r2, #0
 800fa30:	60bb      	str	r3, [r7, #8]
 800fa32:	60fa      	str	r2, [r7, #12]
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa38:	4a84      	ldr	r2, [pc, #528]	; (800fc4c <UART_SetConfig+0x930>)
 800fa3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	2200      	movs	r2, #0
 800fa42:	603b      	str	r3, [r7, #0]
 800fa44:	607a      	str	r2, [r7, #4]
 800fa46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fa4e:	f7f0 fc47 	bl	80002e0 <__aeabi_uldivmod>
 800fa52:	4602      	mov	r2, r0
 800fa54:	460b      	mov	r3, r1
 800fa56:	4610      	mov	r0, r2
 800fa58:	4619      	mov	r1, r3
 800fa5a:	f04f 0200 	mov.w	r2, #0
 800fa5e:	f04f 0300 	mov.w	r3, #0
 800fa62:	020b      	lsls	r3, r1, #8
 800fa64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fa68:	0202      	lsls	r2, r0, #8
 800fa6a:	6979      	ldr	r1, [r7, #20]
 800fa6c:	6849      	ldr	r1, [r1, #4]
 800fa6e:	0849      	lsrs	r1, r1, #1
 800fa70:	2000      	movs	r0, #0
 800fa72:	460c      	mov	r4, r1
 800fa74:	4605      	mov	r5, r0
 800fa76:	eb12 0804 	adds.w	r8, r2, r4
 800fa7a:	eb43 0905 	adc.w	r9, r3, r5
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	469a      	mov	sl, r3
 800fa86:	4693      	mov	fp, r2
 800fa88:	4652      	mov	r2, sl
 800fa8a:	465b      	mov	r3, fp
 800fa8c:	4640      	mov	r0, r8
 800fa8e:	4649      	mov	r1, r9
 800fa90:	f7f0 fc26 	bl	80002e0 <__aeabi_uldivmod>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	4613      	mov	r3, r2
 800fa9a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800faa2:	d308      	bcc.n	800fab6 <UART_SetConfig+0x79a>
 800faa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800faaa:	d204      	bcs.n	800fab6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fab2:	60da      	str	r2, [r3, #12]
 800fab4:	e17c      	b.n	800fdb0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fab6:	2301      	movs	r3, #1
 800fab8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fabc:	e178      	b.n	800fdb0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	69db      	ldr	r3, [r3, #28]
 800fac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fac6:	f040 80c5 	bne.w	800fc54 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800faca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800face:	2b20      	cmp	r3, #32
 800fad0:	dc48      	bgt.n	800fb64 <UART_SetConfig+0x848>
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	db7b      	blt.n	800fbce <UART_SetConfig+0x8b2>
 800fad6:	2b20      	cmp	r3, #32
 800fad8:	d879      	bhi.n	800fbce <UART_SetConfig+0x8b2>
 800fada:	a201      	add	r2, pc, #4	; (adr r2, 800fae0 <UART_SetConfig+0x7c4>)
 800fadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae0:	0800fb6b 	.word	0x0800fb6b
 800fae4:	0800fb73 	.word	0x0800fb73
 800fae8:	0800fbcf 	.word	0x0800fbcf
 800faec:	0800fbcf 	.word	0x0800fbcf
 800faf0:	0800fb7b 	.word	0x0800fb7b
 800faf4:	0800fbcf 	.word	0x0800fbcf
 800faf8:	0800fbcf 	.word	0x0800fbcf
 800fafc:	0800fbcf 	.word	0x0800fbcf
 800fb00:	0800fb8b 	.word	0x0800fb8b
 800fb04:	0800fbcf 	.word	0x0800fbcf
 800fb08:	0800fbcf 	.word	0x0800fbcf
 800fb0c:	0800fbcf 	.word	0x0800fbcf
 800fb10:	0800fbcf 	.word	0x0800fbcf
 800fb14:	0800fbcf 	.word	0x0800fbcf
 800fb18:	0800fbcf 	.word	0x0800fbcf
 800fb1c:	0800fbcf 	.word	0x0800fbcf
 800fb20:	0800fb9b 	.word	0x0800fb9b
 800fb24:	0800fbcf 	.word	0x0800fbcf
 800fb28:	0800fbcf 	.word	0x0800fbcf
 800fb2c:	0800fbcf 	.word	0x0800fbcf
 800fb30:	0800fbcf 	.word	0x0800fbcf
 800fb34:	0800fbcf 	.word	0x0800fbcf
 800fb38:	0800fbcf 	.word	0x0800fbcf
 800fb3c:	0800fbcf 	.word	0x0800fbcf
 800fb40:	0800fbcf 	.word	0x0800fbcf
 800fb44:	0800fbcf 	.word	0x0800fbcf
 800fb48:	0800fbcf 	.word	0x0800fbcf
 800fb4c:	0800fbcf 	.word	0x0800fbcf
 800fb50:	0800fbcf 	.word	0x0800fbcf
 800fb54:	0800fbcf 	.word	0x0800fbcf
 800fb58:	0800fbcf 	.word	0x0800fbcf
 800fb5c:	0800fbcf 	.word	0x0800fbcf
 800fb60:	0800fbc1 	.word	0x0800fbc1
 800fb64:	2b40      	cmp	r3, #64	; 0x40
 800fb66:	d02e      	beq.n	800fbc6 <UART_SetConfig+0x8aa>
 800fb68:	e031      	b.n	800fbce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb6a:	f7f9 ff71 	bl	8009a50 <HAL_RCC_GetPCLK1Freq>
 800fb6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb70:	e033      	b.n	800fbda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb72:	f7f9 ff83 	bl	8009a7c <HAL_RCC_GetPCLK2Freq>
 800fb76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb78:	e02f      	b.n	800fbda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fb ff74 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb88:	e027      	b.n	800fbda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb8a:	f107 0318 	add.w	r3, r7, #24
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fc f8c0 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb98:	e01f      	b.n	800fbda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb9a:	4b2d      	ldr	r3, [pc, #180]	; (800fc50 <UART_SetConfig+0x934>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f003 0320 	and.w	r3, r3, #32
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d009      	beq.n	800fbba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fba6:	4b2a      	ldr	r3, [pc, #168]	; (800fc50 <UART_SetConfig+0x934>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	08db      	lsrs	r3, r3, #3
 800fbac:	f003 0303 	and.w	r3, r3, #3
 800fbb0:	4a24      	ldr	r2, [pc, #144]	; (800fc44 <UART_SetConfig+0x928>)
 800fbb2:	fa22 f303 	lsr.w	r3, r2, r3
 800fbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fbb8:	e00f      	b.n	800fbda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fbba:	4b22      	ldr	r3, [pc, #136]	; (800fc44 <UART_SetConfig+0x928>)
 800fbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbbe:	e00c      	b.n	800fbda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fbc0:	4b21      	ldr	r3, [pc, #132]	; (800fc48 <UART_SetConfig+0x92c>)
 800fbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbc4:	e009      	b.n	800fbda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbcc:	e005      	b.n	800fbda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fbd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fbda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f000 80e7 	beq.w	800fdb0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe6:	4a19      	ldr	r2, [pc, #100]	; (800fc4c <UART_SetConfig+0x930>)
 800fbe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbec:	461a      	mov	r2, r3
 800fbee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbf4:	005a      	lsls	r2, r3, #1
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	085b      	lsrs	r3, r3, #1
 800fbfc:	441a      	add	r2, r3
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0a:	2b0f      	cmp	r3, #15
 800fc0c:	d916      	bls.n	800fc3c <UART_SetConfig+0x920>
 800fc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc14:	d212      	bcs.n	800fc3c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	f023 030f 	bic.w	r3, r3, #15
 800fc1e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc22:	085b      	lsrs	r3, r3, #1
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	f003 0307 	and.w	r3, r3, #7
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fc38:	60da      	str	r2, [r3, #12]
 800fc3a:	e0b9      	b.n	800fdb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fc42:	e0b5      	b.n	800fdb0 <UART_SetConfig+0xa94>
 800fc44:	03d09000 	.word	0x03d09000
 800fc48:	003d0900 	.word	0x003d0900
 800fc4c:	080154b4 	.word	0x080154b4
 800fc50:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fc54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc58:	2b20      	cmp	r3, #32
 800fc5a:	dc49      	bgt.n	800fcf0 <UART_SetConfig+0x9d4>
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	db7c      	blt.n	800fd5a <UART_SetConfig+0xa3e>
 800fc60:	2b20      	cmp	r3, #32
 800fc62:	d87a      	bhi.n	800fd5a <UART_SetConfig+0xa3e>
 800fc64:	a201      	add	r2, pc, #4	; (adr r2, 800fc6c <UART_SetConfig+0x950>)
 800fc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6a:	bf00      	nop
 800fc6c:	0800fcf7 	.word	0x0800fcf7
 800fc70:	0800fcff 	.word	0x0800fcff
 800fc74:	0800fd5b 	.word	0x0800fd5b
 800fc78:	0800fd5b 	.word	0x0800fd5b
 800fc7c:	0800fd07 	.word	0x0800fd07
 800fc80:	0800fd5b 	.word	0x0800fd5b
 800fc84:	0800fd5b 	.word	0x0800fd5b
 800fc88:	0800fd5b 	.word	0x0800fd5b
 800fc8c:	0800fd17 	.word	0x0800fd17
 800fc90:	0800fd5b 	.word	0x0800fd5b
 800fc94:	0800fd5b 	.word	0x0800fd5b
 800fc98:	0800fd5b 	.word	0x0800fd5b
 800fc9c:	0800fd5b 	.word	0x0800fd5b
 800fca0:	0800fd5b 	.word	0x0800fd5b
 800fca4:	0800fd5b 	.word	0x0800fd5b
 800fca8:	0800fd5b 	.word	0x0800fd5b
 800fcac:	0800fd27 	.word	0x0800fd27
 800fcb0:	0800fd5b 	.word	0x0800fd5b
 800fcb4:	0800fd5b 	.word	0x0800fd5b
 800fcb8:	0800fd5b 	.word	0x0800fd5b
 800fcbc:	0800fd5b 	.word	0x0800fd5b
 800fcc0:	0800fd5b 	.word	0x0800fd5b
 800fcc4:	0800fd5b 	.word	0x0800fd5b
 800fcc8:	0800fd5b 	.word	0x0800fd5b
 800fccc:	0800fd5b 	.word	0x0800fd5b
 800fcd0:	0800fd5b 	.word	0x0800fd5b
 800fcd4:	0800fd5b 	.word	0x0800fd5b
 800fcd8:	0800fd5b 	.word	0x0800fd5b
 800fcdc:	0800fd5b 	.word	0x0800fd5b
 800fce0:	0800fd5b 	.word	0x0800fd5b
 800fce4:	0800fd5b 	.word	0x0800fd5b
 800fce8:	0800fd5b 	.word	0x0800fd5b
 800fcec:	0800fd4d 	.word	0x0800fd4d
 800fcf0:	2b40      	cmp	r3, #64	; 0x40
 800fcf2:	d02e      	beq.n	800fd52 <UART_SetConfig+0xa36>
 800fcf4:	e031      	b.n	800fd5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fcf6:	f7f9 feab 	bl	8009a50 <HAL_RCC_GetPCLK1Freq>
 800fcfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcfc:	e033      	b.n	800fd66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fcfe:	f7f9 febd 	bl	8009a7c <HAL_RCC_GetPCLK2Freq>
 800fd02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd04:	e02f      	b.n	800fd66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7fb feae 	bl	800ba6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd14:	e027      	b.n	800fd66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd16:	f107 0318 	add.w	r3, r7, #24
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fb fffa 	bl	800bd14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd24:	e01f      	b.n	800fd66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd26:	4b2d      	ldr	r3, [pc, #180]	; (800fddc <UART_SetConfig+0xac0>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f003 0320 	and.w	r3, r3, #32
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d009      	beq.n	800fd46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd32:	4b2a      	ldr	r3, [pc, #168]	; (800fddc <UART_SetConfig+0xac0>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	08db      	lsrs	r3, r3, #3
 800fd38:	f003 0303 	and.w	r3, r3, #3
 800fd3c:	4a28      	ldr	r2, [pc, #160]	; (800fde0 <UART_SetConfig+0xac4>)
 800fd3e:	fa22 f303 	lsr.w	r3, r2, r3
 800fd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd44:	e00f      	b.n	800fd66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fd46:	4b26      	ldr	r3, [pc, #152]	; (800fde0 <UART_SetConfig+0xac4>)
 800fd48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd4a:	e00c      	b.n	800fd66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd4c:	4b25      	ldr	r3, [pc, #148]	; (800fde4 <UART_SetConfig+0xac8>)
 800fd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd50:	e009      	b.n	800fd66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd58:	e005      	b.n	800fd66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd5e:	2301      	movs	r3, #1
 800fd60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd64:	bf00      	nop
    }

    if (pclk != 0U)
 800fd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d021      	beq.n	800fdb0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd70:	4a1d      	ldr	r2, [pc, #116]	; (800fde8 <UART_SetConfig+0xacc>)
 800fd72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd76:	461a      	mov	r2, r3
 800fd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	085b      	lsrs	r3, r3, #1
 800fd84:	441a      	add	r2, r3
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd92:	2b0f      	cmp	r3, #15
 800fd94:	d909      	bls.n	800fdaa <UART_SetConfig+0xa8e>
 800fd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd9c:	d205      	bcs.n	800fdaa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	60da      	str	r2, [r3, #12]
 800fda8:	e002      	b.n	800fdb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fdcc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3748      	adds	r7, #72	; 0x48
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fdda:	bf00      	nop
 800fddc:	58024400 	.word	0x58024400
 800fde0:	03d09000 	.word	0x03d09000
 800fde4:	003d0900 	.word	0x003d0900
 800fde8:	080154b4 	.word	0x080154b4

0800fdec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdf8:	f003 0308 	and.w	r3, r3, #8
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d00a      	beq.n	800fe16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	430a      	orrs	r2, r1
 800fe14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1a:	f003 0301 	and.w	r3, r3, #1
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00a      	beq.n	800fe38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	430a      	orrs	r2, r1
 800fe36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe3c:	f003 0302 	and.w	r3, r3, #2
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d00a      	beq.n	800fe5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	430a      	orrs	r2, r1
 800fe58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe5e:	f003 0304 	and.w	r3, r3, #4
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00a      	beq.n	800fe7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	430a      	orrs	r2, r1
 800fe7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe80:	f003 0310 	and.w	r3, r3, #16
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00a      	beq.n	800fe9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	689b      	ldr	r3, [r3, #8]
 800fe8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	430a      	orrs	r2, r1
 800fe9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea2:	f003 0320 	and.w	r3, r3, #32
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00a      	beq.n	800fec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	689b      	ldr	r3, [r3, #8]
 800feb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	430a      	orrs	r2, r1
 800febe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d01a      	beq.n	800ff02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	430a      	orrs	r2, r1
 800fee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800feea:	d10a      	bne.n	800ff02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	430a      	orrs	r2, r1
 800ff00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00a      	beq.n	800ff24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	430a      	orrs	r2, r1
 800ff22:	605a      	str	r2, [r3, #4]
  }
}
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b098      	sub	sp, #96	; 0x60
 800ff34:	af02      	add	r7, sp, #8
 800ff36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff40:	f7f3 fb18 	bl	8003574 <HAL_GetTick>
 800ff44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f003 0308 	and.w	r3, r3, #8
 800ff50:	2b08      	cmp	r3, #8
 800ff52:	d12f      	bne.n	800ffb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ff58:	9300      	str	r3, [sp, #0]
 800ff5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 f88e 	bl	8010084 <UART_WaitOnFlagUntilTimeout>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d022      	beq.n	800ffb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff76:	e853 3f00 	ldrex	r3, [r3]
 800ff7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ff7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff82:	653b      	str	r3, [r7, #80]	; 0x50
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	461a      	mov	r2, r3
 800ff8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff8c:	647b      	str	r3, [r7, #68]	; 0x44
 800ff8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff94:	e841 2300 	strex	r3, r2, [r1]
 800ff98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d1e6      	bne.n	800ff6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2220      	movs	r2, #32
 800ffa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffb0:	2303      	movs	r3, #3
 800ffb2:	e063      	b.n	801007c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f003 0304 	and.w	r3, r3, #4
 800ffbe:	2b04      	cmp	r3, #4
 800ffc0:	d149      	bne.n	8010056 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 f857 	bl	8010084 <UART_WaitOnFlagUntilTimeout>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d03c      	beq.n	8010056 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe4:	e853 3f00 	ldrex	r3, [r3]
 800ffe8:	623b      	str	r3, [r7, #32]
   return(result);
 800ffea:	6a3b      	ldr	r3, [r7, #32]
 800ffec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	461a      	mov	r2, r3
 800fff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fffa:	633b      	str	r3, [r7, #48]	; 0x30
 800fffc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010002:	e841 2300 	strex	r3, r2, [r1]
 8010006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000a:	2b00      	cmp	r3, #0
 801000c:	d1e6      	bne.n	800ffdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	3308      	adds	r3, #8
 8010014:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	e853 3f00 	ldrex	r3, [r3]
 801001c:	60fb      	str	r3, [r7, #12]
   return(result);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	f023 0301 	bic.w	r3, r3, #1
 8010024:	64bb      	str	r3, [r7, #72]	; 0x48
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	3308      	adds	r3, #8
 801002c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801002e:	61fa      	str	r2, [r7, #28]
 8010030:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010032:	69b9      	ldr	r1, [r7, #24]
 8010034:	69fa      	ldr	r2, [r7, #28]
 8010036:	e841 2300 	strex	r3, r2, [r1]
 801003a:	617b      	str	r3, [r7, #20]
   return(result);
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d1e5      	bne.n	801000e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2220      	movs	r2, #32
 8010046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010052:	2303      	movs	r3, #3
 8010054:	e012      	b.n	801007c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2220      	movs	r2, #32
 801005a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2220      	movs	r2, #32
 8010062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801007a:	2300      	movs	r3, #0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3758      	adds	r7, #88	; 0x58
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	603b      	str	r3, [r7, #0]
 8010090:	4613      	mov	r3, r2
 8010092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010094:	e04f      	b.n	8010136 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010096:	69bb      	ldr	r3, [r7, #24]
 8010098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801009c:	d04b      	beq.n	8010136 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801009e:	f7f3 fa69 	bl	8003574 <HAL_GetTick>
 80100a2:	4602      	mov	r2, r0
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	69ba      	ldr	r2, [r7, #24]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d302      	bcc.n	80100b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d101      	bne.n	80100b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80100b4:	2303      	movs	r3, #3
 80100b6:	e04e      	b.n	8010156 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f003 0304 	and.w	r3, r3, #4
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d037      	beq.n	8010136 <UART_WaitOnFlagUntilTimeout+0xb2>
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	2b80      	cmp	r3, #128	; 0x80
 80100ca:	d034      	beq.n	8010136 <UART_WaitOnFlagUntilTimeout+0xb2>
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	2b40      	cmp	r3, #64	; 0x40
 80100d0:	d031      	beq.n	8010136 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	69db      	ldr	r3, [r3, #28]
 80100d8:	f003 0308 	and.w	r3, r3, #8
 80100dc:	2b08      	cmp	r3, #8
 80100de:	d110      	bne.n	8010102 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2208      	movs	r2, #8
 80100e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f000 f95b 	bl	80103a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2208      	movs	r2, #8
 80100f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2200      	movs	r2, #0
 80100fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80100fe:	2301      	movs	r3, #1
 8010100:	e029      	b.n	8010156 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	69db      	ldr	r3, [r3, #28]
 8010108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801010c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010110:	d111      	bne.n	8010136 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801011a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	f000 f941 	bl	80103a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2220      	movs	r2, #32
 8010126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2200      	movs	r2, #0
 801012e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010132:	2303      	movs	r3, #3
 8010134:	e00f      	b.n	8010156 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	69da      	ldr	r2, [r3, #28]
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	4013      	ands	r3, r2
 8010140:	68ba      	ldr	r2, [r7, #8]
 8010142:	429a      	cmp	r2, r3
 8010144:	bf0c      	ite	eq
 8010146:	2301      	moveq	r3, #1
 8010148:	2300      	movne	r3, #0
 801014a:	b2db      	uxtb	r3, r3
 801014c:	461a      	mov	r2, r3
 801014e:	79fb      	ldrb	r3, [r7, #7]
 8010150:	429a      	cmp	r2, r3
 8010152:	d0a0      	beq.n	8010096 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	3710      	adds	r7, #16
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
	...

08010160 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010160:	b480      	push	{r7}
 8010162:	b0a3      	sub	sp, #140	; 0x8c
 8010164:	af00      	add	r7, sp, #0
 8010166:	60f8      	str	r0, [r7, #12]
 8010168:	60b9      	str	r1, [r7, #8]
 801016a:	4613      	mov	r3, r2
 801016c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	68ba      	ldr	r2, [r7, #8]
 8010172:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	88fa      	ldrh	r2, [r7, #6]
 8010178:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	88fa      	ldrh	r2, [r7, #6]
 8010180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2200      	movs	r2, #0
 8010188:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010192:	d10e      	bne.n	80101b2 <UART_Start_Receive_IT+0x52>
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	691b      	ldr	r3, [r3, #16]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d105      	bne.n	80101a8 <UART_Start_Receive_IT+0x48>
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80101a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101a6:	e02d      	b.n	8010204 <UART_Start_Receive_IT+0xa4>
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	22ff      	movs	r2, #255	; 0xff
 80101ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101b0:	e028      	b.n	8010204 <UART_Start_Receive_IT+0xa4>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d10d      	bne.n	80101d6 <UART_Start_Receive_IT+0x76>
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	691b      	ldr	r3, [r3, #16]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d104      	bne.n	80101cc <UART_Start_Receive_IT+0x6c>
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	22ff      	movs	r2, #255	; 0xff
 80101c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101ca:	e01b      	b.n	8010204 <UART_Start_Receive_IT+0xa4>
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	227f      	movs	r2, #127	; 0x7f
 80101d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101d4:	e016      	b.n	8010204 <UART_Start_Receive_IT+0xa4>
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101de:	d10d      	bne.n	80101fc <UART_Start_Receive_IT+0x9c>
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	691b      	ldr	r3, [r3, #16]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d104      	bne.n	80101f2 <UART_Start_Receive_IT+0x92>
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	227f      	movs	r2, #127	; 0x7f
 80101ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101f0:	e008      	b.n	8010204 <UART_Start_Receive_IT+0xa4>
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	223f      	movs	r2, #63	; 0x3f
 80101f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101fa:	e003      	b.n	8010204 <UART_Start_Receive_IT+0xa4>
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2200      	movs	r2, #0
 8010200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2200      	movs	r2, #0
 8010208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2222      	movs	r2, #34	; 0x22
 8010210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	3308      	adds	r3, #8
 801021a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801021c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801021e:	e853 3f00 	ldrex	r3, [r3]
 8010222:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010226:	f043 0301 	orr.w	r3, r3, #1
 801022a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	3308      	adds	r3, #8
 8010234:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010238:	673a      	str	r2, [r7, #112]	; 0x70
 801023a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801023e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010240:	e841 2300 	strex	r3, r2, [r1]
 8010244:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010248:	2b00      	cmp	r3, #0
 801024a:	d1e3      	bne.n	8010214 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010254:	d14f      	bne.n	80102f6 <UART_Start_Receive_IT+0x196>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801025c:	88fa      	ldrh	r2, [r7, #6]
 801025e:	429a      	cmp	r2, r3
 8010260:	d349      	bcc.n	80102f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801026a:	d107      	bne.n	801027c <UART_Start_Receive_IT+0x11c>
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	691b      	ldr	r3, [r3, #16]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d103      	bne.n	801027c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	4a47      	ldr	r2, [pc, #284]	; (8010394 <UART_Start_Receive_IT+0x234>)
 8010278:	675a      	str	r2, [r3, #116]	; 0x74
 801027a:	e002      	b.n	8010282 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	4a46      	ldr	r2, [pc, #280]	; (8010398 <UART_Start_Receive_IT+0x238>)
 8010280:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	691b      	ldr	r3, [r3, #16]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d01a      	beq.n	80102c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010292:	e853 3f00 	ldrex	r3, [r3]
 8010296:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801029e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	461a      	mov	r2, r3
 80102a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102ae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80102b4:	e841 2300 	strex	r3, r2, [r1]
 80102b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80102ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1e4      	bne.n	801028a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	3308      	adds	r3, #8
 80102c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ca:	e853 3f00 	ldrex	r3, [r3]
 80102ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	3308      	adds	r3, #8
 80102de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80102e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80102e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80102e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102e8:	e841 2300 	strex	r3, r2, [r1]
 80102ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80102ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1e5      	bne.n	80102c0 <UART_Start_Receive_IT+0x160>
 80102f4:	e046      	b.n	8010384 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102fe:	d107      	bne.n	8010310 <UART_Start_Receive_IT+0x1b0>
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d103      	bne.n	8010310 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	4a24      	ldr	r2, [pc, #144]	; (801039c <UART_Start_Receive_IT+0x23c>)
 801030c:	675a      	str	r2, [r3, #116]	; 0x74
 801030e:	e002      	b.n	8010316 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	4a23      	ldr	r2, [pc, #140]	; (80103a0 <UART_Start_Receive_IT+0x240>)
 8010314:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	691b      	ldr	r3, [r3, #16]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d019      	beq.n	8010352 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010326:	e853 3f00 	ldrex	r3, [r3]
 801032a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010332:	677b      	str	r3, [r7, #116]	; 0x74
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	461a      	mov	r2, r3
 801033a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801033c:	637b      	str	r3, [r7, #52]	; 0x34
 801033e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010344:	e841 2300 	strex	r3, r2, [r1]
 8010348:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801034a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1e6      	bne.n	801031e <UART_Start_Receive_IT+0x1be>
 8010350:	e018      	b.n	8010384 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	e853 3f00 	ldrex	r3, [r3]
 801035e:	613b      	str	r3, [r7, #16]
   return(result);
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	f043 0320 	orr.w	r3, r3, #32
 8010366:	67bb      	str	r3, [r7, #120]	; 0x78
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	461a      	mov	r2, r3
 801036e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010370:	623b      	str	r3, [r7, #32]
 8010372:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010374:	69f9      	ldr	r1, [r7, #28]
 8010376:	6a3a      	ldr	r2, [r7, #32]
 8010378:	e841 2300 	strex	r3, r2, [r1]
 801037c:	61bb      	str	r3, [r7, #24]
   return(result);
 801037e:	69bb      	ldr	r3, [r7, #24]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1e6      	bne.n	8010352 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010384:	2300      	movs	r3, #0
}
 8010386:	4618      	mov	r0, r3
 8010388:	378c      	adds	r7, #140	; 0x8c
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	08010bc5 	.word	0x08010bc5
 8010398:	08010865 	.word	0x08010865
 801039c:	080106ad 	.word	0x080106ad
 80103a0:	080104f5 	.word	0x080104f5

080103a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b095      	sub	sp, #84	; 0x54
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b4:	e853 3f00 	ldrex	r3, [r3]
 80103b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80103ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80103c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	461a      	mov	r2, r3
 80103c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103ca:	643b      	str	r3, [r7, #64]	; 0x40
 80103cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80103d2:	e841 2300 	strex	r3, r2, [r1]
 80103d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80103d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d1e6      	bne.n	80103ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	3308      	adds	r3, #8
 80103e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e6:	6a3b      	ldr	r3, [r7, #32]
 80103e8:	e853 3f00 	ldrex	r3, [r3]
 80103ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80103ee:	69fa      	ldr	r2, [r7, #28]
 80103f0:	4b1e      	ldr	r3, [pc, #120]	; (801046c <UART_EndRxTransfer+0xc8>)
 80103f2:	4013      	ands	r3, r2
 80103f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	3308      	adds	r3, #8
 80103fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010400:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010406:	e841 2300 	strex	r3, r2, [r1]
 801040a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1e5      	bne.n	80103de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010416:	2b01      	cmp	r3, #1
 8010418:	d118      	bne.n	801044c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	e853 3f00 	ldrex	r3, [r3]
 8010426:	60bb      	str	r3, [r7, #8]
   return(result);
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	f023 0310 	bic.w	r3, r3, #16
 801042e:	647b      	str	r3, [r7, #68]	; 0x44
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	461a      	mov	r2, r3
 8010436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010438:	61bb      	str	r3, [r7, #24]
 801043a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043c:	6979      	ldr	r1, [r7, #20]
 801043e:	69ba      	ldr	r2, [r7, #24]
 8010440:	e841 2300 	strex	r3, r2, [r1]
 8010444:	613b      	str	r3, [r7, #16]
   return(result);
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d1e6      	bne.n	801041a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2220      	movs	r2, #32
 8010450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2200      	movs	r2, #0
 801045e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010460:	bf00      	nop
 8010462:	3754      	adds	r7, #84	; 0x54
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr
 801046c:	effffffe 	.word	0xeffffffe

08010470 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801047c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2200      	movs	r2, #0
 8010482:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2200      	movs	r2, #0
 801048a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801048e:	68f8      	ldr	r0, [r7, #12]
 8010490:	f7fe ff2e 	bl	800f2f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010494:	bf00      	nop
 8010496:	3710      	adds	r7, #16
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b088      	sub	sp, #32
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	e853 3f00 	ldrex	r3, [r3]
 80104b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104b8:	61fb      	str	r3, [r7, #28]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	461a      	mov	r2, r3
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	61bb      	str	r3, [r7, #24]
 80104c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c6:	6979      	ldr	r1, [r7, #20]
 80104c8:	69ba      	ldr	r2, [r7, #24]
 80104ca:	e841 2300 	strex	r3, r2, [r1]
 80104ce:	613b      	str	r3, [r7, #16]
   return(result);
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1e6      	bne.n	80104a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2220      	movs	r2, #32
 80104da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2200      	movs	r2, #0
 80104e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f7fe fef9 	bl	800f2dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80104ea:	bf00      	nop
 80104ec:	3720      	adds	r7, #32
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
	...

080104f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b09c      	sub	sp, #112	; 0x70
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010502:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801050c:	2b22      	cmp	r3, #34	; 0x22
 801050e:	f040 80be 	bne.w	801068e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010518:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801051c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010520:	b2d9      	uxtb	r1, r3
 8010522:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010526:	b2da      	uxtb	r2, r3
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801052c:	400a      	ands	r2, r1
 801052e:	b2d2      	uxtb	r2, r2
 8010530:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010536:	1c5a      	adds	r2, r3, #1
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010542:	b29b      	uxth	r3, r3
 8010544:	3b01      	subs	r3, #1
 8010546:	b29a      	uxth	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010554:	b29b      	uxth	r3, r3
 8010556:	2b00      	cmp	r3, #0
 8010558:	f040 80a1 	bne.w	801069e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010564:	e853 3f00 	ldrex	r3, [r3]
 8010568:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801056a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801056c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010570:	66bb      	str	r3, [r7, #104]	; 0x68
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	461a      	mov	r2, r3
 8010578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801057a:	65bb      	str	r3, [r7, #88]	; 0x58
 801057c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801057e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010582:	e841 2300 	strex	r3, r2, [r1]
 8010586:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801058a:	2b00      	cmp	r3, #0
 801058c:	d1e6      	bne.n	801055c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	3308      	adds	r3, #8
 8010594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010598:	e853 3f00 	ldrex	r3, [r3]
 801059c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801059e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a0:	f023 0301 	bic.w	r3, r3, #1
 80105a4:	667b      	str	r3, [r7, #100]	; 0x64
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	3308      	adds	r3, #8
 80105ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80105ae:	647a      	str	r2, [r7, #68]	; 0x44
 80105b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105b6:	e841 2300 	strex	r3, r2, [r1]
 80105ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80105bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1e5      	bne.n	801058e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2220      	movs	r2, #32
 80105c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a33      	ldr	r2, [pc, #204]	; (80106a8 <UART_RxISR_8BIT+0x1b4>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d01f      	beq.n	8010620 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d018      	beq.n	8010620 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	e853 3f00 	ldrex	r3, [r3]
 80105fa:	623b      	str	r3, [r7, #32]
   return(result);
 80105fc:	6a3b      	ldr	r3, [r7, #32]
 80105fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010602:	663b      	str	r3, [r7, #96]	; 0x60
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	461a      	mov	r2, r3
 801060a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801060c:	633b      	str	r3, [r7, #48]	; 0x30
 801060e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010614:	e841 2300 	strex	r3, r2, [r1]
 8010618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1e6      	bne.n	80105ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010624:	2b01      	cmp	r3, #1
 8010626:	d12e      	bne.n	8010686 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	e853 3f00 	ldrex	r3, [r3]
 801063a:	60fb      	str	r3, [r7, #12]
   return(result);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f023 0310 	bic.w	r3, r3, #16
 8010642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	461a      	mov	r2, r3
 801064a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801064c:	61fb      	str	r3, [r7, #28]
 801064e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010650:	69b9      	ldr	r1, [r7, #24]
 8010652:	69fa      	ldr	r2, [r7, #28]
 8010654:	e841 2300 	strex	r3, r2, [r1]
 8010658:	617b      	str	r3, [r7, #20]
   return(result);
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1e6      	bne.n	801062e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	69db      	ldr	r3, [r3, #28]
 8010666:	f003 0310 	and.w	r3, r3, #16
 801066a:	2b10      	cmp	r3, #16
 801066c:	d103      	bne.n	8010676 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2210      	movs	r2, #16
 8010674:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801067c:	4619      	mov	r1, r3
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f7fe fe40 	bl	800f304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010684:	e00b      	b.n	801069e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7ef ffe2 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 801068c:	e007      	b.n	801069e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	699a      	ldr	r2, [r3, #24]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f042 0208 	orr.w	r2, r2, #8
 801069c:	619a      	str	r2, [r3, #24]
}
 801069e:	bf00      	nop
 80106a0:	3770      	adds	r7, #112	; 0x70
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	58000c00 	.word	0x58000c00

080106ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b09c      	sub	sp, #112	; 0x70
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106c4:	2b22      	cmp	r3, #34	; 0x22
 80106c6:	f040 80be 	bne.w	8010846 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106d8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80106da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80106de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80106e2:	4013      	ands	r3, r2
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106ee:	1c9a      	adds	r2, r3, #2
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	3b01      	subs	r3, #1
 80106fe:	b29a      	uxth	r2, r3
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801070c:	b29b      	uxth	r3, r3
 801070e:	2b00      	cmp	r3, #0
 8010710:	f040 80a1 	bne.w	8010856 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801071a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801071c:	e853 3f00 	ldrex	r3, [r3]
 8010720:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010728:	667b      	str	r3, [r7, #100]	; 0x64
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	461a      	mov	r2, r3
 8010730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010732:	657b      	str	r3, [r7, #84]	; 0x54
 8010734:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010736:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801073a:	e841 2300 	strex	r3, r2, [r1]
 801073e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010742:	2b00      	cmp	r3, #0
 8010744:	d1e6      	bne.n	8010714 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	3308      	adds	r3, #8
 801074c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010750:	e853 3f00 	ldrex	r3, [r3]
 8010754:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010758:	f023 0301 	bic.w	r3, r3, #1
 801075c:	663b      	str	r3, [r7, #96]	; 0x60
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	3308      	adds	r3, #8
 8010764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010766:	643a      	str	r2, [r7, #64]	; 0x40
 8010768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801076a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801076c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801076e:	e841 2300 	strex	r3, r2, [r1]
 8010772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1e5      	bne.n	8010746 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2220      	movs	r2, #32
 801077e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2200      	movs	r2, #0
 801078c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	4a33      	ldr	r2, [pc, #204]	; (8010860 <UART_RxISR_16BIT+0x1b4>)
 8010794:	4293      	cmp	r3, r2
 8010796:	d01f      	beq.n	80107d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d018      	beq.n	80107d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ac:	6a3b      	ldr	r3, [r7, #32]
 80107ae:	e853 3f00 	ldrex	r3, [r3]
 80107b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80107ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	461a      	mov	r2, r3
 80107c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107cc:	e841 2300 	strex	r3, r2, [r1]
 80107d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80107d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1e6      	bne.n	80107a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d12e      	bne.n	801083e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2200      	movs	r2, #0
 80107e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	e853 3f00 	ldrex	r3, [r3]
 80107f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	f023 0310 	bic.w	r3, r3, #16
 80107fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	461a      	mov	r2, r3
 8010802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010804:	61bb      	str	r3, [r7, #24]
 8010806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010808:	6979      	ldr	r1, [r7, #20]
 801080a:	69ba      	ldr	r2, [r7, #24]
 801080c:	e841 2300 	strex	r3, r2, [r1]
 8010810:	613b      	str	r3, [r7, #16]
   return(result);
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1e6      	bne.n	80107e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	69db      	ldr	r3, [r3, #28]
 801081e:	f003 0310 	and.w	r3, r3, #16
 8010822:	2b10      	cmp	r3, #16
 8010824:	d103      	bne.n	801082e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2210      	movs	r2, #16
 801082c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010834:	4619      	mov	r1, r3
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f7fe fd64 	bl	800f304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801083c:	e00b      	b.n	8010856 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ef ff06 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8010844:	e007      	b.n	8010856 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	699a      	ldr	r2, [r3, #24]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f042 0208 	orr.w	r2, r2, #8
 8010854:	619a      	str	r2, [r3, #24]
}
 8010856:	bf00      	nop
 8010858:	3770      	adds	r7, #112	; 0x70
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	58000c00 	.word	0x58000c00

08010864 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b0ac      	sub	sp, #176	; 0xb0
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010872:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	69db      	ldr	r3, [r3, #28]
 801087c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801089a:	2b22      	cmp	r3, #34	; 0x22
 801089c:	f040 8180 	bne.w	8010ba0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108a6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80108aa:	e123      	b.n	8010af4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80108b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80108ba:	b2d9      	uxtb	r1, r3
 80108bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80108c0:	b2da      	uxtb	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108c6:	400a      	ands	r2, r1
 80108c8:	b2d2      	uxtb	r2, r2
 80108ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108d0:	1c5a      	adds	r2, r3, #1
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108dc:	b29b      	uxth	r3, r3
 80108de:	3b01      	subs	r3, #1
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	69db      	ldr	r3, [r3, #28]
 80108ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80108f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80108f6:	f003 0307 	and.w	r3, r3, #7
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d053      	beq.n	80109a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80108fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010902:	f003 0301 	and.w	r3, r3, #1
 8010906:	2b00      	cmp	r3, #0
 8010908:	d011      	beq.n	801092e <UART_RxISR_8BIT_FIFOEN+0xca>
 801090a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801090e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00b      	beq.n	801092e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2201      	movs	r2, #1
 801091c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010924:	f043 0201 	orr.w	r2, r3, #1
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801092e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010932:	f003 0302 	and.w	r3, r3, #2
 8010936:	2b00      	cmp	r3, #0
 8010938:	d011      	beq.n	801095e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801093a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801093e:	f003 0301 	and.w	r3, r3, #1
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00b      	beq.n	801095e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2202      	movs	r2, #2
 801094c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010954:	f043 0204 	orr.w	r2, r3, #4
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801095e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010962:	f003 0304 	and.w	r3, r3, #4
 8010966:	2b00      	cmp	r3, #0
 8010968:	d011      	beq.n	801098e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801096a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801096e:	f003 0301 	and.w	r3, r3, #1
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00b      	beq.n	801098e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2204      	movs	r2, #4
 801097c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010984:	f043 0202 	orr.w	r2, r3, #2
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010994:	2b00      	cmp	r3, #0
 8010996:	d006      	beq.n	80109a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7fe fca9 	bl	800f2f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2200      	movs	r2, #0
 80109a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f040 80a0 	bne.w	8010af4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80109bc:	e853 3f00 	ldrex	r3, [r3]
 80109c0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80109c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	461a      	mov	r2, r3
 80109d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80109d8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80109dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80109de:	e841 2300 	strex	r3, r2, [r1]
 80109e2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80109e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1e4      	bne.n	80109b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	3308      	adds	r3, #8
 80109f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109f4:	e853 3f00 	ldrex	r3, [r3]
 80109f8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80109fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80109fc:	4b6e      	ldr	r3, [pc, #440]	; (8010bb8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80109fe:	4013      	ands	r3, r2
 8010a00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	3308      	adds	r3, #8
 8010a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a0e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010a10:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a12:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010a14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010a16:	e841 2300 	strex	r3, r2, [r1]
 8010a1a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d1e3      	bne.n	80109ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2220      	movs	r2, #32
 8010a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2200      	movs	r2, #0
 8010a34:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4a60      	ldr	r2, [pc, #384]	; (8010bbc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d021      	beq.n	8010a84 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d01a      	beq.n	8010a84 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a56:	e853 3f00 	ldrex	r3, [r3]
 8010a5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a70:	657b      	str	r3, [r7, #84]	; 0x54
 8010a72:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a78:	e841 2300 	strex	r3, r2, [r1]
 8010a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d1e4      	bne.n	8010a4e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d130      	bne.n	8010aee <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a9a:	e853 3f00 	ldrex	r3, [r3]
 8010a9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa2:	f023 0310 	bic.w	r3, r3, #16
 8010aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8010ab6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010abc:	e841 2300 	strex	r3, r2, [r1]
 8010ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d1e4      	bne.n	8010a92 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	69db      	ldr	r3, [r3, #28]
 8010ace:	f003 0310 	and.w	r3, r3, #16
 8010ad2:	2b10      	cmp	r3, #16
 8010ad4:	d103      	bne.n	8010ade <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2210      	movs	r2, #16
 8010adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f7fe fc0c 	bl	800f304 <HAL_UARTEx_RxEventCallback>
 8010aec:	e002      	b.n	8010af4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7ef fdae 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010af4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d006      	beq.n	8010b0a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b00:	f003 0320 	and.w	r3, r3, #32
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f47f aed1 	bne.w	80108ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b10:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010b14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d049      	beq.n	8010bb0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b22:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d242      	bcs.n	8010bb0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	3308      	adds	r3, #8
 8010b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b32:	6a3b      	ldr	r3, [r7, #32]
 8010b34:	e853 3f00 	ldrex	r3, [r3]
 8010b38:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	3308      	adds	r3, #8
 8010b4a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b56:	e841 2300 	strex	r3, r2, [r1]
 8010b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1e3      	bne.n	8010b2a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	4a16      	ldr	r2, [pc, #88]	; (8010bc0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010b66:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	e853 3f00 	ldrex	r3, [r3]
 8010b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	f043 0320 	orr.w	r3, r3, #32
 8010b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	461a      	mov	r2, r3
 8010b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b8a:	61bb      	str	r3, [r7, #24]
 8010b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b8e:	6979      	ldr	r1, [r7, #20]
 8010b90:	69ba      	ldr	r2, [r7, #24]
 8010b92:	e841 2300 	strex	r3, r2, [r1]
 8010b96:	613b      	str	r3, [r7, #16]
   return(result);
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d1e4      	bne.n	8010b68 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b9e:	e007      	b.n	8010bb0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	699a      	ldr	r2, [r3, #24]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f042 0208 	orr.w	r2, r2, #8
 8010bae:	619a      	str	r2, [r3, #24]
}
 8010bb0:	bf00      	nop
 8010bb2:	37b0      	adds	r7, #176	; 0xb0
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	effffffe 	.word	0xeffffffe
 8010bbc:	58000c00 	.word	0x58000c00
 8010bc0:	080104f5 	.word	0x080104f5

08010bc4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b0ae      	sub	sp, #184	; 0xb8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bd2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	69db      	ldr	r3, [r3, #28]
 8010bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bfa:	2b22      	cmp	r3, #34	; 0x22
 8010bfc:	f040 8184 	bne.w	8010f08 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010c06:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010c0a:	e127      	b.n	8010e5c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c12:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010c1e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010c22:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010c26:	4013      	ands	r3, r2
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c34:	1c9a      	adds	r2, r3, #2
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	3b01      	subs	r3, #1
 8010c44:	b29a      	uxth	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	69db      	ldr	r3, [r3, #28]
 8010c52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010c56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010c5a:	f003 0307 	and.w	r3, r3, #7
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d053      	beq.n	8010d0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010c66:	f003 0301 	and.w	r3, r3, #1
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d011      	beq.n	8010c92 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00b      	beq.n	8010c92 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c88:	f043 0201 	orr.w	r2, r3, #1
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010c96:	f003 0302 	and.w	r3, r3, #2
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d011      	beq.n	8010cc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010ca2:	f003 0301 	and.w	r3, r3, #1
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d00b      	beq.n	8010cc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	2202      	movs	r2, #2
 8010cb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cb8:	f043 0204 	orr.w	r2, r3, #4
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cc6:	f003 0304 	and.w	r3, r3, #4
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d011      	beq.n	8010cf2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cd2:	f003 0301 	and.w	r3, r3, #1
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d00b      	beq.n	8010cf2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2204      	movs	r2, #4
 8010ce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ce8:	f043 0202 	orr.w	r2, r3, #2
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d006      	beq.n	8010d0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f7fe faf7 	bl	800f2f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2200      	movs	r2, #0
 8010d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	f040 80a2 	bne.w	8010e5c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d20:	e853 3f00 	ldrex	r3, [r3]
 8010d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	461a      	mov	r2, r3
 8010d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d46:	e841 2300 	strex	r3, r2, [r1]
 8010d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d1e2      	bne.n	8010d18 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	3308      	adds	r3, #8
 8010d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d5c:	e853 3f00 	ldrex	r3, [r3]
 8010d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010d62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010d64:	4b6e      	ldr	r3, [pc, #440]	; (8010f20 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010d66:	4013      	ands	r3, r2
 8010d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	3308      	adds	r3, #8
 8010d72:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010d7e:	e841 2300 	strex	r3, r2, [r1]
 8010d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d1e3      	bne.n	8010d52 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2220      	movs	r2, #32
 8010d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2200      	movs	r2, #0
 8010d96:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	4a60      	ldr	r2, [pc, #384]	; (8010f24 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d021      	beq.n	8010dec <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d01a      	beq.n	8010dec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dbe:	e853 3f00 	ldrex	r3, [r3]
 8010dc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010dd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8010dda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ddc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010dde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010de0:	e841 2300 	strex	r3, r2, [r1]
 8010de4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d1e4      	bne.n	8010db6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d130      	bne.n	8010e56 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2200      	movs	r2, #0
 8010df8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e02:	e853 3f00 	ldrex	r3, [r3]
 8010e06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e0a:	f023 0310 	bic.w	r3, r3, #16
 8010e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	461a      	mov	r2, r3
 8010e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8010e1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e24:	e841 2300 	strex	r3, r2, [r1]
 8010e28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d1e4      	bne.n	8010dfa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	69db      	ldr	r3, [r3, #28]
 8010e36:	f003 0310 	and.w	r3, r3, #16
 8010e3a:	2b10      	cmp	r3, #16
 8010e3c:	d103      	bne.n	8010e46 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2210      	movs	r2, #16
 8010e44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7fe fa58 	bl	800f304 <HAL_UARTEx_RxEventCallback>
 8010e54:	e002      	b.n	8010e5c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f7ef fbfa 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010e5c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d006      	beq.n	8010e72 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010e64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010e68:	f003 0320 	and.w	r3, r3, #32
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	f47f aecd 	bne.w	8010c0c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e78:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010e7c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d049      	beq.n	8010f18 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010e8a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d242      	bcs.n	8010f18 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	3308      	adds	r3, #8
 8010e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	e853 3f00 	ldrex	r3, [r3]
 8010ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8010ea2:	6a3b      	ldr	r3, [r7, #32]
 8010ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	3308      	adds	r3, #8
 8010eb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8010eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ebe:	e841 2300 	strex	r3, r2, [r1]
 8010ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d1e3      	bne.n	8010e92 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	4a16      	ldr	r2, [pc, #88]	; (8010f28 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010ece:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	e853 3f00 	ldrex	r3, [r3]
 8010edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f043 0320 	orr.w	r3, r3, #32
 8010ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	461a      	mov	r2, r3
 8010eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ef2:	61fb      	str	r3, [r7, #28]
 8010ef4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef6:	69b9      	ldr	r1, [r7, #24]
 8010ef8:	69fa      	ldr	r2, [r7, #28]
 8010efa:	e841 2300 	strex	r3, r2, [r1]
 8010efe:	617b      	str	r3, [r7, #20]
   return(result);
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1e4      	bne.n	8010ed0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010f06:	e007      	b.n	8010f18 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	699a      	ldr	r2, [r3, #24]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f042 0208 	orr.w	r2, r2, #8
 8010f16:	619a      	str	r2, [r3, #24]
}
 8010f18:	bf00      	nop
 8010f1a:	37b8      	adds	r7, #184	; 0xb8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	effffffe 	.word	0xeffffffe
 8010f24:	58000c00 	.word	0x58000c00
 8010f28:	080106ad 	.word	0x080106ad

08010f2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010f34:	bf00      	nop
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b083      	sub	sp, #12
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010f48:	bf00      	nop
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr

08010f54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010f5c:	bf00      	nop
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d101      	bne.n	8010f7e <HAL_UARTEx_DisableFifoMode+0x16>
 8010f7a:	2302      	movs	r3, #2
 8010f7c:	e027      	b.n	8010fce <HAL_UARTEx_DisableFifoMode+0x66>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2224      	movs	r2, #36	; 0x24
 8010f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	681a      	ldr	r2, [r3, #0]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f022 0201 	bic.w	r2, r2, #1
 8010fa4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010fac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2220      	movs	r2, #32
 8010fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010fcc:	2300      	movs	r3, #0
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3714      	adds	r7, #20
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr

08010fda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010fda:	b580      	push	{r7, lr}
 8010fdc:	b084      	sub	sp, #16
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
 8010fe2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d101      	bne.n	8010ff2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010fee:	2302      	movs	r3, #2
 8010ff0:	e02d      	b.n	801104e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2224      	movs	r2, #36	; 0x24
 8010ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	f022 0201 	bic.w	r2, r2, #1
 8011018:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	689b      	ldr	r3, [r3, #8]
 8011020:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	683a      	ldr	r2, [r7, #0]
 801102a:	430a      	orrs	r2, r1
 801102c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 f850 	bl	80110d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	68fa      	ldr	r2, [r7, #12]
 801103a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2220      	movs	r2, #32
 8011040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2200      	movs	r2, #0
 8011048:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801104c:	2300      	movs	r3, #0
}
 801104e:	4618      	mov	r0, r3
 8011050:	3710      	adds	r7, #16
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}

08011056 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011056:	b580      	push	{r7, lr}
 8011058:	b084      	sub	sp, #16
 801105a:	af00      	add	r7, sp, #0
 801105c:	6078      	str	r0, [r7, #4]
 801105e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011066:	2b01      	cmp	r3, #1
 8011068:	d101      	bne.n	801106e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801106a:	2302      	movs	r3, #2
 801106c:	e02d      	b.n	80110ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2201      	movs	r2, #1
 8011072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2224      	movs	r2, #36	; 0x24
 801107a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	681a      	ldr	r2, [r3, #0]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	f022 0201 	bic.w	r2, r2, #1
 8011094:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	689b      	ldr	r3, [r3, #8]
 801109c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	683a      	ldr	r2, [r7, #0]
 80110a6:	430a      	orrs	r2, r1
 80110a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 f812 	bl	80110d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2220      	movs	r2, #32
 80110bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80110c8:	2300      	movs	r3, #0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
	...

080110d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b085      	sub	sp, #20
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d108      	bne.n	80110f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2201      	movs	r2, #1
 80110e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2201      	movs	r2, #1
 80110f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80110f4:	e031      	b.n	801115a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80110f6:	2310      	movs	r3, #16
 80110f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80110fa:	2310      	movs	r3, #16
 80110fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	689b      	ldr	r3, [r3, #8]
 8011104:	0e5b      	lsrs	r3, r3, #25
 8011106:	b2db      	uxtb	r3, r3
 8011108:	f003 0307 	and.w	r3, r3, #7
 801110c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	689b      	ldr	r3, [r3, #8]
 8011114:	0f5b      	lsrs	r3, r3, #29
 8011116:	b2db      	uxtb	r3, r3
 8011118:	f003 0307 	and.w	r3, r3, #7
 801111c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801111e:	7bbb      	ldrb	r3, [r7, #14]
 8011120:	7b3a      	ldrb	r2, [r7, #12]
 8011122:	4911      	ldr	r1, [pc, #68]	; (8011168 <UARTEx_SetNbDataToProcess+0x94>)
 8011124:	5c8a      	ldrb	r2, [r1, r2]
 8011126:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801112a:	7b3a      	ldrb	r2, [r7, #12]
 801112c:	490f      	ldr	r1, [pc, #60]	; (801116c <UARTEx_SetNbDataToProcess+0x98>)
 801112e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011130:	fb93 f3f2 	sdiv	r3, r3, r2
 8011134:	b29a      	uxth	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801113c:	7bfb      	ldrb	r3, [r7, #15]
 801113e:	7b7a      	ldrb	r2, [r7, #13]
 8011140:	4909      	ldr	r1, [pc, #36]	; (8011168 <UARTEx_SetNbDataToProcess+0x94>)
 8011142:	5c8a      	ldrb	r2, [r1, r2]
 8011144:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011148:	7b7a      	ldrb	r2, [r7, #13]
 801114a:	4908      	ldr	r1, [pc, #32]	; (801116c <UARTEx_SetNbDataToProcess+0x98>)
 801114c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801114e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011152:	b29a      	uxth	r2, r3
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801115a:	bf00      	nop
 801115c:	3714      	adds	r7, #20
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	080154cc 	.word	0x080154cc
 801116c:	080154d4 	.word	0x080154d4

08011170 <__NVIC_SetPriority>:
{
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	4603      	mov	r3, r0
 8011178:	6039      	str	r1, [r7, #0]
 801117a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801117c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011180:	2b00      	cmp	r3, #0
 8011182:	db0a      	blt.n	801119a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	b2da      	uxtb	r2, r3
 8011188:	490c      	ldr	r1, [pc, #48]	; (80111bc <__NVIC_SetPriority+0x4c>)
 801118a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801118e:	0112      	lsls	r2, r2, #4
 8011190:	b2d2      	uxtb	r2, r2
 8011192:	440b      	add	r3, r1
 8011194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011198:	e00a      	b.n	80111b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	b2da      	uxtb	r2, r3
 801119e:	4908      	ldr	r1, [pc, #32]	; (80111c0 <__NVIC_SetPriority+0x50>)
 80111a0:	88fb      	ldrh	r3, [r7, #6]
 80111a2:	f003 030f 	and.w	r3, r3, #15
 80111a6:	3b04      	subs	r3, #4
 80111a8:	0112      	lsls	r2, r2, #4
 80111aa:	b2d2      	uxtb	r2, r2
 80111ac:	440b      	add	r3, r1
 80111ae:	761a      	strb	r2, [r3, #24]
}
 80111b0:	bf00      	nop
 80111b2:	370c      	adds	r7, #12
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr
 80111bc:	e000e100 	.word	0xe000e100
 80111c0:	e000ed00 	.word	0xe000ed00

080111c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80111c4:	b580      	push	{r7, lr}
 80111c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80111c8:	4b05      	ldr	r3, [pc, #20]	; (80111e0 <SysTick_Handler+0x1c>)
 80111ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80111cc:	f002 f9ce 	bl	801356c <xTaskGetSchedulerState>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d001      	beq.n	80111da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80111d6:	f002 ffef 	bl	80141b8 <xPortSysTickHandler>
  }
}
 80111da:	bf00      	nop
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	e000e010 	.word	0xe000e010

080111e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80111e4:	b580      	push	{r7, lr}
 80111e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80111e8:	2100      	movs	r1, #0
 80111ea:	f06f 0004 	mvn.w	r0, #4
 80111ee:	f7ff ffbf 	bl	8011170 <__NVIC_SetPriority>
#endif
}
 80111f2:	bf00      	nop
 80111f4:	bd80      	pop	{r7, pc}
	...

080111f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111fe:	f3ef 8305 	mrs	r3, IPSR
 8011202:	603b      	str	r3, [r7, #0]
  return(result);
 8011204:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011206:	2b00      	cmp	r3, #0
 8011208:	d003      	beq.n	8011212 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801120a:	f06f 0305 	mvn.w	r3, #5
 801120e:	607b      	str	r3, [r7, #4]
 8011210:	e00c      	b.n	801122c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011212:	4b0a      	ldr	r3, [pc, #40]	; (801123c <osKernelInitialize+0x44>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d105      	bne.n	8011226 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801121a:	4b08      	ldr	r3, [pc, #32]	; (801123c <osKernelInitialize+0x44>)
 801121c:	2201      	movs	r2, #1
 801121e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011220:	2300      	movs	r3, #0
 8011222:	607b      	str	r3, [r7, #4]
 8011224:	e002      	b.n	801122c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801122a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801122c:	687b      	ldr	r3, [r7, #4]
}
 801122e:	4618      	mov	r0, r3
 8011230:	370c      	adds	r7, #12
 8011232:	46bd      	mov	sp, r7
 8011234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop
 801123c:	24000c3c 	.word	0x24000c3c

08011240 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011246:	f3ef 8305 	mrs	r3, IPSR
 801124a:	603b      	str	r3, [r7, #0]
  return(result);
 801124c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801124e:	2b00      	cmp	r3, #0
 8011250:	d003      	beq.n	801125a <osKernelStart+0x1a>
    stat = osErrorISR;
 8011252:	f06f 0305 	mvn.w	r3, #5
 8011256:	607b      	str	r3, [r7, #4]
 8011258:	e010      	b.n	801127c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801125a:	4b0b      	ldr	r3, [pc, #44]	; (8011288 <osKernelStart+0x48>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2b01      	cmp	r3, #1
 8011260:	d109      	bne.n	8011276 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011262:	f7ff ffbf 	bl	80111e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011266:	4b08      	ldr	r3, [pc, #32]	; (8011288 <osKernelStart+0x48>)
 8011268:	2202      	movs	r2, #2
 801126a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801126c:	f001 fc98 	bl	8012ba0 <vTaskStartScheduler>
      stat = osOK;
 8011270:	2300      	movs	r3, #0
 8011272:	607b      	str	r3, [r7, #4]
 8011274:	e002      	b.n	801127c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801127a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801127c:	687b      	ldr	r3, [r7, #4]
}
 801127e:	4618      	mov	r0, r3
 8011280:	3708      	adds	r7, #8
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	24000c3c 	.word	0x24000c3c

0801128c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801128c:	b580      	push	{r7, lr}
 801128e:	b08e      	sub	sp, #56	; 0x38
 8011290:	af04      	add	r7, sp, #16
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011298:	2300      	movs	r3, #0
 801129a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801129c:	f3ef 8305 	mrs	r3, IPSR
 80112a0:	617b      	str	r3, [r7, #20]
  return(result);
 80112a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d17e      	bne.n	80113a6 <osThreadNew+0x11a>
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d07b      	beq.n	80113a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80112ae:	2380      	movs	r3, #128	; 0x80
 80112b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80112b2:	2318      	movs	r3, #24
 80112b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80112b6:	2300      	movs	r3, #0
 80112b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80112ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d045      	beq.n	8011352 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d002      	beq.n	80112d4 <osThreadNew+0x48>
        name = attr->name;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	699b      	ldr	r3, [r3, #24]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d002      	beq.n	80112e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	699b      	ldr	r3, [r3, #24]
 80112e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d008      	beq.n	80112fa <osThreadNew+0x6e>
 80112e8:	69fb      	ldr	r3, [r7, #28]
 80112ea:	2b38      	cmp	r3, #56	; 0x38
 80112ec:	d805      	bhi.n	80112fa <osThreadNew+0x6e>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	f003 0301 	and.w	r3, r3, #1
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d001      	beq.n	80112fe <osThreadNew+0x72>
        return (NULL);
 80112fa:	2300      	movs	r3, #0
 80112fc:	e054      	b.n	80113a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	695b      	ldr	r3, [r3, #20]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d003      	beq.n	801130e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	695b      	ldr	r3, [r3, #20]
 801130a:	089b      	lsrs	r3, r3, #2
 801130c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	689b      	ldr	r3, [r3, #8]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d00e      	beq.n	8011334 <osThreadNew+0xa8>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	2b5b      	cmp	r3, #91	; 0x5b
 801131c:	d90a      	bls.n	8011334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011322:	2b00      	cmp	r3, #0
 8011324:	d006      	beq.n	8011334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	695b      	ldr	r3, [r3, #20]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d002      	beq.n	8011334 <osThreadNew+0xa8>
        mem = 1;
 801132e:	2301      	movs	r3, #1
 8011330:	61bb      	str	r3, [r7, #24]
 8011332:	e010      	b.n	8011356 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	689b      	ldr	r3, [r3, #8]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d10c      	bne.n	8011356 <osThreadNew+0xca>
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d108      	bne.n	8011356 <osThreadNew+0xca>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	691b      	ldr	r3, [r3, #16]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d104      	bne.n	8011356 <osThreadNew+0xca>
          mem = 0;
 801134c:	2300      	movs	r3, #0
 801134e:	61bb      	str	r3, [r7, #24]
 8011350:	e001      	b.n	8011356 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011352:	2300      	movs	r3, #0
 8011354:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011356:	69bb      	ldr	r3, [r7, #24]
 8011358:	2b01      	cmp	r3, #1
 801135a:	d110      	bne.n	801137e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011364:	9202      	str	r2, [sp, #8]
 8011366:	9301      	str	r3, [sp, #4]
 8011368:	69fb      	ldr	r3, [r7, #28]
 801136a:	9300      	str	r3, [sp, #0]
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	6a3a      	ldr	r2, [r7, #32]
 8011370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011372:	68f8      	ldr	r0, [r7, #12]
 8011374:	f001 f924 	bl	80125c0 <xTaskCreateStatic>
 8011378:	4603      	mov	r3, r0
 801137a:	613b      	str	r3, [r7, #16]
 801137c:	e013      	b.n	80113a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d110      	bne.n	80113a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011384:	6a3b      	ldr	r3, [r7, #32]
 8011386:	b29a      	uxth	r2, r3
 8011388:	f107 0310 	add.w	r3, r7, #16
 801138c:	9301      	str	r3, [sp, #4]
 801138e:	69fb      	ldr	r3, [r7, #28]
 8011390:	9300      	str	r3, [sp, #0]
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011396:	68f8      	ldr	r0, [r7, #12]
 8011398:	f001 f96f 	bl	801267a <xTaskCreate>
 801139c:	4603      	mov	r3, r0
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d001      	beq.n	80113a6 <osThreadNew+0x11a>
            hTask = NULL;
 80113a2:	2300      	movs	r3, #0
 80113a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80113a6:	693b      	ldr	r3, [r7, #16]
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3728      	adds	r7, #40	; 0x28
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113b6:	f3ef 8305 	mrs	r3, IPSR
 80113ba:	603b      	str	r3, [r7, #0]
  return(result);
 80113bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d003      	beq.n	80113ca <osThreadYield+0x1a>
    stat = osErrorISR;
 80113c2:	f06f 0305 	mvn.w	r3, #5
 80113c6:	607b      	str	r3, [r7, #4]
 80113c8:	e009      	b.n	80113de <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80113ce:	4b07      	ldr	r3, [pc, #28]	; (80113ec <osThreadYield+0x3c>)
 80113d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113d4:	601a      	str	r2, [r3, #0]
 80113d6:	f3bf 8f4f 	dsb	sy
 80113da:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80113de:	687b      	ldr	r3, [r7, #4]
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	370c      	adds	r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr
 80113ec:	e000ed04 	.word	0xe000ed04

080113f0 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b086      	sub	sp, #24
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113fc:	f3ef 8305 	mrs	r3, IPSR
 8011400:	60fb      	str	r3, [r7, #12]
  return(result);
 8011402:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011404:	2b00      	cmp	r3, #0
 8011406:	d003      	beq.n	8011410 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8011408:	f06f 0305 	mvn.w	r3, #5
 801140c:	617b      	str	r3, [r7, #20]
 801140e:	e00b      	b.n	8011428 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d103      	bne.n	801141e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8011416:	f06f 0303 	mvn.w	r3, #3
 801141a:	617b      	str	r3, [r7, #20]
 801141c:	e004      	b.n	8011428 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801141e:	2300      	movs	r3, #0
 8011420:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8011422:	6938      	ldr	r0, [r7, #16]
 8011424:	f001 faa2 	bl	801296c <vTaskSuspend>
  }

  return (stat);
 8011428:	697b      	ldr	r3, [r7, #20]
}
 801142a:	4618      	mov	r0, r3
 801142c:	3718      	adds	r7, #24
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}

08011432 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011432:	b580      	push	{r7, lr}
 8011434:	b084      	sub	sp, #16
 8011436:	af00      	add	r7, sp, #0
 8011438:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801143a:	f3ef 8305 	mrs	r3, IPSR
 801143e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011440:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011442:	2b00      	cmp	r3, #0
 8011444:	d003      	beq.n	801144e <osDelay+0x1c>
    stat = osErrorISR;
 8011446:	f06f 0305 	mvn.w	r3, #5
 801144a:	60fb      	str	r3, [r7, #12]
 801144c:	e007      	b.n	801145e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801144e:	2300      	movs	r3, #0
 8011450:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d002      	beq.n	801145e <osDelay+0x2c>
      vTaskDelay(ticks);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f001 fa53 	bl	8012904 <vTaskDelay>
    }
  }

  return (stat);
 801145e:	68fb      	ldr	r3, [r7, #12]
}
 8011460:	4618      	mov	r0, r3
 8011462:	3710      	adds	r7, #16
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8011468:	b580      	push	{r7, lr}
 801146a:	b086      	sub	sp, #24
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8011470:	2300      	movs	r3, #0
 8011472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011474:	f3ef 8305 	mrs	r3, IPSR
 8011478:	60fb      	str	r3, [r7, #12]
  return(result);
 801147a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801147c:	2b00      	cmp	r3, #0
 801147e:	d12d      	bne.n	80114dc <osEventFlagsNew+0x74>
    mem = -1;
 8011480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011484:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d015      	beq.n	80114b8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	689b      	ldr	r3, [r3, #8]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d006      	beq.n	80114a2 <osEventFlagsNew+0x3a>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	2b1f      	cmp	r3, #31
 801149a:	d902      	bls.n	80114a2 <osEventFlagsNew+0x3a>
        mem = 1;
 801149c:	2301      	movs	r3, #1
 801149e:	613b      	str	r3, [r7, #16]
 80114a0:	e00c      	b.n	80114bc <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	689b      	ldr	r3, [r3, #8]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d108      	bne.n	80114bc <osEventFlagsNew+0x54>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d104      	bne.n	80114bc <osEventFlagsNew+0x54>
          mem = 0;
 80114b2:	2300      	movs	r3, #0
 80114b4:	613b      	str	r3, [r7, #16]
 80114b6:	e001      	b.n	80114bc <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80114b8:	2300      	movs	r3, #0
 80114ba:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	2b01      	cmp	r3, #1
 80114c0:	d106      	bne.n	80114d0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	689b      	ldr	r3, [r3, #8]
 80114c6:	4618      	mov	r0, r3
 80114c8:	f000 f8ec 	bl	80116a4 <xEventGroupCreateStatic>
 80114cc:	6178      	str	r0, [r7, #20]
 80114ce:	e005      	b.n	80114dc <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d102      	bne.n	80114dc <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80114d6:	f000 f91c 	bl	8011712 <xEventGroupCreate>
 80114da:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80114dc:	697b      	ldr	r3, [r7, #20]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3718      	adds	r7, #24
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
	...

080114e8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b086      	sub	sp, #24
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d004      	beq.n	8011506 <osEventFlagsSet+0x1e>
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011502:	2b00      	cmp	r3, #0
 8011504:	d003      	beq.n	801150e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8011506:	f06f 0303 	mvn.w	r3, #3
 801150a:	617b      	str	r3, [r7, #20]
 801150c:	e028      	b.n	8011560 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801150e:	f3ef 8305 	mrs	r3, IPSR
 8011512:	60fb      	str	r3, [r7, #12]
  return(result);
 8011514:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011516:	2b00      	cmp	r3, #0
 8011518:	d01d      	beq.n	8011556 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801151a:	2300      	movs	r3, #0
 801151c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801151e:	f107 0308 	add.w	r3, r7, #8
 8011522:	461a      	mov	r2, r3
 8011524:	6839      	ldr	r1, [r7, #0]
 8011526:	6938      	ldr	r0, [r7, #16]
 8011528:	f000 fa96 	bl	8011a58 <xEventGroupSetBitsFromISR>
 801152c:	4603      	mov	r3, r0
 801152e:	2b00      	cmp	r3, #0
 8011530:	d103      	bne.n	801153a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8011532:	f06f 0302 	mvn.w	r3, #2
 8011536:	617b      	str	r3, [r7, #20]
 8011538:	e012      	b.n	8011560 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00d      	beq.n	8011560 <osEventFlagsSet+0x78>
 8011544:	4b09      	ldr	r3, [pc, #36]	; (801156c <osEventFlagsSet+0x84>)
 8011546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801154a:	601a      	str	r2, [r3, #0]
 801154c:	f3bf 8f4f 	dsb	sy
 8011550:	f3bf 8f6f 	isb	sy
 8011554:	e004      	b.n	8011560 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8011556:	6839      	ldr	r1, [r7, #0]
 8011558:	6938      	ldr	r0, [r7, #16]
 801155a:	f000 f9c3 	bl	80118e4 <xEventGroupSetBits>
 801155e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8011560:	697b      	ldr	r3, [r7, #20]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3718      	adds	r7, #24
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	e000ed04 	.word	0xe000ed04

08011570 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8011570:	b580      	push	{r7, lr}
 8011572:	b08c      	sub	sp, #48	; 0x30
 8011574:	af02      	add	r7, sp, #8
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
 801157c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d004      	beq.n	8011592 <osEventFlagsWait+0x22>
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801158e:	2b00      	cmp	r3, #0
 8011590:	d003      	beq.n	801159a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8011592:	f06f 0303 	mvn.w	r3, #3
 8011596:	61fb      	str	r3, [r7, #28]
 8011598:	e04b      	b.n	8011632 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801159a:	f3ef 8305 	mrs	r3, IPSR
 801159e:	617b      	str	r3, [r7, #20]
  return(result);
 80115a0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d003      	beq.n	80115ae <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80115a6:	f06f 0305 	mvn.w	r3, #5
 80115aa:	61fb      	str	r3, [r7, #28]
 80115ac:	e041      	b.n	8011632 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f003 0301 	and.w	r3, r3, #1
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d002      	beq.n	80115be <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80115b8:	2301      	movs	r3, #1
 80115ba:	627b      	str	r3, [r7, #36]	; 0x24
 80115bc:	e001      	b.n	80115c2 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80115be:	2300      	movs	r3, #0
 80115c0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f003 0302 	and.w	r3, r3, #2
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d002      	beq.n	80115d2 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80115cc:	2300      	movs	r3, #0
 80115ce:	623b      	str	r3, [r7, #32]
 80115d0:	e001      	b.n	80115d6 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80115d2:	2301      	movs	r3, #1
 80115d4:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	9300      	str	r3, [sp, #0]
 80115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115dc:	6a3a      	ldr	r2, [r7, #32]
 80115de:	68b9      	ldr	r1, [r7, #8]
 80115e0:	69b8      	ldr	r0, [r7, #24]
 80115e2:	f000 f8b1 	bl	8011748 <xEventGroupWaitBits>
 80115e6:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f003 0301 	and.w	r3, r3, #1
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d010      	beq.n	8011614 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80115f2:	68ba      	ldr	r2, [r7, #8]
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	4013      	ands	r3, r2
 80115f8:	68ba      	ldr	r2, [r7, #8]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d019      	beq.n	8011632 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d003      	beq.n	801160c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8011604:	f06f 0301 	mvn.w	r3, #1
 8011608:	61fb      	str	r3, [r7, #28]
 801160a:	e012      	b.n	8011632 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801160c:	f06f 0302 	mvn.w	r3, #2
 8011610:	61fb      	str	r3, [r7, #28]
 8011612:	e00e      	b.n	8011632 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8011614:	68ba      	ldr	r2, [r7, #8]
 8011616:	69fb      	ldr	r3, [r7, #28]
 8011618:	4013      	ands	r3, r2
 801161a:	2b00      	cmp	r3, #0
 801161c:	d109      	bne.n	8011632 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d003      	beq.n	801162c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8011624:	f06f 0301 	mvn.w	r3, #1
 8011628:	61fb      	str	r3, [r7, #28]
 801162a:	e002      	b.n	8011632 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801162c:	f06f 0302 	mvn.w	r3, #2
 8011630:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8011632:	69fb      	ldr	r3, [r7, #28]
}
 8011634:	4618      	mov	r0, r3
 8011636:	3728      	adds	r7, #40	; 0x28
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801163c:	b480      	push	{r7}
 801163e:	b085      	sub	sp, #20
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	4a07      	ldr	r2, [pc, #28]	; (8011668 <vApplicationGetIdleTaskMemory+0x2c>)
 801164c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	4a06      	ldr	r2, [pc, #24]	; (801166c <vApplicationGetIdleTaskMemory+0x30>)
 8011652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2280      	movs	r2, #128	; 0x80
 8011658:	601a      	str	r2, [r3, #0]
}
 801165a:	bf00      	nop
 801165c:	3714      	adds	r7, #20
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop
 8011668:	24000c40 	.word	0x24000c40
 801166c:	24000c9c 	.word	0x24000c9c

08011670 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011670:	b480      	push	{r7}
 8011672:	b085      	sub	sp, #20
 8011674:	af00      	add	r7, sp, #0
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	4a07      	ldr	r2, [pc, #28]	; (801169c <vApplicationGetTimerTaskMemory+0x2c>)
 8011680:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	4a06      	ldr	r2, [pc, #24]	; (80116a0 <vApplicationGetTimerTaskMemory+0x30>)
 8011686:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801168e:	601a      	str	r2, [r3, #0]
}
 8011690:	bf00      	nop
 8011692:	3714      	adds	r7, #20
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr
 801169c:	24000e9c 	.word	0x24000e9c
 80116a0:	24000ef8 	.word	0x24000ef8

080116a4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b086      	sub	sp, #24
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d10a      	bne.n	80116c8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80116b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b6:	f383 8811 	msr	BASEPRI, r3
 80116ba:	f3bf 8f6f 	isb	sy
 80116be:	f3bf 8f4f 	dsb	sy
 80116c2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80116c4:	bf00      	nop
 80116c6:	e7fe      	b.n	80116c6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80116c8:	2320      	movs	r3, #32
 80116ca:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	2b20      	cmp	r3, #32
 80116d0:	d00a      	beq.n	80116e8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80116d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d6:	f383 8811 	msr	BASEPRI, r3
 80116da:	f3bf 8f6f 	isb	sy
 80116de:	f3bf 8f4f 	dsb	sy
 80116e2:	60fb      	str	r3, [r7, #12]
}
 80116e4:	bf00      	nop
 80116e6:	e7fe      	b.n	80116e6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00a      	beq.n	8011708 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	2200      	movs	r2, #0
 80116f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	3304      	adds	r3, #4
 80116fc:	4618      	mov	r0, r3
 80116fe:	f000 f9bf 	bl	8011a80 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	2201      	movs	r2, #1
 8011706:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011708:	697b      	ldr	r3, [r7, #20]
	}
 801170a:	4618      	mov	r0, r3
 801170c:	3718      	adds	r7, #24
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}

08011712 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8011712:	b580      	push	{r7, lr}
 8011714:	b082      	sub	sp, #8
 8011716:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011718:	2020      	movs	r0, #32
 801171a:	f002 fddd 	bl	80142d8 <pvPortMalloc>
 801171e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00a      	beq.n	801173c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2200      	movs	r2, #0
 801172a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	3304      	adds	r3, #4
 8011730:	4618      	mov	r0, r3
 8011732:	f000 f9a5 	bl	8011a80 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2200      	movs	r2, #0
 801173a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801173c:	687b      	ldr	r3, [r7, #4]
	}
 801173e:	4618      	mov	r0, r3
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
	...

08011748 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b090      	sub	sp, #64	; 0x40
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
 8011754:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801175a:	2300      	movs	r3, #0
 801175c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801175e:	2300      	movs	r3, #0
 8011760:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d10a      	bne.n	801177e <xEventGroupWaitBits+0x36>
	__asm volatile
 8011768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	623b      	str	r3, [r7, #32]
}
 801177a:	bf00      	nop
 801177c:	e7fe      	b.n	801177c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00a      	beq.n	801179e <xEventGroupWaitBits+0x56>
	__asm volatile
 8011788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801178c:	f383 8811 	msr	BASEPRI, r3
 8011790:	f3bf 8f6f 	isb	sy
 8011794:	f3bf 8f4f 	dsb	sy
 8011798:	61fb      	str	r3, [r7, #28]
}
 801179a:	bf00      	nop
 801179c:	e7fe      	b.n	801179c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d10a      	bne.n	80117ba <xEventGroupWaitBits+0x72>
	__asm volatile
 80117a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a8:	f383 8811 	msr	BASEPRI, r3
 80117ac:	f3bf 8f6f 	isb	sy
 80117b0:	f3bf 8f4f 	dsb	sy
 80117b4:	61bb      	str	r3, [r7, #24]
}
 80117b6:	bf00      	nop
 80117b8:	e7fe      	b.n	80117b8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80117ba:	f001 fed7 	bl	801356c <xTaskGetSchedulerState>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d102      	bne.n	80117ca <xEventGroupWaitBits+0x82>
 80117c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d101      	bne.n	80117ce <xEventGroupWaitBits+0x86>
 80117ca:	2301      	movs	r3, #1
 80117cc:	e000      	b.n	80117d0 <xEventGroupWaitBits+0x88>
 80117ce:	2300      	movs	r3, #0
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d10a      	bne.n	80117ea <xEventGroupWaitBits+0xa2>
	__asm volatile
 80117d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d8:	f383 8811 	msr	BASEPRI, r3
 80117dc:	f3bf 8f6f 	isb	sy
 80117e0:	f3bf 8f4f 	dsb	sy
 80117e4:	617b      	str	r3, [r7, #20]
}
 80117e6:	bf00      	nop
 80117e8:	e7fe      	b.n	80117e8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80117ea:	f001 fa3f 	bl	8012c6c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80117ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80117f4:	683a      	ldr	r2, [r7, #0]
 80117f6:	68b9      	ldr	r1, [r7, #8]
 80117f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117fa:	f000 f90b 	bl	8011a14 <prvTestWaitCondition>
 80117fe:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011802:	2b00      	cmp	r3, #0
 8011804:	d00e      	beq.n	8011824 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011808:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801180a:	2300      	movs	r3, #0
 801180c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d028      	beq.n	8011866 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	43db      	mvns	r3, r3
 801181c:	401a      	ands	r2, r3
 801181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011820:	601a      	str	r2, [r3, #0]
 8011822:	e020      	b.n	8011866 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011826:	2b00      	cmp	r3, #0
 8011828:	d104      	bne.n	8011834 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801182e:	2301      	movs	r3, #1
 8011830:	633b      	str	r3, [r7, #48]	; 0x30
 8011832:	e018      	b.n	8011866 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d003      	beq.n	8011842 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801183a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011840:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d003      	beq.n	8011850 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801184e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011852:	1d18      	adds	r0, r3, #4
 8011854:	68ba      	ldr	r2, [r7, #8]
 8011856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011858:	4313      	orrs	r3, r2
 801185a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801185c:	4619      	mov	r1, r3
 801185e:	f001 fbfd 	bl	801305c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011866:	f001 fa0f 	bl	8012c88 <xTaskResumeAll>
 801186a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801186c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801186e:	2b00      	cmp	r3, #0
 8011870:	d031      	beq.n	80118d6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011874:	2b00      	cmp	r3, #0
 8011876:	d107      	bne.n	8011888 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011878:	4b19      	ldr	r3, [pc, #100]	; (80118e0 <xEventGroupWaitBits+0x198>)
 801187a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801187e:	601a      	str	r2, [r3, #0]
 8011880:	f3bf 8f4f 	dsb	sy
 8011884:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011888:	f001 fefc 	bl	8013684 <uxTaskResetEventItemValue>
 801188c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801188e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011894:	2b00      	cmp	r3, #0
 8011896:	d11a      	bne.n	80118ce <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011898:	f002 fbfc 	bl	8014094 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80118a2:	683a      	ldr	r2, [r7, #0]
 80118a4:	68b9      	ldr	r1, [r7, #8]
 80118a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80118a8:	f000 f8b4 	bl	8011a14 <prvTestWaitCondition>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d009      	beq.n	80118c6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d006      	beq.n	80118c6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80118b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	43db      	mvns	r3, r3
 80118c0:	401a      	ands	r2, r3
 80118c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118c4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80118c6:	2301      	movs	r3, #1
 80118c8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80118ca:	f002 fc13 	bl	80140f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80118ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80118d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80118d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3740      	adds	r7, #64	; 0x40
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	e000ed04 	.word	0xe000ed04

080118e4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b08e      	sub	sp, #56	; 0x38
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80118ee:	2300      	movs	r3, #0
 80118f0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80118f6:	2300      	movs	r3, #0
 80118f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d10a      	bne.n	8011916 <xEventGroupSetBits+0x32>
	__asm volatile
 8011900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011904:	f383 8811 	msr	BASEPRI, r3
 8011908:	f3bf 8f6f 	isb	sy
 801190c:	f3bf 8f4f 	dsb	sy
 8011910:	613b      	str	r3, [r7, #16]
}
 8011912:	bf00      	nop
 8011914:	e7fe      	b.n	8011914 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00a      	beq.n	8011936 <xEventGroupSetBits+0x52>
	__asm volatile
 8011920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011924:	f383 8811 	msr	BASEPRI, r3
 8011928:	f3bf 8f6f 	isb	sy
 801192c:	f3bf 8f4f 	dsb	sy
 8011930:	60fb      	str	r3, [r7, #12]
}
 8011932:	bf00      	nop
 8011934:	e7fe      	b.n	8011934 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011938:	3304      	adds	r3, #4
 801193a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193e:	3308      	adds	r3, #8
 8011940:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011942:	f001 f993 	bl	8012c6c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011948:	68db      	ldr	r3, [r3, #12]
 801194a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	431a      	orrs	r2, r3
 8011954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011956:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011958:	e03c      	b.n	80119d4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011966:	2300      	movs	r3, #0
 8011968:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011970:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011978:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011980:	2b00      	cmp	r3, #0
 8011982:	d108      	bne.n	8011996 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011986:	681a      	ldr	r2, [r3, #0]
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	4013      	ands	r3, r2
 801198c:	2b00      	cmp	r3, #0
 801198e:	d00b      	beq.n	80119a8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011990:	2301      	movs	r3, #1
 8011992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011994:	e008      	b.n	80119a8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	69bb      	ldr	r3, [r7, #24]
 801199c:	4013      	ands	r3, r2
 801199e:	69ba      	ldr	r2, [r7, #24]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d101      	bne.n	80119a8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80119a4:	2301      	movs	r3, #1
 80119a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80119a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d010      	beq.n	80119d0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d003      	beq.n	80119c0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80119b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	4313      	orrs	r3, r2
 80119be:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80119c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80119c8:	4619      	mov	r1, r3
 80119ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80119cc:	f001 fc12 	bl	80131f4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80119d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119d6:	6a3b      	ldr	r3, [r7, #32]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d1be      	bne.n	801195a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80119dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e2:	43db      	mvns	r3, r3
 80119e4:	401a      	ands	r2, r3
 80119e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80119ea:	f001 f94d 	bl	8012c88 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80119ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f0:	681b      	ldr	r3, [r3, #0]
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3738      	adds	r7, #56	; 0x38
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}

080119fa <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b082      	sub	sp, #8
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
 8011a02:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011a04:	6839      	ldr	r1, [r7, #0]
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7ff ff6c 	bl	80118e4 <xEventGroupSetBits>
}
 8011a0c:	bf00      	nop
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011a14:	b480      	push	{r7}
 8011a16:	b087      	sub	sp, #28
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011a20:	2300      	movs	r3, #0
 8011a22:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d107      	bne.n	8011a3a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011a2a:	68fa      	ldr	r2, [r7, #12]
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	4013      	ands	r3, r2
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d00a      	beq.n	8011a4a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011a34:	2301      	movs	r3, #1
 8011a36:	617b      	str	r3, [r7, #20]
 8011a38:	e007      	b.n	8011a4a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	4013      	ands	r3, r2
 8011a40:	68ba      	ldr	r2, [r7, #8]
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d101      	bne.n	8011a4a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011a46:	2301      	movs	r3, #1
 8011a48:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011a4a:	697b      	ldr	r3, [r7, #20]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	371c      	adds	r7, #28
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b086      	sub	sp, #24
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	68ba      	ldr	r2, [r7, #8]
 8011a68:	68f9      	ldr	r1, [r7, #12]
 8011a6a:	4804      	ldr	r0, [pc, #16]	; (8011a7c <xEventGroupSetBitsFromISR+0x24>)
 8011a6c:	f002 f9c4 	bl	8013df8 <xTimerPendFunctionCallFromISR>
 8011a70:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011a72:	697b      	ldr	r3, [r7, #20]
	}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3718      	adds	r7, #24
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	080119fb 	.word	0x080119fb

08011a80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f103 0208 	add.w	r2, r3, #8
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f103 0208 	add.w	r2, r3, #8
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f103 0208 	add.w	r2, r3, #8
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011ab4:	bf00      	nop
 8011ab6:	370c      	adds	r7, #12
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011ace:	bf00      	nop
 8011ad0:	370c      	adds	r7, #12
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr

08011ada <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011ada:	b480      	push	{r7}
 8011adc:	b085      	sub	sp, #20
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	68fa      	ldr	r2, [r7, #12]
 8011aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	689a      	ldr	r2, [r3, #8]
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	689b      	ldr	r3, [r3, #8]
 8011afc:	683a      	ldr	r2, [r7, #0]
 8011afe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	683a      	ldr	r2, [r7, #0]
 8011b04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	1c5a      	adds	r2, r3, #1
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	601a      	str	r2, [r3, #0]
}
 8011b16:	bf00      	nop
 8011b18:	3714      	adds	r7, #20
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b20:	4770      	bx	lr

08011b22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011b22:	b480      	push	{r7}
 8011b24:	b085      	sub	sp, #20
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
 8011b2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b38:	d103      	bne.n	8011b42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	691b      	ldr	r3, [r3, #16]
 8011b3e:	60fb      	str	r3, [r7, #12]
 8011b40:	e00c      	b.n	8011b5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	3308      	adds	r3, #8
 8011b46:	60fb      	str	r3, [r7, #12]
 8011b48:	e002      	b.n	8011b50 <vListInsert+0x2e>
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	60fb      	str	r3, [r7, #12]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d2f6      	bcs.n	8011b4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	685a      	ldr	r2, [r3, #4]
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	683a      	ldr	r2, [r7, #0]
 8011b6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	683a      	ldr	r2, [r7, #0]
 8011b76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	1c5a      	adds	r2, r3, #1
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	601a      	str	r2, [r3, #0]
}
 8011b88:	bf00      	nop
 8011b8a:	3714      	adds	r7, #20
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr

08011b94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	691b      	ldr	r3, [r3, #16]
 8011ba0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	6892      	ldr	r2, [r2, #8]
 8011baa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	689b      	ldr	r3, [r3, #8]
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	6852      	ldr	r2, [r2, #4]
 8011bb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d103      	bne.n	8011bc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	689a      	ldr	r2, [r3, #8]
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	1e5a      	subs	r2, r3, #1
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	681b      	ldr	r3, [r3, #0]
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3714      	adds	r7, #20
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d10a      	bne.n	8011c12 <xQueueGenericReset+0x2a>
	__asm volatile
 8011bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c00:	f383 8811 	msr	BASEPRI, r3
 8011c04:	f3bf 8f6f 	isb	sy
 8011c08:	f3bf 8f4f 	dsb	sy
 8011c0c:	60bb      	str	r3, [r7, #8]
}
 8011c0e:	bf00      	nop
 8011c10:	e7fe      	b.n	8011c10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011c12:	f002 fa3f 	bl	8014094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c1e:	68f9      	ldr	r1, [r7, #12]
 8011c20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011c22:	fb01 f303 	mul.w	r3, r1, r3
 8011c26:	441a      	add	r2, r3
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681a      	ldr	r2, [r3, #0]
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681a      	ldr	r2, [r3, #0]
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c42:	3b01      	subs	r3, #1
 8011c44:	68f9      	ldr	r1, [r7, #12]
 8011c46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011c48:	fb01 f303 	mul.w	r3, r1, r3
 8011c4c:	441a      	add	r2, r3
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	22ff      	movs	r2, #255	; 0xff
 8011c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	22ff      	movs	r2, #255	; 0xff
 8011c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d114      	bne.n	8011c92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	691b      	ldr	r3, [r3, #16]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d01a      	beq.n	8011ca6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	3310      	adds	r3, #16
 8011c74:	4618      	mov	r0, r3
 8011c76:	f001 fa59 	bl	801312c <xTaskRemoveFromEventList>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d012      	beq.n	8011ca6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011c80:	4b0c      	ldr	r3, [pc, #48]	; (8011cb4 <xQueueGenericReset+0xcc>)
 8011c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c86:	601a      	str	r2, [r3, #0]
 8011c88:	f3bf 8f4f 	dsb	sy
 8011c8c:	f3bf 8f6f 	isb	sy
 8011c90:	e009      	b.n	8011ca6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	3310      	adds	r3, #16
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7ff fef2 	bl	8011a80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	3324      	adds	r3, #36	; 0x24
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7ff feed 	bl	8011a80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011ca6:	f002 fa25 	bl	80140f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011caa:	2301      	movs	r3, #1
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}
 8011cb4:	e000ed04 	.word	0xe000ed04

08011cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b08e      	sub	sp, #56	; 0x38
 8011cbc:	af02      	add	r7, sp, #8
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	60b9      	str	r1, [r7, #8]
 8011cc2:	607a      	str	r2, [r7, #4]
 8011cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d10a      	bne.n	8011ce2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd0:	f383 8811 	msr	BASEPRI, r3
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	f3bf 8f4f 	dsb	sy
 8011cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011cde:	bf00      	nop
 8011ce0:	e7fe      	b.n	8011ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10a      	bne.n	8011cfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cec:	f383 8811 	msr	BASEPRI, r3
 8011cf0:	f3bf 8f6f 	isb	sy
 8011cf4:	f3bf 8f4f 	dsb	sy
 8011cf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011cfa:	bf00      	nop
 8011cfc:	e7fe      	b.n	8011cfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d002      	beq.n	8011d0a <xQueueGenericCreateStatic+0x52>
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d001      	beq.n	8011d0e <xQueueGenericCreateStatic+0x56>
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	e000      	b.n	8011d10 <xQueueGenericCreateStatic+0x58>
 8011d0e:	2300      	movs	r3, #0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d10a      	bne.n	8011d2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d18:	f383 8811 	msr	BASEPRI, r3
 8011d1c:	f3bf 8f6f 	isb	sy
 8011d20:	f3bf 8f4f 	dsb	sy
 8011d24:	623b      	str	r3, [r7, #32]
}
 8011d26:	bf00      	nop
 8011d28:	e7fe      	b.n	8011d28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d102      	bne.n	8011d36 <xQueueGenericCreateStatic+0x7e>
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d101      	bne.n	8011d3a <xQueueGenericCreateStatic+0x82>
 8011d36:	2301      	movs	r3, #1
 8011d38:	e000      	b.n	8011d3c <xQueueGenericCreateStatic+0x84>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d10a      	bne.n	8011d56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d44:	f383 8811 	msr	BASEPRI, r3
 8011d48:	f3bf 8f6f 	isb	sy
 8011d4c:	f3bf 8f4f 	dsb	sy
 8011d50:	61fb      	str	r3, [r7, #28]
}
 8011d52:	bf00      	nop
 8011d54:	e7fe      	b.n	8011d54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011d56:	2350      	movs	r3, #80	; 0x50
 8011d58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	2b50      	cmp	r3, #80	; 0x50
 8011d5e:	d00a      	beq.n	8011d76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d64:	f383 8811 	msr	BASEPRI, r3
 8011d68:	f3bf 8f6f 	isb	sy
 8011d6c:	f3bf 8f4f 	dsb	sy
 8011d70:	61bb      	str	r3, [r7, #24]
}
 8011d72:	bf00      	nop
 8011d74:	e7fe      	b.n	8011d74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011d76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d00d      	beq.n	8011d9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d84:	2201      	movs	r2, #1
 8011d86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011d8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	4613      	mov	r3, r2
 8011d94:	687a      	ldr	r2, [r7, #4]
 8011d96:	68b9      	ldr	r1, [r7, #8]
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	f000 f805 	bl	8011da8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3730      	adds	r7, #48	; 0x30
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	60f8      	str	r0, [r7, #12]
 8011db0:	60b9      	str	r1, [r7, #8]
 8011db2:	607a      	str	r2, [r7, #4]
 8011db4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d103      	bne.n	8011dc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	69ba      	ldr	r2, [r7, #24]
 8011dc0:	601a      	str	r2, [r3, #0]
 8011dc2:	e002      	b.n	8011dca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011dca:	69bb      	ldr	r3, [r7, #24]
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011dd0:	69bb      	ldr	r3, [r7, #24]
 8011dd2:	68ba      	ldr	r2, [r7, #8]
 8011dd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011dd6:	2101      	movs	r1, #1
 8011dd8:	69b8      	ldr	r0, [r7, #24]
 8011dda:	f7ff ff05 	bl	8011be8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011dde:	69bb      	ldr	r3, [r7, #24]
 8011de0:	78fa      	ldrb	r2, [r7, #3]
 8011de2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011de6:	bf00      	nop
 8011de8:	3710      	adds	r7, #16
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
	...

08011df0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b08e      	sub	sp, #56	; 0x38
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	60f8      	str	r0, [r7, #12]
 8011df8:	60b9      	str	r1, [r7, #8]
 8011dfa:	607a      	str	r2, [r7, #4]
 8011dfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d10a      	bne.n	8011e22 <xQueueGenericSend+0x32>
	__asm volatile
 8011e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e10:	f383 8811 	msr	BASEPRI, r3
 8011e14:	f3bf 8f6f 	isb	sy
 8011e18:	f3bf 8f4f 	dsb	sy
 8011e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011e1e:	bf00      	nop
 8011e20:	e7fe      	b.n	8011e20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d103      	bne.n	8011e30 <xQueueGenericSend+0x40>
 8011e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d101      	bne.n	8011e34 <xQueueGenericSend+0x44>
 8011e30:	2301      	movs	r3, #1
 8011e32:	e000      	b.n	8011e36 <xQueueGenericSend+0x46>
 8011e34:	2300      	movs	r3, #0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d10a      	bne.n	8011e50 <xQueueGenericSend+0x60>
	__asm volatile
 8011e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e3e:	f383 8811 	msr	BASEPRI, r3
 8011e42:	f3bf 8f6f 	isb	sy
 8011e46:	f3bf 8f4f 	dsb	sy
 8011e4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011e4c:	bf00      	nop
 8011e4e:	e7fe      	b.n	8011e4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	2b02      	cmp	r3, #2
 8011e54:	d103      	bne.n	8011e5e <xQueueGenericSend+0x6e>
 8011e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e5a:	2b01      	cmp	r3, #1
 8011e5c:	d101      	bne.n	8011e62 <xQueueGenericSend+0x72>
 8011e5e:	2301      	movs	r3, #1
 8011e60:	e000      	b.n	8011e64 <xQueueGenericSend+0x74>
 8011e62:	2300      	movs	r3, #0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d10a      	bne.n	8011e7e <xQueueGenericSend+0x8e>
	__asm volatile
 8011e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6c:	f383 8811 	msr	BASEPRI, r3
 8011e70:	f3bf 8f6f 	isb	sy
 8011e74:	f3bf 8f4f 	dsb	sy
 8011e78:	623b      	str	r3, [r7, #32]
}
 8011e7a:	bf00      	nop
 8011e7c:	e7fe      	b.n	8011e7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e7e:	f001 fb75 	bl	801356c <xTaskGetSchedulerState>
 8011e82:	4603      	mov	r3, r0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d102      	bne.n	8011e8e <xQueueGenericSend+0x9e>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d101      	bne.n	8011e92 <xQueueGenericSend+0xa2>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e000      	b.n	8011e94 <xQueueGenericSend+0xa4>
 8011e92:	2300      	movs	r3, #0
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d10a      	bne.n	8011eae <xQueueGenericSend+0xbe>
	__asm volatile
 8011e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e9c:	f383 8811 	msr	BASEPRI, r3
 8011ea0:	f3bf 8f6f 	isb	sy
 8011ea4:	f3bf 8f4f 	dsb	sy
 8011ea8:	61fb      	str	r3, [r7, #28]
}
 8011eaa:	bf00      	nop
 8011eac:	e7fe      	b.n	8011eac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011eae:	f002 f8f1 	bl	8014094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d302      	bcc.n	8011ec4 <xQueueGenericSend+0xd4>
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	2b02      	cmp	r3, #2
 8011ec2:	d129      	bne.n	8011f18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ec4:	683a      	ldr	r2, [r7, #0]
 8011ec6:	68b9      	ldr	r1, [r7, #8]
 8011ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eca:	f000 fa0b 	bl	80122e4 <prvCopyDataToQueue>
 8011ece:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d010      	beq.n	8011efa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eda:	3324      	adds	r3, #36	; 0x24
 8011edc:	4618      	mov	r0, r3
 8011ede:	f001 f925 	bl	801312c <xTaskRemoveFromEventList>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d013      	beq.n	8011f10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011ee8:	4b3f      	ldr	r3, [pc, #252]	; (8011fe8 <xQueueGenericSend+0x1f8>)
 8011eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eee:	601a      	str	r2, [r3, #0]
 8011ef0:	f3bf 8f4f 	dsb	sy
 8011ef4:	f3bf 8f6f 	isb	sy
 8011ef8:	e00a      	b.n	8011f10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d007      	beq.n	8011f10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011f00:	4b39      	ldr	r3, [pc, #228]	; (8011fe8 <xQueueGenericSend+0x1f8>)
 8011f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f06:	601a      	str	r2, [r3, #0]
 8011f08:	f3bf 8f4f 	dsb	sy
 8011f0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011f10:	f002 f8f0 	bl	80140f4 <vPortExitCritical>
				return pdPASS;
 8011f14:	2301      	movs	r3, #1
 8011f16:	e063      	b.n	8011fe0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d103      	bne.n	8011f26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f1e:	f002 f8e9 	bl	80140f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011f22:	2300      	movs	r3, #0
 8011f24:	e05c      	b.n	8011fe0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d106      	bne.n	8011f3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f2c:	f107 0314 	add.w	r3, r7, #20
 8011f30:	4618      	mov	r0, r3
 8011f32:	f001 f9c1 	bl	80132b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f36:	2301      	movs	r3, #1
 8011f38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f3a:	f002 f8db 	bl	80140f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f3e:	f000 fe95 	bl	8012c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f42:	f002 f8a7 	bl	8014094 <vPortEnterCritical>
 8011f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f4c:	b25b      	sxtb	r3, r3
 8011f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f52:	d103      	bne.n	8011f5c <xQueueGenericSend+0x16c>
 8011f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f56:	2200      	movs	r2, #0
 8011f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f62:	b25b      	sxtb	r3, r3
 8011f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f68:	d103      	bne.n	8011f72 <xQueueGenericSend+0x182>
 8011f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f72:	f002 f8bf 	bl	80140f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f76:	1d3a      	adds	r2, r7, #4
 8011f78:	f107 0314 	add.w	r3, r7, #20
 8011f7c:	4611      	mov	r1, r2
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f001 f9b0 	bl	80132e4 <xTaskCheckForTimeOut>
 8011f84:	4603      	mov	r3, r0
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d124      	bne.n	8011fd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f8c:	f000 faa2 	bl	80124d4 <prvIsQueueFull>
 8011f90:	4603      	mov	r3, r0
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d018      	beq.n	8011fc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f98:	3310      	adds	r3, #16
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	4611      	mov	r1, r2
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f001 f838 	bl	8013014 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fa6:	f000 fa2d 	bl	8012404 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011faa:	f000 fe6d 	bl	8012c88 <xTaskResumeAll>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	f47f af7c 	bne.w	8011eae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011fb6:	4b0c      	ldr	r3, [pc, #48]	; (8011fe8 <xQueueGenericSend+0x1f8>)
 8011fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fbc:	601a      	str	r2, [r3, #0]
 8011fbe:	f3bf 8f4f 	dsb	sy
 8011fc2:	f3bf 8f6f 	isb	sy
 8011fc6:	e772      	b.n	8011eae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fca:	f000 fa1b 	bl	8012404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011fce:	f000 fe5b 	bl	8012c88 <xTaskResumeAll>
 8011fd2:	e76c      	b.n	8011eae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fd6:	f000 fa15 	bl	8012404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011fda:	f000 fe55 	bl	8012c88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011fde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3738      	adds	r7, #56	; 0x38
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	e000ed04 	.word	0xe000ed04

08011fec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b090      	sub	sp, #64	; 0x40
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	60f8      	str	r0, [r7, #12]
 8011ff4:	60b9      	str	r1, [r7, #8]
 8011ff6:	607a      	str	r2, [r7, #4]
 8011ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012000:	2b00      	cmp	r3, #0
 8012002:	d10a      	bne.n	801201a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012008:	f383 8811 	msr	BASEPRI, r3
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	f3bf 8f4f 	dsb	sy
 8012014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012016:	bf00      	nop
 8012018:	e7fe      	b.n	8012018 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d103      	bne.n	8012028 <xQueueGenericSendFromISR+0x3c>
 8012020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012024:	2b00      	cmp	r3, #0
 8012026:	d101      	bne.n	801202c <xQueueGenericSendFromISR+0x40>
 8012028:	2301      	movs	r3, #1
 801202a:	e000      	b.n	801202e <xQueueGenericSendFromISR+0x42>
 801202c:	2300      	movs	r3, #0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d10a      	bne.n	8012048 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012036:	f383 8811 	msr	BASEPRI, r3
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012044:	bf00      	nop
 8012046:	e7fe      	b.n	8012046 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	2b02      	cmp	r3, #2
 801204c:	d103      	bne.n	8012056 <xQueueGenericSendFromISR+0x6a>
 801204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012052:	2b01      	cmp	r3, #1
 8012054:	d101      	bne.n	801205a <xQueueGenericSendFromISR+0x6e>
 8012056:	2301      	movs	r3, #1
 8012058:	e000      	b.n	801205c <xQueueGenericSendFromISR+0x70>
 801205a:	2300      	movs	r3, #0
 801205c:	2b00      	cmp	r3, #0
 801205e:	d10a      	bne.n	8012076 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012064:	f383 8811 	msr	BASEPRI, r3
 8012068:	f3bf 8f6f 	isb	sy
 801206c:	f3bf 8f4f 	dsb	sy
 8012070:	623b      	str	r3, [r7, #32]
}
 8012072:	bf00      	nop
 8012074:	e7fe      	b.n	8012074 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012076:	f002 f8ef 	bl	8014258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801207a:	f3ef 8211 	mrs	r2, BASEPRI
 801207e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012082:	f383 8811 	msr	BASEPRI, r3
 8012086:	f3bf 8f6f 	isb	sy
 801208a:	f3bf 8f4f 	dsb	sy
 801208e:	61fa      	str	r2, [r7, #28]
 8012090:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012092:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012094:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801209e:	429a      	cmp	r2, r3
 80120a0:	d302      	bcc.n	80120a8 <xQueueGenericSendFromISR+0xbc>
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	2b02      	cmp	r3, #2
 80120a6:	d12f      	bne.n	8012108 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80120a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80120b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80120b8:	683a      	ldr	r2, [r7, #0]
 80120ba:	68b9      	ldr	r1, [r7, #8]
 80120bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80120be:	f000 f911 	bl	80122e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80120c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80120c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120ca:	d112      	bne.n	80120f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d016      	beq.n	8012102 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d6:	3324      	adds	r3, #36	; 0x24
 80120d8:	4618      	mov	r0, r3
 80120da:	f001 f827 	bl	801312c <xTaskRemoveFromEventList>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d00e      	beq.n	8012102 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d00b      	beq.n	8012102 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2201      	movs	r2, #1
 80120ee:	601a      	str	r2, [r3, #0]
 80120f0:	e007      	b.n	8012102 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80120f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80120f6:	3301      	adds	r3, #1
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	b25a      	sxtb	r2, r3
 80120fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012102:	2301      	movs	r3, #1
 8012104:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012106:	e001      	b.n	801210c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012108:	2300      	movs	r3, #0
 801210a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801210e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012116:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801211a:	4618      	mov	r0, r3
 801211c:	3740      	adds	r7, #64	; 0x40
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
	...

08012124 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b08c      	sub	sp, #48	; 0x30
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012130:	2300      	movs	r3, #0
 8012132:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801213a:	2b00      	cmp	r3, #0
 801213c:	d10a      	bne.n	8012154 <xQueueReceive+0x30>
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	623b      	str	r3, [r7, #32]
}
 8012150:	bf00      	nop
 8012152:	e7fe      	b.n	8012152 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d103      	bne.n	8012162 <xQueueReceive+0x3e>
 801215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801215e:	2b00      	cmp	r3, #0
 8012160:	d101      	bne.n	8012166 <xQueueReceive+0x42>
 8012162:	2301      	movs	r3, #1
 8012164:	e000      	b.n	8012168 <xQueueReceive+0x44>
 8012166:	2300      	movs	r3, #0
 8012168:	2b00      	cmp	r3, #0
 801216a:	d10a      	bne.n	8012182 <xQueueReceive+0x5e>
	__asm volatile
 801216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012170:	f383 8811 	msr	BASEPRI, r3
 8012174:	f3bf 8f6f 	isb	sy
 8012178:	f3bf 8f4f 	dsb	sy
 801217c:	61fb      	str	r3, [r7, #28]
}
 801217e:	bf00      	nop
 8012180:	e7fe      	b.n	8012180 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012182:	f001 f9f3 	bl	801356c <xTaskGetSchedulerState>
 8012186:	4603      	mov	r3, r0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d102      	bne.n	8012192 <xQueueReceive+0x6e>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d101      	bne.n	8012196 <xQueueReceive+0x72>
 8012192:	2301      	movs	r3, #1
 8012194:	e000      	b.n	8012198 <xQueueReceive+0x74>
 8012196:	2300      	movs	r3, #0
 8012198:	2b00      	cmp	r3, #0
 801219a:	d10a      	bne.n	80121b2 <xQueueReceive+0x8e>
	__asm volatile
 801219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a0:	f383 8811 	msr	BASEPRI, r3
 80121a4:	f3bf 8f6f 	isb	sy
 80121a8:	f3bf 8f4f 	dsb	sy
 80121ac:	61bb      	str	r3, [r7, #24]
}
 80121ae:	bf00      	nop
 80121b0:	e7fe      	b.n	80121b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80121b2:	f001 ff6f 	bl	8014094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d01f      	beq.n	8012202 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80121c2:	68b9      	ldr	r1, [r7, #8]
 80121c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121c6:	f000 f8f7 	bl	80123b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80121ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121cc:	1e5a      	subs	r2, r3, #1
 80121ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d4:	691b      	ldr	r3, [r3, #16]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d00f      	beq.n	80121fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80121da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121dc:	3310      	adds	r3, #16
 80121de:	4618      	mov	r0, r3
 80121e0:	f000 ffa4 	bl	801312c <xTaskRemoveFromEventList>
 80121e4:	4603      	mov	r3, r0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d007      	beq.n	80121fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80121ea:	4b3d      	ldr	r3, [pc, #244]	; (80122e0 <xQueueReceive+0x1bc>)
 80121ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121f0:	601a      	str	r2, [r3, #0]
 80121f2:	f3bf 8f4f 	dsb	sy
 80121f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80121fa:	f001 ff7b 	bl	80140f4 <vPortExitCritical>
				return pdPASS;
 80121fe:	2301      	movs	r3, #1
 8012200:	e069      	b.n	80122d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d103      	bne.n	8012210 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012208:	f001 ff74 	bl	80140f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801220c:	2300      	movs	r3, #0
 801220e:	e062      	b.n	80122d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012212:	2b00      	cmp	r3, #0
 8012214:	d106      	bne.n	8012224 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012216:	f107 0310 	add.w	r3, r7, #16
 801221a:	4618      	mov	r0, r3
 801221c:	f001 f84c 	bl	80132b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012220:	2301      	movs	r3, #1
 8012222:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012224:	f001 ff66 	bl	80140f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012228:	f000 fd20 	bl	8012c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801222c:	f001 ff32 	bl	8014094 <vPortEnterCritical>
 8012230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012236:	b25b      	sxtb	r3, r3
 8012238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801223c:	d103      	bne.n	8012246 <xQueueReceive+0x122>
 801223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012240:	2200      	movs	r2, #0
 8012242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801224c:	b25b      	sxtb	r3, r3
 801224e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012252:	d103      	bne.n	801225c <xQueueReceive+0x138>
 8012254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012256:	2200      	movs	r2, #0
 8012258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801225c:	f001 ff4a 	bl	80140f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012260:	1d3a      	adds	r2, r7, #4
 8012262:	f107 0310 	add.w	r3, r7, #16
 8012266:	4611      	mov	r1, r2
 8012268:	4618      	mov	r0, r3
 801226a:	f001 f83b 	bl	80132e4 <xTaskCheckForTimeOut>
 801226e:	4603      	mov	r3, r0
 8012270:	2b00      	cmp	r3, #0
 8012272:	d123      	bne.n	80122bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012276:	f000 f917 	bl	80124a8 <prvIsQueueEmpty>
 801227a:	4603      	mov	r3, r0
 801227c:	2b00      	cmp	r3, #0
 801227e:	d017      	beq.n	80122b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012282:	3324      	adds	r3, #36	; 0x24
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	4611      	mov	r1, r2
 8012288:	4618      	mov	r0, r3
 801228a:	f000 fec3 	bl	8013014 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801228e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012290:	f000 f8b8 	bl	8012404 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012294:	f000 fcf8 	bl	8012c88 <xTaskResumeAll>
 8012298:	4603      	mov	r3, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	d189      	bne.n	80121b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801229e:	4b10      	ldr	r3, [pc, #64]	; (80122e0 <xQueueReceive+0x1bc>)
 80122a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122a4:	601a      	str	r2, [r3, #0]
 80122a6:	f3bf 8f4f 	dsb	sy
 80122aa:	f3bf 8f6f 	isb	sy
 80122ae:	e780      	b.n	80121b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80122b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122b2:	f000 f8a7 	bl	8012404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122b6:	f000 fce7 	bl	8012c88 <xTaskResumeAll>
 80122ba:	e77a      	b.n	80121b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80122bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122be:	f000 f8a1 	bl	8012404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122c2:	f000 fce1 	bl	8012c88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122c8:	f000 f8ee 	bl	80124a8 <prvIsQueueEmpty>
 80122cc:	4603      	mov	r3, r0
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	f43f af6f 	beq.w	80121b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3730      	adds	r7, #48	; 0x30
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	e000ed04 	.word	0xe000ed04

080122e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b086      	sub	sp, #24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80122f0:	2300      	movs	r3, #0
 80122f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d10d      	bne.n	801231e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d14d      	bne.n	80123a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	689b      	ldr	r3, [r3, #8]
 801230e:	4618      	mov	r0, r3
 8012310:	f001 f94a 	bl	80135a8 <xTaskPriorityDisinherit>
 8012314:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2200      	movs	r2, #0
 801231a:	609a      	str	r2, [r3, #8]
 801231c:	e043      	b.n	80123a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d119      	bne.n	8012358 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	6858      	ldr	r0, [r3, #4]
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801232c:	461a      	mov	r2, r3
 801232e:	68b9      	ldr	r1, [r7, #8]
 8012330:	f002 f9f6 	bl	8014720 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	685a      	ldr	r2, [r3, #4]
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801233c:	441a      	add	r2, r3
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	685a      	ldr	r2, [r3, #4]
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	689b      	ldr	r3, [r3, #8]
 801234a:	429a      	cmp	r2, r3
 801234c:	d32b      	bcc.n	80123a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	605a      	str	r2, [r3, #4]
 8012356:	e026      	b.n	80123a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	68d8      	ldr	r0, [r3, #12]
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012360:	461a      	mov	r2, r3
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	f002 f9dc 	bl	8014720 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	68da      	ldr	r2, [r3, #12]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012370:	425b      	negs	r3, r3
 8012372:	441a      	add	r2, r3
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	68da      	ldr	r2, [r3, #12]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	429a      	cmp	r2, r3
 8012382:	d207      	bcs.n	8012394 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	689a      	ldr	r2, [r3, #8]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801238c:	425b      	negs	r3, r3
 801238e:	441a      	add	r2, r3
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2b02      	cmp	r3, #2
 8012398:	d105      	bne.n	80123a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d002      	beq.n	80123a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	3b01      	subs	r3, #1
 80123a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	1c5a      	adds	r2, r3, #1
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80123ae:	697b      	ldr	r3, [r7, #20]
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3718      	adds	r7, #24
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d018      	beq.n	80123fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	68da      	ldr	r2, [r3, #12]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123d2:	441a      	add	r2, r3
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	68da      	ldr	r2, [r3, #12]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	689b      	ldr	r3, [r3, #8]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d303      	bcc.n	80123ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	68d9      	ldr	r1, [r3, #12]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123f4:	461a      	mov	r2, r3
 80123f6:	6838      	ldr	r0, [r7, #0]
 80123f8:	f002 f992 	bl	8014720 <memcpy>
	}
}
 80123fc:	bf00      	nop
 80123fe:	3708      	adds	r7, #8
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801240c:	f001 fe42 	bl	8014094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012416:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012418:	e011      	b.n	801243e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801241e:	2b00      	cmp	r3, #0
 8012420:	d012      	beq.n	8012448 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	3324      	adds	r3, #36	; 0x24
 8012426:	4618      	mov	r0, r3
 8012428:	f000 fe80 	bl	801312c <xTaskRemoveFromEventList>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d001      	beq.n	8012436 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012432:	f000 ffb9 	bl	80133a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012436:	7bfb      	ldrb	r3, [r7, #15]
 8012438:	3b01      	subs	r3, #1
 801243a:	b2db      	uxtb	r3, r3
 801243c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012442:	2b00      	cmp	r3, #0
 8012444:	dce9      	bgt.n	801241a <prvUnlockQueue+0x16>
 8012446:	e000      	b.n	801244a <prvUnlockQueue+0x46>
					break;
 8012448:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	22ff      	movs	r2, #255	; 0xff
 801244e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012452:	f001 fe4f 	bl	80140f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012456:	f001 fe1d 	bl	8014094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012460:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012462:	e011      	b.n	8012488 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	691b      	ldr	r3, [r3, #16]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d012      	beq.n	8012492 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	3310      	adds	r3, #16
 8012470:	4618      	mov	r0, r3
 8012472:	f000 fe5b 	bl	801312c <xTaskRemoveFromEventList>
 8012476:	4603      	mov	r3, r0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d001      	beq.n	8012480 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801247c:	f000 ff94 	bl	80133a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012480:	7bbb      	ldrb	r3, [r7, #14]
 8012482:	3b01      	subs	r3, #1
 8012484:	b2db      	uxtb	r3, r3
 8012486:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801248c:	2b00      	cmp	r3, #0
 801248e:	dce9      	bgt.n	8012464 <prvUnlockQueue+0x60>
 8012490:	e000      	b.n	8012494 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012492:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	22ff      	movs	r2, #255	; 0xff
 8012498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801249c:	f001 fe2a 	bl	80140f4 <vPortExitCritical>
}
 80124a0:	bf00      	nop
 80124a2:	3710      	adds	r7, #16
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}

080124a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80124b0:	f001 fdf0 	bl	8014094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d102      	bne.n	80124c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80124bc:	2301      	movs	r3, #1
 80124be:	60fb      	str	r3, [r7, #12]
 80124c0:	e001      	b.n	80124c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80124c2:	2300      	movs	r3, #0
 80124c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80124c6:	f001 fe15 	bl	80140f4 <vPortExitCritical>

	return xReturn;
 80124ca:	68fb      	ldr	r3, [r7, #12]
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3710      	adds	r7, #16
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80124dc:	f001 fdda 	bl	8014094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d102      	bne.n	80124f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80124ec:	2301      	movs	r3, #1
 80124ee:	60fb      	str	r3, [r7, #12]
 80124f0:	e001      	b.n	80124f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80124f2:	2300      	movs	r3, #0
 80124f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80124f6:	f001 fdfd 	bl	80140f4 <vPortExitCritical>

	return xReturn;
 80124fa:	68fb      	ldr	r3, [r7, #12]
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3710      	adds	r7, #16
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}

08012504 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012504:	b480      	push	{r7}
 8012506:	b085      	sub	sp, #20
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801250e:	2300      	movs	r3, #0
 8012510:	60fb      	str	r3, [r7, #12]
 8012512:	e014      	b.n	801253e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012514:	4a0f      	ldr	r2, [pc, #60]	; (8012554 <vQueueAddToRegistry+0x50>)
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d10b      	bne.n	8012538 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012520:	490c      	ldr	r1, [pc, #48]	; (8012554 <vQueueAddToRegistry+0x50>)
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	683a      	ldr	r2, [r7, #0]
 8012526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801252a:	4a0a      	ldr	r2, [pc, #40]	; (8012554 <vQueueAddToRegistry+0x50>)
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	00db      	lsls	r3, r3, #3
 8012530:	4413      	add	r3, r2
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012536:	e006      	b.n	8012546 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	3301      	adds	r3, #1
 801253c:	60fb      	str	r3, [r7, #12]
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	2b07      	cmp	r3, #7
 8012542:	d9e7      	bls.n	8012514 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012544:	bf00      	nop
 8012546:	bf00      	nop
 8012548:	3714      	adds	r7, #20
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	240012f8 	.word	0x240012f8

08012558 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012558:	b580      	push	{r7, lr}
 801255a:	b086      	sub	sp, #24
 801255c:	af00      	add	r7, sp, #0
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012568:	f001 fd94 	bl	8014094 <vPortEnterCritical>
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012572:	b25b      	sxtb	r3, r3
 8012574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012578:	d103      	bne.n	8012582 <vQueueWaitForMessageRestricted+0x2a>
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	2200      	movs	r2, #0
 801257e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012588:	b25b      	sxtb	r3, r3
 801258a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801258e:	d103      	bne.n	8012598 <vQueueWaitForMessageRestricted+0x40>
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	2200      	movs	r2, #0
 8012594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012598:	f001 fdac 	bl	80140f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d106      	bne.n	80125b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	3324      	adds	r3, #36	; 0x24
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	68b9      	ldr	r1, [r7, #8]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f000 fd91 	bl	80130d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80125b2:	6978      	ldr	r0, [r7, #20]
 80125b4:	f7ff ff26 	bl	8012404 <prvUnlockQueue>
	}
 80125b8:	bf00      	nop
 80125ba:	3718      	adds	r7, #24
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b08e      	sub	sp, #56	; 0x38
 80125c4:	af04      	add	r7, sp, #16
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
 80125cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80125ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d10a      	bne.n	80125ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80125d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d8:	f383 8811 	msr	BASEPRI, r3
 80125dc:	f3bf 8f6f 	isb	sy
 80125e0:	f3bf 8f4f 	dsb	sy
 80125e4:	623b      	str	r3, [r7, #32]
}
 80125e6:	bf00      	nop
 80125e8:	e7fe      	b.n	80125e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80125ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10a      	bne.n	8012606 <xTaskCreateStatic+0x46>
	__asm volatile
 80125f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f4:	f383 8811 	msr	BASEPRI, r3
 80125f8:	f3bf 8f6f 	isb	sy
 80125fc:	f3bf 8f4f 	dsb	sy
 8012600:	61fb      	str	r3, [r7, #28]
}
 8012602:	bf00      	nop
 8012604:	e7fe      	b.n	8012604 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012606:	235c      	movs	r3, #92	; 0x5c
 8012608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	2b5c      	cmp	r3, #92	; 0x5c
 801260e:	d00a      	beq.n	8012626 <xTaskCreateStatic+0x66>
	__asm volatile
 8012610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	61bb      	str	r3, [r7, #24]
}
 8012622:	bf00      	nop
 8012624:	e7fe      	b.n	8012624 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012626:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262a:	2b00      	cmp	r3, #0
 801262c:	d01e      	beq.n	801266c <xTaskCreateStatic+0xac>
 801262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012630:	2b00      	cmp	r3, #0
 8012632:	d01b      	beq.n	801266c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012636:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801263c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012640:	2202      	movs	r2, #2
 8012642:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012646:	2300      	movs	r3, #0
 8012648:	9303      	str	r3, [sp, #12]
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	9302      	str	r3, [sp, #8]
 801264e:	f107 0314 	add.w	r3, r7, #20
 8012652:	9301      	str	r3, [sp, #4]
 8012654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	687a      	ldr	r2, [r7, #4]
 801265c:	68b9      	ldr	r1, [r7, #8]
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f000 f850 	bl	8012704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012666:	f000 f8dd 	bl	8012824 <prvAddNewTaskToReadyList>
 801266a:	e001      	b.n	8012670 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801266c:	2300      	movs	r3, #0
 801266e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012670:	697b      	ldr	r3, [r7, #20]
	}
 8012672:	4618      	mov	r0, r3
 8012674:	3728      	adds	r7, #40	; 0x28
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}

0801267a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801267a:	b580      	push	{r7, lr}
 801267c:	b08c      	sub	sp, #48	; 0x30
 801267e:	af04      	add	r7, sp, #16
 8012680:	60f8      	str	r0, [r7, #12]
 8012682:	60b9      	str	r1, [r7, #8]
 8012684:	603b      	str	r3, [r7, #0]
 8012686:	4613      	mov	r3, r2
 8012688:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801268a:	88fb      	ldrh	r3, [r7, #6]
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	4618      	mov	r0, r3
 8012690:	f001 fe22 	bl	80142d8 <pvPortMalloc>
 8012694:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d00e      	beq.n	80126ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801269c:	205c      	movs	r0, #92	; 0x5c
 801269e:	f001 fe1b 	bl	80142d8 <pvPortMalloc>
 80126a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d003      	beq.n	80126b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	697a      	ldr	r2, [r7, #20]
 80126ae:	631a      	str	r2, [r3, #48]	; 0x30
 80126b0:	e005      	b.n	80126be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80126b2:	6978      	ldr	r0, [r7, #20]
 80126b4:	f001 fedc 	bl	8014470 <vPortFree>
 80126b8:	e001      	b.n	80126be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80126ba:	2300      	movs	r3, #0
 80126bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d017      	beq.n	80126f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	2200      	movs	r2, #0
 80126c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80126cc:	88fa      	ldrh	r2, [r7, #6]
 80126ce:	2300      	movs	r3, #0
 80126d0:	9303      	str	r3, [sp, #12]
 80126d2:	69fb      	ldr	r3, [r7, #28]
 80126d4:	9302      	str	r3, [sp, #8]
 80126d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d8:	9301      	str	r3, [sp, #4]
 80126da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126dc:	9300      	str	r3, [sp, #0]
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	68b9      	ldr	r1, [r7, #8]
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f000 f80e 	bl	8012704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80126e8:	69f8      	ldr	r0, [r7, #28]
 80126ea:	f000 f89b 	bl	8012824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80126ee:	2301      	movs	r3, #1
 80126f0:	61bb      	str	r3, [r7, #24]
 80126f2:	e002      	b.n	80126fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80126f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80126fa:	69bb      	ldr	r3, [r7, #24]
	}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3720      	adds	r7, #32
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b088      	sub	sp, #32
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
 8012710:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012714:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	009b      	lsls	r3, r3, #2
 801271a:	461a      	mov	r2, r3
 801271c:	21a5      	movs	r1, #165	; 0xa5
 801271e:	f002 f80d 	bl	801473c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012726:	6879      	ldr	r1, [r7, #4]
 8012728:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801272c:	440b      	add	r3, r1
 801272e:	009b      	lsls	r3, r3, #2
 8012730:	4413      	add	r3, r2
 8012732:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012734:	69bb      	ldr	r3, [r7, #24]
 8012736:	f023 0307 	bic.w	r3, r3, #7
 801273a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	f003 0307 	and.w	r3, r3, #7
 8012742:	2b00      	cmp	r3, #0
 8012744:	d00a      	beq.n	801275c <prvInitialiseNewTask+0x58>
	__asm volatile
 8012746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801274a:	f383 8811 	msr	BASEPRI, r3
 801274e:	f3bf 8f6f 	isb	sy
 8012752:	f3bf 8f4f 	dsb	sy
 8012756:	617b      	str	r3, [r7, #20]
}
 8012758:	bf00      	nop
 801275a:	e7fe      	b.n	801275a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d01f      	beq.n	80127a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012762:	2300      	movs	r3, #0
 8012764:	61fb      	str	r3, [r7, #28]
 8012766:	e012      	b.n	801278e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012768:	68ba      	ldr	r2, [r7, #8]
 801276a:	69fb      	ldr	r3, [r7, #28]
 801276c:	4413      	add	r3, r2
 801276e:	7819      	ldrb	r1, [r3, #0]
 8012770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	4413      	add	r3, r2
 8012776:	3334      	adds	r3, #52	; 0x34
 8012778:	460a      	mov	r2, r1
 801277a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801277c:	68ba      	ldr	r2, [r7, #8]
 801277e:	69fb      	ldr	r3, [r7, #28]
 8012780:	4413      	add	r3, r2
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d006      	beq.n	8012796 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	3301      	adds	r3, #1
 801278c:	61fb      	str	r3, [r7, #28]
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	2b0f      	cmp	r3, #15
 8012792:	d9e9      	bls.n	8012768 <prvInitialiseNewTask+0x64>
 8012794:	e000      	b.n	8012798 <prvInitialiseNewTask+0x94>
			{
				break;
 8012796:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279a:	2200      	movs	r2, #0
 801279c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80127a0:	e003      	b.n	80127aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80127a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a4:	2200      	movs	r2, #0
 80127a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	2b37      	cmp	r3, #55	; 0x37
 80127ae:	d901      	bls.n	80127b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80127b0:	2337      	movs	r3, #55	; 0x37
 80127b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80127b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80127ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c2:	2200      	movs	r2, #0
 80127c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80127c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c8:	3304      	adds	r3, #4
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7ff f978 	bl	8011ac0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80127d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d2:	3318      	adds	r3, #24
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7ff f973 	bl	8011ac0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80127da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80127e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80127ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80127f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f2:	2200      	movs	r2, #0
 80127f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80127f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f8:	2200      	movs	r2, #0
 80127fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	68f9      	ldr	r1, [r7, #12]
 8012802:	69b8      	ldr	r0, [r7, #24]
 8012804:	f001 fb18 	bl	8013e38 <pxPortInitialiseStack>
 8012808:	4602      	mov	r2, r0
 801280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012810:	2b00      	cmp	r3, #0
 8012812:	d002      	beq.n	801281a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801281a:	bf00      	nop
 801281c:	3720      	adds	r7, #32
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
	...

08012824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801282c:	f001 fc32 	bl	8014094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012830:	4b2d      	ldr	r3, [pc, #180]	; (80128e8 <prvAddNewTaskToReadyList+0xc4>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	3301      	adds	r3, #1
 8012836:	4a2c      	ldr	r2, [pc, #176]	; (80128e8 <prvAddNewTaskToReadyList+0xc4>)
 8012838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801283a:	4b2c      	ldr	r3, [pc, #176]	; (80128ec <prvAddNewTaskToReadyList+0xc8>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d109      	bne.n	8012856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012842:	4a2a      	ldr	r2, [pc, #168]	; (80128ec <prvAddNewTaskToReadyList+0xc8>)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012848:	4b27      	ldr	r3, [pc, #156]	; (80128e8 <prvAddNewTaskToReadyList+0xc4>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	2b01      	cmp	r3, #1
 801284e:	d110      	bne.n	8012872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012850:	f000 fdce 	bl	80133f0 <prvInitialiseTaskLists>
 8012854:	e00d      	b.n	8012872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012856:	4b26      	ldr	r3, [pc, #152]	; (80128f0 <prvAddNewTaskToReadyList+0xcc>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d109      	bne.n	8012872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801285e:	4b23      	ldr	r3, [pc, #140]	; (80128ec <prvAddNewTaskToReadyList+0xc8>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012868:	429a      	cmp	r2, r3
 801286a:	d802      	bhi.n	8012872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801286c:	4a1f      	ldr	r2, [pc, #124]	; (80128ec <prvAddNewTaskToReadyList+0xc8>)
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012872:	4b20      	ldr	r3, [pc, #128]	; (80128f4 <prvAddNewTaskToReadyList+0xd0>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	3301      	adds	r3, #1
 8012878:	4a1e      	ldr	r2, [pc, #120]	; (80128f4 <prvAddNewTaskToReadyList+0xd0>)
 801287a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801287c:	4b1d      	ldr	r3, [pc, #116]	; (80128f4 <prvAddNewTaskToReadyList+0xd0>)
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012888:	4b1b      	ldr	r3, [pc, #108]	; (80128f8 <prvAddNewTaskToReadyList+0xd4>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	429a      	cmp	r2, r3
 801288e:	d903      	bls.n	8012898 <prvAddNewTaskToReadyList+0x74>
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012894:	4a18      	ldr	r2, [pc, #96]	; (80128f8 <prvAddNewTaskToReadyList+0xd4>)
 8012896:	6013      	str	r3, [r2, #0]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801289c:	4613      	mov	r3, r2
 801289e:	009b      	lsls	r3, r3, #2
 80128a0:	4413      	add	r3, r2
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	4a15      	ldr	r2, [pc, #84]	; (80128fc <prvAddNewTaskToReadyList+0xd8>)
 80128a6:	441a      	add	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	3304      	adds	r3, #4
 80128ac:	4619      	mov	r1, r3
 80128ae:	4610      	mov	r0, r2
 80128b0:	f7ff f913 	bl	8011ada <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80128b4:	f001 fc1e 	bl	80140f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80128b8:	4b0d      	ldr	r3, [pc, #52]	; (80128f0 <prvAddNewTaskToReadyList+0xcc>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00e      	beq.n	80128de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80128c0:	4b0a      	ldr	r3, [pc, #40]	; (80128ec <prvAddNewTaskToReadyList+0xc8>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d207      	bcs.n	80128de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80128ce:	4b0c      	ldr	r3, [pc, #48]	; (8012900 <prvAddNewTaskToReadyList+0xdc>)
 80128d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128d4:	601a      	str	r2, [r3, #0]
 80128d6:	f3bf 8f4f 	dsb	sy
 80128da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128de:	bf00      	nop
 80128e0:	3708      	adds	r7, #8
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	2400180c 	.word	0x2400180c
 80128ec:	24001338 	.word	0x24001338
 80128f0:	24001818 	.word	0x24001818
 80128f4:	24001828 	.word	0x24001828
 80128f8:	24001814 	.word	0x24001814
 80128fc:	2400133c 	.word	0x2400133c
 8012900:	e000ed04 	.word	0xe000ed04

08012904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012904:	b580      	push	{r7, lr}
 8012906:	b084      	sub	sp, #16
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801290c:	2300      	movs	r3, #0
 801290e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d017      	beq.n	8012946 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012916:	4b13      	ldr	r3, [pc, #76]	; (8012964 <vTaskDelay+0x60>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d00a      	beq.n	8012934 <vTaskDelay+0x30>
	__asm volatile
 801291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012922:	f383 8811 	msr	BASEPRI, r3
 8012926:	f3bf 8f6f 	isb	sy
 801292a:	f3bf 8f4f 	dsb	sy
 801292e:	60bb      	str	r3, [r7, #8]
}
 8012930:	bf00      	nop
 8012932:	e7fe      	b.n	8012932 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012934:	f000 f99a 	bl	8012c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012938:	2100      	movs	r1, #0
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 feba 	bl	80136b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012940:	f000 f9a2 	bl	8012c88 <xTaskResumeAll>
 8012944:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d107      	bne.n	801295c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801294c:	4b06      	ldr	r3, [pc, #24]	; (8012968 <vTaskDelay+0x64>)
 801294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012952:	601a      	str	r2, [r3, #0]
 8012954:	f3bf 8f4f 	dsb	sy
 8012958:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801295c:	bf00      	nop
 801295e:	3710      	adds	r7, #16
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	24001834 	.word	0x24001834
 8012968:	e000ed04 	.word	0xe000ed04

0801296c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012974:	f001 fb8e 	bl	8014094 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d102      	bne.n	8012984 <vTaskSuspend+0x18>
 801297e:	4b30      	ldr	r3, [pc, #192]	; (8012a40 <vTaskSuspend+0xd4>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	e000      	b.n	8012986 <vTaskSuspend+0x1a>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	3304      	adds	r3, #4
 801298c:	4618      	mov	r0, r3
 801298e:	f7ff f901 	bl	8011b94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012996:	2b00      	cmp	r3, #0
 8012998:	d004      	beq.n	80129a4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	3318      	adds	r3, #24
 801299e:	4618      	mov	r0, r3
 80129a0:	f7ff f8f8 	bl	8011b94 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	3304      	adds	r3, #4
 80129a8:	4619      	mov	r1, r3
 80129aa:	4826      	ldr	r0, [pc, #152]	; (8012a44 <vTaskSuspend+0xd8>)
 80129ac:	f7ff f895 	bl	8011ada <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	2b01      	cmp	r3, #1
 80129ba:	d103      	bne.n	80129c4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2200      	movs	r2, #0
 80129c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80129c4:	f001 fb96 	bl	80140f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80129c8:	4b1f      	ldr	r3, [pc, #124]	; (8012a48 <vTaskSuspend+0xdc>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d005      	beq.n	80129dc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80129d0:	f001 fb60 	bl	8014094 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80129d4:	f000 fdaa 	bl	801352c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80129d8:	f001 fb8c 	bl	80140f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80129dc:	4b18      	ldr	r3, [pc, #96]	; (8012a40 <vTaskSuspend+0xd4>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	68fa      	ldr	r2, [r7, #12]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d127      	bne.n	8012a36 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80129e6:	4b18      	ldr	r3, [pc, #96]	; (8012a48 <vTaskSuspend+0xdc>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d017      	beq.n	8012a1e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80129ee:	4b17      	ldr	r3, [pc, #92]	; (8012a4c <vTaskSuspend+0xe0>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d00a      	beq.n	8012a0c <vTaskSuspend+0xa0>
	__asm volatile
 80129f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129fa:	f383 8811 	msr	BASEPRI, r3
 80129fe:	f3bf 8f6f 	isb	sy
 8012a02:	f3bf 8f4f 	dsb	sy
 8012a06:	60bb      	str	r3, [r7, #8]
}
 8012a08:	bf00      	nop
 8012a0a:	e7fe      	b.n	8012a0a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8012a0c:	4b10      	ldr	r3, [pc, #64]	; (8012a50 <vTaskSuspend+0xe4>)
 8012a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a12:	601a      	str	r2, [r3, #0]
 8012a14:	f3bf 8f4f 	dsb	sy
 8012a18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012a1c:	e00b      	b.n	8012a36 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012a1e:	4b09      	ldr	r3, [pc, #36]	; (8012a44 <vTaskSuspend+0xd8>)
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	4b0c      	ldr	r3, [pc, #48]	; (8012a54 <vTaskSuspend+0xe8>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d103      	bne.n	8012a32 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8012a2a:	4b05      	ldr	r3, [pc, #20]	; (8012a40 <vTaskSuspend+0xd4>)
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	601a      	str	r2, [r3, #0]
	}
 8012a30:	e001      	b.n	8012a36 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8012a32:	f000 fa91 	bl	8012f58 <vTaskSwitchContext>
	}
 8012a36:	bf00      	nop
 8012a38:	3710      	adds	r7, #16
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	24001338 	.word	0x24001338
 8012a44:	240017f8 	.word	0x240017f8
 8012a48:	24001818 	.word	0x24001818
 8012a4c:	24001834 	.word	0x24001834
 8012a50:	e000ed04 	.word	0xe000ed04
 8012a54:	2400180c 	.word	0x2400180c

08012a58 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012a58:	b480      	push	{r7}
 8012a5a:	b087      	sub	sp, #28
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012a60:	2300      	movs	r3, #0
 8012a62:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d10a      	bne.n	8012a84 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8012a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a72:	f383 8811 	msr	BASEPRI, r3
 8012a76:	f3bf 8f6f 	isb	sy
 8012a7a:	f3bf 8f4f 	dsb	sy
 8012a7e:	60fb      	str	r3, [r7, #12]
}
 8012a80:	bf00      	nop
 8012a82:	e7fe      	b.n	8012a82 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	695b      	ldr	r3, [r3, #20]
 8012a88:	4a0a      	ldr	r2, [pc, #40]	; (8012ab4 <prvTaskIsTaskSuspended+0x5c>)
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d10a      	bne.n	8012aa4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012a8e:	693b      	ldr	r3, [r7, #16]
 8012a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a92:	4a09      	ldr	r2, [pc, #36]	; (8012ab8 <prvTaskIsTaskSuspended+0x60>)
 8012a94:	4293      	cmp	r3, r2
 8012a96:	d005      	beq.n	8012aa4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d101      	bne.n	8012aa4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012aa4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	371c      	adds	r7, #28
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab0:	4770      	bx	lr
 8012ab2:	bf00      	nop
 8012ab4:	240017f8 	.word	0x240017f8
 8012ab8:	240017cc 	.word	0x240017cc

08012abc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b08a      	sub	sp, #40	; 0x28
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d10a      	bne.n	8012ae8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8012ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad6:	f383 8811 	msr	BASEPRI, r3
 8012ada:	f3bf 8f6f 	isb	sy
 8012ade:	f3bf 8f4f 	dsb	sy
 8012ae2:	61bb      	str	r3, [r7, #24]
}
 8012ae4:	bf00      	nop
 8012ae6:	e7fe      	b.n	8012ae6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ae8:	f001 fbb6 	bl	8014258 <vPortValidateInterruptPriority>
	__asm volatile
 8012aec:	f3ef 8211 	mrs	r2, BASEPRI
 8012af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af4:	f383 8811 	msr	BASEPRI, r3
 8012af8:	f3bf 8f6f 	isb	sy
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	617a      	str	r2, [r7, #20]
 8012b02:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012b04:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b06:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012b08:	6a38      	ldr	r0, [r7, #32]
 8012b0a:	f7ff ffa5 	bl	8012a58 <prvTaskIsTaskSuspended>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d030      	beq.n	8012b76 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b14:	4b1d      	ldr	r3, [pc, #116]	; (8012b8c <xTaskResumeFromISR+0xd0>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d126      	bne.n	8012b6a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b1c:	6a3b      	ldr	r3, [r7, #32]
 8012b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b20:	4b1b      	ldr	r3, [pc, #108]	; (8012b90 <xTaskResumeFromISR+0xd4>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d301      	bcc.n	8012b2e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b2e:	6a3b      	ldr	r3, [r7, #32]
 8012b30:	3304      	adds	r3, #4
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7ff f82e 	bl	8011b94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012b38:	6a3b      	ldr	r3, [r7, #32]
 8012b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b3c:	4b15      	ldr	r3, [pc, #84]	; (8012b94 <xTaskResumeFromISR+0xd8>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d903      	bls.n	8012b4c <xTaskResumeFromISR+0x90>
 8012b44:	6a3b      	ldr	r3, [r7, #32]
 8012b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b48:	4a12      	ldr	r2, [pc, #72]	; (8012b94 <xTaskResumeFromISR+0xd8>)
 8012b4a:	6013      	str	r3, [r2, #0]
 8012b4c:	6a3b      	ldr	r3, [r7, #32]
 8012b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b50:	4613      	mov	r3, r2
 8012b52:	009b      	lsls	r3, r3, #2
 8012b54:	4413      	add	r3, r2
 8012b56:	009b      	lsls	r3, r3, #2
 8012b58:	4a0f      	ldr	r2, [pc, #60]	; (8012b98 <xTaskResumeFromISR+0xdc>)
 8012b5a:	441a      	add	r2, r3
 8012b5c:	6a3b      	ldr	r3, [r7, #32]
 8012b5e:	3304      	adds	r3, #4
 8012b60:	4619      	mov	r1, r3
 8012b62:	4610      	mov	r0, r2
 8012b64:	f7fe ffb9 	bl	8011ada <vListInsertEnd>
 8012b68:	e005      	b.n	8012b76 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012b6a:	6a3b      	ldr	r3, [r7, #32]
 8012b6c:	3318      	adds	r3, #24
 8012b6e:	4619      	mov	r1, r3
 8012b70:	480a      	ldr	r0, [pc, #40]	; (8012b9c <xTaskResumeFromISR+0xe0>)
 8012b72:	f7fe ffb2 	bl	8011ada <vListInsertEnd>
 8012b76:	69fb      	ldr	r3, [r7, #28]
 8012b78:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	f383 8811 	msr	BASEPRI, r3
}
 8012b80:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8012b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3728      	adds	r7, #40	; 0x28
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	24001834 	.word	0x24001834
 8012b90:	24001338 	.word	0x24001338
 8012b94:	24001814 	.word	0x24001814
 8012b98:	2400133c 	.word	0x2400133c
 8012b9c:	240017cc 	.word	0x240017cc

08012ba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b08a      	sub	sp, #40	; 0x28
 8012ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012baa:	2300      	movs	r3, #0
 8012bac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012bae:	463a      	mov	r2, r7
 8012bb0:	1d39      	adds	r1, r7, #4
 8012bb2:	f107 0308 	add.w	r3, r7, #8
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fe fd40 	bl	801163c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012bbc:	6839      	ldr	r1, [r7, #0]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	68ba      	ldr	r2, [r7, #8]
 8012bc2:	9202      	str	r2, [sp, #8]
 8012bc4:	9301      	str	r3, [sp, #4]
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	9300      	str	r3, [sp, #0]
 8012bca:	2300      	movs	r3, #0
 8012bcc:	460a      	mov	r2, r1
 8012bce:	4921      	ldr	r1, [pc, #132]	; (8012c54 <vTaskStartScheduler+0xb4>)
 8012bd0:	4821      	ldr	r0, [pc, #132]	; (8012c58 <vTaskStartScheduler+0xb8>)
 8012bd2:	f7ff fcf5 	bl	80125c0 <xTaskCreateStatic>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	4a20      	ldr	r2, [pc, #128]	; (8012c5c <vTaskStartScheduler+0xbc>)
 8012bda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012bdc:	4b1f      	ldr	r3, [pc, #124]	; (8012c5c <vTaskStartScheduler+0xbc>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d002      	beq.n	8012bea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012be4:	2301      	movs	r3, #1
 8012be6:	617b      	str	r3, [r7, #20]
 8012be8:	e001      	b.n	8012bee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012bea:	2300      	movs	r3, #0
 8012bec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	d102      	bne.n	8012bfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012bf4:	f000 fdb2 	bl	801375c <xTimerCreateTimerTask>
 8012bf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d116      	bne.n	8012c2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8012c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c04:	f383 8811 	msr	BASEPRI, r3
 8012c08:	f3bf 8f6f 	isb	sy
 8012c0c:	f3bf 8f4f 	dsb	sy
 8012c10:	613b      	str	r3, [r7, #16]
}
 8012c12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012c14:	4b12      	ldr	r3, [pc, #72]	; (8012c60 <vTaskStartScheduler+0xc0>)
 8012c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012c1c:	4b11      	ldr	r3, [pc, #68]	; (8012c64 <vTaskStartScheduler+0xc4>)
 8012c1e:	2201      	movs	r2, #1
 8012c20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012c22:	4b11      	ldr	r3, [pc, #68]	; (8012c68 <vTaskStartScheduler+0xc8>)
 8012c24:	2200      	movs	r2, #0
 8012c26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012c28:	f001 f992 	bl	8013f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012c2c:	e00e      	b.n	8012c4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c34:	d10a      	bne.n	8012c4c <vTaskStartScheduler+0xac>
	__asm volatile
 8012c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3a:	f383 8811 	msr	BASEPRI, r3
 8012c3e:	f3bf 8f6f 	isb	sy
 8012c42:	f3bf 8f4f 	dsb	sy
 8012c46:	60fb      	str	r3, [r7, #12]
}
 8012c48:	bf00      	nop
 8012c4a:	e7fe      	b.n	8012c4a <vTaskStartScheduler+0xaa>
}
 8012c4c:	bf00      	nop
 8012c4e:	3718      	adds	r7, #24
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	080153ac 	.word	0x080153ac
 8012c58:	080133c1 	.word	0x080133c1
 8012c5c:	24001830 	.word	0x24001830
 8012c60:	2400182c 	.word	0x2400182c
 8012c64:	24001818 	.word	0x24001818
 8012c68:	24001810 	.word	0x24001810

08012c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012c70:	4b04      	ldr	r3, [pc, #16]	; (8012c84 <vTaskSuspendAll+0x18>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	3301      	adds	r3, #1
 8012c76:	4a03      	ldr	r2, [pc, #12]	; (8012c84 <vTaskSuspendAll+0x18>)
 8012c78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012c7a:	bf00      	nop
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr
 8012c84:	24001834 	.word	0x24001834

08012c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012c92:	2300      	movs	r3, #0
 8012c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012c96:	4b42      	ldr	r3, [pc, #264]	; (8012da0 <xTaskResumeAll+0x118>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d10a      	bne.n	8012cb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8012c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	603b      	str	r3, [r7, #0]
}
 8012cb0:	bf00      	nop
 8012cb2:	e7fe      	b.n	8012cb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012cb4:	f001 f9ee 	bl	8014094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012cb8:	4b39      	ldr	r3, [pc, #228]	; (8012da0 <xTaskResumeAll+0x118>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	3b01      	subs	r3, #1
 8012cbe:	4a38      	ldr	r2, [pc, #224]	; (8012da0 <xTaskResumeAll+0x118>)
 8012cc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cc2:	4b37      	ldr	r3, [pc, #220]	; (8012da0 <xTaskResumeAll+0x118>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d162      	bne.n	8012d90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012cca:	4b36      	ldr	r3, [pc, #216]	; (8012da4 <xTaskResumeAll+0x11c>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d05e      	beq.n	8012d90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012cd2:	e02f      	b.n	8012d34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cd4:	4b34      	ldr	r3, [pc, #208]	; (8012da8 <xTaskResumeAll+0x120>)
 8012cd6:	68db      	ldr	r3, [r3, #12]
 8012cd8:	68db      	ldr	r3, [r3, #12]
 8012cda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	3318      	adds	r3, #24
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fe ff57 	bl	8011b94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	3304      	adds	r3, #4
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fe ff52 	bl	8011b94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cf4:	4b2d      	ldr	r3, [pc, #180]	; (8012dac <xTaskResumeAll+0x124>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d903      	bls.n	8012d04 <xTaskResumeAll+0x7c>
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d00:	4a2a      	ldr	r2, [pc, #168]	; (8012dac <xTaskResumeAll+0x124>)
 8012d02:	6013      	str	r3, [r2, #0]
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d08:	4613      	mov	r3, r2
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	4413      	add	r3, r2
 8012d0e:	009b      	lsls	r3, r3, #2
 8012d10:	4a27      	ldr	r2, [pc, #156]	; (8012db0 <xTaskResumeAll+0x128>)
 8012d12:	441a      	add	r2, r3
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	3304      	adds	r3, #4
 8012d18:	4619      	mov	r1, r3
 8012d1a:	4610      	mov	r0, r2
 8012d1c:	f7fe fedd 	bl	8011ada <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d24:	4b23      	ldr	r3, [pc, #140]	; (8012db4 <xTaskResumeAll+0x12c>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d302      	bcc.n	8012d34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012d2e:	4b22      	ldr	r3, [pc, #136]	; (8012db8 <xTaskResumeAll+0x130>)
 8012d30:	2201      	movs	r2, #1
 8012d32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d34:	4b1c      	ldr	r3, [pc, #112]	; (8012da8 <xTaskResumeAll+0x120>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d1cb      	bne.n	8012cd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d001      	beq.n	8012d46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012d42:	f000 fbf3 	bl	801352c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012d46:	4b1d      	ldr	r3, [pc, #116]	; (8012dbc <xTaskResumeAll+0x134>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d010      	beq.n	8012d74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012d52:	f000 f847 	bl	8012de4 <xTaskIncrementTick>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d002      	beq.n	8012d62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012d5c:	4b16      	ldr	r3, [pc, #88]	; (8012db8 <xTaskResumeAll+0x130>)
 8012d5e:	2201      	movs	r2, #1
 8012d60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	3b01      	subs	r3, #1
 8012d66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d1f1      	bne.n	8012d52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012d6e:	4b13      	ldr	r3, [pc, #76]	; (8012dbc <xTaskResumeAll+0x134>)
 8012d70:	2200      	movs	r2, #0
 8012d72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012d74:	4b10      	ldr	r3, [pc, #64]	; (8012db8 <xTaskResumeAll+0x130>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d009      	beq.n	8012d90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012d80:	4b0f      	ldr	r3, [pc, #60]	; (8012dc0 <xTaskResumeAll+0x138>)
 8012d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d86:	601a      	str	r2, [r3, #0]
 8012d88:	f3bf 8f4f 	dsb	sy
 8012d8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d90:	f001 f9b0 	bl	80140f4 <vPortExitCritical>

	return xAlreadyYielded;
 8012d94:	68bb      	ldr	r3, [r7, #8]
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3710      	adds	r7, #16
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	24001834 	.word	0x24001834
 8012da4:	2400180c 	.word	0x2400180c
 8012da8:	240017cc 	.word	0x240017cc
 8012dac:	24001814 	.word	0x24001814
 8012db0:	2400133c 	.word	0x2400133c
 8012db4:	24001338 	.word	0x24001338
 8012db8:	24001820 	.word	0x24001820
 8012dbc:	2400181c 	.word	0x2400181c
 8012dc0:	e000ed04 	.word	0xe000ed04

08012dc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b083      	sub	sp, #12
 8012dc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012dca:	4b05      	ldr	r3, [pc, #20]	; (8012de0 <xTaskGetTickCount+0x1c>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012dd0:	687b      	ldr	r3, [r7, #4]
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	370c      	adds	r7, #12
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr
 8012dde:	bf00      	nop
 8012de0:	24001810 	.word	0x24001810

08012de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b086      	sub	sp, #24
 8012de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012dea:	2300      	movs	r3, #0
 8012dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012dee:	4b4f      	ldr	r3, [pc, #316]	; (8012f2c <xTaskIncrementTick+0x148>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f040 808f 	bne.w	8012f16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012df8:	4b4d      	ldr	r3, [pc, #308]	; (8012f30 <xTaskIncrementTick+0x14c>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012e00:	4a4b      	ldr	r2, [pc, #300]	; (8012f30 <xTaskIncrementTick+0x14c>)
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d120      	bne.n	8012e4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012e0c:	4b49      	ldr	r3, [pc, #292]	; (8012f34 <xTaskIncrementTick+0x150>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d00a      	beq.n	8012e2c <xTaskIncrementTick+0x48>
	__asm volatile
 8012e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e1a:	f383 8811 	msr	BASEPRI, r3
 8012e1e:	f3bf 8f6f 	isb	sy
 8012e22:	f3bf 8f4f 	dsb	sy
 8012e26:	603b      	str	r3, [r7, #0]
}
 8012e28:	bf00      	nop
 8012e2a:	e7fe      	b.n	8012e2a <xTaskIncrementTick+0x46>
 8012e2c:	4b41      	ldr	r3, [pc, #260]	; (8012f34 <xTaskIncrementTick+0x150>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	60fb      	str	r3, [r7, #12]
 8012e32:	4b41      	ldr	r3, [pc, #260]	; (8012f38 <xTaskIncrementTick+0x154>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	4a3f      	ldr	r2, [pc, #252]	; (8012f34 <xTaskIncrementTick+0x150>)
 8012e38:	6013      	str	r3, [r2, #0]
 8012e3a:	4a3f      	ldr	r2, [pc, #252]	; (8012f38 <xTaskIncrementTick+0x154>)
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	6013      	str	r3, [r2, #0]
 8012e40:	4b3e      	ldr	r3, [pc, #248]	; (8012f3c <xTaskIncrementTick+0x158>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	3301      	adds	r3, #1
 8012e46:	4a3d      	ldr	r2, [pc, #244]	; (8012f3c <xTaskIncrementTick+0x158>)
 8012e48:	6013      	str	r3, [r2, #0]
 8012e4a:	f000 fb6f 	bl	801352c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012e4e:	4b3c      	ldr	r3, [pc, #240]	; (8012f40 <xTaskIncrementTick+0x15c>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	693a      	ldr	r2, [r7, #16]
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d349      	bcc.n	8012eec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e58:	4b36      	ldr	r3, [pc, #216]	; (8012f34 <xTaskIncrementTick+0x150>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d104      	bne.n	8012e6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e62:	4b37      	ldr	r3, [pc, #220]	; (8012f40 <xTaskIncrementTick+0x15c>)
 8012e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e68:	601a      	str	r2, [r3, #0]
					break;
 8012e6a:	e03f      	b.n	8012eec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e6c:	4b31      	ldr	r3, [pc, #196]	; (8012f34 <xTaskIncrementTick+0x150>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	68db      	ldr	r3, [r3, #12]
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	685b      	ldr	r3, [r3, #4]
 8012e7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012e7c:	693a      	ldr	r2, [r7, #16]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d203      	bcs.n	8012e8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012e84:	4a2e      	ldr	r2, [pc, #184]	; (8012f40 <xTaskIncrementTick+0x15c>)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012e8a:	e02f      	b.n	8012eec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	3304      	adds	r3, #4
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7fe fe7f 	bl	8011b94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d004      	beq.n	8012ea8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	3318      	adds	r3, #24
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7fe fe76 	bl	8011b94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eac:	4b25      	ldr	r3, [pc, #148]	; (8012f44 <xTaskIncrementTick+0x160>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d903      	bls.n	8012ebc <xTaskIncrementTick+0xd8>
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb8:	4a22      	ldr	r2, [pc, #136]	; (8012f44 <xTaskIncrementTick+0x160>)
 8012eba:	6013      	str	r3, [r2, #0]
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ec0:	4613      	mov	r3, r2
 8012ec2:	009b      	lsls	r3, r3, #2
 8012ec4:	4413      	add	r3, r2
 8012ec6:	009b      	lsls	r3, r3, #2
 8012ec8:	4a1f      	ldr	r2, [pc, #124]	; (8012f48 <xTaskIncrementTick+0x164>)
 8012eca:	441a      	add	r2, r3
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	3304      	adds	r3, #4
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	4610      	mov	r0, r2
 8012ed4:	f7fe fe01 	bl	8011ada <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012edc:	4b1b      	ldr	r3, [pc, #108]	; (8012f4c <xTaskIncrementTick+0x168>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d3b8      	bcc.n	8012e58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012eea:	e7b5      	b.n	8012e58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012eec:	4b17      	ldr	r3, [pc, #92]	; (8012f4c <xTaskIncrementTick+0x168>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ef2:	4915      	ldr	r1, [pc, #84]	; (8012f48 <xTaskIncrementTick+0x164>)
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	009b      	lsls	r3, r3, #2
 8012ef8:	4413      	add	r3, r2
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	440b      	add	r3, r1
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d901      	bls.n	8012f08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012f04:	2301      	movs	r3, #1
 8012f06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012f08:	4b11      	ldr	r3, [pc, #68]	; (8012f50 <xTaskIncrementTick+0x16c>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d007      	beq.n	8012f20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012f10:	2301      	movs	r3, #1
 8012f12:	617b      	str	r3, [r7, #20]
 8012f14:	e004      	b.n	8012f20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012f16:	4b0f      	ldr	r3, [pc, #60]	; (8012f54 <xTaskIncrementTick+0x170>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	4a0d      	ldr	r2, [pc, #52]	; (8012f54 <xTaskIncrementTick+0x170>)
 8012f1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012f20:	697b      	ldr	r3, [r7, #20]
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	3718      	adds	r7, #24
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	24001834 	.word	0x24001834
 8012f30:	24001810 	.word	0x24001810
 8012f34:	240017c4 	.word	0x240017c4
 8012f38:	240017c8 	.word	0x240017c8
 8012f3c:	24001824 	.word	0x24001824
 8012f40:	2400182c 	.word	0x2400182c
 8012f44:	24001814 	.word	0x24001814
 8012f48:	2400133c 	.word	0x2400133c
 8012f4c:	24001338 	.word	0x24001338
 8012f50:	24001820 	.word	0x24001820
 8012f54:	2400181c 	.word	0x2400181c

08012f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b085      	sub	sp, #20
 8012f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012f5e:	4b28      	ldr	r3, [pc, #160]	; (8013000 <vTaskSwitchContext+0xa8>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d003      	beq.n	8012f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012f66:	4b27      	ldr	r3, [pc, #156]	; (8013004 <vTaskSwitchContext+0xac>)
 8012f68:	2201      	movs	r2, #1
 8012f6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012f6c:	e041      	b.n	8012ff2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012f6e:	4b25      	ldr	r3, [pc, #148]	; (8013004 <vTaskSwitchContext+0xac>)
 8012f70:	2200      	movs	r2, #0
 8012f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f74:	4b24      	ldr	r3, [pc, #144]	; (8013008 <vTaskSwitchContext+0xb0>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	60fb      	str	r3, [r7, #12]
 8012f7a:	e010      	b.n	8012f9e <vTaskSwitchContext+0x46>
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d10a      	bne.n	8012f98 <vTaskSwitchContext+0x40>
	__asm volatile
 8012f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f86:	f383 8811 	msr	BASEPRI, r3
 8012f8a:	f3bf 8f6f 	isb	sy
 8012f8e:	f3bf 8f4f 	dsb	sy
 8012f92:	607b      	str	r3, [r7, #4]
}
 8012f94:	bf00      	nop
 8012f96:	e7fe      	b.n	8012f96 <vTaskSwitchContext+0x3e>
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	3b01      	subs	r3, #1
 8012f9c:	60fb      	str	r3, [r7, #12]
 8012f9e:	491b      	ldr	r1, [pc, #108]	; (801300c <vTaskSwitchContext+0xb4>)
 8012fa0:	68fa      	ldr	r2, [r7, #12]
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	009b      	lsls	r3, r3, #2
 8012fa6:	4413      	add	r3, r2
 8012fa8:	009b      	lsls	r3, r3, #2
 8012faa:	440b      	add	r3, r1
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d0e4      	beq.n	8012f7c <vTaskSwitchContext+0x24>
 8012fb2:	68fa      	ldr	r2, [r7, #12]
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	009b      	lsls	r3, r3, #2
 8012fb8:	4413      	add	r3, r2
 8012fba:	009b      	lsls	r3, r3, #2
 8012fbc:	4a13      	ldr	r2, [pc, #76]	; (801300c <vTaskSwitchContext+0xb4>)
 8012fbe:	4413      	add	r3, r2
 8012fc0:	60bb      	str	r3, [r7, #8]
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	685a      	ldr	r2, [r3, #4]
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	605a      	str	r2, [r3, #4]
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	685a      	ldr	r2, [r3, #4]
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	3308      	adds	r3, #8
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d104      	bne.n	8012fe2 <vTaskSwitchContext+0x8a>
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	685a      	ldr	r2, [r3, #4]
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	605a      	str	r2, [r3, #4]
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	68db      	ldr	r3, [r3, #12]
 8012fe8:	4a09      	ldr	r2, [pc, #36]	; (8013010 <vTaskSwitchContext+0xb8>)
 8012fea:	6013      	str	r3, [r2, #0]
 8012fec:	4a06      	ldr	r2, [pc, #24]	; (8013008 <vTaskSwitchContext+0xb0>)
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6013      	str	r3, [r2, #0]
}
 8012ff2:	bf00      	nop
 8012ff4:	3714      	adds	r7, #20
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffc:	4770      	bx	lr
 8012ffe:	bf00      	nop
 8013000:	24001834 	.word	0x24001834
 8013004:	24001820 	.word	0x24001820
 8013008:	24001814 	.word	0x24001814
 801300c:	2400133c 	.word	0x2400133c
 8013010:	24001338 	.word	0x24001338

08013014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b084      	sub	sp, #16
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d10a      	bne.n	801303a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013028:	f383 8811 	msr	BASEPRI, r3
 801302c:	f3bf 8f6f 	isb	sy
 8013030:	f3bf 8f4f 	dsb	sy
 8013034:	60fb      	str	r3, [r7, #12]
}
 8013036:	bf00      	nop
 8013038:	e7fe      	b.n	8013038 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801303a:	4b07      	ldr	r3, [pc, #28]	; (8013058 <vTaskPlaceOnEventList+0x44>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	3318      	adds	r3, #24
 8013040:	4619      	mov	r1, r3
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f7fe fd6d 	bl	8011b22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013048:	2101      	movs	r1, #1
 801304a:	6838      	ldr	r0, [r7, #0]
 801304c:	f000 fb32 	bl	80136b4 <prvAddCurrentTaskToDelayedList>
}
 8013050:	bf00      	nop
 8013052:	3710      	adds	r7, #16
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	24001338 	.word	0x24001338

0801305c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b086      	sub	sp, #24
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d10a      	bne.n	8013084 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013072:	f383 8811 	msr	BASEPRI, r3
 8013076:	f3bf 8f6f 	isb	sy
 801307a:	f3bf 8f4f 	dsb	sy
 801307e:	617b      	str	r3, [r7, #20]
}
 8013080:	bf00      	nop
 8013082:	e7fe      	b.n	8013082 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8013084:	4b11      	ldr	r3, [pc, #68]	; (80130cc <vTaskPlaceOnUnorderedEventList+0x70>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d10a      	bne.n	80130a2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013090:	f383 8811 	msr	BASEPRI, r3
 8013094:	f3bf 8f6f 	isb	sy
 8013098:	f3bf 8f4f 	dsb	sy
 801309c:	613b      	str	r3, [r7, #16]
}
 801309e:	bf00      	nop
 80130a0:	e7fe      	b.n	80130a0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80130a2:	4b0b      	ldr	r3, [pc, #44]	; (80130d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	68ba      	ldr	r2, [r7, #8]
 80130a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80130ac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130ae:	4b08      	ldr	r3, [pc, #32]	; (80130d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	3318      	adds	r3, #24
 80130b4:	4619      	mov	r1, r3
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f7fe fd0f 	bl	8011ada <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80130bc:	2101      	movs	r1, #1
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f000 faf8 	bl	80136b4 <prvAddCurrentTaskToDelayedList>
}
 80130c4:	bf00      	nop
 80130c6:	3718      	adds	r7, #24
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}
 80130cc:	24001834 	.word	0x24001834
 80130d0:	24001338 	.word	0x24001338

080130d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b086      	sub	sp, #24
 80130d8:	af00      	add	r7, sp, #0
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	60b9      	str	r1, [r7, #8]
 80130de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d10a      	bne.n	80130fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80130e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ea:	f383 8811 	msr	BASEPRI, r3
 80130ee:	f3bf 8f6f 	isb	sy
 80130f2:	f3bf 8f4f 	dsb	sy
 80130f6:	617b      	str	r3, [r7, #20]
}
 80130f8:	bf00      	nop
 80130fa:	e7fe      	b.n	80130fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130fc:	4b0a      	ldr	r3, [pc, #40]	; (8013128 <vTaskPlaceOnEventListRestricted+0x54>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	3318      	adds	r3, #24
 8013102:	4619      	mov	r1, r3
 8013104:	68f8      	ldr	r0, [r7, #12]
 8013106:	f7fe fce8 	bl	8011ada <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d002      	beq.n	8013116 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013114:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013116:	6879      	ldr	r1, [r7, #4]
 8013118:	68b8      	ldr	r0, [r7, #8]
 801311a:	f000 facb 	bl	80136b4 <prvAddCurrentTaskToDelayedList>
	}
 801311e:	bf00      	nop
 8013120:	3718      	adds	r7, #24
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	24001338 	.word	0x24001338

0801312c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b086      	sub	sp, #24
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	68db      	ldr	r3, [r3, #12]
 801313a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d10a      	bne.n	8013158 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013146:	f383 8811 	msr	BASEPRI, r3
 801314a:	f3bf 8f6f 	isb	sy
 801314e:	f3bf 8f4f 	dsb	sy
 8013152:	60fb      	str	r3, [r7, #12]
}
 8013154:	bf00      	nop
 8013156:	e7fe      	b.n	8013156 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	3318      	adds	r3, #24
 801315c:	4618      	mov	r0, r3
 801315e:	f7fe fd19 	bl	8011b94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013162:	4b1e      	ldr	r3, [pc, #120]	; (80131dc <xTaskRemoveFromEventList+0xb0>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d11d      	bne.n	80131a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	3304      	adds	r3, #4
 801316e:	4618      	mov	r0, r3
 8013170:	f7fe fd10 	bl	8011b94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013178:	4b19      	ldr	r3, [pc, #100]	; (80131e0 <xTaskRemoveFromEventList+0xb4>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	429a      	cmp	r2, r3
 801317e:	d903      	bls.n	8013188 <xTaskRemoveFromEventList+0x5c>
 8013180:	693b      	ldr	r3, [r7, #16]
 8013182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013184:	4a16      	ldr	r2, [pc, #88]	; (80131e0 <xTaskRemoveFromEventList+0xb4>)
 8013186:	6013      	str	r3, [r2, #0]
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801318c:	4613      	mov	r3, r2
 801318e:	009b      	lsls	r3, r3, #2
 8013190:	4413      	add	r3, r2
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	4a13      	ldr	r2, [pc, #76]	; (80131e4 <xTaskRemoveFromEventList+0xb8>)
 8013196:	441a      	add	r2, r3
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	3304      	adds	r3, #4
 801319c:	4619      	mov	r1, r3
 801319e:	4610      	mov	r0, r2
 80131a0:	f7fe fc9b 	bl	8011ada <vListInsertEnd>
 80131a4:	e005      	b.n	80131b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	3318      	adds	r3, #24
 80131aa:	4619      	mov	r1, r3
 80131ac:	480e      	ldr	r0, [pc, #56]	; (80131e8 <xTaskRemoveFromEventList+0xbc>)
 80131ae:	f7fe fc94 	bl	8011ada <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80131b2:	693b      	ldr	r3, [r7, #16]
 80131b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131b6:	4b0d      	ldr	r3, [pc, #52]	; (80131ec <xTaskRemoveFromEventList+0xc0>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131bc:	429a      	cmp	r2, r3
 80131be:	d905      	bls.n	80131cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80131c0:	2301      	movs	r3, #1
 80131c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80131c4:	4b0a      	ldr	r3, [pc, #40]	; (80131f0 <xTaskRemoveFromEventList+0xc4>)
 80131c6:	2201      	movs	r2, #1
 80131c8:	601a      	str	r2, [r3, #0]
 80131ca:	e001      	b.n	80131d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80131cc:	2300      	movs	r3, #0
 80131ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80131d0:	697b      	ldr	r3, [r7, #20]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3718      	adds	r7, #24
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
 80131da:	bf00      	nop
 80131dc:	24001834 	.word	0x24001834
 80131e0:	24001814 	.word	0x24001814
 80131e4:	2400133c 	.word	0x2400133c
 80131e8:	240017cc 	.word	0x240017cc
 80131ec:	24001338 	.word	0x24001338
 80131f0:	24001820 	.word	0x24001820

080131f4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b086      	sub	sp, #24
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
 80131fc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80131fe:	4b29      	ldr	r3, [pc, #164]	; (80132a4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d10a      	bne.n	801321c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8013206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801320a:	f383 8811 	msr	BASEPRI, r3
 801320e:	f3bf 8f6f 	isb	sy
 8013212:	f3bf 8f4f 	dsb	sy
 8013216:	613b      	str	r3, [r7, #16]
}
 8013218:	bf00      	nop
 801321a:	e7fe      	b.n	801321a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d10a      	bne.n	8013248 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8013232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013236:	f383 8811 	msr	BASEPRI, r3
 801323a:	f3bf 8f6f 	isb	sy
 801323e:	f3bf 8f4f 	dsb	sy
 8013242:	60fb      	str	r3, [r7, #12]
}
 8013244:	bf00      	nop
 8013246:	e7fe      	b.n	8013246 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7fe fca3 	bl	8011b94 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	3304      	adds	r3, #4
 8013252:	4618      	mov	r0, r3
 8013254:	f7fe fc9e 	bl	8011b94 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325c:	4b12      	ldr	r3, [pc, #72]	; (80132a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	429a      	cmp	r2, r3
 8013262:	d903      	bls.n	801326c <vTaskRemoveFromUnorderedEventList+0x78>
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013268:	4a0f      	ldr	r2, [pc, #60]	; (80132a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801326a:	6013      	str	r3, [r2, #0]
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013270:	4613      	mov	r3, r2
 8013272:	009b      	lsls	r3, r3, #2
 8013274:	4413      	add	r3, r2
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	4a0c      	ldr	r2, [pc, #48]	; (80132ac <vTaskRemoveFromUnorderedEventList+0xb8>)
 801327a:	441a      	add	r2, r3
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	3304      	adds	r3, #4
 8013280:	4619      	mov	r1, r3
 8013282:	4610      	mov	r0, r2
 8013284:	f7fe fc29 	bl	8011ada <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801328c:	4b08      	ldr	r3, [pc, #32]	; (80132b0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013292:	429a      	cmp	r2, r3
 8013294:	d902      	bls.n	801329c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8013296:	4b07      	ldr	r3, [pc, #28]	; (80132b4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8013298:	2201      	movs	r2, #1
 801329a:	601a      	str	r2, [r3, #0]
	}
}
 801329c:	bf00      	nop
 801329e:	3718      	adds	r7, #24
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	24001834 	.word	0x24001834
 80132a8:	24001814 	.word	0x24001814
 80132ac:	2400133c 	.word	0x2400133c
 80132b0:	24001338 	.word	0x24001338
 80132b4:	24001820 	.word	0x24001820

080132b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80132b8:	b480      	push	{r7}
 80132ba:	b083      	sub	sp, #12
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80132c0:	4b06      	ldr	r3, [pc, #24]	; (80132dc <vTaskInternalSetTimeOutState+0x24>)
 80132c2:	681a      	ldr	r2, [r3, #0]
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80132c8:	4b05      	ldr	r3, [pc, #20]	; (80132e0 <vTaskInternalSetTimeOutState+0x28>)
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	605a      	str	r2, [r3, #4]
}
 80132d0:	bf00      	nop
 80132d2:	370c      	adds	r7, #12
 80132d4:	46bd      	mov	sp, r7
 80132d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132da:	4770      	bx	lr
 80132dc:	24001824 	.word	0x24001824
 80132e0:	24001810 	.word	0x24001810

080132e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b088      	sub	sp, #32
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d10a      	bne.n	801330a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80132f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f8:	f383 8811 	msr	BASEPRI, r3
 80132fc:	f3bf 8f6f 	isb	sy
 8013300:	f3bf 8f4f 	dsb	sy
 8013304:	613b      	str	r3, [r7, #16]
}
 8013306:	bf00      	nop
 8013308:	e7fe      	b.n	8013308 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d10a      	bne.n	8013326 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013314:	f383 8811 	msr	BASEPRI, r3
 8013318:	f3bf 8f6f 	isb	sy
 801331c:	f3bf 8f4f 	dsb	sy
 8013320:	60fb      	str	r3, [r7, #12]
}
 8013322:	bf00      	nop
 8013324:	e7fe      	b.n	8013324 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013326:	f000 feb5 	bl	8014094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801332a:	4b1d      	ldr	r3, [pc, #116]	; (80133a0 <xTaskCheckForTimeOut+0xbc>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	69ba      	ldr	r2, [r7, #24]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013342:	d102      	bne.n	801334a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013344:	2300      	movs	r3, #0
 8013346:	61fb      	str	r3, [r7, #28]
 8013348:	e023      	b.n	8013392 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	4b15      	ldr	r3, [pc, #84]	; (80133a4 <xTaskCheckForTimeOut+0xc0>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	429a      	cmp	r2, r3
 8013354:	d007      	beq.n	8013366 <xTaskCheckForTimeOut+0x82>
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	69ba      	ldr	r2, [r7, #24]
 801335c:	429a      	cmp	r2, r3
 801335e:	d302      	bcc.n	8013366 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013360:	2301      	movs	r3, #1
 8013362:	61fb      	str	r3, [r7, #28]
 8013364:	e015      	b.n	8013392 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	697a      	ldr	r2, [r7, #20]
 801336c:	429a      	cmp	r2, r3
 801336e:	d20b      	bcs.n	8013388 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	681a      	ldr	r2, [r3, #0]
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	1ad2      	subs	r2, r2, r3
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f7ff ff9b 	bl	80132b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013382:	2300      	movs	r3, #0
 8013384:	61fb      	str	r3, [r7, #28]
 8013386:	e004      	b.n	8013392 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	2200      	movs	r2, #0
 801338c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801338e:	2301      	movs	r3, #1
 8013390:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013392:	f000 feaf 	bl	80140f4 <vPortExitCritical>

	return xReturn;
 8013396:	69fb      	ldr	r3, [r7, #28]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3720      	adds	r7, #32
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}
 80133a0:	24001810 	.word	0x24001810
 80133a4:	24001824 	.word	0x24001824

080133a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80133a8:	b480      	push	{r7}
 80133aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80133ac:	4b03      	ldr	r3, [pc, #12]	; (80133bc <vTaskMissedYield+0x14>)
 80133ae:	2201      	movs	r2, #1
 80133b0:	601a      	str	r2, [r3, #0]
}
 80133b2:	bf00      	nop
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr
 80133bc:	24001820 	.word	0x24001820

080133c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80133c8:	f000 f852 	bl	8013470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80133cc:	4b06      	ldr	r3, [pc, #24]	; (80133e8 <prvIdleTask+0x28>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	2b01      	cmp	r3, #1
 80133d2:	d9f9      	bls.n	80133c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80133d4:	4b05      	ldr	r3, [pc, #20]	; (80133ec <prvIdleTask+0x2c>)
 80133d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133da:	601a      	str	r2, [r3, #0]
 80133dc:	f3bf 8f4f 	dsb	sy
 80133e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80133e4:	e7f0      	b.n	80133c8 <prvIdleTask+0x8>
 80133e6:	bf00      	nop
 80133e8:	2400133c 	.word	0x2400133c
 80133ec:	e000ed04 	.word	0xe000ed04

080133f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80133f6:	2300      	movs	r3, #0
 80133f8:	607b      	str	r3, [r7, #4]
 80133fa:	e00c      	b.n	8013416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80133fc:	687a      	ldr	r2, [r7, #4]
 80133fe:	4613      	mov	r3, r2
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	4413      	add	r3, r2
 8013404:	009b      	lsls	r3, r3, #2
 8013406:	4a12      	ldr	r2, [pc, #72]	; (8013450 <prvInitialiseTaskLists+0x60>)
 8013408:	4413      	add	r3, r2
 801340a:	4618      	mov	r0, r3
 801340c:	f7fe fb38 	bl	8011a80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	3301      	adds	r3, #1
 8013414:	607b      	str	r3, [r7, #4]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2b37      	cmp	r3, #55	; 0x37
 801341a:	d9ef      	bls.n	80133fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801341c:	480d      	ldr	r0, [pc, #52]	; (8013454 <prvInitialiseTaskLists+0x64>)
 801341e:	f7fe fb2f 	bl	8011a80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013422:	480d      	ldr	r0, [pc, #52]	; (8013458 <prvInitialiseTaskLists+0x68>)
 8013424:	f7fe fb2c 	bl	8011a80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013428:	480c      	ldr	r0, [pc, #48]	; (801345c <prvInitialiseTaskLists+0x6c>)
 801342a:	f7fe fb29 	bl	8011a80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801342e:	480c      	ldr	r0, [pc, #48]	; (8013460 <prvInitialiseTaskLists+0x70>)
 8013430:	f7fe fb26 	bl	8011a80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013434:	480b      	ldr	r0, [pc, #44]	; (8013464 <prvInitialiseTaskLists+0x74>)
 8013436:	f7fe fb23 	bl	8011a80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801343a:	4b0b      	ldr	r3, [pc, #44]	; (8013468 <prvInitialiseTaskLists+0x78>)
 801343c:	4a05      	ldr	r2, [pc, #20]	; (8013454 <prvInitialiseTaskLists+0x64>)
 801343e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013440:	4b0a      	ldr	r3, [pc, #40]	; (801346c <prvInitialiseTaskLists+0x7c>)
 8013442:	4a05      	ldr	r2, [pc, #20]	; (8013458 <prvInitialiseTaskLists+0x68>)
 8013444:	601a      	str	r2, [r3, #0]
}
 8013446:	bf00      	nop
 8013448:	3708      	adds	r7, #8
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	2400133c 	.word	0x2400133c
 8013454:	2400179c 	.word	0x2400179c
 8013458:	240017b0 	.word	0x240017b0
 801345c:	240017cc 	.word	0x240017cc
 8013460:	240017e0 	.word	0x240017e0
 8013464:	240017f8 	.word	0x240017f8
 8013468:	240017c4 	.word	0x240017c4
 801346c:	240017c8 	.word	0x240017c8

08013470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013476:	e019      	b.n	80134ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013478:	f000 fe0c 	bl	8014094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801347c:	4b10      	ldr	r3, [pc, #64]	; (80134c0 <prvCheckTasksWaitingTermination+0x50>)
 801347e:	68db      	ldr	r3, [r3, #12]
 8013480:	68db      	ldr	r3, [r3, #12]
 8013482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	3304      	adds	r3, #4
 8013488:	4618      	mov	r0, r3
 801348a:	f7fe fb83 	bl	8011b94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801348e:	4b0d      	ldr	r3, [pc, #52]	; (80134c4 <prvCheckTasksWaitingTermination+0x54>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	3b01      	subs	r3, #1
 8013494:	4a0b      	ldr	r2, [pc, #44]	; (80134c4 <prvCheckTasksWaitingTermination+0x54>)
 8013496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013498:	4b0b      	ldr	r3, [pc, #44]	; (80134c8 <prvCheckTasksWaitingTermination+0x58>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	3b01      	subs	r3, #1
 801349e:	4a0a      	ldr	r2, [pc, #40]	; (80134c8 <prvCheckTasksWaitingTermination+0x58>)
 80134a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80134a2:	f000 fe27 	bl	80140f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f000 f810 	bl	80134cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80134ac:	4b06      	ldr	r3, [pc, #24]	; (80134c8 <prvCheckTasksWaitingTermination+0x58>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d1e1      	bne.n	8013478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80134b4:	bf00      	nop
 80134b6:	bf00      	nop
 80134b8:	3708      	adds	r7, #8
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	240017e0 	.word	0x240017e0
 80134c4:	2400180c 	.word	0x2400180c
 80134c8:	240017f4 	.word	0x240017f4

080134cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b084      	sub	sp, #16
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d108      	bne.n	80134f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134e2:	4618      	mov	r0, r3
 80134e4:	f000 ffc4 	bl	8014470 <vPortFree>
				vPortFree( pxTCB );
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f000 ffc1 	bl	8014470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80134ee:	e018      	b.n	8013522 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80134f6:	2b01      	cmp	r3, #1
 80134f8:	d103      	bne.n	8013502 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f000 ffb8 	bl	8014470 <vPortFree>
	}
 8013500:	e00f      	b.n	8013522 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013508:	2b02      	cmp	r3, #2
 801350a:	d00a      	beq.n	8013522 <prvDeleteTCB+0x56>
	__asm volatile
 801350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013510:	f383 8811 	msr	BASEPRI, r3
 8013514:	f3bf 8f6f 	isb	sy
 8013518:	f3bf 8f4f 	dsb	sy
 801351c:	60fb      	str	r3, [r7, #12]
}
 801351e:	bf00      	nop
 8013520:	e7fe      	b.n	8013520 <prvDeleteTCB+0x54>
	}
 8013522:	bf00      	nop
 8013524:	3710      	adds	r7, #16
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
	...

0801352c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013532:	4b0c      	ldr	r3, [pc, #48]	; (8013564 <prvResetNextTaskUnblockTime+0x38>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d104      	bne.n	8013546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801353c:	4b0a      	ldr	r3, [pc, #40]	; (8013568 <prvResetNextTaskUnblockTime+0x3c>)
 801353e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013544:	e008      	b.n	8013558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013546:	4b07      	ldr	r3, [pc, #28]	; (8013564 <prvResetNextTaskUnblockTime+0x38>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	68db      	ldr	r3, [r3, #12]
 801354c:	68db      	ldr	r3, [r3, #12]
 801354e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	4a04      	ldr	r2, [pc, #16]	; (8013568 <prvResetNextTaskUnblockTime+0x3c>)
 8013556:	6013      	str	r3, [r2, #0]
}
 8013558:	bf00      	nop
 801355a:	370c      	adds	r7, #12
 801355c:	46bd      	mov	sp, r7
 801355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013562:	4770      	bx	lr
 8013564:	240017c4 	.word	0x240017c4
 8013568:	2400182c 	.word	0x2400182c

0801356c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013572:	4b0b      	ldr	r3, [pc, #44]	; (80135a0 <xTaskGetSchedulerState+0x34>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d102      	bne.n	8013580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801357a:	2301      	movs	r3, #1
 801357c:	607b      	str	r3, [r7, #4]
 801357e:	e008      	b.n	8013592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013580:	4b08      	ldr	r3, [pc, #32]	; (80135a4 <xTaskGetSchedulerState+0x38>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d102      	bne.n	801358e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013588:	2302      	movs	r3, #2
 801358a:	607b      	str	r3, [r7, #4]
 801358c:	e001      	b.n	8013592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801358e:	2300      	movs	r3, #0
 8013590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013592:	687b      	ldr	r3, [r7, #4]
	}
 8013594:	4618      	mov	r0, r3
 8013596:	370c      	adds	r7, #12
 8013598:	46bd      	mov	sp, r7
 801359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359e:	4770      	bx	lr
 80135a0:	24001818 	.word	0x24001818
 80135a4:	24001834 	.word	0x24001834

080135a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b086      	sub	sp, #24
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80135b4:	2300      	movs	r3, #0
 80135b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d056      	beq.n	801366c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80135be:	4b2e      	ldr	r3, [pc, #184]	; (8013678 <xTaskPriorityDisinherit+0xd0>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	693a      	ldr	r2, [r7, #16]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d00a      	beq.n	80135de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80135c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135cc:	f383 8811 	msr	BASEPRI, r3
 80135d0:	f3bf 8f6f 	isb	sy
 80135d4:	f3bf 8f4f 	dsb	sy
 80135d8:	60fb      	str	r3, [r7, #12]
}
 80135da:	bf00      	nop
 80135dc:	e7fe      	b.n	80135dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d10a      	bne.n	80135fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80135e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ea:	f383 8811 	msr	BASEPRI, r3
 80135ee:	f3bf 8f6f 	isb	sy
 80135f2:	f3bf 8f4f 	dsb	sy
 80135f6:	60bb      	str	r3, [r7, #8]
}
 80135f8:	bf00      	nop
 80135fa:	e7fe      	b.n	80135fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013600:	1e5a      	subs	r2, r3, #1
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801360e:	429a      	cmp	r2, r3
 8013610:	d02c      	beq.n	801366c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013616:	2b00      	cmp	r3, #0
 8013618:	d128      	bne.n	801366c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	3304      	adds	r3, #4
 801361e:	4618      	mov	r0, r3
 8013620:	f7fe fab8 	bl	8011b94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013630:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801363c:	4b0f      	ldr	r3, [pc, #60]	; (801367c <xTaskPriorityDisinherit+0xd4>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	429a      	cmp	r2, r3
 8013642:	d903      	bls.n	801364c <xTaskPriorityDisinherit+0xa4>
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013648:	4a0c      	ldr	r2, [pc, #48]	; (801367c <xTaskPriorityDisinherit+0xd4>)
 801364a:	6013      	str	r3, [r2, #0]
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013650:	4613      	mov	r3, r2
 8013652:	009b      	lsls	r3, r3, #2
 8013654:	4413      	add	r3, r2
 8013656:	009b      	lsls	r3, r3, #2
 8013658:	4a09      	ldr	r2, [pc, #36]	; (8013680 <xTaskPriorityDisinherit+0xd8>)
 801365a:	441a      	add	r2, r3
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	3304      	adds	r3, #4
 8013660:	4619      	mov	r1, r3
 8013662:	4610      	mov	r0, r2
 8013664:	f7fe fa39 	bl	8011ada <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013668:	2301      	movs	r3, #1
 801366a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801366c:	697b      	ldr	r3, [r7, #20]
	}
 801366e:	4618      	mov	r0, r3
 8013670:	3718      	adds	r7, #24
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}
 8013676:	bf00      	nop
 8013678:	24001338 	.word	0x24001338
 801367c:	24001814 	.word	0x24001814
 8013680:	2400133c 	.word	0x2400133c

08013684 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8013684:	b480      	push	{r7}
 8013686:	b083      	sub	sp, #12
 8013688:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801368a:	4b09      	ldr	r3, [pc, #36]	; (80136b0 <uxTaskResetEventItemValue+0x2c>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	699b      	ldr	r3, [r3, #24]
 8013690:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013692:	4b07      	ldr	r3, [pc, #28]	; (80136b0 <uxTaskResetEventItemValue+0x2c>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013698:	4b05      	ldr	r3, [pc, #20]	; (80136b0 <uxTaskResetEventItemValue+0x2c>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80136a0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80136a2:	687b      	ldr	r3, [r7, #4]
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	370c      	adds	r7, #12
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr
 80136b0:	24001338 	.word	0x24001338

080136b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80136be:	4b21      	ldr	r3, [pc, #132]	; (8013744 <prvAddCurrentTaskToDelayedList+0x90>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136c4:	4b20      	ldr	r3, [pc, #128]	; (8013748 <prvAddCurrentTaskToDelayedList+0x94>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	3304      	adds	r3, #4
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7fe fa62 	bl	8011b94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136d6:	d10a      	bne.n	80136ee <prvAddCurrentTaskToDelayedList+0x3a>
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d007      	beq.n	80136ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136de:	4b1a      	ldr	r3, [pc, #104]	; (8013748 <prvAddCurrentTaskToDelayedList+0x94>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	3304      	adds	r3, #4
 80136e4:	4619      	mov	r1, r3
 80136e6:	4819      	ldr	r0, [pc, #100]	; (801374c <prvAddCurrentTaskToDelayedList+0x98>)
 80136e8:	f7fe f9f7 	bl	8011ada <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80136ec:	e026      	b.n	801373c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80136ee:	68fa      	ldr	r2, [r7, #12]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	4413      	add	r3, r2
 80136f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80136f6:	4b14      	ldr	r3, [pc, #80]	; (8013748 <prvAddCurrentTaskToDelayedList+0x94>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	68ba      	ldr	r2, [r7, #8]
 80136fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80136fe:	68ba      	ldr	r2, [r7, #8]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	429a      	cmp	r2, r3
 8013704:	d209      	bcs.n	801371a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013706:	4b12      	ldr	r3, [pc, #72]	; (8013750 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013708:	681a      	ldr	r2, [r3, #0]
 801370a:	4b0f      	ldr	r3, [pc, #60]	; (8013748 <prvAddCurrentTaskToDelayedList+0x94>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	3304      	adds	r3, #4
 8013710:	4619      	mov	r1, r3
 8013712:	4610      	mov	r0, r2
 8013714:	f7fe fa05 	bl	8011b22 <vListInsert>
}
 8013718:	e010      	b.n	801373c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801371a:	4b0e      	ldr	r3, [pc, #56]	; (8013754 <prvAddCurrentTaskToDelayedList+0xa0>)
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	4b0a      	ldr	r3, [pc, #40]	; (8013748 <prvAddCurrentTaskToDelayedList+0x94>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	3304      	adds	r3, #4
 8013724:	4619      	mov	r1, r3
 8013726:	4610      	mov	r0, r2
 8013728:	f7fe f9fb 	bl	8011b22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801372c:	4b0a      	ldr	r3, [pc, #40]	; (8013758 <prvAddCurrentTaskToDelayedList+0xa4>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	429a      	cmp	r2, r3
 8013734:	d202      	bcs.n	801373c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013736:	4a08      	ldr	r2, [pc, #32]	; (8013758 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	6013      	str	r3, [r2, #0]
}
 801373c:	bf00      	nop
 801373e:	3710      	adds	r7, #16
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}
 8013744:	24001810 	.word	0x24001810
 8013748:	24001338 	.word	0x24001338
 801374c:	240017f8 	.word	0x240017f8
 8013750:	240017c8 	.word	0x240017c8
 8013754:	240017c4 	.word	0x240017c4
 8013758:	2400182c 	.word	0x2400182c

0801375c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b08a      	sub	sp, #40	; 0x28
 8013760:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013762:	2300      	movs	r3, #0
 8013764:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013766:	f000 fb07 	bl	8013d78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801376a:	4b1c      	ldr	r3, [pc, #112]	; (80137dc <xTimerCreateTimerTask+0x80>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d021      	beq.n	80137b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013772:	2300      	movs	r3, #0
 8013774:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013776:	2300      	movs	r3, #0
 8013778:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801377a:	1d3a      	adds	r2, r7, #4
 801377c:	f107 0108 	add.w	r1, r7, #8
 8013780:	f107 030c 	add.w	r3, r7, #12
 8013784:	4618      	mov	r0, r3
 8013786:	f7fd ff73 	bl	8011670 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801378a:	6879      	ldr	r1, [r7, #4]
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	68fa      	ldr	r2, [r7, #12]
 8013790:	9202      	str	r2, [sp, #8]
 8013792:	9301      	str	r3, [sp, #4]
 8013794:	2302      	movs	r3, #2
 8013796:	9300      	str	r3, [sp, #0]
 8013798:	2300      	movs	r3, #0
 801379a:	460a      	mov	r2, r1
 801379c:	4910      	ldr	r1, [pc, #64]	; (80137e0 <xTimerCreateTimerTask+0x84>)
 801379e:	4811      	ldr	r0, [pc, #68]	; (80137e4 <xTimerCreateTimerTask+0x88>)
 80137a0:	f7fe ff0e 	bl	80125c0 <xTaskCreateStatic>
 80137a4:	4603      	mov	r3, r0
 80137a6:	4a10      	ldr	r2, [pc, #64]	; (80137e8 <xTimerCreateTimerTask+0x8c>)
 80137a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80137aa:	4b0f      	ldr	r3, [pc, #60]	; (80137e8 <xTimerCreateTimerTask+0x8c>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d001      	beq.n	80137b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80137b2:	2301      	movs	r3, #1
 80137b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d10a      	bne.n	80137d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80137bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c0:	f383 8811 	msr	BASEPRI, r3
 80137c4:	f3bf 8f6f 	isb	sy
 80137c8:	f3bf 8f4f 	dsb	sy
 80137cc:	613b      	str	r3, [r7, #16]
}
 80137ce:	bf00      	nop
 80137d0:	e7fe      	b.n	80137d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80137d2:	697b      	ldr	r3, [r7, #20]
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3718      	adds	r7, #24
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	24001868 	.word	0x24001868
 80137e0:	080153b4 	.word	0x080153b4
 80137e4:	08013921 	.word	0x08013921
 80137e8:	2400186c 	.word	0x2400186c

080137ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b08a      	sub	sp, #40	; 0x28
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
 80137f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10a      	bne.n	801381a <xTimerGenericCommand+0x2e>
	__asm volatile
 8013804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013808:	f383 8811 	msr	BASEPRI, r3
 801380c:	f3bf 8f6f 	isb	sy
 8013810:	f3bf 8f4f 	dsb	sy
 8013814:	623b      	str	r3, [r7, #32]
}
 8013816:	bf00      	nop
 8013818:	e7fe      	b.n	8013818 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801381a:	4b1a      	ldr	r3, [pc, #104]	; (8013884 <xTimerGenericCommand+0x98>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d02a      	beq.n	8013878 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	2b05      	cmp	r3, #5
 8013832:	dc18      	bgt.n	8013866 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013834:	f7ff fe9a 	bl	801356c <xTaskGetSchedulerState>
 8013838:	4603      	mov	r3, r0
 801383a:	2b02      	cmp	r3, #2
 801383c:	d109      	bne.n	8013852 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801383e:	4b11      	ldr	r3, [pc, #68]	; (8013884 <xTimerGenericCommand+0x98>)
 8013840:	6818      	ldr	r0, [r3, #0]
 8013842:	f107 0110 	add.w	r1, r7, #16
 8013846:	2300      	movs	r3, #0
 8013848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801384a:	f7fe fad1 	bl	8011df0 <xQueueGenericSend>
 801384e:	6278      	str	r0, [r7, #36]	; 0x24
 8013850:	e012      	b.n	8013878 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013852:	4b0c      	ldr	r3, [pc, #48]	; (8013884 <xTimerGenericCommand+0x98>)
 8013854:	6818      	ldr	r0, [r3, #0]
 8013856:	f107 0110 	add.w	r1, r7, #16
 801385a:	2300      	movs	r3, #0
 801385c:	2200      	movs	r2, #0
 801385e:	f7fe fac7 	bl	8011df0 <xQueueGenericSend>
 8013862:	6278      	str	r0, [r7, #36]	; 0x24
 8013864:	e008      	b.n	8013878 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013866:	4b07      	ldr	r3, [pc, #28]	; (8013884 <xTimerGenericCommand+0x98>)
 8013868:	6818      	ldr	r0, [r3, #0]
 801386a:	f107 0110 	add.w	r1, r7, #16
 801386e:	2300      	movs	r3, #0
 8013870:	683a      	ldr	r2, [r7, #0]
 8013872:	f7fe fbbb 	bl	8011fec <xQueueGenericSendFromISR>
 8013876:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801387a:	4618      	mov	r0, r3
 801387c:	3728      	adds	r7, #40	; 0x28
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	24001868 	.word	0x24001868

08013888 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b088      	sub	sp, #32
 801388c:	af02      	add	r7, sp, #8
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013892:	4b22      	ldr	r3, [pc, #136]	; (801391c <prvProcessExpiredTimer+0x94>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	68db      	ldr	r3, [r3, #12]
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	3304      	adds	r3, #4
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7fe f977 	bl	8011b94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138ac:	f003 0304 	and.w	r3, r3, #4
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d022      	beq.n	80138fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	699a      	ldr	r2, [r3, #24]
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	18d1      	adds	r1, r2, r3
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	683a      	ldr	r2, [r7, #0]
 80138c0:	6978      	ldr	r0, [r7, #20]
 80138c2:	f000 f8d1 	bl	8013a68 <prvInsertTimerInActiveList>
 80138c6:	4603      	mov	r3, r0
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d01f      	beq.n	801390c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80138cc:	2300      	movs	r3, #0
 80138ce:	9300      	str	r3, [sp, #0]
 80138d0:	2300      	movs	r3, #0
 80138d2:	687a      	ldr	r2, [r7, #4]
 80138d4:	2100      	movs	r1, #0
 80138d6:	6978      	ldr	r0, [r7, #20]
 80138d8:	f7ff ff88 	bl	80137ec <xTimerGenericCommand>
 80138dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d113      	bne.n	801390c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80138e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e8:	f383 8811 	msr	BASEPRI, r3
 80138ec:	f3bf 8f6f 	isb	sy
 80138f0:	f3bf 8f4f 	dsb	sy
 80138f4:	60fb      	str	r3, [r7, #12]
}
 80138f6:	bf00      	nop
 80138f8:	e7fe      	b.n	80138f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013900:	f023 0301 	bic.w	r3, r3, #1
 8013904:	b2da      	uxtb	r2, r3
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	6a1b      	ldr	r3, [r3, #32]
 8013910:	6978      	ldr	r0, [r7, #20]
 8013912:	4798      	blx	r3
}
 8013914:	bf00      	nop
 8013916:	3718      	adds	r7, #24
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	24001860 	.word	0x24001860

08013920 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013928:	f107 0308 	add.w	r3, r7, #8
 801392c:	4618      	mov	r0, r3
 801392e:	f000 f857 	bl	80139e0 <prvGetNextExpireTime>
 8013932:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	4619      	mov	r1, r3
 8013938:	68f8      	ldr	r0, [r7, #12]
 801393a:	f000 f803 	bl	8013944 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801393e:	f000 f8d5 	bl	8013aec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013942:	e7f1      	b.n	8013928 <prvTimerTask+0x8>

08013944 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b084      	sub	sp, #16
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801394e:	f7ff f98d 	bl	8012c6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013952:	f107 0308 	add.w	r3, r7, #8
 8013956:	4618      	mov	r0, r3
 8013958:	f000 f866 	bl	8013a28 <prvSampleTimeNow>
 801395c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d130      	bne.n	80139c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013964:	683b      	ldr	r3, [r7, #0]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d10a      	bne.n	8013980 <prvProcessTimerOrBlockTask+0x3c>
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	429a      	cmp	r2, r3
 8013970:	d806      	bhi.n	8013980 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013972:	f7ff f989 	bl	8012c88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013976:	68f9      	ldr	r1, [r7, #12]
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f7ff ff85 	bl	8013888 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801397e:	e024      	b.n	80139ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d008      	beq.n	8013998 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013986:	4b13      	ldr	r3, [pc, #76]	; (80139d4 <prvProcessTimerOrBlockTask+0x90>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d101      	bne.n	8013994 <prvProcessTimerOrBlockTask+0x50>
 8013990:	2301      	movs	r3, #1
 8013992:	e000      	b.n	8013996 <prvProcessTimerOrBlockTask+0x52>
 8013994:	2300      	movs	r3, #0
 8013996:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013998:	4b0f      	ldr	r3, [pc, #60]	; (80139d8 <prvProcessTimerOrBlockTask+0x94>)
 801399a:	6818      	ldr	r0, [r3, #0]
 801399c:	687a      	ldr	r2, [r7, #4]
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	1ad3      	subs	r3, r2, r3
 80139a2:	683a      	ldr	r2, [r7, #0]
 80139a4:	4619      	mov	r1, r3
 80139a6:	f7fe fdd7 	bl	8012558 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80139aa:	f7ff f96d 	bl	8012c88 <xTaskResumeAll>
 80139ae:	4603      	mov	r3, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d10a      	bne.n	80139ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80139b4:	4b09      	ldr	r3, [pc, #36]	; (80139dc <prvProcessTimerOrBlockTask+0x98>)
 80139b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139ba:	601a      	str	r2, [r3, #0]
 80139bc:	f3bf 8f4f 	dsb	sy
 80139c0:	f3bf 8f6f 	isb	sy
}
 80139c4:	e001      	b.n	80139ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80139c6:	f7ff f95f 	bl	8012c88 <xTaskResumeAll>
}
 80139ca:	bf00      	nop
 80139cc:	3710      	adds	r7, #16
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop
 80139d4:	24001864 	.word	0x24001864
 80139d8:	24001868 	.word	0x24001868
 80139dc:	e000ed04 	.word	0xe000ed04

080139e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80139e0:	b480      	push	{r7}
 80139e2:	b085      	sub	sp, #20
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80139e8:	4b0e      	ldr	r3, [pc, #56]	; (8013a24 <prvGetNextExpireTime+0x44>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d101      	bne.n	80139f6 <prvGetNextExpireTime+0x16>
 80139f2:	2201      	movs	r2, #1
 80139f4:	e000      	b.n	80139f8 <prvGetNextExpireTime+0x18>
 80139f6:	2200      	movs	r2, #0
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d105      	bne.n	8013a10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013a04:	4b07      	ldr	r3, [pc, #28]	; (8013a24 <prvGetNextExpireTime+0x44>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	68db      	ldr	r3, [r3, #12]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	60fb      	str	r3, [r7, #12]
 8013a0e:	e001      	b.n	8013a14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013a10:	2300      	movs	r3, #0
 8013a12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013a14:	68fb      	ldr	r3, [r7, #12]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3714      	adds	r7, #20
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	24001860 	.word	0x24001860

08013a28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b084      	sub	sp, #16
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013a30:	f7ff f9c8 	bl	8012dc4 <xTaskGetTickCount>
 8013a34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013a36:	4b0b      	ldr	r3, [pc, #44]	; (8013a64 <prvSampleTimeNow+0x3c>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	68fa      	ldr	r2, [r7, #12]
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d205      	bcs.n	8013a4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013a40:	f000 f936 	bl	8013cb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2201      	movs	r2, #1
 8013a48:	601a      	str	r2, [r3, #0]
 8013a4a:	e002      	b.n	8013a52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013a52:	4a04      	ldr	r2, [pc, #16]	; (8013a64 <prvSampleTimeNow+0x3c>)
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013a58:	68fb      	ldr	r3, [r7, #12]
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3710      	adds	r7, #16
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	24001870 	.word	0x24001870

08013a68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b086      	sub	sp, #24
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
 8013a74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013a76:	2300      	movs	r3, #0
 8013a78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	68ba      	ldr	r2, [r7, #8]
 8013a7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	68fa      	ldr	r2, [r7, #12]
 8013a84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013a86:	68ba      	ldr	r2, [r7, #8]
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d812      	bhi.n	8013ab4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a8e:	687a      	ldr	r2, [r7, #4]
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	1ad2      	subs	r2, r2, r3
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	699b      	ldr	r3, [r3, #24]
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d302      	bcc.n	8013aa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	617b      	str	r3, [r7, #20]
 8013aa0:	e01b      	b.n	8013ada <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013aa2:	4b10      	ldr	r3, [pc, #64]	; (8013ae4 <prvInsertTimerInActiveList+0x7c>)
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	3304      	adds	r3, #4
 8013aaa:	4619      	mov	r1, r3
 8013aac:	4610      	mov	r0, r2
 8013aae:	f7fe f838 	bl	8011b22 <vListInsert>
 8013ab2:	e012      	b.n	8013ada <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d206      	bcs.n	8013aca <prvInsertTimerInActiveList+0x62>
 8013abc:	68ba      	ldr	r2, [r7, #8]
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d302      	bcc.n	8013aca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	617b      	str	r3, [r7, #20]
 8013ac8:	e007      	b.n	8013ada <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013aca:	4b07      	ldr	r3, [pc, #28]	; (8013ae8 <prvInsertTimerInActiveList+0x80>)
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	3304      	adds	r3, #4
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	4610      	mov	r0, r2
 8013ad6:	f7fe f824 	bl	8011b22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013ada:	697b      	ldr	r3, [r7, #20]
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3718      	adds	r7, #24
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	24001864 	.word	0x24001864
 8013ae8:	24001860 	.word	0x24001860

08013aec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b08e      	sub	sp, #56	; 0x38
 8013af0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013af2:	e0ca      	b.n	8013c8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	da18      	bge.n	8013b2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013afa:	1d3b      	adds	r3, r7, #4
 8013afc:	3304      	adds	r3, #4
 8013afe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10a      	bne.n	8013b1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b0a:	f383 8811 	msr	BASEPRI, r3
 8013b0e:	f3bf 8f6f 	isb	sy
 8013b12:	f3bf 8f4f 	dsb	sy
 8013b16:	61fb      	str	r3, [r7, #28]
}
 8013b18:	bf00      	nop
 8013b1a:	e7fe      	b.n	8013b1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b22:	6850      	ldr	r0, [r2, #4]
 8013b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b26:	6892      	ldr	r2, [r2, #8]
 8013b28:	4611      	mov	r1, r2
 8013b2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f2c0 80aa 	blt.w	8013c88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3a:	695b      	ldr	r3, [r3, #20]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d004      	beq.n	8013b4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b42:	3304      	adds	r3, #4
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fe f825 	bl	8011b94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013b4a:	463b      	mov	r3, r7
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7ff ff6b 	bl	8013a28 <prvSampleTimeNow>
 8013b52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2b09      	cmp	r3, #9
 8013b58:	f200 8097 	bhi.w	8013c8a <prvProcessReceivedCommands+0x19e>
 8013b5c:	a201      	add	r2, pc, #4	; (adr r2, 8013b64 <prvProcessReceivedCommands+0x78>)
 8013b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b62:	bf00      	nop
 8013b64:	08013b8d 	.word	0x08013b8d
 8013b68:	08013b8d 	.word	0x08013b8d
 8013b6c:	08013b8d 	.word	0x08013b8d
 8013b70:	08013c01 	.word	0x08013c01
 8013b74:	08013c15 	.word	0x08013c15
 8013b78:	08013c5f 	.word	0x08013c5f
 8013b7c:	08013b8d 	.word	0x08013b8d
 8013b80:	08013b8d 	.word	0x08013b8d
 8013b84:	08013c01 	.word	0x08013c01
 8013b88:	08013c15 	.word	0x08013c15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b92:	f043 0301 	orr.w	r3, r3, #1
 8013b96:	b2da      	uxtb	r2, r3
 8013b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013b9e:	68ba      	ldr	r2, [r7, #8]
 8013ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba2:	699b      	ldr	r3, [r3, #24]
 8013ba4:	18d1      	adds	r1, r2, r3
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bac:	f7ff ff5c 	bl	8013a68 <prvInsertTimerInActiveList>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d069      	beq.n	8013c8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb8:	6a1b      	ldr	r3, [r3, #32]
 8013bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bc4:	f003 0304 	and.w	r3, r3, #4
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d05e      	beq.n	8013c8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013bcc:	68ba      	ldr	r2, [r7, #8]
 8013bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd0:	699b      	ldr	r3, [r3, #24]
 8013bd2:	441a      	add	r2, r3
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	9300      	str	r3, [sp, #0]
 8013bd8:	2300      	movs	r3, #0
 8013bda:	2100      	movs	r1, #0
 8013bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bde:	f7ff fe05 	bl	80137ec <xTimerGenericCommand>
 8013be2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013be4:	6a3b      	ldr	r3, [r7, #32]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d14f      	bne.n	8013c8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bee:	f383 8811 	msr	BASEPRI, r3
 8013bf2:	f3bf 8f6f 	isb	sy
 8013bf6:	f3bf 8f4f 	dsb	sy
 8013bfa:	61bb      	str	r3, [r7, #24]
}
 8013bfc:	bf00      	nop
 8013bfe:	e7fe      	b.n	8013bfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c06:	f023 0301 	bic.w	r3, r3, #1
 8013c0a:	b2da      	uxtb	r2, r3
 8013c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013c12:	e03a      	b.n	8013c8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c1a:	f043 0301 	orr.w	r3, r3, #1
 8013c1e:	b2da      	uxtb	r2, r3
 8013c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013c26:	68ba      	ldr	r2, [r7, #8]
 8013c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2e:	699b      	ldr	r3, [r3, #24]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d10a      	bne.n	8013c4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c38:	f383 8811 	msr	BASEPRI, r3
 8013c3c:	f3bf 8f6f 	isb	sy
 8013c40:	f3bf 8f4f 	dsb	sy
 8013c44:	617b      	str	r3, [r7, #20]
}
 8013c46:	bf00      	nop
 8013c48:	e7fe      	b.n	8013c48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4c:	699a      	ldr	r2, [r3, #24]
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	18d1      	adds	r1, r2, r3
 8013c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c58:	f7ff ff06 	bl	8013a68 <prvInsertTimerInActiveList>
					break;
 8013c5c:	e015      	b.n	8013c8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c64:	f003 0302 	and.w	r3, r3, #2
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d103      	bne.n	8013c74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c6e:	f000 fbff 	bl	8014470 <vPortFree>
 8013c72:	e00a      	b.n	8013c8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c7a:	f023 0301 	bic.w	r3, r3, #1
 8013c7e:	b2da      	uxtb	r2, r3
 8013c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013c86:	e000      	b.n	8013c8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013c88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013c8a:	4b08      	ldr	r3, [pc, #32]	; (8013cac <prvProcessReceivedCommands+0x1c0>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	1d39      	adds	r1, r7, #4
 8013c90:	2200      	movs	r2, #0
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fe fa46 	bl	8012124 <xQueueReceive>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	f47f af2a 	bne.w	8013af4 <prvProcessReceivedCommands+0x8>
	}
}
 8013ca0:	bf00      	nop
 8013ca2:	bf00      	nop
 8013ca4:	3730      	adds	r7, #48	; 0x30
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	24001868 	.word	0x24001868

08013cb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b088      	sub	sp, #32
 8013cb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013cb6:	e048      	b.n	8013d4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013cb8:	4b2d      	ldr	r3, [pc, #180]	; (8013d70 <prvSwitchTimerLists+0xc0>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	68db      	ldr	r3, [r3, #12]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cc2:	4b2b      	ldr	r3, [pc, #172]	; (8013d70 <prvSwitchTimerLists+0xc0>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	68db      	ldr	r3, [r3, #12]
 8013cc8:	68db      	ldr	r3, [r3, #12]
 8013cca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	3304      	adds	r3, #4
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7fd ff5f 	bl	8011b94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	6a1b      	ldr	r3, [r3, #32]
 8013cda:	68f8      	ldr	r0, [r7, #12]
 8013cdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ce4:	f003 0304 	and.w	r3, r3, #4
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d02e      	beq.n	8013d4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	699b      	ldr	r3, [r3, #24]
 8013cf0:	693a      	ldr	r2, [r7, #16]
 8013cf2:	4413      	add	r3, r2
 8013cf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013cf6:	68ba      	ldr	r2, [r7, #8]
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d90e      	bls.n	8013d1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	68fa      	ldr	r2, [r7, #12]
 8013d08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d0a:	4b19      	ldr	r3, [pc, #100]	; (8013d70 <prvSwitchTimerLists+0xc0>)
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	3304      	adds	r3, #4
 8013d12:	4619      	mov	r1, r3
 8013d14:	4610      	mov	r0, r2
 8013d16:	f7fd ff04 	bl	8011b22 <vListInsert>
 8013d1a:	e016      	b.n	8013d4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	9300      	str	r3, [sp, #0]
 8013d20:	2300      	movs	r3, #0
 8013d22:	693a      	ldr	r2, [r7, #16]
 8013d24:	2100      	movs	r1, #0
 8013d26:	68f8      	ldr	r0, [r7, #12]
 8013d28:	f7ff fd60 	bl	80137ec <xTimerGenericCommand>
 8013d2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d10a      	bne.n	8013d4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d38:	f383 8811 	msr	BASEPRI, r3
 8013d3c:	f3bf 8f6f 	isb	sy
 8013d40:	f3bf 8f4f 	dsb	sy
 8013d44:	603b      	str	r3, [r7, #0]
}
 8013d46:	bf00      	nop
 8013d48:	e7fe      	b.n	8013d48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013d4a:	4b09      	ldr	r3, [pc, #36]	; (8013d70 <prvSwitchTimerLists+0xc0>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d1b1      	bne.n	8013cb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013d54:	4b06      	ldr	r3, [pc, #24]	; (8013d70 <prvSwitchTimerLists+0xc0>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013d5a:	4b06      	ldr	r3, [pc, #24]	; (8013d74 <prvSwitchTimerLists+0xc4>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	4a04      	ldr	r2, [pc, #16]	; (8013d70 <prvSwitchTimerLists+0xc0>)
 8013d60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013d62:	4a04      	ldr	r2, [pc, #16]	; (8013d74 <prvSwitchTimerLists+0xc4>)
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	6013      	str	r3, [r2, #0]
}
 8013d68:	bf00      	nop
 8013d6a:	3718      	adds	r7, #24
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	24001860 	.word	0x24001860
 8013d74:	24001864 	.word	0x24001864

08013d78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013d7e:	f000 f989 	bl	8014094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013d82:	4b15      	ldr	r3, [pc, #84]	; (8013dd8 <prvCheckForValidListAndQueue+0x60>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d120      	bne.n	8013dcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013d8a:	4814      	ldr	r0, [pc, #80]	; (8013ddc <prvCheckForValidListAndQueue+0x64>)
 8013d8c:	f7fd fe78 	bl	8011a80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013d90:	4813      	ldr	r0, [pc, #76]	; (8013de0 <prvCheckForValidListAndQueue+0x68>)
 8013d92:	f7fd fe75 	bl	8011a80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013d96:	4b13      	ldr	r3, [pc, #76]	; (8013de4 <prvCheckForValidListAndQueue+0x6c>)
 8013d98:	4a10      	ldr	r2, [pc, #64]	; (8013ddc <prvCheckForValidListAndQueue+0x64>)
 8013d9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013d9c:	4b12      	ldr	r3, [pc, #72]	; (8013de8 <prvCheckForValidListAndQueue+0x70>)
 8013d9e:	4a10      	ldr	r2, [pc, #64]	; (8013de0 <prvCheckForValidListAndQueue+0x68>)
 8013da0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013da2:	2300      	movs	r3, #0
 8013da4:	9300      	str	r3, [sp, #0]
 8013da6:	4b11      	ldr	r3, [pc, #68]	; (8013dec <prvCheckForValidListAndQueue+0x74>)
 8013da8:	4a11      	ldr	r2, [pc, #68]	; (8013df0 <prvCheckForValidListAndQueue+0x78>)
 8013daa:	2110      	movs	r1, #16
 8013dac:	200a      	movs	r0, #10
 8013dae:	f7fd ff83 	bl	8011cb8 <xQueueGenericCreateStatic>
 8013db2:	4603      	mov	r3, r0
 8013db4:	4a08      	ldr	r2, [pc, #32]	; (8013dd8 <prvCheckForValidListAndQueue+0x60>)
 8013db6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013db8:	4b07      	ldr	r3, [pc, #28]	; (8013dd8 <prvCheckForValidListAndQueue+0x60>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d005      	beq.n	8013dcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013dc0:	4b05      	ldr	r3, [pc, #20]	; (8013dd8 <prvCheckForValidListAndQueue+0x60>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	490b      	ldr	r1, [pc, #44]	; (8013df4 <prvCheckForValidListAndQueue+0x7c>)
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7fe fb9c 	bl	8012504 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013dcc:	f000 f992 	bl	80140f4 <vPortExitCritical>
}
 8013dd0:	bf00      	nop
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}
 8013dd6:	bf00      	nop
 8013dd8:	24001868 	.word	0x24001868
 8013ddc:	24001838 	.word	0x24001838
 8013de0:	2400184c 	.word	0x2400184c
 8013de4:	24001860 	.word	0x24001860
 8013de8:	24001864 	.word	0x24001864
 8013dec:	24001914 	.word	0x24001914
 8013df0:	24001874 	.word	0x24001874
 8013df4:	080153bc 	.word	0x080153bc

08013df8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b08a      	sub	sp, #40	; 0x28
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8013e06:	f06f 0301 	mvn.w	r3, #1
 8013e0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013e18:	4b06      	ldr	r3, [pc, #24]	; (8013e34 <xTimerPendFunctionCallFromISR+0x3c>)
 8013e1a:	6818      	ldr	r0, [r3, #0]
 8013e1c:	f107 0114 	add.w	r1, r7, #20
 8013e20:	2300      	movs	r3, #0
 8013e22:	683a      	ldr	r2, [r7, #0]
 8013e24:	f7fe f8e2 	bl	8011fec <xQueueGenericSendFromISR>
 8013e28:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8013e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3728      	adds	r7, #40	; 0x28
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	24001868 	.word	0x24001868

08013e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b085      	sub	sp, #20
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	60f8      	str	r0, [r7, #12]
 8013e40:	60b9      	str	r1, [r7, #8]
 8013e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	3b04      	subs	r3, #4
 8013e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	3b04      	subs	r3, #4
 8013e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	f023 0201 	bic.w	r2, r3, #1
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	3b04      	subs	r3, #4
 8013e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013e68:	4a0c      	ldr	r2, [pc, #48]	; (8013e9c <pxPortInitialiseStack+0x64>)
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	3b14      	subs	r3, #20
 8013e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013e74:	687a      	ldr	r2, [r7, #4]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	3b04      	subs	r3, #4
 8013e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f06f 0202 	mvn.w	r2, #2
 8013e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	3b20      	subs	r3, #32
 8013e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3714      	adds	r7, #20
 8013e94:	46bd      	mov	sp, r7
 8013e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9a:	4770      	bx	lr
 8013e9c:	08013ea1 	.word	0x08013ea1

08013ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b085      	sub	sp, #20
 8013ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013eaa:	4b12      	ldr	r3, [pc, #72]	; (8013ef4 <prvTaskExitError+0x54>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013eb2:	d00a      	beq.n	8013eca <prvTaskExitError+0x2a>
	__asm volatile
 8013eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb8:	f383 8811 	msr	BASEPRI, r3
 8013ebc:	f3bf 8f6f 	isb	sy
 8013ec0:	f3bf 8f4f 	dsb	sy
 8013ec4:	60fb      	str	r3, [r7, #12]
}
 8013ec6:	bf00      	nop
 8013ec8:	e7fe      	b.n	8013ec8 <prvTaskExitError+0x28>
	__asm volatile
 8013eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ece:	f383 8811 	msr	BASEPRI, r3
 8013ed2:	f3bf 8f6f 	isb	sy
 8013ed6:	f3bf 8f4f 	dsb	sy
 8013eda:	60bb      	str	r3, [r7, #8]
}
 8013edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013ede:	bf00      	nop
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d0fc      	beq.n	8013ee0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013ee6:	bf00      	nop
 8013ee8:	bf00      	nop
 8013eea:	3714      	adds	r7, #20
 8013eec:	46bd      	mov	sp, r7
 8013eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef2:	4770      	bx	lr
 8013ef4:	24000098 	.word	0x24000098
	...

08013f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013f00:	4b07      	ldr	r3, [pc, #28]	; (8013f20 <pxCurrentTCBConst2>)
 8013f02:	6819      	ldr	r1, [r3, #0]
 8013f04:	6808      	ldr	r0, [r1, #0]
 8013f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f0a:	f380 8809 	msr	PSP, r0
 8013f0e:	f3bf 8f6f 	isb	sy
 8013f12:	f04f 0000 	mov.w	r0, #0
 8013f16:	f380 8811 	msr	BASEPRI, r0
 8013f1a:	4770      	bx	lr
 8013f1c:	f3af 8000 	nop.w

08013f20 <pxCurrentTCBConst2>:
 8013f20:	24001338 	.word	0x24001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013f24:	bf00      	nop
 8013f26:	bf00      	nop

08013f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013f28:	4808      	ldr	r0, [pc, #32]	; (8013f4c <prvPortStartFirstTask+0x24>)
 8013f2a:	6800      	ldr	r0, [r0, #0]
 8013f2c:	6800      	ldr	r0, [r0, #0]
 8013f2e:	f380 8808 	msr	MSP, r0
 8013f32:	f04f 0000 	mov.w	r0, #0
 8013f36:	f380 8814 	msr	CONTROL, r0
 8013f3a:	b662      	cpsie	i
 8013f3c:	b661      	cpsie	f
 8013f3e:	f3bf 8f4f 	dsb	sy
 8013f42:	f3bf 8f6f 	isb	sy
 8013f46:	df00      	svc	0
 8013f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013f4a:	bf00      	nop
 8013f4c:	e000ed08 	.word	0xe000ed08

08013f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b086      	sub	sp, #24
 8013f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013f56:	4b46      	ldr	r3, [pc, #280]	; (8014070 <xPortStartScheduler+0x120>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	4a46      	ldr	r2, [pc, #280]	; (8014074 <xPortStartScheduler+0x124>)
 8013f5c:	4293      	cmp	r3, r2
 8013f5e:	d10a      	bne.n	8013f76 <xPortStartScheduler+0x26>
	__asm volatile
 8013f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f64:	f383 8811 	msr	BASEPRI, r3
 8013f68:	f3bf 8f6f 	isb	sy
 8013f6c:	f3bf 8f4f 	dsb	sy
 8013f70:	613b      	str	r3, [r7, #16]
}
 8013f72:	bf00      	nop
 8013f74:	e7fe      	b.n	8013f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013f76:	4b3e      	ldr	r3, [pc, #248]	; (8014070 <xPortStartScheduler+0x120>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	4a3f      	ldr	r2, [pc, #252]	; (8014078 <xPortStartScheduler+0x128>)
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	d10a      	bne.n	8013f96 <xPortStartScheduler+0x46>
	__asm volatile
 8013f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f84:	f383 8811 	msr	BASEPRI, r3
 8013f88:	f3bf 8f6f 	isb	sy
 8013f8c:	f3bf 8f4f 	dsb	sy
 8013f90:	60fb      	str	r3, [r7, #12]
}
 8013f92:	bf00      	nop
 8013f94:	e7fe      	b.n	8013f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013f96:	4b39      	ldr	r3, [pc, #228]	; (801407c <xPortStartScheduler+0x12c>)
 8013f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	b2db      	uxtb	r3, r3
 8013fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	22ff      	movs	r2, #255	; 0xff
 8013fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	b2db      	uxtb	r3, r3
 8013fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013fb0:	78fb      	ldrb	r3, [r7, #3]
 8013fb2:	b2db      	uxtb	r3, r3
 8013fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013fb8:	b2da      	uxtb	r2, r3
 8013fba:	4b31      	ldr	r3, [pc, #196]	; (8014080 <xPortStartScheduler+0x130>)
 8013fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013fbe:	4b31      	ldr	r3, [pc, #196]	; (8014084 <xPortStartScheduler+0x134>)
 8013fc0:	2207      	movs	r2, #7
 8013fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013fc4:	e009      	b.n	8013fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013fc6:	4b2f      	ldr	r3, [pc, #188]	; (8014084 <xPortStartScheduler+0x134>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	3b01      	subs	r3, #1
 8013fcc:	4a2d      	ldr	r2, [pc, #180]	; (8014084 <xPortStartScheduler+0x134>)
 8013fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013fd0:	78fb      	ldrb	r3, [r7, #3]
 8013fd2:	b2db      	uxtb	r3, r3
 8013fd4:	005b      	lsls	r3, r3, #1
 8013fd6:	b2db      	uxtb	r3, r3
 8013fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013fda:	78fb      	ldrb	r3, [r7, #3]
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013fe2:	2b80      	cmp	r3, #128	; 0x80
 8013fe4:	d0ef      	beq.n	8013fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013fe6:	4b27      	ldr	r3, [pc, #156]	; (8014084 <xPortStartScheduler+0x134>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	f1c3 0307 	rsb	r3, r3, #7
 8013fee:	2b04      	cmp	r3, #4
 8013ff0:	d00a      	beq.n	8014008 <xPortStartScheduler+0xb8>
	__asm volatile
 8013ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff6:	f383 8811 	msr	BASEPRI, r3
 8013ffa:	f3bf 8f6f 	isb	sy
 8013ffe:	f3bf 8f4f 	dsb	sy
 8014002:	60bb      	str	r3, [r7, #8]
}
 8014004:	bf00      	nop
 8014006:	e7fe      	b.n	8014006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014008:	4b1e      	ldr	r3, [pc, #120]	; (8014084 <xPortStartScheduler+0x134>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	021b      	lsls	r3, r3, #8
 801400e:	4a1d      	ldr	r2, [pc, #116]	; (8014084 <xPortStartScheduler+0x134>)
 8014010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014012:	4b1c      	ldr	r3, [pc, #112]	; (8014084 <xPortStartScheduler+0x134>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801401a:	4a1a      	ldr	r2, [pc, #104]	; (8014084 <xPortStartScheduler+0x134>)
 801401c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	b2da      	uxtb	r2, r3
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014026:	4b18      	ldr	r3, [pc, #96]	; (8014088 <xPortStartScheduler+0x138>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	4a17      	ldr	r2, [pc, #92]	; (8014088 <xPortStartScheduler+0x138>)
 801402c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014032:	4b15      	ldr	r3, [pc, #84]	; (8014088 <xPortStartScheduler+0x138>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	4a14      	ldr	r2, [pc, #80]	; (8014088 <xPortStartScheduler+0x138>)
 8014038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801403c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801403e:	f000 f8dd 	bl	80141fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014042:	4b12      	ldr	r3, [pc, #72]	; (801408c <xPortStartScheduler+0x13c>)
 8014044:	2200      	movs	r2, #0
 8014046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014048:	f000 f8fc 	bl	8014244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801404c:	4b10      	ldr	r3, [pc, #64]	; (8014090 <xPortStartScheduler+0x140>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	4a0f      	ldr	r2, [pc, #60]	; (8014090 <xPortStartScheduler+0x140>)
 8014052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014058:	f7ff ff66 	bl	8013f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801405c:	f7fe ff7c 	bl	8012f58 <vTaskSwitchContext>
	prvTaskExitError();
 8014060:	f7ff ff1e 	bl	8013ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014064:	2300      	movs	r3, #0
}
 8014066:	4618      	mov	r0, r3
 8014068:	3718      	adds	r7, #24
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	e000ed00 	.word	0xe000ed00
 8014074:	410fc271 	.word	0x410fc271
 8014078:	410fc270 	.word	0x410fc270
 801407c:	e000e400 	.word	0xe000e400
 8014080:	24001964 	.word	0x24001964
 8014084:	24001968 	.word	0x24001968
 8014088:	e000ed20 	.word	0xe000ed20
 801408c:	24000098 	.word	0x24000098
 8014090:	e000ef34 	.word	0xe000ef34

08014094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014094:	b480      	push	{r7}
 8014096:	b083      	sub	sp, #12
 8014098:	af00      	add	r7, sp, #0
	__asm volatile
 801409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801409e:	f383 8811 	msr	BASEPRI, r3
 80140a2:	f3bf 8f6f 	isb	sy
 80140a6:	f3bf 8f4f 	dsb	sy
 80140aa:	607b      	str	r3, [r7, #4]
}
 80140ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80140ae:	4b0f      	ldr	r3, [pc, #60]	; (80140ec <vPortEnterCritical+0x58>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	3301      	adds	r3, #1
 80140b4:	4a0d      	ldr	r2, [pc, #52]	; (80140ec <vPortEnterCritical+0x58>)
 80140b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80140b8:	4b0c      	ldr	r3, [pc, #48]	; (80140ec <vPortEnterCritical+0x58>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d10f      	bne.n	80140e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80140c0:	4b0b      	ldr	r3, [pc, #44]	; (80140f0 <vPortEnterCritical+0x5c>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	b2db      	uxtb	r3, r3
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d00a      	beq.n	80140e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80140ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ce:	f383 8811 	msr	BASEPRI, r3
 80140d2:	f3bf 8f6f 	isb	sy
 80140d6:	f3bf 8f4f 	dsb	sy
 80140da:	603b      	str	r3, [r7, #0]
}
 80140dc:	bf00      	nop
 80140de:	e7fe      	b.n	80140de <vPortEnterCritical+0x4a>
	}
}
 80140e0:	bf00      	nop
 80140e2:	370c      	adds	r7, #12
 80140e4:	46bd      	mov	sp, r7
 80140e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ea:	4770      	bx	lr
 80140ec:	24000098 	.word	0x24000098
 80140f0:	e000ed04 	.word	0xe000ed04

080140f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80140f4:	b480      	push	{r7}
 80140f6:	b083      	sub	sp, #12
 80140f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80140fa:	4b12      	ldr	r3, [pc, #72]	; (8014144 <vPortExitCritical+0x50>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d10a      	bne.n	8014118 <vPortExitCritical+0x24>
	__asm volatile
 8014102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014106:	f383 8811 	msr	BASEPRI, r3
 801410a:	f3bf 8f6f 	isb	sy
 801410e:	f3bf 8f4f 	dsb	sy
 8014112:	607b      	str	r3, [r7, #4]
}
 8014114:	bf00      	nop
 8014116:	e7fe      	b.n	8014116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014118:	4b0a      	ldr	r3, [pc, #40]	; (8014144 <vPortExitCritical+0x50>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	3b01      	subs	r3, #1
 801411e:	4a09      	ldr	r2, [pc, #36]	; (8014144 <vPortExitCritical+0x50>)
 8014120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014122:	4b08      	ldr	r3, [pc, #32]	; (8014144 <vPortExitCritical+0x50>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d105      	bne.n	8014136 <vPortExitCritical+0x42>
 801412a:	2300      	movs	r3, #0
 801412c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	f383 8811 	msr	BASEPRI, r3
}
 8014134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014136:	bf00      	nop
 8014138:	370c      	adds	r7, #12
 801413a:	46bd      	mov	sp, r7
 801413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014140:	4770      	bx	lr
 8014142:	bf00      	nop
 8014144:	24000098 	.word	0x24000098
	...

08014150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014150:	f3ef 8009 	mrs	r0, PSP
 8014154:	f3bf 8f6f 	isb	sy
 8014158:	4b15      	ldr	r3, [pc, #84]	; (80141b0 <pxCurrentTCBConst>)
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	f01e 0f10 	tst.w	lr, #16
 8014160:	bf08      	it	eq
 8014162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416a:	6010      	str	r0, [r2, #0]
 801416c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014174:	f380 8811 	msr	BASEPRI, r0
 8014178:	f3bf 8f4f 	dsb	sy
 801417c:	f3bf 8f6f 	isb	sy
 8014180:	f7fe feea 	bl	8012f58 <vTaskSwitchContext>
 8014184:	f04f 0000 	mov.w	r0, #0
 8014188:	f380 8811 	msr	BASEPRI, r0
 801418c:	bc09      	pop	{r0, r3}
 801418e:	6819      	ldr	r1, [r3, #0]
 8014190:	6808      	ldr	r0, [r1, #0]
 8014192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014196:	f01e 0f10 	tst.w	lr, #16
 801419a:	bf08      	it	eq
 801419c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80141a0:	f380 8809 	msr	PSP, r0
 80141a4:	f3bf 8f6f 	isb	sy
 80141a8:	4770      	bx	lr
 80141aa:	bf00      	nop
 80141ac:	f3af 8000 	nop.w

080141b0 <pxCurrentTCBConst>:
 80141b0:	24001338 	.word	0x24001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80141b4:	bf00      	nop
 80141b6:	bf00      	nop

080141b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
	__asm volatile
 80141be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c2:	f383 8811 	msr	BASEPRI, r3
 80141c6:	f3bf 8f6f 	isb	sy
 80141ca:	f3bf 8f4f 	dsb	sy
 80141ce:	607b      	str	r3, [r7, #4]
}
 80141d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80141d2:	f7fe fe07 	bl	8012de4 <xTaskIncrementTick>
 80141d6:	4603      	mov	r3, r0
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d003      	beq.n	80141e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80141dc:	4b06      	ldr	r3, [pc, #24]	; (80141f8 <xPortSysTickHandler+0x40>)
 80141de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141e2:	601a      	str	r2, [r3, #0]
 80141e4:	2300      	movs	r3, #0
 80141e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	f383 8811 	msr	BASEPRI, r3
}
 80141ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80141f0:	bf00      	nop
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	e000ed04 	.word	0xe000ed04

080141fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80141fc:	b480      	push	{r7}
 80141fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014200:	4b0b      	ldr	r3, [pc, #44]	; (8014230 <vPortSetupTimerInterrupt+0x34>)
 8014202:	2200      	movs	r2, #0
 8014204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014206:	4b0b      	ldr	r3, [pc, #44]	; (8014234 <vPortSetupTimerInterrupt+0x38>)
 8014208:	2200      	movs	r2, #0
 801420a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801420c:	4b0a      	ldr	r3, [pc, #40]	; (8014238 <vPortSetupTimerInterrupt+0x3c>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	4a0a      	ldr	r2, [pc, #40]	; (801423c <vPortSetupTimerInterrupt+0x40>)
 8014212:	fba2 2303 	umull	r2, r3, r2, r3
 8014216:	099b      	lsrs	r3, r3, #6
 8014218:	4a09      	ldr	r2, [pc, #36]	; (8014240 <vPortSetupTimerInterrupt+0x44>)
 801421a:	3b01      	subs	r3, #1
 801421c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801421e:	4b04      	ldr	r3, [pc, #16]	; (8014230 <vPortSetupTimerInterrupt+0x34>)
 8014220:	2207      	movs	r2, #7
 8014222:	601a      	str	r2, [r3, #0]
}
 8014224:	bf00      	nop
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop
 8014230:	e000e010 	.word	0xe000e010
 8014234:	e000e018 	.word	0xe000e018
 8014238:	24000088 	.word	0x24000088
 801423c:	10624dd3 	.word	0x10624dd3
 8014240:	e000e014 	.word	0xe000e014

08014244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014254 <vPortEnableVFP+0x10>
 8014248:	6801      	ldr	r1, [r0, #0]
 801424a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801424e:	6001      	str	r1, [r0, #0]
 8014250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014252:	bf00      	nop
 8014254:	e000ed88 	.word	0xe000ed88

08014258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014258:	b480      	push	{r7}
 801425a:	b085      	sub	sp, #20
 801425c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801425e:	f3ef 8305 	mrs	r3, IPSR
 8014262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	2b0f      	cmp	r3, #15
 8014268:	d914      	bls.n	8014294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801426a:	4a17      	ldr	r2, [pc, #92]	; (80142c8 <vPortValidateInterruptPriority+0x70>)
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	4413      	add	r3, r2
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014274:	4b15      	ldr	r3, [pc, #84]	; (80142cc <vPortValidateInterruptPriority+0x74>)
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	7afa      	ldrb	r2, [r7, #11]
 801427a:	429a      	cmp	r2, r3
 801427c:	d20a      	bcs.n	8014294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014282:	f383 8811 	msr	BASEPRI, r3
 8014286:	f3bf 8f6f 	isb	sy
 801428a:	f3bf 8f4f 	dsb	sy
 801428e:	607b      	str	r3, [r7, #4]
}
 8014290:	bf00      	nop
 8014292:	e7fe      	b.n	8014292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014294:	4b0e      	ldr	r3, [pc, #56]	; (80142d0 <vPortValidateInterruptPriority+0x78>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801429c:	4b0d      	ldr	r3, [pc, #52]	; (80142d4 <vPortValidateInterruptPriority+0x7c>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	429a      	cmp	r2, r3
 80142a2:	d90a      	bls.n	80142ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80142a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a8:	f383 8811 	msr	BASEPRI, r3
 80142ac:	f3bf 8f6f 	isb	sy
 80142b0:	f3bf 8f4f 	dsb	sy
 80142b4:	603b      	str	r3, [r7, #0]
}
 80142b6:	bf00      	nop
 80142b8:	e7fe      	b.n	80142b8 <vPortValidateInterruptPriority+0x60>
	}
 80142ba:	bf00      	nop
 80142bc:	3714      	adds	r7, #20
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr
 80142c6:	bf00      	nop
 80142c8:	e000e3f0 	.word	0xe000e3f0
 80142cc:	24001964 	.word	0x24001964
 80142d0:	e000ed0c 	.word	0xe000ed0c
 80142d4:	24001968 	.word	0x24001968

080142d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b08a      	sub	sp, #40	; 0x28
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80142e0:	2300      	movs	r3, #0
 80142e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80142e4:	f7fe fcc2 	bl	8012c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80142e8:	4b5b      	ldr	r3, [pc, #364]	; (8014458 <pvPortMalloc+0x180>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d101      	bne.n	80142f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80142f0:	f000 f920 	bl	8014534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80142f4:	4b59      	ldr	r3, [pc, #356]	; (801445c <pvPortMalloc+0x184>)
 80142f6:	681a      	ldr	r2, [r3, #0]
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	4013      	ands	r3, r2
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	f040 8093 	bne.w	8014428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d01d      	beq.n	8014344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014308:	2208      	movs	r2, #8
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	4413      	add	r3, r2
 801430e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f003 0307 	and.w	r3, r3, #7
 8014316:	2b00      	cmp	r3, #0
 8014318:	d014      	beq.n	8014344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f023 0307 	bic.w	r3, r3, #7
 8014320:	3308      	adds	r3, #8
 8014322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f003 0307 	and.w	r3, r3, #7
 801432a:	2b00      	cmp	r3, #0
 801432c:	d00a      	beq.n	8014344 <pvPortMalloc+0x6c>
	__asm volatile
 801432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014332:	f383 8811 	msr	BASEPRI, r3
 8014336:	f3bf 8f6f 	isb	sy
 801433a:	f3bf 8f4f 	dsb	sy
 801433e:	617b      	str	r3, [r7, #20]
}
 8014340:	bf00      	nop
 8014342:	e7fe      	b.n	8014342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d06e      	beq.n	8014428 <pvPortMalloc+0x150>
 801434a:	4b45      	ldr	r3, [pc, #276]	; (8014460 <pvPortMalloc+0x188>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	687a      	ldr	r2, [r7, #4]
 8014350:	429a      	cmp	r2, r3
 8014352:	d869      	bhi.n	8014428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014354:	4b43      	ldr	r3, [pc, #268]	; (8014464 <pvPortMalloc+0x18c>)
 8014356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014358:	4b42      	ldr	r3, [pc, #264]	; (8014464 <pvPortMalloc+0x18c>)
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801435e:	e004      	b.n	801436a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	429a      	cmp	r2, r3
 8014372:	d903      	bls.n	801437c <pvPortMalloc+0xa4>
 8014374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d1f1      	bne.n	8014360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801437c:	4b36      	ldr	r3, [pc, #216]	; (8014458 <pvPortMalloc+0x180>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014382:	429a      	cmp	r2, r3
 8014384:	d050      	beq.n	8014428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014386:	6a3b      	ldr	r3, [r7, #32]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2208      	movs	r2, #8
 801438c:	4413      	add	r3, r2
 801438e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014392:	681a      	ldr	r2, [r3, #0]
 8014394:	6a3b      	ldr	r3, [r7, #32]
 8014396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439a:	685a      	ldr	r2, [r3, #4]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	1ad2      	subs	r2, r2, r3
 80143a0:	2308      	movs	r3, #8
 80143a2:	005b      	lsls	r3, r3, #1
 80143a4:	429a      	cmp	r2, r3
 80143a6:	d91f      	bls.n	80143e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80143a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	4413      	add	r3, r2
 80143ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80143b0:	69bb      	ldr	r3, [r7, #24]
 80143b2:	f003 0307 	and.w	r3, r3, #7
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d00a      	beq.n	80143d0 <pvPortMalloc+0xf8>
	__asm volatile
 80143ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143be:	f383 8811 	msr	BASEPRI, r3
 80143c2:	f3bf 8f6f 	isb	sy
 80143c6:	f3bf 8f4f 	dsb	sy
 80143ca:	613b      	str	r3, [r7, #16]
}
 80143cc:	bf00      	nop
 80143ce:	e7fe      	b.n	80143ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80143d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d2:	685a      	ldr	r2, [r3, #4]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	1ad2      	subs	r2, r2, r3
 80143d8:	69bb      	ldr	r3, [r7, #24]
 80143da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80143dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80143e2:	69b8      	ldr	r0, [r7, #24]
 80143e4:	f000 f908 	bl	80145f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80143e8:	4b1d      	ldr	r3, [pc, #116]	; (8014460 <pvPortMalloc+0x188>)
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	1ad3      	subs	r3, r2, r3
 80143f2:	4a1b      	ldr	r2, [pc, #108]	; (8014460 <pvPortMalloc+0x188>)
 80143f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80143f6:	4b1a      	ldr	r3, [pc, #104]	; (8014460 <pvPortMalloc+0x188>)
 80143f8:	681a      	ldr	r2, [r3, #0]
 80143fa:	4b1b      	ldr	r3, [pc, #108]	; (8014468 <pvPortMalloc+0x190>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	429a      	cmp	r2, r3
 8014400:	d203      	bcs.n	801440a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014402:	4b17      	ldr	r3, [pc, #92]	; (8014460 <pvPortMalloc+0x188>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	4a18      	ldr	r2, [pc, #96]	; (8014468 <pvPortMalloc+0x190>)
 8014408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801440c:	685a      	ldr	r2, [r3, #4]
 801440e:	4b13      	ldr	r3, [pc, #76]	; (801445c <pvPortMalloc+0x184>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	431a      	orrs	r2, r3
 8014414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441a:	2200      	movs	r2, #0
 801441c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801441e:	4b13      	ldr	r3, [pc, #76]	; (801446c <pvPortMalloc+0x194>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	3301      	adds	r3, #1
 8014424:	4a11      	ldr	r2, [pc, #68]	; (801446c <pvPortMalloc+0x194>)
 8014426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014428:	f7fe fc2e 	bl	8012c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	f003 0307 	and.w	r3, r3, #7
 8014432:	2b00      	cmp	r3, #0
 8014434:	d00a      	beq.n	801444c <pvPortMalloc+0x174>
	__asm volatile
 8014436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801443a:	f383 8811 	msr	BASEPRI, r3
 801443e:	f3bf 8f6f 	isb	sy
 8014442:	f3bf 8f4f 	dsb	sy
 8014446:	60fb      	str	r3, [r7, #12]
}
 8014448:	bf00      	nop
 801444a:	e7fe      	b.n	801444a <pvPortMalloc+0x172>
	return pvReturn;
 801444c:	69fb      	ldr	r3, [r7, #28]
}
 801444e:	4618      	mov	r0, r3
 8014450:	3728      	adds	r7, #40	; 0x28
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	24005574 	.word	0x24005574
 801445c:	24005588 	.word	0x24005588
 8014460:	24005578 	.word	0x24005578
 8014464:	2400556c 	.word	0x2400556c
 8014468:	2400557c 	.word	0x2400557c
 801446c:	24005580 	.word	0x24005580

08014470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b086      	sub	sp, #24
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d04d      	beq.n	801451e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014482:	2308      	movs	r3, #8
 8014484:	425b      	negs	r3, r3
 8014486:	697a      	ldr	r2, [r7, #20]
 8014488:	4413      	add	r3, r2
 801448a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801448c:	697b      	ldr	r3, [r7, #20]
 801448e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	685a      	ldr	r2, [r3, #4]
 8014494:	4b24      	ldr	r3, [pc, #144]	; (8014528 <vPortFree+0xb8>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	4013      	ands	r3, r2
 801449a:	2b00      	cmp	r3, #0
 801449c:	d10a      	bne.n	80144b4 <vPortFree+0x44>
	__asm volatile
 801449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a2:	f383 8811 	msr	BASEPRI, r3
 80144a6:	f3bf 8f6f 	isb	sy
 80144aa:	f3bf 8f4f 	dsb	sy
 80144ae:	60fb      	str	r3, [r7, #12]
}
 80144b0:	bf00      	nop
 80144b2:	e7fe      	b.n	80144b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d00a      	beq.n	80144d2 <vPortFree+0x62>
	__asm volatile
 80144bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c0:	f383 8811 	msr	BASEPRI, r3
 80144c4:	f3bf 8f6f 	isb	sy
 80144c8:	f3bf 8f4f 	dsb	sy
 80144cc:	60bb      	str	r3, [r7, #8]
}
 80144ce:	bf00      	nop
 80144d0:	e7fe      	b.n	80144d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	685a      	ldr	r2, [r3, #4]
 80144d6:	4b14      	ldr	r3, [pc, #80]	; (8014528 <vPortFree+0xb8>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	4013      	ands	r3, r2
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d01e      	beq.n	801451e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80144e0:	693b      	ldr	r3, [r7, #16]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d11a      	bne.n	801451e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	685a      	ldr	r2, [r3, #4]
 80144ec:	4b0e      	ldr	r3, [pc, #56]	; (8014528 <vPortFree+0xb8>)
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	43db      	mvns	r3, r3
 80144f2:	401a      	ands	r2, r3
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80144f8:	f7fe fbb8 	bl	8012c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	685a      	ldr	r2, [r3, #4]
 8014500:	4b0a      	ldr	r3, [pc, #40]	; (801452c <vPortFree+0xbc>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	4413      	add	r3, r2
 8014506:	4a09      	ldr	r2, [pc, #36]	; (801452c <vPortFree+0xbc>)
 8014508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801450a:	6938      	ldr	r0, [r7, #16]
 801450c:	f000 f874 	bl	80145f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014510:	4b07      	ldr	r3, [pc, #28]	; (8014530 <vPortFree+0xc0>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	3301      	adds	r3, #1
 8014516:	4a06      	ldr	r2, [pc, #24]	; (8014530 <vPortFree+0xc0>)
 8014518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801451a:	f7fe fbb5 	bl	8012c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801451e:	bf00      	nop
 8014520:	3718      	adds	r7, #24
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	24005588 	.word	0x24005588
 801452c:	24005578 	.word	0x24005578
 8014530:	24005584 	.word	0x24005584

08014534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014534:	b480      	push	{r7}
 8014536:	b085      	sub	sp, #20
 8014538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801453a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801453e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014540:	4b27      	ldr	r3, [pc, #156]	; (80145e0 <prvHeapInit+0xac>)
 8014542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f003 0307 	and.w	r3, r3, #7
 801454a:	2b00      	cmp	r3, #0
 801454c:	d00c      	beq.n	8014568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	3307      	adds	r3, #7
 8014552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	f023 0307 	bic.w	r3, r3, #7
 801455a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801455c:	68ba      	ldr	r2, [r7, #8]
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	1ad3      	subs	r3, r2, r3
 8014562:	4a1f      	ldr	r2, [pc, #124]	; (80145e0 <prvHeapInit+0xac>)
 8014564:	4413      	add	r3, r2
 8014566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801456c:	4a1d      	ldr	r2, [pc, #116]	; (80145e4 <prvHeapInit+0xb0>)
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014572:	4b1c      	ldr	r3, [pc, #112]	; (80145e4 <prvHeapInit+0xb0>)
 8014574:	2200      	movs	r2, #0
 8014576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	68ba      	ldr	r2, [r7, #8]
 801457c:	4413      	add	r3, r2
 801457e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014580:	2208      	movs	r2, #8
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	1a9b      	subs	r3, r3, r2
 8014586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	f023 0307 	bic.w	r3, r3, #7
 801458e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	4a15      	ldr	r2, [pc, #84]	; (80145e8 <prvHeapInit+0xb4>)
 8014594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014596:	4b14      	ldr	r3, [pc, #80]	; (80145e8 <prvHeapInit+0xb4>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	2200      	movs	r2, #0
 801459c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801459e:	4b12      	ldr	r3, [pc, #72]	; (80145e8 <prvHeapInit+0xb4>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2200      	movs	r2, #0
 80145a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	68fa      	ldr	r2, [r7, #12]
 80145ae:	1ad2      	subs	r2, r2, r3
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80145b4:	4b0c      	ldr	r3, [pc, #48]	; (80145e8 <prvHeapInit+0xb4>)
 80145b6:	681a      	ldr	r2, [r3, #0]
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	685b      	ldr	r3, [r3, #4]
 80145c0:	4a0a      	ldr	r2, [pc, #40]	; (80145ec <prvHeapInit+0xb8>)
 80145c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	4a09      	ldr	r2, [pc, #36]	; (80145f0 <prvHeapInit+0xbc>)
 80145ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80145cc:	4b09      	ldr	r3, [pc, #36]	; (80145f4 <prvHeapInit+0xc0>)
 80145ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80145d2:	601a      	str	r2, [r3, #0]
}
 80145d4:	bf00      	nop
 80145d6:	3714      	adds	r7, #20
 80145d8:	46bd      	mov	sp, r7
 80145da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145de:	4770      	bx	lr
 80145e0:	2400196c 	.word	0x2400196c
 80145e4:	2400556c 	.word	0x2400556c
 80145e8:	24005574 	.word	0x24005574
 80145ec:	2400557c 	.word	0x2400557c
 80145f0:	24005578 	.word	0x24005578
 80145f4:	24005588 	.word	0x24005588

080145f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80145f8:	b480      	push	{r7}
 80145fa:	b085      	sub	sp, #20
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014600:	4b28      	ldr	r3, [pc, #160]	; (80146a4 <prvInsertBlockIntoFreeList+0xac>)
 8014602:	60fb      	str	r3, [r7, #12]
 8014604:	e002      	b.n	801460c <prvInsertBlockIntoFreeList+0x14>
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	60fb      	str	r3, [r7, #12]
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	687a      	ldr	r2, [r7, #4]
 8014612:	429a      	cmp	r2, r3
 8014614:	d8f7      	bhi.n	8014606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	68ba      	ldr	r2, [r7, #8]
 8014620:	4413      	add	r3, r2
 8014622:	687a      	ldr	r2, [r7, #4]
 8014624:	429a      	cmp	r2, r3
 8014626:	d108      	bne.n	801463a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	685a      	ldr	r2, [r3, #4]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	685b      	ldr	r3, [r3, #4]
 8014630:	441a      	add	r2, r3
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	685b      	ldr	r3, [r3, #4]
 8014642:	68ba      	ldr	r2, [r7, #8]
 8014644:	441a      	add	r2, r3
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	429a      	cmp	r2, r3
 801464c:	d118      	bne.n	8014680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	681a      	ldr	r2, [r3, #0]
 8014652:	4b15      	ldr	r3, [pc, #84]	; (80146a8 <prvInsertBlockIntoFreeList+0xb0>)
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	429a      	cmp	r2, r3
 8014658:	d00d      	beq.n	8014676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	685a      	ldr	r2, [r3, #4]
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	441a      	add	r2, r3
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	681a      	ldr	r2, [r3, #0]
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	601a      	str	r2, [r3, #0]
 8014674:	e008      	b.n	8014688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014676:	4b0c      	ldr	r3, [pc, #48]	; (80146a8 <prvInsertBlockIntoFreeList+0xb0>)
 8014678:	681a      	ldr	r2, [r3, #0]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	601a      	str	r2, [r3, #0]
 801467e:	e003      	b.n	8014688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	681a      	ldr	r2, [r3, #0]
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	429a      	cmp	r2, r3
 801468e:	d002      	beq.n	8014696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014696:	bf00      	nop
 8014698:	3714      	adds	r7, #20
 801469a:	46bd      	mov	sp, r7
 801469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a0:	4770      	bx	lr
 80146a2:	bf00      	nop
 80146a4:	2400556c 	.word	0x2400556c
 80146a8:	24005574 	.word	0x24005574

080146ac <__errno>:
 80146ac:	4b01      	ldr	r3, [pc, #4]	; (80146b4 <__errno+0x8>)
 80146ae:	6818      	ldr	r0, [r3, #0]
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop
 80146b4:	2400009c 	.word	0x2400009c

080146b8 <__libc_init_array>:
 80146b8:	b570      	push	{r4, r5, r6, lr}
 80146ba:	4d0d      	ldr	r5, [pc, #52]	; (80146f0 <__libc_init_array+0x38>)
 80146bc:	4c0d      	ldr	r4, [pc, #52]	; (80146f4 <__libc_init_array+0x3c>)
 80146be:	1b64      	subs	r4, r4, r5
 80146c0:	10a4      	asrs	r4, r4, #2
 80146c2:	2600      	movs	r6, #0
 80146c4:	42a6      	cmp	r6, r4
 80146c6:	d109      	bne.n	80146dc <__libc_init_array+0x24>
 80146c8:	4d0b      	ldr	r5, [pc, #44]	; (80146f8 <__libc_init_array+0x40>)
 80146ca:	4c0c      	ldr	r4, [pc, #48]	; (80146fc <__libc_init_array+0x44>)
 80146cc:	f000 fd3c 	bl	8015148 <_init>
 80146d0:	1b64      	subs	r4, r4, r5
 80146d2:	10a4      	asrs	r4, r4, #2
 80146d4:	2600      	movs	r6, #0
 80146d6:	42a6      	cmp	r6, r4
 80146d8:	d105      	bne.n	80146e6 <__libc_init_array+0x2e>
 80146da:	bd70      	pop	{r4, r5, r6, pc}
 80146dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80146e0:	4798      	blx	r3
 80146e2:	3601      	adds	r6, #1
 80146e4:	e7ee      	b.n	80146c4 <__libc_init_array+0xc>
 80146e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80146ea:	4798      	blx	r3
 80146ec:	3601      	adds	r6, #1
 80146ee:	e7f2      	b.n	80146d6 <__libc_init_array+0x1e>
 80146f0:	08015548 	.word	0x08015548
 80146f4:	08015548 	.word	0x08015548
 80146f8:	08015548 	.word	0x08015548
 80146fc:	0801554c 	.word	0x0801554c

08014700 <malloc>:
 8014700:	4b02      	ldr	r3, [pc, #8]	; (801470c <malloc+0xc>)
 8014702:	4601      	mov	r1, r0
 8014704:	6818      	ldr	r0, [r3, #0]
 8014706:	f000 b88d 	b.w	8014824 <_malloc_r>
 801470a:	bf00      	nop
 801470c:	2400009c 	.word	0x2400009c

08014710 <free>:
 8014710:	4b02      	ldr	r3, [pc, #8]	; (801471c <free+0xc>)
 8014712:	4601      	mov	r1, r0
 8014714:	6818      	ldr	r0, [r3, #0]
 8014716:	f000 b819 	b.w	801474c <_free_r>
 801471a:	bf00      	nop
 801471c:	2400009c 	.word	0x2400009c

08014720 <memcpy>:
 8014720:	440a      	add	r2, r1
 8014722:	4291      	cmp	r1, r2
 8014724:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014728:	d100      	bne.n	801472c <memcpy+0xc>
 801472a:	4770      	bx	lr
 801472c:	b510      	push	{r4, lr}
 801472e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014736:	4291      	cmp	r1, r2
 8014738:	d1f9      	bne.n	801472e <memcpy+0xe>
 801473a:	bd10      	pop	{r4, pc}

0801473c <memset>:
 801473c:	4402      	add	r2, r0
 801473e:	4603      	mov	r3, r0
 8014740:	4293      	cmp	r3, r2
 8014742:	d100      	bne.n	8014746 <memset+0xa>
 8014744:	4770      	bx	lr
 8014746:	f803 1b01 	strb.w	r1, [r3], #1
 801474a:	e7f9      	b.n	8014740 <memset+0x4>

0801474c <_free_r>:
 801474c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801474e:	2900      	cmp	r1, #0
 8014750:	d044      	beq.n	80147dc <_free_r+0x90>
 8014752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014756:	9001      	str	r0, [sp, #4]
 8014758:	2b00      	cmp	r3, #0
 801475a:	f1a1 0404 	sub.w	r4, r1, #4
 801475e:	bfb8      	it	lt
 8014760:	18e4      	addlt	r4, r4, r3
 8014762:	f000 fc39 	bl	8014fd8 <__malloc_lock>
 8014766:	4a1e      	ldr	r2, [pc, #120]	; (80147e0 <_free_r+0x94>)
 8014768:	9801      	ldr	r0, [sp, #4]
 801476a:	6813      	ldr	r3, [r2, #0]
 801476c:	b933      	cbnz	r3, 801477c <_free_r+0x30>
 801476e:	6063      	str	r3, [r4, #4]
 8014770:	6014      	str	r4, [r2, #0]
 8014772:	b003      	add	sp, #12
 8014774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014778:	f000 bc34 	b.w	8014fe4 <__malloc_unlock>
 801477c:	42a3      	cmp	r3, r4
 801477e:	d908      	bls.n	8014792 <_free_r+0x46>
 8014780:	6825      	ldr	r5, [r4, #0]
 8014782:	1961      	adds	r1, r4, r5
 8014784:	428b      	cmp	r3, r1
 8014786:	bf01      	itttt	eq
 8014788:	6819      	ldreq	r1, [r3, #0]
 801478a:	685b      	ldreq	r3, [r3, #4]
 801478c:	1949      	addeq	r1, r1, r5
 801478e:	6021      	streq	r1, [r4, #0]
 8014790:	e7ed      	b.n	801476e <_free_r+0x22>
 8014792:	461a      	mov	r2, r3
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	b10b      	cbz	r3, 801479c <_free_r+0x50>
 8014798:	42a3      	cmp	r3, r4
 801479a:	d9fa      	bls.n	8014792 <_free_r+0x46>
 801479c:	6811      	ldr	r1, [r2, #0]
 801479e:	1855      	adds	r5, r2, r1
 80147a0:	42a5      	cmp	r5, r4
 80147a2:	d10b      	bne.n	80147bc <_free_r+0x70>
 80147a4:	6824      	ldr	r4, [r4, #0]
 80147a6:	4421      	add	r1, r4
 80147a8:	1854      	adds	r4, r2, r1
 80147aa:	42a3      	cmp	r3, r4
 80147ac:	6011      	str	r1, [r2, #0]
 80147ae:	d1e0      	bne.n	8014772 <_free_r+0x26>
 80147b0:	681c      	ldr	r4, [r3, #0]
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	6053      	str	r3, [r2, #4]
 80147b6:	4421      	add	r1, r4
 80147b8:	6011      	str	r1, [r2, #0]
 80147ba:	e7da      	b.n	8014772 <_free_r+0x26>
 80147bc:	d902      	bls.n	80147c4 <_free_r+0x78>
 80147be:	230c      	movs	r3, #12
 80147c0:	6003      	str	r3, [r0, #0]
 80147c2:	e7d6      	b.n	8014772 <_free_r+0x26>
 80147c4:	6825      	ldr	r5, [r4, #0]
 80147c6:	1961      	adds	r1, r4, r5
 80147c8:	428b      	cmp	r3, r1
 80147ca:	bf04      	itt	eq
 80147cc:	6819      	ldreq	r1, [r3, #0]
 80147ce:	685b      	ldreq	r3, [r3, #4]
 80147d0:	6063      	str	r3, [r4, #4]
 80147d2:	bf04      	itt	eq
 80147d4:	1949      	addeq	r1, r1, r5
 80147d6:	6021      	streq	r1, [r4, #0]
 80147d8:	6054      	str	r4, [r2, #4]
 80147da:	e7ca      	b.n	8014772 <_free_r+0x26>
 80147dc:	b003      	add	sp, #12
 80147de:	bd30      	pop	{r4, r5, pc}
 80147e0:	2400558c 	.word	0x2400558c

080147e4 <sbrk_aligned>:
 80147e4:	b570      	push	{r4, r5, r6, lr}
 80147e6:	4e0e      	ldr	r6, [pc, #56]	; (8014820 <sbrk_aligned+0x3c>)
 80147e8:	460c      	mov	r4, r1
 80147ea:	6831      	ldr	r1, [r6, #0]
 80147ec:	4605      	mov	r5, r0
 80147ee:	b911      	cbnz	r1, 80147f6 <sbrk_aligned+0x12>
 80147f0:	f000 f902 	bl	80149f8 <_sbrk_r>
 80147f4:	6030      	str	r0, [r6, #0]
 80147f6:	4621      	mov	r1, r4
 80147f8:	4628      	mov	r0, r5
 80147fa:	f000 f8fd 	bl	80149f8 <_sbrk_r>
 80147fe:	1c43      	adds	r3, r0, #1
 8014800:	d00a      	beq.n	8014818 <sbrk_aligned+0x34>
 8014802:	1cc4      	adds	r4, r0, #3
 8014804:	f024 0403 	bic.w	r4, r4, #3
 8014808:	42a0      	cmp	r0, r4
 801480a:	d007      	beq.n	801481c <sbrk_aligned+0x38>
 801480c:	1a21      	subs	r1, r4, r0
 801480e:	4628      	mov	r0, r5
 8014810:	f000 f8f2 	bl	80149f8 <_sbrk_r>
 8014814:	3001      	adds	r0, #1
 8014816:	d101      	bne.n	801481c <sbrk_aligned+0x38>
 8014818:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801481c:	4620      	mov	r0, r4
 801481e:	bd70      	pop	{r4, r5, r6, pc}
 8014820:	24005590 	.word	0x24005590

08014824 <_malloc_r>:
 8014824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014828:	1ccd      	adds	r5, r1, #3
 801482a:	f025 0503 	bic.w	r5, r5, #3
 801482e:	3508      	adds	r5, #8
 8014830:	2d0c      	cmp	r5, #12
 8014832:	bf38      	it	cc
 8014834:	250c      	movcc	r5, #12
 8014836:	2d00      	cmp	r5, #0
 8014838:	4607      	mov	r7, r0
 801483a:	db01      	blt.n	8014840 <_malloc_r+0x1c>
 801483c:	42a9      	cmp	r1, r5
 801483e:	d905      	bls.n	801484c <_malloc_r+0x28>
 8014840:	230c      	movs	r3, #12
 8014842:	603b      	str	r3, [r7, #0]
 8014844:	2600      	movs	r6, #0
 8014846:	4630      	mov	r0, r6
 8014848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801484c:	4e2e      	ldr	r6, [pc, #184]	; (8014908 <_malloc_r+0xe4>)
 801484e:	f000 fbc3 	bl	8014fd8 <__malloc_lock>
 8014852:	6833      	ldr	r3, [r6, #0]
 8014854:	461c      	mov	r4, r3
 8014856:	bb34      	cbnz	r4, 80148a6 <_malloc_r+0x82>
 8014858:	4629      	mov	r1, r5
 801485a:	4638      	mov	r0, r7
 801485c:	f7ff ffc2 	bl	80147e4 <sbrk_aligned>
 8014860:	1c43      	adds	r3, r0, #1
 8014862:	4604      	mov	r4, r0
 8014864:	d14d      	bne.n	8014902 <_malloc_r+0xde>
 8014866:	6834      	ldr	r4, [r6, #0]
 8014868:	4626      	mov	r6, r4
 801486a:	2e00      	cmp	r6, #0
 801486c:	d140      	bne.n	80148f0 <_malloc_r+0xcc>
 801486e:	6823      	ldr	r3, [r4, #0]
 8014870:	4631      	mov	r1, r6
 8014872:	4638      	mov	r0, r7
 8014874:	eb04 0803 	add.w	r8, r4, r3
 8014878:	f000 f8be 	bl	80149f8 <_sbrk_r>
 801487c:	4580      	cmp	r8, r0
 801487e:	d13a      	bne.n	80148f6 <_malloc_r+0xd2>
 8014880:	6821      	ldr	r1, [r4, #0]
 8014882:	3503      	adds	r5, #3
 8014884:	1a6d      	subs	r5, r5, r1
 8014886:	f025 0503 	bic.w	r5, r5, #3
 801488a:	3508      	adds	r5, #8
 801488c:	2d0c      	cmp	r5, #12
 801488e:	bf38      	it	cc
 8014890:	250c      	movcc	r5, #12
 8014892:	4629      	mov	r1, r5
 8014894:	4638      	mov	r0, r7
 8014896:	f7ff ffa5 	bl	80147e4 <sbrk_aligned>
 801489a:	3001      	adds	r0, #1
 801489c:	d02b      	beq.n	80148f6 <_malloc_r+0xd2>
 801489e:	6823      	ldr	r3, [r4, #0]
 80148a0:	442b      	add	r3, r5
 80148a2:	6023      	str	r3, [r4, #0]
 80148a4:	e00e      	b.n	80148c4 <_malloc_r+0xa0>
 80148a6:	6822      	ldr	r2, [r4, #0]
 80148a8:	1b52      	subs	r2, r2, r5
 80148aa:	d41e      	bmi.n	80148ea <_malloc_r+0xc6>
 80148ac:	2a0b      	cmp	r2, #11
 80148ae:	d916      	bls.n	80148de <_malloc_r+0xba>
 80148b0:	1961      	adds	r1, r4, r5
 80148b2:	42a3      	cmp	r3, r4
 80148b4:	6025      	str	r5, [r4, #0]
 80148b6:	bf18      	it	ne
 80148b8:	6059      	strne	r1, [r3, #4]
 80148ba:	6863      	ldr	r3, [r4, #4]
 80148bc:	bf08      	it	eq
 80148be:	6031      	streq	r1, [r6, #0]
 80148c0:	5162      	str	r2, [r4, r5]
 80148c2:	604b      	str	r3, [r1, #4]
 80148c4:	4638      	mov	r0, r7
 80148c6:	f104 060b 	add.w	r6, r4, #11
 80148ca:	f000 fb8b 	bl	8014fe4 <__malloc_unlock>
 80148ce:	f026 0607 	bic.w	r6, r6, #7
 80148d2:	1d23      	adds	r3, r4, #4
 80148d4:	1af2      	subs	r2, r6, r3
 80148d6:	d0b6      	beq.n	8014846 <_malloc_r+0x22>
 80148d8:	1b9b      	subs	r3, r3, r6
 80148da:	50a3      	str	r3, [r4, r2]
 80148dc:	e7b3      	b.n	8014846 <_malloc_r+0x22>
 80148de:	6862      	ldr	r2, [r4, #4]
 80148e0:	42a3      	cmp	r3, r4
 80148e2:	bf0c      	ite	eq
 80148e4:	6032      	streq	r2, [r6, #0]
 80148e6:	605a      	strne	r2, [r3, #4]
 80148e8:	e7ec      	b.n	80148c4 <_malloc_r+0xa0>
 80148ea:	4623      	mov	r3, r4
 80148ec:	6864      	ldr	r4, [r4, #4]
 80148ee:	e7b2      	b.n	8014856 <_malloc_r+0x32>
 80148f0:	4634      	mov	r4, r6
 80148f2:	6876      	ldr	r6, [r6, #4]
 80148f4:	e7b9      	b.n	801486a <_malloc_r+0x46>
 80148f6:	230c      	movs	r3, #12
 80148f8:	603b      	str	r3, [r7, #0]
 80148fa:	4638      	mov	r0, r7
 80148fc:	f000 fb72 	bl	8014fe4 <__malloc_unlock>
 8014900:	e7a1      	b.n	8014846 <_malloc_r+0x22>
 8014902:	6025      	str	r5, [r4, #0]
 8014904:	e7de      	b.n	80148c4 <_malloc_r+0xa0>
 8014906:	bf00      	nop
 8014908:	2400558c 	.word	0x2400558c

0801490c <_puts_r>:
 801490c:	b570      	push	{r4, r5, r6, lr}
 801490e:	460e      	mov	r6, r1
 8014910:	4605      	mov	r5, r0
 8014912:	b118      	cbz	r0, 801491c <_puts_r+0x10>
 8014914:	6983      	ldr	r3, [r0, #24]
 8014916:	b90b      	cbnz	r3, 801491c <_puts_r+0x10>
 8014918:	f000 fa58 	bl	8014dcc <__sinit>
 801491c:	69ab      	ldr	r3, [r5, #24]
 801491e:	68ac      	ldr	r4, [r5, #8]
 8014920:	b913      	cbnz	r3, 8014928 <_puts_r+0x1c>
 8014922:	4628      	mov	r0, r5
 8014924:	f000 fa52 	bl	8014dcc <__sinit>
 8014928:	4b2c      	ldr	r3, [pc, #176]	; (80149dc <_puts_r+0xd0>)
 801492a:	429c      	cmp	r4, r3
 801492c:	d120      	bne.n	8014970 <_puts_r+0x64>
 801492e:	686c      	ldr	r4, [r5, #4]
 8014930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014932:	07db      	lsls	r3, r3, #31
 8014934:	d405      	bmi.n	8014942 <_puts_r+0x36>
 8014936:	89a3      	ldrh	r3, [r4, #12]
 8014938:	0598      	lsls	r0, r3, #22
 801493a:	d402      	bmi.n	8014942 <_puts_r+0x36>
 801493c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801493e:	f000 fae3 	bl	8014f08 <__retarget_lock_acquire_recursive>
 8014942:	89a3      	ldrh	r3, [r4, #12]
 8014944:	0719      	lsls	r1, r3, #28
 8014946:	d51d      	bpl.n	8014984 <_puts_r+0x78>
 8014948:	6923      	ldr	r3, [r4, #16]
 801494a:	b1db      	cbz	r3, 8014984 <_puts_r+0x78>
 801494c:	3e01      	subs	r6, #1
 801494e:	68a3      	ldr	r3, [r4, #8]
 8014950:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014954:	3b01      	subs	r3, #1
 8014956:	60a3      	str	r3, [r4, #8]
 8014958:	bb39      	cbnz	r1, 80149aa <_puts_r+0x9e>
 801495a:	2b00      	cmp	r3, #0
 801495c:	da38      	bge.n	80149d0 <_puts_r+0xc4>
 801495e:	4622      	mov	r2, r4
 8014960:	210a      	movs	r1, #10
 8014962:	4628      	mov	r0, r5
 8014964:	f000 f858 	bl	8014a18 <__swbuf_r>
 8014968:	3001      	adds	r0, #1
 801496a:	d011      	beq.n	8014990 <_puts_r+0x84>
 801496c:	250a      	movs	r5, #10
 801496e:	e011      	b.n	8014994 <_puts_r+0x88>
 8014970:	4b1b      	ldr	r3, [pc, #108]	; (80149e0 <_puts_r+0xd4>)
 8014972:	429c      	cmp	r4, r3
 8014974:	d101      	bne.n	801497a <_puts_r+0x6e>
 8014976:	68ac      	ldr	r4, [r5, #8]
 8014978:	e7da      	b.n	8014930 <_puts_r+0x24>
 801497a:	4b1a      	ldr	r3, [pc, #104]	; (80149e4 <_puts_r+0xd8>)
 801497c:	429c      	cmp	r4, r3
 801497e:	bf08      	it	eq
 8014980:	68ec      	ldreq	r4, [r5, #12]
 8014982:	e7d5      	b.n	8014930 <_puts_r+0x24>
 8014984:	4621      	mov	r1, r4
 8014986:	4628      	mov	r0, r5
 8014988:	f000 f898 	bl	8014abc <__swsetup_r>
 801498c:	2800      	cmp	r0, #0
 801498e:	d0dd      	beq.n	801494c <_puts_r+0x40>
 8014990:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014996:	07da      	lsls	r2, r3, #31
 8014998:	d405      	bmi.n	80149a6 <_puts_r+0x9a>
 801499a:	89a3      	ldrh	r3, [r4, #12]
 801499c:	059b      	lsls	r3, r3, #22
 801499e:	d402      	bmi.n	80149a6 <_puts_r+0x9a>
 80149a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149a2:	f000 fab2 	bl	8014f0a <__retarget_lock_release_recursive>
 80149a6:	4628      	mov	r0, r5
 80149a8:	bd70      	pop	{r4, r5, r6, pc}
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	da04      	bge.n	80149b8 <_puts_r+0xac>
 80149ae:	69a2      	ldr	r2, [r4, #24]
 80149b0:	429a      	cmp	r2, r3
 80149b2:	dc06      	bgt.n	80149c2 <_puts_r+0xb6>
 80149b4:	290a      	cmp	r1, #10
 80149b6:	d004      	beq.n	80149c2 <_puts_r+0xb6>
 80149b8:	6823      	ldr	r3, [r4, #0]
 80149ba:	1c5a      	adds	r2, r3, #1
 80149bc:	6022      	str	r2, [r4, #0]
 80149be:	7019      	strb	r1, [r3, #0]
 80149c0:	e7c5      	b.n	801494e <_puts_r+0x42>
 80149c2:	4622      	mov	r2, r4
 80149c4:	4628      	mov	r0, r5
 80149c6:	f000 f827 	bl	8014a18 <__swbuf_r>
 80149ca:	3001      	adds	r0, #1
 80149cc:	d1bf      	bne.n	801494e <_puts_r+0x42>
 80149ce:	e7df      	b.n	8014990 <_puts_r+0x84>
 80149d0:	6823      	ldr	r3, [r4, #0]
 80149d2:	250a      	movs	r5, #10
 80149d4:	1c5a      	adds	r2, r3, #1
 80149d6:	6022      	str	r2, [r4, #0]
 80149d8:	701d      	strb	r5, [r3, #0]
 80149da:	e7db      	b.n	8014994 <_puts_r+0x88>
 80149dc:	08015500 	.word	0x08015500
 80149e0:	08015520 	.word	0x08015520
 80149e4:	080154e0 	.word	0x080154e0

080149e8 <puts>:
 80149e8:	4b02      	ldr	r3, [pc, #8]	; (80149f4 <puts+0xc>)
 80149ea:	4601      	mov	r1, r0
 80149ec:	6818      	ldr	r0, [r3, #0]
 80149ee:	f7ff bf8d 	b.w	801490c <_puts_r>
 80149f2:	bf00      	nop
 80149f4:	2400009c 	.word	0x2400009c

080149f8 <_sbrk_r>:
 80149f8:	b538      	push	{r3, r4, r5, lr}
 80149fa:	4d06      	ldr	r5, [pc, #24]	; (8014a14 <_sbrk_r+0x1c>)
 80149fc:	2300      	movs	r3, #0
 80149fe:	4604      	mov	r4, r0
 8014a00:	4608      	mov	r0, r1
 8014a02:	602b      	str	r3, [r5, #0]
 8014a04:	f7ee fc7e 	bl	8003304 <_sbrk>
 8014a08:	1c43      	adds	r3, r0, #1
 8014a0a:	d102      	bne.n	8014a12 <_sbrk_r+0x1a>
 8014a0c:	682b      	ldr	r3, [r5, #0]
 8014a0e:	b103      	cbz	r3, 8014a12 <_sbrk_r+0x1a>
 8014a10:	6023      	str	r3, [r4, #0]
 8014a12:	bd38      	pop	{r3, r4, r5, pc}
 8014a14:	24005598 	.word	0x24005598

08014a18 <__swbuf_r>:
 8014a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a1a:	460e      	mov	r6, r1
 8014a1c:	4614      	mov	r4, r2
 8014a1e:	4605      	mov	r5, r0
 8014a20:	b118      	cbz	r0, 8014a2a <__swbuf_r+0x12>
 8014a22:	6983      	ldr	r3, [r0, #24]
 8014a24:	b90b      	cbnz	r3, 8014a2a <__swbuf_r+0x12>
 8014a26:	f000 f9d1 	bl	8014dcc <__sinit>
 8014a2a:	4b21      	ldr	r3, [pc, #132]	; (8014ab0 <__swbuf_r+0x98>)
 8014a2c:	429c      	cmp	r4, r3
 8014a2e:	d12b      	bne.n	8014a88 <__swbuf_r+0x70>
 8014a30:	686c      	ldr	r4, [r5, #4]
 8014a32:	69a3      	ldr	r3, [r4, #24]
 8014a34:	60a3      	str	r3, [r4, #8]
 8014a36:	89a3      	ldrh	r3, [r4, #12]
 8014a38:	071a      	lsls	r2, r3, #28
 8014a3a:	d52f      	bpl.n	8014a9c <__swbuf_r+0x84>
 8014a3c:	6923      	ldr	r3, [r4, #16]
 8014a3e:	b36b      	cbz	r3, 8014a9c <__swbuf_r+0x84>
 8014a40:	6923      	ldr	r3, [r4, #16]
 8014a42:	6820      	ldr	r0, [r4, #0]
 8014a44:	1ac0      	subs	r0, r0, r3
 8014a46:	6963      	ldr	r3, [r4, #20]
 8014a48:	b2f6      	uxtb	r6, r6
 8014a4a:	4283      	cmp	r3, r0
 8014a4c:	4637      	mov	r7, r6
 8014a4e:	dc04      	bgt.n	8014a5a <__swbuf_r+0x42>
 8014a50:	4621      	mov	r1, r4
 8014a52:	4628      	mov	r0, r5
 8014a54:	f000 f926 	bl	8014ca4 <_fflush_r>
 8014a58:	bb30      	cbnz	r0, 8014aa8 <__swbuf_r+0x90>
 8014a5a:	68a3      	ldr	r3, [r4, #8]
 8014a5c:	3b01      	subs	r3, #1
 8014a5e:	60a3      	str	r3, [r4, #8]
 8014a60:	6823      	ldr	r3, [r4, #0]
 8014a62:	1c5a      	adds	r2, r3, #1
 8014a64:	6022      	str	r2, [r4, #0]
 8014a66:	701e      	strb	r6, [r3, #0]
 8014a68:	6963      	ldr	r3, [r4, #20]
 8014a6a:	3001      	adds	r0, #1
 8014a6c:	4283      	cmp	r3, r0
 8014a6e:	d004      	beq.n	8014a7a <__swbuf_r+0x62>
 8014a70:	89a3      	ldrh	r3, [r4, #12]
 8014a72:	07db      	lsls	r3, r3, #31
 8014a74:	d506      	bpl.n	8014a84 <__swbuf_r+0x6c>
 8014a76:	2e0a      	cmp	r6, #10
 8014a78:	d104      	bne.n	8014a84 <__swbuf_r+0x6c>
 8014a7a:	4621      	mov	r1, r4
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	f000 f911 	bl	8014ca4 <_fflush_r>
 8014a82:	b988      	cbnz	r0, 8014aa8 <__swbuf_r+0x90>
 8014a84:	4638      	mov	r0, r7
 8014a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a88:	4b0a      	ldr	r3, [pc, #40]	; (8014ab4 <__swbuf_r+0x9c>)
 8014a8a:	429c      	cmp	r4, r3
 8014a8c:	d101      	bne.n	8014a92 <__swbuf_r+0x7a>
 8014a8e:	68ac      	ldr	r4, [r5, #8]
 8014a90:	e7cf      	b.n	8014a32 <__swbuf_r+0x1a>
 8014a92:	4b09      	ldr	r3, [pc, #36]	; (8014ab8 <__swbuf_r+0xa0>)
 8014a94:	429c      	cmp	r4, r3
 8014a96:	bf08      	it	eq
 8014a98:	68ec      	ldreq	r4, [r5, #12]
 8014a9a:	e7ca      	b.n	8014a32 <__swbuf_r+0x1a>
 8014a9c:	4621      	mov	r1, r4
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	f000 f80c 	bl	8014abc <__swsetup_r>
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	d0cb      	beq.n	8014a40 <__swbuf_r+0x28>
 8014aa8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014aac:	e7ea      	b.n	8014a84 <__swbuf_r+0x6c>
 8014aae:	bf00      	nop
 8014ab0:	08015500 	.word	0x08015500
 8014ab4:	08015520 	.word	0x08015520
 8014ab8:	080154e0 	.word	0x080154e0

08014abc <__swsetup_r>:
 8014abc:	4b32      	ldr	r3, [pc, #200]	; (8014b88 <__swsetup_r+0xcc>)
 8014abe:	b570      	push	{r4, r5, r6, lr}
 8014ac0:	681d      	ldr	r5, [r3, #0]
 8014ac2:	4606      	mov	r6, r0
 8014ac4:	460c      	mov	r4, r1
 8014ac6:	b125      	cbz	r5, 8014ad2 <__swsetup_r+0x16>
 8014ac8:	69ab      	ldr	r3, [r5, #24]
 8014aca:	b913      	cbnz	r3, 8014ad2 <__swsetup_r+0x16>
 8014acc:	4628      	mov	r0, r5
 8014ace:	f000 f97d 	bl	8014dcc <__sinit>
 8014ad2:	4b2e      	ldr	r3, [pc, #184]	; (8014b8c <__swsetup_r+0xd0>)
 8014ad4:	429c      	cmp	r4, r3
 8014ad6:	d10f      	bne.n	8014af8 <__swsetup_r+0x3c>
 8014ad8:	686c      	ldr	r4, [r5, #4]
 8014ada:	89a3      	ldrh	r3, [r4, #12]
 8014adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ae0:	0719      	lsls	r1, r3, #28
 8014ae2:	d42c      	bmi.n	8014b3e <__swsetup_r+0x82>
 8014ae4:	06dd      	lsls	r5, r3, #27
 8014ae6:	d411      	bmi.n	8014b0c <__swsetup_r+0x50>
 8014ae8:	2309      	movs	r3, #9
 8014aea:	6033      	str	r3, [r6, #0]
 8014aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014af0:	81a3      	strh	r3, [r4, #12]
 8014af2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014af6:	e03e      	b.n	8014b76 <__swsetup_r+0xba>
 8014af8:	4b25      	ldr	r3, [pc, #148]	; (8014b90 <__swsetup_r+0xd4>)
 8014afa:	429c      	cmp	r4, r3
 8014afc:	d101      	bne.n	8014b02 <__swsetup_r+0x46>
 8014afe:	68ac      	ldr	r4, [r5, #8]
 8014b00:	e7eb      	b.n	8014ada <__swsetup_r+0x1e>
 8014b02:	4b24      	ldr	r3, [pc, #144]	; (8014b94 <__swsetup_r+0xd8>)
 8014b04:	429c      	cmp	r4, r3
 8014b06:	bf08      	it	eq
 8014b08:	68ec      	ldreq	r4, [r5, #12]
 8014b0a:	e7e6      	b.n	8014ada <__swsetup_r+0x1e>
 8014b0c:	0758      	lsls	r0, r3, #29
 8014b0e:	d512      	bpl.n	8014b36 <__swsetup_r+0x7a>
 8014b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b12:	b141      	cbz	r1, 8014b26 <__swsetup_r+0x6a>
 8014b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b18:	4299      	cmp	r1, r3
 8014b1a:	d002      	beq.n	8014b22 <__swsetup_r+0x66>
 8014b1c:	4630      	mov	r0, r6
 8014b1e:	f7ff fe15 	bl	801474c <_free_r>
 8014b22:	2300      	movs	r3, #0
 8014b24:	6363      	str	r3, [r4, #52]	; 0x34
 8014b26:	89a3      	ldrh	r3, [r4, #12]
 8014b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b2c:	81a3      	strh	r3, [r4, #12]
 8014b2e:	2300      	movs	r3, #0
 8014b30:	6063      	str	r3, [r4, #4]
 8014b32:	6923      	ldr	r3, [r4, #16]
 8014b34:	6023      	str	r3, [r4, #0]
 8014b36:	89a3      	ldrh	r3, [r4, #12]
 8014b38:	f043 0308 	orr.w	r3, r3, #8
 8014b3c:	81a3      	strh	r3, [r4, #12]
 8014b3e:	6923      	ldr	r3, [r4, #16]
 8014b40:	b94b      	cbnz	r3, 8014b56 <__swsetup_r+0x9a>
 8014b42:	89a3      	ldrh	r3, [r4, #12]
 8014b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b4c:	d003      	beq.n	8014b56 <__swsetup_r+0x9a>
 8014b4e:	4621      	mov	r1, r4
 8014b50:	4630      	mov	r0, r6
 8014b52:	f000 fa01 	bl	8014f58 <__smakebuf_r>
 8014b56:	89a0      	ldrh	r0, [r4, #12]
 8014b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b5c:	f010 0301 	ands.w	r3, r0, #1
 8014b60:	d00a      	beq.n	8014b78 <__swsetup_r+0xbc>
 8014b62:	2300      	movs	r3, #0
 8014b64:	60a3      	str	r3, [r4, #8]
 8014b66:	6963      	ldr	r3, [r4, #20]
 8014b68:	425b      	negs	r3, r3
 8014b6a:	61a3      	str	r3, [r4, #24]
 8014b6c:	6923      	ldr	r3, [r4, #16]
 8014b6e:	b943      	cbnz	r3, 8014b82 <__swsetup_r+0xc6>
 8014b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b74:	d1ba      	bne.n	8014aec <__swsetup_r+0x30>
 8014b76:	bd70      	pop	{r4, r5, r6, pc}
 8014b78:	0781      	lsls	r1, r0, #30
 8014b7a:	bf58      	it	pl
 8014b7c:	6963      	ldrpl	r3, [r4, #20]
 8014b7e:	60a3      	str	r3, [r4, #8]
 8014b80:	e7f4      	b.n	8014b6c <__swsetup_r+0xb0>
 8014b82:	2000      	movs	r0, #0
 8014b84:	e7f7      	b.n	8014b76 <__swsetup_r+0xba>
 8014b86:	bf00      	nop
 8014b88:	2400009c 	.word	0x2400009c
 8014b8c:	08015500 	.word	0x08015500
 8014b90:	08015520 	.word	0x08015520
 8014b94:	080154e0 	.word	0x080154e0

08014b98 <__sflush_r>:
 8014b98:	898a      	ldrh	r2, [r1, #12]
 8014b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b9e:	4605      	mov	r5, r0
 8014ba0:	0710      	lsls	r0, r2, #28
 8014ba2:	460c      	mov	r4, r1
 8014ba4:	d458      	bmi.n	8014c58 <__sflush_r+0xc0>
 8014ba6:	684b      	ldr	r3, [r1, #4]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	dc05      	bgt.n	8014bb8 <__sflush_r+0x20>
 8014bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	dc02      	bgt.n	8014bb8 <__sflush_r+0x20>
 8014bb2:	2000      	movs	r0, #0
 8014bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014bba:	2e00      	cmp	r6, #0
 8014bbc:	d0f9      	beq.n	8014bb2 <__sflush_r+0x1a>
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014bc4:	682f      	ldr	r7, [r5, #0]
 8014bc6:	602b      	str	r3, [r5, #0]
 8014bc8:	d032      	beq.n	8014c30 <__sflush_r+0x98>
 8014bca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014bcc:	89a3      	ldrh	r3, [r4, #12]
 8014bce:	075a      	lsls	r2, r3, #29
 8014bd0:	d505      	bpl.n	8014bde <__sflush_r+0x46>
 8014bd2:	6863      	ldr	r3, [r4, #4]
 8014bd4:	1ac0      	subs	r0, r0, r3
 8014bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014bd8:	b10b      	cbz	r3, 8014bde <__sflush_r+0x46>
 8014bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014bdc:	1ac0      	subs	r0, r0, r3
 8014bde:	2300      	movs	r3, #0
 8014be0:	4602      	mov	r2, r0
 8014be2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014be4:	6a21      	ldr	r1, [r4, #32]
 8014be6:	4628      	mov	r0, r5
 8014be8:	47b0      	blx	r6
 8014bea:	1c43      	adds	r3, r0, #1
 8014bec:	89a3      	ldrh	r3, [r4, #12]
 8014bee:	d106      	bne.n	8014bfe <__sflush_r+0x66>
 8014bf0:	6829      	ldr	r1, [r5, #0]
 8014bf2:	291d      	cmp	r1, #29
 8014bf4:	d82c      	bhi.n	8014c50 <__sflush_r+0xb8>
 8014bf6:	4a2a      	ldr	r2, [pc, #168]	; (8014ca0 <__sflush_r+0x108>)
 8014bf8:	40ca      	lsrs	r2, r1
 8014bfa:	07d6      	lsls	r6, r2, #31
 8014bfc:	d528      	bpl.n	8014c50 <__sflush_r+0xb8>
 8014bfe:	2200      	movs	r2, #0
 8014c00:	6062      	str	r2, [r4, #4]
 8014c02:	04d9      	lsls	r1, r3, #19
 8014c04:	6922      	ldr	r2, [r4, #16]
 8014c06:	6022      	str	r2, [r4, #0]
 8014c08:	d504      	bpl.n	8014c14 <__sflush_r+0x7c>
 8014c0a:	1c42      	adds	r2, r0, #1
 8014c0c:	d101      	bne.n	8014c12 <__sflush_r+0x7a>
 8014c0e:	682b      	ldr	r3, [r5, #0]
 8014c10:	b903      	cbnz	r3, 8014c14 <__sflush_r+0x7c>
 8014c12:	6560      	str	r0, [r4, #84]	; 0x54
 8014c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c16:	602f      	str	r7, [r5, #0]
 8014c18:	2900      	cmp	r1, #0
 8014c1a:	d0ca      	beq.n	8014bb2 <__sflush_r+0x1a>
 8014c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c20:	4299      	cmp	r1, r3
 8014c22:	d002      	beq.n	8014c2a <__sflush_r+0x92>
 8014c24:	4628      	mov	r0, r5
 8014c26:	f7ff fd91 	bl	801474c <_free_r>
 8014c2a:	2000      	movs	r0, #0
 8014c2c:	6360      	str	r0, [r4, #52]	; 0x34
 8014c2e:	e7c1      	b.n	8014bb4 <__sflush_r+0x1c>
 8014c30:	6a21      	ldr	r1, [r4, #32]
 8014c32:	2301      	movs	r3, #1
 8014c34:	4628      	mov	r0, r5
 8014c36:	47b0      	blx	r6
 8014c38:	1c41      	adds	r1, r0, #1
 8014c3a:	d1c7      	bne.n	8014bcc <__sflush_r+0x34>
 8014c3c:	682b      	ldr	r3, [r5, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d0c4      	beq.n	8014bcc <__sflush_r+0x34>
 8014c42:	2b1d      	cmp	r3, #29
 8014c44:	d001      	beq.n	8014c4a <__sflush_r+0xb2>
 8014c46:	2b16      	cmp	r3, #22
 8014c48:	d101      	bne.n	8014c4e <__sflush_r+0xb6>
 8014c4a:	602f      	str	r7, [r5, #0]
 8014c4c:	e7b1      	b.n	8014bb2 <__sflush_r+0x1a>
 8014c4e:	89a3      	ldrh	r3, [r4, #12]
 8014c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c54:	81a3      	strh	r3, [r4, #12]
 8014c56:	e7ad      	b.n	8014bb4 <__sflush_r+0x1c>
 8014c58:	690f      	ldr	r7, [r1, #16]
 8014c5a:	2f00      	cmp	r7, #0
 8014c5c:	d0a9      	beq.n	8014bb2 <__sflush_r+0x1a>
 8014c5e:	0793      	lsls	r3, r2, #30
 8014c60:	680e      	ldr	r6, [r1, #0]
 8014c62:	bf08      	it	eq
 8014c64:	694b      	ldreq	r3, [r1, #20]
 8014c66:	600f      	str	r7, [r1, #0]
 8014c68:	bf18      	it	ne
 8014c6a:	2300      	movne	r3, #0
 8014c6c:	eba6 0807 	sub.w	r8, r6, r7
 8014c70:	608b      	str	r3, [r1, #8]
 8014c72:	f1b8 0f00 	cmp.w	r8, #0
 8014c76:	dd9c      	ble.n	8014bb2 <__sflush_r+0x1a>
 8014c78:	6a21      	ldr	r1, [r4, #32]
 8014c7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014c7c:	4643      	mov	r3, r8
 8014c7e:	463a      	mov	r2, r7
 8014c80:	4628      	mov	r0, r5
 8014c82:	47b0      	blx	r6
 8014c84:	2800      	cmp	r0, #0
 8014c86:	dc06      	bgt.n	8014c96 <__sflush_r+0xfe>
 8014c88:	89a3      	ldrh	r3, [r4, #12]
 8014c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c8e:	81a3      	strh	r3, [r4, #12]
 8014c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c94:	e78e      	b.n	8014bb4 <__sflush_r+0x1c>
 8014c96:	4407      	add	r7, r0
 8014c98:	eba8 0800 	sub.w	r8, r8, r0
 8014c9c:	e7e9      	b.n	8014c72 <__sflush_r+0xda>
 8014c9e:	bf00      	nop
 8014ca0:	20400001 	.word	0x20400001

08014ca4 <_fflush_r>:
 8014ca4:	b538      	push	{r3, r4, r5, lr}
 8014ca6:	690b      	ldr	r3, [r1, #16]
 8014ca8:	4605      	mov	r5, r0
 8014caa:	460c      	mov	r4, r1
 8014cac:	b913      	cbnz	r3, 8014cb4 <_fflush_r+0x10>
 8014cae:	2500      	movs	r5, #0
 8014cb0:	4628      	mov	r0, r5
 8014cb2:	bd38      	pop	{r3, r4, r5, pc}
 8014cb4:	b118      	cbz	r0, 8014cbe <_fflush_r+0x1a>
 8014cb6:	6983      	ldr	r3, [r0, #24]
 8014cb8:	b90b      	cbnz	r3, 8014cbe <_fflush_r+0x1a>
 8014cba:	f000 f887 	bl	8014dcc <__sinit>
 8014cbe:	4b14      	ldr	r3, [pc, #80]	; (8014d10 <_fflush_r+0x6c>)
 8014cc0:	429c      	cmp	r4, r3
 8014cc2:	d11b      	bne.n	8014cfc <_fflush_r+0x58>
 8014cc4:	686c      	ldr	r4, [r5, #4]
 8014cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d0ef      	beq.n	8014cae <_fflush_r+0xa>
 8014cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014cd0:	07d0      	lsls	r0, r2, #31
 8014cd2:	d404      	bmi.n	8014cde <_fflush_r+0x3a>
 8014cd4:	0599      	lsls	r1, r3, #22
 8014cd6:	d402      	bmi.n	8014cde <_fflush_r+0x3a>
 8014cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cda:	f000 f915 	bl	8014f08 <__retarget_lock_acquire_recursive>
 8014cde:	4628      	mov	r0, r5
 8014ce0:	4621      	mov	r1, r4
 8014ce2:	f7ff ff59 	bl	8014b98 <__sflush_r>
 8014ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ce8:	07da      	lsls	r2, r3, #31
 8014cea:	4605      	mov	r5, r0
 8014cec:	d4e0      	bmi.n	8014cb0 <_fflush_r+0xc>
 8014cee:	89a3      	ldrh	r3, [r4, #12]
 8014cf0:	059b      	lsls	r3, r3, #22
 8014cf2:	d4dd      	bmi.n	8014cb0 <_fflush_r+0xc>
 8014cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cf6:	f000 f908 	bl	8014f0a <__retarget_lock_release_recursive>
 8014cfa:	e7d9      	b.n	8014cb0 <_fflush_r+0xc>
 8014cfc:	4b05      	ldr	r3, [pc, #20]	; (8014d14 <_fflush_r+0x70>)
 8014cfe:	429c      	cmp	r4, r3
 8014d00:	d101      	bne.n	8014d06 <_fflush_r+0x62>
 8014d02:	68ac      	ldr	r4, [r5, #8]
 8014d04:	e7df      	b.n	8014cc6 <_fflush_r+0x22>
 8014d06:	4b04      	ldr	r3, [pc, #16]	; (8014d18 <_fflush_r+0x74>)
 8014d08:	429c      	cmp	r4, r3
 8014d0a:	bf08      	it	eq
 8014d0c:	68ec      	ldreq	r4, [r5, #12]
 8014d0e:	e7da      	b.n	8014cc6 <_fflush_r+0x22>
 8014d10:	08015500 	.word	0x08015500
 8014d14:	08015520 	.word	0x08015520
 8014d18:	080154e0 	.word	0x080154e0

08014d1c <std>:
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	b510      	push	{r4, lr}
 8014d20:	4604      	mov	r4, r0
 8014d22:	e9c0 3300 	strd	r3, r3, [r0]
 8014d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014d2a:	6083      	str	r3, [r0, #8]
 8014d2c:	8181      	strh	r1, [r0, #12]
 8014d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8014d30:	81c2      	strh	r2, [r0, #14]
 8014d32:	6183      	str	r3, [r0, #24]
 8014d34:	4619      	mov	r1, r3
 8014d36:	2208      	movs	r2, #8
 8014d38:	305c      	adds	r0, #92	; 0x5c
 8014d3a:	f7ff fcff 	bl	801473c <memset>
 8014d3e:	4b05      	ldr	r3, [pc, #20]	; (8014d54 <std+0x38>)
 8014d40:	6263      	str	r3, [r4, #36]	; 0x24
 8014d42:	4b05      	ldr	r3, [pc, #20]	; (8014d58 <std+0x3c>)
 8014d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8014d46:	4b05      	ldr	r3, [pc, #20]	; (8014d5c <std+0x40>)
 8014d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014d4a:	4b05      	ldr	r3, [pc, #20]	; (8014d60 <std+0x44>)
 8014d4c:	6224      	str	r4, [r4, #32]
 8014d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8014d50:	bd10      	pop	{r4, pc}
 8014d52:	bf00      	nop
 8014d54:	08014ff1 	.word	0x08014ff1
 8014d58:	08015013 	.word	0x08015013
 8014d5c:	0801504b 	.word	0x0801504b
 8014d60:	0801506f 	.word	0x0801506f

08014d64 <_cleanup_r>:
 8014d64:	4901      	ldr	r1, [pc, #4]	; (8014d6c <_cleanup_r+0x8>)
 8014d66:	f000 b8af 	b.w	8014ec8 <_fwalk_reent>
 8014d6a:	bf00      	nop
 8014d6c:	08014ca5 	.word	0x08014ca5

08014d70 <__sfmoreglue>:
 8014d70:	b570      	push	{r4, r5, r6, lr}
 8014d72:	2268      	movs	r2, #104	; 0x68
 8014d74:	1e4d      	subs	r5, r1, #1
 8014d76:	4355      	muls	r5, r2
 8014d78:	460e      	mov	r6, r1
 8014d7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014d7e:	f7ff fd51 	bl	8014824 <_malloc_r>
 8014d82:	4604      	mov	r4, r0
 8014d84:	b140      	cbz	r0, 8014d98 <__sfmoreglue+0x28>
 8014d86:	2100      	movs	r1, #0
 8014d88:	e9c0 1600 	strd	r1, r6, [r0]
 8014d8c:	300c      	adds	r0, #12
 8014d8e:	60a0      	str	r0, [r4, #8]
 8014d90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014d94:	f7ff fcd2 	bl	801473c <memset>
 8014d98:	4620      	mov	r0, r4
 8014d9a:	bd70      	pop	{r4, r5, r6, pc}

08014d9c <__sfp_lock_acquire>:
 8014d9c:	4801      	ldr	r0, [pc, #4]	; (8014da4 <__sfp_lock_acquire+0x8>)
 8014d9e:	f000 b8b3 	b.w	8014f08 <__retarget_lock_acquire_recursive>
 8014da2:	bf00      	nop
 8014da4:	24005595 	.word	0x24005595

08014da8 <__sfp_lock_release>:
 8014da8:	4801      	ldr	r0, [pc, #4]	; (8014db0 <__sfp_lock_release+0x8>)
 8014daa:	f000 b8ae 	b.w	8014f0a <__retarget_lock_release_recursive>
 8014dae:	bf00      	nop
 8014db0:	24005595 	.word	0x24005595

08014db4 <__sinit_lock_acquire>:
 8014db4:	4801      	ldr	r0, [pc, #4]	; (8014dbc <__sinit_lock_acquire+0x8>)
 8014db6:	f000 b8a7 	b.w	8014f08 <__retarget_lock_acquire_recursive>
 8014dba:	bf00      	nop
 8014dbc:	24005596 	.word	0x24005596

08014dc0 <__sinit_lock_release>:
 8014dc0:	4801      	ldr	r0, [pc, #4]	; (8014dc8 <__sinit_lock_release+0x8>)
 8014dc2:	f000 b8a2 	b.w	8014f0a <__retarget_lock_release_recursive>
 8014dc6:	bf00      	nop
 8014dc8:	24005596 	.word	0x24005596

08014dcc <__sinit>:
 8014dcc:	b510      	push	{r4, lr}
 8014dce:	4604      	mov	r4, r0
 8014dd0:	f7ff fff0 	bl	8014db4 <__sinit_lock_acquire>
 8014dd4:	69a3      	ldr	r3, [r4, #24]
 8014dd6:	b11b      	cbz	r3, 8014de0 <__sinit+0x14>
 8014dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ddc:	f7ff bff0 	b.w	8014dc0 <__sinit_lock_release>
 8014de0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014de4:	6523      	str	r3, [r4, #80]	; 0x50
 8014de6:	4b13      	ldr	r3, [pc, #76]	; (8014e34 <__sinit+0x68>)
 8014de8:	4a13      	ldr	r2, [pc, #76]	; (8014e38 <__sinit+0x6c>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	62a2      	str	r2, [r4, #40]	; 0x28
 8014dee:	42a3      	cmp	r3, r4
 8014df0:	bf04      	itt	eq
 8014df2:	2301      	moveq	r3, #1
 8014df4:	61a3      	streq	r3, [r4, #24]
 8014df6:	4620      	mov	r0, r4
 8014df8:	f000 f820 	bl	8014e3c <__sfp>
 8014dfc:	6060      	str	r0, [r4, #4]
 8014dfe:	4620      	mov	r0, r4
 8014e00:	f000 f81c 	bl	8014e3c <__sfp>
 8014e04:	60a0      	str	r0, [r4, #8]
 8014e06:	4620      	mov	r0, r4
 8014e08:	f000 f818 	bl	8014e3c <__sfp>
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	60e0      	str	r0, [r4, #12]
 8014e10:	2104      	movs	r1, #4
 8014e12:	6860      	ldr	r0, [r4, #4]
 8014e14:	f7ff ff82 	bl	8014d1c <std>
 8014e18:	68a0      	ldr	r0, [r4, #8]
 8014e1a:	2201      	movs	r2, #1
 8014e1c:	2109      	movs	r1, #9
 8014e1e:	f7ff ff7d 	bl	8014d1c <std>
 8014e22:	68e0      	ldr	r0, [r4, #12]
 8014e24:	2202      	movs	r2, #2
 8014e26:	2112      	movs	r1, #18
 8014e28:	f7ff ff78 	bl	8014d1c <std>
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	61a3      	str	r3, [r4, #24]
 8014e30:	e7d2      	b.n	8014dd8 <__sinit+0xc>
 8014e32:	bf00      	nop
 8014e34:	080154dc 	.word	0x080154dc
 8014e38:	08014d65 	.word	0x08014d65

08014e3c <__sfp>:
 8014e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e3e:	4607      	mov	r7, r0
 8014e40:	f7ff ffac 	bl	8014d9c <__sfp_lock_acquire>
 8014e44:	4b1e      	ldr	r3, [pc, #120]	; (8014ec0 <__sfp+0x84>)
 8014e46:	681e      	ldr	r6, [r3, #0]
 8014e48:	69b3      	ldr	r3, [r6, #24]
 8014e4a:	b913      	cbnz	r3, 8014e52 <__sfp+0x16>
 8014e4c:	4630      	mov	r0, r6
 8014e4e:	f7ff ffbd 	bl	8014dcc <__sinit>
 8014e52:	3648      	adds	r6, #72	; 0x48
 8014e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014e58:	3b01      	subs	r3, #1
 8014e5a:	d503      	bpl.n	8014e64 <__sfp+0x28>
 8014e5c:	6833      	ldr	r3, [r6, #0]
 8014e5e:	b30b      	cbz	r3, 8014ea4 <__sfp+0x68>
 8014e60:	6836      	ldr	r6, [r6, #0]
 8014e62:	e7f7      	b.n	8014e54 <__sfp+0x18>
 8014e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014e68:	b9d5      	cbnz	r5, 8014ea0 <__sfp+0x64>
 8014e6a:	4b16      	ldr	r3, [pc, #88]	; (8014ec4 <__sfp+0x88>)
 8014e6c:	60e3      	str	r3, [r4, #12]
 8014e6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014e72:	6665      	str	r5, [r4, #100]	; 0x64
 8014e74:	f000 f847 	bl	8014f06 <__retarget_lock_init_recursive>
 8014e78:	f7ff ff96 	bl	8014da8 <__sfp_lock_release>
 8014e7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014e80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014e84:	6025      	str	r5, [r4, #0]
 8014e86:	61a5      	str	r5, [r4, #24]
 8014e88:	2208      	movs	r2, #8
 8014e8a:	4629      	mov	r1, r5
 8014e8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014e90:	f7ff fc54 	bl	801473c <memset>
 8014e94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ea0:	3468      	adds	r4, #104	; 0x68
 8014ea2:	e7d9      	b.n	8014e58 <__sfp+0x1c>
 8014ea4:	2104      	movs	r1, #4
 8014ea6:	4638      	mov	r0, r7
 8014ea8:	f7ff ff62 	bl	8014d70 <__sfmoreglue>
 8014eac:	4604      	mov	r4, r0
 8014eae:	6030      	str	r0, [r6, #0]
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	d1d5      	bne.n	8014e60 <__sfp+0x24>
 8014eb4:	f7ff ff78 	bl	8014da8 <__sfp_lock_release>
 8014eb8:	230c      	movs	r3, #12
 8014eba:	603b      	str	r3, [r7, #0]
 8014ebc:	e7ee      	b.n	8014e9c <__sfp+0x60>
 8014ebe:	bf00      	nop
 8014ec0:	080154dc 	.word	0x080154dc
 8014ec4:	ffff0001 	.word	0xffff0001

08014ec8 <_fwalk_reent>:
 8014ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ecc:	4606      	mov	r6, r0
 8014ece:	4688      	mov	r8, r1
 8014ed0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014ed4:	2700      	movs	r7, #0
 8014ed6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014eda:	f1b9 0901 	subs.w	r9, r9, #1
 8014ede:	d505      	bpl.n	8014eec <_fwalk_reent+0x24>
 8014ee0:	6824      	ldr	r4, [r4, #0]
 8014ee2:	2c00      	cmp	r4, #0
 8014ee4:	d1f7      	bne.n	8014ed6 <_fwalk_reent+0xe>
 8014ee6:	4638      	mov	r0, r7
 8014ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eec:	89ab      	ldrh	r3, [r5, #12]
 8014eee:	2b01      	cmp	r3, #1
 8014ef0:	d907      	bls.n	8014f02 <_fwalk_reent+0x3a>
 8014ef2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	d003      	beq.n	8014f02 <_fwalk_reent+0x3a>
 8014efa:	4629      	mov	r1, r5
 8014efc:	4630      	mov	r0, r6
 8014efe:	47c0      	blx	r8
 8014f00:	4307      	orrs	r7, r0
 8014f02:	3568      	adds	r5, #104	; 0x68
 8014f04:	e7e9      	b.n	8014eda <_fwalk_reent+0x12>

08014f06 <__retarget_lock_init_recursive>:
 8014f06:	4770      	bx	lr

08014f08 <__retarget_lock_acquire_recursive>:
 8014f08:	4770      	bx	lr

08014f0a <__retarget_lock_release_recursive>:
 8014f0a:	4770      	bx	lr

08014f0c <__swhatbuf_r>:
 8014f0c:	b570      	push	{r4, r5, r6, lr}
 8014f0e:	460e      	mov	r6, r1
 8014f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f14:	2900      	cmp	r1, #0
 8014f16:	b096      	sub	sp, #88	; 0x58
 8014f18:	4614      	mov	r4, r2
 8014f1a:	461d      	mov	r5, r3
 8014f1c:	da08      	bge.n	8014f30 <__swhatbuf_r+0x24>
 8014f1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014f22:	2200      	movs	r2, #0
 8014f24:	602a      	str	r2, [r5, #0]
 8014f26:	061a      	lsls	r2, r3, #24
 8014f28:	d410      	bmi.n	8014f4c <__swhatbuf_r+0x40>
 8014f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f2e:	e00e      	b.n	8014f4e <__swhatbuf_r+0x42>
 8014f30:	466a      	mov	r2, sp
 8014f32:	f000 f8c3 	bl	80150bc <_fstat_r>
 8014f36:	2800      	cmp	r0, #0
 8014f38:	dbf1      	blt.n	8014f1e <__swhatbuf_r+0x12>
 8014f3a:	9a01      	ldr	r2, [sp, #4]
 8014f3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014f40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014f44:	425a      	negs	r2, r3
 8014f46:	415a      	adcs	r2, r3
 8014f48:	602a      	str	r2, [r5, #0]
 8014f4a:	e7ee      	b.n	8014f2a <__swhatbuf_r+0x1e>
 8014f4c:	2340      	movs	r3, #64	; 0x40
 8014f4e:	2000      	movs	r0, #0
 8014f50:	6023      	str	r3, [r4, #0]
 8014f52:	b016      	add	sp, #88	; 0x58
 8014f54:	bd70      	pop	{r4, r5, r6, pc}
	...

08014f58 <__smakebuf_r>:
 8014f58:	898b      	ldrh	r3, [r1, #12]
 8014f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f5c:	079d      	lsls	r5, r3, #30
 8014f5e:	4606      	mov	r6, r0
 8014f60:	460c      	mov	r4, r1
 8014f62:	d507      	bpl.n	8014f74 <__smakebuf_r+0x1c>
 8014f64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014f68:	6023      	str	r3, [r4, #0]
 8014f6a:	6123      	str	r3, [r4, #16]
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	6163      	str	r3, [r4, #20]
 8014f70:	b002      	add	sp, #8
 8014f72:	bd70      	pop	{r4, r5, r6, pc}
 8014f74:	ab01      	add	r3, sp, #4
 8014f76:	466a      	mov	r2, sp
 8014f78:	f7ff ffc8 	bl	8014f0c <__swhatbuf_r>
 8014f7c:	9900      	ldr	r1, [sp, #0]
 8014f7e:	4605      	mov	r5, r0
 8014f80:	4630      	mov	r0, r6
 8014f82:	f7ff fc4f 	bl	8014824 <_malloc_r>
 8014f86:	b948      	cbnz	r0, 8014f9c <__smakebuf_r+0x44>
 8014f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f8c:	059a      	lsls	r2, r3, #22
 8014f8e:	d4ef      	bmi.n	8014f70 <__smakebuf_r+0x18>
 8014f90:	f023 0303 	bic.w	r3, r3, #3
 8014f94:	f043 0302 	orr.w	r3, r3, #2
 8014f98:	81a3      	strh	r3, [r4, #12]
 8014f9a:	e7e3      	b.n	8014f64 <__smakebuf_r+0xc>
 8014f9c:	4b0d      	ldr	r3, [pc, #52]	; (8014fd4 <__smakebuf_r+0x7c>)
 8014f9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014fa0:	89a3      	ldrh	r3, [r4, #12]
 8014fa2:	6020      	str	r0, [r4, #0]
 8014fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fa8:	81a3      	strh	r3, [r4, #12]
 8014faa:	9b00      	ldr	r3, [sp, #0]
 8014fac:	6163      	str	r3, [r4, #20]
 8014fae:	9b01      	ldr	r3, [sp, #4]
 8014fb0:	6120      	str	r0, [r4, #16]
 8014fb2:	b15b      	cbz	r3, 8014fcc <__smakebuf_r+0x74>
 8014fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fb8:	4630      	mov	r0, r6
 8014fba:	f000 f891 	bl	80150e0 <_isatty_r>
 8014fbe:	b128      	cbz	r0, 8014fcc <__smakebuf_r+0x74>
 8014fc0:	89a3      	ldrh	r3, [r4, #12]
 8014fc2:	f023 0303 	bic.w	r3, r3, #3
 8014fc6:	f043 0301 	orr.w	r3, r3, #1
 8014fca:	81a3      	strh	r3, [r4, #12]
 8014fcc:	89a0      	ldrh	r0, [r4, #12]
 8014fce:	4305      	orrs	r5, r0
 8014fd0:	81a5      	strh	r5, [r4, #12]
 8014fd2:	e7cd      	b.n	8014f70 <__smakebuf_r+0x18>
 8014fd4:	08014d65 	.word	0x08014d65

08014fd8 <__malloc_lock>:
 8014fd8:	4801      	ldr	r0, [pc, #4]	; (8014fe0 <__malloc_lock+0x8>)
 8014fda:	f7ff bf95 	b.w	8014f08 <__retarget_lock_acquire_recursive>
 8014fde:	bf00      	nop
 8014fe0:	24005594 	.word	0x24005594

08014fe4 <__malloc_unlock>:
 8014fe4:	4801      	ldr	r0, [pc, #4]	; (8014fec <__malloc_unlock+0x8>)
 8014fe6:	f7ff bf90 	b.w	8014f0a <__retarget_lock_release_recursive>
 8014fea:	bf00      	nop
 8014fec:	24005594 	.word	0x24005594

08014ff0 <__sread>:
 8014ff0:	b510      	push	{r4, lr}
 8014ff2:	460c      	mov	r4, r1
 8014ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ff8:	f000 f894 	bl	8015124 <_read_r>
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	bfab      	itete	ge
 8015000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015002:	89a3      	ldrhlt	r3, [r4, #12]
 8015004:	181b      	addge	r3, r3, r0
 8015006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801500a:	bfac      	ite	ge
 801500c:	6563      	strge	r3, [r4, #84]	; 0x54
 801500e:	81a3      	strhlt	r3, [r4, #12]
 8015010:	bd10      	pop	{r4, pc}

08015012 <__swrite>:
 8015012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015016:	461f      	mov	r7, r3
 8015018:	898b      	ldrh	r3, [r1, #12]
 801501a:	05db      	lsls	r3, r3, #23
 801501c:	4605      	mov	r5, r0
 801501e:	460c      	mov	r4, r1
 8015020:	4616      	mov	r6, r2
 8015022:	d505      	bpl.n	8015030 <__swrite+0x1e>
 8015024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015028:	2302      	movs	r3, #2
 801502a:	2200      	movs	r2, #0
 801502c:	f000 f868 	bl	8015100 <_lseek_r>
 8015030:	89a3      	ldrh	r3, [r4, #12]
 8015032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801503a:	81a3      	strh	r3, [r4, #12]
 801503c:	4632      	mov	r2, r6
 801503e:	463b      	mov	r3, r7
 8015040:	4628      	mov	r0, r5
 8015042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015046:	f000 b817 	b.w	8015078 <_write_r>

0801504a <__sseek>:
 801504a:	b510      	push	{r4, lr}
 801504c:	460c      	mov	r4, r1
 801504e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015052:	f000 f855 	bl	8015100 <_lseek_r>
 8015056:	1c43      	adds	r3, r0, #1
 8015058:	89a3      	ldrh	r3, [r4, #12]
 801505a:	bf15      	itete	ne
 801505c:	6560      	strne	r0, [r4, #84]	; 0x54
 801505e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015066:	81a3      	strheq	r3, [r4, #12]
 8015068:	bf18      	it	ne
 801506a:	81a3      	strhne	r3, [r4, #12]
 801506c:	bd10      	pop	{r4, pc}

0801506e <__sclose>:
 801506e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015072:	f000 b813 	b.w	801509c <_close_r>
	...

08015078 <_write_r>:
 8015078:	b538      	push	{r3, r4, r5, lr}
 801507a:	4d07      	ldr	r5, [pc, #28]	; (8015098 <_write_r+0x20>)
 801507c:	4604      	mov	r4, r0
 801507e:	4608      	mov	r0, r1
 8015080:	4611      	mov	r1, r2
 8015082:	2200      	movs	r2, #0
 8015084:	602a      	str	r2, [r5, #0]
 8015086:	461a      	mov	r2, r3
 8015088:	f7ee f8eb 	bl	8003262 <_write>
 801508c:	1c43      	adds	r3, r0, #1
 801508e:	d102      	bne.n	8015096 <_write_r+0x1e>
 8015090:	682b      	ldr	r3, [r5, #0]
 8015092:	b103      	cbz	r3, 8015096 <_write_r+0x1e>
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	bd38      	pop	{r3, r4, r5, pc}
 8015098:	24005598 	.word	0x24005598

0801509c <_close_r>:
 801509c:	b538      	push	{r3, r4, r5, lr}
 801509e:	4d06      	ldr	r5, [pc, #24]	; (80150b8 <_close_r+0x1c>)
 80150a0:	2300      	movs	r3, #0
 80150a2:	4604      	mov	r4, r0
 80150a4:	4608      	mov	r0, r1
 80150a6:	602b      	str	r3, [r5, #0]
 80150a8:	f7ee f8f7 	bl	800329a <_close>
 80150ac:	1c43      	adds	r3, r0, #1
 80150ae:	d102      	bne.n	80150b6 <_close_r+0x1a>
 80150b0:	682b      	ldr	r3, [r5, #0]
 80150b2:	b103      	cbz	r3, 80150b6 <_close_r+0x1a>
 80150b4:	6023      	str	r3, [r4, #0]
 80150b6:	bd38      	pop	{r3, r4, r5, pc}
 80150b8:	24005598 	.word	0x24005598

080150bc <_fstat_r>:
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	4d07      	ldr	r5, [pc, #28]	; (80150dc <_fstat_r+0x20>)
 80150c0:	2300      	movs	r3, #0
 80150c2:	4604      	mov	r4, r0
 80150c4:	4608      	mov	r0, r1
 80150c6:	4611      	mov	r1, r2
 80150c8:	602b      	str	r3, [r5, #0]
 80150ca:	f7ee f8f2 	bl	80032b2 <_fstat>
 80150ce:	1c43      	adds	r3, r0, #1
 80150d0:	d102      	bne.n	80150d8 <_fstat_r+0x1c>
 80150d2:	682b      	ldr	r3, [r5, #0]
 80150d4:	b103      	cbz	r3, 80150d8 <_fstat_r+0x1c>
 80150d6:	6023      	str	r3, [r4, #0]
 80150d8:	bd38      	pop	{r3, r4, r5, pc}
 80150da:	bf00      	nop
 80150dc:	24005598 	.word	0x24005598

080150e0 <_isatty_r>:
 80150e0:	b538      	push	{r3, r4, r5, lr}
 80150e2:	4d06      	ldr	r5, [pc, #24]	; (80150fc <_isatty_r+0x1c>)
 80150e4:	2300      	movs	r3, #0
 80150e6:	4604      	mov	r4, r0
 80150e8:	4608      	mov	r0, r1
 80150ea:	602b      	str	r3, [r5, #0]
 80150ec:	f7ee f8f1 	bl	80032d2 <_isatty>
 80150f0:	1c43      	adds	r3, r0, #1
 80150f2:	d102      	bne.n	80150fa <_isatty_r+0x1a>
 80150f4:	682b      	ldr	r3, [r5, #0]
 80150f6:	b103      	cbz	r3, 80150fa <_isatty_r+0x1a>
 80150f8:	6023      	str	r3, [r4, #0]
 80150fa:	bd38      	pop	{r3, r4, r5, pc}
 80150fc:	24005598 	.word	0x24005598

08015100 <_lseek_r>:
 8015100:	b538      	push	{r3, r4, r5, lr}
 8015102:	4d07      	ldr	r5, [pc, #28]	; (8015120 <_lseek_r+0x20>)
 8015104:	4604      	mov	r4, r0
 8015106:	4608      	mov	r0, r1
 8015108:	4611      	mov	r1, r2
 801510a:	2200      	movs	r2, #0
 801510c:	602a      	str	r2, [r5, #0]
 801510e:	461a      	mov	r2, r3
 8015110:	f7ee f8ea 	bl	80032e8 <_lseek>
 8015114:	1c43      	adds	r3, r0, #1
 8015116:	d102      	bne.n	801511e <_lseek_r+0x1e>
 8015118:	682b      	ldr	r3, [r5, #0]
 801511a:	b103      	cbz	r3, 801511e <_lseek_r+0x1e>
 801511c:	6023      	str	r3, [r4, #0]
 801511e:	bd38      	pop	{r3, r4, r5, pc}
 8015120:	24005598 	.word	0x24005598

08015124 <_read_r>:
 8015124:	b538      	push	{r3, r4, r5, lr}
 8015126:	4d07      	ldr	r5, [pc, #28]	; (8015144 <_read_r+0x20>)
 8015128:	4604      	mov	r4, r0
 801512a:	4608      	mov	r0, r1
 801512c:	4611      	mov	r1, r2
 801512e:	2200      	movs	r2, #0
 8015130:	602a      	str	r2, [r5, #0]
 8015132:	461a      	mov	r2, r3
 8015134:	f7ee f878 	bl	8003228 <_read>
 8015138:	1c43      	adds	r3, r0, #1
 801513a:	d102      	bne.n	8015142 <_read_r+0x1e>
 801513c:	682b      	ldr	r3, [r5, #0]
 801513e:	b103      	cbz	r3, 8015142 <_read_r+0x1e>
 8015140:	6023      	str	r3, [r4, #0]
 8015142:	bd38      	pop	{r3, r4, r5, pc}
 8015144:	24005598 	.word	0x24005598

08015148 <_init>:
 8015148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801514a:	bf00      	nop
 801514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801514e:	bc08      	pop	{r3}
 8015150:	469e      	mov	lr, r3
 8015152:	4770      	bx	lr

08015154 <_fini>:
 8015154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015156:	bf00      	nop
 8015158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801515a:	bc08      	pop	{r3}
 801515c:	469e      	mov	lr, r3
 801515e:	4770      	bx	lr
