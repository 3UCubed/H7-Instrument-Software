
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08016370  08016370  00026370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016750  08016750  00026750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016758  08016758  00026758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801675c  0801675c  0002675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  08016760  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054a4  24000120  08016864  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240055c4  08016864  000355c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   000327dd  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548e  00000000  00000000  0006290f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a90  00000000  00000000  0006c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030986  00000000  00000000  00074288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001945a7  00000000  00000000  000a4c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002391b5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000abe0  00000000  00000000  00239208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016358 	.word	0x08016358

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016358 	.word	0x08016358

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 f87c 	bl	80126f8 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f012 f871 	bl	80126f8 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f012 f866 	bl	80126f8 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f015 fae2 	bl	8015bf8 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	24000508 	.word	0x24000508
 8000640:	24000b5c 	.word	0x24000b5c
 8000644:	24000554 	.word	0x24000554
 8000648:	240005a0 	.word	0x240005a0
 800064c:	080163c0 	.word	0x080163c0

08000650 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	49f2      	ldr	r1, [pc, #968]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 800065c:	48f2      	ldr	r0, [pc, #968]	; (8000a28 <HAL_UART_RxCpltCallback+0x3d8>)
 800065e:	f00f fb3f 	bl	800fce0 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4bf0      	ldr	r3, [pc, #960]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2be0      	cmp	r3, #224	; 0xe0
 800066c:	f200 83c8 	bhi.w	8000e00 <HAL_UART_RxCpltCallback+0x7b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000a11 	.word	0x08000a11
 800067c:	08000a4d 	.word	0x08000a4d
 8000680:	08000ad3 	.word	0x08000ad3
 8000684:	08000afd 	.word	0x08000afd
 8000688:	08000b25 	.word	0x08000b25
 800068c:	08000b4f 	.word	0x08000b4f
 8000690:	08000b7b 	.word	0x08000b7b
 8000694:	08000ba7 	.word	0x08000ba7
 8000698:	08000bd1 	.word	0x08000bd1
 800069c:	08000c03 	.word	0x08000c03
 80006a0:	08000c27 	.word	0x08000c27
 80006a4:	08000c43 	.word	0x08000c43
 80006a8:	08000c5f 	.word	0x08000c5f
 80006ac:	08000ca9 	.word	0x08000ca9
 80006b0:	08000da5 	.word	0x08000da5
 80006b4:	08000dd5 	.word	0x08000dd5
 80006b8:	080009fd 	.word	0x080009fd
 80006bc:	08000a39 	.word	0x08000a39
 80006c0:	08000abd 	.word	0x08000abd
 80006c4:	08000ae9 	.word	0x08000ae9
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08000b39 	.word	0x08000b39
 80006d0:	08000b65 	.word	0x08000b65
 80006d4:	08000b91 	.word	0x08000b91
 80006d8:	08000bbd 	.word	0x08000bbd
 80006dc:	08000be5 	.word	0x08000be5
 80006e0:	08000c19 	.word	0x08000c19
 80006e4:	08000c35 	.word	0x08000c35
 80006e8:	08000c51 	.word	0x08000c51
 80006ec:	08000c6d 	.word	0x08000c6d
 80006f0:	08000ce5 	.word	0x08000ce5
 80006f4:	08000dcd 	.word	0x08000dcd
 80006f8:	08000e01 	.word	0x08000e01
 80006fc:	08000e01 	.word	0x08000e01
 8000700:	08000e01 	.word	0x08000e01
 8000704:	08000e01 	.word	0x08000e01
 8000708:	08000e01 	.word	0x08000e01
 800070c:	08000e01 	.word	0x08000e01
 8000710:	08000e01 	.word	0x08000e01
 8000714:	08000e01 	.word	0x08000e01
 8000718:	08000e01 	.word	0x08000e01
 800071c:	08000e01 	.word	0x08000e01
 8000720:	08000e01 	.word	0x08000e01
 8000724:	08000e01 	.word	0x08000e01
 8000728:	08000e01 	.word	0x08000e01
 800072c:	08000e01 	.word	0x08000e01
 8000730:	08000e01 	.word	0x08000e01
 8000734:	08000e01 	.word	0x08000e01
 8000738:	08000e01 	.word	0x08000e01
 800073c:	08000e01 	.word	0x08000e01
 8000740:	08000e01 	.word	0x08000e01
 8000744:	08000e01 	.word	0x08000e01
 8000748:	08000e01 	.word	0x08000e01
 800074c:	08000e01 	.word	0x08000e01
 8000750:	08000e01 	.word	0x08000e01
 8000754:	08000e01 	.word	0x08000e01
 8000758:	08000e01 	.word	0x08000e01
 800075c:	08000e01 	.word	0x08000e01
 8000760:	08000e01 	.word	0x08000e01
 8000764:	08000e01 	.word	0x08000e01
 8000768:	08000e01 	.word	0x08000e01
 800076c:	08000e01 	.word	0x08000e01
 8000770:	08000e01 	.word	0x08000e01
 8000774:	08000e01 	.word	0x08000e01
 8000778:	08000e01 	.word	0x08000e01
 800077c:	08000e01 	.word	0x08000e01
 8000780:	08000e01 	.word	0x08000e01
 8000784:	08000e01 	.word	0x08000e01
 8000788:	08000e01 	.word	0x08000e01
 800078c:	08000e01 	.word	0x08000e01
 8000790:	08000e01 	.word	0x08000e01
 8000794:	08000e01 	.word	0x08000e01
 8000798:	08000e01 	.word	0x08000e01
 800079c:	08000e01 	.word	0x08000e01
 80007a0:	08000e01 	.word	0x08000e01
 80007a4:	08000e01 	.word	0x08000e01
 80007a8:	08000e01 	.word	0x08000e01
 80007ac:	08000e01 	.word	0x08000e01
 80007b0:	08000e01 	.word	0x08000e01
 80007b4:	08000e01 	.word	0x08000e01
 80007b8:	08000e01 	.word	0x08000e01
 80007bc:	08000e01 	.word	0x08000e01
 80007c0:	08000e01 	.word	0x08000e01
 80007c4:	08000e01 	.word	0x08000e01
 80007c8:	08000e01 	.word	0x08000e01
 80007cc:	08000e01 	.word	0x08000e01
 80007d0:	08000e01 	.word	0x08000e01
 80007d4:	08000e01 	.word	0x08000e01
 80007d8:	08000e01 	.word	0x08000e01
 80007dc:	08000e01 	.word	0x08000e01
 80007e0:	08000e01 	.word	0x08000e01
 80007e4:	08000e01 	.word	0x08000e01
 80007e8:	08000e01 	.word	0x08000e01
 80007ec:	08000e01 	.word	0x08000e01
 80007f0:	08000e01 	.word	0x08000e01
 80007f4:	08000e01 	.word	0x08000e01
 80007f8:	08000e01 	.word	0x08000e01
 80007fc:	08000e01 	.word	0x08000e01
 8000800:	08000e01 	.word	0x08000e01
 8000804:	08000e01 	.word	0x08000e01
 8000808:	08000e01 	.word	0x08000e01
 800080c:	08000e01 	.word	0x08000e01
 8000810:	08000e01 	.word	0x08000e01
 8000814:	08000e01 	.word	0x08000e01
 8000818:	08000e01 	.word	0x08000e01
 800081c:	08000e01 	.word	0x08000e01
 8000820:	08000e01 	.word	0x08000e01
 8000824:	08000e01 	.word	0x08000e01
 8000828:	08000e01 	.word	0x08000e01
 800082c:	08000e01 	.word	0x08000e01
 8000830:	08000e01 	.word	0x08000e01
 8000834:	08000e01 	.word	0x08000e01
 8000838:	08000e01 	.word	0x08000e01
 800083c:	08000e01 	.word	0x08000e01
 8000840:	08000e01 	.word	0x08000e01
 8000844:	08000e01 	.word	0x08000e01
 8000848:	08000e01 	.word	0x08000e01
 800084c:	08000e01 	.word	0x08000e01
 8000850:	08000e01 	.word	0x08000e01
 8000854:	08000e01 	.word	0x08000e01
 8000858:	08000e01 	.word	0x08000e01
 800085c:	08000e01 	.word	0x08000e01
 8000860:	08000e01 	.word	0x08000e01
 8000864:	08000e01 	.word	0x08000e01
 8000868:	08000e01 	.word	0x08000e01
 800086c:	08000e01 	.word	0x08000e01
 8000870:	08000e01 	.word	0x08000e01
 8000874:	08000e01 	.word	0x08000e01
 8000878:	08000e01 	.word	0x08000e01
 800087c:	08000e01 	.word	0x08000e01
 8000880:	08000e01 	.word	0x08000e01
 8000884:	08000e01 	.word	0x08000e01
 8000888:	08000e01 	.word	0x08000e01
 800088c:	08000e01 	.word	0x08000e01
 8000890:	08000e01 	.word	0x08000e01
 8000894:	08000e01 	.word	0x08000e01
 8000898:	08000e01 	.word	0x08000e01
 800089c:	08000e01 	.word	0x08000e01
 80008a0:	08000e01 	.word	0x08000e01
 80008a4:	08000e01 	.word	0x08000e01
 80008a8:	08000e01 	.word	0x08000e01
 80008ac:	08000e01 	.word	0x08000e01
 80008b0:	08000e01 	.word	0x08000e01
 80008b4:	08000e01 	.word	0x08000e01
 80008b8:	08000e01 	.word	0x08000e01
 80008bc:	08000e01 	.word	0x08000e01
 80008c0:	08000e01 	.word	0x08000e01
 80008c4:	08000e01 	.word	0x08000e01
 80008c8:	08000e01 	.word	0x08000e01
 80008cc:	08000e01 	.word	0x08000e01
 80008d0:	08000e01 	.word	0x08000e01
 80008d4:	08000e01 	.word	0x08000e01
 80008d8:	08000e01 	.word	0x08000e01
 80008dc:	08000e01 	.word	0x08000e01
 80008e0:	08000e01 	.word	0x08000e01
 80008e4:	08000e01 	.word	0x08000e01
 80008e8:	08000e01 	.word	0x08000e01
 80008ec:	08000e01 	.word	0x08000e01
 80008f0:	08000e01 	.word	0x08000e01
 80008f4:	08000e01 	.word	0x08000e01
 80008f8:	08000e01 	.word	0x08000e01
 80008fc:	08000e01 	.word	0x08000e01
 8000900:	08000e01 	.word	0x08000e01
 8000904:	08000e01 	.word	0x08000e01
 8000908:	08000e01 	.word	0x08000e01
 800090c:	08000e01 	.word	0x08000e01
 8000910:	08000e01 	.word	0x08000e01
 8000914:	08000e01 	.word	0x08000e01
 8000918:	08000e01 	.word	0x08000e01
 800091c:	08000e01 	.word	0x08000e01
 8000920:	08000e01 	.word	0x08000e01
 8000924:	08000e01 	.word	0x08000e01
 8000928:	08000e01 	.word	0x08000e01
 800092c:	08000e01 	.word	0x08000e01
 8000930:	08000e01 	.word	0x08000e01
 8000934:	08000e01 	.word	0x08000e01
 8000938:	08000e01 	.word	0x08000e01
 800093c:	08000e01 	.word	0x08000e01
 8000940:	08000e01 	.word	0x08000e01
 8000944:	08000e01 	.word	0x08000e01
 8000948:	08000e01 	.word	0x08000e01
 800094c:	08000e01 	.word	0x08000e01
 8000950:	08000e01 	.word	0x08000e01
 8000954:	08000e01 	.word	0x08000e01
 8000958:	08000e01 	.word	0x08000e01
 800095c:	08000e01 	.word	0x08000e01
 8000960:	08000e01 	.word	0x08000e01
 8000964:	08000e01 	.word	0x08000e01
 8000968:	08000e01 	.word	0x08000e01
 800096c:	08000e01 	.word	0x08000e01
 8000970:	08000e01 	.word	0x08000e01
 8000974:	08000e01 	.word	0x08000e01
 8000978:	08000e01 	.word	0x08000e01
 800097c:	08000e01 	.word	0x08000e01
 8000980:	08000e01 	.word	0x08000e01
 8000984:	08000e01 	.word	0x08000e01
 8000988:	08000e01 	.word	0x08000e01
 800098c:	08000e01 	.word	0x08000e01
 8000990:	08000e01 	.word	0x08000e01
 8000994:	08000e01 	.word	0x08000e01
 8000998:	08000e01 	.word	0x08000e01
 800099c:	08000e01 	.word	0x08000e01
 80009a0:	08000e01 	.word	0x08000e01
 80009a4:	08000e01 	.word	0x08000e01
 80009a8:	08000e01 	.word	0x08000e01
 80009ac:	08000e01 	.word	0x08000e01
 80009b0:	08000e01 	.word	0x08000e01
 80009b4:	08000e01 	.word	0x08000e01
 80009b8:	08000def 	.word	0x08000def
 80009bc:	08000e01 	.word	0x08000e01
 80009c0:	08000e01 	.word	0x08000e01
 80009c4:	08000e01 	.word	0x08000e01
 80009c8:	08000e01 	.word	0x08000e01
 80009cc:	08000e01 	.word	0x08000e01
 80009d0:	08000e01 	.word	0x08000e01
 80009d4:	08000e01 	.word	0x08000e01
 80009d8:	08000e01 	.word	0x08000e01
 80009dc:	08000e01 	.word	0x08000e01
 80009e0:	08000e01 	.word	0x08000e01
 80009e4:	08000e01 	.word	0x08000e01
 80009e8:	08000e01 	.word	0x08000e01
 80009ec:	08000e01 	.word	0x08000e01
 80009f0:	08000e01 	.word	0x08000e01
 80009f4:	08000e01 	.word	0x08000e01
 80009f8:	08000ddd 	.word	0x08000ddd
	case 0x10: {
		printf("SDN1 ON\n");
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <HAL_UART_RxCpltCallback+0x3dc>)
 80009fe:	f015 f8fb 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	2201      	movs	r2, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f007 fffd 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000a0e:	e202      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a12:	f015 f8f1 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f007 fff3 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000a22:	e1f8      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
 8000a24:	24000b60 	.word	0x24000b60
 8000a28:	240005ec 	.word	0x240005ec
 8000a2c:	080163d8 	.word	0x080163d8
 8000a30:	58020400 	.word	0x58020400
 8000a34:	080163e0 	.word	0x080163e0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a38:	48b5      	ldr	r0, [pc, #724]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a3a:	f015 f8dd 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a3e:	4bb5      	ldr	r3, [pc, #724]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	2201      	movs	r2, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 ffdf 	bl	8008a08 <HAL_GPIO_WritePin>

		break;
 8000a4a:	e1e4      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a4c:	48b2      	ldr	r0, [pc, #712]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a4e:	f015 f8d3 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a52:	4bb0      	ldr	r3, [pc, #704]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a54:	2120      	movs	r1, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f007 ffd5 	bl	8008a08 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a5e:	4bad      	ldr	r3, [pc, #692]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2200      	movs	r2, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f007 ffcf 	bl	8008a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a6a:	4bac      	ldr	r3, [pc, #688]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	2200      	movs	r2, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f007 ffc8 	bl	8008a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a78:	4ba8      	ldr	r3, [pc, #672]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f007 ffc1 	bl	8008a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a86:	4ba5      	ldr	r3, [pc, #660]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f007 ffba 	bl	8008a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000a94:	4ba1      	ldr	r3, [pc, #644]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 ffb4 	bl	8008a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000aa0:	4b9e      	ldr	r3, [pc, #632]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 ffae 	bl	8008a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aac:	4b9b      	ldr	r3, [pc, #620]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 ffa7 	bl	8008a08 <HAL_GPIO_WritePin>

		break;
 8000aba:	e1ac      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000abc:	4898      	ldr	r0, [pc, #608]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000abe:	f015 f89b 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ac2:	4b96      	ldr	r3, [pc, #600]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 ff9c 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000ad0:	e1a1      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ad2:	4894      	ldr	r0, [pc, #592]	; (8000d24 <HAL_UART_RxCpltCallback+0x6d4>)
 8000ad4:	f015 f890 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ad8:	4b90      	ldr	r3, [pc, #576]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 ff91 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000ae6:	e196      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000ae8:	488f      	ldr	r0, [pc, #572]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aea:	f015 f885 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aee:	4b8b      	ldr	r3, [pc, #556]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 ff87 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000afa:	e18c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000afc:	488b      	ldr	r0, [pc, #556]	; (8000d2c <HAL_UART_RxCpltCallback+0x6dc>)
 8000afe:	f015 f87b 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b02:	4b86      	ldr	r3, [pc, #536]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	2200      	movs	r2, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 ff7d 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000b0e:	e182      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b10:	4887      	ldr	r0, [pc, #540]	; (8000d30 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b12:	f015 f871 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b16:	4b81      	ldr	r3, [pc, #516]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f007 ff73 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000b22:	e178      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b24:	4883      	ldr	r0, [pc, #524]	; (8000d34 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b26:	f015 f867 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b2a:	4b7c      	ldr	r3, [pc, #496]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 ff69 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000b36:	e16e      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b38:	487f      	ldr	r0, [pc, #508]	; (8000d38 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b3a:	f015 f85d 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b3e:	4b77      	ldr	r3, [pc, #476]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	2201      	movs	r2, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 ff5e 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000b4c:	e163      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b4e:	487b      	ldr	r0, [pc, #492]	; (8000d3c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b50:	f015 f852 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b54:	4b71      	ldr	r3, [pc, #452]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f007 ff53 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000b62:	e158      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b64:	4876      	ldr	r0, [pc, #472]	; (8000d40 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b66:	f015 f847 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b6a:	4b6c      	ldr	r3, [pc, #432]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	2201      	movs	r2, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 ff48 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000b78:	e14d      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b7a:	4872      	ldr	r0, [pc, #456]	; (8000d44 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b7c:	f015 f83c 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b80:	4b66      	ldr	r3, [pc, #408]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	2200      	movs	r2, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 ff3d 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000b8e:	e142      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000b90:	486d      	ldr	r0, [pc, #436]	; (8000d48 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b92:	f015 f831 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b96:	4b61      	ldr	r3, [pc, #388]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 ff32 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000ba4:	e137      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000ba6:	4869      	ldr	r0, [pc, #420]	; (8000d4c <HAL_UART_RxCpltCallback+0x6fc>)
 8000ba8:	f015 f826 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bac:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 ff27 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000bba:	e12c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bbc:	4864      	ldr	r0, [pc, #400]	; (8000d50 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	f015 f81b 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 ff1d 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000bce:	e122      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bd0:	4860      	ldr	r0, [pc, #384]	; (8000d54 <HAL_UART_RxCpltCallback+0x704>)
 8000bd2:	f015 f811 	bl	8015bf8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bd6:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f007 ff13 	bl	8008a08 <HAL_GPIO_WritePin>
		break;
 8000be2:	e118      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000be4:	485c      	ldr	r0, [pc, #368]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000be6:	f015 f807 	bl	8015bf8 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000bea:	485c      	ldr	r0, [pc, #368]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000bec:	f00d fa5c 	bl	800e0a8 <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	485a      	ldr	r0, [pc, #360]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000bfc:	f004 fb74 	bl	80052e8 <HAL_DAC_Start_DMA>
		break;
 8000c00:	e109      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c02:	4859      	ldr	r0, [pc, #356]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000c04:	f014 fff8 	bl	8015bf8 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000c08:	4854      	ldr	r0, [pc, #336]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000c0a:	f00d fabd 	bl	800e188 <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4854      	ldr	r0, [pc, #336]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c12:	f004 fc29 	bl	8005468 <HAL_DAC_Stop_DMA>
		break;
 8000c16:	e0fe      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c18:	4854      	ldr	r0, [pc, #336]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c1a:	f014 ffed 	bl	8015bf8 <puts>
		ERPA_ON = 1;
 8000c1e:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
		break;
 8000c24:	e0f7      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c26:	4853      	ldr	r0, [pc, #332]	; (8000d74 <HAL_UART_RxCpltCallback+0x724>)
 8000c28:	f014 ffe6 	bl	8015bf8 <puts>
		ERPA_ON = 0;
 8000c2c:	4b50      	ldr	r3, [pc, #320]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
		break;
 8000c32:	e0f0      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c34:	4850      	ldr	r0, [pc, #320]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c36:	f014 ffdf 	bl	8015bf8 <puts>
		PMT_ON = 1;
 8000c3a:	4b50      	ldr	r3, [pc, #320]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
		break;
 8000c40:	e0e9      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c42:	484f      	ldr	r0, [pc, #316]	; (8000d80 <HAL_UART_RxCpltCallback+0x730>)
 8000c44:	f014 ffd8 	bl	8015bf8 <puts>
		PMT_ON = 0;
 8000c48:	4b4c      	ldr	r3, [pc, #304]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		break;
 8000c4e:	e0e2      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c50:	484c      	ldr	r0, [pc, #304]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c52:	f014 ffd1 	bl	8015bf8 <puts>
		HK_ON = 1;
 8000c56:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
		break;
 8000c5c:	e0db      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c5e:	484b      	ldr	r0, [pc, #300]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c60:	f014 ffca 	bl	8015bf8 <puts>
		HK_ON = 0;
 8000c64:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
		break;
 8000c6a:	e0d4      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000c6c:	4848      	ldr	r0, [pc, #288]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c6e:	f014 ffc3 	bl	8015bf8 <puts>
		if (step < 17) {
 8000c72:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b10      	cmp	r3, #16
 8000c78:	f200 80c6 	bhi.w	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
			step+=2;
 8000c7c:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3302      	adds	r3, #2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c86:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	4832      	ldr	r0, [pc, #200]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c9a:	f004 fc88 	bl	80055ae <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4830      	ldr	r0, [pc, #192]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000ca2:	f004 fac9 	bl	8005238 <HAL_DAC_Start>
		}
		break;
 8000ca6:	e0af      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000ca8:	483b      	ldr	r0, [pc, #236]	; (8000d98 <HAL_UART_RxCpltCallback+0x748>)
 8000caa:	f014 ffa5 	bl	8015bf8 <puts>
		if (step > 3) {
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	f240 80aa 	bls.w	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
			step-=2;
 8000cb8:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cc2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cc4:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4823      	ldr	r0, [pc, #140]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000cd6:	f004 fc6a 	bl	80055ae <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4821      	ldr	r0, [pc, #132]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000cde:	f004 faab 	bl	8005238 <HAL_DAC_Start>
		}
		break;
 8000ce2:	e093      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ce4:	482d      	ldr	r0, [pc, #180]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000ce6:	f014 ff87 	bl	8015bf8 <puts>
		if (cadence <= 50000){
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f200 808c 	bhi.w	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
			cadence *= 2;
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000d00:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000d0c:	e080      	b.n	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
 8000d0e:	bf00      	nop
 8000d10:	080163ec 	.word	0x080163ec
 8000d14:	58020400 	.word	0x58020400
 8000d18:	080163f8 	.word	0x080163f8
 8000d1c:	58020800 	.word	0x58020800
 8000d20:	08016404 	.word	0x08016404
 8000d24:	08016410 	.word	0x08016410
 8000d28:	08016420 	.word	0x08016420
 8000d2c:	0801642c 	.word	0x0801642c
 8000d30:	08016438 	.word	0x08016438
 8000d34:	08016444 	.word	0x08016444
 8000d38:	08016454 	.word	0x08016454
 8000d3c:	08016460 	.word	0x08016460
 8000d40:	0801646c 	.word	0x0801646c
 8000d44:	08016478 	.word	0x08016478
 8000d48:	08016484 	.word	0x08016484
 8000d4c:	08016494 	.word	0x08016494
 8000d50:	080164a4 	.word	0x080164a4
 8000d54:	080164b0 	.word	0x080164b0
 8000d58:	080164c0 	.word	0x080164c0
 8000d5c:	24000554 	.word	0x24000554
 8000d60:	2400000c 	.word	0x2400000c
 8000d64:	240002f4 	.word	0x240002f4
 8000d68:	080164d0 	.word	0x080164d0
 8000d6c:	080164e0 	.word	0x080164e0
 8000d70:	24000b57 	.word	0x24000b57
 8000d74:	080164e8 	.word	0x080164e8
 8000d78:	080164f4 	.word	0x080164f4
 8000d7c:	24000b56 	.word	0x24000b56
 8000d80:	080164fc 	.word	0x080164fc
 8000d84:	08016504 	.word	0x08016504
 8000d88:	24000b58 	.word	0x24000b58
 8000d8c:	0801650c 	.word	0x0801650c
 8000d90:	08016514 	.word	0x08016514
 8000d94:	24000008 	.word	0x24000008
 8000d98:	0801651c 	.word	0x0801651c
 8000d9c:	08016528 	.word	0x08016528
 8000da0:	24000004 	.word	0x24000004
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000da4:	481e      	ldr	r0, [pc, #120]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000da6:	f014 ff27 	bl	8015bf8 <puts>
		if (cadence >= 6250){
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f641 0269 	movw	r2, #6249	; 0x1869
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d92e      	bls.n	8000e14 <HAL_UART_RxCpltCallback+0x7c4>
			cadence /= 2;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dbe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dca:	e023      	b.n	8000e14 <HAL_UART_RxCpltCallback+0x7c4>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000dcc:	4816      	ldr	r0, [pc, #88]	; (8000e28 <HAL_UART_RxCpltCallback+0x7d8>)
 8000dce:	f014 ff13 	bl	8015bf8 <puts>
		// TODO: Exit stop mode
		break;
 8000dd2:	e020      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <HAL_UART_RxCpltCallback+0x7dc>)
 8000dd6:	f014 ff0f 	bl	8015bf8 <puts>
		// TODO: Enter stop mode
		break;
 8000dda:	e01c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000ddc:	4814      	ldr	r0, [pc, #80]	; (8000e30 <HAL_UART_RxCpltCallback+0x7e0>)
 8000dde:	f014 ff0b 	bl	8015bf8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_UART_RxCpltCallback+0x7e4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f012 ff70 	bl	8013ccc <xTaskResumeFromISR>
		break;
 8000dec:	e013      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <HAL_UART_RxCpltCallback+0x7e8>)
 8000df0:	f014 ff02 	bl	8015bf8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_UART_RxCpltCallback+0x7ec>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f012 ff67 	bl	8013ccc <xTaskResumeFromISR>
		break;
 8000dfe:	e00a      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	default:{
		printf("Unknown Command\n");
 8000e00:	480f      	ldr	r0, [pc, #60]	; (8000e40 <HAL_UART_RxCpltCallback+0x7f0>)
 8000e02:	f014 fef9 	bl	8015bf8 <puts>
		break;
 8000e06:	e006      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e08:	bf00      	nop
 8000e0a:	e004      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e0c:	bf00      	nop
 8000e0e:	e002      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e14:	bf00      	nop
	}
	}
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	08016534 	.word	0x08016534
 8000e24:	24000004 	.word	0x24000004
 8000e28:	08016540 	.word	0x08016540
 8000e2c:	08016550 	.word	0x08016550
 8000e30:	08016560 	.word	0x08016560
 8000e34:	24000690 	.word	0x24000690
 8000e38:	0801656c 	.word	0x0801656c
 8000e3c:	240008f0 	.word	0x240008f0
 8000e40:	08016578 	.word	0x08016578

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f002 fc62 	bl	8003710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f89e 	bl	8000f8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e50:	f000 f91c 	bl	800108c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 fe6e 	bl	8001b34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e58:	f000 fe3c 	bl	8001ad4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000e5c:	f000 fda0 	bl	80019a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e60:	f000 fdec 	bl	8001a3c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e64:	f000 fb28 	bl	80014b8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e68:	f000 fc1e 	bl	80016a8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e6c:	f000 fd22 	bl	80018b4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e70:	f000 fc72 	bl	8001758 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000e74:	f000 fa5c 	bl	8001330 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000e78:	f000 f938 	bl	80010ec <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e7c:	f000 faea 	bl	8001454 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000e80:	f000 fbba 	bl	80015f8 <MX_SPI1_Init>
  MX_RTC_Init();
 8000e84:	f000 fb5a 	bl	800153c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000e88:	f001 f816 	bl	8001eb8 <handshake>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <main+0x52>
	{
		Error_Handler();
 8000e92:	f001 fd61 	bl	8002958 <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e96:	2100      	movs	r1, #0
 8000e98:	4825      	ldr	r0, [pc, #148]	; (8000f30 <main+0xec>)
 8000e9a:	f00d fa15 	bl	800e2c8 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4824      	ldr	r0, [pc, #144]	; (8000f34 <main+0xf0>)
 8000ea2:	f00d fa11 	bl	800e2c8 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4823      	ldr	r0, [pc, #140]	; (8000f38 <main+0xf4>)
 8000eaa:	f00d fa0d 	bl	800e2c8 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eae:	f011 faab 	bl	8012408 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <main+0xf8>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4822      	ldr	r0, [pc, #136]	; (8000f40 <main+0xfc>)
 8000eb8:	f011 faf0 	bl	801249c <osThreadNew>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <main+0x100>)
 8000ec0:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ec2:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <main+0x104>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4821      	ldr	r0, [pc, #132]	; (8000f4c <main+0x108>)
 8000ec8:	f011 fae8 	bl	801249c <osThreadNew>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <main+0x10c>)
 8000ed0:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000ed2:	4a20      	ldr	r2, [pc, #128]	; (8000f54 <main+0x110>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4820      	ldr	r0, [pc, #128]	; (8000f58 <main+0x114>)
 8000ed8:	f011 fae0 	bl	801249c <osThreadNew>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <main+0x118>)
 8000ee0:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <main+0x11c>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <main+0x120>)
 8000ee8:	f011 fad8 	bl	801249c <osThreadNew>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <main+0x124>)
 8000ef0:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <main+0x128>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	481e      	ldr	r0, [pc, #120]	; (8000f70 <main+0x12c>)
 8000ef8:	f011 fad0 	bl	801249c <osThreadNew>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <main+0x130>)
 8000f00:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <main+0x134>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	481d      	ldr	r0, [pc, #116]	; (8000f7c <main+0x138>)
 8000f08:	f011 fac8 	bl	801249c <osThreadNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <main+0x13c>)
 8000f10:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f011 fbb0 	bl	8012678 <osEventFlagsNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <main+0x140>)
 8000f1c:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f1e:	f001 f859 	bl	8001fd4 <system_setup>
	printf("Starting kernal...\n");
 8000f22:	4819      	ldr	r0, [pc, #100]	; (8000f88 <main+0x144>)
 8000f24:	f014 fe68 	bl	8015bf8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f28:	f011 fa92 	bl	8012450 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f2c:	e7fe      	b.n	8000f2c <main+0xe8>
 8000f2e:	bf00      	nop
 8000f30:	24000508 	.word	0x24000508
 8000f34:	24000554 	.word	0x24000554
 8000f38:	240005a0 	.word	0x240005a0
 8000f3c:	080165d4 	.word	0x080165d4
 8000f40:	080026f5 	.word	0x080026f5
 8000f44:	24000680 	.word	0x24000680
 8000f48:	080165f8 	.word	0x080165f8
 8000f4c:	08002739 	.word	0x08002739
 8000f50:	24000684 	.word	0x24000684
 8000f54:	0801661c 	.word	0x0801661c
 8000f58:	0800277d 	.word	0x0800277d
 8000f5c:	24000688 	.word	0x24000688
 8000f60:	08016640 	.word	0x08016640
 8000f64:	080027c1 	.word	0x080027c1
 8000f68:	2400068c 	.word	0x2400068c
 8000f6c:	08016664 	.word	0x08016664
 8000f70:	080027e5 	.word	0x080027e5
 8000f74:	24000690 	.word	0x24000690
 8000f78:	08016688 	.word	0x08016688
 8000f7c:	0800288d 	.word	0x0800288d
 8000f80:	240008f0 	.word	0x240008f0
 8000f84:	24000b5c 	.word	0x24000b5c
 8000f88:	08016588 	.word	0x08016588

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09c      	sub	sp, #112	; 0x70
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	224c      	movs	r2, #76	; 0x4c
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f014 fcd6 	bl	801594c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f014 fcd0 	bl	801594c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fac:	2002      	movs	r0, #2
 8000fae:	f008 fb51 	bl	8009654 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b33      	ldr	r3, [pc, #204]	; (8001084 <SystemClock_Config+0xf8>)
 8000fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fba:	4a32      	ldr	r2, [pc, #200]	; (8001084 <SystemClock_Config+0xf8>)
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <SystemClock_Config+0xf8>)
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <SystemClock_Config+0xfc>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fd4:	4a2c      	ldr	r2, [pc, #176]	; (8001088 <SystemClock_Config+0xfc>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <SystemClock_Config+0xfc>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe8:	bf00      	nop
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <SystemClock_Config+0xfc>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff6:	d1f8      	bne.n	8000fea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2340      	movs	r3, #64	; 0x40
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001008:	2302      	movs	r3, #2
 800100a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800100c:	2300      	movs	r3, #0
 800100e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001014:	230c      	movs	r3, #12
 8001016:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001024:	230c      	movs	r3, #12
 8001026:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001028:	2300      	movs	r3, #0
 800102a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4618      	mov	r0, r3
 8001038:	f008 fb46 	bl	80096c8 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001042:	f001 fc89 	bl	8002958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	233f      	movs	r3, #63	; 0x3f
 8001048:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2303      	movs	r3, #3
 800104c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800105a:	2340      	movs	r3, #64	; 0x40
 800105c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800105e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001062:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2102      	movs	r1, #2
 800106c:	4618      	mov	r0, r3
 800106e:	f008 ff85 	bl	8009f7c <HAL_RCC_ClockConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001078:	f001 fc6e 	bl	8002958 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	3770      	adds	r7, #112	; 0x70
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	58000400 	.word	0x58000400
 8001088:	58024800 	.word	0x58024800

0800108c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0b0      	sub	sp, #192	; 0xc0
 8001090:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	22c0      	movs	r2, #192	; 0xc0
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f014 fc57 	bl	801594c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800109e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80010aa:	2304      	movs	r3, #4
 80010ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80010ae:	230c      	movs	r3, #12
 80010b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80010b2:	2305      	movs	r3, #5
 80010b4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010be:	23c0      	movs	r3, #192	; 0xc0
 80010c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 fb1f 	bl	800a718 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80010e0:	f001 fc3a 	bl	8002958 <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	37c0      	adds	r7, #192	; 0xc0
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]
 800110e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001110:	4b7a      	ldr	r3, [pc, #488]	; (80012fc <MX_ADC1_Init+0x210>)
 8001112:	4a7b      	ldr	r2, [pc, #492]	; (8001300 <MX_ADC1_Init+0x214>)
 8001114:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001116:	4b79      	ldr	r3, [pc, #484]	; (80012fc <MX_ADC1_Init+0x210>)
 8001118:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800111c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111e:	4b77      	ldr	r3, [pc, #476]	; (80012fc <MX_ADC1_Init+0x210>)
 8001120:	2208      	movs	r2, #8
 8001122:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001124:	4b75      	ldr	r3, [pc, #468]	; (80012fc <MX_ADC1_Init+0x210>)
 8001126:	2201      	movs	r2, #1
 8001128:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112a:	4b74      	ldr	r3, [pc, #464]	; (80012fc <MX_ADC1_Init+0x210>)
 800112c:	2204      	movs	r2, #4
 800112e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001130:	4b72      	ldr	r3, [pc, #456]	; (80012fc <MX_ADC1_Init+0x210>)
 8001132:	2200      	movs	r2, #0
 8001134:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001136:	4b71      	ldr	r3, [pc, #452]	; (80012fc <MX_ADC1_Init+0x210>)
 8001138:	2201      	movs	r2, #1
 800113a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 800113c:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <MX_ADC1_Init+0x210>)
 800113e:	220b      	movs	r2, #11
 8001140:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001142:	4b6e      	ldr	r3, [pc, #440]	; (80012fc <MX_ADC1_Init+0x210>)
 8001144:	2200      	movs	r2, #0
 8001146:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001148:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <MX_ADC1_Init+0x210>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800114e:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <MX_ADC1_Init+0x210>)
 8001150:	2200      	movs	r2, #0
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001154:	4b69      	ldr	r3, [pc, #420]	; (80012fc <MX_ADC1_Init+0x210>)
 8001156:	2203      	movs	r2, #3
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800115a:	4b68      	ldr	r3, [pc, #416]	; (80012fc <MX_ADC1_Init+0x210>)
 800115c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001162:	4b66      	ldr	r3, [pc, #408]	; (80012fc <MX_ADC1_Init+0x210>)
 8001164:	2200      	movs	r2, #0
 8001166:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001168:	4b64      	ldr	r3, [pc, #400]	; (80012fc <MX_ADC1_Init+0x210>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001170:	4862      	ldr	r0, [pc, #392]	; (80012fc <MX_ADC1_Init+0x210>)
 8001172:	f002 fd59 	bl	8003c28 <HAL_ADC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800117c:	f001 fbec 	bl	8002958 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	485c      	ldr	r0, [pc, #368]	; (80012fc <MX_ADC1_Init+0x210>)
 800118c:	f003 fe74 	bl	8004e78 <HAL_ADCEx_MultiModeConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001196:	f001 fbdf 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800119a:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <MX_ADC1_Init+0x218>)
 800119c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119e:	2306      	movs	r3, #6
 80011a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80011a2:	2307      	movs	r3, #7
 80011a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ac:	2304      	movs	r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	484f      	ldr	r0, [pc, #316]	; (80012fc <MX_ADC1_Init+0x210>)
 80011be:	f002 ffb7 	bl	8004130 <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80011c8:	f001 fbc6 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011cc:	4b4e      	ldr	r3, [pc, #312]	; (8001308 <MX_ADC1_Init+0x21c>)
 80011ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011d0:	230c      	movs	r3, #12
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4848      	ldr	r0, [pc, #288]	; (80012fc <MX_ADC1_Init+0x210>)
 80011da:	f002 ffa9 	bl	8004130 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80011e4:	f001 fbb8 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011e8:	4b48      	ldr	r3, [pc, #288]	; (800130c <MX_ADC1_Init+0x220>)
 80011ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011ec:	2312      	movs	r3, #18
 80011ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	4841      	ldr	r0, [pc, #260]	; (80012fc <MX_ADC1_Init+0x210>)
 80011f6:	f002 ff9b 	bl	8004130 <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001200:	f001 fbaa 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001204:	4b42      	ldr	r3, [pc, #264]	; (8001310 <MX_ADC1_Init+0x224>)
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001208:	2318      	movs	r3, #24
 800120a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	483a      	ldr	r0, [pc, #232]	; (80012fc <MX_ADC1_Init+0x210>)
 8001212:	f002 ff8d 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800121c:	f001 fb9c 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <MX_ADC1_Init+0x228>)
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	4619      	mov	r1, r3
 800122e:	4833      	ldr	r0, [pc, #204]	; (80012fc <MX_ADC1_Init+0x210>)
 8001230:	f002 ff7e 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800123a:	f001 fb8d 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800123e:	4b36      	ldr	r3, [pc, #216]	; (8001318 <MX_ADC1_Init+0x22c>)
 8001240:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001242:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	482b      	ldr	r0, [pc, #172]	; (80012fc <MX_ADC1_Init+0x210>)
 800124e:	f002 ff6f 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001258:	f001 fb7e 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <MX_ADC1_Init+0x230>)
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001260:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001264:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	4824      	ldr	r0, [pc, #144]	; (80012fc <MX_ADC1_Init+0x210>)
 800126c:	f002 ff60 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001276:	f001 fb6f 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <MX_ADC1_Init+0x234>)
 800127c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800127e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001282:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	481c      	ldr	r0, [pc, #112]	; (80012fc <MX_ADC1_Init+0x210>)
 800128a:	f002 ff51 	bl	8004130 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001294:	f001 fb60 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <MX_ADC1_Init+0x238>)
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800129c:	f44f 738c 	mov.w	r3, #280	; 0x118
 80012a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4815      	ldr	r0, [pc, #84]	; (80012fc <MX_ADC1_Init+0x210>)
 80012a8:	f002 ff42 	bl	8004130 <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80012b2:	f001 fb51 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_ADC1_Init+0x23c>)
 80012b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80012ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_ADC1_Init+0x210>)
 80012c6:	f002 ff33 	bl	8004130 <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80012d0:	f001 fb42 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_ADC1_Init+0x240>)
 80012d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80012d8:	f240 2306 	movw	r3, #518	; 0x206
 80012dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_ADC1_Init+0x210>)
 80012e4:	f002 ff24 	bl	8004130 <HAL_ADC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80012ee:	f001 fb33 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2400013c 	.word	0x2400013c
 8001300:	40022000 	.word	0x40022000
 8001304:	0c900008 	.word	0x0c900008
 8001308:	10c00010 	.word	0x10c00010
 800130c:	14f00020 	.word	0x14f00020
 8001310:	1d500080 	.word	0x1d500080
 8001314:	21800100 	.word	0x21800100
 8001318:	25b00200 	.word	0x25b00200
 800131c:	2a000400 	.word	0x2a000400
 8001320:	2e300800 	.word	0x2e300800
 8001324:	3ac04000 	.word	0x3ac04000
 8001328:	3ef08000 	.word	0x3ef08000
 800132c:	47520000 	.word	0x47520000

08001330 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001348:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <MX_ADC3_Init+0x110>)
 800134a:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <MX_ADC3_Init+0x114>)
 800134c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800134e:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <MX_ADC3_Init+0x110>)
 8001350:	2208      	movs	r2, #8
 8001352:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <MX_ADC3_Init+0x110>)
 8001356:	2201      	movs	r2, #1
 8001358:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <MX_ADC3_Init+0x110>)
 800135c:	2204      	movs	r2, #4
 800135e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001360:	4b37      	ldr	r3, [pc, #220]	; (8001440 <MX_ADC3_Init+0x110>)
 8001362:	2200      	movs	r2, #0
 8001364:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001366:	4b36      	ldr	r3, [pc, #216]	; (8001440 <MX_ADC3_Init+0x110>)
 8001368:	2201      	movs	r2, #1
 800136a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 800136c:	4b34      	ldr	r3, [pc, #208]	; (8001440 <MX_ADC3_Init+0x110>)
 800136e:	2204      	movs	r2, #4
 8001370:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001372:	4b33      	ldr	r3, [pc, #204]	; (8001440 <MX_ADC3_Init+0x110>)
 8001374:	2200      	movs	r2, #0
 8001376:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001378:	4b31      	ldr	r3, [pc, #196]	; (8001440 <MX_ADC3_Init+0x110>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800137e:	4b30      	ldr	r3, [pc, #192]	; (8001440 <MX_ADC3_Init+0x110>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <MX_ADC3_Init+0x110>)
 8001386:	2203      	movs	r2, #3
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800138a:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <MX_ADC3_Init+0x110>)
 800138c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <MX_ADC3_Init+0x110>)
 8001394:	2200      	movs	r2, #0
 8001396:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <MX_ADC3_Init+0x110>)
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013a0:	4827      	ldr	r0, [pc, #156]	; (8001440 <MX_ADC3_Init+0x110>)
 80013a2:	f002 fc41 	bl	8003c28 <HAL_ADC_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80013ac:	f001 fad4 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <MX_ADC3_Init+0x118>)
 80013b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b4:	2306      	movs	r3, #6
 80013b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80013b8:	2307      	movs	r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013c2:	2304      	movs	r3, #4
 80013c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <MX_ADC3_Init+0x110>)
 80013d4:	f002 feac 	bl	8004130 <HAL_ADC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80013de:	f001 fabb 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_ADC3_Init+0x11c>)
 80013e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013e6:	230c      	movs	r3, #12
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <MX_ADC3_Init+0x110>)
 80013f0:	f002 fe9e 	bl	8004130 <HAL_ADC_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80013fa:	f001 faad 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013fe:	2301      	movs	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001402:	2312      	movs	r3, #18
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_ADC3_Init+0x110>)
 800140c:	f002 fe90 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001416:	f001 fa9f 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_ADC3_Init+0x120>)
 800141c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800141e:	2318      	movs	r3, #24
 8001420:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_ADC3_Init+0x110>)
 8001428:	f002 fe82 	bl	8004130 <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001432:	f001 fa91 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	240001a0 	.word	0x240001a0
 8001444:	58026000 	.word	0x58026000
 8001448:	cb840000 	.word	0xcb840000
 800144c:	cfb80000 	.word	0xcfb80000
 8001450:	04300002 	.word	0x04300002

08001454 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2224      	movs	r2, #36	; 0x24
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f014 fa73 	bl	801594c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_DAC1_Init+0x5c>)
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_DAC1_Init+0x60>)
 800146a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800146c:	4810      	ldr	r0, [pc, #64]	; (80014b0 <MX_DAC1_Init+0x5c>)
 800146e:	f003 fec1 	bl	80051f4 <HAL_DAC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001478:	f001 fa6e 	bl	8002958 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001480:	230a      	movs	r3, #10
 8001482:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001488:	2301      	movs	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_DAC1_Init+0x5c>)
 8001498:	f004 f8dc 	bl	8005654 <HAL_DAC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80014a2:	f001 fa59 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	240002f4 	.word	0x240002f4
 80014b4:	40007400 	.word	0x40007400

080014b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_I2C1_Init+0x78>)
 80014be:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <MX_I2C1_Init+0x7c>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_I2C1_Init+0x78>)
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <MX_I2C1_Init+0x80>)
 80014c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_I2C1_Init+0x78>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_I2C1_Init+0x78>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_I2C1_Init+0x78>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_I2C1_Init+0x78>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_I2C1_Init+0x78>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_I2C1_Init+0x78>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_I2C1_Init+0x78>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f2:	480f      	ldr	r0, [pc, #60]	; (8001530 <MX_I2C1_Init+0x78>)
 80014f4:	f007 faa2 	bl	8008a3c <HAL_I2C_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014fe:	f001 fa2b 	bl	8002958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <MX_I2C1_Init+0x78>)
 8001506:	f007 ffe9 	bl	80094dc <HAL_I2CEx_ConfigAnalogFilter>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001510:	f001 fa22 	bl	8002958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_I2C1_Init+0x78>)
 8001518:	f008 f82b 	bl	8009572 <HAL_I2CEx_ConfigDigitalFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001522:	f001 fa19 	bl	8002958 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001526:	2001      	movs	r0, #1
 8001528:	f008 f870 	bl	800960c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	24000380 	.word	0x24000380
 8001534:	40005400 	.word	0x40005400
 8001538:	0020081f 	.word	0x0020081f

0800153c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001550:	2300      	movs	r3, #0
 8001552:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_RTC_Init+0xb4>)
 8001556:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <MX_RTC_Init+0xb8>)
 8001558:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_RTC_Init+0xb4>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_RTC_Init+0xb4>)
 8001562:	2220      	movs	r2, #32
 8001564:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_RTC_Init+0xb4>)
 8001568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800156c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_RTC_Init+0xb4>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_RTC_Init+0xb4>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_RTC_Init+0xb4>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_RTC_Init+0xb4>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001586:	481a      	ldr	r0, [pc, #104]	; (80015f0 <MX_RTC_Init+0xb4>)
 8001588:	f00b fdc4 	bl	800d114 <HAL_RTC_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001592:	f001 f9e1 	bl	8002958 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001596:	2300      	movs	r3, #0
 8001598:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800159a:	2300      	movs	r3, #0
 800159c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800159e:	2300      	movs	r3, #0
 80015a0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2201      	movs	r2, #1
 80015ae:	4619      	mov	r1, r3
 80015b0:	480f      	ldr	r0, [pc, #60]	; (80015f0 <MX_RTC_Init+0xb4>)
 80015b2:	f00b fe31 	bl	800d218 <HAL_RTC_SetTime>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80015bc:	f001 f9cc 	bl	8002958 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80015c0:	2305      	movs	r3, #5
 80015c2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80015c4:	2305      	movs	r3, #5
 80015c6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80015c8:	2331      	movs	r3, #49	; 0x31
 80015ca:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80015cc:	2324      	movs	r3, #36	; 0x24
 80015ce:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	2201      	movs	r2, #1
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <MX_RTC_Init+0xb4>)
 80015d8:	f00b ff18 	bl	800d40c <HAL_RTC_SetDate>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80015e2:	f001 f9b9 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	240003d4 	.word	0x240003d4
 80015f4:	58004000 	.word	0x58004000

080015f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <MX_SPI1_Init+0xa8>)
 80015fe:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <MX_SPI1_Init+0xac>)
 8001600:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001604:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001608:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <MX_SPI1_Init+0xa8>)
 800160c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001610:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001614:	220f      	movs	r2, #15
 8001616:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MX_SPI1_Init+0xa8>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001626:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800162a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_SPI1_Init+0xa8>)
 800162e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001632:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_SPI1_Init+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001648:	2200      	movs	r2, #0
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_SPI1_Init+0xa8>)
 800164e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001652:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001656:	2200      	movs	r2, #0
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_SPI1_Init+0xa8>)
 800165c:	2200      	movs	r2, #0
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_SPI1_Init+0xa8>)
 800166e:	2200      	movs	r2, #0
 8001670:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_SPI1_Init+0xa8>)
 800167a:	2200      	movs	r2, #0
 800167c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001686:	2200      	movs	r2, #0
 8001688:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_SPI1_Init+0xa8>)
 800168c:	f00c f864 	bl	800d758 <HAL_SPI_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001696:	f001 f95f 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	240003f8 	.word	0x240003f8
 80016a4:	40013000 	.word	0x40013000

080016a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016ae:	4a29      	ldr	r2, [pc, #164]	; (8001754 <MX_SPI2_Init+0xac>)
 80016b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016c4:	220f      	movs	r2, #15
 80016c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016de:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_SPI2_Init+0xa8>)
 80016fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001702:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_SPI2_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_SPI2_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_SPI2_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_SPI2_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_SPI2_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_SPI2_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_SPI2_Init+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_SPI2_Init+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_SPI2_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_SPI2_Init+0xa8>)
 800173c:	f00c f80c 	bl	800d758 <HAL_SPI_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001746:	f001 f907 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	24000480 	.word	0x24000480
 8001754:	40003800 	.word	0x40003800

08001758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b09a      	sub	sp, #104	; 0x68
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001778:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	222c      	movs	r2, #44	; 0x2c
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f014 f8da 	bl	801594c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001798:	4b44      	ldr	r3, [pc, #272]	; (80018ac <MX_TIM1_Init+0x154>)
 800179a:	4a45      	ldr	r2, [pc, #276]	; (80018b0 <MX_TIM1_Init+0x158>)
 800179c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800179e:	4b43      	ldr	r3, [pc, #268]	; (80018ac <MX_TIM1_Init+0x154>)
 80017a0:	2263      	movs	r2, #99	; 0x63
 80017a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <MX_TIM1_Init+0x154>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <MX_TIM1_Init+0x154>)
 80017ac:	f24f 4223 	movw	r2, #62499	; 0xf423
 80017b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <MX_TIM1_Init+0x154>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b8:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <MX_TIM1_Init+0x154>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <MX_TIM1_Init+0x154>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017c4:	4839      	ldr	r0, [pc, #228]	; (80018ac <MX_TIM1_Init+0x154>)
 80017c6:	f00c fc18 	bl	800dffa <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017d0:	f001 f8c2 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017de:	4619      	mov	r1, r3
 80017e0:	4832      	ldr	r0, [pc, #200]	; (80018ac <MX_TIM1_Init+0x154>)
 80017e2:	f00d fa57 	bl	800ec94 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017ec:	f001 f8b4 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017f0:	482e      	ldr	r0, [pc, #184]	; (80018ac <MX_TIM1_Init+0x154>)
 80017f2:	f00c fec3 	bl	800e57c <HAL_TIM_PWM_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80017fc:	f001 f8ac 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800180c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001810:	4619      	mov	r1, r3
 8001812:	4826      	ldr	r0, [pc, #152]	; (80018ac <MX_TIM1_Init+0x154>)
 8001814:	f00d ff94 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800181e:	f001 f89b 	bl	8002958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001822:	2360      	movs	r3, #96	; 0x60
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001826:	f240 13df 	movw	r3, #479	; 0x1df
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	4818      	ldr	r0, [pc, #96]	; (80018ac <MX_TIM1_Init+0x154>)
 800184a:	f00d f90f 	bl	800ea6c <HAL_TIM_PWM_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001854:	f001 f880 	bl	8002958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001870:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800187a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4807      	ldr	r0, [pc, #28]	; (80018ac <MX_TIM1_Init+0x154>)
 800188e:	f00d ffe5 	bl	800f85c <HAL_TIMEx_ConfigBreakDeadTime>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001898:	f001 f85e 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <MX_TIM1_Init+0x154>)
 800189e:	f001 fbe9 	bl	8003074 <HAL_TIM_MspPostInit>

}
 80018a2:	bf00      	nop
 80018a4:	3768      	adds	r7, #104	; 0x68
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	24000508 	.word	0x24000508
 80018b0:	40010000 	.word	0x40010000

080018b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <MX_TIM2_Init+0xe8>)
 80018e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <MX_TIM2_Init+0xe8>)
 80018f0:	2263      	movs	r2, #99	; 0x63
 80018f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <MX_TIM2_Init+0xe8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <MX_TIM2_Init+0xe8>)
 80018fc:	f640 4234 	movw	r2, #3124	; 0xc34
 8001900:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <MX_TIM2_Init+0xe8>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <MX_TIM2_Init+0xe8>)
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800190e:	4823      	ldr	r0, [pc, #140]	; (800199c <MX_TIM2_Init+0xe8>)
 8001910:	f00c fb73 	bl	800dffa <HAL_TIM_Base_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800191a:	f001 f81d 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001928:	4619      	mov	r1, r3
 800192a:	481c      	ldr	r0, [pc, #112]	; (800199c <MX_TIM2_Init+0xe8>)
 800192c:	f00d f9b2 	bl	800ec94 <HAL_TIM_ConfigClockSource>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001936:	f001 f80f 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800193a:	4818      	ldr	r0, [pc, #96]	; (800199c <MX_TIM2_Init+0xe8>)
 800193c:	f00c fe1e 	bl	800e57c <HAL_TIM_PWM_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001946:	f001 f807 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800194a:	2320      	movs	r3, #32
 800194c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	4810      	ldr	r0, [pc, #64]	; (800199c <MX_TIM2_Init+0xe8>)
 800195a:	f00d fef1 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001964:	f000 fff8 	bl	8002958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001968:	2360      	movs	r3, #96	; 0x60
 800196a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	220c      	movs	r2, #12
 800197c:	4619      	mov	r1, r3
 800197e:	4807      	ldr	r0, [pc, #28]	; (800199c <MX_TIM2_Init+0xe8>)
 8001980:	f00d f874 	bl	800ea6c <HAL_TIM_PWM_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800198a:	f000 ffe5 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800198e:	4803      	ldr	r0, [pc, #12]	; (800199c <MX_TIM2_Init+0xe8>)
 8001990:	f001 fb70 	bl	8003074 <HAL_TIM_MspPostInit>

}
 8001994:	bf00      	nop
 8001996:	3738      	adds	r7, #56	; 0x38
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	24000554 	.word	0x24000554

080019a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019c0:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <MX_TIM3_Init+0x98>)
 80019c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019c6:	2263      	movs	r2, #99	; 0x63
 80019c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019e4:	4813      	ldr	r0, [pc, #76]	; (8001a34 <MX_TIM3_Init+0x94>)
 80019e6:	f00c fb08 	bl	800dffa <HAL_TIM_Base_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019f0:	f000 ffb2 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <MX_TIM3_Init+0x94>)
 8001a02:	f00d f947 	bl	800ec94 <HAL_TIM_ConfigClockSource>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a0c:	f000 ffa4 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_TIM3_Init+0x94>)
 8001a1e:	f00d fe8f 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a28:	f000 ff96 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	240005a0 	.word	0x240005a0
 8001a38:	40000400 	.word	0x40000400

08001a3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a42:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <MX_USART1_UART_Init+0x94>)
 8001a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a48:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a84:	4811      	ldr	r0, [pc, #68]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a86:	f00d ff85 	bl	800f994 <HAL_UART_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a90:	f000 ff62 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a94:	2100      	movs	r1, #0
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a98:	f010 fba7 	bl	80121ea <HAL_UARTEx_SetTxFifoThreshold>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001aa2:	f000 ff59 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4808      	ldr	r0, [pc, #32]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001aaa:	f010 fbdc 	bl	8012266 <HAL_UARTEx_SetRxFifoThreshold>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ab4:	f000 ff50 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001aba:	f010 fb5d 	bl	8012178 <HAL_UARTEx_DisableFifoMode>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ac4:	f000 ff48 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	240005ec 	.word	0x240005ec
 8001ad0:	40011000 	.word	0x40011000

08001ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_DMA_Init+0x5c>)
 8001adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae0:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <MX_DMA_Init+0x5c>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_DMA_Init+0x5c>)
 8001aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2105      	movs	r1, #5
 8001afc:	200b      	movs	r0, #11
 8001afe:	f003 fb51 	bl	80051a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b02:	200b      	movs	r0, #11
 8001b04:	f003 fb68 	bl	80051d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2105      	movs	r1, #5
 8001b0c:	200c      	movs	r0, #12
 8001b0e:	f003 fb49 	bl	80051a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b12:	200c      	movs	r0, #12
 8001b14:	f003 fb60 	bl	80051d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2105      	movs	r1, #5
 8001b1c:	2010      	movs	r0, #16
 8001b1e:	f003 fb41 	bl	80051a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b22:	2010      	movs	r0, #16
 8001b24:	f003 fb58 	bl	80051d8 <HAL_NVIC_EnableIRQ>

}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	58024400 	.word	0x58024400

08001b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b78:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <MX_GPIO_Init+0xe8>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001bc8:	4815      	ldr	r0, [pc, #84]	; (8001c20 <MX_GPIO_Init+0xec>)
 8001bca:	f006 ff1d 	bl	8008a08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2164      	movs	r1, #100	; 0x64
 8001bd2:	4814      	ldr	r0, [pc, #80]	; (8001c24 <MX_GPIO_Init+0xf0>)
 8001bd4:	f006 ff18 	bl	8008a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001bd8:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001bdc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <MX_GPIO_Init+0xec>)
 8001bf2:	f006 fd41 	bl	8008678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_GPIO_Init+0xf0>)
 8001c0e:	f006 fd33 	bl	8008678 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	58020800 	.word	0x58020800
 8001c24:	58020400 	.word	0x58020400

08001c28 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001c32:	2300      	movs	r3, #0
 8001c34:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	b299      	uxth	r1, r3
 8001c3a:	f107 0208 	add.w	r2, r7, #8
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2301      	movs	r3, #1
 8001c46:	4817      	ldr	r0, [pc, #92]	; (8001ca4 <poll_i2c_sensor+0x7c>)
 8001c48:	f006 ff94 	bl	8008b74 <HAL_I2C_Master_Transmit>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001c50:	7b7b      	ldrb	r3, [r7, #13]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001c56:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <poll_i2c_sensor+0x80>)
 8001c58:	f013 ffce 	bl	8015bf8 <puts>
 8001c5c:	e01c      	b.n	8001c98 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	b299      	uxth	r1, r3
 8001c62:	f107 0208 	add.w	r2, r7, #8
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <poll_i2c_sensor+0x7c>)
 8001c70:	f007 f898 	bl	8008da4 <HAL_I2C_Master_Receive>
 8001c74:	4603      	mov	r3, r0
 8001c76:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001c78:	7b7b      	ldrb	r3, [r7, #13]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001c7e:	480b      	ldr	r0, [pc, #44]	; (8001cac <poll_i2c_sensor+0x84>)
 8001c80:	f013 ffba 	bl	8015bf8 <puts>
 8001c84:	e008      	b.n	8001c98 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001c86:	7a3b      	ldrb	r3, [r7, #8]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001c8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c90:	7a7a      	ldrb	r2, [r7, #9]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	10db      	asrs	r3, r3, #3
 8001c96:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001c98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	24000380 	.word	0x24000380
 8001ca8:	0801659c 	.word	0x0801659c
 8001cac:	080165ac 	.word	0x080165ac

08001cb0 <receive_pmt_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001cb8:	f107 010c 	add.w	r1, r7, #12
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	480c      	ldr	r0, [pc, #48]	; (8001cf4 <receive_pmt_spi+0x44>)
 8001cc2:	f00b fe6d 	bl	800d9a0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001cca:	7b7b      	ldrb	r3, [r7, #13]
 8001ccc:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <receive_pmt_spi+0x44>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <receive_pmt_spi+0x44>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cdc:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7bba      	ldrb	r2, [r7, #14]
 8001ce2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	701a      	strb	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	240003f8 	.word	0x240003f8

08001cf8 <receive_erpa_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001d00:	f107 010c 	add.w	r1, r7, #12
 8001d04:	2364      	movs	r3, #100	; 0x64
 8001d06:	2201      	movs	r2, #1
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <receive_erpa_spi+0x44>)
 8001d0a:	f00b fe49 	bl	800d9a0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d12:	7b7b      	ldrb	r3, [r7, #13]
 8001d14:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <receive_erpa_spi+0x44>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <receive_erpa_spi+0x44>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d24:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7bba      	ldrb	r2, [r7, #14]
 8001d2a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	701a      	strb	r2, [r3, #0]
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	24000480 	.word	0x24000480

08001d40 <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <receive_erpa_adc+0x30>)
 8001d4a:	885b      	ldrh	r3, [r3, #2]
 8001d4c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <receive_erpa_adc+0x30>)
 8001d50:	895b      	ldrh	r3, [r3, #10]
 8001d52:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	89fa      	ldrh	r2, [r7, #14]
 8001d58:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	89ba      	ldrh	r2, [r7, #12]
 8001d60:	801a      	strh	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	24000be0 	.word	0x24000be0

08001d74 <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001d7c:	2390      	movs	r3, #144	; 0x90
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff52 	bl	8001c28 <poll_i2c_sensor>
 8001d84:	4603      	mov	r3, r0
 8001d86:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001d88:	2394      	movs	r3, #148	; 0x94
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff4c 	bl	8001c28 <poll_i2c_sensor>
 8001d90:	4603      	mov	r3, r0
 8001d92:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001d94:	2392      	movs	r3, #146	; 0x92
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff46 	bl	8001c28 <poll_i2c_sensor>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001da0:	2396      	movs	r3, #150	; 0x96
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff40 	bl	8001c28 <poll_i2c_sensor>
 8001da8:	4603      	mov	r3, r0
 8001daa:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	89fa      	ldrh	r2, [r7, #14]
 8001db0:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3302      	adds	r3, #2
 8001db6:	89ba      	ldrh	r2, [r7, #12]
 8001db8:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	897a      	ldrh	r2, [r7, #10]
 8001dc0:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3306      	adds	r3, #6
 8001dc6:	893a      	ldrh	r2, [r7, #8]
 8001dc8:	801a      	strh	r2, [r3, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <receive_hk_adc1+0x90>)
 8001dde:	8a9b      	ldrh	r3, [r3, #20]
 8001de0:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <receive_hk_adc1+0x90>)
 8001de4:	8a1b      	ldrh	r3, [r3, #16]
 8001de6:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <receive_hk_adc1+0x90>)
 8001dea:	899b      	ldrh	r3, [r3, #12]
 8001dec:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <receive_hk_adc1+0x90>)
 8001df0:	8a5b      	ldrh	r3, [r3, #18]
 8001df2:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <receive_hk_adc1+0x90>)
 8001df6:	889b      	ldrh	r3, [r3, #4]
 8001df8:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <receive_hk_adc1+0x90>)
 8001dfc:	88db      	ldrh	r3, [r3, #6]
 8001dfe:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <receive_hk_adc1+0x90>)
 8001e02:	89db      	ldrh	r3, [r3, #14]
 8001e04:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <receive_hk_adc1+0x90>)
 8001e08:	891b      	ldrh	r3, [r3, #8]
 8001e0a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <receive_hk_adc1+0x90>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	8bfa      	ldrh	r2, [r7, #30]
 8001e16:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	8bba      	ldrh	r2, [r7, #28]
 8001e1e:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3304      	adds	r3, #4
 8001e24:	8b7a      	ldrh	r2, [r7, #26]
 8001e26:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3306      	adds	r3, #6
 8001e2c:	8b3a      	ldrh	r2, [r7, #24]
 8001e2e:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3308      	adds	r3, #8
 8001e34:	8afa      	ldrh	r2, [r7, #22]
 8001e36:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	330a      	adds	r3, #10
 8001e3c:	8aba      	ldrh	r2, [r7, #20]
 8001e3e:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	330c      	adds	r3, #12
 8001e44:	8a7a      	ldrh	r2, [r7, #18]
 8001e46:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	330e      	adds	r3, #14
 8001e4c:	8a3a      	ldrh	r2, [r7, #16]
 8001e4e:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3310      	adds	r3, #16
 8001e54:	89fa      	ldrh	r2, [r7, #14]
 8001e56:	801a      	strh	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	3724      	adds	r7, #36	; 0x24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	24000be0 	.word	0x24000be0

08001e68 <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <receive_hk_adc3+0x4c>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <receive_hk_adc3+0x4c>)
 8001e78:	885b      	ldrh	r3, [r3, #2]
 8001e7a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <receive_hk_adc3+0x4c>)
 8001e7e:	889b      	ldrh	r3, [r3, #4]
 8001e80:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <receive_hk_adc3+0x4c>)
 8001e84:	88db      	ldrh	r3, [r3, #6]
 8001e86:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	89fa      	ldrh	r2, [r7, #14]
 8001e8c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3302      	adds	r3, #2
 8001e92:	89ba      	ldrh	r2, [r7, #12]
 8001e94:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	897a      	ldrh	r2, [r7, #10]
 8001e9c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3306      	adds	r3, #6
 8001ea2:	893a      	ldrh	r2, [r7, #8]
 8001ea4:	801a      	strh	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	24000c00 	.word	0x24000c00

08001eb8 <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b090      	sub	sp, #64	; 0x40
 8001ebc:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001ec2:	f107 011c 	add.w	r1, r7, #28
 8001ec6:	2364      	movs	r3, #100	; 0x64
 8001ec8:	2209      	movs	r2, #9
 8001eca:	4840      	ldr	r0, [pc, #256]	; (8001fcc <handshake+0x114>)
 8001ecc:	f00d fe40 	bl	800fb50 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001ed0:	7f3b      	ldrb	r3, [r7, #28]
 8001ed2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d1f1      	bne.n	8001ec2 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001ede:	7f7b      	ldrb	r3, [r7, #29]
 8001ee0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001ee4:	7fbb      	ldrb	r3, [r7, #30]
 8001ee6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001eea:	7ffb      	ldrb	r3, [r7, #31]
 8001eec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001ef0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ef4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001ef8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001efc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001f00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f04:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001f1c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f20:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001f22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f26:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001f28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001f2c:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f32:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001f34:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f38:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001f3a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001f3e:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001f40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f42:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001f44:	f107 0318 	add.w	r3, r7, #24
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4820      	ldr	r0, [pc, #128]	; (8001fd0 <handshake+0x118>)
 8001f4e:	f00b fa5d 	bl	800d40c <HAL_RTC_SetDate>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001f58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <handshake+0xac>
	{
		Error_Handler();
 8001f60:	f000 fcfa 	bl	8002958 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2200      	movs	r2, #0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4819      	ldr	r0, [pc, #100]	; (8001fd0 <handshake+0x118>)
 8001f6c:	f00b f954 	bl	800d218 <HAL_RTC_SetTime>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001f76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <handshake+0xca>
	{
		Error_Handler();
 8001f7e:	f000 fceb 	bl	8002958 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8001f82:	23fa      	movs	r3, #250	; 0xfa
 8001f84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa4:	e009      	b.n	8001fba <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8001fa6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001faa:	2364      	movs	r3, #100	; 0x64
 8001fac:	2205      	movs	r2, #5
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <handshake+0x114>)
 8001fb0:	f00d fd40 	bl	800fa34 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8001fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dbf1      	blt.n	8001fa6 <handshake+0xee>
	}

	return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3740      	adds	r7, #64	; 0x40
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	240005ec 	.word	0x240005ec
 8001fd0:	240003d4 	.word	0x240003d4

08001fd4 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 8001fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fdc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001fe2:	210c      	movs	r1, #12
 8001fe4:	4818      	ldr	r0, [pc, #96]	; (8002048 <system_setup+0x74>)
 8001fe6:	f00c fb2b 	bl	800e640 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001fea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ff2:	4816      	ldr	r0, [pc, #88]	; (800204c <system_setup+0x78>)
 8001ff4:	f002 fedc 	bl	8004db0 <HAL_ADCEx_Calibration_Start>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001ffe:	f000 fcab 	bl	8002958 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002002:	220b      	movs	r2, #11
 8002004:	4912      	ldr	r1, [pc, #72]	; (8002050 <system_setup+0x7c>)
 8002006:	4811      	ldr	r0, [pc, #68]	; (800204c <system_setup+0x78>)
 8002008:	f001 ffb0 	bl	8003f6c <HAL_ADC_Start_DMA>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002012:	f000 fca1 	bl	8002958 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002016:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800201a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800201e:	480d      	ldr	r0, [pc, #52]	; (8002054 <system_setup+0x80>)
 8002020:	f002 fec6 	bl	8004db0 <HAL_ADCEx_Calibration_Start>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 800202a:	f000 fc95 	bl	8002958 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800202e:	2204      	movs	r2, #4
 8002030:	4909      	ldr	r1, [pc, #36]	; (8002058 <system_setup+0x84>)
 8002032:	4808      	ldr	r0, [pc, #32]	; (8002054 <system_setup+0x80>)
 8002034:	f001 ff9a 	bl	8003f6c <HAL_ADC_Start_DMA>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800203e:	f000 fc8b 	bl	8002958 <Error_Handler>
	}
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	24000554 	.word	0x24000554
 800204c:	2400013c 	.word	0x2400013c
 8002050:	24000be0 	.word	0x24000be0
 8002054:	240001a0 	.word	0x240001a0
 8002058:	24000c00 	.word	0x24000c00

0800205c <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	2200      	movs	r2, #0
 800206a:	4619      	mov	r1, r3
 800206c:	481d      	ldr	r0, [pc, #116]	; (80020e4 <getTimestamp+0x88>)
 800206e:	f00b f971 	bl	800d354 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	481a      	ldr	r0, [pc, #104]	; (80020e4 <getTimestamp+0x88>)
 800207c:	f00b fa4e 	bl	800d51c <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002086:	fb03 f202 	mul.w	r2, r3, r2
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <getTimestamp+0x88>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8002096:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3301      	adds	r3, #1
 80020a2:	7b7a      	ldrb	r2, [r7, #13]
 80020a4:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3302      	adds	r3, #2
 80020aa:	7bba      	ldrb	r2, [r7, #14]
 80020ac:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3303      	adds	r3, #3
 80020b2:	7c3a      	ldrb	r2, [r7, #16]
 80020b4:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	7c7a      	ldrb	r2, [r7, #17]
 80020bc:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3305      	adds	r3, #5
 80020c2:	7cba      	ldrb	r2, [r7, #18]
 80020c4:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	0a1a      	lsrs	r2, r3, #8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3306      	adds	r3, #6
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3307      	adds	r3, #7
 80020d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	701a      	strb	r2, [r3, #0]

}
 80020dc:	bf00      	nop
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	240003d4 	.word	0x240003d4

080020e8 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80020ee:	bf00      	nop
 80020f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f4:	483a      	ldr	r0, [pc, #232]	; (80021e0 <sample_pmt+0xf8>)
 80020f6:	f006 fc6f 	bl	80089d8 <HAL_GPIO_ReadPin>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f7      	bne.n	80020f0 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002100:	200e      	movs	r0, #14
 8002102:	f013 fc05 	bl	8015910 <malloc>
 8002106:	4603      	mov	r3, r0
 8002108:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800210a:	2002      	movs	r0, #2
 800210c:	f013 fc00 	bl	8015910 <malloc>
 8002110:	4603      	mov	r3, r0
 8002112:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002114:	2008      	movs	r0, #8
 8002116:	f013 fbfb 	bl	8015910 <malloc>
 800211a:	4603      	mov	r3, r0
 800211c:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ff9c 	bl	800205c <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 8002124:	68b8      	ldr	r0, [r7, #8]
 8002126:	f7ff fdc3 	bl	8001cb0 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	22bb      	movs	r2, #187	; 0xbb
 800212e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3301      	adds	r3, #1
 8002134:	22bb      	movs	r2, #187	; 0xbb
 8002136:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002138:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <sample_pmt+0xfc>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3302      	adds	r3, #2
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <sample_pmt+0xfc>)
 800214a:	881a      	ldrh	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3303      	adds	r3, #3
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3304      	adds	r3, #4
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3305      	adds	r3, #5
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	7852      	ldrb	r2, [r2, #1]
 8002166:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3306      	adds	r3, #6
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3307      	adds	r3, #7
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	7852      	ldrb	r2, [r2, #1]
 800217a:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3308      	adds	r3, #8
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	7892      	ldrb	r2, [r2, #2]
 8002184:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3309      	adds	r3, #9
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	78d2      	ldrb	r2, [r2, #3]
 800218e:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	330a      	adds	r3, #10
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	7912      	ldrb	r2, [r2, #4]
 8002198:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	330b      	adds	r3, #11
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	7952      	ldrb	r2, [r2, #5]
 80021a2:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	330c      	adds	r3, #12
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	7992      	ldrb	r2, [r2, #6]
 80021ac:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	330d      	adds	r3, #13
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	79d2      	ldrb	r2, [r2, #7]
 80021b6:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 1);
 80021b8:	2301      	movs	r3, #1
 80021ba:	220e      	movs	r2, #14
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	480a      	ldr	r0, [pc, #40]	; (80021e8 <sample_pmt+0x100>)
 80021c0:	f00d fc38 	bl	800fa34 <HAL_UART_Transmit>
	free(buffer);
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f013 fbab 	bl	8015920 <free>
	free(pmt_spi);
 80021ca:	68b8      	ldr	r0, [r7, #8]
 80021cc:	f013 fba8 	bl	8015920 <free>
	free(timestamp);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f013 fba5 	bl	8015920 <free>
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	58020000 	.word	0x58020000
 80021e4:	24000b50 	.word	0x24000b50
 80021e8:	240005ec 	.word	0x240005ec

080021ec <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80021f2:	bf00      	nop
 80021f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f8:	484e      	ldr	r0, [pc, #312]	; (8002334 <sample_erpa+0x148>)
 80021fa:	f006 fbed 	bl	80089d8 <HAL_GPIO_ReadPin>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f7      	bne.n	80021f4 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002204:	2012      	movs	r0, #18
 8002206:	f013 fb83 	bl	8015910 <malloc>
 800220a:	4603      	mov	r3, r0
 800220c:	60fb      	str	r3, [r7, #12]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800220e:	2002      	movs	r0, #2
 8002210:	f013 fb7e 	bl	8015910 <malloc>
 8002214:	4603      	mov	r3, r0
 8002216:	60bb      	str	r3, [r7, #8]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8002218:	2004      	movs	r0, #4
 800221a:	f013 fb79 	bl	8015910 <malloc>
 800221e:	4603      	mov	r3, r0
 8002220:	607b      	str	r3, [r7, #4]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002222:	2008      	movs	r0, #8
 8002224:	f013 fb74 	bl	8015910 <malloc>
 8002228:	4603      	mov	r3, r0
 800222a:	603b      	str	r3, [r7, #0]
	getTimestamp(timestamp);
 800222c:	6838      	ldr	r0, [r7, #0]
 800222e:	f7ff ff15 	bl	800205c <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 8002232:	68b8      	ldr	r0, [r7, #8]
 8002234:	f7ff fd60 	bl	8001cf8 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fd81 	bl	8001d40 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	22aa      	movs	r2, #170	; 0xaa
 8002242:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	22aa      	movs	r2, #170	; 0xaa
 800224a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 800224c:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <sample_erpa+0x14c>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3302      	adds	r3, #2
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 800225c:	4b36      	ldr	r3, [pc, #216]	; (8002338 <sample_erpa+0x14c>)
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3303      	adds	r3, #3
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3304      	adds	r3, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	881a      	ldrh	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3305      	adds	r3, #5
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3302      	adds	r3, #2
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3306      	adds	r3, #6
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3302      	adds	r3, #2
 800229a:	881a      	ldrh	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3307      	adds	r3, #7
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3308      	adds	r3, #8
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	7812      	ldrb	r2, [r2, #0]
 80022ac:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3309      	adds	r3, #9
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	7852      	ldrb	r2, [r2, #1]
 80022b6:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	330a      	adds	r3, #10
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	330b      	adds	r3, #11
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	7852      	ldrb	r2, [r2, #1]
 80022ca:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	330c      	adds	r3, #12
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	7892      	ldrb	r2, [r2, #2]
 80022d4:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	330d      	adds	r3, #13
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	78d2      	ldrb	r2, [r2, #3]
 80022de:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	330e      	adds	r3, #14
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	7912      	ldrb	r2, [r2, #4]
 80022e8:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	330f      	adds	r3, #15
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	7952      	ldrb	r2, [r2, #5]
 80022f2:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3310      	adds	r3, #16
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	7992      	ldrb	r2, [r2, #6]
 80022fc:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3311      	adds	r3, #17
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	79d2      	ldrb	r2, [r2, #7]
 8002306:	701a      	strb	r2, [r3, #0]



	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 1);
 8002308:	2301      	movs	r3, #1
 800230a:	2212      	movs	r2, #18
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	480b      	ldr	r0, [pc, #44]	; (800233c <sample_erpa+0x150>)
 8002310:	f00d fb90 	bl	800fa34 <HAL_UART_Transmit>
	free(buffer);
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f013 fb03 	bl	8015920 <free>
	free(erpa_spi);
 800231a:	68b8      	ldr	r0, [r7, #8]
 800231c:	f013 fb00 	bl	8015920 <free>
	free(erpa_adc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f013 fafd 	bl	8015920 <free>
	free(timestamp);
 8002326:	6838      	ldr	r0, [r7, #0]
 8002328:	f013 fafa 	bl	8015920 <free>
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	58020400 	.word	0x58020400
 8002338:	24000b52 	.word	0x24000b52
 800233c:	240005ec 	.word	0x240005ec

08002340 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002346:	202e      	movs	r0, #46	; 0x2e
 8002348:	f013 fae2 	bl	8015910 <malloc>
 800234c:	4603      	mov	r3, r0
 800234e:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002350:	2008      	movs	r0, #8
 8002352:	f013 fadd 	bl	8015910 <malloc>
 8002356:	4603      	mov	r3, r0
 8002358:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 800235a:	2012      	movs	r0, #18
 800235c:	f013 fad8 	bl	8015910 <malloc>
 8002360:	4603      	mov	r3, r0
 8002362:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8002364:	2008      	movs	r0, #8
 8002366:	f013 fad3 	bl	8015910 <malloc>
 800236a:	4603      	mov	r3, r0
 800236c:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 800236e:	2008      	movs	r0, #8
 8002370:	f013 face 	bl	8015910 <malloc>
 8002374:	4603      	mov	r3, r0
 8002376:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fe6f 	bl	800205c <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999){
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <sample_hk+0x8c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002386:	db25      	blt.n	80023d4 <sample_hk+0x94>
		receive_hk_i2c(hk_i2c);
 8002388:	6938      	ldr	r0, [r7, #16]
 800238a:	f7ff fcf3 	bl	8001d74 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <sample_hk+0x90>)
 8002398:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	3302      	adds	r3, #2
 800239e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <sample_hk+0x90>)
 80023a6:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	3304      	adds	r3, #4
 80023ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <sample_hk+0x90>)
 80023b4:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	3306      	adds	r3, #6
 80023ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <sample_hk+0x90>)
 80023c2:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80023c4:	4b01      	ldr	r3, [pc, #4]	; (80023cc <sample_hk+0x8c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e01f      	b.n	800240c <sample_hk+0xcc>
 80023cc:	24000000 	.word	0x24000000
 80023d0:	24000c08 	.word	0x24000c08
	}
	else{
		TEMPERATURE_COUNTER++;
 80023d4:	4ba4      	ldr	r3, [pc, #656]	; (8002668 <sample_hk+0x328>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3301      	adds	r3, #1
 80023da:	4aa3      	ldr	r2, [pc, #652]	; (8002668 <sample_hk+0x328>)
 80023dc:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80023de:	4ba3      	ldr	r3, [pc, #652]	; (800266c <sample_hk+0x32c>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80023e8:	4ba0      	ldr	r3, [pc, #640]	; (800266c <sample_hk+0x32c>)
 80023ea:	885a      	ldrh	r2, [r3, #2]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	3302      	adds	r3, #2
 80023f0:	b212      	sxth	r2, r2
 80023f2:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80023f4:	4b9d      	ldr	r3, [pc, #628]	; (800266c <sample_hk+0x32c>)
 80023f6:	889a      	ldrh	r2, [r3, #4]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	3304      	adds	r3, #4
 80023fc:	b212      	sxth	r2, r2
 80023fe:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 8002400:	4b9a      	ldr	r3, [pc, #616]	; (800266c <sample_hk+0x32c>)
 8002402:	88da      	ldrh	r2, [r3, #6]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	3306      	adds	r3, #6
 8002408:	b212      	sxth	r2, r2
 800240a:	801a      	strh	r2, [r3, #0]
	}
	receive_hk_adc1(hk_adc1);
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7ff fce1 	bl	8001dd4 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 8002412:	68b8      	ldr	r0, [r7, #8]
 8002414:	f7ff fd28 	bl	8001e68 <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	22cc      	movs	r2, #204	; 0xcc
 800241c:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	22cc      	movs	r2, #204	; 0xcc
 8002424:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002426:	4b92      	ldr	r3, [pc, #584]	; (8002670 <sample_hk+0x330>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	b29a      	uxth	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3302      	adds	r3, #2
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002436:	4b8e      	ldr	r3, [pc, #568]	; (8002670 <sample_hk+0x330>)
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3303      	adds	r3, #3
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3302      	adds	r3, #2
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	b29a      	uxth	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3304      	adds	r3, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3302      	adds	r3, #2
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3305      	adds	r3, #5
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	b29a      	uxth	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3306      	adds	r3, #6
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	881a      	ldrh	r2, [r3, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3307      	adds	r3, #7
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002484:	121a      	asrs	r2, r3, #8
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3308      	adds	r3, #8
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3309      	adds	r3, #9
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	3302      	adds	r3, #2
 80024a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a4:	121a      	asrs	r2, r3, #8
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	330a      	adds	r3, #10
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	3302      	adds	r3, #2
 80024b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	330b      	adds	r3, #11
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	3304      	adds	r3, #4
 80024c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c6:	121a      	asrs	r2, r3, #8
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	330c      	adds	r3, #12
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	3304      	adds	r3, #4
 80024d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	330d      	adds	r3, #13
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3306      	adds	r3, #6
 80024e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e8:	121a      	asrs	r2, r3, #8
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	330e      	adds	r3, #14
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	3306      	adds	r3, #6
 80024f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	330f      	adds	r3, #15
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	b29a      	uxth	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3310      	adds	r3, #16
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3311      	adds	r3, #17
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3302      	adds	r3, #2
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29a      	uxth	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3312      	adds	r3, #18
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3302      	adds	r3, #2
 8002534:	881a      	ldrh	r2, [r3, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3313      	adds	r3, #19
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3304      	adds	r3, #4
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	b29a      	uxth	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3314      	adds	r3, #20
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3304      	adds	r3, #4
 8002554:	881a      	ldrh	r2, [r3, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3315      	adds	r3, #21
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3306      	adds	r3, #6
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	b29a      	uxth	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3316      	adds	r3, #22
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	3306      	adds	r3, #6
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3317      	adds	r3, #23
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	330c      	adds	r3, #12
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	b29a      	uxth	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3318      	adds	r3, #24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	330c      	adds	r3, #12
 8002594:	881a      	ldrh	r2, [r3, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3319      	adds	r3, #25
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3306      	adds	r3, #6
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	331a      	adds	r3, #26
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3306      	adds	r3, #6
 80025b4:	881a      	ldrh	r2, [r3, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	331b      	adds	r3, #27
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3304      	adds	r3, #4
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	331c      	adds	r3, #28
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	3304      	adds	r3, #4
 80025d4:	881a      	ldrh	r2, [r3, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	331d      	adds	r3, #29
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	330e      	adds	r3, #14
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	331e      	adds	r3, #30
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	330e      	adds	r3, #14
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	331f      	adds	r3, #31
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	3310      	adds	r3, #16
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	b29a      	uxth	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3320      	adds	r3, #32
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3310      	adds	r3, #16
 8002614:	881a      	ldrh	r2, [r3, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3321      	adds	r3, #33	; 0x21
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3308      	adds	r3, #8
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	b29a      	uxth	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3322      	adds	r3, #34	; 0x22
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3308      	adds	r3, #8
 8002634:	881a      	ldrh	r2, [r3, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3323      	adds	r3, #35	; 0x23
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	330a      	adds	r3, #10
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b29a      	uxth	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3324      	adds	r3, #36	; 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	330a      	adds	r3, #10
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3325      	adds	r3, #37	; 0x25
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3326      	adds	r3, #38	; 0x26
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	e006      	b.n	8002674 <sample_hk+0x334>
 8002666:	bf00      	nop
 8002668:	24000000 	.word	0x24000000
 800266c:	24000c08 	.word	0x24000c08
 8002670:	24000b54 	.word	0x24000b54
 8002674:	7812      	ldrb	r2, [r2, #0]
 8002676:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3327      	adds	r3, #39	; 0x27
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	7852      	ldrb	r2, [r2, #1]
 8002680:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3328      	adds	r3, #40	; 0x28
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	7892      	ldrb	r2, [r2, #2]
 800268a:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3329      	adds	r3, #41	; 0x29
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	78d2      	ldrb	r2, [r2, #3]
 8002694:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	332a      	adds	r3, #42	; 0x2a
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	7912      	ldrb	r2, [r2, #4]
 800269e:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	332b      	adds	r3, #43	; 0x2b
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	7952      	ldrb	r2, [r2, #5]
 80026a8:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	332c      	adds	r3, #44	; 0x2c
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	7992      	ldrb	r2, [r2, #6]
 80026b2:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	332d      	adds	r3, #45	; 0x2d
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	79d2      	ldrb	r2, [r2, #7]
 80026bc:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 1);
 80026be:	2301      	movs	r3, #1
 80026c0:	222e      	movs	r2, #46	; 0x2e
 80026c2:	6979      	ldr	r1, [r7, #20]
 80026c4:	480a      	ldr	r0, [pc, #40]	; (80026f0 <sample_hk+0x3b0>)
 80026c6:	f00d f9b5 	bl	800fa34 <HAL_UART_Transmit>
	free(buffer);
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f013 f928 	bl	8015920 <free>
	free(hk_i2c);
 80026d0:	6938      	ldr	r0, [r7, #16]
 80026d2:	f013 f925 	bl	8015920 <free>
	free(hk_adc1);
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f013 f922 	bl	8015920 <free>
	free(hk_adc3);
 80026dc:	68b8      	ldr	r0, [r7, #8]
 80026de:	f013 f91f 	bl	8015920 <free>
	free(timestamp);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f013 f91c 	bl	8015920 <free>
}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	240005ec 	.word	0x240005ec

080026f4 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <PMT_init+0x38>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002704:	2200      	movs	r2, #0
 8002706:	2101      	movs	r1, #1
 8002708:	f010 f83a 	bl	8012780 <osEventFlagsWait>
		if(PMT_ON){
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <PMT_init+0x3c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <PMT_init+0x30>
			sample_pmt();
 8002714:	f7ff fce8 	bl	80020e8 <sample_pmt>
			pmt_seq++;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <PMT_init+0x40>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <PMT_init+0x40>)
 8002722:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002724:	f00f ff4c 	bl	80125c0 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002728:	e7e8      	b.n	80026fc <PMT_init+0x8>
 800272a:	bf00      	nop
 800272c:	24000b5c 	.word	0x24000b5c
 8002730:	24000b56 	.word	0x24000b56
 8002734:	24000b50 	.word	0x24000b50

08002738 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <ERPA_init+0x38>)
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002748:	2200      	movs	r2, #0
 800274a:	2102      	movs	r1, #2
 800274c:	f010 f818 	bl	8012780 <osEventFlagsWait>
		if (ERPA_ON)
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <ERPA_init+0x3c>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <ERPA_init+0x30>
		{
			sample_erpa();
 8002758:	f7ff fd48 	bl	80021ec <sample_erpa>
			erpa_seq++;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <ERPA_init+0x40>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <ERPA_init+0x40>)
 8002766:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002768:	f00f ff2a 	bl	80125c0 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800276c:	e7e8      	b.n	8002740 <ERPA_init+0x8>
 800276e:	bf00      	nop
 8002770:	24000b5c 	.word	0x24000b5c
 8002774:	24000b57 	.word	0x24000b57
 8002778:	24000b52 	.word	0x24000b52

0800277c <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HK_init+0x38>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278c:	2200      	movs	r2, #0
 800278e:	2104      	movs	r1, #4
 8002790:	f00f fff6 	bl	8012780 <osEventFlagsWait>
		if(HK_ON)
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HK_init+0x3c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HK_init+0x30>
		{
			sample_hk();
 800279c:	f7ff fdd0 	bl	8002340 <sample_hk>
			hk_seq++;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HK_init+0x40>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <HK_init+0x40>)
 80027aa:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 80027ac:	f00f ff08 	bl	80125c0 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80027b0:	e7e8      	b.n	8002784 <HK_init+0x8>
 80027b2:	bf00      	nop
 80027b4:	24000b5c 	.word	0x24000b5c
 80027b8:	24000b58 	.word	0x24000b58
 80027bc:	24000b54 	.word	0x24000b54

080027c0 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80027c8:	2201      	movs	r2, #1
 80027ca:	4904      	ldr	r1, [pc, #16]	; (80027dc <UART_RX_init+0x1c>)
 80027cc:	4804      	ldr	r0, [pc, #16]	; (80027e0 <UART_RX_init+0x20>)
 80027ce:	f00d fa87 	bl	800fce0 <HAL_UART_Receive_IT>
		osDelay(5);
 80027d2:	2005      	movs	r0, #5
 80027d4:	f00f ff35 	bl	8012642 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80027d8:	e7f6      	b.n	80027c8 <UART_RX_init+0x8>
 80027da:	bf00      	nop
 80027dc:	24000b60 	.word	0x24000b60
 80027e0:	240005ec 	.word	0x240005ec

080027e4 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <GPIO_on_init+0x9c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00f ff05 	bl	8012600 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <GPIO_on_init+0xa0>)
 80027f8:	2104      	movs	r1, #4
 80027fa:	2201      	movs	r2, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f006 f903 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 8002802:	2064      	movs	r0, #100	; 0x64
 8002804:	f00f ff1d 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <GPIO_on_init+0xa0>)
 800280a:	2120      	movs	r1, #32
 800280c:	2201      	movs	r2, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f006 f8fa 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 8002814:	2064      	movs	r0, #100	; 0x64
 8002816:	f00f ff14 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <GPIO_on_init+0xa4>)
 800281c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002820:	2201      	movs	r2, #1
 8002822:	4618      	mov	r0, r3
 8002824:	f006 f8f0 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 8002828:	2064      	movs	r0, #100	; 0x64
 800282a:	f00f ff0a 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <GPIO_on_init+0xa4>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	2201      	movs	r2, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f006 f8e7 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 800283a:	2064      	movs	r0, #100	; 0x64
 800283c:	f00f ff01 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <GPIO_on_init+0xa4>)
 8002842:	2140      	movs	r1, #64	; 0x40
 8002844:	2201      	movs	r2, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f006 f8de 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 800284c:	2064      	movs	r0, #100	; 0x64
 800284e:	f00f fef8 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <GPIO_on_init+0xa4>)
 8002854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002858:	2201      	movs	r2, #1
 800285a:	4618      	mov	r0, r3
 800285c:	f006 f8d4 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 8002860:	2064      	movs	r0, #100	; 0x64
 8002862:	f00f feee 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <GPIO_on_init+0xa4>)
 8002868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800286c:	2201      	movs	r2, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f006 f8ca 	bl	8008a08 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002874:	4b02      	ldr	r3, [pc, #8]	; (8002880 <GPIO_on_init+0x9c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f00f fec1 	bl	8012600 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800287e:	e7ba      	b.n	80027f6 <GPIO_on_init+0x12>
 8002880:	24000690 	.word	0x24000690
 8002884:	58020400 	.word	0x58020400
 8002888:	58020800 	.word	0x58020800

0800288c <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <GPIO_off_init+0x9c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f00f feb1 	bl	8012600 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 800289e:	4b23      	ldr	r3, [pc, #140]	; (800292c <GPIO_off_init+0xa0>)
 80028a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028a4:	2200      	movs	r2, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f006 f8ae 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 80028ac:	2064      	movs	r0, #100	; 0x64
 80028ae:	f00f fec8 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <GPIO_off_init+0xa0>)
 80028b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b8:	2200      	movs	r2, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f006 f8a4 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 80028c0:	2064      	movs	r0, #100	; 0x64
 80028c2:	f00f febe 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <GPIO_off_init+0xa0>)
 80028c8:	2140      	movs	r1, #64	; 0x40
 80028ca:	2200      	movs	r2, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f006 f89b 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 80028d2:	2064      	movs	r0, #100	; 0x64
 80028d4:	f00f feb5 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <GPIO_off_init+0xa0>)
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	2200      	movs	r2, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f006 f892 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 80028e4:	2064      	movs	r0, #100	; 0x64
 80028e6:	f00f feac 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <GPIO_off_init+0xa0>)
 80028ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f0:	2200      	movs	r2, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f006 f888 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 80028f8:	2064      	movs	r0, #100	; 0x64
 80028fa:	f00f fea2 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <GPIO_off_init+0xa4>)
 8002900:	2120      	movs	r1, #32
 8002902:	2200      	movs	r2, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f006 f87f 	bl	8008a08 <HAL_GPIO_WritePin>
		osDelay(100);
 800290a:	2064      	movs	r0, #100	; 0x64
 800290c:	f00f fe99 	bl	8012642 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002910:	4b07      	ldr	r3, [pc, #28]	; (8002930 <GPIO_off_init+0xa4>)
 8002912:	2104      	movs	r1, #4
 8002914:	2200      	movs	r2, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f006 f876 	bl	8008a08 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 800291c:	4b02      	ldr	r3, [pc, #8]	; (8002928 <GPIO_off_init+0x9c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f00f fe6d 	bl	8012600 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002926:	e7ba      	b.n	800289e <GPIO_off_init+0x12>
 8002928:	240008f0 	.word	0x240008f0
 800292c:	58020800 	.word	0x58020800
 8002930:	58020400 	.word	0x58020400

08002934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002946:	f000 ff1f 	bl	8003788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40001000 	.word	0x40001000

08002958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002960:	e7fe      	b.n	8002960 <Error_Handler+0x8>
	...

08002964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_MspInit+0x38>)
 800296c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_MspInit+0x38>)
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_MspInit+0x38>)
 800297c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	210f      	movs	r1, #15
 800298c:	f06f 0001 	mvn.w	r0, #1
 8002990:	f002 fc08 	bl	80051a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	58024400 	.word	0x58024400

080029a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08e      	sub	sp, #56	; 0x38
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a7b      	ldr	r2, [pc, #492]	; (8002bac <HAL_ADC_MspInit+0x20c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	f040 8091 	bne.w	8002ae6 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029c4:	4b7a      	ldr	r3, [pc, #488]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 80029c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029ca:	4a79      	ldr	r2, [pc, #484]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 80029cc:	f043 0320 	orr.w	r3, r3, #32
 80029d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029d4:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 80029d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e2:	4b73      	ldr	r3, [pc, #460]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	4a71      	ldr	r2, [pc, #452]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f2:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a00:	4b6b      	ldr	r3, [pc, #428]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a06:	4a6a      	ldr	r2, [pc, #424]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a10:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1e:	4b64      	ldr	r3, [pc, #400]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a24:	4a62      	ldr	r2, [pc, #392]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2e:	4b60      	ldr	r3, [pc, #384]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002a3c:	2333      	movs	r3, #51	; 0x33
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a40:	2303      	movs	r3, #3
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4859      	ldr	r0, [pc, #356]	; (8002bb4 <HAL_ADC_MspInit+0x214>)
 8002a50:	f005 fe12 	bl	8008678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002a54:	23ce      	movs	r3, #206	; 0xce
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a64:	4619      	mov	r1, r3
 8002a66:	4854      	ldr	r0, [pc, #336]	; (8002bb8 <HAL_ADC_MspInit+0x218>)
 8002a68:	f005 fe06 	bl	8008678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a70:	2303      	movs	r3, #3
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	484f      	ldr	r0, [pc, #316]	; (8002bbc <HAL_ADC_MspInit+0x21c>)
 8002a80:	f005 fdfa 	bl	8008678 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002a84:	4b4e      	ldr	r3, [pc, #312]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002a86:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <HAL_ADC_MspInit+0x224>)
 8002a88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a8a:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002a8c:	2209      	movs	r2, #9
 8002a8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a90:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a96:	4b4a      	ldr	r3, [pc, #296]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a9c:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002aac:	4b44      	ldr	r3, [pc, #272]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002abc:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ac8:	483d      	ldr	r0, [pc, #244]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002aca:	f002 ff99 	bl	8005a00 <HAL_DMA_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002ad4:	f7ff ff40 	bl	8002958 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a39      	ldr	r2, [pc, #228]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002adc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ade:	4a38      	ldr	r2, [pc, #224]	; (8002bc0 <HAL_ADC_MspInit+0x220>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ae4:	e05e      	b.n	8002ba4 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <HAL_ADC_MspInit+0x228>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d159      	bne.n	8002ba4 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002af0:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af6:	4a2e      	ldr	r2, [pc, #184]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b14:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_ADC_MspInit+0x210>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002b2c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002b30:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002b34:	f000 fe54 	bl	80037e0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002b38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002b3c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002b40:	f000 fe4e 	bl	80037e0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002b44:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b46:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <HAL_ADC_MspInit+0x230>)
 8002b48:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b4c:	2273      	movs	r2, #115	; 0x73
 8002b4e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b50:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b62:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b6a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b72:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b7a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002b88:	4810      	ldr	r0, [pc, #64]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b8a:	f002 ff39 	bl	8005a00 <HAL_DMA_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002b94:	f7ff fee0 	bl	8002958 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002b9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ba4:	bf00      	nop
 8002ba6:	3738      	adds	r7, #56	; 0x38
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	58020800 	.word	0x58020800
 8002bb8:	58020000 	.word	0x58020000
 8002bbc:	58020400 	.word	0x58020400
 8002bc0:	24000204 	.word	0x24000204
 8002bc4:	40020010 	.word	0x40020010
 8002bc8:	58026000 	.word	0x58026000
 8002bcc:	2400027c 	.word	0x2400027c
 8002bd0:	40020028 	.word	0x40020028

08002bd4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a34      	ldr	r2, [pc, #208]	; (8002cc4 <HAL_DAC_MspInit+0xf0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d161      	bne.n	8002cba <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_DAC_MspInit+0xf4>)
 8002bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bfc:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_DAC_MspInit+0xf4>)
 8002bfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c06:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_DAC_MspInit+0xf4>)
 8002c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c14:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <HAL_DAC_MspInit+0xf4>)
 8002c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1a:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <HAL_DAC_MspInit+0xf4>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c24:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_DAC_MspInit+0xf4>)
 8002c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c32:	2310      	movs	r3, #16
 8002c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c36:	2303      	movs	r3, #3
 8002c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3e:	f107 0314 	add.w	r3, r7, #20
 8002c42:	4619      	mov	r1, r3
 8002c44:	4821      	ldr	r0, [pc, #132]	; (8002ccc <HAL_DAC_MspInit+0xf8>)
 8002c46:	f005 fd17 	bl	8008678 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002c4a:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c4c:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_DAC_MspInit+0x100>)
 8002c4e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c52:	2243      	movs	r2, #67	; 0x43
 8002c54:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c56:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c58:	2240      	movs	r2, #64	; 0x40
 8002c5a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c68:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c70:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c78:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c80:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002c8e:	4810      	ldr	r0, [pc, #64]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002c90:	f002 feb6 	bl	8005a00 <HAL_DMA_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002c9a:	f7ff fe5d 	bl	8002958 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_DAC_MspInit+0xfc>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2105      	movs	r1, #5
 8002cae:	2036      	movs	r0, #54	; 0x36
 8002cb0:	f002 fa78 	bl	80051a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cb4:	2036      	movs	r0, #54	; 0x36
 8002cb6:	f002 fa8f 	bl	80051d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002cba:	bf00      	nop
 8002cbc:	3728      	adds	r7, #40	; 0x28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40007400 	.word	0x40007400
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	58020000 	.word	0x58020000
 8002cd0:	24000308 	.word	0x24000308
 8002cd4:	40020088 	.word	0x40020088

08002cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b0ba      	sub	sp, #232	; 0xe8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cf0:	f107 0310 	add.w	r3, r7, #16
 8002cf4:	22c0      	movs	r2, #192	; 0xc0
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f012 fe27 	bl	801594c <memset>
  if(hi2c->Instance==I2C1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_I2C_MspInit+0xc8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d146      	bne.n	8002d96 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d08:	f04f 0208 	mov.w	r2, #8
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f007 fcfa 	bl	800a718 <HAL_RCCEx_PeriphCLKConfig>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002d2a:	f7ff fe15 	bl	8002958 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_I2C_MspInit+0xcc>)
 8002d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d34:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_I2C_MspInit+0xcc>)
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_I2C_MspInit+0xcc>)
 8002d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d54:	2312      	movs	r3, #18
 8002d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d66:	2304      	movs	r3, #4
 8002d68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d70:	4619      	mov	r1, r3
 8002d72:	480d      	ldr	r0, [pc, #52]	; (8002da8 <HAL_I2C_MspInit+0xd0>)
 8002d74:	f005 fc80 	bl	8008678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_I2C_MspInit+0xcc>)
 8002d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_I2C_MspInit+0xcc>)
 8002d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_I2C_MspInit+0xcc>)
 8002d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d96:	bf00      	nop
 8002d98:	37e8      	adds	r7, #232	; 0xe8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40005400 	.word	0x40005400
 8002da4:	58024400 	.word	0x58024400
 8002da8:	58020400 	.word	0x58020400

08002dac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0b2      	sub	sp, #200	; 0xc8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002db4:	f107 0308 	add.w	r3, r7, #8
 8002db8:	22c0      	movs	r2, #192	; 0xc0
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f012 fdc5 	bl	801594c <memset>
  if(hrtc->Instance==RTC)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_RTC_MspInit+0x5c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d119      	bne.n	8002e00 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002dcc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de0:	f107 0308 	add.w	r3, r7, #8
 8002de4:	4618      	mov	r0, r3
 8002de6:	f007 fc97 	bl	800a718 <HAL_RCCEx_PeriphCLKConfig>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002df0:	f7ff fdb2 	bl	8002958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RTC_MspInit+0x60>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_RTC_MspInit+0x60>)
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e00:	bf00      	nop
 8002e02:	37c8      	adds	r7, #200	; 0xc8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	58004000 	.word	0x58004000
 8002e0c:	58024400 	.word	0x58024400

08002e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0bc      	sub	sp, #240	; 0xf0
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e28:	f107 0318 	add.w	r3, r7, #24
 8002e2c:	22c0      	movs	r2, #192	; 0xc0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f012 fd8b 	bl	801594c <memset>
  if(hspi->Instance==SPI1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_SPI_MspInit+0x15c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d145      	bne.n	8002ecc <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e50:	f107 0318 	add.w	r3, r7, #24
 8002e54:	4618      	mov	r0, r3
 8002e56:	f007 fc5f 	bl	800a718 <HAL_RCCEx_PeriphCLKConfig>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002e60:	f7ff fd7a 	bl	8002958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e64:	4b42      	ldr	r3, [pc, #264]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e6a:	4a41      	ldr	r2, [pc, #260]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e74:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e88:	4a39      	ldr	r2, [pc, #228]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002e8a:	f043 0302 	orr.w	r3, r3, #2
 8002e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e92:	4b37      	ldr	r3, [pc, #220]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002ea0:	2318      	movs	r3, #24
 8002ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eb8:	2305      	movs	r3, #5
 8002eba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	482b      	ldr	r0, [pc, #172]	; (8002f74 <HAL_SPI_MspInit+0x164>)
 8002ec6:	f005 fbd7 	bl	8008678 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002eca:	e04a      	b.n	8002f62 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <HAL_SPI_MspInit+0x168>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d145      	bne.n	8002f62 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002ed6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ee6:	f107 0318 	add.w	r3, r7, #24
 8002eea:	4618      	mov	r0, r3
 8002eec:	f007 fc14 	bl	800a718 <HAL_RCCEx_PeriphCLKConfig>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002ef6:	f7ff fd2f 	bl	8002958 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f00:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f0a:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f1e:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <HAL_SPI_MspInit+0x160>)
 8002f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f36:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f50:	2305      	movs	r3, #5
 8002f52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4805      	ldr	r0, [pc, #20]	; (8002f74 <HAL_SPI_MspInit+0x164>)
 8002f5e:	f005 fb8b 	bl	8008678 <HAL_GPIO_Init>
}
 8002f62:	bf00      	nop
 8002f64:	37f0      	adds	r7, #240	; 0xf0
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40013000 	.word	0x40013000
 8002f70:	58024400 	.word	0x58024400
 8002f74:	58020400 	.word	0x58020400
 8002f78:	40003800 	.word	0x40003800

08002f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a37      	ldr	r2, [pc, #220]	; (8003068 <HAL_TIM_Base_MspInit+0xec>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d12f      	bne.n	8002fee <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_TIM_Base_MspInit+0xf0>)
 8002f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f94:	4a35      	ldr	r2, [pc, #212]	; (800306c <HAL_TIM_Base_MspInit+0xf0>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f9e:	4b33      	ldr	r3, [pc, #204]	; (800306c <HAL_TIM_Base_MspInit+0xf0>)
 8002fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2105      	movs	r1, #5
 8002fb0:	2018      	movs	r0, #24
 8002fb2:	f002 f8f7 	bl	80051a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002fb6:	2018      	movs	r0, #24
 8002fb8:	f002 f90e 	bl	80051d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2105      	movs	r1, #5
 8002fc0:	2019      	movs	r0, #25
 8002fc2:	f002 f8ef 	bl	80051a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002fc6:	2019      	movs	r0, #25
 8002fc8:	f002 f906 	bl	80051d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2105      	movs	r1, #5
 8002fd0:	201a      	movs	r0, #26
 8002fd2:	f002 f8e7 	bl	80051a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002fd6:	201a      	movs	r0, #26
 8002fd8:	f002 f8fe 	bl	80051d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2105      	movs	r1, #5
 8002fe0:	201b      	movs	r0, #27
 8002fe2:	f002 f8df 	bl	80051a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002fe6:	201b      	movs	r0, #27
 8002fe8:	f002 f8f6 	bl	80051d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fec:	e038      	b.n	8003060 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff6:	d117      	bne.n	8003028 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_TIM_Base_MspInit+0xf0>)
 8002ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_TIM_Base_MspInit+0xf0>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_TIM_Base_MspInit+0xf0>)
 800300a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2105      	movs	r1, #5
 800301a:	201c      	movs	r0, #28
 800301c:	f002 f8c2 	bl	80051a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003020:	201c      	movs	r0, #28
 8003022:	f002 f8d9 	bl	80051d8 <HAL_NVIC_EnableIRQ>
}
 8003026:	e01b      	b.n	8003060 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a10      	ldr	r2, [pc, #64]	; (8003070 <HAL_TIM_Base_MspInit+0xf4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d116      	bne.n	8003060 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <HAL_TIM_Base_MspInit+0xf0>)
 8003034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003038:	4a0c      	ldr	r2, [pc, #48]	; (800306c <HAL_TIM_Base_MspInit+0xf0>)
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_TIM_Base_MspInit+0xf0>)
 8003044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2105      	movs	r1, #5
 8003054:	201d      	movs	r0, #29
 8003056:	f002 f8a5 	bl	80051a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800305a:	201d      	movs	r0, #29
 800305c:	f002 f8bc 	bl	80051d8 <HAL_NVIC_EnableIRQ>
}
 8003060:	bf00      	nop
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40010000 	.word	0x40010000
 800306c:	58024400 	.word	0x58024400
 8003070:	40000400 	.word	0x40000400

08003074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <HAL_TIM_MspPostInit+0xb8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d120      	bne.n	80030d8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <HAL_TIM_MspPostInit+0xbc>)
 8003098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309c:	4a24      	ldr	r2, [pc, #144]	; (8003130 <HAL_TIM_MspPostInit+0xbc>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a6:	4b22      	ldr	r3, [pc, #136]	; (8003130 <HAL_TIM_MspPostInit+0xbc>)
 80030a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ba:	2302      	movs	r3, #2
 80030bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ca:	f107 0314 	add.w	r3, r7, #20
 80030ce:	4619      	mov	r1, r3
 80030d0:	4818      	ldr	r0, [pc, #96]	; (8003134 <HAL_TIM_MspPostInit+0xc0>)
 80030d2:	f005 fad1 	bl	8008678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030d6:	e024      	b.n	8003122 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e0:	d11f      	bne.n	8003122 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_TIM_MspPostInit+0xbc>)
 80030e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e8:	4a11      	ldr	r2, [pc, #68]	; (8003130 <HAL_TIM_MspPostInit+0xbc>)
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_TIM_MspPostInit+0xbc>)
 80030f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003112:	2301      	movs	r3, #1
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003116:	f107 0314 	add.w	r3, r7, #20
 800311a:	4619      	mov	r1, r3
 800311c:	4806      	ldr	r0, [pc, #24]	; (8003138 <HAL_TIM_MspPostInit+0xc4>)
 800311e:	f005 faab 	bl	8008678 <HAL_GPIO_Init>
}
 8003122:	bf00      	nop
 8003124:	3728      	adds	r7, #40	; 0x28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40010000 	.word	0x40010000
 8003130:	58024400 	.word	0x58024400
 8003134:	58020000 	.word	0x58020000
 8003138:	58020400 	.word	0x58020400

0800313c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b0ba      	sub	sp, #232	; 0xe8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	22c0      	movs	r2, #192	; 0xc0
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f012 fbf5 	bl	801594c <memset>
  if(huart->Instance==USART1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2b      	ldr	r2, [pc, #172]	; (8003214 <HAL_UART_MspInit+0xd8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d14e      	bne.n	800320a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800316c:	f04f 0201 	mov.w	r2, #1
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003178:	2300      	movs	r3, #0
 800317a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800317e:	f107 0310 	add.w	r3, r7, #16
 8003182:	4618      	mov	r0, r3
 8003184:	f007 fac8 	bl	800a718 <HAL_RCCEx_PeriphCLKConfig>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800318e:	f7ff fbe3 	bl	8002958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_UART_MspInit+0xdc>)
 8003194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003198:	4a1f      	ldr	r2, [pc, #124]	; (8003218 <HAL_UART_MspInit+0xdc>)
 800319a:	f043 0310 	orr.w	r3, r3, #16
 800319e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031a2:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_UART_MspInit+0xdc>)
 80031a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_UART_MspInit+0xdc>)
 80031b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b6:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_UART_MspInit+0xdc>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c0:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_UART_MspInit+0xdc>)
 80031c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031e8:	2307      	movs	r3, #7
 80031ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4809      	ldr	r0, [pc, #36]	; (800321c <HAL_UART_MspInit+0xe0>)
 80031f6:	f005 fa3f 	bl	8008678 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2105      	movs	r1, #5
 80031fe:	2025      	movs	r0, #37	; 0x25
 8003200:	f001 ffd0 	bl	80051a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003204:	2025      	movs	r0, #37	; 0x25
 8003206:	f001 ffe7 	bl	80051d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800320a:	bf00      	nop
 800320c:	37e8      	adds	r7, #232	; 0xe8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40011000 	.word	0x40011000
 8003218:	58024400 	.word	0x58024400
 800321c:	58020000 	.word	0x58020000

08003220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b090      	sub	sp, #64	; 0x40
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	d827      	bhi.n	800327e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800322e:	2200      	movs	r2, #0
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	2036      	movs	r0, #54	; 0x36
 8003234:	f001 ffb6 	bl	80051a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003238:	2036      	movs	r0, #54	; 0x36
 800323a:	f001 ffcd 	bl	80051d8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800323e:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <HAL_InitTick+0xc4>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003244:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_InitTick+0xc8>)
 8003246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800324a:	4a27      	ldr	r2, [pc, #156]	; (80032e8 <HAL_InitTick+0xc8>)
 800324c:	f043 0310 	orr.w	r3, r3, #16
 8003250:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_InitTick+0xc8>)
 8003256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003262:	f107 0210 	add.w	r2, r7, #16
 8003266:	f107 0314 	add.w	r3, r7, #20
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f007 fa11 	bl	800a694 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_InitTick+0x6a>
 800327c:	e001      	b.n	8003282 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e02b      	b.n	80032da <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003282:	f007 f9db 	bl	800a63c <HAL_RCC_GetPCLK1Freq>
 8003286:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003288:	e004      	b.n	8003294 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800328a:	f007 f9d7 	bl	800a63c <HAL_RCC_GetPCLK1Freq>
 800328e:	4603      	mov	r3, r0
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003296:	4a15      	ldr	r2, [pc, #84]	; (80032ec <HAL_InitTick+0xcc>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	0c9b      	lsrs	r3, r3, #18
 800329e:	3b01      	subs	r3, #1
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <HAL_InitTick+0xd0>)
 80032a4:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <HAL_InitTick+0xd4>)
 80032a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_InitTick+0xd0>)
 80032aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032b0:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <HAL_InitTick+0xd0>)
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_InitTick+0xd0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <HAL_InitTick+0xd0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80032c2:	480b      	ldr	r0, [pc, #44]	; (80032f0 <HAL_InitTick+0xd0>)
 80032c4:	f00a fe99 	bl	800dffa <HAL_TIM_Base_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d104      	bne.n	80032d8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80032ce:	4808      	ldr	r0, [pc, #32]	; (80032f0 <HAL_InitTick+0xd0>)
 80032d0:	f00a ff82 	bl	800e1d8 <HAL_TIM_Base_Start_IT>
 80032d4:	4603      	mov	r3, r0
 80032d6:	e000      	b.n	80032da <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3740      	adds	r7, #64	; 0x40
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	24000094 	.word	0x24000094
 80032e8:	58024400 	.word	0x58024400
 80032ec:	431bde83 	.word	0x431bde83
 80032f0:	24000c10 	.word	0x24000c10
 80032f4:	40001000 	.word	0x40001000

080032f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80032fc:	e7fe      	b.n	80032fc <NMI_Handler+0x4>

080032fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003302:	e7fe      	b.n	8003302 <HardFault_Handler+0x4>

08003304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <MemManage_Handler+0x4>

0800330a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330e:	e7fe      	b.n	800330e <BusFault_Handler+0x4>

08003310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003314:	e7fe      	b.n	8003314 <UsageFault_Handler+0x4>

08003316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <DMA1_Stream0_IRQHandler+0x10>)
 800332a:	f003 fe93 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	24000204 	.word	0x24000204

08003338 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800333c:	4802      	ldr	r0, [pc, #8]	; (8003348 <DMA1_Stream1_IRQHandler+0x10>)
 800333e:	f003 fe89 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	2400027c 	.word	0x2400027c

0800334c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003350:	4802      	ldr	r0, [pc, #8]	; (800335c <DMA1_Stream5_IRQHandler+0x10>)
 8003352:	f003 fe7f 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	24000308 	.word	0x24000308

08003360 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003364:	4802      	ldr	r0, [pc, #8]	; (8003370 <TIM1_BRK_IRQHandler+0x10>)
 8003366:	f00b fa79 	bl	800e85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	24000508 	.word	0x24000508

08003374 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003378:	4802      	ldr	r0, [pc, #8]	; (8003384 <TIM1_UP_IRQHandler+0x10>)
 800337a:	f00b fa6f 	bl	800e85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	24000508 	.word	0x24000508

08003388 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <TIM1_TRG_COM_IRQHandler+0x10>)
 800338e:	f00b fa65 	bl	800e85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	24000508 	.word	0x24000508

0800339c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <TIM1_CC_IRQHandler+0x10>)
 80033a2:	f00b fa5b 	bl	800e85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	24000508 	.word	0x24000508

080033b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <TIM2_IRQHandler+0x10>)
 80033b6:	f00b fa51 	bl	800e85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	24000554 	.word	0x24000554

080033c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <TIM3_IRQHandler+0x10>)
 80033ca:	f00b fa47 	bl	800e85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	240005a0 	.word	0x240005a0

080033d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <USART1_IRQHandler+0x10>)
 80033de:	f00c fccb 	bl	800fd78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	240005ec 	.word	0x240005ec

080033ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <TIM6_DAC_IRQHandler+0x20>)
 80033f2:	791b      	ldrb	r3, [r3, #4]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80033fa:	4804      	ldr	r0, [pc, #16]	; (800340c <TIM6_DAC_IRQHandler+0x20>)
 80033fc:	f002 f881 	bl	8005502 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003400:	4803      	ldr	r0, [pc, #12]	; (8003410 <TIM6_DAC_IRQHandler+0x24>)
 8003402:	f00b fa2b 	bl	800e85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	240002f4 	.word	0x240002f4
 8003410:	24000c10 	.word	0x24000c10

08003414 <ITM_SendChar>:
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
 800341e:	4b0f      	ldr	r3, [pc, #60]	; (800345c <ITM_SendChar+0x48>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a0e      	ldr	r2, [pc, #56]	; (800345c <ITM_SendChar+0x48>)
 8003424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <ITM_SendChar+0x4c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <ITM_SendChar+0x4c>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	bf00      	nop
 8003438:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f8      	beq.n	8003438 <ITM_SendChar+0x24>
 8003446:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000edfc 	.word	0xe000edfc
 8003460:	e0000e00 	.word	0xe0000e00

08003464 <_read>:
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e00a      	b.n	800348c <_read+0x28>
 8003476:	f3af 8000 	nop.w
 800347a:	4601      	mov	r1, r0
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	60ba      	str	r2, [r7, #8]
 8003482:	b2ca      	uxtb	r2, r1
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbf0      	blt.n	8003476 <_read+0x12>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <_write>:
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e009      	b.n	80034c4 <_write+0x26>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	60ba      	str	r2, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ffab 	bl	8003414 <ITM_SendChar>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3301      	adds	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dbf1      	blt.n	80034b0 <_write+0x12>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_close>:
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <_fstat>:
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	2300      	movs	r3, #0
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_isatty>:
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	2301      	movs	r3, #1
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <_lseek>:
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	2300      	movs	r3, #0
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <_sbrk>:
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <_sbrk+0x5c>)
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <_sbrk+0x60>)
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <_sbrk+0x64>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <_sbrk+0x22>
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <_sbrk+0x64>)
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <_sbrk+0x68>)
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <_sbrk+0x64>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d207      	bcs.n	8003580 <_sbrk+0x40>
 8003570:	f012 f9a4 	bl	80158bc <__errno>
 8003574:	4603      	mov	r3, r0
 8003576:	220c      	movs	r2, #12
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800357e:	e009      	b.n	8003594 <_sbrk+0x54>
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <_sbrk+0x64>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	4a05      	ldr	r2, [pc, #20]	; (80035a4 <_sbrk+0x64>)
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	24080000 	.word	0x24080000
 80035a0:	00000400 	.word	0x00000400
 80035a4:	24000c5c 	.word	0x24000c5c
 80035a8:	240055c8 	.word	0x240055c8

080035ac <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <SystemInit+0xe4>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	4a36      	ldr	r2, [pc, #216]	; (8003690 <SystemInit+0xe4>)
 80035b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <SystemInit+0xe8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d807      	bhi.n	80035dc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80035cc:	4b31      	ldr	r3, [pc, #196]	; (8003694 <SystemInit+0xe8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 030f 	bic.w	r3, r3, #15
 80035d4:	4a2f      	ldr	r2, [pc, #188]	; (8003694 <SystemInit+0xe8>)
 80035d6:	f043 0307 	orr.w	r3, r3, #7
 80035da:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <SystemInit+0xec>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <SystemInit+0xec>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <SystemInit+0xec>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <SystemInit+0xec>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4929      	ldr	r1, [pc, #164]	; (8003698 <SystemInit+0xec>)
 80035f4:	4b29      	ldr	r3, [pc, #164]	; (800369c <SystemInit+0xf0>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <SystemInit+0xe8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003606:	4b23      	ldr	r3, [pc, #140]	; (8003694 <SystemInit+0xe8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 030f 	bic.w	r3, r3, #15
 800360e:	4a21      	ldr	r2, [pc, #132]	; (8003694 <SystemInit+0xe8>)
 8003610:	f043 0307 	orr.w	r3, r3, #7
 8003614:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <SystemInit+0xec>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <SystemInit+0xec>)
 800361e:	2200      	movs	r2, #0
 8003620:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003622:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <SystemInit+0xec>)
 8003624:	2200      	movs	r2, #0
 8003626:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003628:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <SystemInit+0xec>)
 800362a:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <SystemInit+0xf4>)
 800362c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <SystemInit+0xec>)
 8003630:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <SystemInit+0xf8>)
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003634:	4b18      	ldr	r3, [pc, #96]	; (8003698 <SystemInit+0xec>)
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <SystemInit+0xfc>)
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800363a:	4b17      	ldr	r3, [pc, #92]	; (8003698 <SystemInit+0xec>)
 800363c:	2200      	movs	r2, #0
 800363e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <SystemInit+0xec>)
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <SystemInit+0xfc>)
 8003644:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <SystemInit+0xec>)
 8003648:	2200      	movs	r2, #0
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <SystemInit+0xec>)
 800364e:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <SystemInit+0xfc>)
 8003650:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <SystemInit+0xec>)
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <SystemInit+0xec>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <SystemInit+0xec>)
 800365e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003662:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <SystemInit+0xec>)
 8003666:	2200      	movs	r2, #0
 8003668:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <SystemInit+0x100>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <SystemInit+0x104>)
 8003670:	4013      	ands	r3, r2
 8003672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003676:	d202      	bcs.n	800367e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003678:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <SystemInit+0x108>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <SystemInit+0x10c>)
 8003680:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003684:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00
 8003694:	52002000 	.word	0x52002000
 8003698:	58024400 	.word	0x58024400
 800369c:	eaf6ed7f 	.word	0xeaf6ed7f
 80036a0:	02020200 	.word	0x02020200
 80036a4:	01ff0000 	.word	0x01ff0000
 80036a8:	01010280 	.word	0x01010280
 80036ac:	5c001000 	.word	0x5c001000
 80036b0:	ffff0000 	.word	0xffff0000
 80036b4:	51008108 	.word	0x51008108
 80036b8:	52004000 	.word	0x52004000

080036bc <Reset_Handler>:
 80036bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036f4 <LoopFillZerobss+0xe>
 80036c0:	f7ff ff74 	bl	80035ac <SystemInit>
 80036c4:	480c      	ldr	r0, [pc, #48]	; (80036f8 <LoopFillZerobss+0x12>)
 80036c6:	490d      	ldr	r1, [pc, #52]	; (80036fc <LoopFillZerobss+0x16>)
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <LoopFillZerobss+0x1a>)
 80036ca:	2300      	movs	r3, #0
 80036cc:	e002      	b.n	80036d4 <LoopCopyDataInit>

080036ce <CopyDataInit>:
 80036ce:	58d4      	ldr	r4, [r2, r3]
 80036d0:	50c4      	str	r4, [r0, r3]
 80036d2:	3304      	adds	r3, #4

080036d4 <LoopCopyDataInit>:
 80036d4:	18c4      	adds	r4, r0, r3
 80036d6:	428c      	cmp	r4, r1
 80036d8:	d3f9      	bcc.n	80036ce <CopyDataInit>
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <LoopFillZerobss+0x1e>)
 80036dc:	4c0a      	ldr	r4, [pc, #40]	; (8003708 <LoopFillZerobss+0x22>)
 80036de:	2300      	movs	r3, #0
 80036e0:	e001      	b.n	80036e6 <LoopFillZerobss>

080036e2 <FillZerobss>:
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	3204      	adds	r2, #4

080036e6 <LoopFillZerobss>:
 80036e6:	42a2      	cmp	r2, r4
 80036e8:	d3fb      	bcc.n	80036e2 <FillZerobss>
 80036ea:	f012 f8ed 	bl	80158c8 <__libc_init_array>
 80036ee:	f7fd fba9 	bl	8000e44 <main>
 80036f2:	4770      	bx	lr
 80036f4:	24080000 	.word	0x24080000
 80036f8:	24000000 	.word	0x24000000
 80036fc:	24000104 	.word	0x24000104
 8003700:	08016760 	.word	0x08016760
 8003704:	24000120 	.word	0x24000120
 8003708:	240055c4 	.word	0x240055c4

0800370c <ADC3_IRQHandler>:
 800370c:	e7fe      	b.n	800370c <ADC3_IRQHandler>
	...

08003710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003716:	2003      	movs	r0, #3
 8003718:	f001 fd39 	bl	800518e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800371c:	f006 fde4 	bl	800a2e8 <HAL_RCC_GetSysClockFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_Init+0x68>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	4913      	ldr	r1, [pc, #76]	; (800377c <HAL_Init+0x6c>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
 8003738:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800373a:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_Init+0x68>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	4a0e      	ldr	r2, [pc, #56]	; (800377c <HAL_Init+0x6c>)
 8003744:	5cd3      	ldrb	r3, [r2, r3]
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <HAL_Init+0x70>)
 8003752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003754:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <HAL_Init+0x74>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800375a:	2005      	movs	r0, #5
 800375c:	f7ff fd60 	bl	8003220 <HAL_InitTick>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e002      	b.n	8003770 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800376a:	f7ff f8fb 	bl	8002964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	58024400 	.word	0x58024400
 800377c:	080166ac 	.word	0x080166ac
 8003780:	24000090 	.word	0x24000090
 8003784:	2400008c 	.word	0x2400008c

08003788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_IncTick+0x20>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_IncTick+0x24>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4413      	add	r3, r2
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <HAL_IncTick+0x24>)
 800379a:	6013      	str	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	24000098 	.word	0x24000098
 80037ac:	24000c60 	.word	0x24000c60

080037b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return uwTick;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_GetTick+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	24000c60 	.word	0x24000c60

080037c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_GetREVID+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0c1b      	lsrs	r3, r3, #16
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	5c001000 	.word	0x5c001000

080037e0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	401a      	ands	r2, r3
 80037f4:	4904      	ldr	r1, [pc, #16]	; (8003808 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	58000400 	.word	0x58000400

0800380c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	609a      	str	r2, [r3, #8]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	609a      	str	r2, [r3, #8]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3360      	adds	r3, #96	; 0x60
 8003886:	461a      	mov	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	431a      	orrs	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	431a      	orrs	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	611a      	str	r2, [r3, #16]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b087      	sub	sp, #28
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3360      	adds	r3, #96	; 0x60
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	431a      	orrs	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	601a      	str	r2, [r3, #0]
  }
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003942:	b480      	push	{r7}
 8003944:	b087      	sub	sp, #28
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3330      	adds	r3, #48	; 0x30
 8003952:	461a      	mov	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	4413      	add	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	211f      	movs	r1, #31
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	401a      	ands	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	0e9b      	lsrs	r3, r3, #26
 800397a:	f003 011f 	and.w	r1, r3, #31
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	431a      	orrs	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f023 0203 	bic.w	r2, r3, #3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3314      	adds	r3, #20
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0e5b      	lsrs	r3, r3, #25
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	4413      	add	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	0d1b      	lsrs	r3, r3, #20
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2107      	movs	r1, #7
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	401a      	ands	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0d1b      	lsrs	r3, r3, #20
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	431a      	orrs	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a30:	43db      	mvns	r3, r3
 8003a32:	401a      	ands	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f003 0318 	and.w	r3, r3, #24
 8003a3a:	4908      	ldr	r1, [pc, #32]	; (8003a5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a3c:	40d9      	lsrs	r1, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	400b      	ands	r3, r1
 8003a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	000fffff 	.word	0x000fffff

08003a60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6093      	str	r3, [r2, #8]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	5fffffc0 	.word	0x5fffffc0

08003aa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab4:	d101      	bne.n	8003aba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <LL_ADC_EnableInternalRegulator+0x24>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	6fffffc0 	.word	0x6fffffc0

08003af0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b04:	d101      	bne.n	8003b0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <LL_ADC_Enable+0x24>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	7fffffc0 	.word	0x7fffffc0

08003b40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <LL_ADC_Disable+0x24>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	f043 0202 	orr.w	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	7fffffc0 	.word	0x7fffffc0

08003b68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <LL_ADC_IsEnabled+0x18>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <LL_ADC_IsEnabled+0x1a>
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d101      	bne.n	8003ba6 <LL_ADC_IsDisableOngoing+0x18>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <LL_ADC_IsDisableOngoing+0x1a>
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <LL_ADC_REG_StartConversion+0x24>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	7fffffc0 	.word	0x7fffffc0

08003bdc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d101      	bne.n	8003bf4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d101      	bne.n	8003c1a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e18f      	b.n	8003f62 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7fe fea5 	bl	80029a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff19 	bl	8003aa0 <LL_ADC_IsDeepPowerDownEnabled>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff feff 	bl	8003a7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff34 	bl	8003af0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d114      	bne.n	8003cb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff18 	bl	8003ac8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c98:	4b87      	ldr	r3, [pc, #540]	; (8003eb8 <HAL_ADC_Init+0x290>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	4a87      	ldr	r2, [pc, #540]	; (8003ebc <HAL_ADC_Init+0x294>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	099b      	lsrs	r3, r3, #6
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003caa:	e002      	b.n	8003cb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f9      	bne.n	8003cac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff17 	bl	8003af0 <LL_ADC_IsInternalRegulatorEnabled>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f043 0210 	orr.w	r2, r3, #16
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	f043 0201 	orr.w	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ff77 	bl	8003bdc <LL_ADC_REG_IsConversionOngoing>
 8003cee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 8129 	bne.w	8003f50 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 8125 	bne.w	8003f50 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d0e:	f043 0202 	orr.w	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff24 	bl	8003b68 <LL_ADC_IsEnabled>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d136      	bne.n	8003d94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a65      	ldr	r2, [pc, #404]	; (8003ec0 <HAL_ADC_Init+0x298>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_ADC_Init+0x112>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a63      	ldr	r2, [pc, #396]	; (8003ec4 <HAL_ADC_Init+0x29c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10e      	bne.n	8003d58 <HAL_ADC_Init+0x130>
 8003d3a:	4861      	ldr	r0, [pc, #388]	; (8003ec0 <HAL_ADC_Init+0x298>)
 8003d3c:	f7ff ff14 	bl	8003b68 <LL_ADC_IsEnabled>
 8003d40:	4604      	mov	r4, r0
 8003d42:	4860      	ldr	r0, [pc, #384]	; (8003ec4 <HAL_ADC_Init+0x29c>)
 8003d44:	f7ff ff10 	bl	8003b68 <LL_ADC_IsEnabled>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4323      	orrs	r3, r4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e008      	b.n	8003d6a <HAL_ADC_Init+0x142>
 8003d58:	485b      	ldr	r0, [pc, #364]	; (8003ec8 <HAL_ADC_Init+0x2a0>)
 8003d5a:	f7ff ff05 	bl	8003b68 <LL_ADC_IsEnabled>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d012      	beq.n	8003d94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a53      	ldr	r2, [pc, #332]	; (8003ec0 <HAL_ADC_Init+0x298>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_ADC_Init+0x15a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a51      	ldr	r2, [pc, #324]	; (8003ec4 <HAL_ADC_Init+0x29c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_Init+0x15e>
 8003d82:	4a52      	ldr	r2, [pc, #328]	; (8003ecc <HAL_ADC_Init+0x2a4>)
 8003d84:	e000      	b.n	8003d88 <HAL_ADC_Init+0x160>
 8003d86:	4a52      	ldr	r2, [pc, #328]	; (8003ed0 <HAL_ADC_Init+0x2a8>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f7ff fd3c 	bl	800380c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003d94:	f7ff fd18 	bl	80037c8 <HAL_GetREVID>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d914      	bls.n	8003dcc <HAL_ADC_Init+0x1a4>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	d110      	bne.n	8003dcc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7d5b      	ldrb	r3, [r3, #21]
 8003dae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003db4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003dba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7f1b      	ldrb	r3, [r3, #28]
 8003dc0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003dc2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003dc4:	f043 030c 	orr.w	r3, r3, #12
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	e00d      	b.n	8003de8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7d5b      	ldrb	r3, [r3, #21]
 8003dd0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003dd6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ddc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7f1b      	ldrb	r3, [r3, #28]
 8003de2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	7f1b      	ldrb	r3, [r3, #28]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d106      	bne.n	8003dfe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	045b      	lsls	r3, r3, #17
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_ADC_Init+0x2ac>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	69b9      	ldr	r1, [r7, #24]
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fed2 	bl	8003bdc <LL_ADC_REG_IsConversionOngoing>
 8003e38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fedf 	bl	8003c02 <LL_ADC_INJ_IsConversionOngoing>
 8003e44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d15f      	bne.n	8003f0c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d15c      	bne.n	8003f0c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7d1b      	ldrb	r3, [r3, #20]
 8003e56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <HAL_ADC_Init+0x2b0>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	69b9      	ldr	r1, [r7, #24]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d130      	bne.n	8003ee0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_ADC_Init+0x2b4>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e92:	3a01      	subs	r2, #1
 8003e94:	0411      	lsls	r1, r2, #16
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e9a:	4311      	orrs	r1, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ea0:	4311      	orrs	r1, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	611a      	str	r2, [r3, #16]
 8003eb4:	e01c      	b.n	8003ef0 <HAL_ADC_Init+0x2c8>
 8003eb6:	bf00      	nop
 8003eb8:	2400008c 	.word	0x2400008c
 8003ebc:	053e2d63 	.word	0x053e2d63
 8003ec0:	40022000 	.word	0x40022000
 8003ec4:	40022100 	.word	0x40022100
 8003ec8:	58026000 	.word	0x58026000
 8003ecc:	40022300 	.word	0x40022300
 8003ed0:	58026300 	.word	0x58026300
 8003ed4:	fff0c003 	.word	0xfff0c003
 8003ed8:	ffffbffc 	.word	0xffffbffc
 8003edc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fdec 	bl	8004ae4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10c      	bne.n	8003f2e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f023 010f 	bic.w	r1, r3, #15
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	1e5a      	subs	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f2c:	e007      	b.n	8003f3e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 020f 	bic.w	r2, r2, #15
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	f043 0201 	orr.w	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	655a      	str	r2, [r3, #84]	; 0x54
 8003f4e:	e007      	b.n	8003f60 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f043 0210 	orr.w	r2, r3, #16
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f60:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3724      	adds	r7, #36	; 0x24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}
 8003f6a:	bf00      	nop

08003f6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a55      	ldr	r2, [pc, #340]	; (80040d4 <HAL_ADC_Start_DMA+0x168>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_ADC_Start_DMA+0x20>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a54      	ldr	r2, [pc, #336]	; (80040d8 <HAL_ADC_Start_DMA+0x16c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_Start_DMA+0x24>
 8003f8c:	4b53      	ldr	r3, [pc, #332]	; (80040dc <HAL_ADC_Start_DMA+0x170>)
 8003f8e:	e000      	b.n	8003f92 <HAL_ADC_Start_DMA+0x26>
 8003f90:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_ADC_Start_DMA+0x174>)
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fd64 	bl	8003a60 <LL_ADC_GetMultimode>
 8003f98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fe1c 	bl	8003bdc <LL_ADC_REG_IsConversionOngoing>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 808c 	bne.w	80040c4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_ADC_Start_DMA+0x4e>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e087      	b.n	80040ca <HAL_ADC_Start_DMA+0x15e>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d002      	beq.n	8003fd4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b09      	cmp	r3, #9
 8003fd2:	d170      	bne.n	80040b6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fc07 	bl	80047e8 <ADC_Enable>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d163      	bne.n	80040ac <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fe8:	4b3e      	ldr	r3, [pc, #248]	; (80040e4 <HAL_ADC_Start_DMA+0x178>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a37      	ldr	r2, [pc, #220]	; (80040d8 <HAL_ADC_Start_DMA+0x16c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d002      	beq.n	8004004 <HAL_ADC_Start_DMA+0x98>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	e000      	b.n	8004006 <HAL_ADC_Start_DMA+0x9a>
 8004004:	4b33      	ldr	r3, [pc, #204]	; (80040d4 <HAL_ADC_Start_DMA+0x168>)
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	4293      	cmp	r3, r2
 800400c:	d002      	beq.n	8004014 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d006      	beq.n	800403a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004030:	f023 0206 	bic.w	r2, r3, #6
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	659a      	str	r2, [r3, #88]	; 0x58
 8004038:	e002      	b.n	8004040 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004044:	4a28      	ldr	r2, [pc, #160]	; (80040e8 <HAL_ADC_Start_DMA+0x17c>)
 8004046:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404c:	4a27      	ldr	r2, [pc, #156]	; (80040ec <HAL_ADC_Start_DMA+0x180>)
 800404e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004054:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <HAL_ADC_Start_DMA+0x184>)
 8004056:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	221c      	movs	r2, #28
 800405e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0210 	orr.w	r2, r2, #16
 8004076:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f7ff fc89 	bl	800399a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3340      	adds	r3, #64	; 0x40
 8004092:	4619      	mov	r1, r3
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f002 f80e 	bl	80060b8 <HAL_DMA_Start_IT>
 800409c:	4603      	mov	r3, r0
 800409e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fd85 	bl	8003bb4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80040aa:	e00d      	b.n	80040c8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80040b4:	e008      	b.n	80040c8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80040c2:	e001      	b.n	80040c8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
 80040c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40022000 	.word	0x40022000
 80040d8:	40022100 	.word	0x40022100
 80040dc:	40022300 	.word	0x40022300
 80040e0:	58026300 	.word	0x58026300
 80040e4:	fffff0fe 	.word	0xfffff0fe
 80040e8:	080049bb 	.word	0x080049bb
 80040ec:	08004a93 	.word	0x08004a93
 80040f0:	08004aaf 	.word	0x08004aaf

080040f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b0a1      	sub	sp, #132	; 0x84
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a65      	ldr	r2, [pc, #404]	; (80042e0 <HAL_ADC_ConfigChannel+0x1b0>)
 800414a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_ADC_ConfigChannel+0x2a>
 8004156:	2302      	movs	r3, #2
 8004158:	e32e      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x688>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fd38 	bl	8003bdc <LL_ADC_REG_IsConversionOngoing>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 8313 	bne.w	800479a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db2c      	blt.n	80041d6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <HAL_ADC_ConfigChannel+0x6a>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	0e9b      	lsrs	r3, r3, #26
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2201      	movs	r2, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	e016      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x98>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041aa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80041b2:	2320      	movs	r3, #32
 80041b4:	e003      	b.n	80041be <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80041b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	2201      	movs	r2, #1
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	69d1      	ldr	r1, [r2, #28]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f7ff fbad 	bl	8003942 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fcf5 	bl	8003bdc <LL_ADC_REG_IsConversionOngoing>
 80041f2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fd02 	bl	8003c02 <LL_ADC_INJ_IsConversionOngoing>
 80041fe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 80b8 	bne.w	8004378 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 80b4 	bne.w	8004378 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6819      	ldr	r1, [r3, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	461a      	mov	r2, r3
 800421e:	f7ff fbcf 	bl	80039c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <HAL_ADC_ConfigChannel+0x1b4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800422a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800422e:	d10b      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x118>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	e01d      	b.n	8004284 <HAL_ADC_ConfigChannel+0x154>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <HAL_ADC_ConfigChannel+0x13e>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	089b      	lsrs	r3, r3, #2
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	e00a      	b.n	8004284 <HAL_ADC_ConfigChannel+0x154>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d02c      	beq.n	80042e8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6919      	ldr	r1, [r3, #16]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800429c:	f7ff faea 	bl	8003874 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6919      	ldr	r1, [r3, #16]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	7e5b      	ldrb	r3, [r3, #25]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d102      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x186>
 80042b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042b4:	e000      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x188>
 80042b6:	2300      	movs	r3, #0
 80042b8:	461a      	mov	r2, r3
 80042ba:	f7ff fb14 	bl	80038e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6919      	ldr	r1, [r3, #16]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	7e1b      	ldrb	r3, [r3, #24]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x1a4>
 80042ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042d2:	e000      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x1a6>
 80042d4:	2300      	movs	r3, #0
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7ff faec 	bl	80038b4 <LL_ADC_SetDataRightShift>
 80042dc:	e04c      	b.n	8004378 <HAL_ADC_ConfigChannel+0x248>
 80042de:	bf00      	nop
 80042e0:	47ff0000 	.word	0x47ff0000
 80042e4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	069b      	lsls	r3, r3, #26
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	069b      	lsls	r3, r3, #26
 800431c:	429a      	cmp	r2, r3
 800431e:	d107      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800432e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	069b      	lsls	r3, r3, #26
 8004340:	429a      	cmp	r2, r3
 8004342:	d107      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004352:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	069b      	lsls	r3, r3, #26
 8004364:	429a      	cmp	r2, r3
 8004366:	d107      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004376:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fbf3 	bl	8003b68 <LL_ADC_IsEnabled>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 8211 	bne.w	80047ac <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6819      	ldr	r1, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	461a      	mov	r2, r3
 8004398:	f7ff fb3e 	bl	8003a18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4aa1      	ldr	r2, [pc, #644]	; (8004628 <HAL_ADC_ConfigChannel+0x4f8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	f040 812e 	bne.w	8004604 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x2a0>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	0e9b      	lsrs	r3, r3, #26
 80043be:	3301      	adds	r3, #1
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	2b09      	cmp	r3, #9
 80043c6:	bf94      	ite	ls
 80043c8:	2301      	movls	r3, #1
 80043ca:	2300      	movhi	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e019      	b.n	8004404 <HAL_ADC_ConfigChannel+0x2d4>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d8:	fa93 f3a3 	rbit	r3, r3
 80043dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80043de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80043e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80043e8:	2320      	movs	r3, #32
 80043ea:	e003      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80043ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	2b09      	cmp	r3, #9
 80043fc:	bf94      	ite	ls
 80043fe:	2301      	movls	r3, #1
 8004400:	2300      	movhi	r3, #0
 8004402:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004404:	2b00      	cmp	r3, #0
 8004406:	d079      	beq.n	80044fc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x2f4>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	3301      	adds	r3, #1
 800441c:	069b      	lsls	r3, r3, #26
 800441e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004422:	e015      	b.n	8004450 <HAL_ADC_ConfigChannel+0x320>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004434:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800443c:	2320      	movs	r3, #32
 800443e:	e003      	b.n	8004448 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	3301      	adds	r3, #1
 800444a:	069b      	lsls	r3, r3, #26
 800444c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x340>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	0e9b      	lsrs	r3, r3, #26
 8004462:	3301      	adds	r3, #1
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2101      	movs	r1, #1
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	e017      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x370>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004488:	2320      	movs	r3, #32
 800448a:	e003      	b.n	8004494 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800448c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448e:	fab3 f383 	clz	r3, r3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	3301      	adds	r3, #1
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	ea42 0103 	orr.w	r1, r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x396>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	0e9b      	lsrs	r3, r3, #26
 80044b6:	3301      	adds	r3, #1
 80044b8:	f003 021f 	and.w	r2, r3, #31
 80044bc:	4613      	mov	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	4413      	add	r3, r2
 80044c2:	051b      	lsls	r3, r3, #20
 80044c4:	e018      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x3c8>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	fa93 f3a3 	rbit	r3, r3
 80044d2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80044de:	2320      	movs	r3, #32
 80044e0:	e003      	b.n	80044ea <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	fab3 f383 	clz	r3, r3
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	3301      	adds	r3, #1
 80044ec:	f003 021f 	and.w	r2, r3, #31
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f8:	430b      	orrs	r3, r1
 80044fa:	e07e      	b.n	80045fa <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004504:	2b00      	cmp	r3, #0
 8004506:	d107      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x3e8>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	0e9b      	lsrs	r3, r3, #26
 800450e:	3301      	adds	r3, #1
 8004510:	069b      	lsls	r3, r3, #26
 8004512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004516:	e015      	b.n	8004544 <HAL_ADC_ConfigChannel+0x414>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004530:	2320      	movs	r3, #32
 8004532:	e003      	b.n	800453c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	fab3 f383 	clz	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	3301      	adds	r3, #1
 800453e:	069b      	lsls	r3, r3, #26
 8004540:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x434>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	3301      	adds	r3, #1
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	e017      	b.n	8004594 <HAL_ADC_ConfigChannel+0x464>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa93 f3a3 	rbit	r3, r3
 8004570:	61bb      	str	r3, [r7, #24]
  return result;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800457c:	2320      	movs	r3, #32
 800457e:	e003      	b.n	8004588 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	fab3 f383 	clz	r3, r3
 8004586:	b2db      	uxtb	r3, r3
 8004588:	3301      	adds	r3, #1
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2101      	movs	r1, #1
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	ea42 0103 	orr.w	r1, r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x490>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	3301      	adds	r3, #1
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	4613      	mov	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	4413      	add	r3, r2
 80045b6:	3b1e      	subs	r3, #30
 80045b8:	051b      	lsls	r3, r3, #20
 80045ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045be:	e01b      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x4c8>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	60fb      	str	r3, [r7, #12]
  return result;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80045d8:	2320      	movs	r3, #32
 80045da:	e003      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3301      	adds	r3, #1
 80045e6:	f003 021f 	and.w	r2, r3, #31
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	3b1e      	subs	r3, #30
 80045f2:	051b      	lsls	r3, r3, #20
 80045f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045f8:	430b      	orrs	r3, r1
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	6892      	ldr	r2, [r2, #8]
 80045fe:	4619      	mov	r1, r3
 8004600:	f7ff f9de 	bl	80039c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f280 80cf 	bge.w	80047ac <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a06      	ldr	r2, [pc, #24]	; (800462c <HAL_ADC_ConfigChannel+0x4fc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_ADC_ConfigChannel+0x4f2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a04      	ldr	r2, [pc, #16]	; (8004630 <HAL_ADC_ConfigChannel+0x500>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d10a      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x508>
 8004622:	4b04      	ldr	r3, [pc, #16]	; (8004634 <HAL_ADC_ConfigChannel+0x504>)
 8004624:	e009      	b.n	800463a <HAL_ADC_ConfigChannel+0x50a>
 8004626:	bf00      	nop
 8004628:	47ff0000 	.word	0x47ff0000
 800462c:	40022000 	.word	0x40022000
 8004630:	40022100 	.word	0x40022100
 8004634:	40022300 	.word	0x40022300
 8004638:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <HAL_ADC_ConfigChannel+0x690>)
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff f90c 	bl	8003858 <LL_ADC_GetCommonPathInternalCh>
 8004640:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a5f      	ldr	r2, [pc, #380]	; (80047c4 <HAL_ADC_ConfigChannel+0x694>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_ADC_ConfigChannel+0x526>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5d      	ldr	r2, [pc, #372]	; (80047c8 <HAL_ADC_ConfigChannel+0x698>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10e      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x544>
 8004656:	485b      	ldr	r0, [pc, #364]	; (80047c4 <HAL_ADC_ConfigChannel+0x694>)
 8004658:	f7ff fa86 	bl	8003b68 <LL_ADC_IsEnabled>
 800465c:	4604      	mov	r4, r0
 800465e:	485a      	ldr	r0, [pc, #360]	; (80047c8 <HAL_ADC_ConfigChannel+0x698>)
 8004660:	f7ff fa82 	bl	8003b68 <LL_ADC_IsEnabled>
 8004664:	4603      	mov	r3, r0
 8004666:	4323      	orrs	r3, r4
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e008      	b.n	8004686 <HAL_ADC_ConfigChannel+0x556>
 8004674:	4855      	ldr	r0, [pc, #340]	; (80047cc <HAL_ADC_ConfigChannel+0x69c>)
 8004676:	f7ff fa77 	bl	8003b68 <LL_ADC_IsEnabled>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d07d      	beq.n	8004786 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a50      	ldr	r2, [pc, #320]	; (80047d0 <HAL_ADC_ConfigChannel+0x6a0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d130      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x5c6>
 8004694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d12b      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a4a      	ldr	r2, [pc, #296]	; (80047cc <HAL_ADC_ConfigChannel+0x69c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	f040 8081 	bne.w	80047ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a45      	ldr	r2, [pc, #276]	; (80047c4 <HAL_ADC_ConfigChannel+0x694>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_ADC_ConfigChannel+0x58e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a43      	ldr	r2, [pc, #268]	; (80047c8 <HAL_ADC_ConfigChannel+0x698>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x592>
 80046be:	4a45      	ldr	r2, [pc, #276]	; (80047d4 <HAL_ADC_ConfigChannel+0x6a4>)
 80046c0:	e000      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x594>
 80046c2:	4a3f      	ldr	r2, [pc, #252]	; (80047c0 <HAL_ADC_ConfigChannel+0x690>)
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7ff f8b0 	bl	8003832 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046d2:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <HAL_ADC_ConfigChannel+0x6a8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	4a40      	ldr	r2, [pc, #256]	; (80047dc <HAL_ADC_ConfigChannel+0x6ac>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	099b      	lsrs	r3, r3, #6
 80046e0:	3301      	adds	r3, #1
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046e6:	e002      	b.n	80046ee <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f9      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046f4:	e05a      	b.n	80047ac <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a39      	ldr	r2, [pc, #228]	; (80047e0 <HAL_ADC_ConfigChannel+0x6b0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d11e      	bne.n	800473e <HAL_ADC_ConfigChannel+0x60e>
 8004700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d119      	bne.n	800473e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2f      	ldr	r2, [pc, #188]	; (80047cc <HAL_ADC_ConfigChannel+0x69c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d14b      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <HAL_ADC_ConfigChannel+0x694>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_ADC_ConfigChannel+0x5f8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <HAL_ADC_ConfigChannel+0x698>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_ADC_ConfigChannel+0x5fc>
 8004728:	4a2a      	ldr	r2, [pc, #168]	; (80047d4 <HAL_ADC_ConfigChannel+0x6a4>)
 800472a:	e000      	b.n	800472e <HAL_ADC_ConfigChannel+0x5fe>
 800472c:	4a24      	ldr	r2, [pc, #144]	; (80047c0 <HAL_ADC_ConfigChannel+0x690>)
 800472e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f7ff f87b 	bl	8003832 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800473c:	e036      	b.n	80047ac <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <HAL_ADC_ConfigChannel+0x6b4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d131      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x67c>
 8004748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d12c      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_ADC_ConfigChannel+0x69c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d127      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <HAL_ADC_ConfigChannel+0x694>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_ADC_ConfigChannel+0x640>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a17      	ldr	r2, [pc, #92]	; (80047c8 <HAL_ADC_ConfigChannel+0x698>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x644>
 8004770:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004772:	e000      	b.n	8004776 <HAL_ADC_ConfigChannel+0x646>
 8004774:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <HAL_ADC_ConfigChannel+0x690>)
 8004776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7ff f857 	bl	8003832 <LL_ADC_SetCommonPathInternalCh>
 8004784:	e012      	b.n	80047ac <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004798:	e008      	b.n	80047ac <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	f043 0220 	orr.w	r2, r3, #32
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3784      	adds	r7, #132	; 0x84
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd90      	pop	{r4, r7, pc}
 80047c0:	58026300 	.word	0x58026300
 80047c4:	40022000 	.word	0x40022000
 80047c8:	40022100 	.word	0x40022100
 80047cc:	58026000 	.word	0x58026000
 80047d0:	cb840000 	.word	0xcb840000
 80047d4:	40022300 	.word	0x40022300
 80047d8:	2400008c 	.word	0x2400008c
 80047dc:	053e2d63 	.word	0x053e2d63
 80047e0:	c7520000 	.word	0xc7520000
 80047e4:	cfb80000 	.word	0xcfb80000

080047e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff f9b7 	bl	8003b68 <LL_ADC_IsEnabled>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d16e      	bne.n	80048de <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <ADC_Enable+0x100>)
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004812:	f043 0210 	orr.w	r2, r3, #16
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481e:	f043 0201 	orr.w	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e05a      	b.n	80048e0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff f972 	bl	8003b18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004834:	f7fe ffbc 	bl	80037b0 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2b      	ldr	r2, [pc, #172]	; (80048ec <ADC_Enable+0x104>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <ADC_Enable+0x66>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a29      	ldr	r2, [pc, #164]	; (80048f0 <ADC_Enable+0x108>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <ADC_Enable+0x6a>
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <ADC_Enable+0x10c>)
 8004850:	e000      	b.n	8004854 <ADC_Enable+0x6c>
 8004852:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <ADC_Enable+0x110>)
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff f903 	bl	8003a60 <LL_ADC_GetMultimode>
 800485a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a23      	ldr	r2, [pc, #140]	; (80048f0 <ADC_Enable+0x108>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d002      	beq.n	800486c <ADC_Enable+0x84>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	e000      	b.n	800486e <ADC_Enable+0x86>
 800486c:	4b1f      	ldr	r3, [pc, #124]	; (80048ec <ADC_Enable+0x104>)
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	4293      	cmp	r3, r2
 8004874:	d02c      	beq.n	80048d0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d130      	bne.n	80048de <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800487c:	e028      	b.n	80048d0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff f970 	bl	8003b68 <LL_ADC_IsEnabled>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d104      	bne.n	8004898 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff f940 	bl	8003b18 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004898:	f7fe ff8a 	bl	80037b0 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d914      	bls.n	80048d0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d00d      	beq.n	80048d0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b8:	f043 0210 	orr.w	r2, r3, #16
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f043 0201 	orr.w	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e007      	b.n	80048e0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d1cf      	bne.n	800487e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	8000003f 	.word	0x8000003f
 80048ec:	40022000 	.word	0x40022000
 80048f0:	40022100 	.word	0x40022100
 80048f4:	40022300 	.word	0x40022300
 80048f8:	58026300 	.word	0x58026300

080048fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f940 	bl	8003b8e <LL_ADC_IsDisableOngoing>
 800490e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff f927 	bl	8003b68 <LL_ADC_IsEnabled>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d047      	beq.n	80049b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d144      	bne.n	80049b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030d 	and.w	r3, r3, #13
 8004930:	2b01      	cmp	r3, #1
 8004932:	d10c      	bne.n	800494e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff f901 	bl	8003b40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2203      	movs	r2, #3
 8004944:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004946:	f7fe ff33 	bl	80037b0 <HAL_GetTick>
 800494a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800494c:	e029      	b.n	80049a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	f043 0210 	orr.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	f043 0201 	orr.w	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e023      	b.n	80049b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800496a:	f7fe ff21 	bl	80037b0 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d914      	bls.n	80049a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f043 0210 	orr.w	r2, r3, #16
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004996:	f043 0201 	orr.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e007      	b.n	80049b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1dc      	bne.n	800496a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d14b      	bne.n	8004a6c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d021      	beq.n	8004a32 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe ff92 	bl	800391c <LL_ADC_REG_IsTriggerSourceSWStart>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d032      	beq.n	8004a64 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d12b      	bne.n	8004a64 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11f      	bne.n	8004a64 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a28:	f043 0201 	orr.w	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54
 8004a30:	e018      	b.n	8004a64 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d111      	bne.n	8004a64 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	f043 0201 	orr.w	r2, r3, #1
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff fb45 	bl	80040f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a6a:	e00e      	b.n	8004a8a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fb4f 	bl	800411c <HAL_ADC_ErrorCallback>
}
 8004a7e:	e004      	b.n	8004a8a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff fb31 	bl	8004108 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	f043 0204 	orr.w	r2, r3, #4
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff fb21 	bl	800411c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a7a      	ldr	r2, [pc, #488]	; (8004cdc <ADC_ConfigureBoostMode+0x1f8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <ADC_ConfigureBoostMode+0x1c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a79      	ldr	r2, [pc, #484]	; (8004ce0 <ADC_ConfigureBoostMode+0x1fc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d109      	bne.n	8004b14 <ADC_ConfigureBoostMode+0x30>
 8004b00:	4b78      	ldr	r3, [pc, #480]	; (8004ce4 <ADC_ConfigureBoostMode+0x200>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e008      	b.n	8004b26 <ADC_ConfigureBoostMode+0x42>
 8004b14:	4b74      	ldr	r3, [pc, #464]	; (8004ce8 <ADC_ConfigureBoostMode+0x204>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf14      	ite	ne
 8004b20:	2301      	movne	r3, #1
 8004b22:	2300      	moveq	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01c      	beq.n	8004b64 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004b2a:	f005 fd57 	bl	800a5dc <HAL_RCC_GetHCLKFreq>
 8004b2e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b38:	d010      	beq.n	8004b5c <ADC_ConfigureBoostMode+0x78>
 8004b3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b3e:	d873      	bhi.n	8004c28 <ADC_ConfigureBoostMode+0x144>
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d002      	beq.n	8004b4c <ADC_ConfigureBoostMode+0x68>
 8004b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b4a:	d16d      	bne.n	8004c28 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	60fb      	str	r3, [r7, #12]
        break;
 8004b5a:	e068      	b.n	8004c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	089b      	lsrs	r3, r3, #2
 8004b60:	60fb      	str	r3, [r7, #12]
        break;
 8004b62:	e064      	b.n	8004c2e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004b64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b68:	f04f 0100 	mov.w	r1, #0
 8004b6c:	f006 ffde 	bl	800bb2c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b70:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004b7a:	d051      	beq.n	8004c20 <ADC_ConfigureBoostMode+0x13c>
 8004b7c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004b80:	d854      	bhi.n	8004c2c <ADC_ConfigureBoostMode+0x148>
 8004b82:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004b86:	d047      	beq.n	8004c18 <ADC_ConfigureBoostMode+0x134>
 8004b88:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004b8c:	d84e      	bhi.n	8004c2c <ADC_ConfigureBoostMode+0x148>
 8004b8e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004b92:	d03d      	beq.n	8004c10 <ADC_ConfigureBoostMode+0x12c>
 8004b94:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004b98:	d848      	bhi.n	8004c2c <ADC_ConfigureBoostMode+0x148>
 8004b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b9e:	d033      	beq.n	8004c08 <ADC_ConfigureBoostMode+0x124>
 8004ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ba4:	d842      	bhi.n	8004c2c <ADC_ConfigureBoostMode+0x148>
 8004ba6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004baa:	d029      	beq.n	8004c00 <ADC_ConfigureBoostMode+0x11c>
 8004bac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004bb0:	d83c      	bhi.n	8004c2c <ADC_ConfigureBoostMode+0x148>
 8004bb2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004bb6:	d01a      	beq.n	8004bee <ADC_ConfigureBoostMode+0x10a>
 8004bb8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004bbc:	d836      	bhi.n	8004c2c <ADC_ConfigureBoostMode+0x148>
 8004bbe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004bc2:	d014      	beq.n	8004bee <ADC_ConfigureBoostMode+0x10a>
 8004bc4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004bc8:	d830      	bhi.n	8004c2c <ADC_ConfigureBoostMode+0x148>
 8004bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bce:	d00e      	beq.n	8004bee <ADC_ConfigureBoostMode+0x10a>
 8004bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd4:	d82a      	bhi.n	8004c2c <ADC_ConfigureBoostMode+0x148>
 8004bd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bda:	d008      	beq.n	8004bee <ADC_ConfigureBoostMode+0x10a>
 8004bdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004be0:	d824      	bhi.n	8004c2c <ADC_ConfigureBoostMode+0x148>
 8004be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004be6:	d002      	beq.n	8004bee <ADC_ConfigureBoostMode+0x10a>
 8004be8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bec:	d11e      	bne.n	8004c2c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	0c9b      	lsrs	r3, r3, #18
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	60fb      	str	r3, [r7, #12]
        break;
 8004bfe:	e016      	b.n	8004c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]
        break;
 8004c06:	e012      	b.n	8004c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	60fb      	str	r3, [r7, #12]
        break;
 8004c0e:	e00e      	b.n	8004c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	099b      	lsrs	r3, r3, #6
 8004c14:	60fb      	str	r3, [r7, #12]
        break;
 8004c16:	e00a      	b.n	8004c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	09db      	lsrs	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]
        break;
 8004c1e:	e006      	b.n	8004c2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	60fb      	str	r3, [r7, #12]
        break;
 8004c26:	e002      	b.n	8004c2e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004c28:	bf00      	nop
 8004c2a:	e000      	b.n	8004c2e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004c2c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004c2e:	f7fe fdcb 	bl	80037c8 <HAL_GetREVID>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d815      	bhi.n	8004c68 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a2b      	ldr	r2, [pc, #172]	; (8004cec <ADC_ConfigureBoostMode+0x208>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d908      	bls.n	8004c56 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c52:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004c54:	e03e      	b.n	8004cd4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c64:	609a      	str	r2, [r3, #8]
}
 8004c66:	e035      	b.n	8004cd4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <ADC_ConfigureBoostMode+0x20c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d808      	bhi.n	8004c88 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c84:	609a      	str	r2, [r3, #8]
}
 8004c86:	e025      	b.n	8004cd4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <ADC_ConfigureBoostMode+0x210>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d80a      	bhi.n	8004ca6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	e016      	b.n	8004cd4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <ADC_ConfigureBoostMode+0x214>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d80a      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	609a      	str	r2, [r3, #8]
}
 8004cc2:	e007      	b.n	8004cd4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	40022100 	.word	0x40022100
 8004ce4:	40022300 	.word	0x40022300
 8004ce8:	58026300 	.word	0x58026300
 8004cec:	01312d00 	.word	0x01312d00
 8004cf0:	005f5e10 	.word	0x005f5e10
 8004cf4:	00bebc20 	.word	0x00bebc20
 8004cf8:	017d7840 	.word	0x017d7840

08004cfc <LL_ADC_IsEnabled>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <LL_ADC_IsEnabled+0x18>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <LL_ADC_IsEnabled+0x1a>
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <LL_ADC_StartCalibration>:
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <LL_ADC_StartCalibration+0x38>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d44:	430a      	orrs	r2, r1
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	609a      	str	r2, [r3, #8]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	3ffeffc0 	.word	0x3ffeffc0

08004d60 <LL_ADC_IsCalibrationOnGoing>:
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d74:	d101      	bne.n	8004d7a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d101      	bne.n	8004da0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_ADCEx_Calibration_Start+0x1e>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e04c      	b.n	8004e68 <HAL_ADCEx_Calibration_Start+0xb8>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff fd90 	bl	80048fc <ADC_Disable>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d135      	bne.n	8004e52 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dea:	4b21      	ldr	r3, [pc, #132]	; (8004e70 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	f043 0202 	orr.w	r2, r3, #2
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff ff90 	bl	8004d24 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e04:	e014      	b.n	8004e30 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d30d      	bcc.n	8004e30 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	f023 0312 	bic.w	r3, r3, #18
 8004e1c:	f043 0210 	orr.w	r2, r3, #16
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e01b      	b.n	8004e68 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ff93 	bl	8004d60 <LL_ADC_IsCalibrationOnGoing>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e2      	bne.n	8004e06 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e44:	f023 0303 	bic.w	r3, r3, #3
 8004e48:	f043 0201 	orr.w	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54
 8004e50:	e005      	b.n	8004e5e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	f043 0210 	orr.w	r2, r3, #16
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	ffffeefd 	.word	0xffffeefd
 8004e74:	25c3f800 	.word	0x25c3f800

08004e78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b09f      	sub	sp, #124	; 0x7c
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0be      	b.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a5c      	ldr	r2, [pc, #368]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d102      	bne.n	8004eb6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004eb0:	4b5b      	ldr	r3, [pc, #364]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004eb2:	60bb      	str	r3, [r7, #8]
 8004eb4:	e001      	b.n	8004eba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e09d      	b.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff ff54 	bl	8004d88 <LL_ADC_REG_IsConversionOngoing>
 8004ee0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff ff4e 	bl	8004d88 <LL_ADC_REG_IsConversionOngoing>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d17f      	bne.n	8004ff2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d17c      	bne.n	8004ff2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a47      	ldr	r2, [pc, #284]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a46      	ldr	r2, [pc, #280]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004f0c:	4b45      	ldr	r3, [pc, #276]	; (8005024 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f0e:	e000      	b.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004f10:	4b45      	ldr	r3, [pc, #276]	; (8005028 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f12:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d039      	beq.n	8004f90 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a3a      	ldr	r2, [pc, #232]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a38      	ldr	r2, [pc, #224]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d10e      	bne.n	8004f60 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004f42:	4836      	ldr	r0, [pc, #216]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f44:	f7ff feda 	bl	8004cfc <LL_ADC_IsEnabled>
 8004f48:	4604      	mov	r4, r0
 8004f4a:	4835      	ldr	r0, [pc, #212]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f4c:	f7ff fed6 	bl	8004cfc <LL_ADC_IsEnabled>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4323      	orrs	r3, r4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e008      	b.n	8004f72 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004f60:	4832      	ldr	r0, [pc, #200]	; (800502c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004f62:	f7ff fecb 	bl	8004cfc <LL_ADC_IsEnabled>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d047      	beq.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	6811      	ldr	r1, [r2, #0]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	6892      	ldr	r2, [r2, #8]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f8e:	e03a      	b.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1e      	ldr	r2, [pc, #120]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10e      	bne.n	8004fce <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004fb0:	481a      	ldr	r0, [pc, #104]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004fb2:	f7ff fea3 	bl	8004cfc <LL_ADC_IsEnabled>
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4819      	ldr	r0, [pc, #100]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004fba:	f7ff fe9f 	bl	8004cfc <LL_ADC_IsEnabled>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4323      	orrs	r3, r4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	e008      	b.n	8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004fce:	4817      	ldr	r0, [pc, #92]	; (800502c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fd0:	f7ff fe94 	bl	8004cfc <LL_ADC_IsEnabled>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bf0c      	ite	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	2300      	movne	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d010      	beq.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ff0:	e009      	b.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005004:	e000      	b.n	8005008 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005006:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005010:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005014:	4618      	mov	r0, r3
 8005016:	377c      	adds	r7, #124	; 0x7c
 8005018:	46bd      	mov	sp, r7
 800501a:	bd90      	pop	{r4, r7, pc}
 800501c:	40022000 	.word	0x40022000
 8005020:	40022100 	.word	0x40022100
 8005024:	40022300 	.word	0x40022300
 8005028:	58026300 	.word	0x58026300
 800502c:	58026000 	.word	0x58026000
 8005030:	fffff0e0 	.word	0xfffff0e0

08005034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <__NVIC_SetPriorityGrouping+0x40>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005050:	4013      	ands	r3, r2
 8005052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <__NVIC_SetPriorityGrouping+0x44>)
 800505e:	4313      	orrs	r3, r2
 8005060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005062:	4a04      	ldr	r2, [pc, #16]	; (8005074 <__NVIC_SetPriorityGrouping+0x40>)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	60d3      	str	r3, [r2, #12]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	e000ed00 	.word	0xe000ed00
 8005078:	05fa0000 	.word	0x05fa0000

0800507c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <__NVIC_GetPriorityGrouping+0x18>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	0a1b      	lsrs	r3, r3, #8
 8005086:	f003 0307 	and.w	r3, r3, #7
}
 800508a:	4618      	mov	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	db0b      	blt.n	80050c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	f003 021f 	and.w	r2, r3, #31
 80050b0:	4907      	ldr	r1, [pc, #28]	; (80050d0 <__NVIC_EnableIRQ+0x38>)
 80050b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2001      	movs	r0, #1
 80050ba:	fa00 f202 	lsl.w	r2, r0, r2
 80050be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000e100 	.word	0xe000e100

080050d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	6039      	str	r1, [r7, #0]
 80050de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	db0a      	blt.n	80050fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	490c      	ldr	r1, [pc, #48]	; (8005120 <__NVIC_SetPriority+0x4c>)
 80050ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050f2:	0112      	lsls	r2, r2, #4
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	440b      	add	r3, r1
 80050f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050fc:	e00a      	b.n	8005114 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	4908      	ldr	r1, [pc, #32]	; (8005124 <__NVIC_SetPriority+0x50>)
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	3b04      	subs	r3, #4
 800510c:	0112      	lsls	r2, r2, #4
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	440b      	add	r3, r1
 8005112:	761a      	strb	r2, [r3, #24]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	e000e100 	.word	0xe000e100
 8005124:	e000ed00 	.word	0xe000ed00

08005128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f1c3 0307 	rsb	r3, r3, #7
 8005142:	2b04      	cmp	r3, #4
 8005144:	bf28      	it	cs
 8005146:	2304      	movcs	r3, #4
 8005148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3304      	adds	r3, #4
 800514e:	2b06      	cmp	r3, #6
 8005150:	d902      	bls.n	8005158 <NVIC_EncodePriority+0x30>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3b03      	subs	r3, #3
 8005156:	e000      	b.n	800515a <NVIC_EncodePriority+0x32>
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800515c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43da      	mvns	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	401a      	ands	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	43d9      	mvns	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005180:	4313      	orrs	r3, r2
         );
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff ff4c 	bl	8005034 <__NVIC_SetPriorityGrouping>
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051b2:	f7ff ff63 	bl	800507c <__NVIC_GetPriorityGrouping>
 80051b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	6978      	ldr	r0, [r7, #20]
 80051be:	f7ff ffb3 	bl	8005128 <NVIC_EncodePriority>
 80051c2:	4602      	mov	r2, r0
 80051c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ff82 	bl	80050d4 <__NVIC_SetPriority>
}
 80051d0:	bf00      	nop
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff ff56 	bl	8005098 <__NVIC_EnableIRQ>
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e014      	b.n	8005230 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	791b      	ldrb	r3, [r3, #4]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d105      	bne.n	800521c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fd fcdc 	bl	8002bd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e046      	b.n	80052da <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	795b      	ldrb	r3, [r3, #5]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_DAC_Start+0x20>
 8005254:	2302      	movs	r3, #2
 8005256:	e040      	b.n	80052da <HAL_DAC_Start+0xa2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6819      	ldr	r1, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2201      	movs	r2, #1
 8005272:	409a      	lsls	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800528c:	2b02      	cmp	r3, #2
 800528e:	d11d      	bne.n	80052cc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	e014      	b.n	80052cc <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	f003 0310 	and.w	r3, r3, #16
 80052b2:	2102      	movs	r1, #2
 80052b4:	fa01 f303 	lsl.w	r3, r1, r3
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d107      	bne.n	80052cc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0202 	orr.w	r2, r2, #2
 80052ca:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0a2      	b.n	8005446 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	795b      	ldrb	r3, [r3, #5]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_DAC_Start_DMA+0x24>
 8005308:	2302      	movs	r3, #2
 800530a:	e09c      	b.n	8005446 <HAL_DAC_Start_DMA+0x15e>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2202      	movs	r2, #2
 8005316:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d129      	bne.n	8005372 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	4a4b      	ldr	r2, [pc, #300]	; (8005450 <HAL_DAC_Start_DMA+0x168>)
 8005324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4a4a      	ldr	r2, [pc, #296]	; (8005454 <HAL_DAC_Start_DMA+0x16c>)
 800532c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	4a49      	ldr	r2, [pc, #292]	; (8005458 <HAL_DAC_Start_DMA+0x170>)
 8005334:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005344:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_DAC_Start_DMA+0x6c>
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	2b04      	cmp	r3, #4
 8005350:	d005      	beq.n	800535e <HAL_DAC_Start_DMA+0x76>
 8005352:	e009      	b.n	8005368 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	613b      	str	r3, [r7, #16]
        break;
 800535c:	e033      	b.n	80053c6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	613b      	str	r3, [r7, #16]
        break;
 8005366:	e02e      	b.n	80053c6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3310      	adds	r3, #16
 800536e:	613b      	str	r3, [r7, #16]
        break;
 8005370:	e029      	b.n	80053c6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	4a39      	ldr	r2, [pc, #228]	; (800545c <HAL_DAC_Start_DMA+0x174>)
 8005378:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	4a38      	ldr	r2, [pc, #224]	; (8005460 <HAL_DAC_Start_DMA+0x178>)
 8005380:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	4a37      	ldr	r2, [pc, #220]	; (8005464 <HAL_DAC_Start_DMA+0x17c>)
 8005388:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005398:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_DAC_Start_DMA+0xc0>
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d005      	beq.n	80053b2 <HAL_DAC_Start_DMA+0xca>
 80053a6:	e009      	b.n	80053bc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3314      	adds	r3, #20
 80053ae:	613b      	str	r3, [r7, #16]
        break;
 80053b0:	e009      	b.n	80053c6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3318      	adds	r3, #24
 80053b8:	613b      	str	r3, [r7, #16]
        break;
 80053ba:	e004      	b.n	80053c6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	331c      	adds	r3, #28
 80053c2:	613b      	str	r3, [r7, #16]
        break;
 80053c4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d111      	bne.n	80053f0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6898      	ldr	r0, [r3, #8]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	f000 fe67 	bl	80060b8 <HAL_DMA_Start_IT>
 80053ea:	4603      	mov	r3, r0
 80053ec:	75fb      	strb	r3, [r7, #23]
 80053ee:	e010      	b.n	8005412 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80053fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68d8      	ldr	r0, [r3, #12]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	f000 fe55 	bl	80060b8 <HAL_DMA_Start_IT>
 800540e:	4603      	mov	r3, r0
 8005410:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10c      	bne.n	8005438 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2201      	movs	r2, #1
 800542c:	409a      	lsls	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e005      	b.n	8005444 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f043 0204 	orr.w	r2, r3, #4
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005444:	7dfb      	ldrb	r3, [r7, #23]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	080058d9 	.word	0x080058d9
 8005454:	080058fb 	.word	0x080058fb
 8005458:	08005917 	.word	0x08005917
 800545c:	08005995 	.word	0x08005995
 8005460:	080059b7 	.word	0x080059b7
 8005464:	080059d3 	.word	0x080059d3

08005468 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e03e      	b.n	80054fa <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	43da      	mvns	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	400a      	ands	r2, r1
 8005498:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6819      	ldr	r1, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2201      	movs	r2, #1
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	43da      	mvns	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	400a      	ands	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10d      	bne.n	80054d8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 f863 	bl	800658c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e00c      	b.n	80054f2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 f855 	bl	800658c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80054f0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005518:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01d      	beq.n	8005560 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d018      	beq.n	8005560 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2204      	movs	r2, #4
 8005532:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f043 0201 	orr.w	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005548:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005558:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f86f 	bl	800563e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01d      	beq.n	80055a6 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d018      	beq.n	80055a6 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2204      	movs	r2, #4
 8005578:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f043 0202 	orr.w	r2, r3, #2
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800558e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800559e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f9ed 	bl	8005980 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80055a6:	bf00      	nop
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b087      	sub	sp, #28
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e015      	b.n	80055f6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d105      	bne.n	80055e2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4413      	add	r3, r2
 80055dc:	3308      	adds	r3, #8
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e004      	b.n	80055ec <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4413      	add	r3, r2
 80055e8:	3314      	adds	r3, #20
 80055ea:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	461a      	mov	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_DAC_ConfigChannel+0x1e>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e12a      	b.n	80058cc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	795b      	ldrb	r3, [r3, #5]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_DAC_ConfigChannel+0x2e>
 800567e:	2302      	movs	r3, #2
 8005680:	e124      	b.n	80058cc <HAL_DAC_ConfigChannel+0x278>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2202      	movs	r2, #2
 800568c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d17a      	bne.n	800578c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005696:	f7fe f88b 	bl	80037b0 <HAL_GetTick>
 800569a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d13d      	bne.n	800571e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056a2:	e018      	b.n	80056d6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80056a4:	f7fe f884 	bl	80037b0 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d911      	bls.n	80056d6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b8:	4b86      	ldr	r3, [pc, #536]	; (80058d4 <HAL_DAC_ConfigChannel+0x280>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f043 0208 	orr.w	r2, r3, #8
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2203      	movs	r2, #3
 80056d0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e0fa      	b.n	80058cc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056dc:	4b7d      	ldr	r3, [pc, #500]	; (80058d4 <HAL_DAC_ConfigChannel+0x280>)
 80056de:	4013      	ands	r3, r2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1df      	bne.n	80056a4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	6992      	ldr	r2, [r2, #24]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
 80056ee:	e020      	b.n	8005732 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80056f0:	f7fe f85e 	bl	80037b0 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d90f      	bls.n	800571e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005704:	2b00      	cmp	r3, #0
 8005706:	da0a      	bge.n	800571e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f043 0208 	orr.w	r2, r3, #8
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2203      	movs	r2, #3
 8005718:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0d6      	b.n	80058cc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	2b00      	cmp	r3, #0
 8005726:	dbe3      	blt.n	80056f0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	6992      	ldr	r2, [r2, #24]
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005742:	fa01 f303 	lsl.w	r3, r1, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	ea02 0103 	and.w	r1, r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	409a      	lsls	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	21ff      	movs	r1, #255	; 0xff
 800576e:	fa01 f303 	lsl.w	r3, r1, r3
 8005772:	43db      	mvns	r3, r3
 8005774:	ea02 0103 	and.w	r1, r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	409a      	lsls	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d11d      	bne.n	80057d0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	221f      	movs	r2, #31
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4013      	ands	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	2207      	movs	r2, #7
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4013      	ands	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d102      	bne.n	80057fa <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
 80057f8:	e00f      	b.n	800581a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d102      	bne.n	8005808 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005802:	2301      	movs	r3, #1
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
 8005806:	e008      	b.n	800581a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005810:	2301      	movs	r3, #1
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
 8005814:	e001      	b.n	800581a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005816:	2300      	movs	r3, #0
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	4313      	orrs	r3, r2
 8005824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4313      	orrs	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43da      	mvns	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	400a      	ands	r2, r1
 8005860:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4013      	ands	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6819      	ldr	r1, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	22c0      	movs	r2, #192	; 0xc0
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43da      	mvns	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	400a      	ands	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80058c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3728      	adds	r7, #40	; 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20008000 	.word	0x20008000

080058d8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff fe8b 	bl	8005602 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	711a      	strb	r2, [r3, #4]
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff fe84 	bl	8005616 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f043 0204 	orr.w	r2, r3, #4
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7ff fe7a 	bl	800562a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	711a      	strb	r2, [r3, #4]
}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7ff ffce 	bl	8005944 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	711a      	strb	r2, [r3, #4]
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff ffc7 	bl	8005958 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f043 0204 	orr.w	r2, r3, #4
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff ffbd 	bl	800596c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	711a      	strb	r2, [r3, #4]
}
 80059f8:	bf00      	nop
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005a08:	f7fd fed2 	bl	80037b0 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e316      	b.n	8006046 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a66      	ldr	r2, [pc, #408]	; (8005bb8 <HAL_DMA_Init+0x1b8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d04a      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a65      	ldr	r2, [pc, #404]	; (8005bbc <HAL_DMA_Init+0x1bc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d045      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a63      	ldr	r2, [pc, #396]	; (8005bc0 <HAL_DMA_Init+0x1c0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d040      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a62      	ldr	r2, [pc, #392]	; (8005bc4 <HAL_DMA_Init+0x1c4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d03b      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a60      	ldr	r2, [pc, #384]	; (8005bc8 <HAL_DMA_Init+0x1c8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d036      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a5f      	ldr	r2, [pc, #380]	; (8005bcc <HAL_DMA_Init+0x1cc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d031      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a5d      	ldr	r2, [pc, #372]	; (8005bd0 <HAL_DMA_Init+0x1d0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d02c      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a5c      	ldr	r2, [pc, #368]	; (8005bd4 <HAL_DMA_Init+0x1d4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d027      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a5a      	ldr	r2, [pc, #360]	; (8005bd8 <HAL_DMA_Init+0x1d8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d022      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a59      	ldr	r2, [pc, #356]	; (8005bdc <HAL_DMA_Init+0x1dc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d01d      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a57      	ldr	r2, [pc, #348]	; (8005be0 <HAL_DMA_Init+0x1e0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d018      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a56      	ldr	r2, [pc, #344]	; (8005be4 <HAL_DMA_Init+0x1e4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d013      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a54      	ldr	r2, [pc, #336]	; (8005be8 <HAL_DMA_Init+0x1e8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00e      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a53      	ldr	r2, [pc, #332]	; (8005bec <HAL_DMA_Init+0x1ec>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d009      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a51      	ldr	r2, [pc, #324]	; (8005bf0 <HAL_DMA_Init+0x1f0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <HAL_DMA_Init+0xb8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a50      	ldr	r2, [pc, #320]	; (8005bf4 <HAL_DMA_Init+0x1f4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d101      	bne.n	8005abc <HAL_DMA_Init+0xbc>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <HAL_DMA_Init+0xbe>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 813b 	beq.w	8005d3a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a37      	ldr	r2, [pc, #220]	; (8005bb8 <HAL_DMA_Init+0x1b8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d04a      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a36      	ldr	r2, [pc, #216]	; (8005bbc <HAL_DMA_Init+0x1bc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d045      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a34      	ldr	r2, [pc, #208]	; (8005bc0 <HAL_DMA_Init+0x1c0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d040      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a33      	ldr	r2, [pc, #204]	; (8005bc4 <HAL_DMA_Init+0x1c4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d03b      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a31      	ldr	r2, [pc, #196]	; (8005bc8 <HAL_DMA_Init+0x1c8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d036      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a30      	ldr	r2, [pc, #192]	; (8005bcc <HAL_DMA_Init+0x1cc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d031      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a2e      	ldr	r2, [pc, #184]	; (8005bd0 <HAL_DMA_Init+0x1d0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d02c      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a2d      	ldr	r2, [pc, #180]	; (8005bd4 <HAL_DMA_Init+0x1d4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d027      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a2b      	ldr	r2, [pc, #172]	; (8005bd8 <HAL_DMA_Init+0x1d8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d022      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2a      	ldr	r2, [pc, #168]	; (8005bdc <HAL_DMA_Init+0x1dc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d01d      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a28      	ldr	r2, [pc, #160]	; (8005be0 <HAL_DMA_Init+0x1e0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d018      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a27      	ldr	r2, [pc, #156]	; (8005be4 <HAL_DMA_Init+0x1e4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a25      	ldr	r2, [pc, #148]	; (8005be8 <HAL_DMA_Init+0x1e8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a24      	ldr	r2, [pc, #144]	; (8005bec <HAL_DMA_Init+0x1ec>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <HAL_DMA_Init+0x1f0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_DMA_Init+0x174>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <HAL_DMA_Init+0x1f4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <HAL_DMA_Init+0x186>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e007      	b.n	8005b96 <HAL_DMA_Init+0x196>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b96:	e02f      	b.n	8005bf8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b98:	f7fd fe0a 	bl	80037b0 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d928      	bls.n	8005bf8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2203      	movs	r2, #3
 8005bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e246      	b.n	8006046 <HAL_DMA_Init+0x646>
 8005bb8:	40020010 	.word	0x40020010
 8005bbc:	40020028 	.word	0x40020028
 8005bc0:	40020040 	.word	0x40020040
 8005bc4:	40020058 	.word	0x40020058
 8005bc8:	40020070 	.word	0x40020070
 8005bcc:	40020088 	.word	0x40020088
 8005bd0:	400200a0 	.word	0x400200a0
 8005bd4:	400200b8 	.word	0x400200b8
 8005bd8:	40020410 	.word	0x40020410
 8005bdc:	40020428 	.word	0x40020428
 8005be0:	40020440 	.word	0x40020440
 8005be4:	40020458 	.word	0x40020458
 8005be8:	40020470 	.word	0x40020470
 8005bec:	40020488 	.word	0x40020488
 8005bf0:	400204a0 	.word	0x400204a0
 8005bf4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1c8      	bne.n	8005b98 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4b83      	ldr	r3, [pc, #524]	; (8005e20 <HAL_DMA_Init+0x420>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005c1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d107      	bne.n	8005c5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	4313      	orrs	r3, r2
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005c5c:	4b71      	ldr	r3, [pc, #452]	; (8005e24 <HAL_DMA_Init+0x424>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	4b71      	ldr	r3, [pc, #452]	; (8005e28 <HAL_DMA_Init+0x428>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c68:	d328      	bcc.n	8005cbc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b28      	cmp	r3, #40	; 0x28
 8005c70:	d903      	bls.n	8005c7a <HAL_DMA_Init+0x27a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b2e      	cmp	r3, #46	; 0x2e
 8005c78:	d917      	bls.n	8005caa <HAL_DMA_Init+0x2aa>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c80:	d903      	bls.n	8005c8a <HAL_DMA_Init+0x28a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b42      	cmp	r3, #66	; 0x42
 8005c88:	d90f      	bls.n	8005caa <HAL_DMA_Init+0x2aa>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b46      	cmp	r3, #70	; 0x46
 8005c90:	d903      	bls.n	8005c9a <HAL_DMA_Init+0x29a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b48      	cmp	r3, #72	; 0x48
 8005c98:	d907      	bls.n	8005caa <HAL_DMA_Init+0x2aa>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b4e      	cmp	r3, #78	; 0x4e
 8005ca0:	d905      	bls.n	8005cae <HAL_DMA_Init+0x2ae>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b52      	cmp	r3, #82	; 0x52
 8005ca8:	d801      	bhi.n	8005cae <HAL_DMA_Init+0x2ae>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <HAL_DMA_Init+0x2b0>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0307 	bic.w	r3, r3, #7
 8005cd2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d117      	bne.n	8005d16 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00e      	beq.n	8005d16 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f002 fb33 	bl	8008364 <DMA_CheckFifoParam>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2240      	movs	r2, #64	; 0x40
 8005d08:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e197      	b.n	8006046 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f002 fa6e 	bl	8008200 <DMA_CalcBaseAndBitshift>
 8005d24:	4603      	mov	r3, r0
 8005d26:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2c:	f003 031f 	and.w	r3, r3, #31
 8005d30:	223f      	movs	r2, #63	; 0x3f
 8005d32:	409a      	lsls	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	e0cd      	b.n	8005ed6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a3b      	ldr	r2, [pc, #236]	; (8005e2c <HAL_DMA_Init+0x42c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_DMA_Init+0x38a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a39      	ldr	r2, [pc, #228]	; (8005e30 <HAL_DMA_Init+0x430>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_Init+0x38a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a38      	ldr	r2, [pc, #224]	; (8005e34 <HAL_DMA_Init+0x434>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_DMA_Init+0x38a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a36      	ldr	r2, [pc, #216]	; (8005e38 <HAL_DMA_Init+0x438>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_DMA_Init+0x38a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a35      	ldr	r2, [pc, #212]	; (8005e3c <HAL_DMA_Init+0x43c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_DMA_Init+0x38a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a33      	ldr	r2, [pc, #204]	; (8005e40 <HAL_DMA_Init+0x440>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_DMA_Init+0x38a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a32      	ldr	r2, [pc, #200]	; (8005e44 <HAL_DMA_Init+0x444>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_DMA_Init+0x38a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <HAL_DMA_Init+0x448>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_DMA_Init+0x38e>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <HAL_DMA_Init+0x390>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8097 	beq.w	8005ec4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a24      	ldr	r2, [pc, #144]	; (8005e2c <HAL_DMA_Init+0x42c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d021      	beq.n	8005de4 <HAL_DMA_Init+0x3e4>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <HAL_DMA_Init+0x430>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01c      	beq.n	8005de4 <HAL_DMA_Init+0x3e4>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a21      	ldr	r2, [pc, #132]	; (8005e34 <HAL_DMA_Init+0x434>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d017      	beq.n	8005de4 <HAL_DMA_Init+0x3e4>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <HAL_DMA_Init+0x438>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d012      	beq.n	8005de4 <HAL_DMA_Init+0x3e4>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <HAL_DMA_Init+0x43c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00d      	beq.n	8005de4 <HAL_DMA_Init+0x3e4>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1c      	ldr	r2, [pc, #112]	; (8005e40 <HAL_DMA_Init+0x440>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d008      	beq.n	8005de4 <HAL_DMA_Init+0x3e4>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <HAL_DMA_Init+0x444>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <HAL_DMA_Init+0x3e4>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <HAL_DMA_Init+0x448>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <HAL_DMA_Init+0x44c>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d020      	beq.n	8005e50 <HAL_DMA_Init+0x450>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b80      	cmp	r3, #128	; 0x80
 8005e14:	d102      	bne.n	8005e1c <HAL_DMA_Init+0x41c>
 8005e16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e1a:	e01a      	b.n	8005e52 <HAL_DMA_Init+0x452>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e018      	b.n	8005e52 <HAL_DMA_Init+0x452>
 8005e20:	fe10803f 	.word	0xfe10803f
 8005e24:	5c001000 	.word	0x5c001000
 8005e28:	ffff0000 	.word	0xffff0000
 8005e2c:	58025408 	.word	0x58025408
 8005e30:	5802541c 	.word	0x5802541c
 8005e34:	58025430 	.word	0x58025430
 8005e38:	58025444 	.word	0x58025444
 8005e3c:	58025458 	.word	0x58025458
 8005e40:	5802546c 	.word	0x5802546c
 8005e44:	58025480 	.word	0x58025480
 8005e48:	58025494 	.word	0x58025494
 8005e4c:	fffe000f 	.word	0xfffe000f
 8005e50:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68d2      	ldr	r2, [r2, #12]
 8005e56:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e80:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	4b6e      	ldr	r3, [pc, #440]	; (8006050 <HAL_DMA_Init+0x650>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	4a6e      	ldr	r2, [pc, #440]	; (8006054 <HAL_DMA_Init+0x654>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	091b      	lsrs	r3, r3, #4
 8005ea2:	009a      	lsls	r2, r3, #2
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f002 f9a9 	bl	8008200 <DMA_CalcBaseAndBitshift>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	2201      	movs	r2, #1
 8005ebc:	409a      	lsls	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	605a      	str	r2, [r3, #4]
 8005ec2:	e008      	b.n	8005ed6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2240      	movs	r2, #64	; 0x40
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2203      	movs	r2, #3
 8005ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e0b7      	b.n	8006046 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a5f      	ldr	r2, [pc, #380]	; (8006058 <HAL_DMA_Init+0x658>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d072      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a5d      	ldr	r2, [pc, #372]	; (800605c <HAL_DMA_Init+0x65c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d06d      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a5c      	ldr	r2, [pc, #368]	; (8006060 <HAL_DMA_Init+0x660>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d068      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a5a      	ldr	r2, [pc, #360]	; (8006064 <HAL_DMA_Init+0x664>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d063      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a59      	ldr	r2, [pc, #356]	; (8006068 <HAL_DMA_Init+0x668>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d05e      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a57      	ldr	r2, [pc, #348]	; (800606c <HAL_DMA_Init+0x66c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d059      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a56      	ldr	r2, [pc, #344]	; (8006070 <HAL_DMA_Init+0x670>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d054      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a54      	ldr	r2, [pc, #336]	; (8006074 <HAL_DMA_Init+0x674>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d04f      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a53      	ldr	r2, [pc, #332]	; (8006078 <HAL_DMA_Init+0x678>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d04a      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a51      	ldr	r2, [pc, #324]	; (800607c <HAL_DMA_Init+0x67c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d045      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a50      	ldr	r2, [pc, #320]	; (8006080 <HAL_DMA_Init+0x680>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d040      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a4e      	ldr	r2, [pc, #312]	; (8006084 <HAL_DMA_Init+0x684>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d03b      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a4d      	ldr	r2, [pc, #308]	; (8006088 <HAL_DMA_Init+0x688>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d036      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a4b      	ldr	r2, [pc, #300]	; (800608c <HAL_DMA_Init+0x68c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d031      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a4a      	ldr	r2, [pc, #296]	; (8006090 <HAL_DMA_Init+0x690>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d02c      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a48      	ldr	r2, [pc, #288]	; (8006094 <HAL_DMA_Init+0x694>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d027      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a47      	ldr	r2, [pc, #284]	; (8006098 <HAL_DMA_Init+0x698>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d022      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a45      	ldr	r2, [pc, #276]	; (800609c <HAL_DMA_Init+0x69c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01d      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a44      	ldr	r2, [pc, #272]	; (80060a0 <HAL_DMA_Init+0x6a0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d018      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a42      	ldr	r2, [pc, #264]	; (80060a4 <HAL_DMA_Init+0x6a4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a41      	ldr	r2, [pc, #260]	; (80060a8 <HAL_DMA_Init+0x6a8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a3f      	ldr	r2, [pc, #252]	; (80060ac <HAL_DMA_Init+0x6ac>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a3e      	ldr	r2, [pc, #248]	; (80060b0 <HAL_DMA_Init+0x6b0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_DMA_Init+0x5c6>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a3c      	ldr	r2, [pc, #240]	; (80060b4 <HAL_DMA_Init+0x6b4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d101      	bne.n	8005fca <HAL_DMA_Init+0x5ca>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <HAL_DMA_Init+0x5cc>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d032      	beq.n	8006036 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f002 fa43 	bl	800845c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b80      	cmp	r3, #128	; 0x80
 8005fdc:	d102      	bne.n	8005fe4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ff8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d010      	beq.n	8006024 <HAL_DMA_Init+0x624>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b08      	cmp	r3, #8
 8006008:	d80c      	bhi.n	8006024 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f002 fac0 	bl	8008590 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	e008      	b.n	8006036 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	a7fdabf8 	.word	0xa7fdabf8
 8006054:	cccccccd 	.word	0xcccccccd
 8006058:	40020010 	.word	0x40020010
 800605c:	40020028 	.word	0x40020028
 8006060:	40020040 	.word	0x40020040
 8006064:	40020058 	.word	0x40020058
 8006068:	40020070 	.word	0x40020070
 800606c:	40020088 	.word	0x40020088
 8006070:	400200a0 	.word	0x400200a0
 8006074:	400200b8 	.word	0x400200b8
 8006078:	40020410 	.word	0x40020410
 800607c:	40020428 	.word	0x40020428
 8006080:	40020440 	.word	0x40020440
 8006084:	40020458 	.word	0x40020458
 8006088:	40020470 	.word	0x40020470
 800608c:	40020488 	.word	0x40020488
 8006090:	400204a0 	.word	0x400204a0
 8006094:	400204b8 	.word	0x400204b8
 8006098:	58025408 	.word	0x58025408
 800609c:	5802541c 	.word	0x5802541c
 80060a0:	58025430 	.word	0x58025430
 80060a4:	58025444 	.word	0x58025444
 80060a8:	58025458 	.word	0x58025458
 80060ac:	5802546c 	.word	0x5802546c
 80060b0:	58025480 	.word	0x58025480
 80060b4:	58025494 	.word	0x58025494

080060b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e226      	b.n	8006522 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_DMA_Start_IT+0x2a>
 80060de:	2302      	movs	r3, #2
 80060e0:	e21f      	b.n	8006522 <HAL_DMA_Start_IT+0x46a>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	f040 820a 	bne.w	800650c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a68      	ldr	r2, [pc, #416]	; (80062ac <HAL_DMA_Start_IT+0x1f4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d04a      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a66      	ldr	r2, [pc, #408]	; (80062b0 <HAL_DMA_Start_IT+0x1f8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d045      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a65      	ldr	r2, [pc, #404]	; (80062b4 <HAL_DMA_Start_IT+0x1fc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d040      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a63      	ldr	r2, [pc, #396]	; (80062b8 <HAL_DMA_Start_IT+0x200>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d03b      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a62      	ldr	r2, [pc, #392]	; (80062bc <HAL_DMA_Start_IT+0x204>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d036      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a60      	ldr	r2, [pc, #384]	; (80062c0 <HAL_DMA_Start_IT+0x208>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d031      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a5f      	ldr	r2, [pc, #380]	; (80062c4 <HAL_DMA_Start_IT+0x20c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d02c      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a5d      	ldr	r2, [pc, #372]	; (80062c8 <HAL_DMA_Start_IT+0x210>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d027      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a5c      	ldr	r2, [pc, #368]	; (80062cc <HAL_DMA_Start_IT+0x214>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a5a      	ldr	r2, [pc, #360]	; (80062d0 <HAL_DMA_Start_IT+0x218>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01d      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a59      	ldr	r2, [pc, #356]	; (80062d4 <HAL_DMA_Start_IT+0x21c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d018      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a57      	ldr	r2, [pc, #348]	; (80062d8 <HAL_DMA_Start_IT+0x220>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a56      	ldr	r2, [pc, #344]	; (80062dc <HAL_DMA_Start_IT+0x224>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a54      	ldr	r2, [pc, #336]	; (80062e0 <HAL_DMA_Start_IT+0x228>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a53      	ldr	r2, [pc, #332]	; (80062e4 <HAL_DMA_Start_IT+0x22c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_DMA_Start_IT+0xee>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a51      	ldr	r2, [pc, #324]	; (80062e8 <HAL_DMA_Start_IT+0x230>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <HAL_DMA_Start_IT+0x100>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e007      	b.n	80061c8 <HAL_DMA_Start_IT+0x110>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0201 	bic.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f001 fe6a 	bl	8007ea8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a34      	ldr	r2, [pc, #208]	; (80062ac <HAL_DMA_Start_IT+0x1f4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d04a      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a33      	ldr	r2, [pc, #204]	; (80062b0 <HAL_DMA_Start_IT+0x1f8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d045      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a31      	ldr	r2, [pc, #196]	; (80062b4 <HAL_DMA_Start_IT+0x1fc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d040      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a30      	ldr	r2, [pc, #192]	; (80062b8 <HAL_DMA_Start_IT+0x200>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d03b      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a2e      	ldr	r2, [pc, #184]	; (80062bc <HAL_DMA_Start_IT+0x204>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d036      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a2d      	ldr	r2, [pc, #180]	; (80062c0 <HAL_DMA_Start_IT+0x208>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d031      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a2b      	ldr	r2, [pc, #172]	; (80062c4 <HAL_DMA_Start_IT+0x20c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d02c      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2a      	ldr	r2, [pc, #168]	; (80062c8 <HAL_DMA_Start_IT+0x210>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d027      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a28      	ldr	r2, [pc, #160]	; (80062cc <HAL_DMA_Start_IT+0x214>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d022      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <HAL_DMA_Start_IT+0x218>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d01d      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <HAL_DMA_Start_IT+0x21c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d018      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <HAL_DMA_Start_IT+0x220>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d013      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a22      	ldr	r2, [pc, #136]	; (80062dc <HAL_DMA_Start_IT+0x224>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00e      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a21      	ldr	r2, [pc, #132]	; (80062e0 <HAL_DMA_Start_IT+0x228>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <HAL_DMA_Start_IT+0x22c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_DMA_Start_IT+0x1bc>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <HAL_DMA_Start_IT+0x230>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <HAL_DMA_Start_IT+0x1c0>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_DMA_Start_IT+0x1c2>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d036      	beq.n	80062ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f023 021e 	bic.w	r2, r3, #30
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0216 	orr.w	r2, r2, #22
 8006290:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d03e      	beq.n	8006318 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0208 	orr.w	r2, r2, #8
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	e035      	b.n	8006318 <HAL_DMA_Start_IT+0x260>
 80062ac:	40020010 	.word	0x40020010
 80062b0:	40020028 	.word	0x40020028
 80062b4:	40020040 	.word	0x40020040
 80062b8:	40020058 	.word	0x40020058
 80062bc:	40020070 	.word	0x40020070
 80062c0:	40020088 	.word	0x40020088
 80062c4:	400200a0 	.word	0x400200a0
 80062c8:	400200b8 	.word	0x400200b8
 80062cc:	40020410 	.word	0x40020410
 80062d0:	40020428 	.word	0x40020428
 80062d4:	40020440 	.word	0x40020440
 80062d8:	40020458 	.word	0x40020458
 80062dc:	40020470 	.word	0x40020470
 80062e0:	40020488 	.word	0x40020488
 80062e4:	400204a0 	.word	0x400204a0
 80062e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 020e 	bic.w	r2, r3, #14
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 020a 	orr.w	r2, r2, #10
 80062fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0204 	orr.w	r2, r2, #4
 8006316:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a83      	ldr	r2, [pc, #524]	; (800652c <HAL_DMA_Start_IT+0x474>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d072      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a82      	ldr	r2, [pc, #520]	; (8006530 <HAL_DMA_Start_IT+0x478>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d06d      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a80      	ldr	r2, [pc, #512]	; (8006534 <HAL_DMA_Start_IT+0x47c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d068      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a7f      	ldr	r2, [pc, #508]	; (8006538 <HAL_DMA_Start_IT+0x480>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d063      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a7d      	ldr	r2, [pc, #500]	; (800653c <HAL_DMA_Start_IT+0x484>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d05e      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a7c      	ldr	r2, [pc, #496]	; (8006540 <HAL_DMA_Start_IT+0x488>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d059      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a7a      	ldr	r2, [pc, #488]	; (8006544 <HAL_DMA_Start_IT+0x48c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d054      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a79      	ldr	r2, [pc, #484]	; (8006548 <HAL_DMA_Start_IT+0x490>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d04f      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a77      	ldr	r2, [pc, #476]	; (800654c <HAL_DMA_Start_IT+0x494>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d04a      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a76      	ldr	r2, [pc, #472]	; (8006550 <HAL_DMA_Start_IT+0x498>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d045      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a74      	ldr	r2, [pc, #464]	; (8006554 <HAL_DMA_Start_IT+0x49c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d040      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a73      	ldr	r2, [pc, #460]	; (8006558 <HAL_DMA_Start_IT+0x4a0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d03b      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a71      	ldr	r2, [pc, #452]	; (800655c <HAL_DMA_Start_IT+0x4a4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d036      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a70      	ldr	r2, [pc, #448]	; (8006560 <HAL_DMA_Start_IT+0x4a8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d031      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a6e      	ldr	r2, [pc, #440]	; (8006564 <HAL_DMA_Start_IT+0x4ac>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d02c      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a6d      	ldr	r2, [pc, #436]	; (8006568 <HAL_DMA_Start_IT+0x4b0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d027      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a6b      	ldr	r2, [pc, #428]	; (800656c <HAL_DMA_Start_IT+0x4b4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d022      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6a      	ldr	r2, [pc, #424]	; (8006570 <HAL_DMA_Start_IT+0x4b8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d01d      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a68      	ldr	r2, [pc, #416]	; (8006574 <HAL_DMA_Start_IT+0x4bc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d018      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a67      	ldr	r2, [pc, #412]	; (8006578 <HAL_DMA_Start_IT+0x4c0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d013      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a65      	ldr	r2, [pc, #404]	; (800657c <HAL_DMA_Start_IT+0x4c4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00e      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a64      	ldr	r2, [pc, #400]	; (8006580 <HAL_DMA_Start_IT+0x4c8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d009      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a62      	ldr	r2, [pc, #392]	; (8006584 <HAL_DMA_Start_IT+0x4cc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <HAL_DMA_Start_IT+0x350>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a61      	ldr	r2, [pc, #388]	; (8006588 <HAL_DMA_Start_IT+0x4d0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d101      	bne.n	800640c <HAL_DMA_Start_IT+0x354>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <HAL_DMA_Start_IT+0x356>
 800640c:	2300      	movs	r3, #0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01a      	beq.n	8006448 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800642e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006446:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a37      	ldr	r2, [pc, #220]	; (800652c <HAL_DMA_Start_IT+0x474>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d04a      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a36      	ldr	r2, [pc, #216]	; (8006530 <HAL_DMA_Start_IT+0x478>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d045      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a34      	ldr	r2, [pc, #208]	; (8006534 <HAL_DMA_Start_IT+0x47c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d040      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a33      	ldr	r2, [pc, #204]	; (8006538 <HAL_DMA_Start_IT+0x480>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d03b      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a31      	ldr	r2, [pc, #196]	; (800653c <HAL_DMA_Start_IT+0x484>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d036      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a30      	ldr	r2, [pc, #192]	; (8006540 <HAL_DMA_Start_IT+0x488>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d031      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a2e      	ldr	r2, [pc, #184]	; (8006544 <HAL_DMA_Start_IT+0x48c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d02c      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a2d      	ldr	r2, [pc, #180]	; (8006548 <HAL_DMA_Start_IT+0x490>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d027      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a2b      	ldr	r2, [pc, #172]	; (800654c <HAL_DMA_Start_IT+0x494>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d022      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a2a      	ldr	r2, [pc, #168]	; (8006550 <HAL_DMA_Start_IT+0x498>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d01d      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a28      	ldr	r2, [pc, #160]	; (8006554 <HAL_DMA_Start_IT+0x49c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d018      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a27      	ldr	r2, [pc, #156]	; (8006558 <HAL_DMA_Start_IT+0x4a0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a25      	ldr	r2, [pc, #148]	; (800655c <HAL_DMA_Start_IT+0x4a4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00e      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a24      	ldr	r2, [pc, #144]	; (8006560 <HAL_DMA_Start_IT+0x4a8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a22      	ldr	r2, [pc, #136]	; (8006564 <HAL_DMA_Start_IT+0x4ac>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <HAL_DMA_Start_IT+0x430>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a21      	ldr	r2, [pc, #132]	; (8006568 <HAL_DMA_Start_IT+0x4b0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d108      	bne.n	80064fa <HAL_DMA_Start_IT+0x442>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	e012      	b.n	8006520 <HAL_DMA_Start_IT+0x468>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	e009      	b.n	8006520 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006512:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40020010 	.word	0x40020010
 8006530:	40020028 	.word	0x40020028
 8006534:	40020040 	.word	0x40020040
 8006538:	40020058 	.word	0x40020058
 800653c:	40020070 	.word	0x40020070
 8006540:	40020088 	.word	0x40020088
 8006544:	400200a0 	.word	0x400200a0
 8006548:	400200b8 	.word	0x400200b8
 800654c:	40020410 	.word	0x40020410
 8006550:	40020428 	.word	0x40020428
 8006554:	40020440 	.word	0x40020440
 8006558:	40020458 	.word	0x40020458
 800655c:	40020470 	.word	0x40020470
 8006560:	40020488 	.word	0x40020488
 8006564:	400204a0 	.word	0x400204a0
 8006568:	400204b8 	.word	0x400204b8
 800656c:	58025408 	.word	0x58025408
 8006570:	5802541c 	.word	0x5802541c
 8006574:	58025430 	.word	0x58025430
 8006578:	58025444 	.word	0x58025444
 800657c:	58025458 	.word	0x58025458
 8006580:	5802546c 	.word	0x5802546c
 8006584:	58025480 	.word	0x58025480
 8006588:	58025494 	.word	0x58025494

0800658c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006594:	f7fd f90c 	bl	80037b0 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e2dc      	b.n	8006b5e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d008      	beq.n	80065c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2280      	movs	r2, #128	; 0x80
 80065b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e2cd      	b.n	8006b5e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a76      	ldr	r2, [pc, #472]	; (80067a0 <HAL_DMA_Abort+0x214>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d04a      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a74      	ldr	r2, [pc, #464]	; (80067a4 <HAL_DMA_Abort+0x218>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d045      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a73      	ldr	r2, [pc, #460]	; (80067a8 <HAL_DMA_Abort+0x21c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d040      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a71      	ldr	r2, [pc, #452]	; (80067ac <HAL_DMA_Abort+0x220>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d03b      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a70      	ldr	r2, [pc, #448]	; (80067b0 <HAL_DMA_Abort+0x224>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d036      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a6e      	ldr	r2, [pc, #440]	; (80067b4 <HAL_DMA_Abort+0x228>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d031      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a6d      	ldr	r2, [pc, #436]	; (80067b8 <HAL_DMA_Abort+0x22c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d02c      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a6b      	ldr	r2, [pc, #428]	; (80067bc <HAL_DMA_Abort+0x230>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d027      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a6a      	ldr	r2, [pc, #424]	; (80067c0 <HAL_DMA_Abort+0x234>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d022      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a68      	ldr	r2, [pc, #416]	; (80067c4 <HAL_DMA_Abort+0x238>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d01d      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a67      	ldr	r2, [pc, #412]	; (80067c8 <HAL_DMA_Abort+0x23c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d018      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a65      	ldr	r2, [pc, #404]	; (80067cc <HAL_DMA_Abort+0x240>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a64      	ldr	r2, [pc, #400]	; (80067d0 <HAL_DMA_Abort+0x244>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00e      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a62      	ldr	r2, [pc, #392]	; (80067d4 <HAL_DMA_Abort+0x248>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a61      	ldr	r2, [pc, #388]	; (80067d8 <HAL_DMA_Abort+0x24c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_DMA_Abort+0xd6>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5f      	ldr	r2, [pc, #380]	; (80067dc <HAL_DMA_Abort+0x250>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d101      	bne.n	8006666 <HAL_DMA_Abort+0xda>
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <HAL_DMA_Abort+0xdc>
 8006666:	2300      	movs	r3, #0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d013      	beq.n	8006694 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 021e 	bic.w	r2, r2, #30
 800667a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800668a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	e00a      	b.n	80066aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 020e 	bic.w	r2, r2, #14
 80066a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a3c      	ldr	r2, [pc, #240]	; (80067a0 <HAL_DMA_Abort+0x214>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d072      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a3a      	ldr	r2, [pc, #232]	; (80067a4 <HAL_DMA_Abort+0x218>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d06d      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a39      	ldr	r2, [pc, #228]	; (80067a8 <HAL_DMA_Abort+0x21c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d068      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a37      	ldr	r2, [pc, #220]	; (80067ac <HAL_DMA_Abort+0x220>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d063      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a36      	ldr	r2, [pc, #216]	; (80067b0 <HAL_DMA_Abort+0x224>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d05e      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a34      	ldr	r2, [pc, #208]	; (80067b4 <HAL_DMA_Abort+0x228>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d059      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a33      	ldr	r2, [pc, #204]	; (80067b8 <HAL_DMA_Abort+0x22c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d054      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a31      	ldr	r2, [pc, #196]	; (80067bc <HAL_DMA_Abort+0x230>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d04f      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a30      	ldr	r2, [pc, #192]	; (80067c0 <HAL_DMA_Abort+0x234>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d04a      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a2e      	ldr	r2, [pc, #184]	; (80067c4 <HAL_DMA_Abort+0x238>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d045      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a2d      	ldr	r2, [pc, #180]	; (80067c8 <HAL_DMA_Abort+0x23c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d040      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2b      	ldr	r2, [pc, #172]	; (80067cc <HAL_DMA_Abort+0x240>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d03b      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2a      	ldr	r2, [pc, #168]	; (80067d0 <HAL_DMA_Abort+0x244>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d036      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a28      	ldr	r2, [pc, #160]	; (80067d4 <HAL_DMA_Abort+0x248>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d031      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a27      	ldr	r2, [pc, #156]	; (80067d8 <HAL_DMA_Abort+0x24c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d02c      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a25      	ldr	r2, [pc, #148]	; (80067dc <HAL_DMA_Abort+0x250>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d027      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a24      	ldr	r2, [pc, #144]	; (80067e0 <HAL_DMA_Abort+0x254>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d022      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a22      	ldr	r2, [pc, #136]	; (80067e4 <HAL_DMA_Abort+0x258>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d01d      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <HAL_DMA_Abort+0x25c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d018      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1f      	ldr	r2, [pc, #124]	; (80067ec <HAL_DMA_Abort+0x260>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1e      	ldr	r2, [pc, #120]	; (80067f0 <HAL_DMA_Abort+0x264>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00e      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1c      	ldr	r2, [pc, #112]	; (80067f4 <HAL_DMA_Abort+0x268>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d009      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1b      	ldr	r2, [pc, #108]	; (80067f8 <HAL_DMA_Abort+0x26c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d004      	beq.n	800679a <HAL_DMA_Abort+0x20e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a19      	ldr	r2, [pc, #100]	; (80067fc <HAL_DMA_Abort+0x270>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d132      	bne.n	8006800 <HAL_DMA_Abort+0x274>
 800679a:	2301      	movs	r3, #1
 800679c:	e031      	b.n	8006802 <HAL_DMA_Abort+0x276>
 800679e:	bf00      	nop
 80067a0:	40020010 	.word	0x40020010
 80067a4:	40020028 	.word	0x40020028
 80067a8:	40020040 	.word	0x40020040
 80067ac:	40020058 	.word	0x40020058
 80067b0:	40020070 	.word	0x40020070
 80067b4:	40020088 	.word	0x40020088
 80067b8:	400200a0 	.word	0x400200a0
 80067bc:	400200b8 	.word	0x400200b8
 80067c0:	40020410 	.word	0x40020410
 80067c4:	40020428 	.word	0x40020428
 80067c8:	40020440 	.word	0x40020440
 80067cc:	40020458 	.word	0x40020458
 80067d0:	40020470 	.word	0x40020470
 80067d4:	40020488 	.word	0x40020488
 80067d8:	400204a0 	.word	0x400204a0
 80067dc:	400204b8 	.word	0x400204b8
 80067e0:	58025408 	.word	0x58025408
 80067e4:	5802541c 	.word	0x5802541c
 80067e8:	58025430 	.word	0x58025430
 80067ec:	58025444 	.word	0x58025444
 80067f0:	58025458 	.word	0x58025458
 80067f4:	5802546c 	.word	0x5802546c
 80067f8:	58025480 	.word	0x58025480
 80067fc:	58025494 	.word	0x58025494
 8006800:	2300      	movs	r3, #0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006814:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a6d      	ldr	r2, [pc, #436]	; (80069d0 <HAL_DMA_Abort+0x444>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d04a      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a6b      	ldr	r2, [pc, #428]	; (80069d4 <HAL_DMA_Abort+0x448>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d045      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a6a      	ldr	r2, [pc, #424]	; (80069d8 <HAL_DMA_Abort+0x44c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d040      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a68      	ldr	r2, [pc, #416]	; (80069dc <HAL_DMA_Abort+0x450>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d03b      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a67      	ldr	r2, [pc, #412]	; (80069e0 <HAL_DMA_Abort+0x454>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d036      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a65      	ldr	r2, [pc, #404]	; (80069e4 <HAL_DMA_Abort+0x458>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d031      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a64      	ldr	r2, [pc, #400]	; (80069e8 <HAL_DMA_Abort+0x45c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d02c      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a62      	ldr	r2, [pc, #392]	; (80069ec <HAL_DMA_Abort+0x460>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d027      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a61      	ldr	r2, [pc, #388]	; (80069f0 <HAL_DMA_Abort+0x464>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d022      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a5f      	ldr	r2, [pc, #380]	; (80069f4 <HAL_DMA_Abort+0x468>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01d      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a5e      	ldr	r2, [pc, #376]	; (80069f8 <HAL_DMA_Abort+0x46c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d018      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a5c      	ldr	r2, [pc, #368]	; (80069fc <HAL_DMA_Abort+0x470>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a5b      	ldr	r2, [pc, #364]	; (8006a00 <HAL_DMA_Abort+0x474>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00e      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a59      	ldr	r2, [pc, #356]	; (8006a04 <HAL_DMA_Abort+0x478>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d009      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a58      	ldr	r2, [pc, #352]	; (8006a08 <HAL_DMA_Abort+0x47c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d004      	beq.n	80068b6 <HAL_DMA_Abort+0x32a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a56      	ldr	r2, [pc, #344]	; (8006a0c <HAL_DMA_Abort+0x480>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d108      	bne.n	80068c8 <HAL_DMA_Abort+0x33c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0201 	bic.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e007      	b.n	80068d8 <HAL_DMA_Abort+0x34c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0201 	bic.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068d8:	e013      	b.n	8006902 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068da:	f7fc ff69 	bl	80037b0 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b05      	cmp	r3, #5
 80068e6:	d90c      	bls.n	8006902 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2203      	movs	r2, #3
 80068f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e12d      	b.n	8006b5e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e5      	bne.n	80068da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a2f      	ldr	r2, [pc, #188]	; (80069d0 <HAL_DMA_Abort+0x444>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d04a      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a2d      	ldr	r2, [pc, #180]	; (80069d4 <HAL_DMA_Abort+0x448>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d045      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a2c      	ldr	r2, [pc, #176]	; (80069d8 <HAL_DMA_Abort+0x44c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d040      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a2a      	ldr	r2, [pc, #168]	; (80069dc <HAL_DMA_Abort+0x450>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d03b      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a29      	ldr	r2, [pc, #164]	; (80069e0 <HAL_DMA_Abort+0x454>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d036      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a27      	ldr	r2, [pc, #156]	; (80069e4 <HAL_DMA_Abort+0x458>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d031      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <HAL_DMA_Abort+0x45c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d02c      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a24      	ldr	r2, [pc, #144]	; (80069ec <HAL_DMA_Abort+0x460>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d027      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a23      	ldr	r2, [pc, #140]	; (80069f0 <HAL_DMA_Abort+0x464>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d022      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <HAL_DMA_Abort+0x468>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d01d      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a20      	ldr	r2, [pc, #128]	; (80069f8 <HAL_DMA_Abort+0x46c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d018      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1e      	ldr	r2, [pc, #120]	; (80069fc <HAL_DMA_Abort+0x470>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1d      	ldr	r2, [pc, #116]	; (8006a00 <HAL_DMA_Abort+0x474>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00e      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1b      	ldr	r2, [pc, #108]	; (8006a04 <HAL_DMA_Abort+0x478>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d009      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1a      	ldr	r2, [pc, #104]	; (8006a08 <HAL_DMA_Abort+0x47c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d004      	beq.n	80069ae <HAL_DMA_Abort+0x422>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <HAL_DMA_Abort+0x480>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d101      	bne.n	80069b2 <HAL_DMA_Abort+0x426>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <HAL_DMA_Abort+0x428>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d02b      	beq.n	8006a10 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069bc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	223f      	movs	r2, #63	; 0x3f
 80069c8:	409a      	lsls	r2, r3
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	609a      	str	r2, [r3, #8]
 80069ce:	e02a      	b.n	8006a26 <HAL_DMA_Abort+0x49a>
 80069d0:	40020010 	.word	0x40020010
 80069d4:	40020028 	.word	0x40020028
 80069d8:	40020040 	.word	0x40020040
 80069dc:	40020058 	.word	0x40020058
 80069e0:	40020070 	.word	0x40020070
 80069e4:	40020088 	.word	0x40020088
 80069e8:	400200a0 	.word	0x400200a0
 80069ec:	400200b8 	.word	0x400200b8
 80069f0:	40020410 	.word	0x40020410
 80069f4:	40020428 	.word	0x40020428
 80069f8:	40020440 	.word	0x40020440
 80069fc:	40020458 	.word	0x40020458
 8006a00:	40020470 	.word	0x40020470
 8006a04:	40020488 	.word	0x40020488
 8006a08:	400204a0 	.word	0x400204a0
 8006a0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a14:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2201      	movs	r2, #1
 8006a20:	409a      	lsls	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a4f      	ldr	r2, [pc, #316]	; (8006b68 <HAL_DMA_Abort+0x5dc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d072      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a4d      	ldr	r2, [pc, #308]	; (8006b6c <HAL_DMA_Abort+0x5e0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d06d      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a4c      	ldr	r2, [pc, #304]	; (8006b70 <HAL_DMA_Abort+0x5e4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d068      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a4a      	ldr	r2, [pc, #296]	; (8006b74 <HAL_DMA_Abort+0x5e8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d063      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a49      	ldr	r2, [pc, #292]	; (8006b78 <HAL_DMA_Abort+0x5ec>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d05e      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a47      	ldr	r2, [pc, #284]	; (8006b7c <HAL_DMA_Abort+0x5f0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d059      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a46      	ldr	r2, [pc, #280]	; (8006b80 <HAL_DMA_Abort+0x5f4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d054      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a44      	ldr	r2, [pc, #272]	; (8006b84 <HAL_DMA_Abort+0x5f8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d04f      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a43      	ldr	r2, [pc, #268]	; (8006b88 <HAL_DMA_Abort+0x5fc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d04a      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a41      	ldr	r2, [pc, #260]	; (8006b8c <HAL_DMA_Abort+0x600>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d045      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a40      	ldr	r2, [pc, #256]	; (8006b90 <HAL_DMA_Abort+0x604>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d040      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a3e      	ldr	r2, [pc, #248]	; (8006b94 <HAL_DMA_Abort+0x608>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d03b      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a3d      	ldr	r2, [pc, #244]	; (8006b98 <HAL_DMA_Abort+0x60c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d036      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a3b      	ldr	r2, [pc, #236]	; (8006b9c <HAL_DMA_Abort+0x610>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d031      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a3a      	ldr	r2, [pc, #232]	; (8006ba0 <HAL_DMA_Abort+0x614>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d02c      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a38      	ldr	r2, [pc, #224]	; (8006ba4 <HAL_DMA_Abort+0x618>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d027      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a37      	ldr	r2, [pc, #220]	; (8006ba8 <HAL_DMA_Abort+0x61c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d022      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a35      	ldr	r2, [pc, #212]	; (8006bac <HAL_DMA_Abort+0x620>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01d      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a34      	ldr	r2, [pc, #208]	; (8006bb0 <HAL_DMA_Abort+0x624>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d018      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a32      	ldr	r2, [pc, #200]	; (8006bb4 <HAL_DMA_Abort+0x628>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d013      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a31      	ldr	r2, [pc, #196]	; (8006bb8 <HAL_DMA_Abort+0x62c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00e      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a2f      	ldr	r2, [pc, #188]	; (8006bbc <HAL_DMA_Abort+0x630>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2e      	ldr	r2, [pc, #184]	; (8006bc0 <HAL_DMA_Abort+0x634>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_DMA_Abort+0x58a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2c      	ldr	r2, [pc, #176]	; (8006bc4 <HAL_DMA_Abort+0x638>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d101      	bne.n	8006b1a <HAL_DMA_Abort+0x58e>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <HAL_DMA_Abort+0x590>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d015      	beq.n	8006b4c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b28:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b40:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b4a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40020010 	.word	0x40020010
 8006b6c:	40020028 	.word	0x40020028
 8006b70:	40020040 	.word	0x40020040
 8006b74:	40020058 	.word	0x40020058
 8006b78:	40020070 	.word	0x40020070
 8006b7c:	40020088 	.word	0x40020088
 8006b80:	400200a0 	.word	0x400200a0
 8006b84:	400200b8 	.word	0x400200b8
 8006b88:	40020410 	.word	0x40020410
 8006b8c:	40020428 	.word	0x40020428
 8006b90:	40020440 	.word	0x40020440
 8006b94:	40020458 	.word	0x40020458
 8006b98:	40020470 	.word	0x40020470
 8006b9c:	40020488 	.word	0x40020488
 8006ba0:	400204a0 	.word	0x400204a0
 8006ba4:	400204b8 	.word	0x400204b8
 8006ba8:	58025408 	.word	0x58025408
 8006bac:	5802541c 	.word	0x5802541c
 8006bb0:	58025430 	.word	0x58025430
 8006bb4:	58025444 	.word	0x58025444
 8006bb8:	58025458 	.word	0x58025458
 8006bbc:	5802546c 	.word	0x5802546c
 8006bc0:	58025480 	.word	0x58025480
 8006bc4:	58025494 	.word	0x58025494

08006bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e237      	b.n	800704a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d004      	beq.n	8006bf0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2280      	movs	r2, #128	; 0x80
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e22c      	b.n	800704a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a5c      	ldr	r2, [pc, #368]	; (8006d68 <HAL_DMA_Abort_IT+0x1a0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d04a      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a5b      	ldr	r2, [pc, #364]	; (8006d6c <HAL_DMA_Abort_IT+0x1a4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d045      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a59      	ldr	r2, [pc, #356]	; (8006d70 <HAL_DMA_Abort_IT+0x1a8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d040      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a58      	ldr	r2, [pc, #352]	; (8006d74 <HAL_DMA_Abort_IT+0x1ac>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d03b      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a56      	ldr	r2, [pc, #344]	; (8006d78 <HAL_DMA_Abort_IT+0x1b0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d036      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a55      	ldr	r2, [pc, #340]	; (8006d7c <HAL_DMA_Abort_IT+0x1b4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d031      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a53      	ldr	r2, [pc, #332]	; (8006d80 <HAL_DMA_Abort_IT+0x1b8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d02c      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a52      	ldr	r2, [pc, #328]	; (8006d84 <HAL_DMA_Abort_IT+0x1bc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d027      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a50      	ldr	r2, [pc, #320]	; (8006d88 <HAL_DMA_Abort_IT+0x1c0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d022      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a4f      	ldr	r2, [pc, #316]	; (8006d8c <HAL_DMA_Abort_IT+0x1c4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d01d      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a4d      	ldr	r2, [pc, #308]	; (8006d90 <HAL_DMA_Abort_IT+0x1c8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a4c      	ldr	r2, [pc, #304]	; (8006d94 <HAL_DMA_Abort_IT+0x1cc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a4a      	ldr	r2, [pc, #296]	; (8006d98 <HAL_DMA_Abort_IT+0x1d0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a49      	ldr	r2, [pc, #292]	; (8006d9c <HAL_DMA_Abort_IT+0x1d4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a47      	ldr	r2, [pc, #284]	; (8006da0 <HAL_DMA_Abort_IT+0x1d8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xc8>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a46      	ldr	r2, [pc, #280]	; (8006da4 <HAL_DMA_Abort_IT+0x1dc>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d101      	bne.n	8006c94 <HAL_DMA_Abort_IT+0xcc>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <HAL_DMA_Abort_IT+0xce>
 8006c94:	2300      	movs	r3, #0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8086 	beq.w	8006da8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a2f      	ldr	r2, [pc, #188]	; (8006d68 <HAL_DMA_Abort_IT+0x1a0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d04a      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2e      	ldr	r2, [pc, #184]	; (8006d6c <HAL_DMA_Abort_IT+0x1a4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d045      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a2c      	ldr	r2, [pc, #176]	; (8006d70 <HAL_DMA_Abort_IT+0x1a8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d040      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a2b      	ldr	r2, [pc, #172]	; (8006d74 <HAL_DMA_Abort_IT+0x1ac>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d03b      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a29      	ldr	r2, [pc, #164]	; (8006d78 <HAL_DMA_Abort_IT+0x1b0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d036      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a28      	ldr	r2, [pc, #160]	; (8006d7c <HAL_DMA_Abort_IT+0x1b4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d031      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a26      	ldr	r2, [pc, #152]	; (8006d80 <HAL_DMA_Abort_IT+0x1b8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d02c      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a25      	ldr	r2, [pc, #148]	; (8006d84 <HAL_DMA_Abort_IT+0x1bc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d027      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a23      	ldr	r2, [pc, #140]	; (8006d88 <HAL_DMA_Abort_IT+0x1c0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d022      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <HAL_DMA_Abort_IT+0x1c4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d01d      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <HAL_DMA_Abort_IT+0x1c8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d018      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <HAL_DMA_Abort_IT+0x1cc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <HAL_DMA_Abort_IT+0x1d0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00e      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <HAL_DMA_Abort_IT+0x1d4>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d009      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1a      	ldr	r2, [pc, #104]	; (8006da0 <HAL_DMA_Abort_IT+0x1d8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <HAL_DMA_Abort_IT+0x17c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a19      	ldr	r2, [pc, #100]	; (8006da4 <HAL_DMA_Abort_IT+0x1dc>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d108      	bne.n	8006d56 <HAL_DMA_Abort_IT+0x18e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e178      	b.n	8007048 <HAL_DMA_Abort_IT+0x480>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e16f      	b.n	8007048 <HAL_DMA_Abort_IT+0x480>
 8006d68:	40020010 	.word	0x40020010
 8006d6c:	40020028 	.word	0x40020028
 8006d70:	40020040 	.word	0x40020040
 8006d74:	40020058 	.word	0x40020058
 8006d78:	40020070 	.word	0x40020070
 8006d7c:	40020088 	.word	0x40020088
 8006d80:	400200a0 	.word	0x400200a0
 8006d84:	400200b8 	.word	0x400200b8
 8006d88:	40020410 	.word	0x40020410
 8006d8c:	40020428 	.word	0x40020428
 8006d90:	40020440 	.word	0x40020440
 8006d94:	40020458 	.word	0x40020458
 8006d98:	40020470 	.word	0x40020470
 8006d9c:	40020488 	.word	0x40020488
 8006da0:	400204a0 	.word	0x400204a0
 8006da4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 020e 	bic.w	r2, r2, #14
 8006db6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a6c      	ldr	r2, [pc, #432]	; (8006f70 <HAL_DMA_Abort_IT+0x3a8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d04a      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a6b      	ldr	r2, [pc, #428]	; (8006f74 <HAL_DMA_Abort_IT+0x3ac>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d045      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a69      	ldr	r2, [pc, #420]	; (8006f78 <HAL_DMA_Abort_IT+0x3b0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d040      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a68      	ldr	r2, [pc, #416]	; (8006f7c <HAL_DMA_Abort_IT+0x3b4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d03b      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a66      	ldr	r2, [pc, #408]	; (8006f80 <HAL_DMA_Abort_IT+0x3b8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d036      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a65      	ldr	r2, [pc, #404]	; (8006f84 <HAL_DMA_Abort_IT+0x3bc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d031      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a63      	ldr	r2, [pc, #396]	; (8006f88 <HAL_DMA_Abort_IT+0x3c0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d02c      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a62      	ldr	r2, [pc, #392]	; (8006f8c <HAL_DMA_Abort_IT+0x3c4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d027      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a60      	ldr	r2, [pc, #384]	; (8006f90 <HAL_DMA_Abort_IT+0x3c8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d022      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a5f      	ldr	r2, [pc, #380]	; (8006f94 <HAL_DMA_Abort_IT+0x3cc>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d01d      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a5d      	ldr	r2, [pc, #372]	; (8006f98 <HAL_DMA_Abort_IT+0x3d0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d018      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a5c      	ldr	r2, [pc, #368]	; (8006f9c <HAL_DMA_Abort_IT+0x3d4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d013      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a5a      	ldr	r2, [pc, #360]	; (8006fa0 <HAL_DMA_Abort_IT+0x3d8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00e      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a59      	ldr	r2, [pc, #356]	; (8006fa4 <HAL_DMA_Abort_IT+0x3dc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d009      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a57      	ldr	r2, [pc, #348]	; (8006fa8 <HAL_DMA_Abort_IT+0x3e0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <HAL_DMA_Abort_IT+0x290>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a56      	ldr	r2, [pc, #344]	; (8006fac <HAL_DMA_Abort_IT+0x3e4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d108      	bne.n	8006e6a <HAL_DMA_Abort_IT+0x2a2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0201 	bic.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	e007      	b.n	8006e7a <HAL_DMA_Abort_IT+0x2b2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0201 	bic.w	r2, r2, #1
 8006e78:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a3c      	ldr	r2, [pc, #240]	; (8006f70 <HAL_DMA_Abort_IT+0x3a8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d072      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a3a      	ldr	r2, [pc, #232]	; (8006f74 <HAL_DMA_Abort_IT+0x3ac>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d06d      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a39      	ldr	r2, [pc, #228]	; (8006f78 <HAL_DMA_Abort_IT+0x3b0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d068      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a37      	ldr	r2, [pc, #220]	; (8006f7c <HAL_DMA_Abort_IT+0x3b4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d063      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a36      	ldr	r2, [pc, #216]	; (8006f80 <HAL_DMA_Abort_IT+0x3b8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d05e      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a34      	ldr	r2, [pc, #208]	; (8006f84 <HAL_DMA_Abort_IT+0x3bc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d059      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a33      	ldr	r2, [pc, #204]	; (8006f88 <HAL_DMA_Abort_IT+0x3c0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d054      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a31      	ldr	r2, [pc, #196]	; (8006f8c <HAL_DMA_Abort_IT+0x3c4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d04f      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a30      	ldr	r2, [pc, #192]	; (8006f90 <HAL_DMA_Abort_IT+0x3c8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d04a      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2e      	ldr	r2, [pc, #184]	; (8006f94 <HAL_DMA_Abort_IT+0x3cc>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d045      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2d      	ldr	r2, [pc, #180]	; (8006f98 <HAL_DMA_Abort_IT+0x3d0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d040      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2b      	ldr	r2, [pc, #172]	; (8006f9c <HAL_DMA_Abort_IT+0x3d4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d03b      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a2a      	ldr	r2, [pc, #168]	; (8006fa0 <HAL_DMA_Abort_IT+0x3d8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d036      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a28      	ldr	r2, [pc, #160]	; (8006fa4 <HAL_DMA_Abort_IT+0x3dc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d031      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a27      	ldr	r2, [pc, #156]	; (8006fa8 <HAL_DMA_Abort_IT+0x3e0>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d02c      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a25      	ldr	r2, [pc, #148]	; (8006fac <HAL_DMA_Abort_IT+0x3e4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d027      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <HAL_DMA_Abort_IT+0x3e8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d022      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a22      	ldr	r2, [pc, #136]	; (8006fb4 <HAL_DMA_Abort_IT+0x3ec>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d01d      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <HAL_DMA_Abort_IT+0x3f0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d018      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a1f      	ldr	r2, [pc, #124]	; (8006fbc <HAL_DMA_Abort_IT+0x3f4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d013      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1e      	ldr	r2, [pc, #120]	; (8006fc0 <HAL_DMA_Abort_IT+0x3f8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00e      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1c      	ldr	r2, [pc, #112]	; (8006fc4 <HAL_DMA_Abort_IT+0x3fc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d009      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1b      	ldr	r2, [pc, #108]	; (8006fc8 <HAL_DMA_Abort_IT+0x400>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d004      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x3a2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a19      	ldr	r2, [pc, #100]	; (8006fcc <HAL_DMA_Abort_IT+0x404>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d132      	bne.n	8006fd0 <HAL_DMA_Abort_IT+0x408>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e031      	b.n	8006fd2 <HAL_DMA_Abort_IT+0x40a>
 8006f6e:	bf00      	nop
 8006f70:	40020010 	.word	0x40020010
 8006f74:	40020028 	.word	0x40020028
 8006f78:	40020040 	.word	0x40020040
 8006f7c:	40020058 	.word	0x40020058
 8006f80:	40020070 	.word	0x40020070
 8006f84:	40020088 	.word	0x40020088
 8006f88:	400200a0 	.word	0x400200a0
 8006f8c:	400200b8 	.word	0x400200b8
 8006f90:	40020410 	.word	0x40020410
 8006f94:	40020428 	.word	0x40020428
 8006f98:	40020440 	.word	0x40020440
 8006f9c:	40020458 	.word	0x40020458
 8006fa0:	40020470 	.word	0x40020470
 8006fa4:	40020488 	.word	0x40020488
 8006fa8:	400204a0 	.word	0x400204a0
 8006fac:	400204b8 	.word	0x400204b8
 8006fb0:	58025408 	.word	0x58025408
 8006fb4:	5802541c 	.word	0x5802541c
 8006fb8:	58025430 	.word	0x58025430
 8006fbc:	58025444 	.word	0x58025444
 8006fc0:	58025458 	.word	0x58025458
 8006fc4:	5802546c 	.word	0x5802546c
 8006fc8:	58025480 	.word	0x58025480
 8006fcc:	58025494 	.word	0x58025494
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d028      	beq.n	8007028 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fe4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff0:	f003 031f 	and.w	r3, r3, #31
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	409a      	lsls	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007004:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800701c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007026:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop

08007054 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007060:	4b67      	ldr	r3, [pc, #412]	; (8007200 <HAL_DMA_IRQHandler+0x1ac>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a67      	ldr	r2, [pc, #412]	; (8007204 <HAL_DMA_IRQHandler+0x1b0>)
 8007066:	fba2 2303 	umull	r2, r3, r2, r3
 800706a:	0a9b      	lsrs	r3, r3, #10
 800706c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007072:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007078:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a5f      	ldr	r2, [pc, #380]	; (8007208 <HAL_DMA_IRQHandler+0x1b4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d04a      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a5d      	ldr	r2, [pc, #372]	; (800720c <HAL_DMA_IRQHandler+0x1b8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d045      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a5c      	ldr	r2, [pc, #368]	; (8007210 <HAL_DMA_IRQHandler+0x1bc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d040      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a5a      	ldr	r2, [pc, #360]	; (8007214 <HAL_DMA_IRQHandler+0x1c0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d03b      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a59      	ldr	r2, [pc, #356]	; (8007218 <HAL_DMA_IRQHandler+0x1c4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d036      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a57      	ldr	r2, [pc, #348]	; (800721c <HAL_DMA_IRQHandler+0x1c8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d031      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a56      	ldr	r2, [pc, #344]	; (8007220 <HAL_DMA_IRQHandler+0x1cc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d02c      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a54      	ldr	r2, [pc, #336]	; (8007224 <HAL_DMA_IRQHandler+0x1d0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d027      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a53      	ldr	r2, [pc, #332]	; (8007228 <HAL_DMA_IRQHandler+0x1d4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d022      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a51      	ldr	r2, [pc, #324]	; (800722c <HAL_DMA_IRQHandler+0x1d8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01d      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a50      	ldr	r2, [pc, #320]	; (8007230 <HAL_DMA_IRQHandler+0x1dc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d018      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a4e      	ldr	r2, [pc, #312]	; (8007234 <HAL_DMA_IRQHandler+0x1e0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d013      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a4d      	ldr	r2, [pc, #308]	; (8007238 <HAL_DMA_IRQHandler+0x1e4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00e      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a4b      	ldr	r2, [pc, #300]	; (800723c <HAL_DMA_IRQHandler+0x1e8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d009      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a4a      	ldr	r2, [pc, #296]	; (8007240 <HAL_DMA_IRQHandler+0x1ec>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d004      	beq.n	8007126 <HAL_DMA_IRQHandler+0xd2>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a48      	ldr	r2, [pc, #288]	; (8007244 <HAL_DMA_IRQHandler+0x1f0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d101      	bne.n	800712a <HAL_DMA_IRQHandler+0xd6>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <HAL_DMA_IRQHandler+0xd8>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 842b 	beq.w	8007988 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	2208      	movs	r2, #8
 800713c:	409a      	lsls	r2, r3
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 80a2 	beq.w	800728c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2e      	ldr	r2, [pc, #184]	; (8007208 <HAL_DMA_IRQHandler+0x1b4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d04a      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2d      	ldr	r2, [pc, #180]	; (800720c <HAL_DMA_IRQHandler+0x1b8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d045      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2b      	ldr	r2, [pc, #172]	; (8007210 <HAL_DMA_IRQHandler+0x1bc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d040      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <HAL_DMA_IRQHandler+0x1c0>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d03b      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a28      	ldr	r2, [pc, #160]	; (8007218 <HAL_DMA_IRQHandler+0x1c4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d036      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a27      	ldr	r2, [pc, #156]	; (800721c <HAL_DMA_IRQHandler+0x1c8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d031      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a25      	ldr	r2, [pc, #148]	; (8007220 <HAL_DMA_IRQHandler+0x1cc>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d02c      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a24      	ldr	r2, [pc, #144]	; (8007224 <HAL_DMA_IRQHandler+0x1d0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d027      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a22      	ldr	r2, [pc, #136]	; (8007228 <HAL_DMA_IRQHandler+0x1d4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d022      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a21      	ldr	r2, [pc, #132]	; (800722c <HAL_DMA_IRQHandler+0x1d8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d01d      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1f      	ldr	r2, [pc, #124]	; (8007230 <HAL_DMA_IRQHandler+0x1dc>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d018      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <HAL_DMA_IRQHandler+0x1e0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d013      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <HAL_DMA_IRQHandler+0x1e4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00e      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1b      	ldr	r2, [pc, #108]	; (800723c <HAL_DMA_IRQHandler+0x1e8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d009      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a19      	ldr	r2, [pc, #100]	; (8007240 <HAL_DMA_IRQHandler+0x1ec>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x194>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a18      	ldr	r2, [pc, #96]	; (8007244 <HAL_DMA_IRQHandler+0x1f0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d12f      	bne.n	8007248 <HAL_DMA_IRQHandler+0x1f4>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bf14      	ite	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	2300      	moveq	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	e02e      	b.n	800725c <HAL_DMA_IRQHandler+0x208>
 80071fe:	bf00      	nop
 8007200:	2400008c 	.word	0x2400008c
 8007204:	1b4e81b5 	.word	0x1b4e81b5
 8007208:	40020010 	.word	0x40020010
 800720c:	40020028 	.word	0x40020028
 8007210:	40020040 	.word	0x40020040
 8007214:	40020058 	.word	0x40020058
 8007218:	40020070 	.word	0x40020070
 800721c:	40020088 	.word	0x40020088
 8007220:	400200a0 	.word	0x400200a0
 8007224:	400200b8 	.word	0x400200b8
 8007228:	40020410 	.word	0x40020410
 800722c:	40020428 	.word	0x40020428
 8007230:	40020440 	.word	0x40020440
 8007234:	40020458 	.word	0x40020458
 8007238:	40020470 	.word	0x40020470
 800723c:	40020488 	.word	0x40020488
 8007240:	400204a0 	.word	0x400204a0
 8007244:	400204b8 	.word	0x400204b8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	bf14      	ite	ne
 8007256:	2301      	movne	r3, #1
 8007258:	2300      	moveq	r3, #0
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d015      	beq.n	800728c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0204 	bic.w	r2, r2, #4
 800726e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	2208      	movs	r2, #8
 800727a:	409a      	lsls	r2, r3
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007284:	f043 0201 	orr.w	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	fa22 f303 	lsr.w	r3, r2, r3
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d06e      	beq.n	8007380 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a69      	ldr	r2, [pc, #420]	; (800744c <HAL_DMA_IRQHandler+0x3f8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d04a      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a67      	ldr	r2, [pc, #412]	; (8007450 <HAL_DMA_IRQHandler+0x3fc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d045      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a66      	ldr	r2, [pc, #408]	; (8007454 <HAL_DMA_IRQHandler+0x400>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d040      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a64      	ldr	r2, [pc, #400]	; (8007458 <HAL_DMA_IRQHandler+0x404>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d03b      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a63      	ldr	r2, [pc, #396]	; (800745c <HAL_DMA_IRQHandler+0x408>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d036      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a61      	ldr	r2, [pc, #388]	; (8007460 <HAL_DMA_IRQHandler+0x40c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d031      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a60      	ldr	r2, [pc, #384]	; (8007464 <HAL_DMA_IRQHandler+0x410>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d02c      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a5e      	ldr	r2, [pc, #376]	; (8007468 <HAL_DMA_IRQHandler+0x414>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d027      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a5d      	ldr	r2, [pc, #372]	; (800746c <HAL_DMA_IRQHandler+0x418>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d022      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a5b      	ldr	r2, [pc, #364]	; (8007470 <HAL_DMA_IRQHandler+0x41c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01d      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a5a      	ldr	r2, [pc, #360]	; (8007474 <HAL_DMA_IRQHandler+0x420>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a58      	ldr	r2, [pc, #352]	; (8007478 <HAL_DMA_IRQHandler+0x424>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d013      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a57      	ldr	r2, [pc, #348]	; (800747c <HAL_DMA_IRQHandler+0x428>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a55      	ldr	r2, [pc, #340]	; (8007480 <HAL_DMA_IRQHandler+0x42c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a54      	ldr	r2, [pc, #336]	; (8007484 <HAL_DMA_IRQHandler+0x430>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_DMA_IRQHandler+0x2ee>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a52      	ldr	r2, [pc, #328]	; (8007488 <HAL_DMA_IRQHandler+0x434>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d10a      	bne.n	8007358 <HAL_DMA_IRQHandler+0x304>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734c:	2b00      	cmp	r3, #0
 800734e:	bf14      	ite	ne
 8007350:	2301      	movne	r3, #1
 8007352:	2300      	moveq	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	e003      	b.n	8007360 <HAL_DMA_IRQHandler+0x30c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2300      	movs	r3, #0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00d      	beq.n	8007380 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	2201      	movs	r2, #1
 800736e:	409a      	lsls	r2, r3
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007378:	f043 0202 	orr.w	r2, r3, #2
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2204      	movs	r2, #4
 800738a:	409a      	lsls	r2, r3
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 808f 	beq.w	80074b4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2c      	ldr	r2, [pc, #176]	; (800744c <HAL_DMA_IRQHandler+0x3f8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d04a      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2a      	ldr	r2, [pc, #168]	; (8007450 <HAL_DMA_IRQHandler+0x3fc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d045      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a29      	ldr	r2, [pc, #164]	; (8007454 <HAL_DMA_IRQHandler+0x400>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d040      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a27      	ldr	r2, [pc, #156]	; (8007458 <HAL_DMA_IRQHandler+0x404>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d03b      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a26      	ldr	r2, [pc, #152]	; (800745c <HAL_DMA_IRQHandler+0x408>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d036      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a24      	ldr	r2, [pc, #144]	; (8007460 <HAL_DMA_IRQHandler+0x40c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d031      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a23      	ldr	r2, [pc, #140]	; (8007464 <HAL_DMA_IRQHandler+0x410>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d02c      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a21      	ldr	r2, [pc, #132]	; (8007468 <HAL_DMA_IRQHandler+0x414>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d027      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a20      	ldr	r2, [pc, #128]	; (800746c <HAL_DMA_IRQHandler+0x418>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d022      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1e      	ldr	r2, [pc, #120]	; (8007470 <HAL_DMA_IRQHandler+0x41c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d01d      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <HAL_DMA_IRQHandler+0x420>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d018      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1b      	ldr	r2, [pc, #108]	; (8007478 <HAL_DMA_IRQHandler+0x424>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d013      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1a      	ldr	r2, [pc, #104]	; (800747c <HAL_DMA_IRQHandler+0x428>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00e      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a18      	ldr	r2, [pc, #96]	; (8007480 <HAL_DMA_IRQHandler+0x42c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d009      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a17      	ldr	r2, [pc, #92]	; (8007484 <HAL_DMA_IRQHandler+0x430>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d004      	beq.n	8007436 <HAL_DMA_IRQHandler+0x3e2>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a15      	ldr	r2, [pc, #84]	; (8007488 <HAL_DMA_IRQHandler+0x434>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d12a      	bne.n	800748c <HAL_DMA_IRQHandler+0x438>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	bf14      	ite	ne
 8007444:	2301      	movne	r3, #1
 8007446:	2300      	moveq	r3, #0
 8007448:	b2db      	uxtb	r3, r3
 800744a:	e023      	b.n	8007494 <HAL_DMA_IRQHandler+0x440>
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2300      	movs	r3, #0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00d      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749c:	f003 031f 	and.w	r3, r3, #31
 80074a0:	2204      	movs	r2, #4
 80074a2:	409a      	lsls	r2, r3
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ac:	f043 0204 	orr.w	r2, r3, #4
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2210      	movs	r2, #16
 80074be:	409a      	lsls	r2, r3
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	4013      	ands	r3, r2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80a6 	beq.w	8007616 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a85      	ldr	r2, [pc, #532]	; (80076e4 <HAL_DMA_IRQHandler+0x690>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d04a      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a83      	ldr	r2, [pc, #524]	; (80076e8 <HAL_DMA_IRQHandler+0x694>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d045      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a82      	ldr	r2, [pc, #520]	; (80076ec <HAL_DMA_IRQHandler+0x698>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d040      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a80      	ldr	r2, [pc, #512]	; (80076f0 <HAL_DMA_IRQHandler+0x69c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d03b      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a7f      	ldr	r2, [pc, #508]	; (80076f4 <HAL_DMA_IRQHandler+0x6a0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d036      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a7d      	ldr	r2, [pc, #500]	; (80076f8 <HAL_DMA_IRQHandler+0x6a4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d031      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a7c      	ldr	r2, [pc, #496]	; (80076fc <HAL_DMA_IRQHandler+0x6a8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d02c      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a7a      	ldr	r2, [pc, #488]	; (8007700 <HAL_DMA_IRQHandler+0x6ac>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d027      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a79      	ldr	r2, [pc, #484]	; (8007704 <HAL_DMA_IRQHandler+0x6b0>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d022      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a77      	ldr	r2, [pc, #476]	; (8007708 <HAL_DMA_IRQHandler+0x6b4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d01d      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a76      	ldr	r2, [pc, #472]	; (800770c <HAL_DMA_IRQHandler+0x6b8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d018      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a74      	ldr	r2, [pc, #464]	; (8007710 <HAL_DMA_IRQHandler+0x6bc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a73      	ldr	r2, [pc, #460]	; (8007714 <HAL_DMA_IRQHandler+0x6c0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00e      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a71      	ldr	r2, [pc, #452]	; (8007718 <HAL_DMA_IRQHandler+0x6c4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d009      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a70      	ldr	r2, [pc, #448]	; (800771c <HAL_DMA_IRQHandler+0x6c8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d004      	beq.n	800756a <HAL_DMA_IRQHandler+0x516>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a6e      	ldr	r2, [pc, #440]	; (8007720 <HAL_DMA_IRQHandler+0x6cc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d10a      	bne.n	8007580 <HAL_DMA_IRQHandler+0x52c>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b00      	cmp	r3, #0
 8007576:	bf14      	ite	ne
 8007578:	2301      	movne	r3, #1
 800757a:	2300      	moveq	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e009      	b.n	8007594 <HAL_DMA_IRQHandler+0x540>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	bf14      	ite	ne
 800758e:	2301      	movne	r3, #1
 8007590:	2300      	moveq	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d03e      	beq.n	8007616 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	2210      	movs	r2, #16
 80075a2:	409a      	lsls	r2, r3
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d018      	beq.n	80075e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d108      	bne.n	80075d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d024      	beq.n	8007616 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
 80075d4:	e01f      	b.n	8007616 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d01b      	beq.n	8007616 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	4798      	blx	r3
 80075e6:	e016      	b.n	8007616 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d107      	bne.n	8007606 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0208 	bic.w	r2, r2, #8
 8007604:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761a:	f003 031f 	and.w	r3, r3, #31
 800761e:	2220      	movs	r2, #32
 8007620:	409a      	lsls	r2, r3
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	4013      	ands	r3, r2
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 8110 	beq.w	800784c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a2c      	ldr	r2, [pc, #176]	; (80076e4 <HAL_DMA_IRQHandler+0x690>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d04a      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a2b      	ldr	r2, [pc, #172]	; (80076e8 <HAL_DMA_IRQHandler+0x694>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d045      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a29      	ldr	r2, [pc, #164]	; (80076ec <HAL_DMA_IRQHandler+0x698>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d040      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a28      	ldr	r2, [pc, #160]	; (80076f0 <HAL_DMA_IRQHandler+0x69c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d03b      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a26      	ldr	r2, [pc, #152]	; (80076f4 <HAL_DMA_IRQHandler+0x6a0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d036      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a25      	ldr	r2, [pc, #148]	; (80076f8 <HAL_DMA_IRQHandler+0x6a4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d031      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a23      	ldr	r2, [pc, #140]	; (80076fc <HAL_DMA_IRQHandler+0x6a8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d02c      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a22      	ldr	r2, [pc, #136]	; (8007700 <HAL_DMA_IRQHandler+0x6ac>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d027      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a20      	ldr	r2, [pc, #128]	; (8007704 <HAL_DMA_IRQHandler+0x6b0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d022      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a1f      	ldr	r2, [pc, #124]	; (8007708 <HAL_DMA_IRQHandler+0x6b4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d01d      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1d      	ldr	r2, [pc, #116]	; (800770c <HAL_DMA_IRQHandler+0x6b8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d018      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1c      	ldr	r2, [pc, #112]	; (8007710 <HAL_DMA_IRQHandler+0x6bc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d013      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <HAL_DMA_IRQHandler+0x6c0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00e      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a19      	ldr	r2, [pc, #100]	; (8007718 <HAL_DMA_IRQHandler+0x6c4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d009      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a17      	ldr	r2, [pc, #92]	; (800771c <HAL_DMA_IRQHandler+0x6c8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_DMA_IRQHandler+0x678>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a16      	ldr	r2, [pc, #88]	; (8007720 <HAL_DMA_IRQHandler+0x6cc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d12b      	bne.n	8007724 <HAL_DMA_IRQHandler+0x6d0>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bf14      	ite	ne
 80076da:	2301      	movne	r3, #1
 80076dc:	2300      	moveq	r3, #0
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	e02a      	b.n	8007738 <HAL_DMA_IRQHandler+0x6e4>
 80076e2:	bf00      	nop
 80076e4:	40020010 	.word	0x40020010
 80076e8:	40020028 	.word	0x40020028
 80076ec:	40020040 	.word	0x40020040
 80076f0:	40020058 	.word	0x40020058
 80076f4:	40020070 	.word	0x40020070
 80076f8:	40020088 	.word	0x40020088
 80076fc:	400200a0 	.word	0x400200a0
 8007700:	400200b8 	.word	0x400200b8
 8007704:	40020410 	.word	0x40020410
 8007708:	40020428 	.word	0x40020428
 800770c:	40020440 	.word	0x40020440
 8007710:	40020458 	.word	0x40020458
 8007714:	40020470 	.word	0x40020470
 8007718:	40020488 	.word	0x40020488
 800771c:	400204a0 	.word	0x400204a0
 8007720:	400204b8 	.word	0x400204b8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	bf14      	ite	ne
 8007732:	2301      	movne	r3, #1
 8007734:	2300      	moveq	r3, #0
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8087 	beq.w	800784c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	2220      	movs	r2, #32
 8007748:	409a      	lsls	r2, r3
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b04      	cmp	r3, #4
 8007758:	d139      	bne.n	80077ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0216 	bic.w	r2, r2, #22
 8007768:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695a      	ldr	r2, [r3, #20]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007778:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <HAL_DMA_IRQHandler+0x736>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007786:	2b00      	cmp	r3, #0
 8007788:	d007      	beq.n	800779a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0208 	bic.w	r2, r2, #8
 8007798:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779e:	f003 031f 	and.w	r3, r3, #31
 80077a2:	223f      	movs	r2, #63	; 0x3f
 80077a4:	409a      	lsls	r2, r3
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 834a 	beq.w	8007e58 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
          }
          return;
 80077cc:	e344      	b.n	8007e58 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d018      	beq.n	800780e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d108      	bne.n	80077fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d02c      	beq.n	800784c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
 80077fa:	e027      	b.n	800784c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d023      	beq.n	800784c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
 800780c:	e01e      	b.n	800784c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10f      	bne.n	800783c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0210 	bic.w	r2, r2, #16
 800782a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 8306 	beq.w	8007e62 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8088 	beq.w	8007974 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2204      	movs	r2, #4
 8007868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a7a      	ldr	r2, [pc, #488]	; (8007a5c <HAL_DMA_IRQHandler+0xa08>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d04a      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a79      	ldr	r2, [pc, #484]	; (8007a60 <HAL_DMA_IRQHandler+0xa0c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d045      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a77      	ldr	r2, [pc, #476]	; (8007a64 <HAL_DMA_IRQHandler+0xa10>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d040      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a76      	ldr	r2, [pc, #472]	; (8007a68 <HAL_DMA_IRQHandler+0xa14>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d03b      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a74      	ldr	r2, [pc, #464]	; (8007a6c <HAL_DMA_IRQHandler+0xa18>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d036      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a73      	ldr	r2, [pc, #460]	; (8007a70 <HAL_DMA_IRQHandler+0xa1c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d031      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a71      	ldr	r2, [pc, #452]	; (8007a74 <HAL_DMA_IRQHandler+0xa20>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d02c      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a70      	ldr	r2, [pc, #448]	; (8007a78 <HAL_DMA_IRQHandler+0xa24>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d027      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a6e      	ldr	r2, [pc, #440]	; (8007a7c <HAL_DMA_IRQHandler+0xa28>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d022      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a6d      	ldr	r2, [pc, #436]	; (8007a80 <HAL_DMA_IRQHandler+0xa2c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d01d      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a6b      	ldr	r2, [pc, #428]	; (8007a84 <HAL_DMA_IRQHandler+0xa30>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d018      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a6a      	ldr	r2, [pc, #424]	; (8007a88 <HAL_DMA_IRQHandler+0xa34>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d013      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a68      	ldr	r2, [pc, #416]	; (8007a8c <HAL_DMA_IRQHandler+0xa38>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00e      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a67      	ldr	r2, [pc, #412]	; (8007a90 <HAL_DMA_IRQHandler+0xa3c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d009      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a65      	ldr	r2, [pc, #404]	; (8007a94 <HAL_DMA_IRQHandler+0xa40>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d004      	beq.n	800790c <HAL_DMA_IRQHandler+0x8b8>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a64      	ldr	r2, [pc, #400]	; (8007a98 <HAL_DMA_IRQHandler+0xa44>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d108      	bne.n	800791e <HAL_DMA_IRQHandler+0x8ca>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0201 	bic.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	e007      	b.n	800792e <HAL_DMA_IRQHandler+0x8da>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0201 	bic.w	r2, r2, #1
 800792c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3301      	adds	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007936:	429a      	cmp	r2, r3
 8007938:	d307      	bcc.n	800794a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f2      	bne.n	800792e <HAL_DMA_IRQHandler+0x8da>
 8007948:	e000      	b.n	800794c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800794a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2203      	movs	r2, #3
 800795e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007962:	e003      	b.n	800796c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8272 	beq.w	8007e62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
 8007986:	e26c      	b.n	8007e62 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a43      	ldr	r2, [pc, #268]	; (8007a9c <HAL_DMA_IRQHandler+0xa48>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d022      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x984>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a42      	ldr	r2, [pc, #264]	; (8007aa0 <HAL_DMA_IRQHandler+0xa4c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d01d      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x984>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a40      	ldr	r2, [pc, #256]	; (8007aa4 <HAL_DMA_IRQHandler+0xa50>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d018      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x984>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a3f      	ldr	r2, [pc, #252]	; (8007aa8 <HAL_DMA_IRQHandler+0xa54>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d013      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x984>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a3d      	ldr	r2, [pc, #244]	; (8007aac <HAL_DMA_IRQHandler+0xa58>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00e      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x984>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a3c      	ldr	r2, [pc, #240]	; (8007ab0 <HAL_DMA_IRQHandler+0xa5c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d009      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x984>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a3a      	ldr	r2, [pc, #232]	; (8007ab4 <HAL_DMA_IRQHandler+0xa60>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d004      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x984>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a39      	ldr	r2, [pc, #228]	; (8007ab8 <HAL_DMA_IRQHandler+0xa64>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d101      	bne.n	80079dc <HAL_DMA_IRQHandler+0x988>
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <HAL_DMA_IRQHandler+0x98a>
 80079dc:	2300      	movs	r3, #0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 823f 	beq.w	8007e62 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2204      	movs	r2, #4
 80079f6:	409a      	lsls	r2, r3
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	4013      	ands	r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 80cd 	beq.w	8007b9c <HAL_DMA_IRQHandler+0xb48>
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 80c7 	beq.w	8007b9c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a12:	f003 031f 	and.w	r3, r3, #31
 8007a16:	2204      	movs	r2, #4
 8007a18:	409a      	lsls	r2, r3
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d049      	beq.n	8007abc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d109      	bne.n	8007a46 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 8210 	beq.w	8007e5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a44:	e20a      	b.n	8007e5c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8206 	beq.w	8007e5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a58:	e200      	b.n	8007e5c <HAL_DMA_IRQHandler+0xe08>
 8007a5a:	bf00      	nop
 8007a5c:	40020010 	.word	0x40020010
 8007a60:	40020028 	.word	0x40020028
 8007a64:	40020040 	.word	0x40020040
 8007a68:	40020058 	.word	0x40020058
 8007a6c:	40020070 	.word	0x40020070
 8007a70:	40020088 	.word	0x40020088
 8007a74:	400200a0 	.word	0x400200a0
 8007a78:	400200b8 	.word	0x400200b8
 8007a7c:	40020410 	.word	0x40020410
 8007a80:	40020428 	.word	0x40020428
 8007a84:	40020440 	.word	0x40020440
 8007a88:	40020458 	.word	0x40020458
 8007a8c:	40020470 	.word	0x40020470
 8007a90:	40020488 	.word	0x40020488
 8007a94:	400204a0 	.word	0x400204a0
 8007a98:	400204b8 	.word	0x400204b8
 8007a9c:	58025408 	.word	0x58025408
 8007aa0:	5802541c 	.word	0x5802541c
 8007aa4:	58025430 	.word	0x58025430
 8007aa8:	58025444 	.word	0x58025444
 8007aac:	58025458 	.word	0x58025458
 8007ab0:	5802546c 	.word	0x5802546c
 8007ab4:	58025480 	.word	0x58025480
 8007ab8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d160      	bne.n	8007b88 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a7f      	ldr	r2, [pc, #508]	; (8007cc8 <HAL_DMA_IRQHandler+0xc74>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d04a      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a7d      	ldr	r2, [pc, #500]	; (8007ccc <HAL_DMA_IRQHandler+0xc78>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d045      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a7c      	ldr	r2, [pc, #496]	; (8007cd0 <HAL_DMA_IRQHandler+0xc7c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d040      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a7a      	ldr	r2, [pc, #488]	; (8007cd4 <HAL_DMA_IRQHandler+0xc80>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d03b      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a79      	ldr	r2, [pc, #484]	; (8007cd8 <HAL_DMA_IRQHandler+0xc84>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d036      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a77      	ldr	r2, [pc, #476]	; (8007cdc <HAL_DMA_IRQHandler+0xc88>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d031      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a76      	ldr	r2, [pc, #472]	; (8007ce0 <HAL_DMA_IRQHandler+0xc8c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d02c      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a74      	ldr	r2, [pc, #464]	; (8007ce4 <HAL_DMA_IRQHandler+0xc90>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d027      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a73      	ldr	r2, [pc, #460]	; (8007ce8 <HAL_DMA_IRQHandler+0xc94>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d022      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a71      	ldr	r2, [pc, #452]	; (8007cec <HAL_DMA_IRQHandler+0xc98>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d01d      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a70      	ldr	r2, [pc, #448]	; (8007cf0 <HAL_DMA_IRQHandler+0xc9c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d018      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a6e      	ldr	r2, [pc, #440]	; (8007cf4 <HAL_DMA_IRQHandler+0xca0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d013      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a6d      	ldr	r2, [pc, #436]	; (8007cf8 <HAL_DMA_IRQHandler+0xca4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00e      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a6b      	ldr	r2, [pc, #428]	; (8007cfc <HAL_DMA_IRQHandler+0xca8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d009      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a6a      	ldr	r2, [pc, #424]	; (8007d00 <HAL_DMA_IRQHandler+0xcac>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d004      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xb12>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a68      	ldr	r2, [pc, #416]	; (8007d04 <HAL_DMA_IRQHandler+0xcb0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d108      	bne.n	8007b78 <HAL_DMA_IRQHandler+0xb24>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0208 	bic.w	r2, r2, #8
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e007      	b.n	8007b88 <HAL_DMA_IRQHandler+0xb34>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0204 	bic.w	r2, r2, #4
 8007b86:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8165 	beq.w	8007e5c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b9a:	e15f      	b.n	8007e5c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	409a      	lsls	r2, r3
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	4013      	ands	r3, r2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 80c5 	beq.w	8007d3c <HAL_DMA_IRQHandler+0xce8>
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 80bf 	beq.w	8007d3c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	409a      	lsls	r2, r3
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d018      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 813a 	beq.w	8007e60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bf4:	e134      	b.n	8007e60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8130 	beq.w	8007e60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c08:	e12a      	b.n	8007e60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f040 8089 	bne.w	8007d28 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a2b      	ldr	r2, [pc, #172]	; (8007cc8 <HAL_DMA_IRQHandler+0xc74>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d04a      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a29      	ldr	r2, [pc, #164]	; (8007ccc <HAL_DMA_IRQHandler+0xc78>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d045      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a28      	ldr	r2, [pc, #160]	; (8007cd0 <HAL_DMA_IRQHandler+0xc7c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d040      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <HAL_DMA_IRQHandler+0xc80>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d03b      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a25      	ldr	r2, [pc, #148]	; (8007cd8 <HAL_DMA_IRQHandler+0xc84>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d036      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a23      	ldr	r2, [pc, #140]	; (8007cdc <HAL_DMA_IRQHandler+0xc88>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d031      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a22      	ldr	r2, [pc, #136]	; (8007ce0 <HAL_DMA_IRQHandler+0xc8c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d02c      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a20      	ldr	r2, [pc, #128]	; (8007ce4 <HAL_DMA_IRQHandler+0xc90>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d027      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1f      	ldr	r2, [pc, #124]	; (8007ce8 <HAL_DMA_IRQHandler+0xc94>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d022      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1d      	ldr	r2, [pc, #116]	; (8007cec <HAL_DMA_IRQHandler+0xc98>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d01d      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1c      	ldr	r2, [pc, #112]	; (8007cf0 <HAL_DMA_IRQHandler+0xc9c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d018      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1a      	ldr	r2, [pc, #104]	; (8007cf4 <HAL_DMA_IRQHandler+0xca0>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d013      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a19      	ldr	r2, [pc, #100]	; (8007cf8 <HAL_DMA_IRQHandler+0xca4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00e      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <HAL_DMA_IRQHandler+0xca8>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d009      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <HAL_DMA_IRQHandler+0xcac>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xc62>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a14      	ldr	r2, [pc, #80]	; (8007d04 <HAL_DMA_IRQHandler+0xcb0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d128      	bne.n	8007d08 <HAL_DMA_IRQHandler+0xcb4>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0214 	bic.w	r2, r2, #20
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	e027      	b.n	8007d18 <HAL_DMA_IRQHandler+0xcc4>
 8007cc8:	40020010 	.word	0x40020010
 8007ccc:	40020028 	.word	0x40020028
 8007cd0:	40020040 	.word	0x40020040
 8007cd4:	40020058 	.word	0x40020058
 8007cd8:	40020070 	.word	0x40020070
 8007cdc:	40020088 	.word	0x40020088
 8007ce0:	400200a0 	.word	0x400200a0
 8007ce4:	400200b8 	.word	0x400200b8
 8007ce8:	40020410 	.word	0x40020410
 8007cec:	40020428 	.word	0x40020428
 8007cf0:	40020440 	.word	0x40020440
 8007cf4:	40020458 	.word	0x40020458
 8007cf8:	40020470 	.word	0x40020470
 8007cfc:	40020488 	.word	0x40020488
 8007d00:	400204a0 	.word	0x400204a0
 8007d04:	400204b8 	.word	0x400204b8
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 020a 	bic.w	r2, r2, #10
 8007d16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8097 	beq.w	8007e60 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d3a:	e091      	b.n	8007e60 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	2208      	movs	r2, #8
 8007d46:	409a      	lsls	r2, r3
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8088 	beq.w	8007e62 <HAL_DMA_IRQHandler+0xe0e>
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 8082 	beq.w	8007e62 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a41      	ldr	r2, [pc, #260]	; (8007e68 <HAL_DMA_IRQHandler+0xe14>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d04a      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a3f      	ldr	r2, [pc, #252]	; (8007e6c <HAL_DMA_IRQHandler+0xe18>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d045      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a3e      	ldr	r2, [pc, #248]	; (8007e70 <HAL_DMA_IRQHandler+0xe1c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d040      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a3c      	ldr	r2, [pc, #240]	; (8007e74 <HAL_DMA_IRQHandler+0xe20>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d03b      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a3b      	ldr	r2, [pc, #236]	; (8007e78 <HAL_DMA_IRQHandler+0xe24>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d036      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a39      	ldr	r2, [pc, #228]	; (8007e7c <HAL_DMA_IRQHandler+0xe28>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d031      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a38      	ldr	r2, [pc, #224]	; (8007e80 <HAL_DMA_IRQHandler+0xe2c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d02c      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a36      	ldr	r2, [pc, #216]	; (8007e84 <HAL_DMA_IRQHandler+0xe30>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d027      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a35      	ldr	r2, [pc, #212]	; (8007e88 <HAL_DMA_IRQHandler+0xe34>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d022      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a33      	ldr	r2, [pc, #204]	; (8007e8c <HAL_DMA_IRQHandler+0xe38>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d01d      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a32      	ldr	r2, [pc, #200]	; (8007e90 <HAL_DMA_IRQHandler+0xe3c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d018      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a30      	ldr	r2, [pc, #192]	; (8007e94 <HAL_DMA_IRQHandler+0xe40>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d013      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a2f      	ldr	r2, [pc, #188]	; (8007e98 <HAL_DMA_IRQHandler+0xe44>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d00e      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a2d      	ldr	r2, [pc, #180]	; (8007e9c <HAL_DMA_IRQHandler+0xe48>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d009      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a2c      	ldr	r2, [pc, #176]	; (8007ea0 <HAL_DMA_IRQHandler+0xe4c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d004      	beq.n	8007dfe <HAL_DMA_IRQHandler+0xdaa>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a2a      	ldr	r2, [pc, #168]	; (8007ea4 <HAL_DMA_IRQHandler+0xe50>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d108      	bne.n	8007e10 <HAL_DMA_IRQHandler+0xdbc>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 021c 	bic.w	r2, r2, #28
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	e007      	b.n	8007e20 <HAL_DMA_IRQHandler+0xdcc>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 020e 	bic.w	r2, r2, #14
 8007e1e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	2201      	movs	r2, #1
 8007e2a:	409a      	lsls	r2, r3
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
 8007e56:	e004      	b.n	8007e62 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e58:	bf00      	nop
 8007e5a:	e002      	b.n	8007e62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e5c:	bf00      	nop
 8007e5e:	e000      	b.n	8007e62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e60:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e62:	3728      	adds	r7, #40	; 0x28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	40020010 	.word	0x40020010
 8007e6c:	40020028 	.word	0x40020028
 8007e70:	40020040 	.word	0x40020040
 8007e74:	40020058 	.word	0x40020058
 8007e78:	40020070 	.word	0x40020070
 8007e7c:	40020088 	.word	0x40020088
 8007e80:	400200a0 	.word	0x400200a0
 8007e84:	400200b8 	.word	0x400200b8
 8007e88:	40020410 	.word	0x40020410
 8007e8c:	40020428 	.word	0x40020428
 8007e90:	40020440 	.word	0x40020440
 8007e94:	40020458 	.word	0x40020458
 8007e98:	40020470 	.word	0x40020470
 8007e9c:	40020488 	.word	0x40020488
 8007ea0:	400204a0 	.word	0x400204a0
 8007ea4:	400204b8 	.word	0x400204b8

08007ea8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a7f      	ldr	r2, [pc, #508]	; (80080c4 <DMA_SetConfig+0x21c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d072      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a7d      	ldr	r2, [pc, #500]	; (80080c8 <DMA_SetConfig+0x220>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d06d      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a7c      	ldr	r2, [pc, #496]	; (80080cc <DMA_SetConfig+0x224>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d068      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a7a      	ldr	r2, [pc, #488]	; (80080d0 <DMA_SetConfig+0x228>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d063      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a79      	ldr	r2, [pc, #484]	; (80080d4 <DMA_SetConfig+0x22c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d05e      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a77      	ldr	r2, [pc, #476]	; (80080d8 <DMA_SetConfig+0x230>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d059      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a76      	ldr	r2, [pc, #472]	; (80080dc <DMA_SetConfig+0x234>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d054      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a74      	ldr	r2, [pc, #464]	; (80080e0 <DMA_SetConfig+0x238>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d04f      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a73      	ldr	r2, [pc, #460]	; (80080e4 <DMA_SetConfig+0x23c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d04a      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a71      	ldr	r2, [pc, #452]	; (80080e8 <DMA_SetConfig+0x240>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d045      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a70      	ldr	r2, [pc, #448]	; (80080ec <DMA_SetConfig+0x244>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d040      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a6e      	ldr	r2, [pc, #440]	; (80080f0 <DMA_SetConfig+0x248>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d03b      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a6d      	ldr	r2, [pc, #436]	; (80080f4 <DMA_SetConfig+0x24c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d036      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a6b      	ldr	r2, [pc, #428]	; (80080f8 <DMA_SetConfig+0x250>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d031      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a6a      	ldr	r2, [pc, #424]	; (80080fc <DMA_SetConfig+0x254>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d02c      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a68      	ldr	r2, [pc, #416]	; (8008100 <DMA_SetConfig+0x258>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d027      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a67      	ldr	r2, [pc, #412]	; (8008104 <DMA_SetConfig+0x25c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d022      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a65      	ldr	r2, [pc, #404]	; (8008108 <DMA_SetConfig+0x260>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d01d      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a64      	ldr	r2, [pc, #400]	; (800810c <DMA_SetConfig+0x264>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d018      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a62      	ldr	r2, [pc, #392]	; (8008110 <DMA_SetConfig+0x268>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a61      	ldr	r2, [pc, #388]	; (8008114 <DMA_SetConfig+0x26c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00e      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a5f      	ldr	r2, [pc, #380]	; (8008118 <DMA_SetConfig+0x270>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d009      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a5e      	ldr	r2, [pc, #376]	; (800811c <DMA_SetConfig+0x274>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d004      	beq.n	8007fb2 <DMA_SetConfig+0x10a>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a5c      	ldr	r2, [pc, #368]	; (8008120 <DMA_SetConfig+0x278>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d101      	bne.n	8007fb6 <DMA_SetConfig+0x10e>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e000      	b.n	8007fb8 <DMA_SetConfig+0x110>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00d      	beq.n	8007fd8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007fc4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d004      	beq.n	8007fd8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007fd6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a39      	ldr	r2, [pc, #228]	; (80080c4 <DMA_SetConfig+0x21c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d04a      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a38      	ldr	r2, [pc, #224]	; (80080c8 <DMA_SetConfig+0x220>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d045      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a36      	ldr	r2, [pc, #216]	; (80080cc <DMA_SetConfig+0x224>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d040      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a35      	ldr	r2, [pc, #212]	; (80080d0 <DMA_SetConfig+0x228>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d03b      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a33      	ldr	r2, [pc, #204]	; (80080d4 <DMA_SetConfig+0x22c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d036      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a32      	ldr	r2, [pc, #200]	; (80080d8 <DMA_SetConfig+0x230>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d031      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a30      	ldr	r2, [pc, #192]	; (80080dc <DMA_SetConfig+0x234>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d02c      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a2f      	ldr	r2, [pc, #188]	; (80080e0 <DMA_SetConfig+0x238>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d027      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a2d      	ldr	r2, [pc, #180]	; (80080e4 <DMA_SetConfig+0x23c>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d022      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a2c      	ldr	r2, [pc, #176]	; (80080e8 <DMA_SetConfig+0x240>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d01d      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a2a      	ldr	r2, [pc, #168]	; (80080ec <DMA_SetConfig+0x244>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d018      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a29      	ldr	r2, [pc, #164]	; (80080f0 <DMA_SetConfig+0x248>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d013      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a27      	ldr	r2, [pc, #156]	; (80080f4 <DMA_SetConfig+0x24c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d00e      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a26      	ldr	r2, [pc, #152]	; (80080f8 <DMA_SetConfig+0x250>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d009      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a24      	ldr	r2, [pc, #144]	; (80080fc <DMA_SetConfig+0x254>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <DMA_SetConfig+0x1d0>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a23      	ldr	r2, [pc, #140]	; (8008100 <DMA_SetConfig+0x258>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d101      	bne.n	800807c <DMA_SetConfig+0x1d4>
 8008078:	2301      	movs	r3, #1
 800807a:	e000      	b.n	800807e <DMA_SetConfig+0x1d6>
 800807c:	2300      	movs	r3, #0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d059      	beq.n	8008136 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	223f      	movs	r2, #63	; 0x3f
 800808c:	409a      	lsls	r2, r3
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d138      	bne.n	8008124 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080c2:	e086      	b.n	80081d2 <DMA_SetConfig+0x32a>
 80080c4:	40020010 	.word	0x40020010
 80080c8:	40020028 	.word	0x40020028
 80080cc:	40020040 	.word	0x40020040
 80080d0:	40020058 	.word	0x40020058
 80080d4:	40020070 	.word	0x40020070
 80080d8:	40020088 	.word	0x40020088
 80080dc:	400200a0 	.word	0x400200a0
 80080e0:	400200b8 	.word	0x400200b8
 80080e4:	40020410 	.word	0x40020410
 80080e8:	40020428 	.word	0x40020428
 80080ec:	40020440 	.word	0x40020440
 80080f0:	40020458 	.word	0x40020458
 80080f4:	40020470 	.word	0x40020470
 80080f8:	40020488 	.word	0x40020488
 80080fc:	400204a0 	.word	0x400204a0
 8008100:	400204b8 	.word	0x400204b8
 8008104:	58025408 	.word	0x58025408
 8008108:	5802541c 	.word	0x5802541c
 800810c:	58025430 	.word	0x58025430
 8008110:	58025444 	.word	0x58025444
 8008114:	58025458 	.word	0x58025458
 8008118:	5802546c 	.word	0x5802546c
 800811c:	58025480 	.word	0x58025480
 8008120:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	60da      	str	r2, [r3, #12]
}
 8008134:	e04d      	b.n	80081d2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a29      	ldr	r2, [pc, #164]	; (80081e0 <DMA_SetConfig+0x338>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d022      	beq.n	8008186 <DMA_SetConfig+0x2de>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a27      	ldr	r2, [pc, #156]	; (80081e4 <DMA_SetConfig+0x33c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d01d      	beq.n	8008186 <DMA_SetConfig+0x2de>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a26      	ldr	r2, [pc, #152]	; (80081e8 <DMA_SetConfig+0x340>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d018      	beq.n	8008186 <DMA_SetConfig+0x2de>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a24      	ldr	r2, [pc, #144]	; (80081ec <DMA_SetConfig+0x344>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d013      	beq.n	8008186 <DMA_SetConfig+0x2de>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a23      	ldr	r2, [pc, #140]	; (80081f0 <DMA_SetConfig+0x348>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d00e      	beq.n	8008186 <DMA_SetConfig+0x2de>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a21      	ldr	r2, [pc, #132]	; (80081f4 <DMA_SetConfig+0x34c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d009      	beq.n	8008186 <DMA_SetConfig+0x2de>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <DMA_SetConfig+0x350>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d004      	beq.n	8008186 <DMA_SetConfig+0x2de>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1e      	ldr	r2, [pc, #120]	; (80081fc <DMA_SetConfig+0x354>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d101      	bne.n	800818a <DMA_SetConfig+0x2e2>
 8008186:	2301      	movs	r3, #1
 8008188:	e000      	b.n	800818c <DMA_SetConfig+0x2e4>
 800818a:	2300      	movs	r3, #0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d020      	beq.n	80081d2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	2201      	movs	r2, #1
 800819a:	409a      	lsls	r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d108      	bne.n	80081c2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	60da      	str	r2, [r3, #12]
}
 80081c0:	e007      	b.n	80081d2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	60da      	str	r2, [r3, #12]
}
 80081d2:	bf00      	nop
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	58025408 	.word	0x58025408
 80081e4:	5802541c 	.word	0x5802541c
 80081e8:	58025430 	.word	0x58025430
 80081ec:	58025444 	.word	0x58025444
 80081f0:	58025458 	.word	0x58025458
 80081f4:	5802546c 	.word	0x5802546c
 80081f8:	58025480 	.word	0x58025480
 80081fc:	58025494 	.word	0x58025494

08008200 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a42      	ldr	r2, [pc, #264]	; (8008318 <DMA_CalcBaseAndBitshift+0x118>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d04a      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a41      	ldr	r2, [pc, #260]	; (800831c <DMA_CalcBaseAndBitshift+0x11c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d045      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a3f      	ldr	r2, [pc, #252]	; (8008320 <DMA_CalcBaseAndBitshift+0x120>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d040      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3e      	ldr	r2, [pc, #248]	; (8008324 <DMA_CalcBaseAndBitshift+0x124>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d03b      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a3c      	ldr	r2, [pc, #240]	; (8008328 <DMA_CalcBaseAndBitshift+0x128>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d036      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a3b      	ldr	r2, [pc, #236]	; (800832c <DMA_CalcBaseAndBitshift+0x12c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d031      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a39      	ldr	r2, [pc, #228]	; (8008330 <DMA_CalcBaseAndBitshift+0x130>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d02c      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a38      	ldr	r2, [pc, #224]	; (8008334 <DMA_CalcBaseAndBitshift+0x134>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d027      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a36      	ldr	r2, [pc, #216]	; (8008338 <DMA_CalcBaseAndBitshift+0x138>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d022      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a35      	ldr	r2, [pc, #212]	; (800833c <DMA_CalcBaseAndBitshift+0x13c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d01d      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a33      	ldr	r2, [pc, #204]	; (8008340 <DMA_CalcBaseAndBitshift+0x140>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d018      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a32      	ldr	r2, [pc, #200]	; (8008344 <DMA_CalcBaseAndBitshift+0x144>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d013      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a30      	ldr	r2, [pc, #192]	; (8008348 <DMA_CalcBaseAndBitshift+0x148>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00e      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a2f      	ldr	r2, [pc, #188]	; (800834c <DMA_CalcBaseAndBitshift+0x14c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d009      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a2d      	ldr	r2, [pc, #180]	; (8008350 <DMA_CalcBaseAndBitshift+0x150>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d004      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xa8>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2c      	ldr	r2, [pc, #176]	; (8008354 <DMA_CalcBaseAndBitshift+0x154>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d101      	bne.n	80082ac <DMA_CalcBaseAndBitshift+0xac>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <DMA_CalcBaseAndBitshift+0xae>
 80082ac:	2300      	movs	r3, #0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d024      	beq.n	80082fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	3b10      	subs	r3, #16
 80082ba:	4a27      	ldr	r2, [pc, #156]	; (8008358 <DMA_CalcBaseAndBitshift+0x158>)
 80082bc:	fba2 2303 	umull	r2, r3, r2, r3
 80082c0:	091b      	lsrs	r3, r3, #4
 80082c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	4a24      	ldr	r2, [pc, #144]	; (800835c <DMA_CalcBaseAndBitshift+0x15c>)
 80082cc:	5cd3      	ldrb	r3, [r2, r3]
 80082ce:	461a      	mov	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d908      	bls.n	80082ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	4b1f      	ldr	r3, [pc, #124]	; (8008360 <DMA_CalcBaseAndBitshift+0x160>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	1d1a      	adds	r2, r3, #4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	659a      	str	r2, [r3, #88]	; 0x58
 80082ea:	e00d      	b.n	8008308 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	4b1b      	ldr	r3, [pc, #108]	; (8008360 <DMA_CalcBaseAndBitshift+0x160>)
 80082f4:	4013      	ands	r3, r2
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6593      	str	r3, [r2, #88]	; 0x58
 80082fa:	e005      	b.n	8008308 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	40020010 	.word	0x40020010
 800831c:	40020028 	.word	0x40020028
 8008320:	40020040 	.word	0x40020040
 8008324:	40020058 	.word	0x40020058
 8008328:	40020070 	.word	0x40020070
 800832c:	40020088 	.word	0x40020088
 8008330:	400200a0 	.word	0x400200a0
 8008334:	400200b8 	.word	0x400200b8
 8008338:	40020410 	.word	0x40020410
 800833c:	40020428 	.word	0x40020428
 8008340:	40020440 	.word	0x40020440
 8008344:	40020458 	.word	0x40020458
 8008348:	40020470 	.word	0x40020470
 800834c:	40020488 	.word	0x40020488
 8008350:	400204a0 	.word	0x400204a0
 8008354:	400204b8 	.word	0x400204b8
 8008358:	aaaaaaab 	.word	0xaaaaaaab
 800835c:	080166bc 	.word	0x080166bc
 8008360:	fffffc00 	.word	0xfffffc00

08008364 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d120      	bne.n	80083ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	2b03      	cmp	r3, #3
 800837e:	d858      	bhi.n	8008432 <DMA_CheckFifoParam+0xce>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <DMA_CheckFifoParam+0x24>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	08008399 	.word	0x08008399
 800838c:	080083ab 	.word	0x080083ab
 8008390:	08008399 	.word	0x08008399
 8008394:	08008433 	.word	0x08008433
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d048      	beq.n	8008436 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083a8:	e045      	b.n	8008436 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083b2:	d142      	bne.n	800843a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083b8:	e03f      	b.n	800843a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c2:	d123      	bne.n	800840c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d838      	bhi.n	800843e <DMA_CheckFifoParam+0xda>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <DMA_CheckFifoParam+0x70>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	080083eb 	.word	0x080083eb
 80083dc:	080083e5 	.word	0x080083e5
 80083e0:	080083fd 	.word	0x080083fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
        break;
 80083e8:	e030      	b.n	800844c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d025      	beq.n	8008442 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083fa:	e022      	b.n	8008442 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008404:	d11f      	bne.n	8008446 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800840a:	e01c      	b.n	8008446 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	2b02      	cmp	r3, #2
 8008412:	d902      	bls.n	800841a <DMA_CheckFifoParam+0xb6>
 8008414:	2b03      	cmp	r3, #3
 8008416:	d003      	beq.n	8008420 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008418:	e018      	b.n	800844c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	73fb      	strb	r3, [r7, #15]
        break;
 800841e:	e015      	b.n	800844c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00e      	beq.n	800844a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	73fb      	strb	r3, [r7, #15]
    break;
 8008430:	e00b      	b.n	800844a <DMA_CheckFifoParam+0xe6>
        break;
 8008432:	bf00      	nop
 8008434:	e00a      	b.n	800844c <DMA_CheckFifoParam+0xe8>
        break;
 8008436:	bf00      	nop
 8008438:	e008      	b.n	800844c <DMA_CheckFifoParam+0xe8>
        break;
 800843a:	bf00      	nop
 800843c:	e006      	b.n	800844c <DMA_CheckFifoParam+0xe8>
        break;
 800843e:	bf00      	nop
 8008440:	e004      	b.n	800844c <DMA_CheckFifoParam+0xe8>
        break;
 8008442:	bf00      	nop
 8008444:	e002      	b.n	800844c <DMA_CheckFifoParam+0xe8>
        break;
 8008446:	bf00      	nop
 8008448:	e000      	b.n	800844c <DMA_CheckFifoParam+0xe8>
    break;
 800844a:	bf00      	nop
    }
  }

  return status;
 800844c:	7bfb      	ldrb	r3, [r7, #15]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop

0800845c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a38      	ldr	r2, [pc, #224]	; (8008550 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d022      	beq.n	80084ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a36      	ldr	r2, [pc, #216]	; (8008554 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d01d      	beq.n	80084ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a35      	ldr	r2, [pc, #212]	; (8008558 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d018      	beq.n	80084ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a33      	ldr	r2, [pc, #204]	; (800855c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d013      	beq.n	80084ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a32      	ldr	r2, [pc, #200]	; (8008560 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00e      	beq.n	80084ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a30      	ldr	r2, [pc, #192]	; (8008564 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d009      	beq.n	80084ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a2f      	ldr	r2, [pc, #188]	; (8008568 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d004      	beq.n	80084ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a2d      	ldr	r2, [pc, #180]	; (800856c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d101      	bne.n	80084be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80084be:	2300      	movs	r3, #0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01a      	beq.n	80084fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	3b08      	subs	r3, #8
 80084cc:	4a28      	ldr	r2, [pc, #160]	; (8008570 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80084ce:	fba2 2303 	umull	r2, r3, r2, r3
 80084d2:	091b      	lsrs	r3, r3, #4
 80084d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4b26      	ldr	r3, [pc, #152]	; (8008574 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	461a      	mov	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a24      	ldr	r2, [pc, #144]	; (8008578 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80084e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	2201      	movs	r2, #1
 80084f2:	409a      	lsls	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80084f8:	e024      	b.n	8008544 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	3b10      	subs	r3, #16
 8008502:	4a1e      	ldr	r2, [pc, #120]	; (800857c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008504:	fba2 2303 	umull	r2, r3, r2, r3
 8008508:	091b      	lsrs	r3, r3, #4
 800850a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4a1c      	ldr	r2, [pc, #112]	; (8008580 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d806      	bhi.n	8008522 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4a1b      	ldr	r2, [pc, #108]	; (8008584 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d902      	bls.n	8008522 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	3308      	adds	r3, #8
 8008520:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4b18      	ldr	r3, [pc, #96]	; (8008588 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a16      	ldr	r2, [pc, #88]	; (800858c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008534:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f003 031f 	and.w	r3, r3, #31
 800853c:	2201      	movs	r2, #1
 800853e:	409a      	lsls	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008544:	bf00      	nop
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	58025408 	.word	0x58025408
 8008554:	5802541c 	.word	0x5802541c
 8008558:	58025430 	.word	0x58025430
 800855c:	58025444 	.word	0x58025444
 8008560:	58025458 	.word	0x58025458
 8008564:	5802546c 	.word	0x5802546c
 8008568:	58025480 	.word	0x58025480
 800856c:	58025494 	.word	0x58025494
 8008570:	cccccccd 	.word	0xcccccccd
 8008574:	16009600 	.word	0x16009600
 8008578:	58025880 	.word	0x58025880
 800857c:	aaaaaaab 	.word	0xaaaaaaab
 8008580:	400204b8 	.word	0x400204b8
 8008584:	4002040f 	.word	0x4002040f
 8008588:	10008200 	.word	0x10008200
 800858c:	40020880 	.word	0x40020880

08008590 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d04a      	beq.n	800863c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d847      	bhi.n	800863c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a25      	ldr	r2, [pc, #148]	; (8008648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d022      	beq.n	80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a24      	ldr	r2, [pc, #144]	; (800864c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d01d      	beq.n	80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a22      	ldr	r2, [pc, #136]	; (8008650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d018      	beq.n	80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a21      	ldr	r2, [pc, #132]	; (8008654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d013      	beq.n	80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1f      	ldr	r2, [pc, #124]	; (8008658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00e      	beq.n	80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a1e      	ldr	r2, [pc, #120]	; (800865c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d009      	beq.n	80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a1c      	ldr	r2, [pc, #112]	; (8008660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a1b      	ldr	r2, [pc, #108]	; (8008664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d101      	bne.n	8008600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e000      	b.n	8008602 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008600:	2300      	movs	r3, #0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4b17      	ldr	r3, [pc, #92]	; (8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a15      	ldr	r2, [pc, #84]	; (800866c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008618:	671a      	str	r2, [r3, #112]	; 0x70
 800861a:	e009      	b.n	8008630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4b14      	ldr	r3, [pc, #80]	; (8008670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	461a      	mov	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a11      	ldr	r2, [pc, #68]	; (8008674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800862e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3b01      	subs	r3, #1
 8008634:	2201      	movs	r2, #1
 8008636:	409a      	lsls	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800863c:	bf00      	nop
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	58025408 	.word	0x58025408
 800864c:	5802541c 	.word	0x5802541c
 8008650:	58025430 	.word	0x58025430
 8008654:	58025444 	.word	0x58025444
 8008658:	58025458 	.word	0x58025458
 800865c:	5802546c 	.word	0x5802546c
 8008660:	58025480 	.word	0x58025480
 8008664:	58025494 	.word	0x58025494
 8008668:	1600963f 	.word	0x1600963f
 800866c:	58025940 	.word	0x58025940
 8008670:	1000823f 	.word	0x1000823f
 8008674:	40020940 	.word	0x40020940

08008678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008678:	b480      	push	{r7}
 800867a:	b089      	sub	sp, #36	; 0x24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008682:	2300      	movs	r3, #0
 8008684:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008686:	4b89      	ldr	r3, [pc, #548]	; (80088ac <HAL_GPIO_Init+0x234>)
 8008688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800868a:	e194      	b.n	80089b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	2101      	movs	r1, #1
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	fa01 f303 	lsl.w	r3, r1, r3
 8008698:	4013      	ands	r3, r2
 800869a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 8186 	beq.w	80089b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f003 0303 	and.w	r3, r3, #3
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d005      	beq.n	80086bc <HAL_GPIO_Init+0x44>
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d130      	bne.n	800871e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	2203      	movs	r2, #3
 80086c8:	fa02 f303 	lsl.w	r3, r2, r3
 80086cc:	43db      	mvns	r3, r3
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4013      	ands	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086f2:	2201      	movs	r2, #1
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	fa02 f303 	lsl.w	r3, r2, r3
 80086fa:	43db      	mvns	r3, r3
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	4013      	ands	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	091b      	lsrs	r3, r3, #4
 8008708:	f003 0201 	and.w	r2, r3, #1
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	4313      	orrs	r3, r2
 8008716:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f003 0303 	and.w	r3, r3, #3
 8008726:	2b03      	cmp	r3, #3
 8008728:	d017      	beq.n	800875a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	2203      	movs	r2, #3
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	43db      	mvns	r3, r3
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	4013      	ands	r3, r2
 8008740:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	689a      	ldr	r2, [r3, #8]
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	4313      	orrs	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d123      	bne.n	80087ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	08da      	lsrs	r2, r3, #3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3208      	adds	r2, #8
 800876e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	220f      	movs	r2, #15
 800877e:	fa02 f303 	lsl.w	r3, r2, r3
 8008782:	43db      	mvns	r3, r3
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	4013      	ands	r3, r2
 8008788:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	691a      	ldr	r2, [r3, #16]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	f003 0307 	and.w	r3, r3, #7
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	fa02 f303 	lsl.w	r3, r2, r3
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	4313      	orrs	r3, r2
 800879e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	08da      	lsrs	r2, r3, #3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3208      	adds	r2, #8
 80087a8:	69b9      	ldr	r1, [r7, #24]
 80087aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	2203      	movs	r2, #3
 80087ba:	fa02 f303 	lsl.w	r3, r2, r3
 80087be:	43db      	mvns	r3, r3
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	4013      	ands	r3, r2
 80087c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f003 0203 	and.w	r2, r3, #3
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	fa02 f303 	lsl.w	r3, r2, r3
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	4313      	orrs	r3, r2
 80087da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 80e0 	beq.w	80089b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087f0:	4b2f      	ldr	r3, [pc, #188]	; (80088b0 <HAL_GPIO_Init+0x238>)
 80087f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087f6:	4a2e      	ldr	r2, [pc, #184]	; (80088b0 <HAL_GPIO_Init+0x238>)
 80087f8:	f043 0302 	orr.w	r3, r3, #2
 80087fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008800:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <HAL_GPIO_Init+0x238>)
 8008802:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800880e:	4a29      	ldr	r2, [pc, #164]	; (80088b4 <HAL_GPIO_Init+0x23c>)
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	089b      	lsrs	r3, r3, #2
 8008814:	3302      	adds	r3, #2
 8008816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800881a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	220f      	movs	r2, #15
 8008826:	fa02 f303 	lsl.w	r3, r2, r3
 800882a:	43db      	mvns	r3, r3
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	4013      	ands	r3, r2
 8008830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a20      	ldr	r2, [pc, #128]	; (80088b8 <HAL_GPIO_Init+0x240>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d052      	beq.n	80088e0 <HAL_GPIO_Init+0x268>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a1f      	ldr	r2, [pc, #124]	; (80088bc <HAL_GPIO_Init+0x244>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d031      	beq.n	80088a6 <HAL_GPIO_Init+0x22e>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a1e      	ldr	r2, [pc, #120]	; (80088c0 <HAL_GPIO_Init+0x248>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d02b      	beq.n	80088a2 <HAL_GPIO_Init+0x22a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a1d      	ldr	r2, [pc, #116]	; (80088c4 <HAL_GPIO_Init+0x24c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d025      	beq.n	800889e <HAL_GPIO_Init+0x226>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a1c      	ldr	r2, [pc, #112]	; (80088c8 <HAL_GPIO_Init+0x250>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d01f      	beq.n	800889a <HAL_GPIO_Init+0x222>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1b      	ldr	r2, [pc, #108]	; (80088cc <HAL_GPIO_Init+0x254>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d019      	beq.n	8008896 <HAL_GPIO_Init+0x21e>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a1a      	ldr	r2, [pc, #104]	; (80088d0 <HAL_GPIO_Init+0x258>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d013      	beq.n	8008892 <HAL_GPIO_Init+0x21a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a19      	ldr	r2, [pc, #100]	; (80088d4 <HAL_GPIO_Init+0x25c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00d      	beq.n	800888e <HAL_GPIO_Init+0x216>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a18      	ldr	r2, [pc, #96]	; (80088d8 <HAL_GPIO_Init+0x260>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d007      	beq.n	800888a <HAL_GPIO_Init+0x212>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a17      	ldr	r2, [pc, #92]	; (80088dc <HAL_GPIO_Init+0x264>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d101      	bne.n	8008886 <HAL_GPIO_Init+0x20e>
 8008882:	2309      	movs	r3, #9
 8008884:	e02d      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 8008886:	230a      	movs	r3, #10
 8008888:	e02b      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 800888a:	2308      	movs	r3, #8
 800888c:	e029      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 800888e:	2307      	movs	r3, #7
 8008890:	e027      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 8008892:	2306      	movs	r3, #6
 8008894:	e025      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 8008896:	2305      	movs	r3, #5
 8008898:	e023      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 800889a:	2304      	movs	r3, #4
 800889c:	e021      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 800889e:	2303      	movs	r3, #3
 80088a0:	e01f      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e01d      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e01b      	b.n	80088e2 <HAL_GPIO_Init+0x26a>
 80088aa:	bf00      	nop
 80088ac:	58000080 	.word	0x58000080
 80088b0:	58024400 	.word	0x58024400
 80088b4:	58000400 	.word	0x58000400
 80088b8:	58020000 	.word	0x58020000
 80088bc:	58020400 	.word	0x58020400
 80088c0:	58020800 	.word	0x58020800
 80088c4:	58020c00 	.word	0x58020c00
 80088c8:	58021000 	.word	0x58021000
 80088cc:	58021400 	.word	0x58021400
 80088d0:	58021800 	.word	0x58021800
 80088d4:	58021c00 	.word	0x58021c00
 80088d8:	58022000 	.word	0x58022000
 80088dc:	58022400 	.word	0x58022400
 80088e0:	2300      	movs	r3, #0
 80088e2:	69fa      	ldr	r2, [r7, #28]
 80088e4:	f002 0203 	and.w	r2, r2, #3
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	4093      	lsls	r3, r2
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088f2:	4938      	ldr	r1, [pc, #224]	; (80089d4 <HAL_GPIO_Init+0x35c>)
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	089b      	lsrs	r3, r3, #2
 80088f8:	3302      	adds	r3, #2
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	43db      	mvns	r3, r3
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	4013      	ands	r3, r2
 8008910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	4313      	orrs	r3, r2
 8008924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800892e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	43db      	mvns	r3, r3
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	4013      	ands	r3, r2
 800893e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	43db      	mvns	r3, r3
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	4013      	ands	r3, r2
 800896a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	4313      	orrs	r3, r2
 800897e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	43db      	mvns	r3, r3
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	4013      	ands	r3, r2
 8008994:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	3301      	adds	r3, #1
 80089b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	fa22 f303 	lsr.w	r3, r2, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f47f ae63 	bne.w	800868c <HAL_GPIO_Init+0x14>
  }
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	3724      	adds	r7, #36	; 0x24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	58000400 	.word	0x58000400

080089d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691a      	ldr	r2, [r3, #16]
 80089e8:	887b      	ldrh	r3, [r7, #2]
 80089ea:	4013      	ands	r3, r2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089f0:	2301      	movs	r3, #1
 80089f2:	73fb      	strb	r3, [r7, #15]
 80089f4:	e001      	b.n	80089fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	807b      	strh	r3, [r7, #2]
 8008a14:	4613      	mov	r3, r2
 8008a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a18:	787b      	ldrb	r3, [r7, #1]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a1e:	887a      	ldrh	r2, [r7, #2]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008a24:	e003      	b.n	8008a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a26:	887b      	ldrh	r3, [r7, #2]
 8008a28:	041a      	lsls	r2, r3, #16
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	619a      	str	r2, [r3, #24]
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
	...

08008a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e08b      	b.n	8008b66 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7fa f938 	bl	8002cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2224      	movs	r2, #36	; 0x24
 8008a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0201 	bic.w	r2, r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d107      	bne.n	8008ab6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ab2:	609a      	str	r2, [r3, #8]
 8008ab4:	e006      	b.n	8008ac4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008ac2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d108      	bne.n	8008ade <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ada:	605a      	str	r2, [r3, #4]
 8008adc:	e007      	b.n	8008aee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008aec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6859      	ldr	r1, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	4b1d      	ldr	r3, [pc, #116]	; (8008b70 <HAL_I2C_Init+0x134>)
 8008afa:	430b      	orrs	r3, r1
 8008afc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691a      	ldr	r2, [r3, #16]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	69d9      	ldr	r1, [r3, #28]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1a      	ldr	r2, [r3, #32]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0201 	orr.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	02008000 	.word	0x02008000

08008b74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	460b      	mov	r3, r1
 8008b82:	817b      	strh	r3, [r7, #10]
 8008b84:	4613      	mov	r3, r2
 8008b86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b20      	cmp	r3, #32
 8008b92:	f040 80fd 	bne.w	8008d90 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_I2C_Master_Transmit+0x30>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e0f6      	b.n	8008d92 <HAL_I2C_Master_Transmit+0x21e>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008bac:	f7fa fe00 	bl	80037b0 <HAL_GetTick>
 8008bb0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	2319      	movs	r3, #25
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 fa0a 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e0e1      	b.n	8008d92 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2221      	movs	r2, #33	; 0x21
 8008bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2210      	movs	r2, #16
 8008bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	893a      	ldrh	r2, [r7, #8]
 8008bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2bff      	cmp	r3, #255	; 0xff
 8008bfe:	d906      	bls.n	8008c0e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	22ff      	movs	r2, #255	; 0xff
 8008c04:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	e007      	b.n	8008c1e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d024      	beq.n	8008c70 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	3b01      	subs	r3, #1
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	8979      	ldrh	r1, [r7, #10]
 8008c62:	4b4e      	ldr	r3, [pc, #312]	; (8008d9c <HAL_I2C_Master_Transmit+0x228>)
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 fc05 	bl	8009478 <I2C_TransferConfig>
 8008c6e:	e066      	b.n	8008d3e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	8979      	ldrh	r1, [r7, #10]
 8008c78:	4b48      	ldr	r3, [pc, #288]	; (8008d9c <HAL_I2C_Master_Transmit+0x228>)
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 fbfa 	bl	8009478 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008c84:	e05b      	b.n	8008d3e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	6a39      	ldr	r1, [r7, #32]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 f9fd 	bl	800908a <I2C_WaitOnTXISFlagUntilTimeout>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e07b      	b.n	8008d92 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	781a      	ldrb	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d034      	beq.n	8008d3e <HAL_I2C_Master_Transmit+0x1ca>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d130      	bne.n	8008d3e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2180      	movs	r1, #128	; 0x80
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 f976 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e04d      	b.n	8008d92 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2bff      	cmp	r3, #255	; 0xff
 8008cfe:	d90e      	bls.n	8008d1e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	22ff      	movs	r2, #255	; 0xff
 8008d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	8979      	ldrh	r1, [r7, #10]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 fbae 	bl	8009478 <I2C_TransferConfig>
 8008d1c:	e00f      	b.n	8008d3e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	8979      	ldrh	r1, [r7, #10]
 8008d30:	2300      	movs	r3, #0
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 fb9d 	bl	8009478 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d19e      	bne.n	8008c86 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	6a39      	ldr	r1, [r7, #32]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 f9e3 	bl	8009118 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e01a      	b.n	8008d92 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2220      	movs	r2, #32
 8008d62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6859      	ldr	r1, [r3, #4]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <HAL_I2C_Master_Transmit+0x22c>)
 8008d70:	400b      	ands	r3, r1
 8008d72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e000      	b.n	8008d92 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008d90:	2302      	movs	r3, #2
  }
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	80002000 	.word	0x80002000
 8008da0:	fe00e800 	.word	0xfe00e800

08008da4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	607a      	str	r2, [r7, #4]
 8008dae:	461a      	mov	r2, r3
 8008db0:	460b      	mov	r3, r1
 8008db2:	817b      	strh	r3, [r7, #10]
 8008db4:	4613      	mov	r3, r2
 8008db6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	f040 80db 	bne.w	8008f7c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d101      	bne.n	8008dd4 <HAL_I2C_Master_Receive+0x30>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e0d4      	b.n	8008f7e <HAL_I2C_Master_Receive+0x1da>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ddc:	f7fa fce8 	bl	80037b0 <HAL_GetTick>
 8008de0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	2319      	movs	r3, #25
 8008de8:	2201      	movs	r2, #1
 8008dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 f8f2 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e0bf      	b.n	8008f7e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2222      	movs	r2, #34	; 0x22
 8008e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2210      	movs	r2, #16
 8008e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	893a      	ldrh	r2, [r7, #8]
 8008e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	2bff      	cmp	r3, #255	; 0xff
 8008e2e:	d90e      	bls.n	8008e4e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	22ff      	movs	r2, #255	; 0xff
 8008e34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	8979      	ldrh	r1, [r7, #10]
 8008e3e:	4b52      	ldr	r3, [pc, #328]	; (8008f88 <HAL_I2C_Master_Receive+0x1e4>)
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fb16 	bl	8009478 <I2C_TransferConfig>
 8008e4c:	e06d      	b.n	8008f2a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	8979      	ldrh	r1, [r7, #10]
 8008e60:	4b49      	ldr	r3, [pc, #292]	; (8008f88 <HAL_I2C_Master_Receive+0x1e4>)
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 fb05 	bl	8009478 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008e6e:	e05c      	b.n	8008f2a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	6a39      	ldr	r1, [r7, #32]
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 f993 	bl	80091a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e07c      	b.n	8008f7e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d034      	beq.n	8008f2a <HAL_I2C_Master_Receive+0x186>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d130      	bne.n	8008f2a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2180      	movs	r1, #128	; 0x80
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 f880 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e04d      	b.n	8008f7e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	2bff      	cmp	r3, #255	; 0xff
 8008eea:	d90e      	bls.n	8008f0a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	22ff      	movs	r2, #255	; 0xff
 8008ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	8979      	ldrh	r1, [r7, #10]
 8008efa:	2300      	movs	r3, #0
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 fab8 	bl	8009478 <I2C_TransferConfig>
 8008f08:	e00f      	b.n	8008f2a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	8979      	ldrh	r1, [r7, #10]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 faa7 	bl	8009478 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d19d      	bne.n	8008e70 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	6a39      	ldr	r1, [r7, #32]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f8ed 	bl	8009118 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e01a      	b.n	8008f7e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6859      	ldr	r1, [r3, #4]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <HAL_I2C_Master_Receive+0x1e8>)
 8008f5c:	400b      	ands	r3, r1
 8008f5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e000      	b.n	8008f7e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008f7c:	2302      	movs	r3, #2
  }
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	80002400 	.word	0x80002400
 8008f8c:	fe00e800 	.word	0xfe00e800

08008f90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d103      	bne.n	8008fae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2200      	movs	r2, #0
 8008fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d007      	beq.n	8008fcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0201 	orr.w	r2, r2, #1
 8008fca:	619a      	str	r2, [r3, #24]
  }
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fe8:	e03b      	b.n	8009062 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 f962 	bl	80092b8 <I2C_IsErrorOccurred>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e041      	b.n	8009082 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009004:	d02d      	beq.n	8009062 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009006:	f7fa fbd3 	bl	80037b0 <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d302      	bcc.n	800901c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d122      	bne.n	8009062 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	699a      	ldr	r2, [r3, #24]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	4013      	ands	r3, r2
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	429a      	cmp	r2, r3
 800902a:	bf0c      	ite	eq
 800902c:	2301      	moveq	r3, #1
 800902e:	2300      	movne	r3, #0
 8009030:	b2db      	uxtb	r3, r3
 8009032:	461a      	mov	r2, r3
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	429a      	cmp	r2, r3
 8009038:	d113      	bne.n	8009062 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903e:	f043 0220 	orr.w	r2, r3, #32
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2220      	movs	r2, #32
 800904a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e00f      	b.n	8009082 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699a      	ldr	r2, [r3, #24]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	4013      	ands	r3, r2
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	429a      	cmp	r2, r3
 8009070:	bf0c      	ite	eq
 8009072:	2301      	moveq	r3, #1
 8009074:	2300      	movne	r3, #0
 8009076:	b2db      	uxtb	r3, r3
 8009078:	461a      	mov	r2, r3
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	429a      	cmp	r2, r3
 800907e:	d0b4      	beq.n	8008fea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	60f8      	str	r0, [r7, #12]
 8009092:	60b9      	str	r1, [r7, #8]
 8009094:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009096:	e033      	b.n	8009100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 f90b 	bl	80092b8 <I2C_IsErrorOccurred>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e031      	b.n	8009110 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b2:	d025      	beq.n	8009100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b4:	f7fa fb7c 	bl	80037b0 <HAL_GetTick>
 80090b8:	4602      	mov	r2, r0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d302      	bcc.n	80090ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d11a      	bne.n	8009100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d013      	beq.n	8009100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090dc:	f043 0220 	orr.w	r2, r3, #32
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2220      	movs	r2, #32
 80090e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e007      	b.n	8009110 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b02      	cmp	r3, #2
 800910c:	d1c4      	bne.n	8009098 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009124:	e02f      	b.n	8009186 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	68b9      	ldr	r1, [r7, #8]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 f8c4 	bl	80092b8 <I2C_IsErrorOccurred>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e02d      	b.n	8009196 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800913a:	f7fa fb39 	bl	80037b0 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	429a      	cmp	r2, r3
 8009148:	d302      	bcc.n	8009150 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d11a      	bne.n	8009186 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	f003 0320 	and.w	r3, r3, #32
 800915a:	2b20      	cmp	r3, #32
 800915c:	d013      	beq.n	8009186 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009162:	f043 0220 	orr.w	r2, r3, #32
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2220      	movs	r2, #32
 800916e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e007      	b.n	8009196 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	f003 0320 	and.w	r3, r3, #32
 8009190:	2b20      	cmp	r3, #32
 8009192:	d1c8      	bne.n	8009126 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80091b0:	e071      	b.n	8009296 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f87e 	bl	80092b8 <I2C_IsErrorOccurred>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b20      	cmp	r3, #32
 80091d2:	d13b      	bne.n	800924c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d138      	bne.n	800924c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	d105      	bne.n	80091f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	f003 0310 	and.w	r3, r3, #16
 80091fe:	2b10      	cmp	r3, #16
 8009200:	d121      	bne.n	8009246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2210      	movs	r2, #16
 8009208:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2204      	movs	r2, #4
 800920e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2220      	movs	r2, #32
 8009216:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6859      	ldr	r1, [r3, #4]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b24      	ldr	r3, [pc, #144]	; (80092b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009224:	400b      	ands	r3, r1
 8009226:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2220      	movs	r2, #32
 800922c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	75fb      	strb	r3, [r7, #23]
 8009244:	e002      	b.n	800924c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800924c:	f7fa fab0 	bl	80037b0 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	429a      	cmp	r2, r3
 800925a:	d302      	bcc.n	8009262 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d119      	bne.n	8009296 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d116      	bne.n	8009296 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	f003 0304 	and.w	r3, r3, #4
 8009272:	2b04      	cmp	r3, #4
 8009274:	d00f      	beq.n	8009296 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927a:	f043 0220 	orr.w	r2, r3, #32
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2220      	movs	r2, #32
 8009286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d002      	beq.n	80092aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d083      	beq.n	80091b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	fe00e800 	.word	0xfe00e800

080092b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	; 0x28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	f003 0310 	and.w	r3, r3, #16
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d068      	beq.n	80093b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2210      	movs	r2, #16
 80092ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092ec:	e049      	b.n	8009382 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092f4:	d045      	beq.n	8009382 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80092f6:	f7fa fa5b 	bl	80037b0 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	429a      	cmp	r2, r3
 8009304:	d302      	bcc.n	800930c <I2C_IsErrorOccurred+0x54>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d13a      	bne.n	8009382 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009316:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800931e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800932a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800932e:	d121      	bne.n	8009374 <I2C_IsErrorOccurred+0xbc>
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009336:	d01d      	beq.n	8009374 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009338:	7cfb      	ldrb	r3, [r7, #19]
 800933a:	2b20      	cmp	r3, #32
 800933c:	d01a      	beq.n	8009374 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800934c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800934e:	f7fa fa2f 	bl	80037b0 <HAL_GetTick>
 8009352:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009354:	e00e      	b.n	8009374 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009356:	f7fa fa2b 	bl	80037b0 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	2b19      	cmp	r3, #25
 8009362:	d907      	bls.n	8009374 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	f043 0320 	orr.w	r3, r3, #32
 800936a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009372:	e006      	b.n	8009382 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b20      	cmp	r3, #32
 8009380:	d1e9      	bne.n	8009356 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b20      	cmp	r3, #32
 800938e:	d003      	beq.n	8009398 <I2C_IsErrorOccurred+0xe0>
 8009390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0aa      	beq.n	80092ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800939c:	2b00      	cmp	r3, #0
 800939e:	d103      	bne.n	80093a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2220      	movs	r2, #32
 80093a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	f043 0304 	orr.w	r3, r3, #4
 80093ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	f043 0301 	orr.w	r3, r3, #1
 80093ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00b      	beq.n	8009402 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	f043 0308 	orr.w	r3, r3, #8
 80093f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00b      	beq.n	8009424 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	f043 0302 	orr.w	r3, r3, #2
 8009412:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800941c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01c      	beq.n	8009466 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7ff fdaf 	bl	8008f90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6859      	ldr	r1, [r3, #4]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <I2C_IsErrorOccurred+0x1bc>)
 800943e:	400b      	ands	r3, r1
 8009440:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	431a      	orrs	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2220      	movs	r2, #32
 8009452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800946a:	4618      	mov	r0, r3
 800946c:	3728      	adds	r7, #40	; 0x28
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	fe00e800 	.word	0xfe00e800

08009478 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	607b      	str	r3, [r7, #4]
 8009482:	460b      	mov	r3, r1
 8009484:	817b      	strh	r3, [r7, #10]
 8009486:	4613      	mov	r3, r2
 8009488:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800948a:	897b      	ldrh	r3, [r7, #10]
 800948c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009490:	7a7b      	ldrb	r3, [r7, #9]
 8009492:	041b      	lsls	r3, r3, #16
 8009494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009498:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	0d5b      	lsrs	r3, r3, #21
 80094b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80094b6:	4b08      	ldr	r3, [pc, #32]	; (80094d8 <I2C_TransferConfig+0x60>)
 80094b8:	430b      	orrs	r3, r1
 80094ba:	43db      	mvns	r3, r3
 80094bc:	ea02 0103 	and.w	r1, r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80094ca:	bf00      	nop
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	03ff63ff 	.word	0x03ff63ff

080094dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b20      	cmp	r3, #32
 80094f0:	d138      	bne.n	8009564 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d101      	bne.n	8009500 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80094fc:	2302      	movs	r3, #2
 80094fe:	e032      	b.n	8009566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2224      	movs	r2, #36	; 0x24
 800950c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0201 	bic.w	r2, r2, #1
 800951e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800952e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6819      	ldr	r1, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f042 0201 	orr.w	r2, r2, #1
 800954e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2220      	movs	r2, #32
 8009554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	e000      	b.n	8009566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009564:	2302      	movs	r3, #2
  }
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009572:	b480      	push	{r7}
 8009574:	b085      	sub	sp, #20
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b20      	cmp	r3, #32
 8009586:	d139      	bne.n	80095fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800958e:	2b01      	cmp	r3, #1
 8009590:	d101      	bne.n	8009596 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009592:	2302      	movs	r3, #2
 8009594:	e033      	b.n	80095fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2224      	movs	r2, #36	; 0x24
 80095a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 0201 	bic.w	r2, r2, #1
 80095b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80095c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	021b      	lsls	r3, r3, #8
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f042 0201 	orr.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2220      	movs	r2, #32
 80095ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	e000      	b.n	80095fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80095fc:	2302      	movs	r3, #2
  }
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
	...

0800960c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009614:	4b0d      	ldr	r3, [pc, #52]	; (800964c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800961a:	4a0c      	ldr	r2, [pc, #48]	; (800964c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800961c:	f043 0302 	orr.w	r3, r3, #2
 8009620:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009624:	4b09      	ldr	r3, [pc, #36]	; (800964c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800962a:	f003 0302 	and.w	r3, r3, #2
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009632:	4b07      	ldr	r3, [pc, #28]	; (8009650 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	4906      	ldr	r1, [pc, #24]	; (8009650 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4313      	orrs	r3, r2
 800963c:	604b      	str	r3, [r1, #4]
}
 800963e:	bf00      	nop
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	58024400 	.word	0x58024400
 8009650:	58000400 	.word	0x58000400

08009654 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800965c:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <HAL_PWREx_ConfigSupply+0x70>)
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b04      	cmp	r3, #4
 8009666:	d00a      	beq.n	800967e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009668:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <HAL_PWREx_ConfigSupply+0x70>)
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	429a      	cmp	r2, r3
 8009674:	d001      	beq.n	800967a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e01f      	b.n	80096ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	e01d      	b.n	80096ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800967e:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <HAL_PWREx_ConfigSupply+0x70>)
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	f023 0207 	bic.w	r2, r3, #7
 8009686:	490f      	ldr	r1, [pc, #60]	; (80096c4 <HAL_PWREx_ConfigSupply+0x70>)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4313      	orrs	r3, r2
 800968c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800968e:	f7fa f88f 	bl	80037b0 <HAL_GetTick>
 8009692:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009694:	e009      	b.n	80096aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009696:	f7fa f88b 	bl	80037b0 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096a4:	d901      	bls.n	80096aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e007      	b.n	80096ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80096aa:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <HAL_PWREx_ConfigSupply+0x70>)
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096b6:	d1ee      	bne.n	8009696 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	58024800 	.word	0x58024800

080096c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08c      	sub	sp, #48	; 0x30
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d102      	bne.n	80096dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f000 bc48 	b.w	8009f6c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 8088 	beq.w	80097fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096ea:	4b99      	ldr	r3, [pc, #612]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096f4:	4b96      	ldr	r3, [pc, #600]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80096f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80096fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fc:	2b10      	cmp	r3, #16
 80096fe:	d007      	beq.n	8009710 <HAL_RCC_OscConfig+0x48>
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	2b18      	cmp	r3, #24
 8009704:	d111      	bne.n	800972a <HAL_RCC_OscConfig+0x62>
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	f003 0303 	and.w	r3, r3, #3
 800970c:	2b02      	cmp	r3, #2
 800970e:	d10c      	bne.n	800972a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009710:	4b8f      	ldr	r3, [pc, #572]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d06d      	beq.n	80097f8 <HAL_RCC_OscConfig+0x130>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d169      	bne.n	80097f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	f000 bc21 	b.w	8009f6c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009732:	d106      	bne.n	8009742 <HAL_RCC_OscConfig+0x7a>
 8009734:	4b86      	ldr	r3, [pc, #536]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a85      	ldr	r2, [pc, #532]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800973a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	e02e      	b.n	80097a0 <HAL_RCC_OscConfig+0xd8>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10c      	bne.n	8009764 <HAL_RCC_OscConfig+0x9c>
 800974a:	4b81      	ldr	r3, [pc, #516]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a80      	ldr	r2, [pc, #512]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009754:	6013      	str	r3, [r2, #0]
 8009756:	4b7e      	ldr	r3, [pc, #504]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a7d      	ldr	r2, [pc, #500]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800975c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	e01d      	b.n	80097a0 <HAL_RCC_OscConfig+0xd8>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800976c:	d10c      	bne.n	8009788 <HAL_RCC_OscConfig+0xc0>
 800976e:	4b78      	ldr	r3, [pc, #480]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a77      	ldr	r2, [pc, #476]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009778:	6013      	str	r3, [r2, #0]
 800977a:	4b75      	ldr	r3, [pc, #468]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a74      	ldr	r2, [pc, #464]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	e00b      	b.n	80097a0 <HAL_RCC_OscConfig+0xd8>
 8009788:	4b71      	ldr	r3, [pc, #452]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a70      	ldr	r2, [pc, #448]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800978e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	4b6e      	ldr	r3, [pc, #440]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a6d      	ldr	r2, [pc, #436]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800979a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800979e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d013      	beq.n	80097d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a8:	f7fa f802 	bl	80037b0 <HAL_GetTick>
 80097ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097ae:	e008      	b.n	80097c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097b0:	f7f9 fffe 	bl	80037b0 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b64      	cmp	r3, #100	; 0x64
 80097bc:	d901      	bls.n	80097c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e3d4      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097c2:	4b63      	ldr	r3, [pc, #396]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0f0      	beq.n	80097b0 <HAL_RCC_OscConfig+0xe8>
 80097ce:	e014      	b.n	80097fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d0:	f7f9 ffee 	bl	80037b0 <HAL_GetTick>
 80097d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097d6:	e008      	b.n	80097ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097d8:	f7f9 ffea 	bl	80037b0 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b64      	cmp	r3, #100	; 0x64
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e3c0      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097ea:	4b59      	ldr	r3, [pc, #356]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1f0      	bne.n	80097d8 <HAL_RCC_OscConfig+0x110>
 80097f6:	e000      	b.n	80097fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 80ca 	beq.w	800999c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009808:	4b51      	ldr	r3, [pc, #324]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009810:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009812:	4b4f      	ldr	r3, [pc, #316]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009816:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d007      	beq.n	800982e <HAL_RCC_OscConfig+0x166>
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	2b18      	cmp	r3, #24
 8009822:	d156      	bne.n	80098d2 <HAL_RCC_OscConfig+0x20a>
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d151      	bne.n	80098d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800982e:	4b48      	ldr	r3, [pc, #288]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0304 	and.w	r3, r3, #4
 8009836:	2b00      	cmp	r3, #0
 8009838:	d005      	beq.n	8009846 <HAL_RCC_OscConfig+0x17e>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e392      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009846:	4b42      	ldr	r3, [pc, #264]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f023 0219 	bic.w	r2, r3, #25
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	493f      	ldr	r1, [pc, #252]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009854:	4313      	orrs	r3, r2
 8009856:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009858:	f7f9 ffaa 	bl	80037b0 <HAL_GetTick>
 800985c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800985e:	e008      	b.n	8009872 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009860:	f7f9 ffa6 	bl	80037b0 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b02      	cmp	r3, #2
 800986c:	d901      	bls.n	8009872 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e37c      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009872:	4b37      	ldr	r3, [pc, #220]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0f0      	beq.n	8009860 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800987e:	f7f9 ffa3 	bl	80037c8 <HAL_GetREVID>
 8009882:	4603      	mov	r3, r0
 8009884:	f241 0203 	movw	r2, #4099	; 0x1003
 8009888:	4293      	cmp	r3, r2
 800988a:	d817      	bhi.n	80098bc <HAL_RCC_OscConfig+0x1f4>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d108      	bne.n	80098a6 <HAL_RCC_OscConfig+0x1de>
 8009894:	4b2e      	ldr	r3, [pc, #184]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800989c:	4a2c      	ldr	r2, [pc, #176]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800989e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098a4:	e07a      	b.n	800999c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098a6:	4b2a      	ldr	r3, [pc, #168]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	031b      	lsls	r3, r3, #12
 80098b4:	4926      	ldr	r1, [pc, #152]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098ba:	e06f      	b.n	800999c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098bc:	4b24      	ldr	r3, [pc, #144]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	061b      	lsls	r3, r3, #24
 80098ca:	4921      	ldr	r1, [pc, #132]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098d0:	e064      	b.n	800999c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d047      	beq.n	800996a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098da:	4b1d      	ldr	r3, [pc, #116]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f023 0219 	bic.w	r2, r3, #25
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	491a      	ldr	r1, [pc, #104]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ec:	f7f9 ff60 	bl	80037b0 <HAL_GetTick>
 80098f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098f2:	e008      	b.n	8009906 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098f4:	f7f9 ff5c 	bl	80037b0 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d901      	bls.n	8009906 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e332      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009906:	4b12      	ldr	r3, [pc, #72]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0f0      	beq.n	80098f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009912:	f7f9 ff59 	bl	80037c8 <HAL_GetREVID>
 8009916:	4603      	mov	r3, r0
 8009918:	f241 0203 	movw	r2, #4099	; 0x1003
 800991c:	4293      	cmp	r3, r2
 800991e:	d819      	bhi.n	8009954 <HAL_RCC_OscConfig+0x28c>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	2b40      	cmp	r3, #64	; 0x40
 8009926:	d108      	bne.n	800993a <HAL_RCC_OscConfig+0x272>
 8009928:	4b09      	ldr	r3, [pc, #36]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009930:	4a07      	ldr	r2, [pc, #28]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 8009932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009936:	6053      	str	r3, [r2, #4]
 8009938:	e030      	b.n	800999c <HAL_RCC_OscConfig+0x2d4>
 800993a:	4b05      	ldr	r3, [pc, #20]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	031b      	lsls	r3, r3, #12
 8009948:	4901      	ldr	r1, [pc, #4]	; (8009950 <HAL_RCC_OscConfig+0x288>)
 800994a:	4313      	orrs	r3, r2
 800994c:	604b      	str	r3, [r1, #4]
 800994e:	e025      	b.n	800999c <HAL_RCC_OscConfig+0x2d4>
 8009950:	58024400 	.word	0x58024400
 8009954:	4b9a      	ldr	r3, [pc, #616]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	061b      	lsls	r3, r3, #24
 8009962:	4997      	ldr	r1, [pc, #604]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009964:	4313      	orrs	r3, r2
 8009966:	604b      	str	r3, [r1, #4]
 8009968:	e018      	b.n	800999c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800996a:	4b95      	ldr	r3, [pc, #596]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a94      	ldr	r2, [pc, #592]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009970:	f023 0301 	bic.w	r3, r3, #1
 8009974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009976:	f7f9 ff1b 	bl	80037b0 <HAL_GetTick>
 800997a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800997c:	e008      	b.n	8009990 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800997e:	f7f9 ff17 	bl	80037b0 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	d901      	bls.n	8009990 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e2ed      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009990:	4b8b      	ldr	r3, [pc, #556]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1f0      	bne.n	800997e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0310 	and.w	r3, r3, #16
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80a9 	beq.w	8009afc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099aa:	4b85      	ldr	r3, [pc, #532]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099b4:	4b82      	ldr	r3, [pc, #520]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d007      	beq.n	80099d0 <HAL_RCC_OscConfig+0x308>
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	2b18      	cmp	r3, #24
 80099c4:	d13a      	bne.n	8009a3c <HAL_RCC_OscConfig+0x374>
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f003 0303 	and.w	r3, r3, #3
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d135      	bne.n	8009a3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099d0:	4b7b      	ldr	r3, [pc, #492]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <HAL_RCC_OscConfig+0x320>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	2b80      	cmp	r3, #128	; 0x80
 80099e2:	d001      	beq.n	80099e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e2c1      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099e8:	f7f9 feee 	bl	80037c8 <HAL_GetREVID>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d817      	bhi.n	8009a26 <HAL_RCC_OscConfig+0x35e>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	2b20      	cmp	r3, #32
 80099fc:	d108      	bne.n	8009a10 <HAL_RCC_OscConfig+0x348>
 80099fe:	4b70      	ldr	r3, [pc, #448]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a06:	4a6e      	ldr	r2, [pc, #440]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a0e:	e075      	b.n	8009afc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a10:	4b6b      	ldr	r3, [pc, #428]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	069b      	lsls	r3, r3, #26
 8009a1e:	4968      	ldr	r1, [pc, #416]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a24:	e06a      	b.n	8009afc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a26:	4b66      	ldr	r3, [pc, #408]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	061b      	lsls	r3, r3, #24
 8009a34:	4962      	ldr	r1, [pc, #392]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a3a:	e05f      	b.n	8009afc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d042      	beq.n	8009aca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a44:	4b5e      	ldr	r3, [pc, #376]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a5d      	ldr	r2, [pc, #372]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a50:	f7f9 feae 	bl	80037b0 <HAL_GetTick>
 8009a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a56:	e008      	b.n	8009a6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a58:	f7f9 feaa 	bl	80037b0 <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d901      	bls.n	8009a6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e280      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a6a:	4b55      	ldr	r3, [pc, #340]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0f0      	beq.n	8009a58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a76:	f7f9 fea7 	bl	80037c8 <HAL_GetREVID>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d817      	bhi.n	8009ab4 <HAL_RCC_OscConfig+0x3ec>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	2b20      	cmp	r3, #32
 8009a8a:	d108      	bne.n	8009a9e <HAL_RCC_OscConfig+0x3d6>
 8009a8c:	4b4c      	ldr	r3, [pc, #304]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a94:	4a4a      	ldr	r2, [pc, #296]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a9a:	6053      	str	r3, [r2, #4]
 8009a9c:	e02e      	b.n	8009afc <HAL_RCC_OscConfig+0x434>
 8009a9e:	4b48      	ldr	r3, [pc, #288]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	069b      	lsls	r3, r3, #26
 8009aac:	4944      	ldr	r1, [pc, #272]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	604b      	str	r3, [r1, #4]
 8009ab2:	e023      	b.n	8009afc <HAL_RCC_OscConfig+0x434>
 8009ab4:	4b42      	ldr	r3, [pc, #264]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	061b      	lsls	r3, r3, #24
 8009ac2:	493f      	ldr	r1, [pc, #252]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60cb      	str	r3, [r1, #12]
 8009ac8:	e018      	b.n	8009afc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009aca:	4b3d      	ldr	r3, [pc, #244]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a3c      	ldr	r2, [pc, #240]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad6:	f7f9 fe6b 	bl	80037b0 <HAL_GetTick>
 8009ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009adc:	e008      	b.n	8009af0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ade:	f7f9 fe67 	bl	80037b0 <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d901      	bls.n	8009af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	e23d      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009af0:	4b33      	ldr	r3, [pc, #204]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1f0      	bne.n	8009ade <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0308 	and.w	r3, r3, #8
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d036      	beq.n	8009b76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d019      	beq.n	8009b44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b10:	4b2b      	ldr	r3, [pc, #172]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b14:	4a2a      	ldr	r2, [pc, #168]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009b16:	f043 0301 	orr.w	r3, r3, #1
 8009b1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b1c:	f7f9 fe48 	bl	80037b0 <HAL_GetTick>
 8009b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b22:	e008      	b.n	8009b36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b24:	f7f9 fe44 	bl	80037b0 <HAL_GetTick>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d901      	bls.n	8009b36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e21a      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b36:	4b22      	ldr	r3, [pc, #136]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0f0      	beq.n	8009b24 <HAL_RCC_OscConfig+0x45c>
 8009b42:	e018      	b.n	8009b76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b44:	4b1e      	ldr	r3, [pc, #120]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b48:	4a1d      	ldr	r2, [pc, #116]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009b4a:	f023 0301 	bic.w	r3, r3, #1
 8009b4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b50:	f7f9 fe2e 	bl	80037b0 <HAL_GetTick>
 8009b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b58:	f7f9 fe2a 	bl	80037b0 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e200      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b6a:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f0      	bne.n	8009b58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d039      	beq.n	8009bf6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01c      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a0c      	ldr	r2, [pc, #48]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b96:	f7f9 fe0b 	bl	80037b0 <HAL_GetTick>
 8009b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b9c:	e008      	b.n	8009bb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b9e:	f7f9 fe07 	bl	80037b0 <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d901      	bls.n	8009bb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e1dd      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009bb0:	4b03      	ldr	r3, [pc, #12]	; (8009bc0 <HAL_RCC_OscConfig+0x4f8>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0f0      	beq.n	8009b9e <HAL_RCC_OscConfig+0x4d6>
 8009bbc:	e01b      	b.n	8009bf6 <HAL_RCC_OscConfig+0x52e>
 8009bbe:	bf00      	nop
 8009bc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009bc4:	4b9b      	ldr	r3, [pc, #620]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a9a      	ldr	r2, [pc, #616]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bd0:	f7f9 fdee 	bl	80037b0 <HAL_GetTick>
 8009bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bd6:	e008      	b.n	8009bea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bd8:	f7f9 fdea 	bl	80037b0 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d901      	bls.n	8009bea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e1c0      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bea:	4b92      	ldr	r3, [pc, #584]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1f0      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0304 	and.w	r3, r3, #4
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 8081 	beq.w	8009d06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c04:	4b8c      	ldr	r3, [pc, #560]	; (8009e38 <HAL_RCC_OscConfig+0x770>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a8b      	ldr	r2, [pc, #556]	; (8009e38 <HAL_RCC_OscConfig+0x770>)
 8009c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c10:	f7f9 fdce 	bl	80037b0 <HAL_GetTick>
 8009c14:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c16:	e008      	b.n	8009c2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c18:	f7f9 fdca 	bl	80037b0 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	2b64      	cmp	r3, #100	; 0x64
 8009c24:	d901      	bls.n	8009c2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e1a0      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c2a:	4b83      	ldr	r3, [pc, #524]	; (8009e38 <HAL_RCC_OscConfig+0x770>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0f0      	beq.n	8009c18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d106      	bne.n	8009c4c <HAL_RCC_OscConfig+0x584>
 8009c3e:	4b7d      	ldr	r3, [pc, #500]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c42:	4a7c      	ldr	r2, [pc, #496]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c44:	f043 0301 	orr.w	r3, r3, #1
 8009c48:	6713      	str	r3, [r2, #112]	; 0x70
 8009c4a:	e02d      	b.n	8009ca8 <HAL_RCC_OscConfig+0x5e0>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10c      	bne.n	8009c6e <HAL_RCC_OscConfig+0x5a6>
 8009c54:	4b77      	ldr	r3, [pc, #476]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c58:	4a76      	ldr	r2, [pc, #472]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c5a:	f023 0301 	bic.w	r3, r3, #1
 8009c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c60:	4b74      	ldr	r3, [pc, #464]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c64:	4a73      	ldr	r2, [pc, #460]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c66:	f023 0304 	bic.w	r3, r3, #4
 8009c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c6c:	e01c      	b.n	8009ca8 <HAL_RCC_OscConfig+0x5e0>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	2b05      	cmp	r3, #5
 8009c74:	d10c      	bne.n	8009c90 <HAL_RCC_OscConfig+0x5c8>
 8009c76:	4b6f      	ldr	r3, [pc, #444]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	4a6e      	ldr	r2, [pc, #440]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c7c:	f043 0304 	orr.w	r3, r3, #4
 8009c80:	6713      	str	r3, [r2, #112]	; 0x70
 8009c82:	4b6c      	ldr	r3, [pc, #432]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c86:	4a6b      	ldr	r2, [pc, #428]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c88:	f043 0301 	orr.w	r3, r3, #1
 8009c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c8e:	e00b      	b.n	8009ca8 <HAL_RCC_OscConfig+0x5e0>
 8009c90:	4b68      	ldr	r3, [pc, #416]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c94:	4a67      	ldr	r2, [pc, #412]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c96:	f023 0301 	bic.w	r3, r3, #1
 8009c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c9c:	4b65      	ldr	r3, [pc, #404]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca0:	4a64      	ldr	r2, [pc, #400]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009ca2:	f023 0304 	bic.w	r3, r3, #4
 8009ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d015      	beq.n	8009cdc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb0:	f7f9 fd7e 	bl	80037b0 <HAL_GetTick>
 8009cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cb6:	e00a      	b.n	8009cce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cb8:	f7f9 fd7a 	bl	80037b0 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e14e      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cce:	4b59      	ldr	r3, [pc, #356]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0ee      	beq.n	8009cb8 <HAL_RCC_OscConfig+0x5f0>
 8009cda:	e014      	b.n	8009d06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cdc:	f7f9 fd68 	bl	80037b0 <HAL_GetTick>
 8009ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ce2:	e00a      	b.n	8009cfa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ce4:	f7f9 fd64 	bl	80037b0 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d901      	bls.n	8009cfa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e138      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cfa:	4b4e      	ldr	r3, [pc, #312]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfe:	f003 0302 	and.w	r3, r3, #2
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1ee      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 812d 	beq.w	8009f6a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d10:	4b48      	ldr	r3, [pc, #288]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d18:	2b18      	cmp	r3, #24
 8009d1a:	f000 80bd 	beq.w	8009e98 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	f040 809e 	bne.w	8009e64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d28:	4b42      	ldr	r3, [pc, #264]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a41      	ldr	r2, [pc, #260]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d34:	f7f9 fd3c 	bl	80037b0 <HAL_GetTick>
 8009d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d3a:	e008      	b.n	8009d4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d3c:	f7f9 fd38 	bl	80037b0 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d901      	bls.n	8009d4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e10e      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d4e:	4b39      	ldr	r3, [pc, #228]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1f0      	bne.n	8009d3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d5a:	4b36      	ldr	r3, [pc, #216]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d5e:	4b37      	ldr	r3, [pc, #220]	; (8009e3c <HAL_RCC_OscConfig+0x774>)
 8009d60:	4013      	ands	r3, r2
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d6a:	0112      	lsls	r2, r2, #4
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	4931      	ldr	r1, [pc, #196]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	628b      	str	r3, [r1, #40]	; 0x28
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d82:	3b01      	subs	r3, #1
 8009d84:	025b      	lsls	r3, r3, #9
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	041b      	lsls	r3, r3, #16
 8009d92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d96:	431a      	orrs	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	061b      	lsls	r3, r3, #24
 8009da0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009da4:	4923      	ldr	r1, [pc, #140]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009daa:	4b22      	ldr	r3, [pc, #136]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	4a21      	ldr	r2, [pc, #132]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009db0:	f023 0301 	bic.w	r3, r3, #1
 8009db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009db6:	4b1f      	ldr	r3, [pc, #124]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dba:	4b21      	ldr	r3, [pc, #132]	; (8009e40 <HAL_RCC_OscConfig+0x778>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009dc2:	00d2      	lsls	r2, r2, #3
 8009dc4:	491b      	ldr	r1, [pc, #108]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009dca:	4b1a      	ldr	r3, [pc, #104]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	f023 020c 	bic.w	r2, r3, #12
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	4917      	ldr	r1, [pc, #92]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ddc:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de0:	f023 0202 	bic.w	r2, r3, #2
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de8:	4912      	ldr	r1, [pc, #72]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009dee:	4b11      	ldr	r3, [pc, #68]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df2:	4a10      	ldr	r2, [pc, #64]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dfa:	4b0e      	ldr	r3, [pc, #56]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	4a0d      	ldr	r2, [pc, #52]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e06:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0a:	4a0a      	ldr	r2, [pc, #40]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009e12:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	4a07      	ldr	r2, [pc, #28]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009e18:	f043 0301 	orr.w	r3, r3, #1
 8009e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e1e:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a04      	ldr	r2, [pc, #16]	; (8009e34 <HAL_RCC_OscConfig+0x76c>)
 8009e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2a:	f7f9 fcc1 	bl	80037b0 <HAL_GetTick>
 8009e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e30:	e011      	b.n	8009e56 <HAL_RCC_OscConfig+0x78e>
 8009e32:	bf00      	nop
 8009e34:	58024400 	.word	0x58024400
 8009e38:	58024800 	.word	0x58024800
 8009e3c:	fffffc0c 	.word	0xfffffc0c
 8009e40:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e44:	f7f9 fcb4 	bl	80037b0 <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d901      	bls.n	8009e56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	e08a      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e56:	4b47      	ldr	r3, [pc, #284]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0f0      	beq.n	8009e44 <HAL_RCC_OscConfig+0x77c>
 8009e62:	e082      	b.n	8009f6a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e64:	4b43      	ldr	r3, [pc, #268]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a42      	ldr	r2, [pc, #264]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e70:	f7f9 fc9e 	bl	80037b0 <HAL_GetTick>
 8009e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e76:	e008      	b.n	8009e8a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e78:	f7f9 fc9a 	bl	80037b0 <HAL_GetTick>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d901      	bls.n	8009e8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e070      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e8a:	4b3a      	ldr	r3, [pc, #232]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1f0      	bne.n	8009e78 <HAL_RCC_OscConfig+0x7b0>
 8009e96:	e068      	b.n	8009f6a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e98:	4b36      	ldr	r3, [pc, #216]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e9e:	4b35      	ldr	r3, [pc, #212]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d031      	beq.n	8009f10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f003 0203 	and.w	r2, r3, #3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d12a      	bne.n	8009f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	091b      	lsrs	r3, r3, #4
 8009ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d122      	bne.n	8009f10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d11a      	bne.n	8009f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	0a5b      	lsrs	r3, r3, #9
 8009ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d111      	bne.n	8009f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	0c1b      	lsrs	r3, r3, #16
 8009ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d108      	bne.n	8009f10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	0e1b      	lsrs	r3, r3, #24
 8009f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d001      	beq.n	8009f14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e02b      	b.n	8009f6c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009f14:	4b17      	ldr	r3, [pc, #92]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f18:	08db      	lsrs	r3, r3, #3
 8009f1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d01f      	beq.n	8009f6a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009f2a:	4b12      	ldr	r3, [pc, #72]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	4a11      	ldr	r2, [pc, #68]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009f30:	f023 0301 	bic.w	r3, r3, #1
 8009f34:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f36:	f7f9 fc3b 	bl	80037b0 <HAL_GetTick>
 8009f3a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009f3c:	bf00      	nop
 8009f3e:	f7f9 fc37 	bl	80037b0 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d0f9      	beq.n	8009f3e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f4a:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <HAL_RCC_OscConfig+0x8b0>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f56:	00d2      	lsls	r2, r2, #3
 8009f58:	4906      	ldr	r1, [pc, #24]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f5e:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f62:	4a04      	ldr	r2, [pc, #16]	; (8009f74 <HAL_RCC_OscConfig+0x8ac>)
 8009f64:	f043 0301 	orr.w	r3, r3, #1
 8009f68:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3730      	adds	r7, #48	; 0x30
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	58024400 	.word	0x58024400
 8009f78:	ffff0007 	.word	0xffff0007

08009f7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e19c      	b.n	800a2ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f90:	4b8a      	ldr	r3, [pc, #552]	; (800a1bc <HAL_RCC_ClockConfig+0x240>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 030f 	and.w	r3, r3, #15
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d910      	bls.n	8009fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f9e:	4b87      	ldr	r3, [pc, #540]	; (800a1bc <HAL_RCC_ClockConfig+0x240>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f023 020f 	bic.w	r2, r3, #15
 8009fa6:	4985      	ldr	r1, [pc, #532]	; (800a1bc <HAL_RCC_ClockConfig+0x240>)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fae:	4b83      	ldr	r3, [pc, #524]	; (800a1bc <HAL_RCC_ClockConfig+0x240>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 030f 	and.w	r3, r3, #15
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d001      	beq.n	8009fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e184      	b.n	800a2ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0304 	and.w	r3, r3, #4
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d010      	beq.n	8009fee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	4b7b      	ldr	r3, [pc, #492]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d908      	bls.n	8009fee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fdc:	4b78      	ldr	r3, [pc, #480]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	4975      	ldr	r1, [pc, #468]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0308 	and.w	r3, r3, #8
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d010      	beq.n	800a01c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	695a      	ldr	r2, [r3, #20]
 8009ffe:	4b70      	ldr	r3, [pc, #448]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a006:	429a      	cmp	r2, r3
 800a008:	d908      	bls.n	800a01c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a00a:	4b6d      	ldr	r3, [pc, #436]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	496a      	ldr	r1, [pc, #424]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0310 	and.w	r3, r3, #16
 800a024:	2b00      	cmp	r3, #0
 800a026:	d010      	beq.n	800a04a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	699a      	ldr	r2, [r3, #24]
 800a02c:	4b64      	ldr	r3, [pc, #400]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a034:	429a      	cmp	r2, r3
 800a036:	d908      	bls.n	800a04a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a038:	4b61      	ldr	r3, [pc, #388]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	495e      	ldr	r1, [pc, #376]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a046:	4313      	orrs	r3, r2
 800a048:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d010      	beq.n	800a078 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	69da      	ldr	r2, [r3, #28]
 800a05a:	4b59      	ldr	r3, [pc, #356]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a062:	429a      	cmp	r2, r3
 800a064:	d908      	bls.n	800a078 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a066:	4b56      	ldr	r3, [pc, #344]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	4953      	ldr	r1, [pc, #332]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a074:	4313      	orrs	r3, r2
 800a076:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0302 	and.w	r3, r3, #2
 800a080:	2b00      	cmp	r3, #0
 800a082:	d010      	beq.n	800a0a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68da      	ldr	r2, [r3, #12]
 800a088:	4b4d      	ldr	r3, [pc, #308]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	f003 030f 	and.w	r3, r3, #15
 800a090:	429a      	cmp	r2, r3
 800a092:	d908      	bls.n	800a0a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a094:	4b4a      	ldr	r3, [pc, #296]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	f023 020f 	bic.w	r2, r3, #15
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	4947      	ldr	r1, [pc, #284]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d055      	beq.n	800a15e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a0b2:	4b43      	ldr	r3, [pc, #268]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	4940      	ldr	r1, [pc, #256]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d107      	bne.n	800a0dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0cc:	4b3c      	ldr	r3, [pc, #240]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d121      	bne.n	800a11c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e0f6      	b.n	800a2ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	d107      	bne.n	800a0f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0e4:	4b36      	ldr	r3, [pc, #216]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d115      	bne.n	800a11c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e0ea      	b.n	800a2ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d107      	bne.n	800a10c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0fc:	4b30      	ldr	r3, [pc, #192]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a104:	2b00      	cmp	r3, #0
 800a106:	d109      	bne.n	800a11c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e0de      	b.n	800a2ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a10c:	4b2c      	ldr	r3, [pc, #176]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e0d6      	b.n	800a2ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a11c:	4b28      	ldr	r3, [pc, #160]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	f023 0207 	bic.w	r2, r3, #7
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	4925      	ldr	r1, [pc, #148]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a12a:	4313      	orrs	r3, r2
 800a12c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a12e:	f7f9 fb3f 	bl	80037b0 <HAL_GetTick>
 800a132:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a134:	e00a      	b.n	800a14c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a136:	f7f9 fb3b 	bl	80037b0 <HAL_GetTick>
 800a13a:	4602      	mov	r2, r0
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	f241 3288 	movw	r2, #5000	; 0x1388
 800a144:	4293      	cmp	r3, r2
 800a146:	d901      	bls.n	800a14c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e0be      	b.n	800a2ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a14c:	4b1c      	ldr	r3, [pc, #112]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	00db      	lsls	r3, r3, #3
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d1eb      	bne.n	800a136 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0302 	and.w	r3, r3, #2
 800a166:	2b00      	cmp	r3, #0
 800a168:	d010      	beq.n	800a18c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	4b14      	ldr	r3, [pc, #80]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	f003 030f 	and.w	r3, r3, #15
 800a176:	429a      	cmp	r2, r3
 800a178:	d208      	bcs.n	800a18c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a17a:	4b11      	ldr	r3, [pc, #68]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	f023 020f 	bic.w	r2, r3, #15
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	490e      	ldr	r1, [pc, #56]	; (800a1c0 <HAL_RCC_ClockConfig+0x244>)
 800a188:	4313      	orrs	r3, r2
 800a18a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a18c:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <HAL_RCC_ClockConfig+0x240>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d214      	bcs.n	800a1c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a19a:	4b08      	ldr	r3, [pc, #32]	; (800a1bc <HAL_RCC_ClockConfig+0x240>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f023 020f 	bic.w	r2, r3, #15
 800a1a2:	4906      	ldr	r1, [pc, #24]	; (800a1bc <HAL_RCC_ClockConfig+0x240>)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1aa:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <HAL_RCC_ClockConfig+0x240>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 030f 	and.w	r3, r3, #15
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d005      	beq.n	800a1c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e086      	b.n	800a2ca <HAL_RCC_ClockConfig+0x34e>
 800a1bc:	52002000 	.word	0x52002000
 800a1c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d010      	beq.n	800a1f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	691a      	ldr	r2, [r3, #16]
 800a1d4:	4b3f      	ldr	r3, [pc, #252]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d208      	bcs.n	800a1f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1e0:	4b3c      	ldr	r3, [pc, #240]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	4939      	ldr	r1, [pc, #228]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0308 	and.w	r3, r3, #8
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d010      	beq.n	800a220 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	695a      	ldr	r2, [r3, #20]
 800a202:	4b34      	ldr	r3, [pc, #208]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d208      	bcs.n	800a220 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a20e:	4b31      	ldr	r3, [pc, #196]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	492e      	ldr	r1, [pc, #184]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0310 	and.w	r3, r3, #16
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d010      	beq.n	800a24e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	699a      	ldr	r2, [r3, #24]
 800a230:	4b28      	ldr	r3, [pc, #160]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a232:	69db      	ldr	r3, [r3, #28]
 800a234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a238:	429a      	cmp	r2, r3
 800a23a:	d208      	bcs.n	800a24e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a23c:	4b25      	ldr	r3, [pc, #148]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	4922      	ldr	r1, [pc, #136]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a24a:	4313      	orrs	r3, r2
 800a24c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0320 	and.w	r3, r3, #32
 800a256:	2b00      	cmp	r3, #0
 800a258:	d010      	beq.n	800a27c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	69da      	ldr	r2, [r3, #28]
 800a25e:	4b1d      	ldr	r3, [pc, #116]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a266:	429a      	cmp	r2, r3
 800a268:	d208      	bcs.n	800a27c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a26a:	4b1a      	ldr	r3, [pc, #104]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	4917      	ldr	r1, [pc, #92]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a278:	4313      	orrs	r3, r2
 800a27a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a27c:	f000 f834 	bl	800a2e8 <HAL_RCC_GetSysClockFreq>
 800a280:	4602      	mov	r2, r0
 800a282:	4b14      	ldr	r3, [pc, #80]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	0a1b      	lsrs	r3, r3, #8
 800a288:	f003 030f 	and.w	r3, r3, #15
 800a28c:	4912      	ldr	r1, [pc, #72]	; (800a2d8 <HAL_RCC_ClockConfig+0x35c>)
 800a28e:	5ccb      	ldrb	r3, [r1, r3]
 800a290:	f003 031f 	and.w	r3, r3, #31
 800a294:	fa22 f303 	lsr.w	r3, r2, r3
 800a298:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a29a:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <HAL_RCC_ClockConfig+0x358>)
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	f003 030f 	and.w	r3, r3, #15
 800a2a2:	4a0d      	ldr	r2, [pc, #52]	; (800a2d8 <HAL_RCC_ClockConfig+0x35c>)
 800a2a4:	5cd3      	ldrb	r3, [r2, r3]
 800a2a6:	f003 031f 	and.w	r3, r3, #31
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b0:	4a0a      	ldr	r2, [pc, #40]	; (800a2dc <HAL_RCC_ClockConfig+0x360>)
 800a2b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2b4:	4a0a      	ldr	r2, [pc, #40]	; (800a2e0 <HAL_RCC_ClockConfig+0x364>)
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a2ba:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <HAL_RCC_ClockConfig+0x368>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7f8 ffae 	bl	8003220 <HAL_InitTick>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	58024400 	.word	0x58024400
 800a2d8:	080166ac 	.word	0x080166ac
 800a2dc:	24000090 	.word	0x24000090
 800a2e0:	2400008c 	.word	0x2400008c
 800a2e4:	24000094 	.word	0x24000094

0800a2e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b089      	sub	sp, #36	; 0x24
 800a2ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2ee:	4bb3      	ldr	r3, [pc, #716]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2f6:	2b18      	cmp	r3, #24
 800a2f8:	f200 8155 	bhi.w	800a5a6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a2fc:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a302:	bf00      	nop
 800a304:	0800a369 	.word	0x0800a369
 800a308:	0800a5a7 	.word	0x0800a5a7
 800a30c:	0800a5a7 	.word	0x0800a5a7
 800a310:	0800a5a7 	.word	0x0800a5a7
 800a314:	0800a5a7 	.word	0x0800a5a7
 800a318:	0800a5a7 	.word	0x0800a5a7
 800a31c:	0800a5a7 	.word	0x0800a5a7
 800a320:	0800a5a7 	.word	0x0800a5a7
 800a324:	0800a38f 	.word	0x0800a38f
 800a328:	0800a5a7 	.word	0x0800a5a7
 800a32c:	0800a5a7 	.word	0x0800a5a7
 800a330:	0800a5a7 	.word	0x0800a5a7
 800a334:	0800a5a7 	.word	0x0800a5a7
 800a338:	0800a5a7 	.word	0x0800a5a7
 800a33c:	0800a5a7 	.word	0x0800a5a7
 800a340:	0800a5a7 	.word	0x0800a5a7
 800a344:	0800a395 	.word	0x0800a395
 800a348:	0800a5a7 	.word	0x0800a5a7
 800a34c:	0800a5a7 	.word	0x0800a5a7
 800a350:	0800a5a7 	.word	0x0800a5a7
 800a354:	0800a5a7 	.word	0x0800a5a7
 800a358:	0800a5a7 	.word	0x0800a5a7
 800a35c:	0800a5a7 	.word	0x0800a5a7
 800a360:	0800a5a7 	.word	0x0800a5a7
 800a364:	0800a39b 	.word	0x0800a39b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a368:	4b94      	ldr	r3, [pc, #592]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0320 	and.w	r3, r3, #32
 800a370:	2b00      	cmp	r3, #0
 800a372:	d009      	beq.n	800a388 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a374:	4b91      	ldr	r3, [pc, #580]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	08db      	lsrs	r3, r3, #3
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	4a90      	ldr	r2, [pc, #576]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a380:	fa22 f303 	lsr.w	r3, r2, r3
 800a384:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a386:	e111      	b.n	800a5ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a388:	4b8d      	ldr	r3, [pc, #564]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a38a:	61bb      	str	r3, [r7, #24]
      break;
 800a38c:	e10e      	b.n	800a5ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a38e:	4b8d      	ldr	r3, [pc, #564]	; (800a5c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a390:	61bb      	str	r3, [r7, #24]
      break;
 800a392:	e10b      	b.n	800a5ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a394:	4b8c      	ldr	r3, [pc, #560]	; (800a5c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a396:	61bb      	str	r3, [r7, #24]
      break;
 800a398:	e108      	b.n	800a5ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a39a:	4b88      	ldr	r3, [pc, #544]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a39e:	f003 0303 	and.w	r3, r3, #3
 800a3a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a3a4:	4b85      	ldr	r3, [pc, #532]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a8:	091b      	lsrs	r3, r3, #4
 800a3aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a3b0:	4b82      	ldr	r3, [pc, #520]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a3ba:	4b80      	ldr	r3, [pc, #512]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3be:	08db      	lsrs	r3, r3, #3
 800a3c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 80e1 	beq.w	800a5a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	f000 8083 	beq.w	800a4ec <HAL_RCC_GetSysClockFreq+0x204>
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	f200 80a1 	bhi.w	800a530 <HAL_RCC_GetSysClockFreq+0x248>
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <HAL_RCC_GetSysClockFreq+0x114>
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d056      	beq.n	800a4a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a3fa:	e099      	b.n	800a530 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3fc:	4b6f      	ldr	r3, [pc, #444]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0320 	and.w	r3, r3, #32
 800a404:	2b00      	cmp	r3, #0
 800a406:	d02d      	beq.n	800a464 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a408:	4b6c      	ldr	r3, [pc, #432]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	08db      	lsrs	r3, r3, #3
 800a40e:	f003 0303 	and.w	r3, r3, #3
 800a412:	4a6b      	ldr	r2, [pc, #428]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a414:	fa22 f303 	lsr.w	r3, r2, r3
 800a418:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	ee07 3a90 	vmov	s15, r3
 800a420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a432:	4b62      	ldr	r3, [pc, #392]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a43a:	ee07 3a90 	vmov	s15, r3
 800a43e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a442:	ed97 6a02 	vldr	s12, [r7, #8]
 800a446:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a5cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a44a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a44e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a45a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a45e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a462:	e087      	b.n	800a574 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	ee07 3a90 	vmov	s15, r3
 800a46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a5d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a476:	4b51      	ldr	r3, [pc, #324]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47e:	ee07 3a90 	vmov	s15, r3
 800a482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a486:	ed97 6a02 	vldr	s12, [r7, #8]
 800a48a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a5cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a48e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a49a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4a6:	e065      	b.n	800a574 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	ee07 3a90 	vmov	s15, r3
 800a4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a5d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a4b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ba:	4b40      	ldr	r3, [pc, #256]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a5cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4ea:	e043      	b.n	800a574 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a5d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a4fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fe:	4b2f      	ldr	r3, [pc, #188]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a506:	ee07 3a90 	vmov	s15, r3
 800a50a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a512:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a5cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a51a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a52a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a52e:	e021      	b.n	800a574 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a5d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a53e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a542:	4b1e      	ldr	r3, [pc, #120]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54a:	ee07 3a90 	vmov	s15, r3
 800a54e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a552:	ed97 6a02 	vldr	s12, [r7, #8]
 800a556:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a5cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a55a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a572:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a574:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a578:	0a5b      	lsrs	r3, r3, #9
 800a57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a57e:	3301      	adds	r3, #1
 800a580:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	ee07 3a90 	vmov	s15, r3
 800a588:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a58c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a598:	ee17 3a90 	vmov	r3, s15
 800a59c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a59e:	e005      	b.n	800a5ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	61bb      	str	r3, [r7, #24]
      break;
 800a5a4:	e002      	b.n	800a5ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a5a6:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a5a8:	61bb      	str	r3, [r7, #24]
      break;
 800a5aa:	bf00      	nop
  }

  return sysclockfreq;
 800a5ac:	69bb      	ldr	r3, [r7, #24]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3724      	adds	r7, #36	; 0x24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	58024400 	.word	0x58024400
 800a5c0:	03d09000 	.word	0x03d09000
 800a5c4:	003d0900 	.word	0x003d0900
 800a5c8:	017d7840 	.word	0x017d7840
 800a5cc:	46000000 	.word	0x46000000
 800a5d0:	4c742400 	.word	0x4c742400
 800a5d4:	4a742400 	.word	0x4a742400
 800a5d8:	4bbebc20 	.word	0x4bbebc20

0800a5dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a5e2:	f7ff fe81 	bl	800a2e8 <HAL_RCC_GetSysClockFreq>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	4b10      	ldr	r3, [pc, #64]	; (800a62c <HAL_RCC_GetHCLKFreq+0x50>)
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	0a1b      	lsrs	r3, r3, #8
 800a5ee:	f003 030f 	and.w	r3, r3, #15
 800a5f2:	490f      	ldr	r1, [pc, #60]	; (800a630 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5f4:	5ccb      	ldrb	r3, [r1, r3]
 800a5f6:	f003 031f 	and.w	r3, r3, #31
 800a5fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <HAL_RCC_GetHCLKFreq+0x50>)
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	f003 030f 	and.w	r3, r3, #15
 800a608:	4a09      	ldr	r2, [pc, #36]	; (800a630 <HAL_RCC_GetHCLKFreq+0x54>)
 800a60a:	5cd3      	ldrb	r3, [r2, r3]
 800a60c:	f003 031f 	and.w	r3, r3, #31
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	fa22 f303 	lsr.w	r3, r2, r3
 800a616:	4a07      	ldr	r2, [pc, #28]	; (800a634 <HAL_RCC_GetHCLKFreq+0x58>)
 800a618:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a61a:	4a07      	ldr	r2, [pc, #28]	; (800a638 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a620:	4b04      	ldr	r3, [pc, #16]	; (800a634 <HAL_RCC_GetHCLKFreq+0x58>)
 800a622:	681b      	ldr	r3, [r3, #0]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	58024400 	.word	0x58024400
 800a630:	080166ac 	.word	0x080166ac
 800a634:	24000090 	.word	0x24000090
 800a638:	2400008c 	.word	0x2400008c

0800a63c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a640:	f7ff ffcc 	bl	800a5dc <HAL_RCC_GetHCLKFreq>
 800a644:	4602      	mov	r2, r0
 800a646:	4b06      	ldr	r3, [pc, #24]	; (800a660 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	091b      	lsrs	r3, r3, #4
 800a64c:	f003 0307 	and.w	r3, r3, #7
 800a650:	4904      	ldr	r1, [pc, #16]	; (800a664 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a652:	5ccb      	ldrb	r3, [r1, r3]
 800a654:	f003 031f 	and.w	r3, r3, #31
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	58024400 	.word	0x58024400
 800a664:	080166ac 	.word	0x080166ac

0800a668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a66c:	f7ff ffb6 	bl	800a5dc <HAL_RCC_GetHCLKFreq>
 800a670:	4602      	mov	r2, r0
 800a672:	4b06      	ldr	r3, [pc, #24]	; (800a68c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	0a1b      	lsrs	r3, r3, #8
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	4904      	ldr	r1, [pc, #16]	; (800a690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a67e:	5ccb      	ldrb	r3, [r1, r3]
 800a680:	f003 031f 	and.w	r3, r3, #31
 800a684:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a688:	4618      	mov	r0, r3
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	58024400 	.word	0x58024400
 800a690:	080166ac 	.word	0x080166ac

0800a694 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	223f      	movs	r2, #63	; 0x3f
 800a6a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a6a4:	4b1a      	ldr	r3, [pc, #104]	; (800a710 <HAL_RCC_GetClockConfig+0x7c>)
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	f003 0207 	and.w	r2, r3, #7
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a6b0:	4b17      	ldr	r3, [pc, #92]	; (800a710 <HAL_RCC_GetClockConfig+0x7c>)
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a6bc:	4b14      	ldr	r3, [pc, #80]	; (800a710 <HAL_RCC_GetClockConfig+0x7c>)
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	f003 020f 	and.w	r2, r3, #15
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a6c8:	4b11      	ldr	r3, [pc, #68]	; (800a710 <HAL_RCC_GetClockConfig+0x7c>)
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a6d4:	4b0e      	ldr	r3, [pc, #56]	; (800a710 <HAL_RCC_GetClockConfig+0x7c>)
 800a6d6:	69db      	ldr	r3, [r3, #28]
 800a6d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a6e0:	4b0b      	ldr	r3, [pc, #44]	; (800a710 <HAL_RCC_GetClockConfig+0x7c>)
 800a6e2:	69db      	ldr	r3, [r3, #28]
 800a6e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a6ec:	4b08      	ldr	r3, [pc, #32]	; (800a710 <HAL_RCC_GetClockConfig+0x7c>)
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a6f8:	4b06      	ldr	r3, [pc, #24]	; (800a714 <HAL_RCC_GetClockConfig+0x80>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 020f 	and.w	r2, r3, #15
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	601a      	str	r2, [r3, #0]
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	58024400 	.word	0x58024400
 800a714:	52002000 	.word	0x52002000

0800a718 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a71c:	b0ca      	sub	sp, #296	; 0x128
 800a71e:	af00      	add	r7, sp, #0
 800a720:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a724:	2300      	movs	r3, #0
 800a726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a72a:	2300      	movs	r3, #0
 800a72c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a73c:	2500      	movs	r5, #0
 800a73e:	ea54 0305 	orrs.w	r3, r4, r5
 800a742:	d049      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a74a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a74e:	d02f      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a754:	d828      	bhi.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a75a:	d01a      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a75c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a760:	d822      	bhi.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a76a:	d007      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a76c:	e01c      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a76e:	4bb8      	ldr	r3, [pc, #736]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a772:	4ab7      	ldr	r2, [pc, #732]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a778:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a77a:	e01a      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a780:	3308      	adds	r3, #8
 800a782:	2102      	movs	r1, #2
 800a784:	4618      	mov	r0, r3
 800a786:	f002 fb61 	bl	800ce4c <RCCEx_PLL2_Config>
 800a78a:	4603      	mov	r3, r0
 800a78c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a790:	e00f      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a796:	3328      	adds	r3, #40	; 0x28
 800a798:	2102      	movs	r1, #2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f002 fc08 	bl	800cfb0 <RCCEx_PLL3_Config>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7a6:	e004      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7ae:	e000      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a7b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a7ba:	4ba5      	ldr	r3, [pc, #660]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7c8:	4aa1      	ldr	r2, [pc, #644]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7ca:	430b      	orrs	r3, r1
 800a7cc:	6513      	str	r3, [r2, #80]	; 0x50
 800a7ce:	e003      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a7e4:	f04f 0900 	mov.w	r9, #0
 800a7e8:	ea58 0309 	orrs.w	r3, r8, r9
 800a7ec:	d047      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d82a      	bhi.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a7f8:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fe:	bf00      	nop
 800a800:	0800a815 	.word	0x0800a815
 800a804:	0800a823 	.word	0x0800a823
 800a808:	0800a839 	.word	0x0800a839
 800a80c:	0800a857 	.word	0x0800a857
 800a810:	0800a857 	.word	0x0800a857
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a814:	4b8e      	ldr	r3, [pc, #568]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	4a8d      	ldr	r2, [pc, #564]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a81a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a81e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a820:	e01a      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a826:	3308      	adds	r3, #8
 800a828:	2100      	movs	r1, #0
 800a82a:	4618      	mov	r0, r3
 800a82c:	f002 fb0e 	bl	800ce4c <RCCEx_PLL2_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a836:	e00f      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a83c:	3328      	adds	r3, #40	; 0x28
 800a83e:	2100      	movs	r1, #0
 800a840:	4618      	mov	r0, r3
 800a842:	f002 fbb5 	bl	800cfb0 <RCCEx_PLL3_Config>
 800a846:	4603      	mov	r3, r0
 800a848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a84c:	e004      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a854:	e000      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a856:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a860:	4b7b      	ldr	r3, [pc, #492]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a864:	f023 0107 	bic.w	r1, r3, #7
 800a868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a86e:	4a78      	ldr	r2, [pc, #480]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a870:	430b      	orrs	r3, r1
 800a872:	6513      	str	r3, [r2, #80]	; 0x50
 800a874:	e003      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a87a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a88a:	f04f 0b00 	mov.w	fp, #0
 800a88e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a892:	d04c      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a89a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a89e:	d030      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a8a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8a4:	d829      	bhi.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a8a6:	2bc0      	cmp	r3, #192	; 0xc0
 800a8a8:	d02d      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a8aa:	2bc0      	cmp	r3, #192	; 0xc0
 800a8ac:	d825      	bhi.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a8ae:	2b80      	cmp	r3, #128	; 0x80
 800a8b0:	d018      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a8b2:	2b80      	cmp	r3, #128	; 0x80
 800a8b4:	d821      	bhi.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	d007      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a8be:	e01c      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8c0:	4b63      	ldr	r3, [pc, #396]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c4:	4a62      	ldr	r2, [pc, #392]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a8cc:	e01c      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f002 fab8 	bl	800ce4c <RCCEx_PLL2_Config>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a8e2:	e011      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e8:	3328      	adds	r3, #40	; 0x28
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f002 fb5f 	bl	800cfb0 <RCCEx_PLL3_Config>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a8f8:	e006      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a900:	e002      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a902:	bf00      	nop
 800a904:	e000      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a906:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10a      	bne.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a910:	4b4f      	ldr	r3, [pc, #316]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a914:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91e:	4a4c      	ldr	r2, [pc, #304]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a920:	430b      	orrs	r3, r1
 800a922:	6513      	str	r3, [r2, #80]	; 0x50
 800a924:	e003      	b.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a92a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a93a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a93e:	2300      	movs	r3, #0
 800a940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a944:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a948:	460b      	mov	r3, r1
 800a94a:	4313      	orrs	r3, r2
 800a94c:	d053      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a952:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a95a:	d035      	beq.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a95c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a960:	d82e      	bhi.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a962:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a966:	d031      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a968:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a96c:	d828      	bhi.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a96e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a972:	d01a      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a978:	d822      	bhi.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a97e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a982:	d007      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a984:	e01c      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a986:	4b32      	ldr	r3, [pc, #200]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98a:	4a31      	ldr	r2, [pc, #196]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a98c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a992:	e01c      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a998:	3308      	adds	r3, #8
 800a99a:	2100      	movs	r1, #0
 800a99c:	4618      	mov	r0, r3
 800a99e:	f002 fa55 	bl	800ce4c <RCCEx_PLL2_Config>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a9a8:	e011      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ae:	3328      	adds	r3, #40	; 0x28
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f002 fafc 	bl	800cfb0 <RCCEx_PLL3_Config>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9be:	e006      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9c6:	e002      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a9c8:	bf00      	nop
 800a9ca:	e000      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a9cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10b      	bne.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a9d6:	4b1e      	ldr	r3, [pc, #120]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9da:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9e6:	4a1a      	ldr	r2, [pc, #104]	; (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9e8:	430b      	orrs	r3, r1
 800a9ea:	6593      	str	r3, [r2, #88]	; 0x58
 800a9ec:	e003      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aa02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aa06:	2300      	movs	r3, #0
 800aa08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aa0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800aa10:	460b      	mov	r3, r1
 800aa12:	4313      	orrs	r3, r2
 800aa14:	d056      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aa16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa22:	d038      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aa24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa28:	d831      	bhi.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa2e:	d034      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800aa30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa34:	d82b      	bhi.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa3a:	d01d      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aa3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa40:	d825      	bhi.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d006      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800aa46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa4a:	d00a      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800aa4c:	e01f      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa4e:	bf00      	nop
 800aa50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa54:	4ba2      	ldr	r3, [pc, #648]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa58:	4aa1      	ldr	r2, [pc, #644]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa60:	e01c      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa66:	3308      	adds	r3, #8
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f002 f9ee 	bl	800ce4c <RCCEx_PLL2_Config>
 800aa70:	4603      	mov	r3, r0
 800aa72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa76:	e011      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa7c:	3328      	adds	r3, #40	; 0x28
 800aa7e:	2100      	movs	r1, #0
 800aa80:	4618      	mov	r0, r3
 800aa82:	f002 fa95 	bl	800cfb0 <RCCEx_PLL3_Config>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa8c:	e006      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa94:	e002      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aa96:	bf00      	nop
 800aa98:	e000      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aa9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10b      	bne.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aaa4:	4b8e      	ldr	r3, [pc, #568]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aaa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aaac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aab4:	4a8a      	ldr	r2, [pc, #552]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aab6:	430b      	orrs	r3, r1
 800aab8:	6593      	str	r3, [r2, #88]	; 0x58
 800aaba:	e003      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aabc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aad4:	2300      	movs	r3, #0
 800aad6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aada:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aade:	460b      	mov	r3, r1
 800aae0:	4313      	orrs	r3, r2
 800aae2:	d03a      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800aae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaea:	2b30      	cmp	r3, #48	; 0x30
 800aaec:	d01f      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800aaee:	2b30      	cmp	r3, #48	; 0x30
 800aaf0:	d819      	bhi.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aaf2:	2b20      	cmp	r3, #32
 800aaf4:	d00c      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	d815      	bhi.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d019      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800aafe:	2b10      	cmp	r3, #16
 800ab00:	d111      	bne.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab02:	4b77      	ldr	r3, [pc, #476]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	4a76      	ldr	r2, [pc, #472]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ab0e:	e011      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab14:	3308      	adds	r3, #8
 800ab16:	2102      	movs	r1, #2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f002 f997 	bl	800ce4c <RCCEx_PLL2_Config>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ab24:	e006      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab2c:	e002      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ab2e:	bf00      	nop
 800ab30:	e000      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ab32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab3c:	4b68      	ldr	r3, [pc, #416]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ab44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4a:	4a65      	ldr	r2, [pc, #404]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab4c:	430b      	orrs	r3, r1
 800ab4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab50:	e003      	b.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ab66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4313      	orrs	r3, r2
 800ab78:	d051      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ab7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab84:	d035      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ab86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab8a:	d82e      	bhi.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab90:	d031      	beq.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ab92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab96:	d828      	bhi.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab9c:	d01a      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ab9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aba2:	d822      	bhi.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800aba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abac:	d007      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800abae:	e01c      	b.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb0:	4b4b      	ldr	r3, [pc, #300]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	4a4a      	ldr	r2, [pc, #296]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abbc:	e01c      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc2:	3308      	adds	r3, #8
 800abc4:	2100      	movs	r1, #0
 800abc6:	4618      	mov	r0, r3
 800abc8:	f002 f940 	bl	800ce4c <RCCEx_PLL2_Config>
 800abcc:	4603      	mov	r3, r0
 800abce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abd2:	e011      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abd8:	3328      	adds	r3, #40	; 0x28
 800abda:	2100      	movs	r1, #0
 800abdc:	4618      	mov	r0, r3
 800abde:	f002 f9e7 	bl	800cfb0 <RCCEx_PLL3_Config>
 800abe2:	4603      	mov	r3, r0
 800abe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abe8:	e006      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abf0:	e002      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800abf2:	bf00      	nop
 800abf4:	e000      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800abf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10a      	bne.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac00:	4b37      	ldr	r3, [pc, #220]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ac08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac0e:	4a34      	ldr	r2, [pc, #208]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac10:	430b      	orrs	r3, r1
 800ac12:	6513      	str	r3, [r2, #80]	; 0x50
 800ac14:	e003      	b.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ac2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac38:	460b      	mov	r3, r1
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	d056      	beq.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ac3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac48:	d033      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ac4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac4e:	d82c      	bhi.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac54:	d02f      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ac56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac5a:	d826      	bhi.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac60:	d02b      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ac62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac66:	d820      	bhi.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac6c:	d012      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ac6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac72:	d81a      	bhi.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d022      	beq.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ac78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac7c:	d115      	bne.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac82:	3308      	adds	r3, #8
 800ac84:	2101      	movs	r1, #1
 800ac86:	4618      	mov	r0, r3
 800ac88:	f002 f8e0 	bl	800ce4c <RCCEx_PLL2_Config>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac92:	e015      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac98:	3328      	adds	r3, #40	; 0x28
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f002 f987 	bl	800cfb0 <RCCEx_PLL3_Config>
 800aca2:	4603      	mov	r3, r0
 800aca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aca8:	e00a      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acb0:	e006      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800acb2:	bf00      	nop
 800acb4:	e004      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800acb6:	bf00      	nop
 800acb8:	e002      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800acba:	bf00      	nop
 800acbc:	e000      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800acbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10d      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800acc8:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800accc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800acd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acd6:	4a02      	ldr	r2, [pc, #8]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acd8:	430b      	orrs	r3, r1
 800acda:	6513      	str	r3, [r2, #80]	; 0x50
 800acdc:	e006      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800acde:	bf00      	nop
 800ace0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ace8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800acec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800acf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800acfc:	2300      	movs	r3, #0
 800acfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	d055      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ad0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad18:	d033      	beq.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ad1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad1e:	d82c      	bhi.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad24:	d02f      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ad26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad2a:	d826      	bhi.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad30:	d02b      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ad32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad36:	d820      	bhi.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad3c:	d012      	beq.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ad3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad42:	d81a      	bhi.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d022      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ad48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad4c:	d115      	bne.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad52:	3308      	adds	r3, #8
 800ad54:	2101      	movs	r1, #1
 800ad56:	4618      	mov	r0, r3
 800ad58:	f002 f878 	bl	800ce4c <RCCEx_PLL2_Config>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad62:	e015      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad68:	3328      	adds	r3, #40	; 0x28
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f002 f91f 	bl	800cfb0 <RCCEx_PLL3_Config>
 800ad72:	4603      	mov	r3, r0
 800ad74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad78:	e00a      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad80:	e006      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad82:	bf00      	nop
 800ad84:	e004      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad86:	bf00      	nop
 800ad88:	e002      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad8a:	bf00      	nop
 800ad8c:	e000      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10b      	bne.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad98:	4ba3      	ldr	r3, [pc, #652]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad9c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ada0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ada8:	4a9f      	ldr	r2, [pc, #636]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adaa:	430b      	orrs	r3, r1
 800adac:	6593      	str	r3, [r2, #88]	; 0x58
 800adae:	e003      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800adb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800adc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800adc8:	2300      	movs	r3, #0
 800adca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800adce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800add2:	460b      	mov	r3, r1
 800add4:	4313      	orrs	r3, r2
 800add6:	d037      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800add8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800addc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade2:	d00e      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ade4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade8:	d816      	bhi.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800adea:	2b00      	cmp	r3, #0
 800adec:	d018      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800adee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adf2:	d111      	bne.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adf4:	4b8c      	ldr	r3, [pc, #560]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf8:	4a8b      	ldr	r2, [pc, #556]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae00:	e00f      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae06:	3308      	adds	r3, #8
 800ae08:	2101      	movs	r1, #1
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f002 f81e 	bl	800ce4c <RCCEx_PLL2_Config>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae16:	e004      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae1e:	e000      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ae20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10a      	bne.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae2a:	4b7f      	ldr	r3, [pc, #508]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae2e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae38:	4a7b      	ldr	r2, [pc, #492]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae3a:	430b      	orrs	r3, r1
 800ae3c:	6513      	str	r3, [r2, #80]	; 0x50
 800ae3e:	e003      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ae54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4313      	orrs	r3, r2
 800ae66:	d039      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ae68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae6e:	2b03      	cmp	r3, #3
 800ae70:	d81c      	bhi.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ae72:	a201      	add	r2, pc, #4	; (adr r2, 800ae78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ae74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae78:	0800aeb5 	.word	0x0800aeb5
 800ae7c:	0800ae89 	.word	0x0800ae89
 800ae80:	0800ae97 	.word	0x0800ae97
 800ae84:	0800aeb5 	.word	0x0800aeb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae88:	4b67      	ldr	r3, [pc, #412]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	4a66      	ldr	r2, [pc, #408]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae94:	e00f      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	2102      	movs	r1, #2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f001 ffd4 	bl	800ce4c <RCCEx_PLL2_Config>
 800aea4:	4603      	mov	r3, r0
 800aea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aeaa:	e004      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aeb2:	e000      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800aeb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10a      	bne.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aebe:	4b5a      	ldr	r3, [pc, #360]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec2:	f023 0103 	bic.w	r1, r3, #3
 800aec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aecc:	4a56      	ldr	r2, [pc, #344]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aece:	430b      	orrs	r3, r1
 800aed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aed2:	e003      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aed8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800aee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aeec:	2300      	movs	r3, #0
 800aeee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aef2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800aef6:	460b      	mov	r3, r1
 800aef8:	4313      	orrs	r3, r2
 800aefa:	f000 809f 	beq.w	800b03c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aefe:	4b4b      	ldr	r3, [pc, #300]	; (800b02c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a4a      	ldr	r2, [pc, #296]	; (800b02c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af0a:	f7f8 fc51 	bl	80037b0 <HAL_GetTick>
 800af0e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af12:	e00b      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af14:	f7f8 fc4c 	bl	80037b0 <HAL_GetTick>
 800af18:	4602      	mov	r2, r0
 800af1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	2b64      	cmp	r3, #100	; 0x64
 800af22:	d903      	bls.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800af24:	2303      	movs	r3, #3
 800af26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af2a:	e005      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af2c:	4b3f      	ldr	r3, [pc, #252]	; (800b02c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0ed      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800af38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d179      	bne.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af40:	4b39      	ldr	r3, [pc, #228]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af4c:	4053      	eors	r3, r2
 800af4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af52:	2b00      	cmp	r3, #0
 800af54:	d015      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af56:	4b34      	ldr	r3, [pc, #208]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af62:	4b31      	ldr	r3, [pc, #196]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af66:	4a30      	ldr	r2, [pc, #192]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af6c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af6e:	4b2e      	ldr	r3, [pc, #184]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af72:	4a2d      	ldr	r2, [pc, #180]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af78:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af7a:	4a2b      	ldr	r2, [pc, #172]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af8e:	d118      	bne.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af90:	f7f8 fc0e 	bl	80037b0 <HAL_GetTick>
 800af94:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af98:	e00d      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af9a:	f7f8 fc09 	bl	80037b0 <HAL_GetTick>
 800af9e:	4602      	mov	r2, r0
 800afa0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800afa4:	1ad2      	subs	r2, r2, r3
 800afa6:	f241 3388 	movw	r3, #5000	; 0x1388
 800afaa:	429a      	cmp	r2, r3
 800afac:	d903      	bls.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800afb4:	e005      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afb6:	4b1c      	ldr	r3, [pc, #112]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afba:	f003 0302 	and.w	r3, r3, #2
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0eb      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800afc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d129      	bne.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afda:	d10e      	bne.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800afdc:	4b12      	ldr	r3, [pc, #72]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800afe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afec:	091a      	lsrs	r2, r3, #4
 800afee:	4b10      	ldr	r3, [pc, #64]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800aff0:	4013      	ands	r3, r2
 800aff2:	4a0d      	ldr	r2, [pc, #52]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aff4:	430b      	orrs	r3, r1
 800aff6:	6113      	str	r3, [r2, #16]
 800aff8:	e005      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800affa:	4b0b      	ldr	r3, [pc, #44]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	4a0a      	ldr	r2, [pc, #40]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b000:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b004:	6113      	str	r3, [r2, #16]
 800b006:	4b08      	ldr	r3, [pc, #32]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b008:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b00e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b016:	4a04      	ldr	r2, [pc, #16]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b018:	430b      	orrs	r3, r1
 800b01a:	6713      	str	r3, [r2, #112]	; 0x70
 800b01c:	e00e      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b01e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b026:	e009      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b028:	58024400 	.word	0x58024400
 800b02c:	58024800 	.word	0x58024800
 800b030:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	f002 0301 	and.w	r3, r2, #1
 800b048:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b04c:	2300      	movs	r3, #0
 800b04e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b052:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b056:	460b      	mov	r3, r1
 800b058:	4313      	orrs	r3, r2
 800b05a:	f000 8089 	beq.w	800b170 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b064:	2b28      	cmp	r3, #40	; 0x28
 800b066:	d86b      	bhi.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b068:	a201      	add	r2, pc, #4	; (adr r2, 800b070 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06e:	bf00      	nop
 800b070:	0800b149 	.word	0x0800b149
 800b074:	0800b141 	.word	0x0800b141
 800b078:	0800b141 	.word	0x0800b141
 800b07c:	0800b141 	.word	0x0800b141
 800b080:	0800b141 	.word	0x0800b141
 800b084:	0800b141 	.word	0x0800b141
 800b088:	0800b141 	.word	0x0800b141
 800b08c:	0800b141 	.word	0x0800b141
 800b090:	0800b115 	.word	0x0800b115
 800b094:	0800b141 	.word	0x0800b141
 800b098:	0800b141 	.word	0x0800b141
 800b09c:	0800b141 	.word	0x0800b141
 800b0a0:	0800b141 	.word	0x0800b141
 800b0a4:	0800b141 	.word	0x0800b141
 800b0a8:	0800b141 	.word	0x0800b141
 800b0ac:	0800b141 	.word	0x0800b141
 800b0b0:	0800b12b 	.word	0x0800b12b
 800b0b4:	0800b141 	.word	0x0800b141
 800b0b8:	0800b141 	.word	0x0800b141
 800b0bc:	0800b141 	.word	0x0800b141
 800b0c0:	0800b141 	.word	0x0800b141
 800b0c4:	0800b141 	.word	0x0800b141
 800b0c8:	0800b141 	.word	0x0800b141
 800b0cc:	0800b141 	.word	0x0800b141
 800b0d0:	0800b149 	.word	0x0800b149
 800b0d4:	0800b141 	.word	0x0800b141
 800b0d8:	0800b141 	.word	0x0800b141
 800b0dc:	0800b141 	.word	0x0800b141
 800b0e0:	0800b141 	.word	0x0800b141
 800b0e4:	0800b141 	.word	0x0800b141
 800b0e8:	0800b141 	.word	0x0800b141
 800b0ec:	0800b141 	.word	0x0800b141
 800b0f0:	0800b149 	.word	0x0800b149
 800b0f4:	0800b141 	.word	0x0800b141
 800b0f8:	0800b141 	.word	0x0800b141
 800b0fc:	0800b141 	.word	0x0800b141
 800b100:	0800b141 	.word	0x0800b141
 800b104:	0800b141 	.word	0x0800b141
 800b108:	0800b141 	.word	0x0800b141
 800b10c:	0800b141 	.word	0x0800b141
 800b110:	0800b149 	.word	0x0800b149
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b118:	3308      	adds	r3, #8
 800b11a:	2101      	movs	r1, #1
 800b11c:	4618      	mov	r0, r3
 800b11e:	f001 fe95 	bl	800ce4c <RCCEx_PLL2_Config>
 800b122:	4603      	mov	r3, r0
 800b124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b128:	e00f      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12e:	3328      	adds	r3, #40	; 0x28
 800b130:	2101      	movs	r1, #1
 800b132:	4618      	mov	r0, r3
 800b134:	f001 ff3c 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b138:	4603      	mov	r3, r0
 800b13a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b13e:	e004      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b146:	e000      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b14a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b152:	4bbf      	ldr	r3, [pc, #764]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b156:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b160:	4abb      	ldr	r2, [pc, #748]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b162:	430b      	orrs	r3, r1
 800b164:	6553      	str	r3, [r2, #84]	; 0x54
 800b166:	e003      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b16c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	f002 0302 	and.w	r3, r2, #2
 800b17c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b180:	2300      	movs	r3, #0
 800b182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b186:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b18a:	460b      	mov	r3, r1
 800b18c:	4313      	orrs	r3, r2
 800b18e:	d041      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b196:	2b05      	cmp	r3, #5
 800b198:	d824      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b19a:	a201      	add	r2, pc, #4	; (adr r2, 800b1a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a0:	0800b1ed 	.word	0x0800b1ed
 800b1a4:	0800b1b9 	.word	0x0800b1b9
 800b1a8:	0800b1cf 	.word	0x0800b1cf
 800b1ac:	0800b1ed 	.word	0x0800b1ed
 800b1b0:	0800b1ed 	.word	0x0800b1ed
 800b1b4:	0800b1ed 	.word	0x0800b1ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1bc:	3308      	adds	r3, #8
 800b1be:	2101      	movs	r1, #1
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f001 fe43 	bl	800ce4c <RCCEx_PLL2_Config>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1cc:	e00f      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d2:	3328      	adds	r3, #40	; 0x28
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 feea 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1e2:	e004      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1ea:	e000      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b1ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10a      	bne.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b1f6:	4b96      	ldr	r3, [pc, #600]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1fa:	f023 0107 	bic.w	r1, r3, #7
 800b1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b204:	4a92      	ldr	r2, [pc, #584]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b206:	430b      	orrs	r3, r1
 800b208:	6553      	str	r3, [r2, #84]	; 0x54
 800b20a:	e003      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21c:	f002 0304 	and.w	r3, r2, #4
 800b220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b224:	2300      	movs	r3, #0
 800b226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b22a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b22e:	460b      	mov	r3, r1
 800b230:	4313      	orrs	r3, r2
 800b232:	d044      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b23c:	2b05      	cmp	r3, #5
 800b23e:	d825      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b240:	a201      	add	r2, pc, #4	; (adr r2, 800b248 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b246:	bf00      	nop
 800b248:	0800b295 	.word	0x0800b295
 800b24c:	0800b261 	.word	0x0800b261
 800b250:	0800b277 	.word	0x0800b277
 800b254:	0800b295 	.word	0x0800b295
 800b258:	0800b295 	.word	0x0800b295
 800b25c:	0800b295 	.word	0x0800b295
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b264:	3308      	adds	r3, #8
 800b266:	2101      	movs	r1, #1
 800b268:	4618      	mov	r0, r3
 800b26a:	f001 fdef 	bl	800ce4c <RCCEx_PLL2_Config>
 800b26e:	4603      	mov	r3, r0
 800b270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b274:	e00f      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27a:	3328      	adds	r3, #40	; 0x28
 800b27c:	2101      	movs	r1, #1
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 fe96 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b28a:	e004      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b292:	e000      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b294:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10b      	bne.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b29e:	4b6c      	ldr	r3, [pc, #432]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a2:	f023 0107 	bic.w	r1, r3, #7
 800b2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2ae:	4a68      	ldr	r2, [pc, #416]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	6593      	str	r3, [r2, #88]	; 0x58
 800b2b4:	e003      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	f002 0320 	and.w	r3, r2, #32
 800b2ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	d055      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2ea:	d033      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b2ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2f0:	d82c      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2f6:	d02f      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2fc:	d826      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b302:	d02b      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b304:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b308:	d820      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b30a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b30e:	d012      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b314:	d81a      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d022      	beq.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b31a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b31e:	d115      	bne.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b324:	3308      	adds	r3, #8
 800b326:	2100      	movs	r1, #0
 800b328:	4618      	mov	r0, r3
 800b32a:	f001 fd8f 	bl	800ce4c <RCCEx_PLL2_Config>
 800b32e:	4603      	mov	r3, r0
 800b330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b334:	e015      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33a:	3328      	adds	r3, #40	; 0x28
 800b33c:	2102      	movs	r1, #2
 800b33e:	4618      	mov	r0, r3
 800b340:	f001 fe36 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b344:	4603      	mov	r3, r0
 800b346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b34a:	e00a      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b352:	e006      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b354:	bf00      	nop
 800b356:	e004      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b358:	bf00      	nop
 800b35a:	e002      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b35c:	bf00      	nop
 800b35e:	e000      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b360:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10b      	bne.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b36a:	4b39      	ldr	r3, [pc, #228]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b37a:	4a35      	ldr	r2, [pc, #212]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b37c:	430b      	orrs	r3, r1
 800b37e:	6553      	str	r3, [r2, #84]	; 0x54
 800b380:	e003      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b386:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b39a:	2300      	movs	r3, #0
 800b39c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b3a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	d058      	beq.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b3b6:	d033      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b3b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b3bc:	d82c      	bhi.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b3be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3c2:	d02f      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b3c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3c8:	d826      	bhi.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b3ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3ce:	d02b      	beq.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b3d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3d4:	d820      	bhi.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b3d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3da:	d012      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b3dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3e0:	d81a      	bhi.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d022      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b3e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3ea:	d115      	bne.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f001 fd29 	bl	800ce4c <RCCEx_PLL2_Config>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b400:	e015      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b406:	3328      	adds	r3, #40	; 0x28
 800b408:	2102      	movs	r1, #2
 800b40a:	4618      	mov	r0, r3
 800b40c:	f001 fdd0 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b410:	4603      	mov	r3, r0
 800b412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b416:	e00a      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b41e:	e006      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b420:	bf00      	nop
 800b422:	e004      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b424:	bf00      	nop
 800b426:	e002      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b428:	bf00      	nop
 800b42a:	e000      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b42c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b42e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10e      	bne.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b436:	4b06      	ldr	r3, [pc, #24]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b446:	4a02      	ldr	r2, [pc, #8]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b448:	430b      	orrs	r3, r1
 800b44a:	6593      	str	r3, [r2, #88]	; 0x58
 800b44c:	e006      	b.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b44e:	bf00      	nop
 800b450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b458:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b464:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b46c:	2300      	movs	r3, #0
 800b46e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b472:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b476:	460b      	mov	r3, r1
 800b478:	4313      	orrs	r3, r2
 800b47a:	d055      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b480:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b484:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b488:	d033      	beq.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b48a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b48e:	d82c      	bhi.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b494:	d02f      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b49a:	d826      	bhi.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b49c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b4a0:	d02b      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b4a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b4a6:	d820      	bhi.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b4a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4ac:	d012      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b4ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4b2:	d81a      	bhi.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d022      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b4b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4bc:	d115      	bne.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f001 fcc0 	bl	800ce4c <RCCEx_PLL2_Config>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4d2:	e015      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d8:	3328      	adds	r3, #40	; 0x28
 800b4da:	2102      	movs	r1, #2
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f001 fd67 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4e8:	e00a      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4f0:	e006      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4f2:	bf00      	nop
 800b4f4:	e004      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4f6:	bf00      	nop
 800b4f8:	e002      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4fa:	bf00      	nop
 800b4fc:	e000      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10b      	bne.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b508:	4ba1      	ldr	r3, [pc, #644]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b50a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b50c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b514:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b518:	4a9d      	ldr	r2, [pc, #628]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b51a:	430b      	orrs	r3, r1
 800b51c:	6593      	str	r3, [r2, #88]	; 0x58
 800b51e:	e003      	b.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b524:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b530:	f002 0308 	and.w	r3, r2, #8
 800b534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b538:	2300      	movs	r3, #0
 800b53a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b53e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b542:	460b      	mov	r3, r1
 800b544:	4313      	orrs	r3, r2
 800b546:	d01e      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b554:	d10c      	bne.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55a:	3328      	adds	r3, #40	; 0x28
 800b55c:	2102      	movs	r1, #2
 800b55e:	4618      	mov	r0, r3
 800b560:	f001 fd26 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d002      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b570:	4b87      	ldr	r3, [pc, #540]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b574:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b580:	4a83      	ldr	r2, [pc, #524]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b582:	430b      	orrs	r3, r1
 800b584:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f002 0310 	and.w	r3, r2, #16
 800b592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b596:	2300      	movs	r3, #0
 800b598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b59c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	d01e      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5b2:	d10c      	bne.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b8:	3328      	adds	r3, #40	; 0x28
 800b5ba:	2102      	movs	r1, #2
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f001 fcf7 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b5ce:	4b70      	ldr	r3, [pc, #448]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5de:	4a6c      	ldr	r2, [pc, #432]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5e0:	430b      	orrs	r3, r1
 800b5e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b5f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b5fe:	460b      	mov	r3, r1
 800b600:	4313      	orrs	r3, r2
 800b602:	d03e      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b608:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b60c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b610:	d022      	beq.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b616:	d81b      	bhi.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d003      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b61c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b620:	d00b      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b622:	e015      	b.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b628:	3308      	adds	r3, #8
 800b62a:	2100      	movs	r1, #0
 800b62c:	4618      	mov	r0, r3
 800b62e:	f001 fc0d 	bl	800ce4c <RCCEx_PLL2_Config>
 800b632:	4603      	mov	r3, r0
 800b634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b638:	e00f      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63e:	3328      	adds	r3, #40	; 0x28
 800b640:	2102      	movs	r1, #2
 800b642:	4618      	mov	r0, r3
 800b644:	f001 fcb4 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b648:	4603      	mov	r3, r0
 800b64a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b64e:	e004      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b656:	e000      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b65a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d10b      	bne.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b662:	4b4b      	ldr	r3, [pc, #300]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b666:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b672:	4a47      	ldr	r2, [pc, #284]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b674:	430b      	orrs	r3, r1
 800b676:	6593      	str	r3, [r2, #88]	; 0x58
 800b678:	e003      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b67e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b68e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b690:	2300      	movs	r3, #0
 800b692:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b694:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b698:	460b      	mov	r3, r1
 800b69a:	4313      	orrs	r3, r2
 800b69c:	d03b      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6aa:	d01f      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b6ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6b0:	d818      	bhi.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b6b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6b6:	d003      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b6b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6bc:	d007      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b6be:	e011      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6c0:	4b33      	ldr	r3, [pc, #204]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	4a32      	ldr	r2, [pc, #200]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6cc:	e00f      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d2:	3328      	adds	r3, #40	; 0x28
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f001 fc6a 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6e2:	e004      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6ea:	e000      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b6ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10b      	bne.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6f6:	4b26      	ldr	r3, [pc, #152]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b706:	4a22      	ldr	r2, [pc, #136]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b708:	430b      	orrs	r3, r1
 800b70a:	6553      	str	r3, [r2, #84]	; 0x54
 800b70c:	e003      	b.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b70e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b722:	673b      	str	r3, [r7, #112]	; 0x70
 800b724:	2300      	movs	r3, #0
 800b726:	677b      	str	r3, [r7, #116]	; 0x74
 800b728:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b72c:	460b      	mov	r3, r1
 800b72e:	4313      	orrs	r3, r2
 800b730:	d034      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b740:	d007      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b742:	e011      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b744:	4b12      	ldr	r3, [pc, #72]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	4a11      	ldr	r2, [pc, #68]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b74a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b74e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b750:	e00e      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b756:	3308      	adds	r3, #8
 800b758:	2102      	movs	r1, #2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f001 fb76 	bl	800ce4c <RCCEx_PLL2_Config>
 800b760:	4603      	mov	r3, r0
 800b762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b766:	e003      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b76e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10d      	bne.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b778:	4b05      	ldr	r3, [pc, #20]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b77a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b77c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b786:	4a02      	ldr	r2, [pc, #8]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b788:	430b      	orrs	r3, r1
 800b78a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b78c:	e006      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b78e:	bf00      	nop
 800b790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b7a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	d00c      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7bc:	3328      	adds	r3, #40	; 0x28
 800b7be:	2102      	movs	r1, #2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f001 fbf5 	bl	800cfb0 <RCCEx_PLL3_Config>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b7de:	663b      	str	r3, [r7, #96]	; 0x60
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	667b      	str	r3, [r7, #100]	; 0x64
 800b7e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	d038      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7fa:	d018      	beq.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b7fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b800:	d811      	bhi.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b806:	d014      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b80c:	d80b      	bhi.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d011      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b816:	d106      	bne.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b818:	4bc3      	ldr	r3, [pc, #780]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	4ac2      	ldr	r2, [pc, #776]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b81e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b824:	e008      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b82c:	e004      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b82e:	bf00      	nop
 800b830:	e002      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b832:	bf00      	nop
 800b834:	e000      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b836:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b838:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10b      	bne.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b840:	4bb9      	ldr	r3, [pc, #740]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b844:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b850:	4ab5      	ldr	r2, [pc, #724]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b852:	430b      	orrs	r3, r1
 800b854:	6553      	str	r3, [r2, #84]	; 0x54
 800b856:	e003      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b85c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b86c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b86e:	2300      	movs	r3, #0
 800b870:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b872:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b876:	460b      	mov	r3, r1
 800b878:	4313      	orrs	r3, r2
 800b87a:	d009      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b87c:	4baa      	ldr	r3, [pc, #680]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b880:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b88a:	4aa7      	ldr	r2, [pc, #668]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b88c:	430b      	orrs	r3, r1
 800b88e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b89c:	653b      	str	r3, [r7, #80]	; 0x50
 800b89e:	2300      	movs	r3, #0
 800b8a0:	657b      	str	r3, [r7, #84]	; 0x54
 800b8a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	d00a      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b8ac:	4b9e      	ldr	r3, [pc, #632]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b8bc:	4a9a      	ldr	r2, [pc, #616]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8be:	430b      	orrs	r3, r1
 800b8c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b8ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	d009      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b8de:	4b92      	ldr	r3, [pc, #584]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8ec:	4a8e      	ldr	r2, [pc, #568]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b8fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b900:	2300      	movs	r3, #0
 800b902:	647b      	str	r3, [r7, #68]	; 0x44
 800b904:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b908:	460b      	mov	r3, r1
 800b90a:	4313      	orrs	r3, r2
 800b90c:	d00e      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b90e:	4b86      	ldr	r3, [pc, #536]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	4a85      	ldr	r2, [pc, #532]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b918:	6113      	str	r3, [r2, #16]
 800b91a:	4b83      	ldr	r3, [pc, #524]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b91c:	6919      	ldr	r1, [r3, #16]
 800b91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b922:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b926:	4a80      	ldr	r2, [pc, #512]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b928:	430b      	orrs	r3, r1
 800b92a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b938:	63bb      	str	r3, [r7, #56]	; 0x38
 800b93a:	2300      	movs	r3, #0
 800b93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b93e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b942:	460b      	mov	r3, r1
 800b944:	4313      	orrs	r3, r2
 800b946:	d009      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b948:	4b77      	ldr	r3, [pc, #476]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b94a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b94c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b956:	4a74      	ldr	r2, [pc, #464]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b958:	430b      	orrs	r3, r1
 800b95a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b964:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b968:	633b      	str	r3, [r7, #48]	; 0x30
 800b96a:	2300      	movs	r3, #0
 800b96c:	637b      	str	r3, [r7, #52]	; 0x34
 800b96e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b972:	460b      	mov	r3, r1
 800b974:	4313      	orrs	r3, r2
 800b976:	d00a      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b978:	4b6b      	ldr	r3, [pc, #428]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b97a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b97c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b988:	4a67      	ldr	r2, [pc, #412]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b98a:	430b      	orrs	r3, r1
 800b98c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	2100      	movs	r1, #0
 800b998:	62b9      	str	r1, [r7, #40]	; 0x28
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	d011      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 fa4a 	bl	800ce4c <RCCEx_PLL2_Config>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b9be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	6239      	str	r1, [r7, #32]
 800b9da:	f003 0302 	and.w	r3, r3, #2
 800b9de:	627b      	str	r3, [r7, #36]	; 0x24
 800b9e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	d011      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f001 fa2a 	bl	800ce4c <RCCEx_PLL2_Config>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b9fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	2100      	movs	r1, #0
 800ba18:	61b9      	str	r1, [r7, #24]
 800ba1a:	f003 0304 	and.w	r3, r3, #4
 800ba1e:	61fb      	str	r3, [r7, #28]
 800ba20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba24:	460b      	mov	r3, r1
 800ba26:	4313      	orrs	r3, r2
 800ba28:	d011      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2e:	3308      	adds	r3, #8
 800ba30:	2102      	movs	r1, #2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f001 fa0a 	bl	800ce4c <RCCEx_PLL2_Config>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ba4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	2100      	movs	r1, #0
 800ba58:	6139      	str	r1, [r7, #16]
 800ba5a:	f003 0308 	and.w	r3, r3, #8
 800ba5e:	617b      	str	r3, [r7, #20]
 800ba60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ba64:	460b      	mov	r3, r1
 800ba66:	4313      	orrs	r3, r2
 800ba68:	d011      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba6e:	3328      	adds	r3, #40	; 0x28
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f001 fa9c 	bl	800cfb0 <RCCEx_PLL3_Config>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ba7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	2100      	movs	r1, #0
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	f003 0310 	and.w	r3, r3, #16
 800ba9e:	60fb      	str	r3, [r7, #12]
 800baa0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800baa4:	460b      	mov	r3, r1
 800baa6:	4313      	orrs	r3, r2
 800baa8:	d011      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800baaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baae:	3328      	adds	r3, #40	; 0x28
 800bab0:	2101      	movs	r1, #1
 800bab2:	4618      	mov	r0, r3
 800bab4:	f001 fa7c 	bl	800cfb0 <RCCEx_PLL3_Config>
 800bab8:	4603      	mov	r3, r0
 800baba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800babe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d003      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	2100      	movs	r1, #0
 800bad8:	6039      	str	r1, [r7, #0]
 800bada:	f003 0320 	and.w	r3, r3, #32
 800bade:	607b      	str	r3, [r7, #4]
 800bae0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bae4:	460b      	mov	r3, r1
 800bae6:	4313      	orrs	r3, r2
 800bae8:	d011      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800baea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baee:	3328      	adds	r3, #40	; 0x28
 800baf0:	2102      	movs	r1, #2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f001 fa5c 	bl	800cfb0 <RCCEx_PLL3_Config>
 800baf8:	4603      	mov	r3, r0
 800bafa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bafe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bb0e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	e000      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bb22:	46bd      	mov	sp, r7
 800bb24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb28:	58024400 	.word	0x58024400

0800bb2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b090      	sub	sp, #64	; 0x40
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb3a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bb3e:	430b      	orrs	r3, r1
 800bb40:	f040 8094 	bne.w	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bb44:	4b9e      	ldr	r3, [pc, #632]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb48:	f003 0307 	and.w	r3, r3, #7
 800bb4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	f200 8087 	bhi.w	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bb56:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bb71 	.word	0x0800bb71
 800bb60:	0800bb99 	.word	0x0800bb99
 800bb64:	0800bbc1 	.word	0x0800bbc1
 800bb68:	0800bc5d 	.word	0x0800bc5d
 800bb6c:	0800bbe9 	.word	0x0800bbe9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb70:	4b93      	ldr	r3, [pc, #588]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb7c:	d108      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb82:	4618      	mov	r0, r3
 800bb84:	f001 f810 	bl	800cba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb8c:	f000 bd45 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb94:	f000 bd41 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb98:	4b89      	ldr	r3, [pc, #548]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bba4:	d108      	bne.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bba6:	f107 0318 	add.w	r3, r7, #24
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fd54 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbb4:	f000 bd31 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbbc:	f000 bd2d 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbc0:	4b7f      	ldr	r3, [pc, #508]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbcc:	d108      	bne.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbce:	f107 030c 	add.w	r3, r7, #12
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 fe94 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbdc:	f000 bd1d 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbe4:	f000 bd19 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbe8:	4b75      	ldr	r3, [pc, #468]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbf0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbf2:	4b73      	ldr	r3, [pc, #460]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f003 0304 	and.w	r3, r3, #4
 800bbfa:	2b04      	cmp	r3, #4
 800bbfc:	d10c      	bne.n	800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d109      	bne.n	800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc04:	4b6e      	ldr	r3, [pc, #440]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	08db      	lsrs	r3, r3, #3
 800bc0a:	f003 0303 	and.w	r3, r3, #3
 800bc0e:	4a6d      	ldr	r2, [pc, #436]	; (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc10:	fa22 f303 	lsr.w	r3, r2, r3
 800bc14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc16:	e01f      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc18:	4b69      	ldr	r3, [pc, #420]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc24:	d106      	bne.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc2c:	d102      	bne.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc2e:	4b66      	ldr	r3, [pc, #408]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bc30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc32:	e011      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc34:	4b62      	ldr	r3, [pc, #392]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc40:	d106      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc48:	d102      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc4a:	4b60      	ldr	r3, [pc, #384]	; (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc4e:	e003      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc54:	f000 bce1 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc58:	f000 bcdf 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc5c:	4b5c      	ldr	r3, [pc, #368]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc60:	f000 bcdb 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc68:	f000 bcd7 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bc6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc70:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bc74:	430b      	orrs	r3, r1
 800bc76:	f040 80ad 	bne.w	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bc7a:	4b51      	ldr	r3, [pc, #324]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc7e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bc82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc8a:	d056      	beq.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc92:	f200 8090 	bhi.w	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	2bc0      	cmp	r3, #192	; 0xc0
 800bc9a:	f000 8088 	beq.w	800bdae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca0:	2bc0      	cmp	r3, #192	; 0xc0
 800bca2:	f200 8088 	bhi.w	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca8:	2b80      	cmp	r3, #128	; 0x80
 800bcaa:	d032      	beq.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	2b80      	cmp	r3, #128	; 0x80
 800bcb0:	f200 8081 	bhi.w	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	2b40      	cmp	r3, #64	; 0x40
 800bcbe:	d014      	beq.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bcc0:	e079      	b.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bcc2:	4b3f      	ldr	r3, [pc, #252]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcce:	d108      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 ff67 	bl	800cba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcde:	f000 bc9c 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bce6:	f000 bc98 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcea:	4b35      	ldr	r3, [pc, #212]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcf6:	d108      	bne.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcf8:	f107 0318 	add.w	r3, r7, #24
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f000 fcab 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd06:	f000 bc88 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd0e:	f000 bc84 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd12:	4b2b      	ldr	r3, [pc, #172]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd1e:	d108      	bne.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd20:	f107 030c 	add.w	r3, r7, #12
 800bd24:	4618      	mov	r0, r3
 800bd26:	f000 fdeb 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd2e:	f000 bc74 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd36:	f000 bc70 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd3a:	4b21      	ldr	r3, [pc, #132]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd44:	4b1e      	ldr	r3, [pc, #120]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	d10c      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d109      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd56:	4b1a      	ldr	r3, [pc, #104]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	08db      	lsrs	r3, r3, #3
 800bd5c:	f003 0303 	and.w	r3, r3, #3
 800bd60:	4a18      	ldr	r2, [pc, #96]	; (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd62:	fa22 f303 	lsr.w	r3, r2, r3
 800bd66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd68:	e01f      	b.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd6a:	4b15      	ldr	r3, [pc, #84]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd76:	d106      	bne.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd7e:	d102      	bne.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd80:	4b11      	ldr	r3, [pc, #68]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bd82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd84:	e011      	b.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd86:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd92:	d106      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd9a:	d102      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bda0:	e003      	b.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bda6:	f000 bc38 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bdaa:	f000 bc36 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdae:	4b08      	ldr	r3, [pc, #32]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdb2:	f000 bc32 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdba:	f000 bc2e 	b.w	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bdbe:	bf00      	nop
 800bdc0:	58024400 	.word	0x58024400
 800bdc4:	03d09000 	.word	0x03d09000
 800bdc8:	003d0900 	.word	0x003d0900
 800bdcc:	017d7840 	.word	0x017d7840
 800bdd0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bdd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdd8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bddc:	430b      	orrs	r3, r1
 800bdde:	f040 809c 	bne.w	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bde2:	4b9e      	ldr	r3, [pc, #632]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bde4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bde6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bdea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdf2:	d054      	beq.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdfa:	f200 808b 	bhi.w	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800be04:	f000 8083 	beq.w	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800be0e:	f200 8081 	bhi.w	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be18:	d02f      	beq.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be20:	d878      	bhi.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	2b00      	cmp	r3, #0
 800be26:	d004      	beq.n	800be32 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be2e:	d012      	beq.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800be30:	e070      	b.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be32:	4b8a      	ldr	r3, [pc, #552]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be3e:	d107      	bne.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be44:	4618      	mov	r0, r3
 800be46:	f000 feaf 	bl	800cba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be4e:	e3e4      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be50:	2300      	movs	r3, #0
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be54:	e3e1      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be56:	4b81      	ldr	r3, [pc, #516]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be62:	d107      	bne.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be64:	f107 0318 	add.w	r3, r7, #24
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 fbf5 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be72:	e3d2      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be74:	2300      	movs	r3, #0
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be78:	e3cf      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be7a:	4b78      	ldr	r3, [pc, #480]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be86:	d107      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be88:	f107 030c 	add.w	r3, r7, #12
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 fd37 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be96:	e3c0      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be98:	2300      	movs	r3, #0
 800be9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be9c:	e3bd      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be9e:	4b6f      	ldr	r3, [pc, #444]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bea6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bea8:	4b6c      	ldr	r3, [pc, #432]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0304 	and.w	r3, r3, #4
 800beb0:	2b04      	cmp	r3, #4
 800beb2:	d10c      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800beb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d109      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800beba:	4b68      	ldr	r3, [pc, #416]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	08db      	lsrs	r3, r3, #3
 800bec0:	f003 0303 	and.w	r3, r3, #3
 800bec4:	4a66      	ldr	r2, [pc, #408]	; (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bec6:	fa22 f303 	lsr.w	r3, r2, r3
 800beca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800becc:	e01e      	b.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bece:	4b63      	ldr	r3, [pc, #396]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beda:	d106      	bne.n	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bee2:	d102      	bne.n	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bee4:	4b5f      	ldr	r3, [pc, #380]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bee8:	e010      	b.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800beea:	4b5c      	ldr	r3, [pc, #368]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bef6:	d106      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800bef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800befa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800befe:	d102      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf00:	4b59      	ldr	r3, [pc, #356]	; (800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bf02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf04:	e002      	b.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf0a:	e386      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf0c:	e385      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf0e:	4b57      	ldr	r3, [pc, #348]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bf10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf12:	e382      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf18:	e37f      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bf1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf1e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bf22:	430b      	orrs	r3, r1
 800bf24:	f040 80a7 	bne.w	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bf28:	4b4c      	ldr	r3, [pc, #304]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf2c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bf30:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf38:	d055      	beq.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf40:	f200 8096 	bhi.w	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf4a:	f000 8084 	beq.w	800c056 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf54:	f200 808c 	bhi.w	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf5e:	d030      	beq.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf66:	f200 8083 	bhi.w	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d004      	beq.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf76:	d012      	beq.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800bf78:	e07a      	b.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf7a:	4b38      	ldr	r3, [pc, #224]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf86:	d107      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 fe0b 	bl	800cba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf96:	e340      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf9c:	e33d      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf9e:	4b2f      	ldr	r3, [pc, #188]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfaa:	d107      	bne.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfac:	f107 0318 	add.w	r3, r7, #24
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 fb51 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfba:	e32e      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfc0:	e32b      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfc2:	4b26      	ldr	r3, [pc, #152]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfce:	d107      	bne.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfd0:	f107 030c 	add.w	r3, r7, #12
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f000 fc93 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfde:	e31c      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfe4:	e319      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfe6:	4b1d      	ldr	r3, [pc, #116]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bff0:	4b1a      	ldr	r3, [pc, #104]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 0304 	and.w	r3, r3, #4
 800bff8:	2b04      	cmp	r3, #4
 800bffa:	d10c      	bne.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d109      	bne.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c002:	4b16      	ldr	r3, [pc, #88]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	08db      	lsrs	r3, r3, #3
 800c008:	f003 0303 	and.w	r3, r3, #3
 800c00c:	4a14      	ldr	r2, [pc, #80]	; (800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c00e:	fa22 f303 	lsr.w	r3, r2, r3
 800c012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c014:	e01e      	b.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c016:	4b11      	ldr	r3, [pc, #68]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c01e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c022:	d106      	bne.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c02a:	d102      	bne.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c02c:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c02e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c030:	e010      	b.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c032:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c03a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c03e:	d106      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c046:	d102      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c048:	4b07      	ldr	r3, [pc, #28]	; (800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c04a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c04c:	e002      	b.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c052:	e2e2      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c054:	e2e1      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c056:	4b05      	ldr	r3, [pc, #20]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c05a:	e2de      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c05c:	58024400 	.word	0x58024400
 800c060:	03d09000 	.word	0x03d09000
 800c064:	003d0900 	.word	0x003d0900
 800c068:	017d7840 	.word	0x017d7840
 800c06c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c074:	e2d1      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c07a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c07e:	430b      	orrs	r3, r1
 800c080:	f040 809c 	bne.w	800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c084:	4b93      	ldr	r3, [pc, #588]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c088:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c08c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c094:	d054      	beq.n	800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c09c:	f200 808b 	bhi.w	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0a6:	f000 8083 	beq.w	800c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0b0:	f200 8081 	bhi.w	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0ba:	d02f      	beq.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0c2:	d878      	bhi.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d004      	beq.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d0:	d012      	beq.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c0d2:	e070      	b.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0d4:	4b7f      	ldr	r3, [pc, #508]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0e0:	d107      	bne.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fd5e 	bl	800cba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0f0:	e293      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f6:	e290      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0f8:	4b76      	ldr	r3, [pc, #472]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c104:	d107      	bne.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c106:	f107 0318 	add.w	r3, r7, #24
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 faa4 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c114:	e281      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c11a:	e27e      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c11c:	4b6d      	ldr	r3, [pc, #436]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c128:	d107      	bne.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 fbe6 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c138:	e26f      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c13e:	e26c      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c140:	4b64      	ldr	r3, [pc, #400]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c148:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c14a:	4b62      	ldr	r3, [pc, #392]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 0304 	and.w	r3, r3, #4
 800c152:	2b04      	cmp	r3, #4
 800c154:	d10c      	bne.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d109      	bne.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c15c:	4b5d      	ldr	r3, [pc, #372]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	08db      	lsrs	r3, r3, #3
 800c162:	f003 0303 	and.w	r3, r3, #3
 800c166:	4a5c      	ldr	r2, [pc, #368]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c168:	fa22 f303 	lsr.w	r3, r2, r3
 800c16c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16e:	e01e      	b.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c170:	4b58      	ldr	r3, [pc, #352]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c17c:	d106      	bne.n	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c184:	d102      	bne.n	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c186:	4b55      	ldr	r3, [pc, #340]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c18a:	e010      	b.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c18c:	4b51      	ldr	r3, [pc, #324]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c198:	d106      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1a0:	d102      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1a2:	4b4f      	ldr	r3, [pc, #316]	; (800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a6:	e002      	b.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1ac:	e235      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c1ae:	e234      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1b0:	4b4c      	ldr	r3, [pc, #304]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b4:	e231      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ba:	e22e      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c1bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1c0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c1c4:	430b      	orrs	r3, r1
 800c1c6:	f040 808f 	bne.w	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c1ca:	4b42      	ldr	r3, [pc, #264]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ce:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c1d2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1da:	d06b      	beq.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1e2:	d874      	bhi.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1ea:	d056      	beq.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1f2:	d86c      	bhi.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c1fa:	d03b      	beq.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c202:	d864      	bhi.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c20a:	d021      	beq.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c212:	d85c      	bhi.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c220:	d004      	beq.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c222:	e054      	b.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c224:	f7fe fa0a 	bl	800a63c <HAL_RCC_GetPCLK1Freq>
 800c228:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c22a:	e1f6      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c22c:	4b29      	ldr	r3, [pc, #164]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c238:	d107      	bne.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c23a:	f107 0318 	add.w	r3, r7, #24
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fa0a 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c248:	e1e7      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c24a:	2300      	movs	r3, #0
 800c24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c24e:	e1e4      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c250:	4b20      	ldr	r3, [pc, #128]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c25c:	d107      	bne.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c25e:	f107 030c 	add.w	r3, r7, #12
 800c262:	4618      	mov	r0, r3
 800c264:	f000 fb4c 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c26c:	e1d5      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c26e:	2300      	movs	r3, #0
 800c270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c272:	e1d2      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c274:	4b17      	ldr	r3, [pc, #92]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d109      	bne.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c280:	4b14      	ldr	r3, [pc, #80]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	08db      	lsrs	r3, r3, #3
 800c286:	f003 0303 	and.w	r3, r3, #3
 800c28a:	4a13      	ldr	r2, [pc, #76]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c28c:	fa22 f303 	lsr.w	r3, r2, r3
 800c290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c292:	e1c2      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c298:	e1bf      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c29a:	4b0e      	ldr	r3, [pc, #56]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2a6:	d102      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c2a8:	4b0c      	ldr	r3, [pc, #48]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ac:	e1b5      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b2:	e1b2      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c2b4:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2c0:	d102      	bne.n	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c2c2:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2c6:	e1a8      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2cc:	e1a5      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d2:	e1a2      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2d4:	58024400 	.word	0x58024400
 800c2d8:	03d09000 	.word	0x03d09000
 800c2dc:	003d0900 	.word	0x003d0900
 800c2e0:	017d7840 	.word	0x017d7840
 800c2e4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c2e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ec:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c2f0:	430b      	orrs	r3, r1
 800c2f2:	d173      	bne.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c2f4:	4b9c      	ldr	r3, [pc, #624]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c2fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c304:	d02f      	beq.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c30c:	d863      	bhi.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c310:	2b00      	cmp	r3, #0
 800c312:	d004      	beq.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c31a:	d012      	beq.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c31c:	e05b      	b.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c31e:	4b92      	ldr	r3, [pc, #584]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c32a:	d107      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c32c:	f107 0318 	add.w	r3, r7, #24
 800c330:	4618      	mov	r0, r3
 800c332:	f000 f991 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c33a:	e16e      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c340:	e16b      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c342:	4b89      	ldr	r3, [pc, #548]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c34a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c34e:	d107      	bne.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c350:	f107 030c 	add.w	r3, r7, #12
 800c354:	4618      	mov	r0, r3
 800c356:	f000 fad3 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c35e:	e15c      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c364:	e159      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c366:	4b80      	ldr	r3, [pc, #512]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c36a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c36e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c370:	4b7d      	ldr	r3, [pc, #500]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 0304 	and.w	r3, r3, #4
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d10c      	bne.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d109      	bne.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c382:	4b79      	ldr	r3, [pc, #484]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	08db      	lsrs	r3, r3, #3
 800c388:	f003 0303 	and.w	r3, r3, #3
 800c38c:	4a77      	ldr	r2, [pc, #476]	; (800c56c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c38e:	fa22 f303 	lsr.w	r3, r2, r3
 800c392:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c394:	e01e      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c396:	4b74      	ldr	r3, [pc, #464]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3a2:	d106      	bne.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3aa:	d102      	bne.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3ac:	4b70      	ldr	r3, [pc, #448]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3b0:	e010      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3b2:	4b6d      	ldr	r3, [pc, #436]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3be:	d106      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3c6:	d102      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3c8:	4b6a      	ldr	r3, [pc, #424]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3cc:	e002      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3d2:	e122      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3d4:	e121      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3da:	e11e      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c3dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3e0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c3e4:	430b      	orrs	r3, r1
 800c3e6:	d133      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c3e8:	4b5f      	ldr	r3, [pc, #380]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d004      	beq.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3fe:	d012      	beq.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c400:	e023      	b.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c402:	4b59      	ldr	r3, [pc, #356]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c40a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c40e:	d107      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c414:	4618      	mov	r0, r3
 800c416:	f000 fbc7 	bl	800cba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41e:	e0fc      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c424:	e0f9      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c426:	4b50      	ldr	r3, [pc, #320]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c42e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c432:	d107      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c434:	f107 0318 	add.w	r3, r7, #24
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 f90d 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c442:	e0ea      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c448:	e0e7      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c44e:	e0e4      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c454:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c458:	430b      	orrs	r3, r1
 800c45a:	f040 808d 	bne.w	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c45e:	4b42      	ldr	r3, [pc, #264]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c462:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c466:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c46e:	d06b      	beq.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c476:	d874      	bhi.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c47e:	d056      	beq.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c486:	d86c      	bhi.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c48e:	d03b      	beq.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c492:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c496:	d864      	bhi.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c49e:	d021      	beq.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4a6:	d85c      	bhi.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d004      	beq.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4b4:	d004      	beq.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c4b6:	e054      	b.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c4b8:	f000 f8b8 	bl	800c62c <HAL_RCCEx_GetD3PCLK1Freq>
 800c4bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4be:	e0ac      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4c0:	4b29      	ldr	r3, [pc, #164]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4cc:	d107      	bne.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4ce:	f107 0318 	add.w	r3, r7, #24
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 f8c0 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4dc:	e09d      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e2:	e09a      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4e4:	4b20      	ldr	r3, [pc, #128]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4f0:	d107      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4f2:	f107 030c 	add.w	r3, r7, #12
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 fa02 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c500:	e08b      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c506:	e088      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c508:	4b17      	ldr	r3, [pc, #92]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0304 	and.w	r3, r3, #4
 800c510:	2b04      	cmp	r3, #4
 800c512:	d109      	bne.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c514:	4b14      	ldr	r3, [pc, #80]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	08db      	lsrs	r3, r3, #3
 800c51a:	f003 0303 	and.w	r3, r3, #3
 800c51e:	4a13      	ldr	r2, [pc, #76]	; (800c56c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c520:	fa22 f303 	lsr.w	r3, r2, r3
 800c524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c526:	e078      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c528:	2300      	movs	r3, #0
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c52c:	e075      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c52e:	4b0e      	ldr	r3, [pc, #56]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c53a:	d102      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c53c:	4b0c      	ldr	r3, [pc, #48]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c540:	e06b      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c546:	e068      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c548:	4b07      	ldr	r3, [pc, #28]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c554:	d102      	bne.n	800c55c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c556:	4b07      	ldr	r3, [pc, #28]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55a:	e05e      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c560:	e05b      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c562:	2300      	movs	r3, #0
 800c564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c566:	e058      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c568:	58024400 	.word	0x58024400
 800c56c:	03d09000 	.word	0x03d09000
 800c570:	003d0900 	.word	0x003d0900
 800c574:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c57c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c580:	430b      	orrs	r3, r1
 800c582:	d148      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c584:	4b27      	ldr	r3, [pc, #156]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c58c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c594:	d02a      	beq.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c59c:	d838      	bhi.n	800c610 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d004      	beq.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5aa:	d00d      	beq.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c5ac:	e030      	b.n	800c610 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5ae:	4b1d      	ldr	r3, [pc, #116]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ba:	d102      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c5bc:	4b1a      	ldr	r3, [pc, #104]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5c0:	e02b      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c6:	e028      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5c8:	4b16      	ldr	r3, [pc, #88]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5d4:	d107      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 fae4 	bl	800cba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5e4:	e019      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ea:	e016      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5ec:	4b0d      	ldr	r3, [pc, #52]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5f8:	d107      	bne.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5fa:	f107 0318 	add.w	r3, r7, #24
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 f82a 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c608:	e007      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c60e:	e004      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c614:	e001      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3740      	adds	r7, #64	; 0x40
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	58024400 	.word	0x58024400
 800c628:	017d7840 	.word	0x017d7840

0800c62c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c630:	f7fd ffd4 	bl	800a5dc <HAL_RCC_GetHCLKFreq>
 800c634:	4602      	mov	r2, r0
 800c636:	4b06      	ldr	r3, [pc, #24]	; (800c650 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	091b      	lsrs	r3, r3, #4
 800c63c:	f003 0307 	and.w	r3, r3, #7
 800c640:	4904      	ldr	r1, [pc, #16]	; (800c654 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c642:	5ccb      	ldrb	r3, [r1, r3]
 800c644:	f003 031f 	and.w	r3, r3, #31
 800c648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	58024400 	.word	0x58024400
 800c654:	080166ac 	.word	0x080166ac

0800c658 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c658:	b480      	push	{r7}
 800c65a:	b089      	sub	sp, #36	; 0x24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c660:	4ba1      	ldr	r3, [pc, #644]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c664:	f003 0303 	and.w	r3, r3, #3
 800c668:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c66a:	4b9f      	ldr	r3, [pc, #636]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66e:	0b1b      	lsrs	r3, r3, #12
 800c670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c674:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c676:	4b9c      	ldr	r3, [pc, #624]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67a:	091b      	lsrs	r3, r3, #4
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c682:	4b99      	ldr	r3, [pc, #612]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c686:	08db      	lsrs	r3, r3, #3
 800c688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	fb02 f303 	mul.w	r3, r2, r3
 800c692:	ee07 3a90 	vmov	s15, r3
 800c696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c69a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 8111 	beq.w	800c8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	f000 8083 	beq.w	800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	f200 80a1 	bhi.w	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d056      	beq.n	800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c6c2:	e099      	b.n	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6c4:	4b88      	ldr	r3, [pc, #544]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f003 0320 	and.w	r3, r3, #32
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d02d      	beq.n	800c72c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6d0:	4b85      	ldr	r3, [pc, #532]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	08db      	lsrs	r3, r3, #3
 800c6d6:	f003 0303 	and.w	r3, r3, #3
 800c6da:	4a84      	ldr	r2, [pc, #528]	; (800c8ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c6dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	ee07 3a90 	vmov	s15, r3
 800c6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	ee07 3a90 	vmov	s15, r3
 800c6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6fa:	4b7b      	ldr	r3, [pc, #492]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c70e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c71a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c726:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c72a:	e087      	b.n	800c83c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	ee07 3a90 	vmov	s15, r3
 800c732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c736:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c73e:	4b6a      	ldr	r3, [pc, #424]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c752:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c75e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c76a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c76e:	e065      	b.n	800c83c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	ee07 3a90 	vmov	s15, r3
 800c776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c782:	4b59      	ldr	r3, [pc, #356]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c78a:	ee07 3a90 	vmov	s15, r3
 800c78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c792:	ed97 6a03 	vldr	s12, [r7, #12]
 800c796:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7b2:	e043      	b.n	800c83c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	ee07 3a90 	vmov	s15, r3
 800c7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c6:	4b48      	ldr	r3, [pc, #288]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ce:	ee07 3a90 	vmov	s15, r3
 800c7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7f6:	e021      	b.n	800c83c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c802:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c80a:	4b37      	ldr	r3, [pc, #220]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c812:	ee07 3a90 	vmov	s15, r3
 800c816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c81e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c82a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c83a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c83c:	4b2a      	ldr	r3, [pc, #168]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c840:	0a5b      	lsrs	r3, r3, #9
 800c842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c846:	ee07 3a90 	vmov	s15, r3
 800c84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c852:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c856:	edd7 6a07 	vldr	s13, [r7, #28]
 800c85a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c85e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c862:	ee17 2a90 	vmov	r2, s15
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c86a:	4b1f      	ldr	r3, [pc, #124]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86e:	0c1b      	lsrs	r3, r3, #16
 800c870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c874:	ee07 3a90 	vmov	s15, r3
 800c878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c880:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c884:	edd7 6a07 	vldr	s13, [r7, #28]
 800c888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c88c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c890:	ee17 2a90 	vmov	r2, s15
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c898:	4b13      	ldr	r3, [pc, #76]	; (800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89c:	0e1b      	lsrs	r3, r3, #24
 800c89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8a2:	ee07 3a90 	vmov	s15, r3
 800c8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8be:	ee17 2a90 	vmov	r2, s15
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c8c6:	e008      	b.n	800c8da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	609a      	str	r2, [r3, #8]
}
 800c8da:	bf00      	nop
 800c8dc:	3724      	adds	r7, #36	; 0x24
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	58024400 	.word	0x58024400
 800c8ec:	03d09000 	.word	0x03d09000
 800c8f0:	46000000 	.word	0x46000000
 800c8f4:	4c742400 	.word	0x4c742400
 800c8f8:	4a742400 	.word	0x4a742400
 800c8fc:	4bbebc20 	.word	0x4bbebc20

0800c900 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c900:	b480      	push	{r7}
 800c902:	b089      	sub	sp, #36	; 0x24
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c908:	4ba1      	ldr	r3, [pc, #644]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90c:	f003 0303 	and.w	r3, r3, #3
 800c910:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c912:	4b9f      	ldr	r3, [pc, #636]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c916:	0d1b      	lsrs	r3, r3, #20
 800c918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c91c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c91e:	4b9c      	ldr	r3, [pc, #624]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c922:	0a1b      	lsrs	r3, r3, #8
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c92a:	4b99      	ldr	r3, [pc, #612]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c92e:	08db      	lsrs	r3, r3, #3
 800c930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c934:	693a      	ldr	r2, [r7, #16]
 800c936:	fb02 f303 	mul.w	r3, r2, r3
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 8111 	beq.w	800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	2b02      	cmp	r3, #2
 800c952:	f000 8083 	beq.w	800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	2b02      	cmp	r3, #2
 800c95a:	f200 80a1 	bhi.w	800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d003      	beq.n	800c96c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	2b01      	cmp	r3, #1
 800c968:	d056      	beq.n	800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c96a:	e099      	b.n	800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c96c:	4b88      	ldr	r3, [pc, #544]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 0320 	and.w	r3, r3, #32
 800c974:	2b00      	cmp	r3, #0
 800c976:	d02d      	beq.n	800c9d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c978:	4b85      	ldr	r3, [pc, #532]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	08db      	lsrs	r3, r3, #3
 800c97e:	f003 0303 	and.w	r3, r3, #3
 800c982:	4a84      	ldr	r2, [pc, #528]	; (800cb94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c984:	fa22 f303 	lsr.w	r3, r2, r3
 800c988:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	ee07 3a90 	vmov	s15, r3
 800c990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	ee07 3a90 	vmov	s15, r3
 800c99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9a2:	4b7b      	ldr	r3, [pc, #492]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9d2:	e087      	b.n	800cae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9e6:	4b6a      	ldr	r3, [pc, #424]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca16:	e065      	b.n	800cae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca2a:	4b59      	ldr	r3, [pc, #356]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca5a:	e043      	b.n	800cae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ca6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca6e:	4b48      	ldr	r3, [pc, #288]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca76:	ee07 3a90 	vmov	s15, r3
 800ca7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca9e:	e021      	b.n	800cae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	ee07 3a90 	vmov	s15, r3
 800caa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800caae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cab2:	4b37      	ldr	r3, [pc, #220]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cac2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cac6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cae2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cae4:	4b2a      	ldr	r3, [pc, #168]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae8:	0a5b      	lsrs	r3, r3, #9
 800caea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cafa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cafe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb0a:	ee17 2a90 	vmov	r2, s15
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cb12:	4b1f      	ldr	r3, [pc, #124]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb16:	0c1b      	lsrs	r3, r3, #16
 800cb18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb1c:	ee07 3a90 	vmov	s15, r3
 800cb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb38:	ee17 2a90 	vmov	r2, s15
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cb40:	4b13      	ldr	r3, [pc, #76]	; (800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb44:	0e1b      	lsrs	r3, r3, #24
 800cb46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb4a:	ee07 3a90 	vmov	s15, r3
 800cb4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb66:	ee17 2a90 	vmov	r2, s15
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cb6e:	e008      	b.n	800cb82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	609a      	str	r2, [r3, #8]
}
 800cb82:	bf00      	nop
 800cb84:	3724      	adds	r7, #36	; 0x24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	58024400 	.word	0x58024400
 800cb94:	03d09000 	.word	0x03d09000
 800cb98:	46000000 	.word	0x46000000
 800cb9c:	4c742400 	.word	0x4c742400
 800cba0:	4a742400 	.word	0x4a742400
 800cba4:	4bbebc20 	.word	0x4bbebc20

0800cba8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b089      	sub	sp, #36	; 0x24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbb0:	4ba0      	ldr	r3, [pc, #640]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb4:	f003 0303 	and.w	r3, r3, #3
 800cbb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cbba:	4b9e      	ldr	r3, [pc, #632]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbbe:	091b      	lsrs	r3, r3, #4
 800cbc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cbc6:	4b9b      	ldr	r3, [pc, #620]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbca:	f003 0301 	and.w	r3, r3, #1
 800cbce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cbd0:	4b98      	ldr	r3, [pc, #608]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd4:	08db      	lsrs	r3, r3, #3
 800cbd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	fb02 f303 	mul.w	r3, r2, r3
 800cbe0:	ee07 3a90 	vmov	s15, r3
 800cbe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 8111 	beq.w	800ce16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	f000 8083 	beq.w	800cd02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	2b02      	cmp	r3, #2
 800cc00:	f200 80a1 	bhi.w	800cd46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d003      	beq.n	800cc12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d056      	beq.n	800ccbe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cc10:	e099      	b.n	800cd46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc12:	4b88      	ldr	r3, [pc, #544]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 0320 	and.w	r3, r3, #32
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d02d      	beq.n	800cc7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc1e:	4b85      	ldr	r3, [pc, #532]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	08db      	lsrs	r3, r3, #3
 800cc24:	f003 0303 	and.w	r3, r3, #3
 800cc28:	4a83      	ldr	r2, [pc, #524]	; (800ce38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cc2a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	ee07 3a90 	vmov	s15, r3
 800cc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	ee07 3a90 	vmov	s15, r3
 800cc40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc48:	4b7a      	ldr	r3, [pc, #488]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc50:	ee07 3a90 	vmov	s15, r3
 800cc54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc58:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc5c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ce3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc78:	e087      	b.n	800cd8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	ee07 3a90 	vmov	s15, r3
 800cc80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc84:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ce40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc8c:	4b69      	ldr	r3, [pc, #420]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cca0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ce3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccbc:	e065      	b.n	800cd8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	ee07 3a90 	vmov	s15, r3
 800ccc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccc8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ce44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccd0:	4b58      	ldr	r3, [pc, #352]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd8:	ee07 3a90 	vmov	s15, r3
 800ccdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cce0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cce4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ce3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd00:	e043      	b.n	800cd8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	ee07 3a90 	vmov	s15, r3
 800cd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ce48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cd10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd14:	4b47      	ldr	r3, [pc, #284]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd1c:	ee07 3a90 	vmov	s15, r3
 800cd20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd24:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd28:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ce3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd44:	e021      	b.n	800cd8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	ee07 3a90 	vmov	s15, r3
 800cd4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd50:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ce40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd58:	4b36      	ldr	r3, [pc, #216]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd60:	ee07 3a90 	vmov	s15, r3
 800cd64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd68:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ce3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cd8a:	4b2a      	ldr	r3, [pc, #168]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd8e:	0a5b      	lsrs	r3, r3, #9
 800cd90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd94:	ee07 3a90 	vmov	s15, r3
 800cd98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cda0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cda4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cda8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdb0:	ee17 2a90 	vmov	r2, s15
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cdb8:	4b1e      	ldr	r3, [pc, #120]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbc:	0c1b      	lsrs	r3, r3, #16
 800cdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdde:	ee17 2a90 	vmov	r2, s15
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cde6:	4b13      	ldr	r3, [pc, #76]	; (800ce34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdea:	0e1b      	lsrs	r3, r3, #24
 800cdec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf0:	ee07 3a90 	vmov	s15, r3
 800cdf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce0c:	ee17 2a90 	vmov	r2, s15
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ce14:	e008      	b.n	800ce28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	609a      	str	r2, [r3, #8]
}
 800ce28:	bf00      	nop
 800ce2a:	3724      	adds	r7, #36	; 0x24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	58024400 	.word	0x58024400
 800ce38:	03d09000 	.word	0x03d09000
 800ce3c:	46000000 	.word	0x46000000
 800ce40:	4c742400 	.word	0x4c742400
 800ce44:	4a742400 	.word	0x4a742400
 800ce48:	4bbebc20 	.word	0x4bbebc20

0800ce4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce5a:	4b53      	ldr	r3, [pc, #332]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5e:	f003 0303 	and.w	r3, r3, #3
 800ce62:	2b03      	cmp	r3, #3
 800ce64:	d101      	bne.n	800ce6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce66:	2301      	movs	r3, #1
 800ce68:	e099      	b.n	800cf9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce6a:	4b4f      	ldr	r3, [pc, #316]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a4e      	ldr	r2, [pc, #312]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800ce70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce76:	f7f6 fc9b 	bl	80037b0 <HAL_GetTick>
 800ce7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce7c:	e008      	b.n	800ce90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce7e:	f7f6 fc97 	bl	80037b0 <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d901      	bls.n	800ce90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e086      	b.n	800cf9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce90:	4b45      	ldr	r3, [pc, #276]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1f0      	bne.n	800ce7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ce9c:	4b42      	ldr	r3, [pc, #264]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800ce9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	031b      	lsls	r3, r3, #12
 800ceaa:	493f      	ldr	r1, [pc, #252]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800ceac:	4313      	orrs	r3, r2
 800ceae:	628b      	str	r3, [r1, #40]	; 0x28
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	025b      	lsls	r3, r3, #9
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	431a      	orrs	r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	3b01      	subs	r3, #1
 800cecc:	041b      	lsls	r3, r3, #16
 800cece:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ced2:	431a      	orrs	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	061b      	lsls	r3, r3, #24
 800cedc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cee0:	4931      	ldr	r1, [pc, #196]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cee2:	4313      	orrs	r3, r2
 800cee4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cee6:	4b30      	ldr	r3, [pc, #192]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	492d      	ldr	r1, [pc, #180]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cef4:	4313      	orrs	r3, r2
 800cef6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cef8:	4b2b      	ldr	r3, [pc, #172]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefc:	f023 0220 	bic.w	r2, r3, #32
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	699b      	ldr	r3, [r3, #24]
 800cf04:	4928      	ldr	r1, [pc, #160]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf06:	4313      	orrs	r3, r2
 800cf08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf0a:	4b27      	ldr	r3, [pc, #156]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0e:	4a26      	ldr	r2, [pc, #152]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf10:	f023 0310 	bic.w	r3, r3, #16
 800cf14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf16:	4b24      	ldr	r3, [pc, #144]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf1a:	4b24      	ldr	r3, [pc, #144]	; (800cfac <RCCEx_PLL2_Config+0x160>)
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	69d2      	ldr	r2, [r2, #28]
 800cf22:	00d2      	lsls	r2, r2, #3
 800cf24:	4920      	ldr	r1, [pc, #128]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf26:	4313      	orrs	r3, r2
 800cf28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf2a:	4b1f      	ldr	r3, [pc, #124]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2e:	4a1e      	ldr	r2, [pc, #120]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf30:	f043 0310 	orr.w	r3, r3, #16
 800cf34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf3c:	4b1a      	ldr	r3, [pc, #104]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf40:	4a19      	ldr	r2, [pc, #100]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf48:	e00f      	b.n	800cf6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d106      	bne.n	800cf5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf50:	4b15      	ldr	r3, [pc, #84]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf54:	4a14      	ldr	r2, [pc, #80]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf5c:	e005      	b.n	800cf6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf5e:	4b12      	ldr	r3, [pc, #72]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf62:	4a11      	ldr	r2, [pc, #68]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf6a:	4b0f      	ldr	r3, [pc, #60]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a0e      	ldr	r2, [pc, #56]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf76:	f7f6 fc1b 	bl	80037b0 <HAL_GetTick>
 800cf7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf7c:	e008      	b.n	800cf90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf7e:	f7f6 fc17 	bl	80037b0 <HAL_GetTick>
 800cf82:	4602      	mov	r2, r0
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d901      	bls.n	800cf90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e006      	b.n	800cf9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf90:	4b05      	ldr	r3, [pc, #20]	; (800cfa8 <RCCEx_PLL2_Config+0x15c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d0f0      	beq.n	800cf7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	58024400 	.word	0x58024400
 800cfac:	ffff0007 	.word	0xffff0007

0800cfb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfbe:	4b53      	ldr	r3, [pc, #332]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800cfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc2:	f003 0303 	and.w	r3, r3, #3
 800cfc6:	2b03      	cmp	r3, #3
 800cfc8:	d101      	bne.n	800cfce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e099      	b.n	800d102 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cfce:	4b4f      	ldr	r3, [pc, #316]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a4e      	ldr	r2, [pc, #312]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800cfd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfda:	f7f6 fbe9 	bl	80037b0 <HAL_GetTick>
 800cfde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfe0:	e008      	b.n	800cff4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfe2:	f7f6 fbe5 	bl	80037b0 <HAL_GetTick>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d901      	bls.n	800cff4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e086      	b.n	800d102 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cff4:	4b45      	ldr	r3, [pc, #276]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1f0      	bne.n	800cfe2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d000:	4b42      	ldr	r3, [pc, #264]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d004:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	051b      	lsls	r3, r3, #20
 800d00e:	493f      	ldr	r1, [pc, #252]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d010:	4313      	orrs	r3, r2
 800d012:	628b      	str	r3, [r1, #40]	; 0x28
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	3b01      	subs	r3, #1
 800d01a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	3b01      	subs	r3, #1
 800d024:	025b      	lsls	r3, r3, #9
 800d026:	b29b      	uxth	r3, r3
 800d028:	431a      	orrs	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	3b01      	subs	r3, #1
 800d030:	041b      	lsls	r3, r3, #16
 800d032:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d036:	431a      	orrs	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	691b      	ldr	r3, [r3, #16]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	061b      	lsls	r3, r3, #24
 800d040:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d044:	4931      	ldr	r1, [pc, #196]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d046:	4313      	orrs	r3, r2
 800d048:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d04a:	4b30      	ldr	r3, [pc, #192]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	492d      	ldr	r1, [pc, #180]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d058:	4313      	orrs	r3, r2
 800d05a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d05c:	4b2b      	ldr	r3, [pc, #172]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d060:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	699b      	ldr	r3, [r3, #24]
 800d068:	4928      	ldr	r1, [pc, #160]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d06a:	4313      	orrs	r3, r2
 800d06c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d06e:	4b27      	ldr	r3, [pc, #156]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d072:	4a26      	ldr	r2, [pc, #152]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d078:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d07a:	4b24      	ldr	r3, [pc, #144]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d07c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d07e:	4b24      	ldr	r3, [pc, #144]	; (800d110 <RCCEx_PLL3_Config+0x160>)
 800d080:	4013      	ands	r3, r2
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	69d2      	ldr	r2, [r2, #28]
 800d086:	00d2      	lsls	r2, r2, #3
 800d088:	4920      	ldr	r1, [pc, #128]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d08a:	4313      	orrs	r3, r2
 800d08c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d08e:	4b1f      	ldr	r3, [pc, #124]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d092:	4a1e      	ldr	r2, [pc, #120]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d098:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d106      	bne.n	800d0ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d0a0:	4b1a      	ldr	r3, [pc, #104]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	4a19      	ldr	r2, [pc, #100]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d0a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d0aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0ac:	e00f      	b.n	800d0ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d106      	bne.n	800d0c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d0b4:	4b15      	ldr	r3, [pc, #84]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b8:	4a14      	ldr	r2, [pc, #80]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d0ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d0be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0c0:	e005      	b.n	800d0ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d0c2:	4b12      	ldr	r3, [pc, #72]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c6:	4a11      	ldr	r2, [pc, #68]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d0c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d0ce:	4b0f      	ldr	r3, [pc, #60]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a0e      	ldr	r2, [pc, #56]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d0d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0da:	f7f6 fb69 	bl	80037b0 <HAL_GetTick>
 800d0de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0e0:	e008      	b.n	800d0f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0e2:	f7f6 fb65 	bl	80037b0 <HAL_GetTick>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d901      	bls.n	800d0f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	e006      	b.n	800d102 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0f4:	4b05      	ldr	r3, [pc, #20]	; (800d10c <RCCEx_PLL3_Config+0x15c>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0f0      	beq.n	800d0e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d100:	7bfb      	ldrb	r3, [r7, #15]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	58024400 	.word	0x58024400
 800d110:	ffff0007 	.word	0xffff0007

0800d114 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
 800d11e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d071      	beq.n	800d20a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d106      	bne.n	800d140 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7f5 fe36 	bl	8002dac <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2202      	movs	r2, #2
 800d144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	f003 0310 	and.w	r3, r3, #16
 800d152:	2b10      	cmp	r3, #16
 800d154:	d050      	beq.n	800d1f8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	22ca      	movs	r2, #202	; 0xca
 800d15c:	625a      	str	r2, [r3, #36]	; 0x24
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2253      	movs	r2, #83	; 0x53
 800d164:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 fa4a 	bl	800d600 <RTC_EnterInitMode>
 800d16c:	4603      	mov	r3, r0
 800d16e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d170:	7bfb      	ldrb	r3, [r7, #15]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d124      	bne.n	800d1c0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	6899      	ldr	r1, [r3, #8]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	4b24      	ldr	r3, [pc, #144]	; (800d214 <HAL_RTC_Init+0x100>)
 800d182:	400b      	ands	r3, r1
 800d184:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6899      	ldr	r1, [r3, #8]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	685a      	ldr	r2, [r3, #4]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	431a      	orrs	r2, r3
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	431a      	orrs	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	430a      	orrs	r2, r1
 800d1a2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	0419      	lsls	r1, r3, #16
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	68da      	ldr	r2, [r3, #12]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	430a      	orrs	r2, r1
 800d1b4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fa56 	bl	800d668 <RTC_ExitInitMode>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d113      	bne.n	800d1ee <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f022 0203 	bic.w	r2, r2, #3
 800d1d4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	69da      	ldr	r2, [r3, #28]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	695b      	ldr	r3, [r3, #20]
 800d1e4:	431a      	orrs	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	430a      	orrs	r2, r1
 800d1ec:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	22ff      	movs	r2, #255	; 0xff
 800d1f4:	625a      	str	r2, [r3, #36]	; 0x24
 800d1f6:	e001      	b.n	800d1fc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d1fc:	7bfb      	ldrb	r3, [r7, #15]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d103      	bne.n	800d20a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	ff8fffbf 	.word	0xff8fffbf

0800d218 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d218:	b590      	push	{r4, r7, lr}
 800d21a:	b087      	sub	sp, #28
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d101      	bne.n	800d232 <HAL_RTC_SetTime+0x1a>
 800d22e:	2302      	movs	r3, #2
 800d230:	e089      	b.n	800d346 <HAL_RTC_SetTime+0x12e>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2202      	movs	r2, #2
 800d23e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	22ca      	movs	r2, #202	; 0xca
 800d248:	625a      	str	r2, [r3, #36]	; 0x24
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2253      	movs	r2, #83	; 0x53
 800d250:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f000 f9d4 	bl	800d600 <RTC_EnterInitMode>
 800d258:	4603      	mov	r3, r0
 800d25a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d25c:	7cfb      	ldrb	r3, [r7, #19]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d161      	bne.n	800d326 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d126      	bne.n	800d2b6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d272:	2b00      	cmp	r3, #0
 800d274:	d102      	bne.n	800d27c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	2200      	movs	r2, #0
 800d27a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	4618      	mov	r0, r3
 800d282:	f000 fa2f 	bl	800d6e4 <RTC_ByteToBcd2>
 800d286:	4603      	mov	r3, r0
 800d288:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	785b      	ldrb	r3, [r3, #1]
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fa28 	bl	800d6e4 <RTC_ByteToBcd2>
 800d294:	4603      	mov	r3, r0
 800d296:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d298:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	789b      	ldrb	r3, [r3, #2]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 fa20 	bl	800d6e4 <RTC_ByteToBcd2>
 800d2a4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d2a6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	78db      	ldrb	r3, [r3, #3]
 800d2ae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	617b      	str	r3, [r7, #20]
 800d2b4:	e018      	b.n	800d2e8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d102      	bne.n	800d2ca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	785b      	ldrb	r3, [r3, #1]
 800d2d4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2d6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d2dc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	78db      	ldrb	r3, [r3, #3]
 800d2e2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	6979      	ldr	r1, [r7, #20]
 800d2ee:	4b18      	ldr	r3, [pc, #96]	; (800d350 <HAL_RTC_SetTime+0x138>)
 800d2f0:	400b      	ands	r3, r1
 800d2f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	689a      	ldr	r2, [r3, #8]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d302:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6899      	ldr	r1, [r3, #8]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	68da      	ldr	r2, [r3, #12]
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	431a      	orrs	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	430a      	orrs	r2, r1
 800d31a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f000 f9a3 	bl	800d668 <RTC_ExitInitMode>
 800d322:	4603      	mov	r3, r0
 800d324:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	22ff      	movs	r2, #255	; 0xff
 800d32c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d32e:	7cfb      	ldrb	r3, [r7, #19]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d103      	bne.n	800d33c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d344:	7cfb      	ldrb	r3, [r7, #19]
}
 800d346:	4618      	mov	r0, r3
 800d348:	371c      	adds	r7, #28
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd90      	pop	{r4, r7, pc}
 800d34e:	bf00      	nop
 800d350:	007f7f7f 	.word	0x007f7f7f

0800d354 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	4b22      	ldr	r3, [pc, #136]	; (800d408 <HAL_RTC_GetTime+0xb4>)
 800d380:	4013      	ands	r3, r2
 800d382:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	0c1b      	lsrs	r3, r3, #16
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	0a1b      	lsrs	r3, r3, #8
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	0d9b      	lsrs	r3, r3, #22
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	f003 0301 	and.w	r3, r3, #1
 800d3bc:	b2da      	uxtb	r2, r3
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d11a      	bne.n	800d3fe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 f9a9 	bl	800d724 <RTC_Bcd2ToByte>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	785b      	ldrb	r3, [r3, #1]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 f9a0 	bl	800d724 <RTC_Bcd2ToByte>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	789b      	ldrb	r3, [r3, #2]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f000 f997 	bl	800d724 <RTC_Bcd2ToByte>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	007f7f7f 	.word	0x007f7f7f

0800d40c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d40c:	b590      	push	{r4, r7, lr}
 800d40e:	b087      	sub	sp, #28
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d101      	bne.n	800d426 <HAL_RTC_SetDate+0x1a>
 800d422:	2302      	movs	r3, #2
 800d424:	e073      	b.n	800d50e <HAL_RTC_SetDate+0x102>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2202      	movs	r2, #2
 800d432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d10e      	bne.n	800d45a <HAL_RTC_SetDate+0x4e>
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	785b      	ldrb	r3, [r3, #1]
 800d440:	f003 0310 	and.w	r3, r3, #16
 800d444:	2b00      	cmp	r3, #0
 800d446:	d008      	beq.n	800d45a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	785b      	ldrb	r3, [r3, #1]
 800d44c:	f023 0310 	bic.w	r3, r3, #16
 800d450:	b2db      	uxtb	r3, r3
 800d452:	330a      	adds	r3, #10
 800d454:	b2da      	uxtb	r2, r3
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d11c      	bne.n	800d49a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	78db      	ldrb	r3, [r3, #3]
 800d464:	4618      	mov	r0, r3
 800d466:	f000 f93d 	bl	800d6e4 <RTC_ByteToBcd2>
 800d46a:	4603      	mov	r3, r0
 800d46c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	785b      	ldrb	r3, [r3, #1]
 800d472:	4618      	mov	r0, r3
 800d474:	f000 f936 	bl	800d6e4 <RTC_ByteToBcd2>
 800d478:	4603      	mov	r3, r0
 800d47a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d47c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	789b      	ldrb	r3, [r3, #2]
 800d482:	4618      	mov	r0, r3
 800d484:	f000 f92e 	bl	800d6e4 <RTC_ByteToBcd2>
 800d488:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d48a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d494:	4313      	orrs	r3, r2
 800d496:	617b      	str	r3, [r7, #20]
 800d498:	e00e      	b.n	800d4b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	78db      	ldrb	r3, [r3, #3]
 800d49e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	785b      	ldrb	r3, [r3, #1]
 800d4a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d4a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d4ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	22ca      	movs	r2, #202	; 0xca
 800d4be:	625a      	str	r2, [r3, #36]	; 0x24
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2253      	movs	r2, #83	; 0x53
 800d4c6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f000 f899 	bl	800d600 <RTC_EnterInitMode>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d4d2:	7cfb      	ldrb	r3, [r7, #19]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10a      	bne.n	800d4ee <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	6979      	ldr	r1, [r7, #20]
 800d4de:	4b0e      	ldr	r3, [pc, #56]	; (800d518 <HAL_RTC_SetDate+0x10c>)
 800d4e0:	400b      	ands	r3, r1
 800d4e2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f000 f8bf 	bl	800d668 <RTC_ExitInitMode>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	22ff      	movs	r2, #255	; 0xff
 800d4f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d4f6:	7cfb      	ldrb	r3, [r7, #19]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d103      	bne.n	800d504 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2200      	movs	r2, #0
 800d508:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d50c:	7cfb      	ldrb	r3, [r7, #19]


}
 800d50e:	4618      	mov	r0, r3
 800d510:	371c      	adds	r7, #28
 800d512:	46bd      	mov	sp, r7
 800d514:	bd90      	pop	{r4, r7, pc}
 800d516:	bf00      	nop
 800d518:	00ffff3f 	.word	0x00ffff3f

0800d51c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b086      	sub	sp, #24
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	4b21      	ldr	r3, [pc, #132]	; (800d5b4 <HAL_RTC_GetDate+0x98>)
 800d530:	4013      	ands	r3, r2
 800d532:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	0c1b      	lsrs	r3, r3, #16
 800d538:	b2da      	uxtb	r2, r3
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	0a1b      	lsrs	r3, r3, #8
 800d542:	b2db      	uxtb	r3, r3
 800d544:	f003 031f 	and.w	r3, r3, #31
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	b2db      	uxtb	r3, r3
 800d552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d556:	b2da      	uxtb	r2, r3
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	0b5b      	lsrs	r3, r3, #13
 800d560:	b2db      	uxtb	r3, r3
 800d562:	f003 0307 	and.w	r3, r3, #7
 800d566:	b2da      	uxtb	r2, r3
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d11a      	bne.n	800d5a8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	78db      	ldrb	r3, [r3, #3]
 800d576:	4618      	mov	r0, r3
 800d578:	f000 f8d4 	bl	800d724 <RTC_Bcd2ToByte>
 800d57c:	4603      	mov	r3, r0
 800d57e:	461a      	mov	r2, r3
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	785b      	ldrb	r3, [r3, #1]
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 f8cb 	bl	800d724 <RTC_Bcd2ToByte>
 800d58e:	4603      	mov	r3, r0
 800d590:	461a      	mov	r2, r3
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	789b      	ldrb	r3, [r3, #2]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 f8c2 	bl	800d724 <RTC_Bcd2ToByte>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3718      	adds	r7, #24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	00ffff3f 	.word	0x00ffff3f

0800d5b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a0d      	ldr	r2, [pc, #52]	; (800d5fc <HAL_RTC_WaitForSynchro+0x44>)
 800d5c6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d5c8:	f7f6 f8f2 	bl	80037b0 <HAL_GetTick>
 800d5cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d5ce:	e009      	b.n	800d5e4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d5d0:	f7f6 f8ee 	bl	80037b0 <HAL_GetTick>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5de:	d901      	bls.n	800d5e4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d5e0:	2303      	movs	r3, #3
 800d5e2:	e007      	b.n	800d5f4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	f003 0320 	and.w	r3, r3, #32
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d0ee      	beq.n	800d5d0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	0003ff5f 	.word	0x0003ff5f

0800d600 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d608:	2300      	movs	r3, #0
 800d60a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d616:	2b00      	cmp	r3, #0
 800d618:	d120      	bne.n	800d65c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d622:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d624:	f7f6 f8c4 	bl	80037b0 <HAL_GetTick>
 800d628:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d62a:	e00d      	b.n	800d648 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d62c:	f7f6 f8c0 	bl	80037b0 <HAL_GetTick>
 800d630:	4602      	mov	r2, r0
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d63a:	d905      	bls.n	800d648 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d63c:	2303      	movs	r3, #3
 800d63e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2203      	movs	r2, #3
 800d644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d652:	2b00      	cmp	r3, #0
 800d654:	d102      	bne.n	800d65c <RTC_EnterInitMode+0x5c>
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	2b03      	cmp	r3, #3
 800d65a:	d1e7      	bne.n	800d62c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
	...

0800d668 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d670:	2300      	movs	r3, #0
 800d672:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d674:	4b1a      	ldr	r3, [pc, #104]	; (800d6e0 <RTC_ExitInitMode+0x78>)
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	4a19      	ldr	r2, [pc, #100]	; (800d6e0 <RTC_ExitInitMode+0x78>)
 800d67a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d67e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d680:	4b17      	ldr	r3, [pc, #92]	; (800d6e0 <RTC_ExitInitMode+0x78>)
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	f003 0320 	and.w	r3, r3, #32
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10c      	bne.n	800d6a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7ff ff93 	bl	800d5b8 <HAL_RTC_WaitForSynchro>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d01e      	beq.n	800d6d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2203      	movs	r2, #3
 800d69c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	73fb      	strb	r3, [r7, #15]
 800d6a4:	e017      	b.n	800d6d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d6a6:	4b0e      	ldr	r3, [pc, #56]	; (800d6e0 <RTC_ExitInitMode+0x78>)
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	4a0d      	ldr	r2, [pc, #52]	; (800d6e0 <RTC_ExitInitMode+0x78>)
 800d6ac:	f023 0320 	bic.w	r3, r3, #32
 800d6b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7ff ff80 	bl	800d5b8 <HAL_RTC_WaitForSynchro>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d005      	beq.n	800d6ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2203      	movs	r2, #3
 800d6c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d6ca:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <RTC_ExitInitMode+0x78>)
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	4a04      	ldr	r2, [pc, #16]	; (800d6e0 <RTC_ExitInitMode+0x78>)
 800d6d0:	f043 0320 	orr.w	r3, r3, #32
 800d6d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	58004000 	.word	0x58004000

0800d6e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d6f2:	79fb      	ldrb	r3, [r7, #7]
 800d6f4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d6f6:	e005      	b.n	800d704 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d6fe:	7afb      	ldrb	r3, [r7, #11]
 800d700:	3b0a      	subs	r3, #10
 800d702:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d704:	7afb      	ldrb	r3, [r7, #11]
 800d706:	2b09      	cmp	r3, #9
 800d708:	d8f6      	bhi.n	800d6f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	011b      	lsls	r3, r3, #4
 800d710:	b2da      	uxtb	r2, r3
 800d712:	7afb      	ldrb	r3, [r7, #11]
 800d714:	4313      	orrs	r3, r2
 800d716:	b2db      	uxtb	r3, r3
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3714      	adds	r7, #20
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	4603      	mov	r3, r0
 800d72c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d72e:	79fb      	ldrb	r3, [r7, #7]
 800d730:	091b      	lsrs	r3, r3, #4
 800d732:	b2db      	uxtb	r3, r3
 800d734:	461a      	mov	r2, r3
 800d736:	0092      	lsls	r2, r2, #2
 800d738:	4413      	add	r3, r2
 800d73a:	005b      	lsls	r3, r3, #1
 800d73c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d73e:	79fb      	ldrb	r3, [r7, #7]
 800d740:	f003 030f 	and.w	r3, r3, #15
 800d744:	b2da      	uxtb	r2, r3
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	4413      	add	r3, r2
 800d74a:	b2db      	uxtb	r3, r3
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3714      	adds	r7, #20
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d101      	bne.n	800d76a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d766:	2301      	movs	r3, #1
 800d768:	e10f      	b.n	800d98a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a87      	ldr	r2, [pc, #540]	; (800d994 <HAL_SPI_Init+0x23c>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d00f      	beq.n	800d79a <HAL_SPI_Init+0x42>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a86      	ldr	r2, [pc, #536]	; (800d998 <HAL_SPI_Init+0x240>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d00a      	beq.n	800d79a <HAL_SPI_Init+0x42>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a84      	ldr	r2, [pc, #528]	; (800d99c <HAL_SPI_Init+0x244>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d005      	beq.n	800d79a <HAL_SPI_Init+0x42>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	2b0f      	cmp	r3, #15
 800d794:	d901      	bls.n	800d79a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d796:	2301      	movs	r3, #1
 800d798:	e0f7      	b.n	800d98a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 fc12 	bl	800dfc4 <SPI_GetPacketSize>
 800d7a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a7b      	ldr	r2, [pc, #492]	; (800d994 <HAL_SPI_Init+0x23c>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d00c      	beq.n	800d7c6 <HAL_SPI_Init+0x6e>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a79      	ldr	r2, [pc, #484]	; (800d998 <HAL_SPI_Init+0x240>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d007      	beq.n	800d7c6 <HAL_SPI_Init+0x6e>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a78      	ldr	r2, [pc, #480]	; (800d99c <HAL_SPI_Init+0x244>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d002      	beq.n	800d7c6 <HAL_SPI_Init+0x6e>
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b08      	cmp	r3, #8
 800d7c4:	d811      	bhi.n	800d7ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d7ca:	4a72      	ldr	r2, [pc, #456]	; (800d994 <HAL_SPI_Init+0x23c>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d009      	beq.n	800d7e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a70      	ldr	r2, [pc, #448]	; (800d998 <HAL_SPI_Init+0x240>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d004      	beq.n	800d7e4 <HAL_SPI_Init+0x8c>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a6f      	ldr	r2, [pc, #444]	; (800d99c <HAL_SPI_Init+0x244>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d104      	bne.n	800d7ee <HAL_SPI_Init+0x96>
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2b10      	cmp	r3, #16
 800d7e8:	d901      	bls.n	800d7ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e0cd      	b.n	800d98a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d106      	bne.n	800d808 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7f5 fb04 	bl	8002e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2202      	movs	r2, #2
 800d80c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f022 0201 	bic.w	r2, r2, #1
 800d81e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d82a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	699b      	ldr	r3, [r3, #24]
 800d830:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d834:	d119      	bne.n	800d86a <HAL_SPI_Init+0x112>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d83e:	d103      	bne.n	800d848 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d844:	2b00      	cmp	r3, #0
 800d846:	d008      	beq.n	800d85a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10c      	bne.n	800d86a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d858:	d107      	bne.n	800d86a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d868:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00f      	beq.n	800d896 <HAL_SPI_Init+0x13e>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	2b06      	cmp	r3, #6
 800d87c:	d90b      	bls.n	800d896 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	430a      	orrs	r2, r1
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	e007      	b.n	800d8a6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d8a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	69da      	ldr	r2, [r3, #28]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ae:	431a      	orrs	r2, r3
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	431a      	orrs	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b8:	ea42 0103 	orr.w	r1, r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	68da      	ldr	r2, [r3, #12]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	430a      	orrs	r2, r1
 800d8c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d6:	431a      	orrs	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	699b      	ldr	r3, [r3, #24]
 800d8dc:	431a      	orrs	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	691b      	ldr	r3, [r3, #16]
 800d8e2:	431a      	orrs	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	695b      	ldr	r3, [r3, #20]
 800d8e8:	431a      	orrs	r2, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a1b      	ldr	r3, [r3, #32]
 800d8ee:	431a      	orrs	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	431a      	orrs	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8fa:	431a      	orrs	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	431a      	orrs	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d906:	ea42 0103 	orr.w	r1, r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	430a      	orrs	r2, r1
 800d914:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d113      	bne.n	800d946 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d930:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d944:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f022 0201 	bic.w	r2, r2, #1
 800d954:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	430a      	orrs	r2, r1
 800d976:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	40013000 	.word	0x40013000
 800d998:	40003800 	.word	0x40003800
 800d99c:	40003c00 	.word	0x40003c00

0800d9a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b088      	sub	sp, #32
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	603b      	str	r3, [r7, #0]
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b4:	095b      	lsrs	r3, r3, #5
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3330      	adds	r3, #48	; 0x30
 800d9c2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9c4:	f7f5 fef4 	bl	80037b0 <HAL_GetTick>
 800d9c8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d001      	beq.n	800d9da <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d9d6:	2302      	movs	r3, #2
 800d9d8:	e250      	b.n	800de7c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d002      	beq.n	800d9e6 <HAL_SPI_Receive+0x46>
 800d9e0:	88fb      	ldrh	r3, [r7, #6]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d101      	bne.n	800d9ea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e248      	b.n	800de7c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d101      	bne.n	800d9f8 <HAL_SPI_Receive+0x58>
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	e241      	b.n	800de7c <HAL_SPI_Receive+0x4dc>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2204      	movs	r2, #4
 800da04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	68ba      	ldr	r2, [r7, #8]
 800da14:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	88fa      	ldrh	r2, [r7, #6]
 800da1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	88fa      	ldrh	r2, [r7, #6]
 800da22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2200      	movs	r2, #0
 800da2a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2200      	movs	r2, #0
 800da30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2200      	movs	r2, #0
 800da38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2200      	movs	r2, #0
 800da46:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800da50:	d108      	bne.n	800da64 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	e009      	b.n	800da78 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800da76:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	685a      	ldr	r2, [r3, #4]
 800da7e:	4b95      	ldr	r3, [pc, #596]	; (800dcd4 <HAL_SPI_Receive+0x334>)
 800da80:	4013      	ands	r3, r2
 800da82:	88f9      	ldrh	r1, [r7, #6]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	6812      	ldr	r2, [r2, #0]
 800da88:	430b      	orrs	r3, r1
 800da8a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f042 0201 	orr.w	r2, r2, #1
 800da9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800daa4:	d107      	bne.n	800dab6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dab4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	2b0f      	cmp	r3, #15
 800dabc:	d96c      	bls.n	800db98 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dabe:	e064      	b.n	800db8a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d114      	bne.n	800db00 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dade:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dae0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dae6:	1d1a      	adds	r2, r3, #4
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	3b01      	subs	r3, #1
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dafe:	e044      	b.n	800db8a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db06:	b29b      	uxth	r3, r3
 800db08:	8bfa      	ldrh	r2, [r7, #30]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d919      	bls.n	800db42 <HAL_SPI_Receive+0x1a2>
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d014      	beq.n	800db42 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800db22:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db28:	1d1a      	adds	r2, r3, #4
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db34:	b29b      	uxth	r3, r3
 800db36:	3b01      	subs	r3, #1
 800db38:	b29a      	uxth	r2, r3
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800db40:	e023      	b.n	800db8a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db42:	f7f5 fe35 	bl	80037b0 <HAL_GetTick>
 800db46:	4602      	mov	r2, r0
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	683a      	ldr	r2, [r7, #0]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d803      	bhi.n	800db5a <HAL_SPI_Receive+0x1ba>
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db58:	d102      	bne.n	800db60 <HAL_SPI_Receive+0x1c0>
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d114      	bne.n	800db8a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f000 f98f 	bl	800de84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2201      	movs	r2, #1
 800db7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800db86:	2303      	movs	r3, #3
 800db88:	e178      	b.n	800de7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db90:	b29b      	uxth	r3, r3
 800db92:	2b00      	cmp	r3, #0
 800db94:	d194      	bne.n	800dac0 <HAL_SPI_Receive+0x120>
 800db96:	e15e      	b.n	800de56 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	2b07      	cmp	r3, #7
 800db9e:	f240 8153 	bls.w	800de48 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dba2:	e08f      	b.n	800dcc4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	695b      	ldr	r3, [r3, #20]
 800dbaa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	695b      	ldr	r3, [r3, #20]
 800dbb2:	f003 0301 	and.w	r3, r3, #1
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d114      	bne.n	800dbe4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbbe:	69ba      	ldr	r2, [r7, #24]
 800dbc0:	8812      	ldrh	r2, [r2, #0]
 800dbc2:	b292      	uxth	r2, r2
 800dbc4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbca:	1c9a      	adds	r2, r3, #2
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	b29a      	uxth	r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dbe2:	e06f      	b.n	800dcc4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	8bfa      	ldrh	r2, [r7, #30]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d924      	bls.n	800dc3c <HAL_SPI_Receive+0x29c>
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d01f      	beq.n	800dc3c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc00:	69ba      	ldr	r2, [r7, #24]
 800dc02:	8812      	ldrh	r2, [r2, #0]
 800dc04:	b292      	uxth	r2, r2
 800dc06:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc0c:	1c9a      	adds	r2, r3, #2
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc16:	69ba      	ldr	r2, [r7, #24]
 800dc18:	8812      	ldrh	r2, [r2, #0]
 800dc1a:	b292      	uxth	r2, r2
 800dc1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc22:	1c9a      	adds	r2, r3, #2
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	3b02      	subs	r3, #2
 800dc32:	b29a      	uxth	r2, r3
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc3a:	e043      	b.n	800dcc4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d119      	bne.n	800dc7c <HAL_SPI_Receive+0x2dc>
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d014      	beq.n	800dc7c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc56:	69ba      	ldr	r2, [r7, #24]
 800dc58:	8812      	ldrh	r2, [r2, #0]
 800dc5a:	b292      	uxth	r2, r2
 800dc5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc62:	1c9a      	adds	r2, r3, #2
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	3b01      	subs	r3, #1
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc7a:	e023      	b.n	800dcc4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc7c:	f7f5 fd98 	bl	80037b0 <HAL_GetTick>
 800dc80:	4602      	mov	r2, r0
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d803      	bhi.n	800dc94 <HAL_SPI_Receive+0x2f4>
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc92:	d102      	bne.n	800dc9a <HAL_SPI_Receive+0x2fa>
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d114      	bne.n	800dcc4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f000 f8f2 	bl	800de84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	e0db      	b.n	800de7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	f47f af69 	bne.w	800dba4 <HAL_SPI_Receive+0x204>
 800dcd2:	e0c0      	b.n	800de56 <HAL_SPI_Receive+0x4b6>
 800dcd4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	695b      	ldr	r3, [r3, #20]
 800dcde:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	695b      	ldr	r3, [r3, #20]
 800dce6:	f003 0301 	and.w	r3, r3, #1
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d117      	bne.n	800dd1e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcfa:	7812      	ldrb	r2, [r2, #0]
 800dcfc:	b2d2      	uxtb	r2, r2
 800dcfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd04:	1c5a      	adds	r2, r3, #1
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	3b01      	subs	r3, #1
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd1c:	e094      	b.n	800de48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	8bfa      	ldrh	r2, [r7, #30]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d946      	bls.n	800ddba <HAL_SPI_Receive+0x41a>
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d041      	beq.n	800ddba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd42:	7812      	ldrb	r2, [r2, #0]
 800dd44:	b2d2      	uxtb	r2, r2
 800dd46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd5e:	7812      	ldrb	r2, [r2, #0]
 800dd60:	b2d2      	uxtb	r2, r2
 800dd62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd7a:	7812      	ldrb	r2, [r2, #0]
 800dd7c:	b2d2      	uxtb	r2, r2
 800dd7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd96:	7812      	ldrb	r2, [r2, #0]
 800dd98:	b2d2      	uxtb	r2, r2
 800dd9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	3b04      	subs	r3, #4
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddb8:	e046      	b.n	800de48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	2b03      	cmp	r3, #3
 800ddc4:	d81c      	bhi.n	800de00 <HAL_SPI_Receive+0x460>
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d017      	beq.n	800de00 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dddc:	7812      	ldrb	r2, [r2, #0]
 800ddde:	b2d2      	uxtb	r2, r2
 800dde0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dde6:	1c5a      	adds	r2, r3, #1
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddfe:	e023      	b.n	800de48 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de00:	f7f5 fcd6 	bl	80037b0 <HAL_GetTick>
 800de04:	4602      	mov	r2, r0
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d803      	bhi.n	800de18 <HAL_SPI_Receive+0x478>
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de16:	d102      	bne.n	800de1e <HAL_SPI_Receive+0x47e>
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d114      	bne.n	800de48 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f000 f830 	bl	800de84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2201      	movs	r2, #1
 800de38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800de44:	2303      	movs	r3, #3
 800de46:	e019      	b.n	800de7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de4e:	b29b      	uxth	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	f47f af41 	bne.w	800dcd8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f000 f814 	bl	800de84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2201      	movs	r2, #1
 800de60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2200      	movs	r2, #0
 800de68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	e000      	b.n	800de7c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800de7a:	2300      	movs	r3, #0
  }
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3720      	adds	r7, #32
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	699a      	ldr	r2, [r3, #24]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f042 0208 	orr.w	r2, r2, #8
 800dea2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	699a      	ldr	r2, [r3, #24]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f042 0210 	orr.w	r2, r2, #16
 800deb2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f022 0201 	bic.w	r2, r2, #1
 800dec2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	6919      	ldr	r1, [r3, #16]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	4b3c      	ldr	r3, [pc, #240]	; (800dfc0 <SPI_CloseTransfer+0x13c>)
 800ded0:	400b      	ands	r3, r1
 800ded2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	689a      	ldr	r2, [r3, #8]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800dee2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b04      	cmp	r3, #4
 800deee:	d014      	beq.n	800df1a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f003 0320 	and.w	r3, r3, #32
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00f      	beq.n	800df1a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	699a      	ldr	r2, [r3, #24]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f042 0220 	orr.w	r2, r2, #32
 800df18:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df20:	b2db      	uxtb	r3, r3
 800df22:	2b03      	cmp	r3, #3
 800df24:	d014      	beq.n	800df50 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00f      	beq.n	800df50 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df36:	f043 0204 	orr.w	r2, r3, #4
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	699a      	ldr	r2, [r3, #24]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df4e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00f      	beq.n	800df7a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df60:	f043 0201 	orr.w	r2, r3, #1
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	699a      	ldr	r2, [r3, #24]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df78:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00f      	beq.n	800dfa4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df8a:	f043 0208 	orr.w	r2, r3, #8
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	699a      	ldr	r2, [r3, #24]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfa2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800dfb4:	bf00      	nop
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	fffffc90 	.word	0xfffffc90

0800dfc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfd0:	095b      	lsrs	r3, r3, #5
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	3307      	adds	r3, #7
 800dfe2:	08db      	lsrs	r3, r3, #3
 800dfe4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	fb02 f303 	mul.w	r3, r2, r3
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3714      	adds	r7, #20
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr

0800dffa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b082      	sub	sp, #8
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d101      	bne.n	800e00c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	e049      	b.n	800e0a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e012:	b2db      	uxtb	r3, r3
 800e014:	2b00      	cmp	r3, #0
 800e016:	d106      	bne.n	800e026 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7f4 ffab 	bl	8002f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2202      	movs	r2, #2
 800e02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	3304      	adds	r3, #4
 800e036:	4619      	mov	r1, r3
 800e038:	4610      	mov	r0, r2
 800e03a:	f000 ff41 	bl	800eec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2201      	movs	r2, #1
 800e042:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2201      	movs	r2, #1
 800e052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2201      	movs	r2, #1
 800e05a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2201      	movs	r2, #1
 800e062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2201      	movs	r2, #1
 800e06a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2201      	movs	r2, #1
 800e072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2201      	movs	r2, #1
 800e082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2201      	movs	r2, #1
 800e08a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2201      	movs	r2, #1
 800e092:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2201      	movs	r2, #1
 800e09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d001      	beq.n	800e0c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e04c      	b.n	800e15a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2202      	movs	r2, #2
 800e0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a26      	ldr	r2, [pc, #152]	; (800e168 <HAL_TIM_Base_Start+0xc0>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d022      	beq.n	800e118 <HAL_TIM_Base_Start+0x70>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0da:	d01d      	beq.n	800e118 <HAL_TIM_Base_Start+0x70>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a22      	ldr	r2, [pc, #136]	; (800e16c <HAL_TIM_Base_Start+0xc4>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d018      	beq.n	800e118 <HAL_TIM_Base_Start+0x70>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a21      	ldr	r2, [pc, #132]	; (800e170 <HAL_TIM_Base_Start+0xc8>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d013      	beq.n	800e118 <HAL_TIM_Base_Start+0x70>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a1f      	ldr	r2, [pc, #124]	; (800e174 <HAL_TIM_Base_Start+0xcc>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d00e      	beq.n	800e118 <HAL_TIM_Base_Start+0x70>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4a1e      	ldr	r2, [pc, #120]	; (800e178 <HAL_TIM_Base_Start+0xd0>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d009      	beq.n	800e118 <HAL_TIM_Base_Start+0x70>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a1c      	ldr	r2, [pc, #112]	; (800e17c <HAL_TIM_Base_Start+0xd4>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d004      	beq.n	800e118 <HAL_TIM_Base_Start+0x70>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a1b      	ldr	r2, [pc, #108]	; (800e180 <HAL_TIM_Base_Start+0xd8>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d115      	bne.n	800e144 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	689a      	ldr	r2, [r3, #8]
 800e11e:	4b19      	ldr	r3, [pc, #100]	; (800e184 <HAL_TIM_Base_Start+0xdc>)
 800e120:	4013      	ands	r3, r2
 800e122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b06      	cmp	r3, #6
 800e128:	d015      	beq.n	800e156 <HAL_TIM_Base_Start+0xae>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e130:	d011      	beq.n	800e156 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f042 0201 	orr.w	r2, r2, #1
 800e140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e142:	e008      	b.n	800e156 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f042 0201 	orr.w	r2, r2, #1
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	e000      	b.n	800e158 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3714      	adds	r7, #20
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	40010000 	.word	0x40010000
 800e16c:	40000400 	.word	0x40000400
 800e170:	40000800 	.word	0x40000800
 800e174:	40000c00 	.word	0x40000c00
 800e178:	40010400 	.word	0x40010400
 800e17c:	40001800 	.word	0x40001800
 800e180:	40014000 	.word	0x40014000
 800e184:	00010007 	.word	0x00010007

0800e188 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	6a1a      	ldr	r2, [r3, #32]
 800e196:	f241 1311 	movw	r3, #4369	; 0x1111
 800e19a:	4013      	ands	r3, r2
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d10f      	bne.n	800e1c0 <HAL_TIM_Base_Stop+0x38>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	6a1a      	ldr	r2, [r3, #32]
 800e1a6:	f240 4344 	movw	r3, #1092	; 0x444
 800e1aa:	4013      	ands	r3, r2
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d107      	bne.n	800e1c0 <HAL_TIM_Base_Stop+0x38>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f022 0201 	bic.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
	...

0800e1d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d001      	beq.n	800e1f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e054      	b.n	800e29a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	68da      	ldr	r2, [r3, #12]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f042 0201 	orr.w	r2, r2, #1
 800e206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a26      	ldr	r2, [pc, #152]	; (800e2a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d022      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e21a:	d01d      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a22      	ldr	r2, [pc, #136]	; (800e2ac <HAL_TIM_Base_Start_IT+0xd4>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d018      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a21      	ldr	r2, [pc, #132]	; (800e2b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d013      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a1f      	ldr	r2, [pc, #124]	; (800e2b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d00e      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a1e      	ldr	r2, [pc, #120]	; (800e2b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d009      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a1c      	ldr	r2, [pc, #112]	; (800e2bc <HAL_TIM_Base_Start_IT+0xe4>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d004      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a1b      	ldr	r2, [pc, #108]	; (800e2c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d115      	bne.n	800e284 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	689a      	ldr	r2, [r3, #8]
 800e25e:	4b19      	ldr	r3, [pc, #100]	; (800e2c4 <HAL_TIM_Base_Start_IT+0xec>)
 800e260:	4013      	ands	r3, r2
 800e262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2b06      	cmp	r3, #6
 800e268:	d015      	beq.n	800e296 <HAL_TIM_Base_Start_IT+0xbe>
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e270:	d011      	beq.n	800e296 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f042 0201 	orr.w	r2, r2, #1
 800e280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e282:	e008      	b.n	800e296 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f042 0201 	orr.w	r2, r2, #1
 800e292:	601a      	str	r2, [r3, #0]
 800e294:	e000      	b.n	800e298 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e298:	2300      	movs	r3, #0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3714      	adds	r7, #20
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	40010000 	.word	0x40010000
 800e2ac:	40000400 	.word	0x40000400
 800e2b0:	40000800 	.word	0x40000800
 800e2b4:	40000c00 	.word	0x40000c00
 800e2b8:	40010400 	.word	0x40010400
 800e2bc:	40001800 	.word	0x40001800
 800e2c0:	40014000 	.word	0x40014000
 800e2c4:	00010007 	.word	0x00010007

0800e2c8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d109      	bne.n	800e2f0 <HAL_TIM_OC_Start_IT+0x28>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	bf14      	ite	ne
 800e2e8:	2301      	movne	r3, #1
 800e2ea:	2300      	moveq	r3, #0
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	e03c      	b.n	800e36a <HAL_TIM_OC_Start_IT+0xa2>
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	2b04      	cmp	r3, #4
 800e2f4:	d109      	bne.n	800e30a <HAL_TIM_OC_Start_IT+0x42>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	bf14      	ite	ne
 800e302:	2301      	movne	r3, #1
 800e304:	2300      	moveq	r3, #0
 800e306:	b2db      	uxtb	r3, r3
 800e308:	e02f      	b.n	800e36a <HAL_TIM_OC_Start_IT+0xa2>
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	2b08      	cmp	r3, #8
 800e30e:	d109      	bne.n	800e324 <HAL_TIM_OC_Start_IT+0x5c>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2b01      	cmp	r3, #1
 800e31a:	bf14      	ite	ne
 800e31c:	2301      	movne	r3, #1
 800e31e:	2300      	moveq	r3, #0
 800e320:	b2db      	uxtb	r3, r3
 800e322:	e022      	b.n	800e36a <HAL_TIM_OC_Start_IT+0xa2>
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b0c      	cmp	r3, #12
 800e328:	d109      	bne.n	800e33e <HAL_TIM_OC_Start_IT+0x76>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b01      	cmp	r3, #1
 800e334:	bf14      	ite	ne
 800e336:	2301      	movne	r3, #1
 800e338:	2300      	moveq	r3, #0
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	e015      	b.n	800e36a <HAL_TIM_OC_Start_IT+0xa2>
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b10      	cmp	r3, #16
 800e342:	d109      	bne.n	800e358 <HAL_TIM_OC_Start_IT+0x90>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	bf14      	ite	ne
 800e350:	2301      	movne	r3, #1
 800e352:	2300      	moveq	r3, #0
 800e354:	b2db      	uxtb	r3, r3
 800e356:	e008      	b.n	800e36a <HAL_TIM_OC_Start_IT+0xa2>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	2b01      	cmp	r3, #1
 800e362:	bf14      	ite	ne
 800e364:	2301      	movne	r3, #1
 800e366:	2300      	moveq	r3, #0
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	e0ec      	b.n	800e54c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d104      	bne.n	800e382 <HAL_TIM_OC_Start_IT+0xba>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2202      	movs	r2, #2
 800e37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e380:	e023      	b.n	800e3ca <HAL_TIM_OC_Start_IT+0x102>
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	2b04      	cmp	r3, #4
 800e386:	d104      	bne.n	800e392 <HAL_TIM_OC_Start_IT+0xca>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2202      	movs	r2, #2
 800e38c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e390:	e01b      	b.n	800e3ca <HAL_TIM_OC_Start_IT+0x102>
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	2b08      	cmp	r3, #8
 800e396:	d104      	bne.n	800e3a2 <HAL_TIM_OC_Start_IT+0xda>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2202      	movs	r2, #2
 800e39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e3a0:	e013      	b.n	800e3ca <HAL_TIM_OC_Start_IT+0x102>
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	2b0c      	cmp	r3, #12
 800e3a6:	d104      	bne.n	800e3b2 <HAL_TIM_OC_Start_IT+0xea>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2202      	movs	r2, #2
 800e3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e3b0:	e00b      	b.n	800e3ca <HAL_TIM_OC_Start_IT+0x102>
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	2b10      	cmp	r3, #16
 800e3b6:	d104      	bne.n	800e3c2 <HAL_TIM_OC_Start_IT+0xfa>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2202      	movs	r2, #2
 800e3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e3c0:	e003      	b.n	800e3ca <HAL_TIM_OC_Start_IT+0x102>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2202      	movs	r2, #2
 800e3c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	2b0c      	cmp	r3, #12
 800e3ce:	d841      	bhi.n	800e454 <HAL_TIM_OC_Start_IT+0x18c>
 800e3d0:	a201      	add	r2, pc, #4	; (adr r2, 800e3d8 <HAL_TIM_OC_Start_IT+0x110>)
 800e3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d6:	bf00      	nop
 800e3d8:	0800e40d 	.word	0x0800e40d
 800e3dc:	0800e455 	.word	0x0800e455
 800e3e0:	0800e455 	.word	0x0800e455
 800e3e4:	0800e455 	.word	0x0800e455
 800e3e8:	0800e41f 	.word	0x0800e41f
 800e3ec:	0800e455 	.word	0x0800e455
 800e3f0:	0800e455 	.word	0x0800e455
 800e3f4:	0800e455 	.word	0x0800e455
 800e3f8:	0800e431 	.word	0x0800e431
 800e3fc:	0800e455 	.word	0x0800e455
 800e400:	0800e455 	.word	0x0800e455
 800e404:	0800e455 	.word	0x0800e455
 800e408:	0800e443 	.word	0x0800e443
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68da      	ldr	r2, [r3, #12]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f042 0202 	orr.w	r2, r2, #2
 800e41a:	60da      	str	r2, [r3, #12]
      break;
 800e41c:	e01d      	b.n	800e45a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	68da      	ldr	r2, [r3, #12]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f042 0204 	orr.w	r2, r2, #4
 800e42c:	60da      	str	r2, [r3, #12]
      break;
 800e42e:	e014      	b.n	800e45a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68da      	ldr	r2, [r3, #12]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f042 0208 	orr.w	r2, r2, #8
 800e43e:	60da      	str	r2, [r3, #12]
      break;
 800e440:	e00b      	b.n	800e45a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	68da      	ldr	r2, [r3, #12]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f042 0210 	orr.w	r2, r2, #16
 800e450:	60da      	str	r2, [r3, #12]
      break;
 800e452:	e002      	b.n	800e45a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e454:	2301      	movs	r3, #1
 800e456:	73fb      	strb	r3, [r7, #15]
      break;
 800e458:	bf00      	nop
  }

  if (status == HAL_OK)
 800e45a:	7bfb      	ldrb	r3, [r7, #15]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d174      	bne.n	800e54a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2201      	movs	r2, #1
 800e466:	6839      	ldr	r1, [r7, #0]
 800e468:	4618      	mov	r0, r3
 800e46a:	f001 f943 	bl	800f6f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a38      	ldr	r2, [pc, #224]	; (800e554 <HAL_TIM_OC_Start_IT+0x28c>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d013      	beq.n	800e4a0 <HAL_TIM_OC_Start_IT+0x1d8>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4a36      	ldr	r2, [pc, #216]	; (800e558 <HAL_TIM_OC_Start_IT+0x290>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d00e      	beq.n	800e4a0 <HAL_TIM_OC_Start_IT+0x1d8>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4a35      	ldr	r2, [pc, #212]	; (800e55c <HAL_TIM_OC_Start_IT+0x294>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d009      	beq.n	800e4a0 <HAL_TIM_OC_Start_IT+0x1d8>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a33      	ldr	r2, [pc, #204]	; (800e560 <HAL_TIM_OC_Start_IT+0x298>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d004      	beq.n	800e4a0 <HAL_TIM_OC_Start_IT+0x1d8>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a32      	ldr	r2, [pc, #200]	; (800e564 <HAL_TIM_OC_Start_IT+0x29c>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d101      	bne.n	800e4a4 <HAL_TIM_OC_Start_IT+0x1dc>
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e000      	b.n	800e4a6 <HAL_TIM_OC_Start_IT+0x1de>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d007      	beq.n	800e4ba <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e4b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4a25      	ldr	r2, [pc, #148]	; (800e554 <HAL_TIM_OC_Start_IT+0x28c>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d022      	beq.n	800e50a <HAL_TIM_OC_Start_IT+0x242>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4cc:	d01d      	beq.n	800e50a <HAL_TIM_OC_Start_IT+0x242>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4a25      	ldr	r2, [pc, #148]	; (800e568 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d018      	beq.n	800e50a <HAL_TIM_OC_Start_IT+0x242>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a23      	ldr	r2, [pc, #140]	; (800e56c <HAL_TIM_OC_Start_IT+0x2a4>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d013      	beq.n	800e50a <HAL_TIM_OC_Start_IT+0x242>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a22      	ldr	r2, [pc, #136]	; (800e570 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d00e      	beq.n	800e50a <HAL_TIM_OC_Start_IT+0x242>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a19      	ldr	r2, [pc, #100]	; (800e558 <HAL_TIM_OC_Start_IT+0x290>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d009      	beq.n	800e50a <HAL_TIM_OC_Start_IT+0x242>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4a1e      	ldr	r2, [pc, #120]	; (800e574 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d004      	beq.n	800e50a <HAL_TIM_OC_Start_IT+0x242>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a15      	ldr	r2, [pc, #84]	; (800e55c <HAL_TIM_OC_Start_IT+0x294>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d115      	bne.n	800e536 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	689a      	ldr	r2, [r3, #8]
 800e510:	4b19      	ldr	r3, [pc, #100]	; (800e578 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e512:	4013      	ands	r3, r2
 800e514:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	2b06      	cmp	r3, #6
 800e51a:	d015      	beq.n	800e548 <HAL_TIM_OC_Start_IT+0x280>
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e522:	d011      	beq.n	800e548 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f042 0201 	orr.w	r2, r2, #1
 800e532:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e534:	e008      	b.n	800e548 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f042 0201 	orr.w	r2, r2, #1
 800e544:	601a      	str	r2, [r3, #0]
 800e546:	e000      	b.n	800e54a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e548:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	40010000 	.word	0x40010000
 800e558:	40010400 	.word	0x40010400
 800e55c:	40014000 	.word	0x40014000
 800e560:	40014400 	.word	0x40014400
 800e564:	40014800 	.word	0x40014800
 800e568:	40000400 	.word	0x40000400
 800e56c:	40000800 	.word	0x40000800
 800e570:	40000c00 	.word	0x40000c00
 800e574:	40001800 	.word	0x40001800
 800e578:	00010007 	.word	0x00010007

0800e57c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d101      	bne.n	800e58e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	e049      	b.n	800e622 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	d106      	bne.n	800e5a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 f841 	bl	800e62a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2202      	movs	r2, #2
 800e5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	3304      	adds	r3, #4
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	f000 fc80 	bl	800eec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2201      	movs	r2, #1
 800e604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2201      	movs	r2, #1
 800e60c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2201      	movs	r2, #1
 800e614:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	3708      	adds	r7, #8
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e62a:	b480      	push	{r7}
 800e62c:	b083      	sub	sp, #12
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
	...

0800e640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d109      	bne.n	800e664 <HAL_TIM_PWM_Start+0x24>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e656:	b2db      	uxtb	r3, r3
 800e658:	2b01      	cmp	r3, #1
 800e65a:	bf14      	ite	ne
 800e65c:	2301      	movne	r3, #1
 800e65e:	2300      	moveq	r3, #0
 800e660:	b2db      	uxtb	r3, r3
 800e662:	e03c      	b.n	800e6de <HAL_TIM_PWM_Start+0x9e>
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b04      	cmp	r3, #4
 800e668:	d109      	bne.n	800e67e <HAL_TIM_PWM_Start+0x3e>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e670:	b2db      	uxtb	r3, r3
 800e672:	2b01      	cmp	r3, #1
 800e674:	bf14      	ite	ne
 800e676:	2301      	movne	r3, #1
 800e678:	2300      	moveq	r3, #0
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	e02f      	b.n	800e6de <HAL_TIM_PWM_Start+0x9e>
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	2b08      	cmp	r3, #8
 800e682:	d109      	bne.n	800e698 <HAL_TIM_PWM_Start+0x58>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	bf14      	ite	ne
 800e690:	2301      	movne	r3, #1
 800e692:	2300      	moveq	r3, #0
 800e694:	b2db      	uxtb	r3, r3
 800e696:	e022      	b.n	800e6de <HAL_TIM_PWM_Start+0x9e>
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	2b0c      	cmp	r3, #12
 800e69c:	d109      	bne.n	800e6b2 <HAL_TIM_PWM_Start+0x72>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	bf14      	ite	ne
 800e6aa:	2301      	movne	r3, #1
 800e6ac:	2300      	moveq	r3, #0
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	e015      	b.n	800e6de <HAL_TIM_PWM_Start+0x9e>
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	2b10      	cmp	r3, #16
 800e6b6:	d109      	bne.n	800e6cc <HAL_TIM_PWM_Start+0x8c>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	bf14      	ite	ne
 800e6c4:	2301      	movne	r3, #1
 800e6c6:	2300      	moveq	r3, #0
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	e008      	b.n	800e6de <HAL_TIM_PWM_Start+0x9e>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	bf14      	ite	ne
 800e6d8:	2301      	movne	r3, #1
 800e6da:	2300      	moveq	r3, #0
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d001      	beq.n	800e6e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	e0a1      	b.n	800e82a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d104      	bne.n	800e6f6 <HAL_TIM_PWM_Start+0xb6>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2202      	movs	r2, #2
 800e6f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6f4:	e023      	b.n	800e73e <HAL_TIM_PWM_Start+0xfe>
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	2b04      	cmp	r3, #4
 800e6fa:	d104      	bne.n	800e706 <HAL_TIM_PWM_Start+0xc6>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2202      	movs	r2, #2
 800e700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e704:	e01b      	b.n	800e73e <HAL_TIM_PWM_Start+0xfe>
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	2b08      	cmp	r3, #8
 800e70a:	d104      	bne.n	800e716 <HAL_TIM_PWM_Start+0xd6>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2202      	movs	r2, #2
 800e710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e714:	e013      	b.n	800e73e <HAL_TIM_PWM_Start+0xfe>
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	2b0c      	cmp	r3, #12
 800e71a:	d104      	bne.n	800e726 <HAL_TIM_PWM_Start+0xe6>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2202      	movs	r2, #2
 800e720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e724:	e00b      	b.n	800e73e <HAL_TIM_PWM_Start+0xfe>
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2b10      	cmp	r3, #16
 800e72a:	d104      	bne.n	800e736 <HAL_TIM_PWM_Start+0xf6>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2202      	movs	r2, #2
 800e730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e734:	e003      	b.n	800e73e <HAL_TIM_PWM_Start+0xfe>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2202      	movs	r2, #2
 800e73a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2201      	movs	r2, #1
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	4618      	mov	r0, r3
 800e748:	f000 ffd4 	bl	800f6f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a38      	ldr	r2, [pc, #224]	; (800e834 <HAL_TIM_PWM_Start+0x1f4>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d013      	beq.n	800e77e <HAL_TIM_PWM_Start+0x13e>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a37      	ldr	r2, [pc, #220]	; (800e838 <HAL_TIM_PWM_Start+0x1f8>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d00e      	beq.n	800e77e <HAL_TIM_PWM_Start+0x13e>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a35      	ldr	r2, [pc, #212]	; (800e83c <HAL_TIM_PWM_Start+0x1fc>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d009      	beq.n	800e77e <HAL_TIM_PWM_Start+0x13e>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4a34      	ldr	r2, [pc, #208]	; (800e840 <HAL_TIM_PWM_Start+0x200>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d004      	beq.n	800e77e <HAL_TIM_PWM_Start+0x13e>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a32      	ldr	r2, [pc, #200]	; (800e844 <HAL_TIM_PWM_Start+0x204>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d101      	bne.n	800e782 <HAL_TIM_PWM_Start+0x142>
 800e77e:	2301      	movs	r3, #1
 800e780:	e000      	b.n	800e784 <HAL_TIM_PWM_Start+0x144>
 800e782:	2300      	movs	r3, #0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d007      	beq.n	800e798 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e796:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a25      	ldr	r2, [pc, #148]	; (800e834 <HAL_TIM_PWM_Start+0x1f4>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d022      	beq.n	800e7e8 <HAL_TIM_PWM_Start+0x1a8>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7aa:	d01d      	beq.n	800e7e8 <HAL_TIM_PWM_Start+0x1a8>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a25      	ldr	r2, [pc, #148]	; (800e848 <HAL_TIM_PWM_Start+0x208>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d018      	beq.n	800e7e8 <HAL_TIM_PWM_Start+0x1a8>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a24      	ldr	r2, [pc, #144]	; (800e84c <HAL_TIM_PWM_Start+0x20c>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d013      	beq.n	800e7e8 <HAL_TIM_PWM_Start+0x1a8>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a22      	ldr	r2, [pc, #136]	; (800e850 <HAL_TIM_PWM_Start+0x210>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d00e      	beq.n	800e7e8 <HAL_TIM_PWM_Start+0x1a8>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a1a      	ldr	r2, [pc, #104]	; (800e838 <HAL_TIM_PWM_Start+0x1f8>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d009      	beq.n	800e7e8 <HAL_TIM_PWM_Start+0x1a8>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a1e      	ldr	r2, [pc, #120]	; (800e854 <HAL_TIM_PWM_Start+0x214>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d004      	beq.n	800e7e8 <HAL_TIM_PWM_Start+0x1a8>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a16      	ldr	r2, [pc, #88]	; (800e83c <HAL_TIM_PWM_Start+0x1fc>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d115      	bne.n	800e814 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	689a      	ldr	r2, [r3, #8]
 800e7ee:	4b1a      	ldr	r3, [pc, #104]	; (800e858 <HAL_TIM_PWM_Start+0x218>)
 800e7f0:	4013      	ands	r3, r2
 800e7f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2b06      	cmp	r3, #6
 800e7f8:	d015      	beq.n	800e826 <HAL_TIM_PWM_Start+0x1e6>
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e800:	d011      	beq.n	800e826 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f042 0201 	orr.w	r2, r2, #1
 800e810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e812:	e008      	b.n	800e826 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f042 0201 	orr.w	r2, r2, #1
 800e822:	601a      	str	r2, [r3, #0]
 800e824:	e000      	b.n	800e828 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	40010000 	.word	0x40010000
 800e838:	40010400 	.word	0x40010400
 800e83c:	40014000 	.word	0x40014000
 800e840:	40014400 	.word	0x40014400
 800e844:	40014800 	.word	0x40014800
 800e848:	40000400 	.word	0x40000400
 800e84c:	40000800 	.word	0x40000800
 800e850:	40000c00 	.word	0x40000c00
 800e854:	40001800 	.word	0x40001800
 800e858:	00010007 	.word	0x00010007

0800e85c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	691b      	ldr	r3, [r3, #16]
 800e872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	f003 0302 	and.w	r3, r3, #2
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d020      	beq.n	800e8c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f003 0302 	and.w	r3, r3, #2
 800e884:	2b00      	cmp	r3, #0
 800e886:	d01b      	beq.n	800e8c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f06f 0202 	mvn.w	r2, #2
 800e890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2201      	movs	r2, #1
 800e896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	699b      	ldr	r3, [r3, #24]
 800e89e:	f003 0303 	and.w	r3, r3, #3
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d003      	beq.n	800e8ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f000 faec 	bl	800ee84 <HAL_TIM_IC_CaptureCallback>
 800e8ac:	e005      	b.n	800e8ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f7f1 fe98 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 faef 	bl	800ee98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	f003 0304 	and.w	r3, r3, #4
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d020      	beq.n	800e90c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f003 0304 	and.w	r3, r3, #4
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d01b      	beq.n	800e90c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f06f 0204 	mvn.w	r2, #4
 800e8dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2202      	movs	r2, #2
 800e8e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	699b      	ldr	r3, [r3, #24]
 800e8ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d003      	beq.n	800e8fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 fac6 	bl	800ee84 <HAL_TIM_IC_CaptureCallback>
 800e8f8:	e005      	b.n	800e906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7f1 fe72 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f000 fac9 	bl	800ee98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2200      	movs	r2, #0
 800e90a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	f003 0308 	and.w	r3, r3, #8
 800e912:	2b00      	cmp	r3, #0
 800e914:	d020      	beq.n	800e958 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f003 0308 	and.w	r3, r3, #8
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d01b      	beq.n	800e958 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f06f 0208 	mvn.w	r2, #8
 800e928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2204      	movs	r2, #4
 800e92e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	69db      	ldr	r3, [r3, #28]
 800e936:	f003 0303 	and.w	r3, r3, #3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 faa0 	bl	800ee84 <HAL_TIM_IC_CaptureCallback>
 800e944:	e005      	b.n	800e952 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7f1 fe4c 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 faa3 	bl	800ee98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2200      	movs	r2, #0
 800e956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	f003 0310 	and.w	r3, r3, #16
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d020      	beq.n	800e9a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f003 0310 	and.w	r3, r3, #16
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d01b      	beq.n	800e9a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f06f 0210 	mvn.w	r2, #16
 800e974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2208      	movs	r2, #8
 800e97a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	69db      	ldr	r3, [r3, #28]
 800e982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e986:	2b00      	cmp	r3, #0
 800e988:	d003      	beq.n	800e992 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 fa7a 	bl	800ee84 <HAL_TIM_IC_CaptureCallback>
 800e990:	e005      	b.n	800e99e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7f1 fe26 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 fa7d 	bl	800ee98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	f003 0301 	and.w	r3, r3, #1
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00c      	beq.n	800e9c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f003 0301 	and.w	r3, r3, #1
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d007      	beq.n	800e9c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f06f 0201 	mvn.w	r2, #1
 800e9c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f7f3 ffb6 	bl	8002934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d104      	bne.n	800e9dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00c      	beq.n	800e9f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d007      	beq.n	800e9f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800e9ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 ffbb 	bl	800f96c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00c      	beq.n	800ea1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d007      	beq.n	800ea1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ea12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 ffb3 	bl	800f980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00c      	beq.n	800ea3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d007      	beq.n	800ea3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 fa37 	bl	800eeac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	f003 0320 	and.w	r3, r3, #32
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00c      	beq.n	800ea62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f003 0320 	and.w	r3, r3, #32
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d007      	beq.n	800ea62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f06f 0220 	mvn.w	r2, #32
 800ea5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 ff7b 	bl	800f958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ea62:	bf00      	nop
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
	...

0800ea6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d101      	bne.n	800ea8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ea86:	2302      	movs	r3, #2
 800ea88:	e0ff      	b.n	800ec8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b14      	cmp	r3, #20
 800ea96:	f200 80f0 	bhi.w	800ec7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ea9a:	a201      	add	r2, pc, #4	; (adr r2, 800eaa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ea9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa0:	0800eaf5 	.word	0x0800eaf5
 800eaa4:	0800ec7b 	.word	0x0800ec7b
 800eaa8:	0800ec7b 	.word	0x0800ec7b
 800eaac:	0800ec7b 	.word	0x0800ec7b
 800eab0:	0800eb35 	.word	0x0800eb35
 800eab4:	0800ec7b 	.word	0x0800ec7b
 800eab8:	0800ec7b 	.word	0x0800ec7b
 800eabc:	0800ec7b 	.word	0x0800ec7b
 800eac0:	0800eb77 	.word	0x0800eb77
 800eac4:	0800ec7b 	.word	0x0800ec7b
 800eac8:	0800ec7b 	.word	0x0800ec7b
 800eacc:	0800ec7b 	.word	0x0800ec7b
 800ead0:	0800ebb7 	.word	0x0800ebb7
 800ead4:	0800ec7b 	.word	0x0800ec7b
 800ead8:	0800ec7b 	.word	0x0800ec7b
 800eadc:	0800ec7b 	.word	0x0800ec7b
 800eae0:	0800ebf9 	.word	0x0800ebf9
 800eae4:	0800ec7b 	.word	0x0800ec7b
 800eae8:	0800ec7b 	.word	0x0800ec7b
 800eaec:	0800ec7b 	.word	0x0800ec7b
 800eaf0:	0800ec39 	.word	0x0800ec39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	68b9      	ldr	r1, [r7, #8]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f000 fa86 	bl	800f00c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	699a      	ldr	r2, [r3, #24]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f042 0208 	orr.w	r2, r2, #8
 800eb0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	699a      	ldr	r2, [r3, #24]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f022 0204 	bic.w	r2, r2, #4
 800eb1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	6999      	ldr	r1, [r3, #24]
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	691a      	ldr	r2, [r3, #16]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	430a      	orrs	r2, r1
 800eb30:	619a      	str	r2, [r3, #24]
      break;
 800eb32:	e0a5      	b.n	800ec80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68b9      	ldr	r1, [r7, #8]
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 faf6 	bl	800f12c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	699a      	ldr	r2, [r3, #24]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	699a      	ldr	r2, [r3, #24]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	6999      	ldr	r1, [r3, #24]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	691b      	ldr	r3, [r3, #16]
 800eb6a:	021a      	lsls	r2, r3, #8
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	430a      	orrs	r2, r1
 800eb72:	619a      	str	r2, [r3, #24]
      break;
 800eb74:	e084      	b.n	800ec80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	68b9      	ldr	r1, [r7, #8]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f000 fb5f 	bl	800f240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	69da      	ldr	r2, [r3, #28]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f042 0208 	orr.w	r2, r2, #8
 800eb90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	69da      	ldr	r2, [r3, #28]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f022 0204 	bic.w	r2, r2, #4
 800eba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	69d9      	ldr	r1, [r3, #28]
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	691a      	ldr	r2, [r3, #16]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	430a      	orrs	r2, r1
 800ebb2:	61da      	str	r2, [r3, #28]
      break;
 800ebb4:	e064      	b.n	800ec80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68b9      	ldr	r1, [r7, #8]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f000 fbc7 	bl	800f350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	69da      	ldr	r2, [r3, #28]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	69da      	ldr	r2, [r3, #28]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	69d9      	ldr	r1, [r3, #28]
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	021a      	lsls	r2, r3, #8
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	430a      	orrs	r2, r1
 800ebf4:	61da      	str	r2, [r3, #28]
      break;
 800ebf6:	e043      	b.n	800ec80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68b9      	ldr	r1, [r7, #8]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f000 fc10 	bl	800f424 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f042 0208 	orr.w	r2, r2, #8
 800ec12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f022 0204 	bic.w	r2, r2, #4
 800ec22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	691a      	ldr	r2, [r3, #16]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	430a      	orrs	r2, r1
 800ec34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ec36:	e023      	b.n	800ec80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68b9      	ldr	r1, [r7, #8]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 fc54 	bl	800f4ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	691b      	ldr	r3, [r3, #16]
 800ec6e:	021a      	lsls	r2, r3, #8
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	430a      	orrs	r2, r1
 800ec76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ec78:	e002      	b.n	800ec80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ec7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ec88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop

0800ec94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d101      	bne.n	800ecb0 <HAL_TIM_ConfigClockSource+0x1c>
 800ecac:	2302      	movs	r3, #2
 800ecae:	e0dc      	b.n	800ee6a <HAL_TIM_ConfigClockSource+0x1d6>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2202      	movs	r2, #2
 800ecbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ecc8:	68ba      	ldr	r2, [r7, #8]
 800ecca:	4b6a      	ldr	r3, [pc, #424]	; (800ee74 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eccc:	4013      	ands	r3, r2
 800ecce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ecd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	68ba      	ldr	r2, [r7, #8]
 800ecde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a64      	ldr	r2, [pc, #400]	; (800ee78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	f000 80a9 	beq.w	800ee3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ecec:	4a62      	ldr	r2, [pc, #392]	; (800ee78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	f200 80ae 	bhi.w	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ecf4:	4a61      	ldr	r2, [pc, #388]	; (800ee7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	f000 80a1 	beq.w	800ee3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ecfc:	4a5f      	ldr	r2, [pc, #380]	; (800ee7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	f200 80a6 	bhi.w	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed04:	4a5e      	ldr	r2, [pc, #376]	; (800ee80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	f000 8099 	beq.w	800ee3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed0c:	4a5c      	ldr	r2, [pc, #368]	; (800ee80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	f200 809e 	bhi.w	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ed18:	f000 8091 	beq.w	800ee3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ed20:	f200 8096 	bhi.w	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed28:	f000 8089 	beq.w	800ee3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed30:	f200 808e 	bhi.w	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed38:	d03e      	beq.n	800edb8 <HAL_TIM_ConfigClockSource+0x124>
 800ed3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed3e:	f200 8087 	bhi.w	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed46:	f000 8086 	beq.w	800ee56 <HAL_TIM_ConfigClockSource+0x1c2>
 800ed4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed4e:	d87f      	bhi.n	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed50:	2b70      	cmp	r3, #112	; 0x70
 800ed52:	d01a      	beq.n	800ed8a <HAL_TIM_ConfigClockSource+0xf6>
 800ed54:	2b70      	cmp	r3, #112	; 0x70
 800ed56:	d87b      	bhi.n	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed58:	2b60      	cmp	r3, #96	; 0x60
 800ed5a:	d050      	beq.n	800edfe <HAL_TIM_ConfigClockSource+0x16a>
 800ed5c:	2b60      	cmp	r3, #96	; 0x60
 800ed5e:	d877      	bhi.n	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed60:	2b50      	cmp	r3, #80	; 0x50
 800ed62:	d03c      	beq.n	800edde <HAL_TIM_ConfigClockSource+0x14a>
 800ed64:	2b50      	cmp	r3, #80	; 0x50
 800ed66:	d873      	bhi.n	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed68:	2b40      	cmp	r3, #64	; 0x40
 800ed6a:	d058      	beq.n	800ee1e <HAL_TIM_ConfigClockSource+0x18a>
 800ed6c:	2b40      	cmp	r3, #64	; 0x40
 800ed6e:	d86f      	bhi.n	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed70:	2b30      	cmp	r3, #48	; 0x30
 800ed72:	d064      	beq.n	800ee3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed74:	2b30      	cmp	r3, #48	; 0x30
 800ed76:	d86b      	bhi.n	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed78:	2b20      	cmp	r3, #32
 800ed7a:	d060      	beq.n	800ee3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed7c:	2b20      	cmp	r3, #32
 800ed7e:	d867      	bhi.n	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d05c      	beq.n	800ee3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed84:	2b10      	cmp	r3, #16
 800ed86:	d05a      	beq.n	800ee3e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed88:	e062      	b.n	800ee50 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	6899      	ldr	r1, [r3, #8]
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	685a      	ldr	r2, [r3, #4]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	68db      	ldr	r3, [r3, #12]
 800ed9a:	f000 fc8b 	bl	800f6b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	689b      	ldr	r3, [r3, #8]
 800eda4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800edac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	609a      	str	r2, [r3, #8]
      break;
 800edb6:	e04f      	b.n	800ee58 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6818      	ldr	r0, [r3, #0]
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	6899      	ldr	r1, [r3, #8]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	685a      	ldr	r2, [r3, #4]
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	f000 fc74 	bl	800f6b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	689a      	ldr	r2, [r3, #8]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800edda:	609a      	str	r2, [r3, #8]
      break;
 800eddc:	e03c      	b.n	800ee58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6818      	ldr	r0, [r3, #0]
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	6859      	ldr	r1, [r3, #4]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	461a      	mov	r2, r3
 800edec:	f000 fbe4 	bl	800f5b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2150      	movs	r1, #80	; 0x50
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 fc3e 	bl	800f678 <TIM_ITRx_SetConfig>
      break;
 800edfc:	e02c      	b.n	800ee58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6818      	ldr	r0, [r3, #0]
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	6859      	ldr	r1, [r3, #4]
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	f000 fc03 	bl	800f616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	2160      	movs	r1, #96	; 0x60
 800ee16:	4618      	mov	r0, r3
 800ee18:	f000 fc2e 	bl	800f678 <TIM_ITRx_SetConfig>
      break;
 800ee1c:	e01c      	b.n	800ee58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6818      	ldr	r0, [r3, #0]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	6859      	ldr	r1, [r3, #4]
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	68db      	ldr	r3, [r3, #12]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	f000 fbc4 	bl	800f5b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2140      	movs	r1, #64	; 0x40
 800ee36:	4618      	mov	r0, r3
 800ee38:	f000 fc1e 	bl	800f678 <TIM_ITRx_SetConfig>
      break;
 800ee3c:	e00c      	b.n	800ee58 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	4619      	mov	r1, r3
 800ee48:	4610      	mov	r0, r2
 800ee4a:	f000 fc15 	bl	800f678 <TIM_ITRx_SetConfig>
      break;
 800ee4e:	e003      	b.n	800ee58 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ee50:	2301      	movs	r3, #1
 800ee52:	73fb      	strb	r3, [r7, #15]
      break;
 800ee54:	e000      	b.n	800ee58 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ee56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ee68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	ffceff88 	.word	0xffceff88
 800ee78:	00100040 	.word	0x00100040
 800ee7c:	00100030 	.word	0x00100030
 800ee80:	00100020 	.word	0x00100020

0800ee84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ee8c:	bf00      	nop
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eea0:	bf00      	nop
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eeb4:	bf00      	nop
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr

0800eec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a46      	ldr	r2, [pc, #280]	; (800efec <TIM_Base_SetConfig+0x12c>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d013      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eede:	d00f      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a43      	ldr	r2, [pc, #268]	; (800eff0 <TIM_Base_SetConfig+0x130>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d00b      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a42      	ldr	r2, [pc, #264]	; (800eff4 <TIM_Base_SetConfig+0x134>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d007      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4a41      	ldr	r2, [pc, #260]	; (800eff8 <TIM_Base_SetConfig+0x138>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d003      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4a40      	ldr	r2, [pc, #256]	; (800effc <TIM_Base_SetConfig+0x13c>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d108      	bne.n	800ef12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4a35      	ldr	r2, [pc, #212]	; (800efec <TIM_Base_SetConfig+0x12c>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d01f      	beq.n	800ef5a <TIM_Base_SetConfig+0x9a>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef20:	d01b      	beq.n	800ef5a <TIM_Base_SetConfig+0x9a>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4a32      	ldr	r2, [pc, #200]	; (800eff0 <TIM_Base_SetConfig+0x130>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d017      	beq.n	800ef5a <TIM_Base_SetConfig+0x9a>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4a31      	ldr	r2, [pc, #196]	; (800eff4 <TIM_Base_SetConfig+0x134>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d013      	beq.n	800ef5a <TIM_Base_SetConfig+0x9a>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4a30      	ldr	r2, [pc, #192]	; (800eff8 <TIM_Base_SetConfig+0x138>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d00f      	beq.n	800ef5a <TIM_Base_SetConfig+0x9a>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4a2f      	ldr	r2, [pc, #188]	; (800effc <TIM_Base_SetConfig+0x13c>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d00b      	beq.n	800ef5a <TIM_Base_SetConfig+0x9a>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a2e      	ldr	r2, [pc, #184]	; (800f000 <TIM_Base_SetConfig+0x140>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d007      	beq.n	800ef5a <TIM_Base_SetConfig+0x9a>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4a2d      	ldr	r2, [pc, #180]	; (800f004 <TIM_Base_SetConfig+0x144>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d003      	beq.n	800ef5a <TIM_Base_SetConfig+0x9a>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a2c      	ldr	r2, [pc, #176]	; (800f008 <TIM_Base_SetConfig+0x148>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d108      	bne.n	800ef6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	695b      	ldr	r3, [r3, #20]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	689a      	ldr	r2, [r3, #8]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4a16      	ldr	r2, [pc, #88]	; (800efec <TIM_Base_SetConfig+0x12c>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d00f      	beq.n	800efb8 <TIM_Base_SetConfig+0xf8>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a18      	ldr	r2, [pc, #96]	; (800effc <TIM_Base_SetConfig+0x13c>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d00b      	beq.n	800efb8 <TIM_Base_SetConfig+0xf8>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a17      	ldr	r2, [pc, #92]	; (800f000 <TIM_Base_SetConfig+0x140>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d007      	beq.n	800efb8 <TIM_Base_SetConfig+0xf8>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a16      	ldr	r2, [pc, #88]	; (800f004 <TIM_Base_SetConfig+0x144>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d003      	beq.n	800efb8 <TIM_Base_SetConfig+0xf8>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4a15      	ldr	r2, [pc, #84]	; (800f008 <TIM_Base_SetConfig+0x148>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d103      	bne.n	800efc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	691a      	ldr	r2, [r3, #16]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2201      	movs	r2, #1
 800efc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	691b      	ldr	r3, [r3, #16]
 800efca:	f003 0301 	and.w	r3, r3, #1
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d105      	bne.n	800efde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	691b      	ldr	r3, [r3, #16]
 800efd6:	f023 0201 	bic.w	r2, r3, #1
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	611a      	str	r2, [r3, #16]
  }
}
 800efde:	bf00      	nop
 800efe0:	3714      	adds	r7, #20
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop
 800efec:	40010000 	.word	0x40010000
 800eff0:	40000400 	.word	0x40000400
 800eff4:	40000800 	.word	0x40000800
 800eff8:	40000c00 	.word	0x40000c00
 800effc:	40010400 	.word	0x40010400
 800f000:	40014000 	.word	0x40014000
 800f004:	40014400 	.word	0x40014400
 800f008:	40014800 	.word	0x40014800

0800f00c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b087      	sub	sp, #28
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a1b      	ldr	r3, [r3, #32]
 800f01a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	f023 0201 	bic.w	r2, r3, #1
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	4b37      	ldr	r3, [pc, #220]	; (800f114 <TIM_OC1_SetConfig+0x108>)
 800f038:	4013      	ands	r3, r2
 800f03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f023 0303 	bic.w	r3, r3, #3
 800f042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	f023 0302 	bic.w	r3, r3, #2
 800f054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a2d      	ldr	r2, [pc, #180]	; (800f118 <TIM_OC1_SetConfig+0x10c>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d00f      	beq.n	800f088 <TIM_OC1_SetConfig+0x7c>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4a2c      	ldr	r2, [pc, #176]	; (800f11c <TIM_OC1_SetConfig+0x110>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d00b      	beq.n	800f088 <TIM_OC1_SetConfig+0x7c>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4a2b      	ldr	r2, [pc, #172]	; (800f120 <TIM_OC1_SetConfig+0x114>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d007      	beq.n	800f088 <TIM_OC1_SetConfig+0x7c>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4a2a      	ldr	r2, [pc, #168]	; (800f124 <TIM_OC1_SetConfig+0x118>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d003      	beq.n	800f088 <TIM_OC1_SetConfig+0x7c>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4a29      	ldr	r2, [pc, #164]	; (800f128 <TIM_OC1_SetConfig+0x11c>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d10c      	bne.n	800f0a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	f023 0308 	bic.w	r3, r3, #8
 800f08e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	697a      	ldr	r2, [r7, #20]
 800f096:	4313      	orrs	r3, r2
 800f098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	f023 0304 	bic.w	r3, r3, #4
 800f0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4a1c      	ldr	r2, [pc, #112]	; (800f118 <TIM_OC1_SetConfig+0x10c>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d00f      	beq.n	800f0ca <TIM_OC1_SetConfig+0xbe>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4a1b      	ldr	r2, [pc, #108]	; (800f11c <TIM_OC1_SetConfig+0x110>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d00b      	beq.n	800f0ca <TIM_OC1_SetConfig+0xbe>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4a1a      	ldr	r2, [pc, #104]	; (800f120 <TIM_OC1_SetConfig+0x114>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d007      	beq.n	800f0ca <TIM_OC1_SetConfig+0xbe>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4a19      	ldr	r2, [pc, #100]	; (800f124 <TIM_OC1_SetConfig+0x118>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d003      	beq.n	800f0ca <TIM_OC1_SetConfig+0xbe>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4a18      	ldr	r2, [pc, #96]	; (800f128 <TIM_OC1_SetConfig+0x11c>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d111      	bne.n	800f0ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	695b      	ldr	r3, [r3, #20]
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	699b      	ldr	r3, [r3, #24]
 800f0e8:	693a      	ldr	r2, [r7, #16]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	68fa      	ldr	r2, [r7, #12]
 800f0f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	697a      	ldr	r2, [r7, #20]
 800f106:	621a      	str	r2, [r3, #32]
}
 800f108:	bf00      	nop
 800f10a:	371c      	adds	r7, #28
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr
 800f114:	fffeff8f 	.word	0xfffeff8f
 800f118:	40010000 	.word	0x40010000
 800f11c:	40010400 	.word	0x40010400
 800f120:	40014000 	.word	0x40014000
 800f124:	40014400 	.word	0x40014400
 800f128:	40014800 	.word	0x40014800

0800f12c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b087      	sub	sp, #28
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6a1b      	ldr	r3, [r3, #32]
 800f13a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6a1b      	ldr	r3, [r3, #32]
 800f140:	f023 0210 	bic.w	r2, r3, #16
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	699b      	ldr	r3, [r3, #24]
 800f152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	4b34      	ldr	r3, [pc, #208]	; (800f228 <TIM_OC2_SetConfig+0xfc>)
 800f158:	4013      	ands	r3, r2
 800f15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	021b      	lsls	r3, r3, #8
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f023 0320 	bic.w	r3, r3, #32
 800f176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	011b      	lsls	r3, r3, #4
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	4313      	orrs	r3, r2
 800f182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a29      	ldr	r2, [pc, #164]	; (800f22c <TIM_OC2_SetConfig+0x100>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d003      	beq.n	800f194 <TIM_OC2_SetConfig+0x68>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a28      	ldr	r2, [pc, #160]	; (800f230 <TIM_OC2_SetConfig+0x104>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d10d      	bne.n	800f1b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	011b      	lsls	r3, r3, #4
 800f1a2:	697a      	ldr	r2, [r7, #20]
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a1e      	ldr	r2, [pc, #120]	; (800f22c <TIM_OC2_SetConfig+0x100>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d00f      	beq.n	800f1d8 <TIM_OC2_SetConfig+0xac>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a1d      	ldr	r2, [pc, #116]	; (800f230 <TIM_OC2_SetConfig+0x104>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d00b      	beq.n	800f1d8 <TIM_OC2_SetConfig+0xac>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a1c      	ldr	r2, [pc, #112]	; (800f234 <TIM_OC2_SetConfig+0x108>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d007      	beq.n	800f1d8 <TIM_OC2_SetConfig+0xac>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a1b      	ldr	r2, [pc, #108]	; (800f238 <TIM_OC2_SetConfig+0x10c>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d003      	beq.n	800f1d8 <TIM_OC2_SetConfig+0xac>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a1a      	ldr	r2, [pc, #104]	; (800f23c <TIM_OC2_SetConfig+0x110>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d113      	bne.n	800f200 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	695b      	ldr	r3, [r3, #20]
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	693a      	ldr	r2, [r7, #16]
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	009b      	lsls	r3, r3, #2
 800f1fa:	693a      	ldr	r2, [r7, #16]
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	693a      	ldr	r2, [r7, #16]
 800f204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	685a      	ldr	r2, [r3, #4]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	697a      	ldr	r2, [r7, #20]
 800f218:	621a      	str	r2, [r3, #32]
}
 800f21a:	bf00      	nop
 800f21c:	371c      	adds	r7, #28
 800f21e:	46bd      	mov	sp, r7
 800f220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop
 800f228:	feff8fff 	.word	0xfeff8fff
 800f22c:	40010000 	.word	0x40010000
 800f230:	40010400 	.word	0x40010400
 800f234:	40014000 	.word	0x40014000
 800f238:	40014400 	.word	0x40014400
 800f23c:	40014800 	.word	0x40014800

0800f240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f240:	b480      	push	{r7}
 800f242:	b087      	sub	sp, #28
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a1b      	ldr	r3, [r3, #32]
 800f24e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a1b      	ldr	r3, [r3, #32]
 800f254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	69db      	ldr	r3, [r3, #28]
 800f266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f268:	68fa      	ldr	r2, [r7, #12]
 800f26a:	4b33      	ldr	r3, [pc, #204]	; (800f338 <TIM_OC3_SetConfig+0xf8>)
 800f26c:	4013      	ands	r3, r2
 800f26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f023 0303 	bic.w	r3, r3, #3
 800f276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	4313      	orrs	r3, r2
 800f280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	021b      	lsls	r3, r3, #8
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	4313      	orrs	r3, r2
 800f294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4a28      	ldr	r2, [pc, #160]	; (800f33c <TIM_OC3_SetConfig+0xfc>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d003      	beq.n	800f2a6 <TIM_OC3_SetConfig+0x66>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4a27      	ldr	r2, [pc, #156]	; (800f340 <TIM_OC3_SetConfig+0x100>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d10d      	bne.n	800f2c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	021b      	lsls	r3, r3, #8
 800f2b4:	697a      	ldr	r2, [r7, #20]
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	4a1d      	ldr	r2, [pc, #116]	; (800f33c <TIM_OC3_SetConfig+0xfc>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d00f      	beq.n	800f2ea <TIM_OC3_SetConfig+0xaa>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4a1c      	ldr	r2, [pc, #112]	; (800f340 <TIM_OC3_SetConfig+0x100>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d00b      	beq.n	800f2ea <TIM_OC3_SetConfig+0xaa>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4a1b      	ldr	r2, [pc, #108]	; (800f344 <TIM_OC3_SetConfig+0x104>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d007      	beq.n	800f2ea <TIM_OC3_SetConfig+0xaa>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a1a      	ldr	r2, [pc, #104]	; (800f348 <TIM_OC3_SetConfig+0x108>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d003      	beq.n	800f2ea <TIM_OC3_SetConfig+0xaa>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a19      	ldr	r2, [pc, #100]	; (800f34c <TIM_OC3_SetConfig+0x10c>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d113      	bne.n	800f312 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	695b      	ldr	r3, [r3, #20]
 800f2fe:	011b      	lsls	r3, r3, #4
 800f300:	693a      	ldr	r2, [r7, #16]
 800f302:	4313      	orrs	r3, r2
 800f304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	699b      	ldr	r3, [r3, #24]
 800f30a:	011b      	lsls	r3, r3, #4
 800f30c:	693a      	ldr	r2, [r7, #16]
 800f30e:	4313      	orrs	r3, r2
 800f310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	693a      	ldr	r2, [r7, #16]
 800f316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	685a      	ldr	r2, [r3, #4]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	697a      	ldr	r2, [r7, #20]
 800f32a:	621a      	str	r2, [r3, #32]
}
 800f32c:	bf00      	nop
 800f32e:	371c      	adds	r7, #28
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	fffeff8f 	.word	0xfffeff8f
 800f33c:	40010000 	.word	0x40010000
 800f340:	40010400 	.word	0x40010400
 800f344:	40014000 	.word	0x40014000
 800f348:	40014400 	.word	0x40014400
 800f34c:	40014800 	.word	0x40014800

0800f350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f350:	b480      	push	{r7}
 800f352:	b087      	sub	sp, #28
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6a1b      	ldr	r3, [r3, #32]
 800f35e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6a1b      	ldr	r3, [r3, #32]
 800f364:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	69db      	ldr	r3, [r3, #28]
 800f376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	4b24      	ldr	r3, [pc, #144]	; (800f40c <TIM_OC4_SetConfig+0xbc>)
 800f37c:	4013      	ands	r3, r2
 800f37e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	021b      	lsls	r3, r3, #8
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	4313      	orrs	r3, r2
 800f392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f39a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	031b      	lsls	r3, r3, #12
 800f3a2:	693a      	ldr	r2, [r7, #16]
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4a19      	ldr	r2, [pc, #100]	; (800f410 <TIM_OC4_SetConfig+0xc0>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d00f      	beq.n	800f3d0 <TIM_OC4_SetConfig+0x80>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4a18      	ldr	r2, [pc, #96]	; (800f414 <TIM_OC4_SetConfig+0xc4>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d00b      	beq.n	800f3d0 <TIM_OC4_SetConfig+0x80>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4a17      	ldr	r2, [pc, #92]	; (800f418 <TIM_OC4_SetConfig+0xc8>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d007      	beq.n	800f3d0 <TIM_OC4_SetConfig+0x80>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4a16      	ldr	r2, [pc, #88]	; (800f41c <TIM_OC4_SetConfig+0xcc>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d003      	beq.n	800f3d0 <TIM_OC4_SetConfig+0x80>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a15      	ldr	r2, [pc, #84]	; (800f420 <TIM_OC4_SetConfig+0xd0>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d109      	bne.n	800f3e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	695b      	ldr	r3, [r3, #20]
 800f3dc:	019b      	lsls	r3, r3, #6
 800f3de:	697a      	ldr	r2, [r7, #20]
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	697a      	ldr	r2, [r7, #20]
 800f3e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	685a      	ldr	r2, [r3, #4]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	693a      	ldr	r2, [r7, #16]
 800f3fc:	621a      	str	r2, [r3, #32]
}
 800f3fe:	bf00      	nop
 800f400:	371c      	adds	r7, #28
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop
 800f40c:	feff8fff 	.word	0xfeff8fff
 800f410:	40010000 	.word	0x40010000
 800f414:	40010400 	.word	0x40010400
 800f418:	40014000 	.word	0x40014000
 800f41c:	40014400 	.word	0x40014400
 800f420:	40014800 	.word	0x40014800

0800f424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f424:	b480      	push	{r7}
 800f426:	b087      	sub	sp, #28
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6a1b      	ldr	r3, [r3, #32]
 800f432:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a1b      	ldr	r3, [r3, #32]
 800f438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	4b21      	ldr	r3, [pc, #132]	; (800f4d4 <TIM_OC5_SetConfig+0xb0>)
 800f450:	4013      	ands	r3, r2
 800f452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	4313      	orrs	r3, r2
 800f45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f464:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	041b      	lsls	r3, r3, #16
 800f46c:	693a      	ldr	r2, [r7, #16]
 800f46e:	4313      	orrs	r3, r2
 800f470:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4a18      	ldr	r2, [pc, #96]	; (800f4d8 <TIM_OC5_SetConfig+0xb4>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d00f      	beq.n	800f49a <TIM_OC5_SetConfig+0x76>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4a17      	ldr	r2, [pc, #92]	; (800f4dc <TIM_OC5_SetConfig+0xb8>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d00b      	beq.n	800f49a <TIM_OC5_SetConfig+0x76>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4a16      	ldr	r2, [pc, #88]	; (800f4e0 <TIM_OC5_SetConfig+0xbc>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d007      	beq.n	800f49a <TIM_OC5_SetConfig+0x76>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4a15      	ldr	r2, [pc, #84]	; (800f4e4 <TIM_OC5_SetConfig+0xc0>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d003      	beq.n	800f49a <TIM_OC5_SetConfig+0x76>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a14      	ldr	r2, [pc, #80]	; (800f4e8 <TIM_OC5_SetConfig+0xc4>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d109      	bne.n	800f4ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	695b      	ldr	r3, [r3, #20]
 800f4a6:	021b      	lsls	r3, r3, #8
 800f4a8:	697a      	ldr	r2, [r7, #20]
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	697a      	ldr	r2, [r7, #20]
 800f4b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	685a      	ldr	r2, [r3, #4]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	621a      	str	r2, [r3, #32]
}
 800f4c8:	bf00      	nop
 800f4ca:	371c      	adds	r7, #28
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	fffeff8f 	.word	0xfffeff8f
 800f4d8:	40010000 	.word	0x40010000
 800f4dc:	40010400 	.word	0x40010400
 800f4e0:	40014000 	.word	0x40014000
 800f4e4:	40014400 	.word	0x40014400
 800f4e8:	40014800 	.word	0x40014800

0800f4ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b087      	sub	sp, #28
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6a1b      	ldr	r3, [r3, #32]
 800f4fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a1b      	ldr	r3, [r3, #32]
 800f500:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	4b22      	ldr	r3, [pc, #136]	; (800f5a0 <TIM_OC6_SetConfig+0xb4>)
 800f518:	4013      	ands	r3, r2
 800f51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	021b      	lsls	r3, r3, #8
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	4313      	orrs	r3, r2
 800f526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f52e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	051b      	lsls	r3, r3, #20
 800f536:	693a      	ldr	r2, [r7, #16]
 800f538:	4313      	orrs	r3, r2
 800f53a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4a19      	ldr	r2, [pc, #100]	; (800f5a4 <TIM_OC6_SetConfig+0xb8>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d00f      	beq.n	800f564 <TIM_OC6_SetConfig+0x78>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a18      	ldr	r2, [pc, #96]	; (800f5a8 <TIM_OC6_SetConfig+0xbc>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d00b      	beq.n	800f564 <TIM_OC6_SetConfig+0x78>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a17      	ldr	r2, [pc, #92]	; (800f5ac <TIM_OC6_SetConfig+0xc0>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d007      	beq.n	800f564 <TIM_OC6_SetConfig+0x78>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a16      	ldr	r2, [pc, #88]	; (800f5b0 <TIM_OC6_SetConfig+0xc4>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d003      	beq.n	800f564 <TIM_OC6_SetConfig+0x78>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a15      	ldr	r2, [pc, #84]	; (800f5b4 <TIM_OC6_SetConfig+0xc8>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d109      	bne.n	800f578 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f56a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	695b      	ldr	r3, [r3, #20]
 800f570:	029b      	lsls	r3, r3, #10
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	4313      	orrs	r3, r2
 800f576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	697a      	ldr	r2, [r7, #20]
 800f57c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	685a      	ldr	r2, [r3, #4]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	693a      	ldr	r2, [r7, #16]
 800f590:	621a      	str	r2, [r3, #32]
}
 800f592:	bf00      	nop
 800f594:	371c      	adds	r7, #28
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr
 800f59e:	bf00      	nop
 800f5a0:	feff8fff 	.word	0xfeff8fff
 800f5a4:	40010000 	.word	0x40010000
 800f5a8:	40010400 	.word	0x40010400
 800f5ac:	40014000 	.word	0x40014000
 800f5b0:	40014400 	.word	0x40014400
 800f5b4:	40014800 	.word	0x40014800

0800f5b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b087      	sub	sp, #28
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6a1b      	ldr	r3, [r3, #32]
 800f5c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	f023 0201 	bic.w	r2, r3, #1
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f5e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	011b      	lsls	r3, r3, #4
 800f5e8:	693a      	ldr	r2, [r7, #16]
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	f023 030a 	bic.w	r3, r3, #10
 800f5f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	697a      	ldr	r2, [r7, #20]
 800f608:	621a      	str	r2, [r3, #32]
}
 800f60a:	bf00      	nop
 800f60c:	371c      	adds	r7, #28
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr

0800f616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f616:	b480      	push	{r7}
 800f618:	b087      	sub	sp, #28
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	60f8      	str	r0, [r7, #12]
 800f61e:	60b9      	str	r1, [r7, #8]
 800f620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6a1b      	ldr	r3, [r3, #32]
 800f626:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6a1b      	ldr	r3, [r3, #32]
 800f62c:	f023 0210 	bic.w	r2, r3, #16
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	699b      	ldr	r3, [r3, #24]
 800f638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	031b      	lsls	r3, r3, #12
 800f646:	693a      	ldr	r2, [r7, #16]
 800f648:	4313      	orrs	r3, r2
 800f64a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f652:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	011b      	lsls	r3, r3, #4
 800f658:	697a      	ldr	r2, [r7, #20]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	621a      	str	r2, [r3, #32]
}
 800f66a:	bf00      	nop
 800f66c:	371c      	adds	r7, #28
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr
	...

0800f678 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f678:	b480      	push	{r7}
 800f67a:	b085      	sub	sp, #20
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	4b09      	ldr	r3, [pc, #36]	; (800f6b0 <TIM_ITRx_SetConfig+0x38>)
 800f68c:	4013      	ands	r3, r2
 800f68e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f690:	683a      	ldr	r2, [r7, #0]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	4313      	orrs	r3, r2
 800f696:	f043 0307 	orr.w	r3, r3, #7
 800f69a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	609a      	str	r2, [r3, #8]
}
 800f6a2:	bf00      	nop
 800f6a4:	3714      	adds	r7, #20
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	ffcfff8f 	.word	0xffcfff8f

0800f6b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b087      	sub	sp, #28
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
 800f6c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f6ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	021a      	lsls	r2, r3, #8
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	431a      	orrs	r2, r3
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	697a      	ldr	r2, [r7, #20]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	697a      	ldr	r2, [r7, #20]
 800f6e6:	609a      	str	r2, [r3, #8]
}
 800f6e8:	bf00      	nop
 800f6ea:	371c      	adds	r7, #28
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr

0800f6f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b087      	sub	sp, #28
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	f003 031f 	and.w	r3, r3, #31
 800f706:	2201      	movs	r2, #1
 800f708:	fa02 f303 	lsl.w	r3, r2, r3
 800f70c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6a1a      	ldr	r2, [r3, #32]
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	43db      	mvns	r3, r3
 800f716:	401a      	ands	r2, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6a1a      	ldr	r2, [r3, #32]
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	f003 031f 	and.w	r3, r3, #31
 800f726:	6879      	ldr	r1, [r7, #4]
 800f728:	fa01 f303 	lsl.w	r3, r1, r3
 800f72c:	431a      	orrs	r2, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	621a      	str	r2, [r3, #32]
}
 800f732:	bf00      	nop
 800f734:	371c      	adds	r7, #28
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
	...

0800f740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f740:	b480      	push	{r7}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f750:	2b01      	cmp	r3, #1
 800f752:	d101      	bne.n	800f758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f754:	2302      	movs	r3, #2
 800f756:	e06d      	b.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2202      	movs	r2, #2
 800f764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a30      	ldr	r2, [pc, #192]	; (800f840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d004      	beq.n	800f78c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a2f      	ldr	r2, [pc, #188]	; (800f844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d108      	bne.n	800f79e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	4313      	orrs	r3, r2
 800f79c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a20      	ldr	r2, [pc, #128]	; (800f840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d022      	beq.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7ca:	d01d      	beq.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a1d      	ldr	r2, [pc, #116]	; (800f848 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d018      	beq.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a1c      	ldr	r2, [pc, #112]	; (800f84c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d013      	beq.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a1a      	ldr	r2, [pc, #104]	; (800f850 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d00e      	beq.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a15      	ldr	r2, [pc, #84]	; (800f844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d009      	beq.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4a16      	ldr	r2, [pc, #88]	; (800f854 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d004      	beq.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	4a15      	ldr	r2, [pc, #84]	; (800f858 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d10c      	bne.n	800f822 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f80e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	68ba      	ldr	r2, [r7, #8]
 800f816:	4313      	orrs	r3, r2
 800f818:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	68ba      	ldr	r2, [r7, #8]
 800f820:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2201      	movs	r2, #1
 800f826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2200      	movs	r2, #0
 800f82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f832:	2300      	movs	r3, #0
}
 800f834:	4618      	mov	r0, r3
 800f836:	3714      	adds	r7, #20
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	40010000 	.word	0x40010000
 800f844:	40010400 	.word	0x40010400
 800f848:	40000400 	.word	0x40000400
 800f84c:	40000800 	.word	0x40000800
 800f850:	40000c00 	.word	0x40000c00
 800f854:	40001800 	.word	0x40001800
 800f858:	40014000 	.word	0x40014000

0800f85c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f866:	2300      	movs	r3, #0
 800f868:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f870:	2b01      	cmp	r3, #1
 800f872:	d101      	bne.n	800f878 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f874:	2302      	movs	r3, #2
 800f876:	e065      	b.n	800f944 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2201      	movs	r2, #1
 800f87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	4313      	orrs	r3, r2
 800f88c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	4313      	orrs	r3, r2
 800f89a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	691b      	ldr	r3, [r3, #16]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	695b      	ldr	r3, [r3, #20]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	699b      	ldr	r3, [r3, #24]
 800f8ec:	041b      	lsls	r3, r3, #16
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4a16      	ldr	r2, [pc, #88]	; (800f950 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d004      	beq.n	800f906 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4a14      	ldr	r2, [pc, #80]	; (800f954 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d115      	bne.n	800f932 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f910:	051b      	lsls	r3, r3, #20
 800f912:	4313      	orrs	r3, r2
 800f914:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	69db      	ldr	r3, [r3, #28]
 800f920:	4313      	orrs	r3, r2
 800f922:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	6a1b      	ldr	r3, [r3, #32]
 800f92e:	4313      	orrs	r3, r2
 800f930:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	3714      	adds	r7, #20
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr
 800f950:	40010000 	.word	0x40010000
 800f954:	40010400 	.word	0x40010400

0800f958 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f974:	bf00      	nop
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f988:	bf00      	nop
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d101      	bne.n	800f9a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	e042      	b.n	800fa2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d106      	bne.n	800f9be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7f3 fbbf 	bl	800313c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2224      	movs	r2, #36	; 0x24
 800f9c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f022 0201 	bic.w	r2, r2, #1
 800f9d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d002      	beq.n	800f9e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f001 fb0c 	bl	8010ffc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 fda1 	bl	801052c <UART_SetConfig>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d101      	bne.n	800f9f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e01b      	b.n	800fa2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	685a      	ldr	r2, [r3, #4]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	689a      	ldr	r2, [r3, #8]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f042 0201 	orr.w	r2, r2, #1
 800fa22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f001 fb8b 	bl	8011140 <UART_CheckIdleState>
 800fa2a:	4603      	mov	r3, r0
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3708      	adds	r7, #8
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b08a      	sub	sp, #40	; 0x28
 800fa38:	af02      	add	r7, sp, #8
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	603b      	str	r3, [r7, #0]
 800fa40:	4613      	mov	r3, r2
 800fa42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa4a:	2b20      	cmp	r3, #32
 800fa4c:	d17b      	bne.n	800fb46 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d002      	beq.n	800fa5a <HAL_UART_Transmit+0x26>
 800fa54:	88fb      	ldrh	r3, [r7, #6]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d101      	bne.n	800fa5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e074      	b.n	800fb48 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2221      	movs	r2, #33	; 0x21
 800fa6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fa6e:	f7f3 fe9f 	bl	80037b0 <HAL_GetTick>
 800fa72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	88fa      	ldrh	r2, [r7, #6]
 800fa78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	88fa      	ldrh	r2, [r7, #6]
 800fa80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	689b      	ldr	r3, [r3, #8]
 800fa88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa8c:	d108      	bne.n	800faa0 <HAL_UART_Transmit+0x6c>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	691b      	ldr	r3, [r3, #16]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d104      	bne.n	800faa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fa96:	2300      	movs	r3, #0
 800fa98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	61bb      	str	r3, [r7, #24]
 800fa9e:	e003      	b.n	800faa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800faa4:	2300      	movs	r3, #0
 800faa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800faa8:	e030      	b.n	800fb0c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	9300      	str	r3, [sp, #0]
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	2200      	movs	r2, #0
 800fab2:	2180      	movs	r1, #128	; 0x80
 800fab4:	68f8      	ldr	r0, [r7, #12]
 800fab6:	f001 fbed 	bl	8011294 <UART_WaitOnFlagUntilTimeout>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d005      	beq.n	800facc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2220      	movs	r2, #32
 800fac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fac8:	2303      	movs	r3, #3
 800faca:	e03d      	b.n	800fb48 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10b      	bne.n	800faea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	881b      	ldrh	r3, [r3, #0]
 800fad6:	461a      	mov	r2, r3
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fae0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fae2:	69bb      	ldr	r3, [r7, #24]
 800fae4:	3302      	adds	r3, #2
 800fae6:	61bb      	str	r3, [r7, #24]
 800fae8:	e007      	b.n	800fafa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	781a      	ldrb	r2, [r3, #0]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	3301      	adds	r3, #1
 800faf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	3b01      	subs	r3, #1
 800fb04:	b29a      	uxth	r2, r3
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d1c8      	bne.n	800faaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	2140      	movs	r1, #64	; 0x40
 800fb22:	68f8      	ldr	r0, [r7, #12]
 800fb24:	f001 fbb6 	bl	8011294 <UART_WaitOnFlagUntilTimeout>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d005      	beq.n	800fb3a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	2220      	movs	r2, #32
 800fb32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fb36:	2303      	movs	r3, #3
 800fb38:	e006      	b.n	800fb48 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2220      	movs	r2, #32
 800fb3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	e000      	b.n	800fb48 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fb46:	2302      	movs	r3, #2
  }
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3720      	adds	r7, #32
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b08a      	sub	sp, #40	; 0x28
 800fb54:	af02      	add	r7, sp, #8
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	603b      	str	r3, [r7, #0]
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb66:	2b20      	cmp	r3, #32
 800fb68:	f040 80b5 	bne.w	800fcd6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d002      	beq.n	800fb78 <HAL_UART_Receive+0x28>
 800fb72:	88fb      	ldrh	r3, [r7, #6]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d101      	bne.n	800fb7c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e0ad      	b.n	800fcd8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2222      	movs	r2, #34	; 0x22
 800fb88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fb92:	f7f3 fe0d 	bl	80037b0 <HAL_GetTick>
 800fb96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	88fa      	ldrh	r2, [r7, #6]
 800fb9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	88fa      	ldrh	r2, [r7, #6]
 800fba4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbb0:	d10e      	bne.n	800fbd0 <HAL_UART_Receive+0x80>
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	691b      	ldr	r3, [r3, #16]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d105      	bne.n	800fbc6 <HAL_UART_Receive+0x76>
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fbc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbc4:	e02d      	b.n	800fc22 <HAL_UART_Receive+0xd2>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	22ff      	movs	r2, #255	; 0xff
 800fbca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbce:	e028      	b.n	800fc22 <HAL_UART_Receive+0xd2>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	689b      	ldr	r3, [r3, #8]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d10d      	bne.n	800fbf4 <HAL_UART_Receive+0xa4>
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d104      	bne.n	800fbea <HAL_UART_Receive+0x9a>
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	22ff      	movs	r2, #255	; 0xff
 800fbe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbe8:	e01b      	b.n	800fc22 <HAL_UART_Receive+0xd2>
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	227f      	movs	r2, #127	; 0x7f
 800fbee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbf2:	e016      	b.n	800fc22 <HAL_UART_Receive+0xd2>
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbfc:	d10d      	bne.n	800fc1a <HAL_UART_Receive+0xca>
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	691b      	ldr	r3, [r3, #16]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d104      	bne.n	800fc10 <HAL_UART_Receive+0xc0>
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	227f      	movs	r2, #127	; 0x7f
 800fc0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc0e:	e008      	b.n	800fc22 <HAL_UART_Receive+0xd2>
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	223f      	movs	r2, #63	; 0x3f
 800fc14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc18:	e003      	b.n	800fc22 <HAL_UART_Receive+0xd2>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc28:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	689b      	ldr	r3, [r3, #8]
 800fc2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc32:	d108      	bne.n	800fc46 <HAL_UART_Receive+0xf6>
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d104      	bne.n	800fc46 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	61bb      	str	r3, [r7, #24]
 800fc44:	e003      	b.n	800fc4e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fc4e:	e036      	b.n	800fcbe <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	2200      	movs	r2, #0
 800fc58:	2120      	movs	r1, #32
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	f001 fb1a 	bl	8011294 <UART_WaitOnFlagUntilTimeout>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d005      	beq.n	800fc72 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2220      	movs	r2, #32
 800fc6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fc6e:	2303      	movs	r3, #3
 800fc70:	e032      	b.n	800fcd8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10c      	bne.n	800fc92 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	8a7b      	ldrh	r3, [r7, #18]
 800fc82:	4013      	ands	r3, r2
 800fc84:	b29a      	uxth	r2, r3
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	3302      	adds	r3, #2
 800fc8e:	61bb      	str	r3, [r7, #24]
 800fc90:	e00c      	b.n	800fcac <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	8a7b      	ldrh	r3, [r7, #18]
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	4013      	ands	r3, r2
 800fca0:	b2da      	uxtb	r2, r3
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	3b01      	subs	r3, #1
 800fcb6:	b29a      	uxth	r2, r3
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1c2      	bne.n	800fc50 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2220      	movs	r2, #32
 800fcce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	e000      	b.n	800fcd8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fcd6:	2302      	movs	r3, #2
  }
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3720      	adds	r7, #32
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b08a      	sub	sp, #40	; 0x28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	4613      	mov	r3, r2
 800fcec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcf4:	2b20      	cmp	r3, #32
 800fcf6:	d137      	bne.n	800fd68 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d002      	beq.n	800fd04 <HAL_UART_Receive_IT+0x24>
 800fcfe:	88fb      	ldrh	r3, [r7, #6]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d101      	bne.n	800fd08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fd04:	2301      	movs	r3, #1
 800fd06:	e030      	b.n	800fd6a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	4a18      	ldr	r2, [pc, #96]	; (800fd74 <HAL_UART_Receive_IT+0x94>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d01f      	beq.n	800fd58 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d018      	beq.n	800fd58 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	e853 3f00 	ldrex	r3, [r3]
 800fd32:	613b      	str	r3, [r7, #16]
   return(result);
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fd3a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	461a      	mov	r2, r3
 800fd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd44:	623b      	str	r3, [r7, #32]
 800fd46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd48:	69f9      	ldr	r1, [r7, #28]
 800fd4a:	6a3a      	ldr	r2, [r7, #32]
 800fd4c:	e841 2300 	strex	r3, r2, [r1]
 800fd50:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1e6      	bne.n	800fd26 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fd58:	88fb      	ldrh	r3, [r7, #6]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	68b9      	ldr	r1, [r7, #8]
 800fd5e:	68f8      	ldr	r0, [r7, #12]
 800fd60:	f001 fb06 	bl	8011370 <UART_Start_Receive_IT>
 800fd64:	4603      	mov	r3, r0
 800fd66:	e000      	b.n	800fd6a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fd68:	2302      	movs	r3, #2
  }
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3728      	adds	r7, #40	; 0x28
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	58000c00 	.word	0x58000c00

0800fd78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b0ba      	sub	sp, #232	; 0xe8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	69db      	ldr	r3, [r3, #28]
 800fd86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	689b      	ldr	r3, [r3, #8]
 800fd9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fd9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800fda2:	f640 030f 	movw	r3, #2063	; 0x80f
 800fda6:	4013      	ands	r3, r2
 800fda8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800fdac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d11b      	bne.n	800fdec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fdb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdb8:	f003 0320 	and.w	r3, r3, #32
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d015      	beq.n	800fdec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fdc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdc4:	f003 0320 	and.w	r3, r3, #32
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d105      	bne.n	800fdd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fdcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fdd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d009      	beq.n	800fdec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 8377 	beq.w	80104d0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	4798      	blx	r3
      }
      return;
 800fdea:	e371      	b.n	80104d0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fdec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	f000 8123 	beq.w	801003c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fdf6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fdfa:	4b8d      	ldr	r3, [pc, #564]	; (8010030 <HAL_UART_IRQHandler+0x2b8>)
 800fdfc:	4013      	ands	r3, r2
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d106      	bne.n	800fe10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fe02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fe06:	4b8b      	ldr	r3, [pc, #556]	; (8010034 <HAL_UART_IRQHandler+0x2bc>)
 800fe08:	4013      	ands	r3, r2
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	f000 8116 	beq.w	801003c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fe10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe14:	f003 0301 	and.w	r3, r3, #1
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d011      	beq.n	800fe40 <HAL_UART_IRQHandler+0xc8>
 800fe1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00b      	beq.n	800fe40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe36:	f043 0201 	orr.w	r2, r3, #1
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe44:	f003 0302 	and.w	r3, r3, #2
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d011      	beq.n	800fe70 <HAL_UART_IRQHandler+0xf8>
 800fe4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe50:	f003 0301 	and.w	r3, r3, #1
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00b      	beq.n	800fe70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2202      	movs	r2, #2
 800fe5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe66:	f043 0204 	orr.w	r2, r3, #4
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe74:	f003 0304 	and.w	r3, r3, #4
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d011      	beq.n	800fea0 <HAL_UART_IRQHandler+0x128>
 800fe7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe80:	f003 0301 	and.w	r3, r3, #1
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00b      	beq.n	800fea0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	2204      	movs	r2, #4
 800fe8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe96:	f043 0202 	orr.w	r2, r3, #2
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fea4:	f003 0308 	and.w	r3, r3, #8
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d017      	beq.n	800fedc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800feac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800feb0:	f003 0320 	and.w	r3, r3, #32
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d105      	bne.n	800fec4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800feb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800febc:	4b5c      	ldr	r3, [pc, #368]	; (8010030 <HAL_UART_IRQHandler+0x2b8>)
 800febe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00b      	beq.n	800fedc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2208      	movs	r2, #8
 800feca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fed2:	f043 0208 	orr.w	r2, r3, #8
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d012      	beq.n	800ff0e <HAL_UART_IRQHandler+0x196>
 800fee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800feec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00c      	beq.n	800ff0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fefc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff04:	f043 0220 	orr.w	r2, r3, #32
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f000 82dd 	beq.w	80104d4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ff1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff1e:	f003 0320 	and.w	r3, r3, #32
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d013      	beq.n	800ff4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ff26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff2a:	f003 0320 	and.w	r3, r3, #32
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d105      	bne.n	800ff3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d007      	beq.n	800ff4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d003      	beq.n	800ff4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff62:	2b40      	cmp	r3, #64	; 0x40
 800ff64:	d005      	beq.n	800ff72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ff66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ff6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d054      	beq.n	801001c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f001 fb1e 	bl	80115b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	689b      	ldr	r3, [r3, #8]
 800ff7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff82:	2b40      	cmp	r3, #64	; 0x40
 800ff84:	d146      	bne.n	8010014 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	3308      	adds	r3, #8
 800ff8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff94:	e853 3f00 	ldrex	r3, [r3]
 800ff98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ff9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ffa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	3308      	adds	r3, #8
 800ffae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ffb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ffb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ffbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ffc2:	e841 2300 	strex	r3, r2, [r1]
 800ffc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ffca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d1d9      	bne.n	800ff86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d017      	beq.n	801000c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffe2:	4a15      	ldr	r2, [pc, #84]	; (8010038 <HAL_UART_IRQHandler+0x2c0>)
 800ffe4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7f6 fdeb 	bl	8006bc8 <HAL_DMA_Abort_IT>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d019      	beq.n	801002c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010006:	4610      	mov	r0, r2
 8010008:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801000a:	e00f      	b.n	801002c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 fa77 	bl	8010500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010012:	e00b      	b.n	801002c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 fa73 	bl	8010500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801001a:	e007      	b.n	801002c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 fa6f 	bl	8010500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801002a:	e253      	b.n	80104d4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801002c:	bf00      	nop
    return;
 801002e:	e251      	b.n	80104d4 <HAL_UART_IRQHandler+0x75c>
 8010030:	10000001 	.word	0x10000001
 8010034:	04000120 	.word	0x04000120
 8010038:	08011681 	.word	0x08011681

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010040:	2b01      	cmp	r3, #1
 8010042:	f040 81e7 	bne.w	8010414 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801004a:	f003 0310 	and.w	r3, r3, #16
 801004e:	2b00      	cmp	r3, #0
 8010050:	f000 81e0 	beq.w	8010414 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010058:	f003 0310 	and.w	r3, r3, #16
 801005c:	2b00      	cmp	r3, #0
 801005e:	f000 81d9 	beq.w	8010414 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2210      	movs	r2, #16
 8010068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	689b      	ldr	r3, [r3, #8]
 8010070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010074:	2b40      	cmp	r3, #64	; 0x40
 8010076:	f040 8151 	bne.w	801031c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4a96      	ldr	r2, [pc, #600]	; (80102dc <HAL_UART_IRQHandler+0x564>)
 8010084:	4293      	cmp	r3, r2
 8010086:	d068      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a93      	ldr	r2, [pc, #588]	; (80102e0 <HAL_UART_IRQHandler+0x568>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d061      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a91      	ldr	r2, [pc, #580]	; (80102e4 <HAL_UART_IRQHandler+0x56c>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d05a      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4a8e      	ldr	r2, [pc, #568]	; (80102e8 <HAL_UART_IRQHandler+0x570>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d053      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4a8c      	ldr	r2, [pc, #560]	; (80102ec <HAL_UART_IRQHandler+0x574>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d04c      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a89      	ldr	r2, [pc, #548]	; (80102f0 <HAL_UART_IRQHandler+0x578>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d045      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4a87      	ldr	r2, [pc, #540]	; (80102f4 <HAL_UART_IRQHandler+0x57c>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d03e      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a84      	ldr	r2, [pc, #528]	; (80102f8 <HAL_UART_IRQHandler+0x580>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d037      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	4a82      	ldr	r2, [pc, #520]	; (80102fc <HAL_UART_IRQHandler+0x584>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d030      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4a7f      	ldr	r2, [pc, #508]	; (8010300 <HAL_UART_IRQHandler+0x588>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d029      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4a7d      	ldr	r2, [pc, #500]	; (8010304 <HAL_UART_IRQHandler+0x58c>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d022      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a7a      	ldr	r2, [pc, #488]	; (8010308 <HAL_UART_IRQHandler+0x590>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d01b      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4a78      	ldr	r2, [pc, #480]	; (801030c <HAL_UART_IRQHandler+0x594>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d014      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4a75      	ldr	r2, [pc, #468]	; (8010310 <HAL_UART_IRQHandler+0x598>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d00d      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a73      	ldr	r2, [pc, #460]	; (8010314 <HAL_UART_IRQHandler+0x59c>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d006      	beq.n	801015a <HAL_UART_IRQHandler+0x3e2>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a70      	ldr	r2, [pc, #448]	; (8010318 <HAL_UART_IRQHandler+0x5a0>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d106      	bne.n	8010168 <HAL_UART_IRQHandler+0x3f0>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	b29b      	uxth	r3, r3
 8010166:	e005      	b.n	8010174 <HAL_UART_IRQHandler+0x3fc>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	b29b      	uxth	r3, r3
 8010174:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010178:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801017c:	2b00      	cmp	r3, #0
 801017e:	f000 81ab 	beq.w	80104d8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801018c:	429a      	cmp	r2, r3
 801018e:	f080 81a3 	bcs.w	80104d8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010198:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101a2:	69db      	ldr	r3, [r3, #28]
 80101a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101a8:	f000 8087 	beq.w	80102ba <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101b8:	e853 3f00 	ldrex	r3, [r3]
 80101bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80101c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80101c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80101c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	461a      	mov	r2, r3
 80101d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80101d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80101da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80101e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80101e6:	e841 2300 	strex	r3, r2, [r1]
 80101ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80101ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d1da      	bne.n	80101ac <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	3308      	adds	r3, #8
 80101fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010200:	e853 3f00 	ldrex	r3, [r3]
 8010204:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010208:	f023 0301 	bic.w	r3, r3, #1
 801020c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	3308      	adds	r3, #8
 8010216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801021a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801021e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010220:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010222:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010226:	e841 2300 	strex	r3, r2, [r1]
 801022a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801022c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1e1      	bne.n	80101f6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	3308      	adds	r3, #8
 8010238:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801023a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801023c:	e853 3f00 	ldrex	r3, [r3]
 8010240:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	3308      	adds	r3, #8
 8010252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010256:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010258:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801025a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801025c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801025e:	e841 2300 	strex	r3, r2, [r1]
 8010262:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010266:	2b00      	cmp	r3, #0
 8010268:	d1e3      	bne.n	8010232 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2220      	movs	r2, #32
 801026e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801027e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010280:	e853 3f00 	ldrex	r3, [r3]
 8010284:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010288:	f023 0310 	bic.w	r3, r3, #16
 801028c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	461a      	mov	r2, r3
 8010296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801029a:	65bb      	str	r3, [r7, #88]	; 0x58
 801029c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801029e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80102a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80102a2:	e841 2300 	strex	r3, r2, [r1]
 80102a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80102a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d1e4      	bne.n	8010278 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7f6 f969 	bl	800658c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2202      	movs	r2, #2
 80102be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	4619      	mov	r1, r3
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 f91d 	bl	8010514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80102da:	e0fd      	b.n	80104d8 <HAL_UART_IRQHandler+0x760>
 80102dc:	40020010 	.word	0x40020010
 80102e0:	40020028 	.word	0x40020028
 80102e4:	40020040 	.word	0x40020040
 80102e8:	40020058 	.word	0x40020058
 80102ec:	40020070 	.word	0x40020070
 80102f0:	40020088 	.word	0x40020088
 80102f4:	400200a0 	.word	0x400200a0
 80102f8:	400200b8 	.word	0x400200b8
 80102fc:	40020410 	.word	0x40020410
 8010300:	40020428 	.word	0x40020428
 8010304:	40020440 	.word	0x40020440
 8010308:	40020458 	.word	0x40020458
 801030c:	40020470 	.word	0x40020470
 8010310:	40020488 	.word	0x40020488
 8010314:	400204a0 	.word	0x400204a0
 8010318:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010328:	b29b      	uxth	r3, r3
 801032a:	1ad3      	subs	r3, r2, r3
 801032c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010336:	b29b      	uxth	r3, r3
 8010338:	2b00      	cmp	r3, #0
 801033a:	f000 80cf 	beq.w	80104dc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801033e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010342:	2b00      	cmp	r3, #0
 8010344:	f000 80ca 	beq.w	80104dc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	e853 3f00 	ldrex	r3, [r3]
 8010354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801035c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	461a      	mov	r2, r3
 8010366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801036a:	647b      	str	r3, [r7, #68]	; 0x44
 801036c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801036e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010372:	e841 2300 	strex	r3, r2, [r1]
 8010376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1e4      	bne.n	8010348 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	3308      	adds	r3, #8
 8010384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010388:	e853 3f00 	ldrex	r3, [r3]
 801038c:	623b      	str	r3, [r7, #32]
   return(result);
 801038e:	6a3a      	ldr	r2, [r7, #32]
 8010390:	4b55      	ldr	r3, [pc, #340]	; (80104e8 <HAL_UART_IRQHandler+0x770>)
 8010392:	4013      	ands	r3, r2
 8010394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	3308      	adds	r3, #8
 801039e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80103a2:	633a      	str	r2, [r7, #48]	; 0x30
 80103a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103aa:	e841 2300 	strex	r3, r2, [r1]
 80103ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80103b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1e3      	bne.n	801037e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2220      	movs	r2, #32
 80103ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2200      	movs	r2, #0
 80103c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	e853 3f00 	ldrex	r3, [r3]
 80103d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f023 0310 	bic.w	r3, r3, #16
 80103de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	461a      	mov	r2, r3
 80103e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80103ec:	61fb      	str	r3, [r7, #28]
 80103ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f0:	69b9      	ldr	r1, [r7, #24]
 80103f2:	69fa      	ldr	r2, [r7, #28]
 80103f4:	e841 2300 	strex	r3, r2, [r1]
 80103f8:	617b      	str	r3, [r7, #20]
   return(result);
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d1e4      	bne.n	80103ca <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2202      	movs	r2, #2
 8010404:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010406:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801040a:	4619      	mov	r1, r3
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f881 	bl	8010514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010412:	e063      	b.n	80104dc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801041c:	2b00      	cmp	r3, #0
 801041e:	d00e      	beq.n	801043e <HAL_UART_IRQHandler+0x6c6>
 8010420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010428:	2b00      	cmp	r3, #0
 801042a:	d008      	beq.n	801043e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f001 fe80 	bl	801213c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801043c:	e051      	b.n	80104e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801043e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010446:	2b00      	cmp	r3, #0
 8010448:	d014      	beq.n	8010474 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801044a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801044e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010452:	2b00      	cmp	r3, #0
 8010454:	d105      	bne.n	8010462 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801045a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801045e:	2b00      	cmp	r3, #0
 8010460:	d008      	beq.n	8010474 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010466:	2b00      	cmp	r3, #0
 8010468:	d03a      	beq.n	80104e0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	4798      	blx	r3
    }
    return;
 8010472:	e035      	b.n	80104e0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801047c:	2b00      	cmp	r3, #0
 801047e:	d009      	beq.n	8010494 <HAL_UART_IRQHandler+0x71c>
 8010480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010488:	2b00      	cmp	r3, #0
 801048a:	d003      	beq.n	8010494 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f001 f90d 	bl	80116ac <UART_EndTransmit_IT>
    return;
 8010492:	e026      	b.n	80104e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801049c:	2b00      	cmp	r3, #0
 801049e:	d009      	beq.n	80104b4 <HAL_UART_IRQHandler+0x73c>
 80104a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d003      	beq.n	80104b4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f001 fe59 	bl	8012164 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80104b2:	e016      	b.n	80104e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80104b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d010      	beq.n	80104e2 <HAL_UART_IRQHandler+0x76a>
 80104c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	da0c      	bge.n	80104e2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f001 fe41 	bl	8012150 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80104ce:	e008      	b.n	80104e2 <HAL_UART_IRQHandler+0x76a>
      return;
 80104d0:	bf00      	nop
 80104d2:	e006      	b.n	80104e2 <HAL_UART_IRQHandler+0x76a>
    return;
 80104d4:	bf00      	nop
 80104d6:	e004      	b.n	80104e2 <HAL_UART_IRQHandler+0x76a>
      return;
 80104d8:	bf00      	nop
 80104da:	e002      	b.n	80104e2 <HAL_UART_IRQHandler+0x76a>
      return;
 80104dc:	bf00      	nop
 80104de:	e000      	b.n	80104e2 <HAL_UART_IRQHandler+0x76a>
    return;
 80104e0:	bf00      	nop
  }
}
 80104e2:	37e8      	adds	r7, #232	; 0xe8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	effffffe 	.word	0xeffffffe

080104ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80104f4:	bf00      	nop
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010508:	bf00      	nop
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010514:	b480      	push	{r7}
 8010516:	b083      	sub	sp, #12
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	460b      	mov	r3, r1
 801051e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010520:	bf00      	nop
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801052c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010530:	b092      	sub	sp, #72	; 0x48
 8010532:	af00      	add	r7, sp, #0
 8010534:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010536:	2300      	movs	r3, #0
 8010538:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	689a      	ldr	r2, [r3, #8]
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	691b      	ldr	r3, [r3, #16]
 8010544:	431a      	orrs	r2, r3
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	695b      	ldr	r3, [r3, #20]
 801054a:	431a      	orrs	r2, r3
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	69db      	ldr	r3, [r3, #28]
 8010550:	4313      	orrs	r3, r2
 8010552:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	4bbe      	ldr	r3, [pc, #760]	; (8010854 <UART_SetConfig+0x328>)
 801055c:	4013      	ands	r3, r2
 801055e:	697a      	ldr	r2, [r7, #20]
 8010560:	6812      	ldr	r2, [r2, #0]
 8010562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010564:	430b      	orrs	r3, r1
 8010566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	68da      	ldr	r2, [r3, #12]
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	430a      	orrs	r2, r1
 801057c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	699b      	ldr	r3, [r3, #24]
 8010582:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4ab3      	ldr	r2, [pc, #716]	; (8010858 <UART_SetConfig+0x32c>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d004      	beq.n	8010598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	6a1b      	ldr	r3, [r3, #32]
 8010592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010594:	4313      	orrs	r3, r2
 8010596:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	689a      	ldr	r2, [r3, #8]
 801059e:	4baf      	ldr	r3, [pc, #700]	; (801085c <UART_SetConfig+0x330>)
 80105a0:	4013      	ands	r3, r2
 80105a2:	697a      	ldr	r2, [r7, #20]
 80105a4:	6812      	ldr	r2, [r2, #0]
 80105a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105a8:	430b      	orrs	r3, r1
 80105aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b2:	f023 010f 	bic.w	r1, r3, #15
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	430a      	orrs	r2, r1
 80105c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4aa6      	ldr	r2, [pc, #664]	; (8010860 <UART_SetConfig+0x334>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d177      	bne.n	80106bc <UART_SetConfig+0x190>
 80105cc:	4ba5      	ldr	r3, [pc, #660]	; (8010864 <UART_SetConfig+0x338>)
 80105ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80105d4:	2b28      	cmp	r3, #40	; 0x28
 80105d6:	d86d      	bhi.n	80106b4 <UART_SetConfig+0x188>
 80105d8:	a201      	add	r2, pc, #4	; (adr r2, 80105e0 <UART_SetConfig+0xb4>)
 80105da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105de:	bf00      	nop
 80105e0:	08010685 	.word	0x08010685
 80105e4:	080106b5 	.word	0x080106b5
 80105e8:	080106b5 	.word	0x080106b5
 80105ec:	080106b5 	.word	0x080106b5
 80105f0:	080106b5 	.word	0x080106b5
 80105f4:	080106b5 	.word	0x080106b5
 80105f8:	080106b5 	.word	0x080106b5
 80105fc:	080106b5 	.word	0x080106b5
 8010600:	0801068d 	.word	0x0801068d
 8010604:	080106b5 	.word	0x080106b5
 8010608:	080106b5 	.word	0x080106b5
 801060c:	080106b5 	.word	0x080106b5
 8010610:	080106b5 	.word	0x080106b5
 8010614:	080106b5 	.word	0x080106b5
 8010618:	080106b5 	.word	0x080106b5
 801061c:	080106b5 	.word	0x080106b5
 8010620:	08010695 	.word	0x08010695
 8010624:	080106b5 	.word	0x080106b5
 8010628:	080106b5 	.word	0x080106b5
 801062c:	080106b5 	.word	0x080106b5
 8010630:	080106b5 	.word	0x080106b5
 8010634:	080106b5 	.word	0x080106b5
 8010638:	080106b5 	.word	0x080106b5
 801063c:	080106b5 	.word	0x080106b5
 8010640:	0801069d 	.word	0x0801069d
 8010644:	080106b5 	.word	0x080106b5
 8010648:	080106b5 	.word	0x080106b5
 801064c:	080106b5 	.word	0x080106b5
 8010650:	080106b5 	.word	0x080106b5
 8010654:	080106b5 	.word	0x080106b5
 8010658:	080106b5 	.word	0x080106b5
 801065c:	080106b5 	.word	0x080106b5
 8010660:	080106a5 	.word	0x080106a5
 8010664:	080106b5 	.word	0x080106b5
 8010668:	080106b5 	.word	0x080106b5
 801066c:	080106b5 	.word	0x080106b5
 8010670:	080106b5 	.word	0x080106b5
 8010674:	080106b5 	.word	0x080106b5
 8010678:	080106b5 	.word	0x080106b5
 801067c:	080106b5 	.word	0x080106b5
 8010680:	080106ad 	.word	0x080106ad
 8010684:	2301      	movs	r3, #1
 8010686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801068a:	e222      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 801068c:	2304      	movs	r3, #4
 801068e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010692:	e21e      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010694:	2308      	movs	r3, #8
 8010696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801069a:	e21a      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 801069c:	2310      	movs	r3, #16
 801069e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106a2:	e216      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80106a4:	2320      	movs	r3, #32
 80106a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106aa:	e212      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80106ac:	2340      	movs	r3, #64	; 0x40
 80106ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106b2:	e20e      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80106b4:	2380      	movs	r3, #128	; 0x80
 80106b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ba:	e20a      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4a69      	ldr	r2, [pc, #420]	; (8010868 <UART_SetConfig+0x33c>)
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d130      	bne.n	8010728 <UART_SetConfig+0x1fc>
 80106c6:	4b67      	ldr	r3, [pc, #412]	; (8010864 <UART_SetConfig+0x338>)
 80106c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106ca:	f003 0307 	and.w	r3, r3, #7
 80106ce:	2b05      	cmp	r3, #5
 80106d0:	d826      	bhi.n	8010720 <UART_SetConfig+0x1f4>
 80106d2:	a201      	add	r2, pc, #4	; (adr r2, 80106d8 <UART_SetConfig+0x1ac>)
 80106d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d8:	080106f1 	.word	0x080106f1
 80106dc:	080106f9 	.word	0x080106f9
 80106e0:	08010701 	.word	0x08010701
 80106e4:	08010709 	.word	0x08010709
 80106e8:	08010711 	.word	0x08010711
 80106ec:	08010719 	.word	0x08010719
 80106f0:	2300      	movs	r3, #0
 80106f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106f6:	e1ec      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80106f8:	2304      	movs	r3, #4
 80106fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106fe:	e1e8      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010700:	2308      	movs	r3, #8
 8010702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010706:	e1e4      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010708:	2310      	movs	r3, #16
 801070a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801070e:	e1e0      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010710:	2320      	movs	r3, #32
 8010712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010716:	e1dc      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010718:	2340      	movs	r3, #64	; 0x40
 801071a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801071e:	e1d8      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010720:	2380      	movs	r3, #128	; 0x80
 8010722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010726:	e1d4      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a4f      	ldr	r2, [pc, #316]	; (801086c <UART_SetConfig+0x340>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d130      	bne.n	8010794 <UART_SetConfig+0x268>
 8010732:	4b4c      	ldr	r3, [pc, #304]	; (8010864 <UART_SetConfig+0x338>)
 8010734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010736:	f003 0307 	and.w	r3, r3, #7
 801073a:	2b05      	cmp	r3, #5
 801073c:	d826      	bhi.n	801078c <UART_SetConfig+0x260>
 801073e:	a201      	add	r2, pc, #4	; (adr r2, 8010744 <UART_SetConfig+0x218>)
 8010740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010744:	0801075d 	.word	0x0801075d
 8010748:	08010765 	.word	0x08010765
 801074c:	0801076d 	.word	0x0801076d
 8010750:	08010775 	.word	0x08010775
 8010754:	0801077d 	.word	0x0801077d
 8010758:	08010785 	.word	0x08010785
 801075c:	2300      	movs	r3, #0
 801075e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010762:	e1b6      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010764:	2304      	movs	r3, #4
 8010766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801076a:	e1b2      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 801076c:	2308      	movs	r3, #8
 801076e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010772:	e1ae      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010774:	2310      	movs	r3, #16
 8010776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801077a:	e1aa      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 801077c:	2320      	movs	r3, #32
 801077e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010782:	e1a6      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010784:	2340      	movs	r3, #64	; 0x40
 8010786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801078a:	e1a2      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 801078c:	2380      	movs	r3, #128	; 0x80
 801078e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010792:	e19e      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4a35      	ldr	r2, [pc, #212]	; (8010870 <UART_SetConfig+0x344>)
 801079a:	4293      	cmp	r3, r2
 801079c:	d130      	bne.n	8010800 <UART_SetConfig+0x2d4>
 801079e:	4b31      	ldr	r3, [pc, #196]	; (8010864 <UART_SetConfig+0x338>)
 80107a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107a2:	f003 0307 	and.w	r3, r3, #7
 80107a6:	2b05      	cmp	r3, #5
 80107a8:	d826      	bhi.n	80107f8 <UART_SetConfig+0x2cc>
 80107aa:	a201      	add	r2, pc, #4	; (adr r2, 80107b0 <UART_SetConfig+0x284>)
 80107ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107b0:	080107c9 	.word	0x080107c9
 80107b4:	080107d1 	.word	0x080107d1
 80107b8:	080107d9 	.word	0x080107d9
 80107bc:	080107e1 	.word	0x080107e1
 80107c0:	080107e9 	.word	0x080107e9
 80107c4:	080107f1 	.word	0x080107f1
 80107c8:	2300      	movs	r3, #0
 80107ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ce:	e180      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80107d0:	2304      	movs	r3, #4
 80107d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107d6:	e17c      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80107d8:	2308      	movs	r3, #8
 80107da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107de:	e178      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80107e0:	2310      	movs	r3, #16
 80107e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107e6:	e174      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80107e8:	2320      	movs	r3, #32
 80107ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ee:	e170      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80107f0:	2340      	movs	r3, #64	; 0x40
 80107f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107f6:	e16c      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80107f8:	2380      	movs	r3, #128	; 0x80
 80107fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107fe:	e168      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	4a1b      	ldr	r2, [pc, #108]	; (8010874 <UART_SetConfig+0x348>)
 8010806:	4293      	cmp	r3, r2
 8010808:	d142      	bne.n	8010890 <UART_SetConfig+0x364>
 801080a:	4b16      	ldr	r3, [pc, #88]	; (8010864 <UART_SetConfig+0x338>)
 801080c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801080e:	f003 0307 	and.w	r3, r3, #7
 8010812:	2b05      	cmp	r3, #5
 8010814:	d838      	bhi.n	8010888 <UART_SetConfig+0x35c>
 8010816:	a201      	add	r2, pc, #4	; (adr r2, 801081c <UART_SetConfig+0x2f0>)
 8010818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801081c:	08010835 	.word	0x08010835
 8010820:	0801083d 	.word	0x0801083d
 8010824:	08010845 	.word	0x08010845
 8010828:	0801084d 	.word	0x0801084d
 801082c:	08010879 	.word	0x08010879
 8010830:	08010881 	.word	0x08010881
 8010834:	2300      	movs	r3, #0
 8010836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801083a:	e14a      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 801083c:	2304      	movs	r3, #4
 801083e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010842:	e146      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010844:	2308      	movs	r3, #8
 8010846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801084a:	e142      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 801084c:	2310      	movs	r3, #16
 801084e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010852:	e13e      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010854:	cfff69f3 	.word	0xcfff69f3
 8010858:	58000c00 	.word	0x58000c00
 801085c:	11fff4ff 	.word	0x11fff4ff
 8010860:	40011000 	.word	0x40011000
 8010864:	58024400 	.word	0x58024400
 8010868:	40004400 	.word	0x40004400
 801086c:	40004800 	.word	0x40004800
 8010870:	40004c00 	.word	0x40004c00
 8010874:	40005000 	.word	0x40005000
 8010878:	2320      	movs	r3, #32
 801087a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801087e:	e128      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010880:	2340      	movs	r3, #64	; 0x40
 8010882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010886:	e124      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010888:	2380      	movs	r3, #128	; 0x80
 801088a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801088e:	e120      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4acb      	ldr	r2, [pc, #812]	; (8010bc4 <UART_SetConfig+0x698>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d176      	bne.n	8010988 <UART_SetConfig+0x45c>
 801089a:	4bcb      	ldr	r3, [pc, #812]	; (8010bc8 <UART_SetConfig+0x69c>)
 801089c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801089e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80108a2:	2b28      	cmp	r3, #40	; 0x28
 80108a4:	d86c      	bhi.n	8010980 <UART_SetConfig+0x454>
 80108a6:	a201      	add	r2, pc, #4	; (adr r2, 80108ac <UART_SetConfig+0x380>)
 80108a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ac:	08010951 	.word	0x08010951
 80108b0:	08010981 	.word	0x08010981
 80108b4:	08010981 	.word	0x08010981
 80108b8:	08010981 	.word	0x08010981
 80108bc:	08010981 	.word	0x08010981
 80108c0:	08010981 	.word	0x08010981
 80108c4:	08010981 	.word	0x08010981
 80108c8:	08010981 	.word	0x08010981
 80108cc:	08010959 	.word	0x08010959
 80108d0:	08010981 	.word	0x08010981
 80108d4:	08010981 	.word	0x08010981
 80108d8:	08010981 	.word	0x08010981
 80108dc:	08010981 	.word	0x08010981
 80108e0:	08010981 	.word	0x08010981
 80108e4:	08010981 	.word	0x08010981
 80108e8:	08010981 	.word	0x08010981
 80108ec:	08010961 	.word	0x08010961
 80108f0:	08010981 	.word	0x08010981
 80108f4:	08010981 	.word	0x08010981
 80108f8:	08010981 	.word	0x08010981
 80108fc:	08010981 	.word	0x08010981
 8010900:	08010981 	.word	0x08010981
 8010904:	08010981 	.word	0x08010981
 8010908:	08010981 	.word	0x08010981
 801090c:	08010969 	.word	0x08010969
 8010910:	08010981 	.word	0x08010981
 8010914:	08010981 	.word	0x08010981
 8010918:	08010981 	.word	0x08010981
 801091c:	08010981 	.word	0x08010981
 8010920:	08010981 	.word	0x08010981
 8010924:	08010981 	.word	0x08010981
 8010928:	08010981 	.word	0x08010981
 801092c:	08010971 	.word	0x08010971
 8010930:	08010981 	.word	0x08010981
 8010934:	08010981 	.word	0x08010981
 8010938:	08010981 	.word	0x08010981
 801093c:	08010981 	.word	0x08010981
 8010940:	08010981 	.word	0x08010981
 8010944:	08010981 	.word	0x08010981
 8010948:	08010981 	.word	0x08010981
 801094c:	08010979 	.word	0x08010979
 8010950:	2301      	movs	r3, #1
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010956:	e0bc      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010958:	2304      	movs	r3, #4
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801095e:	e0b8      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010960:	2308      	movs	r3, #8
 8010962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010966:	e0b4      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010968:	2310      	movs	r3, #16
 801096a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801096e:	e0b0      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010970:	2320      	movs	r3, #32
 8010972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010976:	e0ac      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010978:	2340      	movs	r3, #64	; 0x40
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801097e:	e0a8      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010980:	2380      	movs	r3, #128	; 0x80
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010986:	e0a4      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4a8f      	ldr	r2, [pc, #572]	; (8010bcc <UART_SetConfig+0x6a0>)
 801098e:	4293      	cmp	r3, r2
 8010990:	d130      	bne.n	80109f4 <UART_SetConfig+0x4c8>
 8010992:	4b8d      	ldr	r3, [pc, #564]	; (8010bc8 <UART_SetConfig+0x69c>)
 8010994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010996:	f003 0307 	and.w	r3, r3, #7
 801099a:	2b05      	cmp	r3, #5
 801099c:	d826      	bhi.n	80109ec <UART_SetConfig+0x4c0>
 801099e:	a201      	add	r2, pc, #4	; (adr r2, 80109a4 <UART_SetConfig+0x478>)
 80109a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a4:	080109bd 	.word	0x080109bd
 80109a8:	080109c5 	.word	0x080109c5
 80109ac:	080109cd 	.word	0x080109cd
 80109b0:	080109d5 	.word	0x080109d5
 80109b4:	080109dd 	.word	0x080109dd
 80109b8:	080109e5 	.word	0x080109e5
 80109bc:	2300      	movs	r3, #0
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c2:	e086      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80109c4:	2304      	movs	r3, #4
 80109c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ca:	e082      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80109cc:	2308      	movs	r3, #8
 80109ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d2:	e07e      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80109d4:	2310      	movs	r3, #16
 80109d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109da:	e07a      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80109dc:	2320      	movs	r3, #32
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109e2:	e076      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80109e4:	2340      	movs	r3, #64	; 0x40
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ea:	e072      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80109ec:	2380      	movs	r3, #128	; 0x80
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109f2:	e06e      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4a75      	ldr	r2, [pc, #468]	; (8010bd0 <UART_SetConfig+0x6a4>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d130      	bne.n	8010a60 <UART_SetConfig+0x534>
 80109fe:	4b72      	ldr	r3, [pc, #456]	; (8010bc8 <UART_SetConfig+0x69c>)
 8010a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a02:	f003 0307 	and.w	r3, r3, #7
 8010a06:	2b05      	cmp	r3, #5
 8010a08:	d826      	bhi.n	8010a58 <UART_SetConfig+0x52c>
 8010a0a:	a201      	add	r2, pc, #4	; (adr r2, 8010a10 <UART_SetConfig+0x4e4>)
 8010a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a10:	08010a29 	.word	0x08010a29
 8010a14:	08010a31 	.word	0x08010a31
 8010a18:	08010a39 	.word	0x08010a39
 8010a1c:	08010a41 	.word	0x08010a41
 8010a20:	08010a49 	.word	0x08010a49
 8010a24:	08010a51 	.word	0x08010a51
 8010a28:	2300      	movs	r3, #0
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e050      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010a30:	2304      	movs	r3, #4
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a36:	e04c      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010a38:	2308      	movs	r3, #8
 8010a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3e:	e048      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010a40:	2310      	movs	r3, #16
 8010a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a46:	e044      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010a48:	2320      	movs	r3, #32
 8010a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a4e:	e040      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010a50:	2340      	movs	r3, #64	; 0x40
 8010a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a56:	e03c      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010a58:	2380      	movs	r3, #128	; 0x80
 8010a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a5e:	e038      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a5b      	ldr	r2, [pc, #364]	; (8010bd4 <UART_SetConfig+0x6a8>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d130      	bne.n	8010acc <UART_SetConfig+0x5a0>
 8010a6a:	4b57      	ldr	r3, [pc, #348]	; (8010bc8 <UART_SetConfig+0x69c>)
 8010a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a6e:	f003 0307 	and.w	r3, r3, #7
 8010a72:	2b05      	cmp	r3, #5
 8010a74:	d826      	bhi.n	8010ac4 <UART_SetConfig+0x598>
 8010a76:	a201      	add	r2, pc, #4	; (adr r2, 8010a7c <UART_SetConfig+0x550>)
 8010a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a7c:	08010a95 	.word	0x08010a95
 8010a80:	08010a9d 	.word	0x08010a9d
 8010a84:	08010aa5 	.word	0x08010aa5
 8010a88:	08010aad 	.word	0x08010aad
 8010a8c:	08010ab5 	.word	0x08010ab5
 8010a90:	08010abd 	.word	0x08010abd
 8010a94:	2302      	movs	r3, #2
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9a:	e01a      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010a9c:	2304      	movs	r3, #4
 8010a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aa2:	e016      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010aa4:	2308      	movs	r3, #8
 8010aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aaa:	e012      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010aac:	2310      	movs	r3, #16
 8010aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ab2:	e00e      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010ab4:	2320      	movs	r3, #32
 8010ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aba:	e00a      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010abc:	2340      	movs	r3, #64	; 0x40
 8010abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ac2:	e006      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010ac4:	2380      	movs	r3, #128	; 0x80
 8010ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aca:	e002      	b.n	8010ad2 <UART_SetConfig+0x5a6>
 8010acc:	2380      	movs	r3, #128	; 0x80
 8010ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4a3f      	ldr	r2, [pc, #252]	; (8010bd4 <UART_SetConfig+0x6a8>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	f040 80f8 	bne.w	8010cce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010ade:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ae2:	2b20      	cmp	r3, #32
 8010ae4:	dc46      	bgt.n	8010b74 <UART_SetConfig+0x648>
 8010ae6:	2b02      	cmp	r3, #2
 8010ae8:	f2c0 8082 	blt.w	8010bf0 <UART_SetConfig+0x6c4>
 8010aec:	3b02      	subs	r3, #2
 8010aee:	2b1e      	cmp	r3, #30
 8010af0:	d87e      	bhi.n	8010bf0 <UART_SetConfig+0x6c4>
 8010af2:	a201      	add	r2, pc, #4	; (adr r2, 8010af8 <UART_SetConfig+0x5cc>)
 8010af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af8:	08010b7b 	.word	0x08010b7b
 8010afc:	08010bf1 	.word	0x08010bf1
 8010b00:	08010b83 	.word	0x08010b83
 8010b04:	08010bf1 	.word	0x08010bf1
 8010b08:	08010bf1 	.word	0x08010bf1
 8010b0c:	08010bf1 	.word	0x08010bf1
 8010b10:	08010b93 	.word	0x08010b93
 8010b14:	08010bf1 	.word	0x08010bf1
 8010b18:	08010bf1 	.word	0x08010bf1
 8010b1c:	08010bf1 	.word	0x08010bf1
 8010b20:	08010bf1 	.word	0x08010bf1
 8010b24:	08010bf1 	.word	0x08010bf1
 8010b28:	08010bf1 	.word	0x08010bf1
 8010b2c:	08010bf1 	.word	0x08010bf1
 8010b30:	08010ba3 	.word	0x08010ba3
 8010b34:	08010bf1 	.word	0x08010bf1
 8010b38:	08010bf1 	.word	0x08010bf1
 8010b3c:	08010bf1 	.word	0x08010bf1
 8010b40:	08010bf1 	.word	0x08010bf1
 8010b44:	08010bf1 	.word	0x08010bf1
 8010b48:	08010bf1 	.word	0x08010bf1
 8010b4c:	08010bf1 	.word	0x08010bf1
 8010b50:	08010bf1 	.word	0x08010bf1
 8010b54:	08010bf1 	.word	0x08010bf1
 8010b58:	08010bf1 	.word	0x08010bf1
 8010b5c:	08010bf1 	.word	0x08010bf1
 8010b60:	08010bf1 	.word	0x08010bf1
 8010b64:	08010bf1 	.word	0x08010bf1
 8010b68:	08010bf1 	.word	0x08010bf1
 8010b6c:	08010bf1 	.word	0x08010bf1
 8010b70:	08010be3 	.word	0x08010be3
 8010b74:	2b40      	cmp	r3, #64	; 0x40
 8010b76:	d037      	beq.n	8010be8 <UART_SetConfig+0x6bc>
 8010b78:	e03a      	b.n	8010bf0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010b7a:	f7fb fd57 	bl	800c62c <HAL_RCCEx_GetD3PCLK1Freq>
 8010b7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010b80:	e03c      	b.n	8010bfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7fb fd66 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b90:	e034      	b.n	8010bfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b92:	f107 0318 	add.w	r3, r7, #24
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fb feb2 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ba0:	e02c      	b.n	8010bfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ba2:	4b09      	ldr	r3, [pc, #36]	; (8010bc8 <UART_SetConfig+0x69c>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f003 0320 	and.w	r3, r3, #32
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d016      	beq.n	8010bdc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010bae:	4b06      	ldr	r3, [pc, #24]	; (8010bc8 <UART_SetConfig+0x69c>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	08db      	lsrs	r3, r3, #3
 8010bb4:	f003 0303 	and.w	r3, r3, #3
 8010bb8:	4a07      	ldr	r2, [pc, #28]	; (8010bd8 <UART_SetConfig+0x6ac>)
 8010bba:	fa22 f303 	lsr.w	r3, r2, r3
 8010bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010bc0:	e01c      	b.n	8010bfc <UART_SetConfig+0x6d0>
 8010bc2:	bf00      	nop
 8010bc4:	40011400 	.word	0x40011400
 8010bc8:	58024400 	.word	0x58024400
 8010bcc:	40007800 	.word	0x40007800
 8010bd0:	40007c00 	.word	0x40007c00
 8010bd4:	58000c00 	.word	0x58000c00
 8010bd8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010bdc:	4b9d      	ldr	r3, [pc, #628]	; (8010e54 <UART_SetConfig+0x928>)
 8010bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010be0:	e00c      	b.n	8010bfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010be2:	4b9d      	ldr	r3, [pc, #628]	; (8010e58 <UART_SetConfig+0x92c>)
 8010be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010be6:	e009      	b.n	8010bfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bee:	e005      	b.n	8010bfc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010bfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f000 81de 	beq.w	8010fc0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c08:	4a94      	ldr	r2, [pc, #592]	; (8010e5c <UART_SetConfig+0x930>)
 8010c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c0e:	461a      	mov	r2, r3
 8010c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c16:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	685a      	ldr	r2, [r3, #4]
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	4413      	add	r3, r2
 8010c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d305      	bcc.n	8010c34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d903      	bls.n	8010c3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010c34:	2301      	movs	r3, #1
 8010c36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010c3a:	e1c1      	b.n	8010fc0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c3e:	2200      	movs	r2, #0
 8010c40:	60bb      	str	r3, [r7, #8]
 8010c42:	60fa      	str	r2, [r7, #12]
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c48:	4a84      	ldr	r2, [pc, #528]	; (8010e5c <UART_SetConfig+0x930>)
 8010c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	2200      	movs	r2, #0
 8010c52:	603b      	str	r3, [r7, #0]
 8010c54:	607a      	str	r2, [r7, #4]
 8010c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010c5e:	f7ef fb3f 	bl	80002e0 <__aeabi_uldivmod>
 8010c62:	4602      	mov	r2, r0
 8010c64:	460b      	mov	r3, r1
 8010c66:	4610      	mov	r0, r2
 8010c68:	4619      	mov	r1, r3
 8010c6a:	f04f 0200 	mov.w	r2, #0
 8010c6e:	f04f 0300 	mov.w	r3, #0
 8010c72:	020b      	lsls	r3, r1, #8
 8010c74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c78:	0202      	lsls	r2, r0, #8
 8010c7a:	6979      	ldr	r1, [r7, #20]
 8010c7c:	6849      	ldr	r1, [r1, #4]
 8010c7e:	0849      	lsrs	r1, r1, #1
 8010c80:	2000      	movs	r0, #0
 8010c82:	460c      	mov	r4, r1
 8010c84:	4605      	mov	r5, r0
 8010c86:	eb12 0804 	adds.w	r8, r2, r4
 8010c8a:	eb43 0905 	adc.w	r9, r3, r5
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	469a      	mov	sl, r3
 8010c96:	4693      	mov	fp, r2
 8010c98:	4652      	mov	r2, sl
 8010c9a:	465b      	mov	r3, fp
 8010c9c:	4640      	mov	r0, r8
 8010c9e:	4649      	mov	r1, r9
 8010ca0:	f7ef fb1e 	bl	80002e0 <__aeabi_uldivmod>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4613      	mov	r3, r2
 8010caa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010cb2:	d308      	bcc.n	8010cc6 <UART_SetConfig+0x79a>
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cba:	d204      	bcs.n	8010cc6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cc2:	60da      	str	r2, [r3, #12]
 8010cc4:	e17c      	b.n	8010fc0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010ccc:	e178      	b.n	8010fc0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	69db      	ldr	r3, [r3, #28]
 8010cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cd6:	f040 80c5 	bne.w	8010e64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010cda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010cde:	2b20      	cmp	r3, #32
 8010ce0:	dc48      	bgt.n	8010d74 <UART_SetConfig+0x848>
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	db7b      	blt.n	8010dde <UART_SetConfig+0x8b2>
 8010ce6:	2b20      	cmp	r3, #32
 8010ce8:	d879      	bhi.n	8010dde <UART_SetConfig+0x8b2>
 8010cea:	a201      	add	r2, pc, #4	; (adr r2, 8010cf0 <UART_SetConfig+0x7c4>)
 8010cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf0:	08010d7b 	.word	0x08010d7b
 8010cf4:	08010d83 	.word	0x08010d83
 8010cf8:	08010ddf 	.word	0x08010ddf
 8010cfc:	08010ddf 	.word	0x08010ddf
 8010d00:	08010d8b 	.word	0x08010d8b
 8010d04:	08010ddf 	.word	0x08010ddf
 8010d08:	08010ddf 	.word	0x08010ddf
 8010d0c:	08010ddf 	.word	0x08010ddf
 8010d10:	08010d9b 	.word	0x08010d9b
 8010d14:	08010ddf 	.word	0x08010ddf
 8010d18:	08010ddf 	.word	0x08010ddf
 8010d1c:	08010ddf 	.word	0x08010ddf
 8010d20:	08010ddf 	.word	0x08010ddf
 8010d24:	08010ddf 	.word	0x08010ddf
 8010d28:	08010ddf 	.word	0x08010ddf
 8010d2c:	08010ddf 	.word	0x08010ddf
 8010d30:	08010dab 	.word	0x08010dab
 8010d34:	08010ddf 	.word	0x08010ddf
 8010d38:	08010ddf 	.word	0x08010ddf
 8010d3c:	08010ddf 	.word	0x08010ddf
 8010d40:	08010ddf 	.word	0x08010ddf
 8010d44:	08010ddf 	.word	0x08010ddf
 8010d48:	08010ddf 	.word	0x08010ddf
 8010d4c:	08010ddf 	.word	0x08010ddf
 8010d50:	08010ddf 	.word	0x08010ddf
 8010d54:	08010ddf 	.word	0x08010ddf
 8010d58:	08010ddf 	.word	0x08010ddf
 8010d5c:	08010ddf 	.word	0x08010ddf
 8010d60:	08010ddf 	.word	0x08010ddf
 8010d64:	08010ddf 	.word	0x08010ddf
 8010d68:	08010ddf 	.word	0x08010ddf
 8010d6c:	08010ddf 	.word	0x08010ddf
 8010d70:	08010dd1 	.word	0x08010dd1
 8010d74:	2b40      	cmp	r3, #64	; 0x40
 8010d76:	d02e      	beq.n	8010dd6 <UART_SetConfig+0x8aa>
 8010d78:	e031      	b.n	8010dde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d7a:	f7f9 fc5f 	bl	800a63c <HAL_RCC_GetPCLK1Freq>
 8010d7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d80:	e033      	b.n	8010dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d82:	f7f9 fc71 	bl	800a668 <HAL_RCC_GetPCLK2Freq>
 8010d86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d88:	e02f      	b.n	8010dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fb fc62 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d98:	e027      	b.n	8010dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d9a:	f107 0318 	add.w	r3, r7, #24
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fb fdae 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010da8:	e01f      	b.n	8010dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010daa:	4b2d      	ldr	r3, [pc, #180]	; (8010e60 <UART_SetConfig+0x934>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f003 0320 	and.w	r3, r3, #32
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d009      	beq.n	8010dca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010db6:	4b2a      	ldr	r3, [pc, #168]	; (8010e60 <UART_SetConfig+0x934>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	08db      	lsrs	r3, r3, #3
 8010dbc:	f003 0303 	and.w	r3, r3, #3
 8010dc0:	4a24      	ldr	r2, [pc, #144]	; (8010e54 <UART_SetConfig+0x928>)
 8010dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8010dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010dc8:	e00f      	b.n	8010dea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010dca:	4b22      	ldr	r3, [pc, #136]	; (8010e54 <UART_SetConfig+0x928>)
 8010dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dce:	e00c      	b.n	8010dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010dd0:	4b21      	ldr	r3, [pc, #132]	; (8010e58 <UART_SetConfig+0x92c>)
 8010dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dd4:	e009      	b.n	8010dea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ddc:	e005      	b.n	8010dea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010dde:	2300      	movs	r3, #0
 8010de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010de2:	2301      	movs	r3, #1
 8010de4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010de8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f000 80e7 	beq.w	8010fc0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df6:	4a19      	ldr	r2, [pc, #100]	; (8010e5c <UART_SetConfig+0x930>)
 8010df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e04:	005a      	lsls	r2, r3, #1
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	085b      	lsrs	r3, r3, #1
 8010e0c:	441a      	add	r2, r3
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e16:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1a:	2b0f      	cmp	r3, #15
 8010e1c:	d916      	bls.n	8010e4c <UART_SetConfig+0x920>
 8010e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e24:	d212      	bcs.n	8010e4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	f023 030f 	bic.w	r3, r3, #15
 8010e2e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e32:	085b      	lsrs	r3, r3, #1
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	f003 0307 	and.w	r3, r3, #7
 8010e3a:	b29a      	uxth	r2, r3
 8010e3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010e48:	60da      	str	r2, [r3, #12]
 8010e4a:	e0b9      	b.n	8010fc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e52:	e0b5      	b.n	8010fc0 <UART_SetConfig+0xa94>
 8010e54:	03d09000 	.word	0x03d09000
 8010e58:	003d0900 	.word	0x003d0900
 8010e5c:	080166c4 	.word	0x080166c4
 8010e60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e68:	2b20      	cmp	r3, #32
 8010e6a:	dc49      	bgt.n	8010f00 <UART_SetConfig+0x9d4>
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	db7c      	blt.n	8010f6a <UART_SetConfig+0xa3e>
 8010e70:	2b20      	cmp	r3, #32
 8010e72:	d87a      	bhi.n	8010f6a <UART_SetConfig+0xa3e>
 8010e74:	a201      	add	r2, pc, #4	; (adr r2, 8010e7c <UART_SetConfig+0x950>)
 8010e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e7a:	bf00      	nop
 8010e7c:	08010f07 	.word	0x08010f07
 8010e80:	08010f0f 	.word	0x08010f0f
 8010e84:	08010f6b 	.word	0x08010f6b
 8010e88:	08010f6b 	.word	0x08010f6b
 8010e8c:	08010f17 	.word	0x08010f17
 8010e90:	08010f6b 	.word	0x08010f6b
 8010e94:	08010f6b 	.word	0x08010f6b
 8010e98:	08010f6b 	.word	0x08010f6b
 8010e9c:	08010f27 	.word	0x08010f27
 8010ea0:	08010f6b 	.word	0x08010f6b
 8010ea4:	08010f6b 	.word	0x08010f6b
 8010ea8:	08010f6b 	.word	0x08010f6b
 8010eac:	08010f6b 	.word	0x08010f6b
 8010eb0:	08010f6b 	.word	0x08010f6b
 8010eb4:	08010f6b 	.word	0x08010f6b
 8010eb8:	08010f6b 	.word	0x08010f6b
 8010ebc:	08010f37 	.word	0x08010f37
 8010ec0:	08010f6b 	.word	0x08010f6b
 8010ec4:	08010f6b 	.word	0x08010f6b
 8010ec8:	08010f6b 	.word	0x08010f6b
 8010ecc:	08010f6b 	.word	0x08010f6b
 8010ed0:	08010f6b 	.word	0x08010f6b
 8010ed4:	08010f6b 	.word	0x08010f6b
 8010ed8:	08010f6b 	.word	0x08010f6b
 8010edc:	08010f6b 	.word	0x08010f6b
 8010ee0:	08010f6b 	.word	0x08010f6b
 8010ee4:	08010f6b 	.word	0x08010f6b
 8010ee8:	08010f6b 	.word	0x08010f6b
 8010eec:	08010f6b 	.word	0x08010f6b
 8010ef0:	08010f6b 	.word	0x08010f6b
 8010ef4:	08010f6b 	.word	0x08010f6b
 8010ef8:	08010f6b 	.word	0x08010f6b
 8010efc:	08010f5d 	.word	0x08010f5d
 8010f00:	2b40      	cmp	r3, #64	; 0x40
 8010f02:	d02e      	beq.n	8010f62 <UART_SetConfig+0xa36>
 8010f04:	e031      	b.n	8010f6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f06:	f7f9 fb99 	bl	800a63c <HAL_RCC_GetPCLK1Freq>
 8010f0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f0c:	e033      	b.n	8010f76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010f0e:	f7f9 fbab 	bl	800a668 <HAL_RCC_GetPCLK2Freq>
 8010f12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f14:	e02f      	b.n	8010f76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fb fb9c 	bl	800c658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f24:	e027      	b.n	8010f76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f26:	f107 0318 	add.w	r3, r7, #24
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7fb fce8 	bl	800c900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f34:	e01f      	b.n	8010f76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f36:	4b2d      	ldr	r3, [pc, #180]	; (8010fec <UART_SetConfig+0xac0>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f003 0320 	and.w	r3, r3, #32
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d009      	beq.n	8010f56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f42:	4b2a      	ldr	r3, [pc, #168]	; (8010fec <UART_SetConfig+0xac0>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	08db      	lsrs	r3, r3, #3
 8010f48:	f003 0303 	and.w	r3, r3, #3
 8010f4c:	4a28      	ldr	r2, [pc, #160]	; (8010ff0 <UART_SetConfig+0xac4>)
 8010f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8010f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f54:	e00f      	b.n	8010f76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010f56:	4b26      	ldr	r3, [pc, #152]	; (8010ff0 <UART_SetConfig+0xac4>)
 8010f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f5a:	e00c      	b.n	8010f76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f5c:	4b25      	ldr	r3, [pc, #148]	; (8010ff4 <UART_SetConfig+0xac8>)
 8010f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f60:	e009      	b.n	8010f76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f68:	e005      	b.n	8010f76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010f6e:	2301      	movs	r3, #1
 8010f70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f74:	bf00      	nop
    }

    if (pclk != 0U)
 8010f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d021      	beq.n	8010fc0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f80:	4a1d      	ldr	r2, [pc, #116]	; (8010ff8 <UART_SetConfig+0xacc>)
 8010f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f86:	461a      	mov	r2, r3
 8010f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	085b      	lsrs	r3, r3, #1
 8010f94:	441a      	add	r2, r3
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa2:	2b0f      	cmp	r3, #15
 8010fa4:	d909      	bls.n	8010fba <UART_SetConfig+0xa8e>
 8010fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fac:	d205      	bcs.n	8010fba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb0:	b29a      	uxth	r2, r3
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	60da      	str	r2, [r3, #12]
 8010fb8:	e002      	b.n	8010fc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010fdc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3748      	adds	r7, #72	; 0x48
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010fea:	bf00      	nop
 8010fec:	58024400 	.word	0x58024400
 8010ff0:	03d09000 	.word	0x03d09000
 8010ff4:	003d0900 	.word	0x003d0900
 8010ff8:	080166c4 	.word	0x080166c4

08010ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011008:	f003 0308 	and.w	r3, r3, #8
 801100c:	2b00      	cmp	r3, #0
 801100e:	d00a      	beq.n	8011026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	430a      	orrs	r2, r1
 8011024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801102a:	f003 0301 	and.w	r3, r3, #1
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00a      	beq.n	8011048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	430a      	orrs	r2, r1
 8011046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801104c:	f003 0302 	and.w	r3, r3, #2
 8011050:	2b00      	cmp	r3, #0
 8011052:	d00a      	beq.n	801106a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	430a      	orrs	r2, r1
 8011068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801106e:	f003 0304 	and.w	r3, r3, #4
 8011072:	2b00      	cmp	r3, #0
 8011074:	d00a      	beq.n	801108c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	430a      	orrs	r2, r1
 801108a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011090:	f003 0310 	and.w	r3, r3, #16
 8011094:	2b00      	cmp	r3, #0
 8011096:	d00a      	beq.n	80110ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	689b      	ldr	r3, [r3, #8]
 801109e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	430a      	orrs	r2, r1
 80110ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110b2:	f003 0320 	and.w	r3, r3, #32
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d00a      	beq.n	80110d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	689b      	ldr	r3, [r3, #8]
 80110c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	430a      	orrs	r2, r1
 80110ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d01a      	beq.n	8011112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	430a      	orrs	r2, r1
 80110f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110fa:	d10a      	bne.n	8011112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	430a      	orrs	r2, r1
 8011110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00a      	beq.n	8011134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	685b      	ldr	r3, [r3, #4]
 8011124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	430a      	orrs	r2, r1
 8011132:	605a      	str	r2, [r3, #4]
  }
}
 8011134:	bf00      	nop
 8011136:	370c      	adds	r7, #12
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr

08011140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b098      	sub	sp, #96	; 0x60
 8011144:	af02      	add	r7, sp, #8
 8011146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2200      	movs	r2, #0
 801114c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011150:	f7f2 fb2e 	bl	80037b0 <HAL_GetTick>
 8011154:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f003 0308 	and.w	r3, r3, #8
 8011160:	2b08      	cmp	r3, #8
 8011162:	d12f      	bne.n	80111c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011168:	9300      	str	r3, [sp, #0]
 801116a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801116c:	2200      	movs	r2, #0
 801116e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f000 f88e 	bl	8011294 <UART_WaitOnFlagUntilTimeout>
 8011178:	4603      	mov	r3, r0
 801117a:	2b00      	cmp	r3, #0
 801117c:	d022      	beq.n	80111c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011186:	e853 3f00 	ldrex	r3, [r3]
 801118a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801118e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011192:	653b      	str	r3, [r7, #80]	; 0x50
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	461a      	mov	r2, r3
 801119a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801119c:	647b      	str	r3, [r7, #68]	; 0x44
 801119e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80111a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111a4:	e841 2300 	strex	r3, r2, [r1]
 80111a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80111aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d1e6      	bne.n	801117e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2220      	movs	r2, #32
 80111b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2200      	movs	r2, #0
 80111bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80111c0:	2303      	movs	r3, #3
 80111c2:	e063      	b.n	801128c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f003 0304 	and.w	r3, r3, #4
 80111ce:	2b04      	cmp	r3, #4
 80111d0:	d149      	bne.n	8011266 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80111d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80111d6:	9300      	str	r3, [sp, #0]
 80111d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111da:	2200      	movs	r2, #0
 80111dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f000 f857 	bl	8011294 <UART_WaitOnFlagUntilTimeout>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d03c      	beq.n	8011266 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f4:	e853 3f00 	ldrex	r3, [r3]
 80111f8:	623b      	str	r3, [r7, #32]
   return(result);
 80111fa:	6a3b      	ldr	r3, [r7, #32]
 80111fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	461a      	mov	r2, r3
 8011208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801120a:	633b      	str	r3, [r7, #48]	; 0x30
 801120c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801120e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011212:	e841 2300 	strex	r3, r2, [r1]
 8011216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121a:	2b00      	cmp	r3, #0
 801121c:	d1e6      	bne.n	80111ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	3308      	adds	r3, #8
 8011224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	e853 3f00 	ldrex	r3, [r3]
 801122c:	60fb      	str	r3, [r7, #12]
   return(result);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	f023 0301 	bic.w	r3, r3, #1
 8011234:	64bb      	str	r3, [r7, #72]	; 0x48
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	3308      	adds	r3, #8
 801123c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801123e:	61fa      	str	r2, [r7, #28]
 8011240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011242:	69b9      	ldr	r1, [r7, #24]
 8011244:	69fa      	ldr	r2, [r7, #28]
 8011246:	e841 2300 	strex	r3, r2, [r1]
 801124a:	617b      	str	r3, [r7, #20]
   return(result);
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d1e5      	bne.n	801121e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2220      	movs	r2, #32
 8011256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2200      	movs	r2, #0
 801125e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011262:	2303      	movs	r3, #3
 8011264:	e012      	b.n	801128c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2220      	movs	r2, #32
 801126a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2220      	movs	r2, #32
 8011272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2200      	movs	r2, #0
 801127a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2200      	movs	r2, #0
 8011280:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2200      	movs	r2, #0
 8011286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801128a:	2300      	movs	r3, #0
}
 801128c:	4618      	mov	r0, r3
 801128e:	3758      	adds	r7, #88	; 0x58
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b084      	sub	sp, #16
 8011298:	af00      	add	r7, sp, #0
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	603b      	str	r3, [r7, #0]
 80112a0:	4613      	mov	r3, r2
 80112a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80112a4:	e04f      	b.n	8011346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112ac:	d04b      	beq.n	8011346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80112ae:	f7f2 fa7f 	bl	80037b0 <HAL_GetTick>
 80112b2:	4602      	mov	r2, r0
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	1ad3      	subs	r3, r2, r3
 80112b8:	69ba      	ldr	r2, [r7, #24]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d302      	bcc.n	80112c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80112be:	69bb      	ldr	r3, [r7, #24]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d101      	bne.n	80112c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80112c4:	2303      	movs	r3, #3
 80112c6:	e04e      	b.n	8011366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f003 0304 	and.w	r3, r3, #4
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d037      	beq.n	8011346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	2b80      	cmp	r3, #128	; 0x80
 80112da:	d034      	beq.n	8011346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	2b40      	cmp	r3, #64	; 0x40
 80112e0:	d031      	beq.n	8011346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	69db      	ldr	r3, [r3, #28]
 80112e8:	f003 0308 	and.w	r3, r3, #8
 80112ec:	2b08      	cmp	r3, #8
 80112ee:	d110      	bne.n	8011312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2208      	movs	r2, #8
 80112f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112f8:	68f8      	ldr	r0, [r7, #12]
 80112fa:	f000 f95b 	bl	80115b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	2208      	movs	r2, #8
 8011302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2200      	movs	r2, #0
 801130a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801130e:	2301      	movs	r3, #1
 8011310:	e029      	b.n	8011366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	69db      	ldr	r3, [r3, #28]
 8011318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801131c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011320:	d111      	bne.n	8011346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801132a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801132c:	68f8      	ldr	r0, [r7, #12]
 801132e:	f000 f941 	bl	80115b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2220      	movs	r2, #32
 8011336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2200      	movs	r2, #0
 801133e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011342:	2303      	movs	r3, #3
 8011344:	e00f      	b.n	8011366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	69da      	ldr	r2, [r3, #28]
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	4013      	ands	r3, r2
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	429a      	cmp	r2, r3
 8011354:	bf0c      	ite	eq
 8011356:	2301      	moveq	r3, #1
 8011358:	2300      	movne	r3, #0
 801135a:	b2db      	uxtb	r3, r3
 801135c:	461a      	mov	r2, r3
 801135e:	79fb      	ldrb	r3, [r7, #7]
 8011360:	429a      	cmp	r2, r3
 8011362:	d0a0      	beq.n	80112a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
	...

08011370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011370:	b480      	push	{r7}
 8011372:	b0a3      	sub	sp, #140	; 0x8c
 8011374:	af00      	add	r7, sp, #0
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	4613      	mov	r3, r2
 801137c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	88fa      	ldrh	r2, [r7, #6]
 8011388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	88fa      	ldrh	r2, [r7, #6]
 8011390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2200      	movs	r2, #0
 8011398:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	689b      	ldr	r3, [r3, #8]
 801139e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113a2:	d10e      	bne.n	80113c2 <UART_Start_Receive_IT+0x52>
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	691b      	ldr	r3, [r3, #16]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d105      	bne.n	80113b8 <UART_Start_Receive_IT+0x48>
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80113b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113b6:	e02d      	b.n	8011414 <UART_Start_Receive_IT+0xa4>
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	22ff      	movs	r2, #255	; 0xff
 80113bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113c0:	e028      	b.n	8011414 <UART_Start_Receive_IT+0xa4>
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d10d      	bne.n	80113e6 <UART_Start_Receive_IT+0x76>
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	691b      	ldr	r3, [r3, #16]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d104      	bne.n	80113dc <UART_Start_Receive_IT+0x6c>
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	22ff      	movs	r2, #255	; 0xff
 80113d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113da:	e01b      	b.n	8011414 <UART_Start_Receive_IT+0xa4>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	227f      	movs	r2, #127	; 0x7f
 80113e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113e4:	e016      	b.n	8011414 <UART_Start_Receive_IT+0xa4>
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	689b      	ldr	r3, [r3, #8]
 80113ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80113ee:	d10d      	bne.n	801140c <UART_Start_Receive_IT+0x9c>
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	691b      	ldr	r3, [r3, #16]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d104      	bne.n	8011402 <UART_Start_Receive_IT+0x92>
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	227f      	movs	r2, #127	; 0x7f
 80113fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011400:	e008      	b.n	8011414 <UART_Start_Receive_IT+0xa4>
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	223f      	movs	r2, #63	; 0x3f
 8011406:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801140a:	e003      	b.n	8011414 <UART_Start_Receive_IT+0xa4>
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2200      	movs	r2, #0
 8011410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	2200      	movs	r2, #0
 8011418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	2222      	movs	r2, #34	; 0x22
 8011420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	3308      	adds	r3, #8
 801142a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801142c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801142e:	e853 3f00 	ldrex	r3, [r3]
 8011432:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011436:	f043 0301 	orr.w	r3, r3, #1
 801143a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	3308      	adds	r3, #8
 8011444:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011448:	673a      	str	r2, [r7, #112]	; 0x70
 801144a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801144c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801144e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011450:	e841 2300 	strex	r3, r2, [r1]
 8011454:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011458:	2b00      	cmp	r3, #0
 801145a:	d1e3      	bne.n	8011424 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011464:	d14f      	bne.n	8011506 <UART_Start_Receive_IT+0x196>
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801146c:	88fa      	ldrh	r2, [r7, #6]
 801146e:	429a      	cmp	r2, r3
 8011470:	d349      	bcc.n	8011506 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	689b      	ldr	r3, [r3, #8]
 8011476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801147a:	d107      	bne.n	801148c <UART_Start_Receive_IT+0x11c>
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	691b      	ldr	r3, [r3, #16]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d103      	bne.n	801148c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	4a47      	ldr	r2, [pc, #284]	; (80115a4 <UART_Start_Receive_IT+0x234>)
 8011488:	675a      	str	r2, [r3, #116]	; 0x74
 801148a:	e002      	b.n	8011492 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	4a46      	ldr	r2, [pc, #280]	; (80115a8 <UART_Start_Receive_IT+0x238>)
 8011490:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	691b      	ldr	r3, [r3, #16]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d01a      	beq.n	80114d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114a2:	e853 3f00 	ldrex	r3, [r3]
 80114a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80114a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	461a      	mov	r2, r3
 80114b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80114bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80114be:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80114c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114c4:	e841 2300 	strex	r3, r2, [r1]
 80114c8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80114ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d1e4      	bne.n	801149a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	3308      	adds	r3, #8
 80114d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114da:	e853 3f00 	ldrex	r3, [r3]
 80114de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80114e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	3308      	adds	r3, #8
 80114ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80114f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80114f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80114f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114f8:	e841 2300 	strex	r3, r2, [r1]
 80114fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80114fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011500:	2b00      	cmp	r3, #0
 8011502:	d1e5      	bne.n	80114d0 <UART_Start_Receive_IT+0x160>
 8011504:	e046      	b.n	8011594 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	689b      	ldr	r3, [r3, #8]
 801150a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801150e:	d107      	bne.n	8011520 <UART_Start_Receive_IT+0x1b0>
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	691b      	ldr	r3, [r3, #16]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d103      	bne.n	8011520 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	4a24      	ldr	r2, [pc, #144]	; (80115ac <UART_Start_Receive_IT+0x23c>)
 801151c:	675a      	str	r2, [r3, #116]	; 0x74
 801151e:	e002      	b.n	8011526 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	4a23      	ldr	r2, [pc, #140]	; (80115b0 <UART_Start_Receive_IT+0x240>)
 8011524:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d019      	beq.n	8011562 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	e853 3f00 	ldrex	r3, [r3]
 801153a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011542:	677b      	str	r3, [r7, #116]	; 0x74
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	461a      	mov	r2, r3
 801154a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801154c:	637b      	str	r3, [r7, #52]	; 0x34
 801154e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011554:	e841 2300 	strex	r3, r2, [r1]
 8011558:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155c:	2b00      	cmp	r3, #0
 801155e:	d1e6      	bne.n	801152e <UART_Start_Receive_IT+0x1be>
 8011560:	e018      	b.n	8011594 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	e853 3f00 	ldrex	r3, [r3]
 801156e:	613b      	str	r3, [r7, #16]
   return(result);
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	f043 0320 	orr.w	r3, r3, #32
 8011576:	67bb      	str	r3, [r7, #120]	; 0x78
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	461a      	mov	r2, r3
 801157e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011580:	623b      	str	r3, [r7, #32]
 8011582:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011584:	69f9      	ldr	r1, [r7, #28]
 8011586:	6a3a      	ldr	r2, [r7, #32]
 8011588:	e841 2300 	strex	r3, r2, [r1]
 801158c:	61bb      	str	r3, [r7, #24]
   return(result);
 801158e:	69bb      	ldr	r3, [r7, #24]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d1e6      	bne.n	8011562 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011594:	2300      	movs	r3, #0
}
 8011596:	4618      	mov	r0, r3
 8011598:	378c      	adds	r7, #140	; 0x8c
 801159a:	46bd      	mov	sp, r7
 801159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a0:	4770      	bx	lr
 80115a2:	bf00      	nop
 80115a4:	08011dd5 	.word	0x08011dd5
 80115a8:	08011a75 	.word	0x08011a75
 80115ac:	080118bd 	.word	0x080118bd
 80115b0:	08011705 	.word	0x08011705

080115b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80115b4:	b480      	push	{r7}
 80115b6:	b095      	sub	sp, #84	; 0x54
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115c4:	e853 3f00 	ldrex	r3, [r3]
 80115c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80115ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80115d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	461a      	mov	r2, r3
 80115d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115da:	643b      	str	r3, [r7, #64]	; 0x40
 80115dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80115e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80115e2:	e841 2300 	strex	r3, r2, [r1]
 80115e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80115e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1e6      	bne.n	80115bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	3308      	adds	r3, #8
 80115f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115f6:	6a3b      	ldr	r3, [r7, #32]
 80115f8:	e853 3f00 	ldrex	r3, [r3]
 80115fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80115fe:	69fa      	ldr	r2, [r7, #28]
 8011600:	4b1e      	ldr	r3, [pc, #120]	; (801167c <UART_EndRxTransfer+0xc8>)
 8011602:	4013      	ands	r3, r2
 8011604:	64bb      	str	r3, [r7, #72]	; 0x48
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	3308      	adds	r3, #8
 801160c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801160e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011610:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011616:	e841 2300 	strex	r3, r2, [r1]
 801161a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161e:	2b00      	cmp	r3, #0
 8011620:	d1e5      	bne.n	80115ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011626:	2b01      	cmp	r3, #1
 8011628:	d118      	bne.n	801165c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	e853 3f00 	ldrex	r3, [r3]
 8011636:	60bb      	str	r3, [r7, #8]
   return(result);
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	f023 0310 	bic.w	r3, r3, #16
 801163e:	647b      	str	r3, [r7, #68]	; 0x44
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	461a      	mov	r2, r3
 8011646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011648:	61bb      	str	r3, [r7, #24]
 801164a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801164c:	6979      	ldr	r1, [r7, #20]
 801164e:	69ba      	ldr	r2, [r7, #24]
 8011650:	e841 2300 	strex	r3, r2, [r1]
 8011654:	613b      	str	r3, [r7, #16]
   return(result);
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1e6      	bne.n	801162a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2220      	movs	r2, #32
 8011660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011670:	bf00      	nop
 8011672:	3754      	adds	r7, #84	; 0x54
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	effffffe 	.word	0xeffffffe

08011680 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801168c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2200      	movs	r2, #0
 8011692:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2200      	movs	r2, #0
 801169a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f7fe ff2e 	bl	8010500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116a4:	bf00      	nop
 80116a6:	3710      	adds	r7, #16
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b088      	sub	sp, #32
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	e853 3f00 	ldrex	r3, [r3]
 80116c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116c8:	61fb      	str	r3, [r7, #28]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	461a      	mov	r2, r3
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	61bb      	str	r3, [r7, #24]
 80116d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116d6:	6979      	ldr	r1, [r7, #20]
 80116d8:	69ba      	ldr	r2, [r7, #24]
 80116da:	e841 2300 	strex	r3, r2, [r1]
 80116de:	613b      	str	r3, [r7, #16]
   return(result);
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d1e6      	bne.n	80116b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2220      	movs	r2, #32
 80116ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2200      	movs	r2, #0
 80116f2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7fe fef9 	bl	80104ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116fa:	bf00      	nop
 80116fc:	3720      	adds	r7, #32
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
	...

08011704 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b09c      	sub	sp, #112	; 0x70
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011712:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801171c:	2b22      	cmp	r3, #34	; 0x22
 801171e:	f040 80be 	bne.w	801189e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011728:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801172c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011730:	b2d9      	uxtb	r1, r3
 8011732:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011736:	b2da      	uxtb	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801173c:	400a      	ands	r2, r1
 801173e:	b2d2      	uxtb	r2, r2
 8011740:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011746:	1c5a      	adds	r2, r3, #1
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011752:	b29b      	uxth	r3, r3
 8011754:	3b01      	subs	r3, #1
 8011756:	b29a      	uxth	r2, r3
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011764:	b29b      	uxth	r3, r3
 8011766:	2b00      	cmp	r3, #0
 8011768:	f040 80a1 	bne.w	80118ae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011774:	e853 3f00 	ldrex	r3, [r3]
 8011778:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801177a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801177c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011780:	66bb      	str	r3, [r7, #104]	; 0x68
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	461a      	mov	r2, r3
 8011788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801178a:	65bb      	str	r3, [r7, #88]	; 0x58
 801178c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801178e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011792:	e841 2300 	strex	r3, r2, [r1]
 8011796:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801179a:	2b00      	cmp	r3, #0
 801179c:	d1e6      	bne.n	801176c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3308      	adds	r3, #8
 80117a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a8:	e853 3f00 	ldrex	r3, [r3]
 80117ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80117ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117b0:	f023 0301 	bic.w	r3, r3, #1
 80117b4:	667b      	str	r3, [r7, #100]	; 0x64
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	3308      	adds	r3, #8
 80117bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80117be:	647a      	str	r2, [r7, #68]	; 0x44
 80117c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80117c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80117c6:	e841 2300 	strex	r3, r2, [r1]
 80117ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80117cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1e5      	bne.n	801179e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2220      	movs	r2, #32
 80117d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	4a33      	ldr	r2, [pc, #204]	; (80118b8 <UART_RxISR_8BIT+0x1b4>)
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d01f      	beq.n	8011830 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d018      	beq.n	8011830 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011806:	e853 3f00 	ldrex	r3, [r3]
 801180a:	623b      	str	r3, [r7, #32]
   return(result);
 801180c:	6a3b      	ldr	r3, [r7, #32]
 801180e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011812:	663b      	str	r3, [r7, #96]	; 0x60
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	461a      	mov	r2, r3
 801181a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801181c:	633b      	str	r3, [r7, #48]	; 0x30
 801181e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011820:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011824:	e841 2300 	strex	r3, r2, [r1]
 8011828:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801182a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182c:	2b00      	cmp	r3, #0
 801182e:	d1e6      	bne.n	80117fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011834:	2b01      	cmp	r3, #1
 8011836:	d12e      	bne.n	8011896 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2200      	movs	r2, #0
 801183c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	e853 3f00 	ldrex	r3, [r3]
 801184a:	60fb      	str	r3, [r7, #12]
   return(result);
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f023 0310 	bic.w	r3, r3, #16
 8011852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	461a      	mov	r2, r3
 801185a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801185c:	61fb      	str	r3, [r7, #28]
 801185e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011860:	69b9      	ldr	r1, [r7, #24]
 8011862:	69fa      	ldr	r2, [r7, #28]
 8011864:	e841 2300 	strex	r3, r2, [r1]
 8011868:	617b      	str	r3, [r7, #20]
   return(result);
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d1e6      	bne.n	801183e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	69db      	ldr	r3, [r3, #28]
 8011876:	f003 0310 	and.w	r3, r3, #16
 801187a:	2b10      	cmp	r3, #16
 801187c:	d103      	bne.n	8011886 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2210      	movs	r2, #16
 8011884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801188c:	4619      	mov	r1, r3
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7fe fe40 	bl	8010514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011894:	e00b      	b.n	80118ae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f7ee feda 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 801189c:	e007      	b.n	80118ae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	699a      	ldr	r2, [r3, #24]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f042 0208 	orr.w	r2, r2, #8
 80118ac:	619a      	str	r2, [r3, #24]
}
 80118ae:	bf00      	nop
 80118b0:	3770      	adds	r7, #112	; 0x70
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	bf00      	nop
 80118b8:	58000c00 	.word	0x58000c00

080118bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b09c      	sub	sp, #112	; 0x70
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118d4:	2b22      	cmp	r3, #34	; 0x22
 80118d6:	f040 80be 	bne.w	8011a56 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118e8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80118ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80118ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80118f2:	4013      	ands	r3, r2
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118fe:	1c9a      	adds	r2, r3, #2
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801190a:	b29b      	uxth	r3, r3
 801190c:	3b01      	subs	r3, #1
 801190e:	b29a      	uxth	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801191c:	b29b      	uxth	r3, r3
 801191e:	2b00      	cmp	r3, #0
 8011920:	f040 80a1 	bne.w	8011a66 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801192a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801192c:	e853 3f00 	ldrex	r3, [r3]
 8011930:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011938:	667b      	str	r3, [r7, #100]	; 0x64
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	461a      	mov	r2, r3
 8011940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011942:	657b      	str	r3, [r7, #84]	; 0x54
 8011944:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011946:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801194a:	e841 2300 	strex	r3, r2, [r1]
 801194e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011952:	2b00      	cmp	r3, #0
 8011954:	d1e6      	bne.n	8011924 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	3308      	adds	r3, #8
 801195c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011960:	e853 3f00 	ldrex	r3, [r3]
 8011964:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011968:	f023 0301 	bic.w	r3, r3, #1
 801196c:	663b      	str	r3, [r7, #96]	; 0x60
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	3308      	adds	r3, #8
 8011974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011976:	643a      	str	r2, [r7, #64]	; 0x40
 8011978:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801197a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801197c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801197e:	e841 2300 	strex	r3, r2, [r1]
 8011982:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011986:	2b00      	cmp	r3, #0
 8011988:	d1e5      	bne.n	8011956 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2220      	movs	r2, #32
 801198e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2200      	movs	r2, #0
 8011996:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2200      	movs	r2, #0
 801199c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	4a33      	ldr	r2, [pc, #204]	; (8011a70 <UART_RxISR_16BIT+0x1b4>)
 80119a4:	4293      	cmp	r3, r2
 80119a6:	d01f      	beq.n	80119e8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d018      	beq.n	80119e8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119bc:	6a3b      	ldr	r3, [r7, #32]
 80119be:	e853 3f00 	ldrex	r3, [r3]
 80119c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80119ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	461a      	mov	r2, r3
 80119d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119dc:	e841 2300 	strex	r3, r2, [r1]
 80119e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80119e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d1e6      	bne.n	80119b6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d12e      	bne.n	8011a4e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2200      	movs	r2, #0
 80119f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	e853 3f00 	ldrex	r3, [r3]
 8011a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	f023 0310 	bic.w	r3, r3, #16
 8011a0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	461a      	mov	r2, r3
 8011a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011a14:	61bb      	str	r3, [r7, #24]
 8011a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a18:	6979      	ldr	r1, [r7, #20]
 8011a1a:	69ba      	ldr	r2, [r7, #24]
 8011a1c:	e841 2300 	strex	r3, r2, [r1]
 8011a20:	613b      	str	r3, [r7, #16]
   return(result);
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d1e6      	bne.n	80119f6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	69db      	ldr	r3, [r3, #28]
 8011a2e:	f003 0310 	and.w	r3, r3, #16
 8011a32:	2b10      	cmp	r3, #16
 8011a34:	d103      	bne.n	8011a3e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	2210      	movs	r2, #16
 8011a3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011a44:	4619      	mov	r1, r3
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f7fe fd64 	bl	8010514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011a4c:	e00b      	b.n	8011a66 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f7ee fdfe 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011a54:	e007      	b.n	8011a66 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	699a      	ldr	r2, [r3, #24]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	f042 0208 	orr.w	r2, r2, #8
 8011a64:	619a      	str	r2, [r3, #24]
}
 8011a66:	bf00      	nop
 8011a68:	3770      	adds	r7, #112	; 0x70
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	58000c00 	.word	0x58000c00

08011a74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b0ac      	sub	sp, #176	; 0xb0
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a82:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	69db      	ldr	r3, [r3, #28]
 8011a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	689b      	ldr	r3, [r3, #8]
 8011aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011aaa:	2b22      	cmp	r3, #34	; 0x22
 8011aac:	f040 8180 	bne.w	8011db0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ab6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011aba:	e123      	b.n	8011d04 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011ac6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011aca:	b2d9      	uxtb	r1, r3
 8011acc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011ad0:	b2da      	uxtb	r2, r3
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ad6:	400a      	ands	r2, r1
 8011ad8:	b2d2      	uxtb	r2, r2
 8011ada:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ae0:	1c5a      	adds	r2, r3, #1
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	3b01      	subs	r3, #1
 8011af0:	b29a      	uxth	r2, r3
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	69db      	ldr	r3, [r3, #28]
 8011afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b06:	f003 0307 	and.w	r3, r3, #7
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d053      	beq.n	8011bb6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b12:	f003 0301 	and.w	r3, r3, #1
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d011      	beq.n	8011b3e <UART_RxISR_8BIT_FIFOEN+0xca>
 8011b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00b      	beq.n	8011b3e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b34:	f043 0201 	orr.w	r2, r3, #1
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b42:	f003 0302 	and.w	r3, r3, #2
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d011      	beq.n	8011b6e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011b4e:	f003 0301 	and.w	r3, r3, #1
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d00b      	beq.n	8011b6e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2202      	movs	r2, #2
 8011b5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b64:	f043 0204 	orr.w	r2, r3, #4
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b72:	f003 0304 	and.w	r3, r3, #4
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d011      	beq.n	8011b9e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011b7e:	f003 0301 	and.w	r3, r3, #1
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d00b      	beq.n	8011b9e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	2204      	movs	r2, #4
 8011b8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b94:	f043 0202 	orr.w	r2, r3, #2
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d006      	beq.n	8011bb6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7fe fca9 	bl	8010500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	f040 80a0 	bne.w	8011d04 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011bcc:	e853 3f00 	ldrex	r3, [r3]
 8011bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	461a      	mov	r2, r3
 8011be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011be6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011be8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011bec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011bee:	e841 2300 	strex	r3, r2, [r1]
 8011bf2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d1e4      	bne.n	8011bc4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	3308      	adds	r3, #8
 8011c00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c04:	e853 3f00 	ldrex	r3, [r3]
 8011c08:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c0c:	4b6e      	ldr	r3, [pc, #440]	; (8011dc8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011c0e:	4013      	ands	r3, r2
 8011c10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	3308      	adds	r3, #8
 8011c1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011c1e:	66ba      	str	r2, [r7, #104]	; 0x68
 8011c20:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011c24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011c26:	e841 2300 	strex	r3, r2, [r1]
 8011c2a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d1e3      	bne.n	8011bfa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2220      	movs	r2, #32
 8011c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4a60      	ldr	r2, [pc, #384]	; (8011dcc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d021      	beq.n	8011c94 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d01a      	beq.n	8011c94 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c66:	e853 3f00 	ldrex	r3, [r3]
 8011c6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c80:	657b      	str	r3, [r7, #84]	; 0x54
 8011c82:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011c86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c88:	e841 2300 	strex	r3, r2, [r1]
 8011c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d1e4      	bne.n	8011c5e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	d130      	bne.n	8011cfe <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011caa:	e853 3f00 	ldrex	r3, [r3]
 8011cae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb2:	f023 0310 	bic.w	r3, r3, #16
 8011cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8011cc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ccc:	e841 2300 	strex	r3, r2, [r1]
 8011cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d1e4      	bne.n	8011ca2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	69db      	ldr	r3, [r3, #28]
 8011cde:	f003 0310 	and.w	r3, r3, #16
 8011ce2:	2b10      	cmp	r3, #16
 8011ce4:	d103      	bne.n	8011cee <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	2210      	movs	r2, #16
 8011cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f7fe fc0c 	bl	8010514 <HAL_UARTEx_RxEventCallback>
 8011cfc:	e002      	b.n	8011d04 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7ee fca6 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011d04:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d006      	beq.n	8011d1a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011d10:	f003 0320 	and.w	r3, r3, #32
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f47f aed1 	bne.w	8011abc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011d24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d049      	beq.n	8011dc0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d32:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d242      	bcs.n	8011dc0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	3308      	adds	r3, #8
 8011d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d42:	6a3b      	ldr	r3, [r7, #32]
 8011d44:	e853 3f00 	ldrex	r3, [r3]
 8011d48:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	3308      	adds	r3, #8
 8011d5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d66:	e841 2300 	strex	r3, r2, [r1]
 8011d6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d1e3      	bne.n	8011d3a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	4a16      	ldr	r2, [pc, #88]	; (8011dd0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011d76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	e853 3f00 	ldrex	r3, [r3]
 8011d84:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	f043 0320 	orr.w	r3, r3, #32
 8011d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	461a      	mov	r2, r3
 8011d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d9a:	61bb      	str	r3, [r7, #24]
 8011d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d9e:	6979      	ldr	r1, [r7, #20]
 8011da0:	69ba      	ldr	r2, [r7, #24]
 8011da2:	e841 2300 	strex	r3, r2, [r1]
 8011da6:	613b      	str	r3, [r7, #16]
   return(result);
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d1e4      	bne.n	8011d78 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011dae:	e007      	b.n	8011dc0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	699a      	ldr	r2, [r3, #24]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f042 0208 	orr.w	r2, r2, #8
 8011dbe:	619a      	str	r2, [r3, #24]
}
 8011dc0:	bf00      	nop
 8011dc2:	37b0      	adds	r7, #176	; 0xb0
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	effffffe 	.word	0xeffffffe
 8011dcc:	58000c00 	.word	0x58000c00
 8011dd0:	08011705 	.word	0x08011705

08011dd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b0ae      	sub	sp, #184	; 0xb8
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011de2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	69db      	ldr	r3, [r3, #28]
 8011dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	689b      	ldr	r3, [r3, #8]
 8011e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e0a:	2b22      	cmp	r3, #34	; 0x22
 8011e0c:	f040 8184 	bne.w	8012118 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e16:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e1a:	e127      	b.n	801206c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e22:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011e2e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011e32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011e36:	4013      	ands	r3, r2
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011e3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e44:	1c9a      	adds	r2, r3, #2
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	3b01      	subs	r3, #1
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	69db      	ldr	r3, [r3, #28]
 8011e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e6a:	f003 0307 	and.w	r3, r3, #7
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d053      	beq.n	8011f1a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e76:	f003 0301 	and.w	r3, r3, #1
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d011      	beq.n	8011ea2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8011e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d00b      	beq.n	8011ea2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	2201      	movs	r2, #1
 8011e90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e98:	f043 0201 	orr.w	r2, r3, #1
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011ea6:	f003 0302 	and.w	r3, r3, #2
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d011      	beq.n	8011ed2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011eb2:	f003 0301 	and.w	r3, r3, #1
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d00b      	beq.n	8011ed2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2202      	movs	r2, #2
 8011ec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ec8:	f043 0204 	orr.w	r2, r3, #4
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011ed6:	f003 0304 	and.w	r3, r3, #4
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d011      	beq.n	8011f02 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011ee2:	f003 0301 	and.w	r3, r3, #1
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d00b      	beq.n	8011f02 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	2204      	movs	r2, #4
 8011ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ef8:	f043 0202 	orr.w	r2, r3, #2
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d006      	beq.n	8011f1a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7fe faf7 	bl	8010500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2200      	movs	r2, #0
 8011f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	f040 80a2 	bne.w	801206c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f30:	e853 3f00 	ldrex	r3, [r3]
 8011f34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	461a      	mov	r2, r3
 8011f46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f4e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011f56:	e841 2300 	strex	r3, r2, [r1]
 8011f5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d1e2      	bne.n	8011f28 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	3308      	adds	r3, #8
 8011f68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f6c:	e853 3f00 	ldrex	r3, [r3]
 8011f70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011f72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f74:	4b6e      	ldr	r3, [pc, #440]	; (8012130 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011f76:	4013      	ands	r3, r2
 8011f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	3308      	adds	r3, #8
 8011f82:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011f86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011f88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011f8e:	e841 2300 	strex	r3, r2, [r1]
 8011f92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d1e3      	bne.n	8011f62 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2220      	movs	r2, #32
 8011f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a60      	ldr	r2, [pc, #384]	; (8012134 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d021      	beq.n	8011ffc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d01a      	beq.n	8011ffc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fce:	e853 3f00 	ldrex	r3, [r3]
 8011fd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	461a      	mov	r2, r3
 8011fe4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8011fea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011fee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011ff0:	e841 2300 	strex	r3, r2, [r1]
 8011ff4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d1e4      	bne.n	8011fc6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012000:	2b01      	cmp	r3, #1
 8012002:	d130      	bne.n	8012066 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2200      	movs	r2, #0
 8012008:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012012:	e853 3f00 	ldrex	r3, [r3]
 8012016:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801201a:	f023 0310 	bic.w	r3, r3, #16
 801201e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	461a      	mov	r2, r3
 8012028:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801202c:	647b      	str	r3, [r7, #68]	; 0x44
 801202e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012030:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012034:	e841 2300 	strex	r3, r2, [r1]
 8012038:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801203a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801203c:	2b00      	cmp	r3, #0
 801203e:	d1e4      	bne.n	801200a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	69db      	ldr	r3, [r3, #28]
 8012046:	f003 0310 	and.w	r3, r3, #16
 801204a:	2b10      	cmp	r3, #16
 801204c:	d103      	bne.n	8012056 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	2210      	movs	r2, #16
 8012054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801205c:	4619      	mov	r1, r3
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f7fe fa58 	bl	8010514 <HAL_UARTEx_RxEventCallback>
 8012064:	e002      	b.n	801206c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f7ee faf2 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801206c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012070:	2b00      	cmp	r3, #0
 8012072:	d006      	beq.n	8012082 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012074:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012078:	f003 0320 	and.w	r3, r3, #32
 801207c:	2b00      	cmp	r3, #0
 801207e:	f47f aecd 	bne.w	8011e1c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012088:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801208c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012090:	2b00      	cmp	r3, #0
 8012092:	d049      	beq.n	8012128 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801209a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801209e:	429a      	cmp	r2, r3
 80120a0:	d242      	bcs.n	8012128 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	3308      	adds	r3, #8
 80120a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ac:	e853 3f00 	ldrex	r3, [r3]
 80120b0:	623b      	str	r3, [r7, #32]
   return(result);
 80120b2:	6a3b      	ldr	r3, [r7, #32]
 80120b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80120b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	3308      	adds	r3, #8
 80120c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80120c6:	633a      	str	r2, [r7, #48]	; 0x30
 80120c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120ce:	e841 2300 	strex	r3, r2, [r1]
 80120d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80120d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d1e3      	bne.n	80120a2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	4a16      	ldr	r2, [pc, #88]	; (8012138 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80120de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	e853 3f00 	ldrex	r3, [r3]
 80120ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	f043 0320 	orr.w	r3, r3, #32
 80120f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	461a      	mov	r2, r3
 80120fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012102:	61fb      	str	r3, [r7, #28]
 8012104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012106:	69b9      	ldr	r1, [r7, #24]
 8012108:	69fa      	ldr	r2, [r7, #28]
 801210a:	e841 2300 	strex	r3, r2, [r1]
 801210e:	617b      	str	r3, [r7, #20]
   return(result);
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d1e4      	bne.n	80120e0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012116:	e007      	b.n	8012128 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	699a      	ldr	r2, [r3, #24]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f042 0208 	orr.w	r2, r2, #8
 8012126:	619a      	str	r2, [r3, #24]
}
 8012128:	bf00      	nop
 801212a:	37b8      	adds	r7, #184	; 0xb8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}
 8012130:	effffffe 	.word	0xeffffffe
 8012134:	58000c00 	.word	0x58000c00
 8012138:	080118bd 	.word	0x080118bd

0801213c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012144:	bf00      	nop
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012158:	bf00      	nop
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012164:	b480      	push	{r7}
 8012166:	b083      	sub	sp, #12
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801216c:	bf00      	nop
 801216e:	370c      	adds	r7, #12
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr

08012178 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012186:	2b01      	cmp	r3, #1
 8012188:	d101      	bne.n	801218e <HAL_UARTEx_DisableFifoMode+0x16>
 801218a:	2302      	movs	r3, #2
 801218c:	e027      	b.n	80121de <HAL_UARTEx_DisableFifoMode+0x66>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2201      	movs	r2, #1
 8012192:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2224      	movs	r2, #36	; 0x24
 801219a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f022 0201 	bic.w	r2, r2, #1
 80121b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80121bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2200      	movs	r2, #0
 80121c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	68fa      	ldr	r2, [r7, #12]
 80121ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2220      	movs	r2, #32
 80121d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2200      	movs	r2, #0
 80121d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121dc:	2300      	movs	r3, #0
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3714      	adds	r7, #20
 80121e2:	46bd      	mov	sp, r7
 80121e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e8:	4770      	bx	lr

080121ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80121ea:	b580      	push	{r7, lr}
 80121ec:	b084      	sub	sp, #16
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
 80121f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d101      	bne.n	8012202 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80121fe:	2302      	movs	r3, #2
 8012200:	e02d      	b.n	801225e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2201      	movs	r2, #1
 8012206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2224      	movs	r2, #36	; 0x24
 801220e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	f022 0201 	bic.w	r2, r2, #1
 8012228:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	689b      	ldr	r3, [r3, #8]
 8012230:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	683a      	ldr	r2, [r7, #0]
 801223a:	430a      	orrs	r2, r1
 801223c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 f850 	bl	80122e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68fa      	ldr	r2, [r7, #12]
 801224a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2220      	movs	r2, #32
 8012250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2200      	movs	r2, #0
 8012258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801225c:	2300      	movs	r3, #0
}
 801225e:	4618      	mov	r0, r3
 8012260:	3710      	adds	r7, #16
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}

08012266 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012266:	b580      	push	{r7, lr}
 8012268:	b084      	sub	sp, #16
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012276:	2b01      	cmp	r3, #1
 8012278:	d101      	bne.n	801227e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801227a:	2302      	movs	r3, #2
 801227c:	e02d      	b.n	80122da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2201      	movs	r2, #1
 8012282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2224      	movs	r2, #36	; 0x24
 801228a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	f022 0201 	bic.w	r2, r2, #1
 80122a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	689b      	ldr	r3, [r3, #8]
 80122ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	683a      	ldr	r2, [r7, #0]
 80122b6:	430a      	orrs	r2, r1
 80122b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 f812 	bl	80122e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	68fa      	ldr	r2, [r7, #12]
 80122c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2220      	movs	r2, #32
 80122cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2200      	movs	r2, #0
 80122d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80122d8:	2300      	movs	r3, #0
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
	...

080122e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b085      	sub	sp, #20
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d108      	bne.n	8012306 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2201      	movs	r2, #1
 80122f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2201      	movs	r2, #1
 8012300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012304:	e031      	b.n	801236a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012306:	2310      	movs	r3, #16
 8012308:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801230a:	2310      	movs	r3, #16
 801230c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	689b      	ldr	r3, [r3, #8]
 8012314:	0e5b      	lsrs	r3, r3, #25
 8012316:	b2db      	uxtb	r3, r3
 8012318:	f003 0307 	and.w	r3, r3, #7
 801231c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	689b      	ldr	r3, [r3, #8]
 8012324:	0f5b      	lsrs	r3, r3, #29
 8012326:	b2db      	uxtb	r3, r3
 8012328:	f003 0307 	and.w	r3, r3, #7
 801232c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801232e:	7bbb      	ldrb	r3, [r7, #14]
 8012330:	7b3a      	ldrb	r2, [r7, #12]
 8012332:	4911      	ldr	r1, [pc, #68]	; (8012378 <UARTEx_SetNbDataToProcess+0x94>)
 8012334:	5c8a      	ldrb	r2, [r1, r2]
 8012336:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801233a:	7b3a      	ldrb	r2, [r7, #12]
 801233c:	490f      	ldr	r1, [pc, #60]	; (801237c <UARTEx_SetNbDataToProcess+0x98>)
 801233e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012340:	fb93 f3f2 	sdiv	r3, r3, r2
 8012344:	b29a      	uxth	r2, r3
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801234c:	7bfb      	ldrb	r3, [r7, #15]
 801234e:	7b7a      	ldrb	r2, [r7, #13]
 8012350:	4909      	ldr	r1, [pc, #36]	; (8012378 <UARTEx_SetNbDataToProcess+0x94>)
 8012352:	5c8a      	ldrb	r2, [r1, r2]
 8012354:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012358:	7b7a      	ldrb	r2, [r7, #13]
 801235a:	4908      	ldr	r1, [pc, #32]	; (801237c <UARTEx_SetNbDataToProcess+0x98>)
 801235c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801235e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012362:	b29a      	uxth	r2, r3
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801236a:	bf00      	nop
 801236c:	3714      	adds	r7, #20
 801236e:	46bd      	mov	sp, r7
 8012370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012374:	4770      	bx	lr
 8012376:	bf00      	nop
 8012378:	080166dc 	.word	0x080166dc
 801237c:	080166e4 	.word	0x080166e4

08012380 <__NVIC_SetPriority>:
{
 8012380:	b480      	push	{r7}
 8012382:	b083      	sub	sp, #12
 8012384:	af00      	add	r7, sp, #0
 8012386:	4603      	mov	r3, r0
 8012388:	6039      	str	r1, [r7, #0]
 801238a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801238c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012390:	2b00      	cmp	r3, #0
 8012392:	db0a      	blt.n	80123aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	b2da      	uxtb	r2, r3
 8012398:	490c      	ldr	r1, [pc, #48]	; (80123cc <__NVIC_SetPriority+0x4c>)
 801239a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801239e:	0112      	lsls	r2, r2, #4
 80123a0:	b2d2      	uxtb	r2, r2
 80123a2:	440b      	add	r3, r1
 80123a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80123a8:	e00a      	b.n	80123c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	b2da      	uxtb	r2, r3
 80123ae:	4908      	ldr	r1, [pc, #32]	; (80123d0 <__NVIC_SetPriority+0x50>)
 80123b0:	88fb      	ldrh	r3, [r7, #6]
 80123b2:	f003 030f 	and.w	r3, r3, #15
 80123b6:	3b04      	subs	r3, #4
 80123b8:	0112      	lsls	r2, r2, #4
 80123ba:	b2d2      	uxtb	r2, r2
 80123bc:	440b      	add	r3, r1
 80123be:	761a      	strb	r2, [r3, #24]
}
 80123c0:	bf00      	nop
 80123c2:	370c      	adds	r7, #12
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr
 80123cc:	e000e100 	.word	0xe000e100
 80123d0:	e000ed00 	.word	0xe000ed00

080123d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80123d4:	b580      	push	{r7, lr}
 80123d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80123d8:	4b05      	ldr	r3, [pc, #20]	; (80123f0 <SysTick_Handler+0x1c>)
 80123da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80123dc:	f002 f9ce 	bl	801477c <xTaskGetSchedulerState>
 80123e0:	4603      	mov	r3, r0
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d001      	beq.n	80123ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80123e6:	f002 ffef 	bl	80153c8 <xPortSysTickHandler>
  }
}
 80123ea:	bf00      	nop
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	e000e010 	.word	0xe000e010

080123f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80123f4:	b580      	push	{r7, lr}
 80123f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80123f8:	2100      	movs	r1, #0
 80123fa:	f06f 0004 	mvn.w	r0, #4
 80123fe:	f7ff ffbf 	bl	8012380 <__NVIC_SetPriority>
#endif
}
 8012402:	bf00      	nop
 8012404:	bd80      	pop	{r7, pc}
	...

08012408 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801240e:	f3ef 8305 	mrs	r3, IPSR
 8012412:	603b      	str	r3, [r7, #0]
  return(result);
 8012414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012416:	2b00      	cmp	r3, #0
 8012418:	d003      	beq.n	8012422 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801241a:	f06f 0305 	mvn.w	r3, #5
 801241e:	607b      	str	r3, [r7, #4]
 8012420:	e00c      	b.n	801243c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012422:	4b0a      	ldr	r3, [pc, #40]	; (801244c <osKernelInitialize+0x44>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d105      	bne.n	8012436 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801242a:	4b08      	ldr	r3, [pc, #32]	; (801244c <osKernelInitialize+0x44>)
 801242c:	2201      	movs	r2, #1
 801242e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012430:	2300      	movs	r3, #0
 8012432:	607b      	str	r3, [r7, #4]
 8012434:	e002      	b.n	801243c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801243a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801243c:	687b      	ldr	r3, [r7, #4]
}
 801243e:	4618      	mov	r0, r3
 8012440:	370c      	adds	r7, #12
 8012442:	46bd      	mov	sp, r7
 8012444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012448:	4770      	bx	lr
 801244a:	bf00      	nop
 801244c:	24000c64 	.word	0x24000c64

08012450 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012456:	f3ef 8305 	mrs	r3, IPSR
 801245a:	603b      	str	r3, [r7, #0]
  return(result);
 801245c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801245e:	2b00      	cmp	r3, #0
 8012460:	d003      	beq.n	801246a <osKernelStart+0x1a>
    stat = osErrorISR;
 8012462:	f06f 0305 	mvn.w	r3, #5
 8012466:	607b      	str	r3, [r7, #4]
 8012468:	e010      	b.n	801248c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801246a:	4b0b      	ldr	r3, [pc, #44]	; (8012498 <osKernelStart+0x48>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2b01      	cmp	r3, #1
 8012470:	d109      	bne.n	8012486 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012472:	f7ff ffbf 	bl	80123f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012476:	4b08      	ldr	r3, [pc, #32]	; (8012498 <osKernelStart+0x48>)
 8012478:	2202      	movs	r2, #2
 801247a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801247c:	f001 fc98 	bl	8013db0 <vTaskStartScheduler>
      stat = osOK;
 8012480:	2300      	movs	r3, #0
 8012482:	607b      	str	r3, [r7, #4]
 8012484:	e002      	b.n	801248c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801248a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801248c:	687b      	ldr	r3, [r7, #4]
}
 801248e:	4618      	mov	r0, r3
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	24000c64 	.word	0x24000c64

0801249c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801249c:	b580      	push	{r7, lr}
 801249e:	b08e      	sub	sp, #56	; 0x38
 80124a0:	af04      	add	r7, sp, #16
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80124a8:	2300      	movs	r3, #0
 80124aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124ac:	f3ef 8305 	mrs	r3, IPSR
 80124b0:	617b      	str	r3, [r7, #20]
  return(result);
 80124b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d17e      	bne.n	80125b6 <osThreadNew+0x11a>
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d07b      	beq.n	80125b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80124be:	2380      	movs	r3, #128	; 0x80
 80124c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80124c2:	2318      	movs	r3, #24
 80124c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80124c6:	2300      	movs	r3, #0
 80124c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80124ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d045      	beq.n	8012562 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d002      	beq.n	80124e4 <osThreadNew+0x48>
        name = attr->name;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	699b      	ldr	r3, [r3, #24]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d002      	beq.n	80124f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	699b      	ldr	r3, [r3, #24]
 80124f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d008      	beq.n	801250a <osThreadNew+0x6e>
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	2b38      	cmp	r3, #56	; 0x38
 80124fc:	d805      	bhi.n	801250a <osThreadNew+0x6e>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	f003 0301 	and.w	r3, r3, #1
 8012506:	2b00      	cmp	r3, #0
 8012508:	d001      	beq.n	801250e <osThreadNew+0x72>
        return (NULL);
 801250a:	2300      	movs	r3, #0
 801250c:	e054      	b.n	80125b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	695b      	ldr	r3, [r3, #20]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d003      	beq.n	801251e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	695b      	ldr	r3, [r3, #20]
 801251a:	089b      	lsrs	r3, r3, #2
 801251c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	689b      	ldr	r3, [r3, #8]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d00e      	beq.n	8012544 <osThreadNew+0xa8>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	2b5b      	cmp	r3, #91	; 0x5b
 801252c:	d90a      	bls.n	8012544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012532:	2b00      	cmp	r3, #0
 8012534:	d006      	beq.n	8012544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	695b      	ldr	r3, [r3, #20]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d002      	beq.n	8012544 <osThreadNew+0xa8>
        mem = 1;
 801253e:	2301      	movs	r3, #1
 8012540:	61bb      	str	r3, [r7, #24]
 8012542:	e010      	b.n	8012566 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	689b      	ldr	r3, [r3, #8]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d10c      	bne.n	8012566 <osThreadNew+0xca>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	68db      	ldr	r3, [r3, #12]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d108      	bne.n	8012566 <osThreadNew+0xca>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	691b      	ldr	r3, [r3, #16]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d104      	bne.n	8012566 <osThreadNew+0xca>
          mem = 0;
 801255c:	2300      	movs	r3, #0
 801255e:	61bb      	str	r3, [r7, #24]
 8012560:	e001      	b.n	8012566 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012562:	2300      	movs	r3, #0
 8012564:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012566:	69bb      	ldr	r3, [r7, #24]
 8012568:	2b01      	cmp	r3, #1
 801256a:	d110      	bne.n	801258e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012570:	687a      	ldr	r2, [r7, #4]
 8012572:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012574:	9202      	str	r2, [sp, #8]
 8012576:	9301      	str	r3, [sp, #4]
 8012578:	69fb      	ldr	r3, [r7, #28]
 801257a:	9300      	str	r3, [sp, #0]
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	6a3a      	ldr	r2, [r7, #32]
 8012580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	f001 f924 	bl	80137d0 <xTaskCreateStatic>
 8012588:	4603      	mov	r3, r0
 801258a:	613b      	str	r3, [r7, #16]
 801258c:	e013      	b.n	80125b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d110      	bne.n	80125b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012594:	6a3b      	ldr	r3, [r7, #32]
 8012596:	b29a      	uxth	r2, r3
 8012598:	f107 0310 	add.w	r3, r7, #16
 801259c:	9301      	str	r3, [sp, #4]
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	9300      	str	r3, [sp, #0]
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125a6:	68f8      	ldr	r0, [r7, #12]
 80125a8:	f001 f96f 	bl	801388a <xTaskCreate>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	d001      	beq.n	80125b6 <osThreadNew+0x11a>
            hTask = NULL;
 80125b2:	2300      	movs	r3, #0
 80125b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80125b6:	693b      	ldr	r3, [r7, #16]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3728      	adds	r7, #40	; 0x28
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80125c0:	b480      	push	{r7}
 80125c2:	b083      	sub	sp, #12
 80125c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125c6:	f3ef 8305 	mrs	r3, IPSR
 80125ca:	603b      	str	r3, [r7, #0]
  return(result);
 80125cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d003      	beq.n	80125da <osThreadYield+0x1a>
    stat = osErrorISR;
 80125d2:	f06f 0305 	mvn.w	r3, #5
 80125d6:	607b      	str	r3, [r7, #4]
 80125d8:	e009      	b.n	80125ee <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80125da:	2300      	movs	r3, #0
 80125dc:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80125de:	4b07      	ldr	r3, [pc, #28]	; (80125fc <osThreadYield+0x3c>)
 80125e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125e4:	601a      	str	r2, [r3, #0]
 80125e6:	f3bf 8f4f 	dsb	sy
 80125ea:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80125ee:	687b      	ldr	r3, [r7, #4]
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr
 80125fc:	e000ed04 	.word	0xe000ed04

08012600 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012600:	b580      	push	{r7, lr}
 8012602:	b086      	sub	sp, #24
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801260c:	f3ef 8305 	mrs	r3, IPSR
 8012610:	60fb      	str	r3, [r7, #12]
  return(result);
 8012612:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012614:	2b00      	cmp	r3, #0
 8012616:	d003      	beq.n	8012620 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012618:	f06f 0305 	mvn.w	r3, #5
 801261c:	617b      	str	r3, [r7, #20]
 801261e:	e00b      	b.n	8012638 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d103      	bne.n	801262e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012626:	f06f 0303 	mvn.w	r3, #3
 801262a:	617b      	str	r3, [r7, #20]
 801262c:	e004      	b.n	8012638 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801262e:	2300      	movs	r3, #0
 8012630:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012632:	6938      	ldr	r0, [r7, #16]
 8012634:	f001 faa2 	bl	8013b7c <vTaskSuspend>
  }

  return (stat);
 8012638:	697b      	ldr	r3, [r7, #20]
}
 801263a:	4618      	mov	r0, r3
 801263c:	3718      	adds	r7, #24
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012642:	b580      	push	{r7, lr}
 8012644:	b084      	sub	sp, #16
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801264a:	f3ef 8305 	mrs	r3, IPSR
 801264e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012650:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012652:	2b00      	cmp	r3, #0
 8012654:	d003      	beq.n	801265e <osDelay+0x1c>
    stat = osErrorISR;
 8012656:	f06f 0305 	mvn.w	r3, #5
 801265a:	60fb      	str	r3, [r7, #12]
 801265c:	e007      	b.n	801266e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801265e:	2300      	movs	r3, #0
 8012660:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d002      	beq.n	801266e <osDelay+0x2c>
      vTaskDelay(ticks);
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f001 fa53 	bl	8013b14 <vTaskDelay>
    }
  }

  return (stat);
 801266e:	68fb      	ldr	r3, [r7, #12]
}
 8012670:	4618      	mov	r0, r3
 8012672:	3710      	adds	r7, #16
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012678:	b580      	push	{r7, lr}
 801267a:	b086      	sub	sp, #24
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012680:	2300      	movs	r3, #0
 8012682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012684:	f3ef 8305 	mrs	r3, IPSR
 8012688:	60fb      	str	r3, [r7, #12]
  return(result);
 801268a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801268c:	2b00      	cmp	r3, #0
 801268e:	d12d      	bne.n	80126ec <osEventFlagsNew+0x74>
    mem = -1;
 8012690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012694:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d015      	beq.n	80126c8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	689b      	ldr	r3, [r3, #8]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d006      	beq.n	80126b2 <osEventFlagsNew+0x3a>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	2b1f      	cmp	r3, #31
 80126aa:	d902      	bls.n	80126b2 <osEventFlagsNew+0x3a>
        mem = 1;
 80126ac:	2301      	movs	r3, #1
 80126ae:	613b      	str	r3, [r7, #16]
 80126b0:	e00c      	b.n	80126cc <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	689b      	ldr	r3, [r3, #8]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d108      	bne.n	80126cc <osEventFlagsNew+0x54>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d104      	bne.n	80126cc <osEventFlagsNew+0x54>
          mem = 0;
 80126c2:	2300      	movs	r3, #0
 80126c4:	613b      	str	r3, [r7, #16]
 80126c6:	e001      	b.n	80126cc <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80126c8:	2300      	movs	r3, #0
 80126ca:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80126cc:	693b      	ldr	r3, [r7, #16]
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	d106      	bne.n	80126e0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	689b      	ldr	r3, [r3, #8]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f000 f8ec 	bl	80128b4 <xEventGroupCreateStatic>
 80126dc:	6178      	str	r0, [r7, #20]
 80126de:	e005      	b.n	80126ec <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d102      	bne.n	80126ec <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80126e6:	f000 f91c 	bl	8012922 <xEventGroupCreate>
 80126ea:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80126ec:	697b      	ldr	r3, [r7, #20]
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3718      	adds	r7, #24
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
	...

080126f8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b086      	sub	sp, #24
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d004      	beq.n	8012716 <osEventFlagsSet+0x1e>
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012712:	2b00      	cmp	r3, #0
 8012714:	d003      	beq.n	801271e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012716:	f06f 0303 	mvn.w	r3, #3
 801271a:	617b      	str	r3, [r7, #20]
 801271c:	e028      	b.n	8012770 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801271e:	f3ef 8305 	mrs	r3, IPSR
 8012722:	60fb      	str	r3, [r7, #12]
  return(result);
 8012724:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012726:	2b00      	cmp	r3, #0
 8012728:	d01d      	beq.n	8012766 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801272a:	2300      	movs	r3, #0
 801272c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801272e:	f107 0308 	add.w	r3, r7, #8
 8012732:	461a      	mov	r2, r3
 8012734:	6839      	ldr	r1, [r7, #0]
 8012736:	6938      	ldr	r0, [r7, #16]
 8012738:	f000 fa96 	bl	8012c68 <xEventGroupSetBitsFromISR>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d103      	bne.n	801274a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012742:	f06f 0302 	mvn.w	r3, #2
 8012746:	617b      	str	r3, [r7, #20]
 8012748:	e012      	b.n	8012770 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00d      	beq.n	8012770 <osEventFlagsSet+0x78>
 8012754:	4b09      	ldr	r3, [pc, #36]	; (801277c <osEventFlagsSet+0x84>)
 8012756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801275a:	601a      	str	r2, [r3, #0]
 801275c:	f3bf 8f4f 	dsb	sy
 8012760:	f3bf 8f6f 	isb	sy
 8012764:	e004      	b.n	8012770 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012766:	6839      	ldr	r1, [r7, #0]
 8012768:	6938      	ldr	r0, [r7, #16]
 801276a:	f000 f9c3 	bl	8012af4 <xEventGroupSetBits>
 801276e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012770:	697b      	ldr	r3, [r7, #20]
}
 8012772:	4618      	mov	r0, r3
 8012774:	3718      	adds	r7, #24
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	e000ed04 	.word	0xe000ed04

08012780 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012780:	b580      	push	{r7, lr}
 8012782:	b08c      	sub	sp, #48	; 0x30
 8012784:	af02      	add	r7, sp, #8
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
 801278c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012792:	69bb      	ldr	r3, [r7, #24]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d004      	beq.n	80127a2 <osEventFlagsWait+0x22>
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d003      	beq.n	80127aa <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80127a2:	f06f 0303 	mvn.w	r3, #3
 80127a6:	61fb      	str	r3, [r7, #28]
 80127a8:	e04b      	b.n	8012842 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127aa:	f3ef 8305 	mrs	r3, IPSR
 80127ae:	617b      	str	r3, [r7, #20]
  return(result);
 80127b0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d003      	beq.n	80127be <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80127b6:	f06f 0305 	mvn.w	r3, #5
 80127ba:	61fb      	str	r3, [r7, #28]
 80127bc:	e041      	b.n	8012842 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f003 0301 	and.w	r3, r3, #1
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d002      	beq.n	80127ce <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80127c8:	2301      	movs	r3, #1
 80127ca:	627b      	str	r3, [r7, #36]	; 0x24
 80127cc:	e001      	b.n	80127d2 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80127ce:	2300      	movs	r3, #0
 80127d0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f003 0302 	and.w	r3, r3, #2
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d002      	beq.n	80127e2 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80127dc:	2300      	movs	r3, #0
 80127de:	623b      	str	r3, [r7, #32]
 80127e0:	e001      	b.n	80127e6 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80127e2:	2301      	movs	r3, #1
 80127e4:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ec:	6a3a      	ldr	r2, [r7, #32]
 80127ee:	68b9      	ldr	r1, [r7, #8]
 80127f0:	69b8      	ldr	r0, [r7, #24]
 80127f2:	f000 f8b1 	bl	8012958 <xEventGroupWaitBits>
 80127f6:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f003 0301 	and.w	r3, r3, #1
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d010      	beq.n	8012824 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012802:	68ba      	ldr	r2, [r7, #8]
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	4013      	ands	r3, r2
 8012808:	68ba      	ldr	r2, [r7, #8]
 801280a:	429a      	cmp	r2, r3
 801280c:	d019      	beq.n	8012842 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d003      	beq.n	801281c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012814:	f06f 0301 	mvn.w	r3, #1
 8012818:	61fb      	str	r3, [r7, #28]
 801281a:	e012      	b.n	8012842 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801281c:	f06f 0302 	mvn.w	r3, #2
 8012820:	61fb      	str	r3, [r7, #28]
 8012822:	e00e      	b.n	8012842 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012824:	68ba      	ldr	r2, [r7, #8]
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	4013      	ands	r3, r2
 801282a:	2b00      	cmp	r3, #0
 801282c:	d109      	bne.n	8012842 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d003      	beq.n	801283c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012834:	f06f 0301 	mvn.w	r3, #1
 8012838:	61fb      	str	r3, [r7, #28]
 801283a:	e002      	b.n	8012842 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801283c:	f06f 0302 	mvn.w	r3, #2
 8012840:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012842:	69fb      	ldr	r3, [r7, #28]
}
 8012844:	4618      	mov	r0, r3
 8012846:	3728      	adds	r7, #40	; 0x28
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801284c:	b480      	push	{r7}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	4a07      	ldr	r2, [pc, #28]	; (8012878 <vApplicationGetIdleTaskMemory+0x2c>)
 801285c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	4a06      	ldr	r2, [pc, #24]	; (801287c <vApplicationGetIdleTaskMemory+0x30>)
 8012862:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2280      	movs	r2, #128	; 0x80
 8012868:	601a      	str	r2, [r3, #0]
}
 801286a:	bf00      	nop
 801286c:	3714      	adds	r7, #20
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	24000c68 	.word	0x24000c68
 801287c:	24000cc4 	.word	0x24000cc4

08012880 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012880:	b480      	push	{r7}
 8012882:	b085      	sub	sp, #20
 8012884:	af00      	add	r7, sp, #0
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	4a07      	ldr	r2, [pc, #28]	; (80128ac <vApplicationGetTimerTaskMemory+0x2c>)
 8012890:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	4a06      	ldr	r2, [pc, #24]	; (80128b0 <vApplicationGetTimerTaskMemory+0x30>)
 8012896:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801289e:	601a      	str	r2, [r3, #0]
}
 80128a0:	bf00      	nop
 80128a2:	3714      	adds	r7, #20
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr
 80128ac:	24000ec4 	.word	0x24000ec4
 80128b0:	24000f20 	.word	0x24000f20

080128b4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b086      	sub	sp, #24
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d10a      	bne.n	80128d8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80128c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c6:	f383 8811 	msr	BASEPRI, r3
 80128ca:	f3bf 8f6f 	isb	sy
 80128ce:	f3bf 8f4f 	dsb	sy
 80128d2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80128d4:	bf00      	nop
 80128d6:	e7fe      	b.n	80128d6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80128d8:	2320      	movs	r3, #32
 80128da:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	2b20      	cmp	r3, #32
 80128e0:	d00a      	beq.n	80128f8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80128e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e6:	f383 8811 	msr	BASEPRI, r3
 80128ea:	f3bf 8f6f 	isb	sy
 80128ee:	f3bf 8f4f 	dsb	sy
 80128f2:	60fb      	str	r3, [r7, #12]
}
 80128f4:	bf00      	nop
 80128f6:	e7fe      	b.n	80128f6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d00a      	beq.n	8012918 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	2200      	movs	r2, #0
 8012906:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	3304      	adds	r3, #4
 801290c:	4618      	mov	r0, r3
 801290e:	f000 f9bf 	bl	8012c90 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	2201      	movs	r2, #1
 8012916:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8012918:	697b      	ldr	r3, [r7, #20]
	}
 801291a:	4618      	mov	r0, r3
 801291c:	3718      	adds	r7, #24
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}

08012922 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012922:	b580      	push	{r7, lr}
 8012924:	b082      	sub	sp, #8
 8012926:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012928:	2020      	movs	r0, #32
 801292a:	f002 fddd 	bl	80154e8 <pvPortMalloc>
 801292e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d00a      	beq.n	801294c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2200      	movs	r2, #0
 801293a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	3304      	adds	r3, #4
 8012940:	4618      	mov	r0, r3
 8012942:	f000 f9a5 	bl	8012c90 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2200      	movs	r2, #0
 801294a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801294c:	687b      	ldr	r3, [r7, #4]
	}
 801294e:	4618      	mov	r0, r3
 8012950:	3708      	adds	r7, #8
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}
	...

08012958 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b090      	sub	sp, #64	; 0x40
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	607a      	str	r2, [r7, #4]
 8012964:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801296e:	2300      	movs	r3, #0
 8012970:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d10a      	bne.n	801298e <xEventGroupWaitBits+0x36>
	__asm volatile
 8012978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297c:	f383 8811 	msr	BASEPRI, r3
 8012980:	f3bf 8f6f 	isb	sy
 8012984:	f3bf 8f4f 	dsb	sy
 8012988:	623b      	str	r3, [r7, #32]
}
 801298a:	bf00      	nop
 801298c:	e7fe      	b.n	801298c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012994:	2b00      	cmp	r3, #0
 8012996:	d00a      	beq.n	80129ae <xEventGroupWaitBits+0x56>
	__asm volatile
 8012998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801299c:	f383 8811 	msr	BASEPRI, r3
 80129a0:	f3bf 8f6f 	isb	sy
 80129a4:	f3bf 8f4f 	dsb	sy
 80129a8:	61fb      	str	r3, [r7, #28]
}
 80129aa:	bf00      	nop
 80129ac:	e7fe      	b.n	80129ac <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d10a      	bne.n	80129ca <xEventGroupWaitBits+0x72>
	__asm volatile
 80129b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b8:	f383 8811 	msr	BASEPRI, r3
 80129bc:	f3bf 8f6f 	isb	sy
 80129c0:	f3bf 8f4f 	dsb	sy
 80129c4:	61bb      	str	r3, [r7, #24]
}
 80129c6:	bf00      	nop
 80129c8:	e7fe      	b.n	80129c8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80129ca:	f001 fed7 	bl	801477c <xTaskGetSchedulerState>
 80129ce:	4603      	mov	r3, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d102      	bne.n	80129da <xEventGroupWaitBits+0x82>
 80129d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d101      	bne.n	80129de <xEventGroupWaitBits+0x86>
 80129da:	2301      	movs	r3, #1
 80129dc:	e000      	b.n	80129e0 <xEventGroupWaitBits+0x88>
 80129de:	2300      	movs	r3, #0
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d10a      	bne.n	80129fa <xEventGroupWaitBits+0xa2>
	__asm volatile
 80129e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e8:	f383 8811 	msr	BASEPRI, r3
 80129ec:	f3bf 8f6f 	isb	sy
 80129f0:	f3bf 8f4f 	dsb	sy
 80129f4:	617b      	str	r3, [r7, #20]
}
 80129f6:	bf00      	nop
 80129f8:	e7fe      	b.n	80129f8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80129fa:	f001 fa3f 	bl	8013e7c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80129fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012a04:	683a      	ldr	r2, [r7, #0]
 8012a06:	68b9      	ldr	r1, [r7, #8]
 8012a08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a0a:	f000 f90b 	bl	8012c24 <prvTestWaitCondition>
 8012a0e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8012a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00e      	beq.n	8012a34 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8012a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a18:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d028      	beq.n	8012a76 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	43db      	mvns	r3, r3
 8012a2c:	401a      	ands	r2, r3
 8012a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a30:	601a      	str	r2, [r3, #0]
 8012a32:	e020      	b.n	8012a76 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d104      	bne.n	8012a44 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8012a3e:	2301      	movs	r3, #1
 8012a40:	633b      	str	r3, [r7, #48]	; 0x30
 8012a42:	e018      	b.n	8012a76 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d003      	beq.n	8012a52 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a50:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d003      	beq.n	8012a60 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012a5e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a62:	1d18      	adds	r0, r3, #4
 8012a64:	68ba      	ldr	r2, [r7, #8]
 8012a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a68:	4313      	orrs	r3, r2
 8012a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	f001 fbfd 	bl	801426c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012a72:	2300      	movs	r3, #0
 8012a74:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012a76:	f001 fa0f 	bl	8013e98 <xTaskResumeAll>
 8012a7a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d031      	beq.n	8012ae6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8012a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d107      	bne.n	8012a98 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8012a88:	4b19      	ldr	r3, [pc, #100]	; (8012af0 <xEventGroupWaitBits+0x198>)
 8012a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a8e:	601a      	str	r2, [r3, #0]
 8012a90:	f3bf 8f4f 	dsb	sy
 8012a94:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012a98:	f001 fefc 	bl	8014894 <uxTaskResetEventItemValue>
 8012a9c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d11a      	bne.n	8012ade <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8012aa8:	f002 fbfc 	bl	80152a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012ab2:	683a      	ldr	r2, [r7, #0]
 8012ab4:	68b9      	ldr	r1, [r7, #8]
 8012ab6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012ab8:	f000 f8b4 	bl	8012c24 <prvTestWaitCondition>
 8012abc:	4603      	mov	r3, r0
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d009      	beq.n	8012ad6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d006      	beq.n	8012ad6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aca:	681a      	ldr	r2, [r3, #0]
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	43db      	mvns	r3, r3
 8012ad0:	401a      	ands	r2, r3
 8012ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ad4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8012ada:	f002 fc13 	bl	8015304 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ae0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3740      	adds	r7, #64	; 0x40
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	e000ed04 	.word	0xe000ed04

08012af4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b08e      	sub	sp, #56	; 0x38
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012afe:	2300      	movs	r3, #0
 8012b00:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8012b06:	2300      	movs	r3, #0
 8012b08:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d10a      	bne.n	8012b26 <xEventGroupSetBits+0x32>
	__asm volatile
 8012b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b14:	f383 8811 	msr	BASEPRI, r3
 8012b18:	f3bf 8f6f 	isb	sy
 8012b1c:	f3bf 8f4f 	dsb	sy
 8012b20:	613b      	str	r3, [r7, #16]
}
 8012b22:	bf00      	nop
 8012b24:	e7fe      	b.n	8012b24 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d00a      	beq.n	8012b46 <xEventGroupSetBits+0x52>
	__asm volatile
 8012b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b34:	f383 8811 	msr	BASEPRI, r3
 8012b38:	f3bf 8f6f 	isb	sy
 8012b3c:	f3bf 8f4f 	dsb	sy
 8012b40:	60fb      	str	r3, [r7, #12]
}
 8012b42:	bf00      	nop
 8012b44:	e7fe      	b.n	8012b44 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b48:	3304      	adds	r3, #4
 8012b4a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4e:	3308      	adds	r3, #8
 8012b50:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012b52:	f001 f993 	bl	8013e7c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b58:	68db      	ldr	r3, [r3, #12]
 8012b5a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	431a      	orrs	r2, r3
 8012b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b66:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012b68:	e03c      	b.n	8012be4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012b76:	2300      	movs	r3, #0
 8012b78:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b80:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012b88:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d108      	bne.n	8012ba6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	4013      	ands	r3, r2
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00b      	beq.n	8012bb8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ba4:	e008      	b.n	8012bb8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	69bb      	ldr	r3, [r7, #24]
 8012bac:	4013      	ands	r3, r2
 8012bae:	69ba      	ldr	r2, [r7, #24]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d101      	bne.n	8012bb8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d010      	beq.n	8012be0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d003      	beq.n	8012bd0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	4313      	orrs	r3, r2
 8012bce:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012bd8:	4619      	mov	r1, r3
 8012bda:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012bdc:	f001 fc12 	bl	8014404 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8012be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012be6:	6a3b      	ldr	r3, [r7, #32]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d1be      	bne.n	8012b6a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf2:	43db      	mvns	r3, r3
 8012bf4:	401a      	ands	r2, r3
 8012bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012bfa:	f001 f94d 	bl	8013e98 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c00:	681b      	ldr	r3, [r3, #0]
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3738      	adds	r7, #56	; 0x38
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012c0a:	b580      	push	{r7, lr}
 8012c0c:	b082      	sub	sp, #8
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	6078      	str	r0, [r7, #4]
 8012c12:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012c14:	6839      	ldr	r1, [r7, #0]
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	f7ff ff6c 	bl	8012af4 <xEventGroupSetBits>
}
 8012c1c:	bf00      	nop
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}

08012c24 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012c24:	b480      	push	{r7}
 8012c26:	b087      	sub	sp, #28
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	60f8      	str	r0, [r7, #12]
 8012c2c:	60b9      	str	r1, [r7, #8]
 8012c2e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012c30:	2300      	movs	r3, #0
 8012c32:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d107      	bne.n	8012c4a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	4013      	ands	r3, r2
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00a      	beq.n	8012c5a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c44:	2301      	movs	r3, #1
 8012c46:	617b      	str	r3, [r7, #20]
 8012c48:	e007      	b.n	8012c5a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012c4a:	68fa      	ldr	r2, [r7, #12]
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	4013      	ands	r3, r2
 8012c50:	68ba      	ldr	r2, [r7, #8]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d101      	bne.n	8012c5a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c56:	2301      	movs	r3, #1
 8012c58:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012c5a:	697b      	ldr	r3, [r7, #20]
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	371c      	adds	r7, #28
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr

08012c68 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b086      	sub	sp, #24
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	60f8      	str	r0, [r7, #12]
 8012c70:	60b9      	str	r1, [r7, #8]
 8012c72:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	68ba      	ldr	r2, [r7, #8]
 8012c78:	68f9      	ldr	r1, [r7, #12]
 8012c7a:	4804      	ldr	r0, [pc, #16]	; (8012c8c <xEventGroupSetBitsFromISR+0x24>)
 8012c7c:	f002 f9c4 	bl	8015008 <xTimerPendFunctionCallFromISR>
 8012c80:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012c82:	697b      	ldr	r3, [r7, #20]
	}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3718      	adds	r7, #24
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	08012c0b 	.word	0x08012c0b

08012c90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c90:	b480      	push	{r7}
 8012c92:	b083      	sub	sp, #12
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f103 0208 	add.w	r2, r3, #8
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ca8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f103 0208 	add.w	r2, r3, #8
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f103 0208 	add.w	r2, r3, #8
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012cc4:	bf00      	nop
 8012cc6:	370c      	adds	r7, #12
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cce:	4770      	bx	lr

08012cd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b083      	sub	sp, #12
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012cde:	bf00      	nop
 8012ce0:	370c      	adds	r7, #12
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr

08012cea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cea:	b480      	push	{r7}
 8012cec:	b085      	sub	sp, #20
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
 8012cf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	685b      	ldr	r3, [r3, #4]
 8012cf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	68fa      	ldr	r2, [r7, #12]
 8012cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	689a      	ldr	r2, [r3, #8]
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	689b      	ldr	r3, [r3, #8]
 8012d0c:	683a      	ldr	r2, [r7, #0]
 8012d0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	683a      	ldr	r2, [r7, #0]
 8012d14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	1c5a      	adds	r2, r3, #1
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	601a      	str	r2, [r3, #0]
}
 8012d26:	bf00      	nop
 8012d28:	3714      	adds	r7, #20
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d30:	4770      	bx	lr

08012d32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d32:	b480      	push	{r7}
 8012d34:	b085      	sub	sp, #20
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
 8012d3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d48:	d103      	bne.n	8012d52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	691b      	ldr	r3, [r3, #16]
 8012d4e:	60fb      	str	r3, [r7, #12]
 8012d50:	e00c      	b.n	8012d6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	3308      	adds	r3, #8
 8012d56:	60fb      	str	r3, [r7, #12]
 8012d58:	e002      	b.n	8012d60 <vListInsert+0x2e>
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	60fb      	str	r3, [r7, #12]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	685b      	ldr	r3, [r3, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	68ba      	ldr	r2, [r7, #8]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d2f6      	bcs.n	8012d5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	685a      	ldr	r2, [r3, #4]
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	685b      	ldr	r3, [r3, #4]
 8012d78:	683a      	ldr	r2, [r7, #0]
 8012d7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	683a      	ldr	r2, [r7, #0]
 8012d86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	601a      	str	r2, [r3, #0]
}
 8012d98:	bf00      	nop
 8012d9a:	3714      	adds	r7, #20
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da2:	4770      	bx	lr

08012da4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	691b      	ldr	r3, [r3, #16]
 8012db0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	6892      	ldr	r2, [r2, #8]
 8012dba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	689b      	ldr	r3, [r3, #8]
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	6852      	ldr	r2, [r2, #4]
 8012dc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	685b      	ldr	r3, [r3, #4]
 8012dca:	687a      	ldr	r2, [r7, #4]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d103      	bne.n	8012dd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	689a      	ldr	r2, [r3, #8]
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	1e5a      	subs	r2, r3, #1
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3714      	adds	r7, #20
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr

08012df8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b084      	sub	sp, #16
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d10a      	bne.n	8012e22 <xQueueGenericReset+0x2a>
	__asm volatile
 8012e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e10:	f383 8811 	msr	BASEPRI, r3
 8012e14:	f3bf 8f6f 	isb	sy
 8012e18:	f3bf 8f4f 	dsb	sy
 8012e1c:	60bb      	str	r3, [r7, #8]
}
 8012e1e:	bf00      	nop
 8012e20:	e7fe      	b.n	8012e20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012e22:	f002 fa3f 	bl	80152a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e2e:	68f9      	ldr	r1, [r7, #12]
 8012e30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e32:	fb01 f303 	mul.w	r3, r1, r3
 8012e36:	441a      	add	r2, r3
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681a      	ldr	r2, [r3, #0]
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	681a      	ldr	r2, [r3, #0]
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e52:	3b01      	subs	r3, #1
 8012e54:	68f9      	ldr	r1, [r7, #12]
 8012e56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e58:	fb01 f303 	mul.w	r3, r1, r3
 8012e5c:	441a      	add	r2, r3
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	22ff      	movs	r2, #255	; 0xff
 8012e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	22ff      	movs	r2, #255	; 0xff
 8012e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d114      	bne.n	8012ea2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	691b      	ldr	r3, [r3, #16]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d01a      	beq.n	8012eb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	3310      	adds	r3, #16
 8012e84:	4618      	mov	r0, r3
 8012e86:	f001 fa59 	bl	801433c <xTaskRemoveFromEventList>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d012      	beq.n	8012eb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e90:	4b0c      	ldr	r3, [pc, #48]	; (8012ec4 <xQueueGenericReset+0xcc>)
 8012e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e96:	601a      	str	r2, [r3, #0]
 8012e98:	f3bf 8f4f 	dsb	sy
 8012e9c:	f3bf 8f6f 	isb	sy
 8012ea0:	e009      	b.n	8012eb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	3310      	adds	r3, #16
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7ff fef2 	bl	8012c90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	3324      	adds	r3, #36	; 0x24
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7ff feed 	bl	8012c90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012eb6:	f002 fa25 	bl	8015304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012eba:	2301      	movs	r3, #1
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3710      	adds	r7, #16
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	e000ed04 	.word	0xe000ed04

08012ec8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b08e      	sub	sp, #56	; 0x38
 8012ecc:	af02      	add	r7, sp, #8
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	607a      	str	r2, [r7, #4]
 8012ed4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d10a      	bne.n	8012ef2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee0:	f383 8811 	msr	BASEPRI, r3
 8012ee4:	f3bf 8f6f 	isb	sy
 8012ee8:	f3bf 8f4f 	dsb	sy
 8012eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012eee:	bf00      	nop
 8012ef0:	e7fe      	b.n	8012ef0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d10a      	bne.n	8012f0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012f0a:	bf00      	nop
 8012f0c:	e7fe      	b.n	8012f0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d002      	beq.n	8012f1a <xQueueGenericCreateStatic+0x52>
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d001      	beq.n	8012f1e <xQueueGenericCreateStatic+0x56>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e000      	b.n	8012f20 <xQueueGenericCreateStatic+0x58>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d10a      	bne.n	8012f3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f28:	f383 8811 	msr	BASEPRI, r3
 8012f2c:	f3bf 8f6f 	isb	sy
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	623b      	str	r3, [r7, #32]
}
 8012f36:	bf00      	nop
 8012f38:	e7fe      	b.n	8012f38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d102      	bne.n	8012f46 <xQueueGenericCreateStatic+0x7e>
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d101      	bne.n	8012f4a <xQueueGenericCreateStatic+0x82>
 8012f46:	2301      	movs	r3, #1
 8012f48:	e000      	b.n	8012f4c <xQueueGenericCreateStatic+0x84>
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d10a      	bne.n	8012f66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f54:	f383 8811 	msr	BASEPRI, r3
 8012f58:	f3bf 8f6f 	isb	sy
 8012f5c:	f3bf 8f4f 	dsb	sy
 8012f60:	61fb      	str	r3, [r7, #28]
}
 8012f62:	bf00      	nop
 8012f64:	e7fe      	b.n	8012f64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f66:	2350      	movs	r3, #80	; 0x50
 8012f68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	2b50      	cmp	r3, #80	; 0x50
 8012f6e:	d00a      	beq.n	8012f86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f74:	f383 8811 	msr	BASEPRI, r3
 8012f78:	f3bf 8f6f 	isb	sy
 8012f7c:	f3bf 8f4f 	dsb	sy
 8012f80:	61bb      	str	r3, [r7, #24]
}
 8012f82:	bf00      	nop
 8012f84:	e7fe      	b.n	8012f84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d00d      	beq.n	8012fae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f94:	2201      	movs	r2, #1
 8012f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa0:	9300      	str	r3, [sp, #0]
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	68b9      	ldr	r1, [r7, #8]
 8012fa8:	68f8      	ldr	r0, [r7, #12]
 8012faa:	f000 f805 	bl	8012fb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3730      	adds	r7, #48	; 0x30
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	60b9      	str	r1, [r7, #8]
 8012fc2:	607a      	str	r2, [r7, #4]
 8012fc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d103      	bne.n	8012fd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012fcc:	69bb      	ldr	r3, [r7, #24]
 8012fce:	69ba      	ldr	r2, [r7, #24]
 8012fd0:	601a      	str	r2, [r3, #0]
 8012fd2:	e002      	b.n	8012fda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012fd4:	69bb      	ldr	r3, [r7, #24]
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	68fa      	ldr	r2, [r7, #12]
 8012fde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012fe0:	69bb      	ldr	r3, [r7, #24]
 8012fe2:	68ba      	ldr	r2, [r7, #8]
 8012fe4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012fe6:	2101      	movs	r1, #1
 8012fe8:	69b8      	ldr	r0, [r7, #24]
 8012fea:	f7ff ff05 	bl	8012df8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012fee:	69bb      	ldr	r3, [r7, #24]
 8012ff0:	78fa      	ldrb	r2, [r7, #3]
 8012ff2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012ff6:	bf00      	nop
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
	...

08013000 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b08e      	sub	sp, #56	; 0x38
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801300e:	2300      	movs	r3, #0
 8013010:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013018:	2b00      	cmp	r3, #0
 801301a:	d10a      	bne.n	8013032 <xQueueGenericSend+0x32>
	__asm volatile
 801301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013020:	f383 8811 	msr	BASEPRI, r3
 8013024:	f3bf 8f6f 	isb	sy
 8013028:	f3bf 8f4f 	dsb	sy
 801302c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801302e:	bf00      	nop
 8013030:	e7fe      	b.n	8013030 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d103      	bne.n	8013040 <xQueueGenericSend+0x40>
 8013038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801303c:	2b00      	cmp	r3, #0
 801303e:	d101      	bne.n	8013044 <xQueueGenericSend+0x44>
 8013040:	2301      	movs	r3, #1
 8013042:	e000      	b.n	8013046 <xQueueGenericSend+0x46>
 8013044:	2300      	movs	r3, #0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d10a      	bne.n	8013060 <xQueueGenericSend+0x60>
	__asm volatile
 801304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304e:	f383 8811 	msr	BASEPRI, r3
 8013052:	f3bf 8f6f 	isb	sy
 8013056:	f3bf 8f4f 	dsb	sy
 801305a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801305c:	bf00      	nop
 801305e:	e7fe      	b.n	801305e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	2b02      	cmp	r3, #2
 8013064:	d103      	bne.n	801306e <xQueueGenericSend+0x6e>
 8013066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801306a:	2b01      	cmp	r3, #1
 801306c:	d101      	bne.n	8013072 <xQueueGenericSend+0x72>
 801306e:	2301      	movs	r3, #1
 8013070:	e000      	b.n	8013074 <xQueueGenericSend+0x74>
 8013072:	2300      	movs	r3, #0
 8013074:	2b00      	cmp	r3, #0
 8013076:	d10a      	bne.n	801308e <xQueueGenericSend+0x8e>
	__asm volatile
 8013078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307c:	f383 8811 	msr	BASEPRI, r3
 8013080:	f3bf 8f6f 	isb	sy
 8013084:	f3bf 8f4f 	dsb	sy
 8013088:	623b      	str	r3, [r7, #32]
}
 801308a:	bf00      	nop
 801308c:	e7fe      	b.n	801308c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801308e:	f001 fb75 	bl	801477c <xTaskGetSchedulerState>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d102      	bne.n	801309e <xQueueGenericSend+0x9e>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d101      	bne.n	80130a2 <xQueueGenericSend+0xa2>
 801309e:	2301      	movs	r3, #1
 80130a0:	e000      	b.n	80130a4 <xQueueGenericSend+0xa4>
 80130a2:	2300      	movs	r3, #0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d10a      	bne.n	80130be <xQueueGenericSend+0xbe>
	__asm volatile
 80130a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ac:	f383 8811 	msr	BASEPRI, r3
 80130b0:	f3bf 8f6f 	isb	sy
 80130b4:	f3bf 8f4f 	dsb	sy
 80130b8:	61fb      	str	r3, [r7, #28]
}
 80130ba:	bf00      	nop
 80130bc:	e7fe      	b.n	80130bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80130be:	f002 f8f1 	bl	80152a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80130c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d302      	bcc.n	80130d4 <xQueueGenericSend+0xd4>
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	2b02      	cmp	r3, #2
 80130d2:	d129      	bne.n	8013128 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130d4:	683a      	ldr	r2, [r7, #0]
 80130d6:	68b9      	ldr	r1, [r7, #8]
 80130d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130da:	f000 fa0b 	bl	80134f4 <prvCopyDataToQueue>
 80130de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d010      	beq.n	801310a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ea:	3324      	adds	r3, #36	; 0x24
 80130ec:	4618      	mov	r0, r3
 80130ee:	f001 f925 	bl	801433c <xTaskRemoveFromEventList>
 80130f2:	4603      	mov	r3, r0
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d013      	beq.n	8013120 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80130f8:	4b3f      	ldr	r3, [pc, #252]	; (80131f8 <xQueueGenericSend+0x1f8>)
 80130fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130fe:	601a      	str	r2, [r3, #0]
 8013100:	f3bf 8f4f 	dsb	sy
 8013104:	f3bf 8f6f 	isb	sy
 8013108:	e00a      	b.n	8013120 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310c:	2b00      	cmp	r3, #0
 801310e:	d007      	beq.n	8013120 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013110:	4b39      	ldr	r3, [pc, #228]	; (80131f8 <xQueueGenericSend+0x1f8>)
 8013112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013116:	601a      	str	r2, [r3, #0]
 8013118:	f3bf 8f4f 	dsb	sy
 801311c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013120:	f002 f8f0 	bl	8015304 <vPortExitCritical>
				return pdPASS;
 8013124:	2301      	movs	r3, #1
 8013126:	e063      	b.n	80131f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d103      	bne.n	8013136 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801312e:	f002 f8e9 	bl	8015304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013132:	2300      	movs	r3, #0
 8013134:	e05c      	b.n	80131f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013138:	2b00      	cmp	r3, #0
 801313a:	d106      	bne.n	801314a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801313c:	f107 0314 	add.w	r3, r7, #20
 8013140:	4618      	mov	r0, r3
 8013142:	f001 f9c1 	bl	80144c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013146:	2301      	movs	r3, #1
 8013148:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801314a:	f002 f8db 	bl	8015304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801314e:	f000 fe95 	bl	8013e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013152:	f002 f8a7 	bl	80152a4 <vPortEnterCritical>
 8013156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801315c:	b25b      	sxtb	r3, r3
 801315e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013162:	d103      	bne.n	801316c <xQueueGenericSend+0x16c>
 8013164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013166:	2200      	movs	r2, #0
 8013168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013172:	b25b      	sxtb	r3, r3
 8013174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013178:	d103      	bne.n	8013182 <xQueueGenericSend+0x182>
 801317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317c:	2200      	movs	r2, #0
 801317e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013182:	f002 f8bf 	bl	8015304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013186:	1d3a      	adds	r2, r7, #4
 8013188:	f107 0314 	add.w	r3, r7, #20
 801318c:	4611      	mov	r1, r2
 801318e:	4618      	mov	r0, r3
 8013190:	f001 f9b0 	bl	80144f4 <xTaskCheckForTimeOut>
 8013194:	4603      	mov	r3, r0
 8013196:	2b00      	cmp	r3, #0
 8013198:	d124      	bne.n	80131e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801319a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801319c:	f000 faa2 	bl	80136e4 <prvIsQueueFull>
 80131a0:	4603      	mov	r3, r0
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d018      	beq.n	80131d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80131a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a8:	3310      	adds	r3, #16
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	4611      	mov	r1, r2
 80131ae:	4618      	mov	r0, r3
 80131b0:	f001 f838 	bl	8014224 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80131b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131b6:	f000 fa2d 	bl	8013614 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80131ba:	f000 fe6d 	bl	8013e98 <xTaskResumeAll>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	f47f af7c 	bne.w	80130be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80131c6:	4b0c      	ldr	r3, [pc, #48]	; (80131f8 <xQueueGenericSend+0x1f8>)
 80131c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131cc:	601a      	str	r2, [r3, #0]
 80131ce:	f3bf 8f4f 	dsb	sy
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	e772      	b.n	80130be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80131d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131da:	f000 fa1b 	bl	8013614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80131de:	f000 fe5b 	bl	8013e98 <xTaskResumeAll>
 80131e2:	e76c      	b.n	80130be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80131e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131e6:	f000 fa15 	bl	8013614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80131ea:	f000 fe55 	bl	8013e98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80131ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	3738      	adds	r7, #56	; 0x38
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	e000ed04 	.word	0xe000ed04

080131fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b090      	sub	sp, #64	; 0x40
 8013200:	af00      	add	r7, sp, #0
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	60b9      	str	r1, [r7, #8]
 8013206:	607a      	str	r2, [r7, #4]
 8013208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013210:	2b00      	cmp	r3, #0
 8013212:	d10a      	bne.n	801322a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013218:	f383 8811 	msr	BASEPRI, r3
 801321c:	f3bf 8f6f 	isb	sy
 8013220:	f3bf 8f4f 	dsb	sy
 8013224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013226:	bf00      	nop
 8013228:	e7fe      	b.n	8013228 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d103      	bne.n	8013238 <xQueueGenericSendFromISR+0x3c>
 8013230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013234:	2b00      	cmp	r3, #0
 8013236:	d101      	bne.n	801323c <xQueueGenericSendFromISR+0x40>
 8013238:	2301      	movs	r3, #1
 801323a:	e000      	b.n	801323e <xQueueGenericSendFromISR+0x42>
 801323c:	2300      	movs	r3, #0
 801323e:	2b00      	cmp	r3, #0
 8013240:	d10a      	bne.n	8013258 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013246:	f383 8811 	msr	BASEPRI, r3
 801324a:	f3bf 8f6f 	isb	sy
 801324e:	f3bf 8f4f 	dsb	sy
 8013252:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013254:	bf00      	nop
 8013256:	e7fe      	b.n	8013256 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	2b02      	cmp	r3, #2
 801325c:	d103      	bne.n	8013266 <xQueueGenericSendFromISR+0x6a>
 801325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013262:	2b01      	cmp	r3, #1
 8013264:	d101      	bne.n	801326a <xQueueGenericSendFromISR+0x6e>
 8013266:	2301      	movs	r3, #1
 8013268:	e000      	b.n	801326c <xQueueGenericSendFromISR+0x70>
 801326a:	2300      	movs	r3, #0
 801326c:	2b00      	cmp	r3, #0
 801326e:	d10a      	bne.n	8013286 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013274:	f383 8811 	msr	BASEPRI, r3
 8013278:	f3bf 8f6f 	isb	sy
 801327c:	f3bf 8f4f 	dsb	sy
 8013280:	623b      	str	r3, [r7, #32]
}
 8013282:	bf00      	nop
 8013284:	e7fe      	b.n	8013284 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013286:	f002 f8ef 	bl	8015468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801328a:	f3ef 8211 	mrs	r2, BASEPRI
 801328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013292:	f383 8811 	msr	BASEPRI, r3
 8013296:	f3bf 8f6f 	isb	sy
 801329a:	f3bf 8f4f 	dsb	sy
 801329e:	61fa      	str	r2, [r7, #28]
 80132a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80132a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80132a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80132a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d302      	bcc.n	80132b8 <xQueueGenericSendFromISR+0xbc>
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	2b02      	cmp	r3, #2
 80132b6:	d12f      	bne.n	8013318 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80132b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80132c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80132c8:	683a      	ldr	r2, [r7, #0]
 80132ca:	68b9      	ldr	r1, [r7, #8]
 80132cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132ce:	f000 f911 	bl	80134f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80132d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80132d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80132da:	d112      	bne.n	8013302 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d016      	beq.n	8013312 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e6:	3324      	adds	r3, #36	; 0x24
 80132e8:	4618      	mov	r0, r3
 80132ea:	f001 f827 	bl	801433c <xTaskRemoveFromEventList>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d00e      	beq.n	8013312 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d00b      	beq.n	8013312 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2201      	movs	r2, #1
 80132fe:	601a      	str	r2, [r3, #0]
 8013300:	e007      	b.n	8013312 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013302:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013306:	3301      	adds	r3, #1
 8013308:	b2db      	uxtb	r3, r3
 801330a:	b25a      	sxtb	r2, r3
 801330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013312:	2301      	movs	r3, #1
 8013314:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013316:	e001      	b.n	801331c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013318:	2300      	movs	r3, #0
 801331a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801331e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013326:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801332a:	4618      	mov	r0, r3
 801332c:	3740      	adds	r7, #64	; 0x40
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
	...

08013334 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b08c      	sub	sp, #48	; 0x30
 8013338:	af00      	add	r7, sp, #0
 801333a:	60f8      	str	r0, [r7, #12]
 801333c:	60b9      	str	r1, [r7, #8]
 801333e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013340:	2300      	movs	r3, #0
 8013342:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801334a:	2b00      	cmp	r3, #0
 801334c:	d10a      	bne.n	8013364 <xQueueReceive+0x30>
	__asm volatile
 801334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013352:	f383 8811 	msr	BASEPRI, r3
 8013356:	f3bf 8f6f 	isb	sy
 801335a:	f3bf 8f4f 	dsb	sy
 801335e:	623b      	str	r3, [r7, #32]
}
 8013360:	bf00      	nop
 8013362:	e7fe      	b.n	8013362 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d103      	bne.n	8013372 <xQueueReceive+0x3e>
 801336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801336e:	2b00      	cmp	r3, #0
 8013370:	d101      	bne.n	8013376 <xQueueReceive+0x42>
 8013372:	2301      	movs	r3, #1
 8013374:	e000      	b.n	8013378 <xQueueReceive+0x44>
 8013376:	2300      	movs	r3, #0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d10a      	bne.n	8013392 <xQueueReceive+0x5e>
	__asm volatile
 801337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	61fb      	str	r3, [r7, #28]
}
 801338e:	bf00      	nop
 8013390:	e7fe      	b.n	8013390 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013392:	f001 f9f3 	bl	801477c <xTaskGetSchedulerState>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d102      	bne.n	80133a2 <xQueueReceive+0x6e>
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d101      	bne.n	80133a6 <xQueueReceive+0x72>
 80133a2:	2301      	movs	r3, #1
 80133a4:	e000      	b.n	80133a8 <xQueueReceive+0x74>
 80133a6:	2300      	movs	r3, #0
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d10a      	bne.n	80133c2 <xQueueReceive+0x8e>
	__asm volatile
 80133ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b0:	f383 8811 	msr	BASEPRI, r3
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	61bb      	str	r3, [r7, #24]
}
 80133be:	bf00      	nop
 80133c0:	e7fe      	b.n	80133c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80133c2:	f001 ff6f 	bl	80152a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d01f      	beq.n	8013412 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133d2:	68b9      	ldr	r1, [r7, #8]
 80133d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133d6:	f000 f8f7 	bl	80135c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133dc:	1e5a      	subs	r2, r3, #1
 80133de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e4:	691b      	ldr	r3, [r3, #16]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d00f      	beq.n	801340a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ec:	3310      	adds	r3, #16
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 ffa4 	bl	801433c <xTaskRemoveFromEventList>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d007      	beq.n	801340a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80133fa:	4b3d      	ldr	r3, [pc, #244]	; (80134f0 <xQueueReceive+0x1bc>)
 80133fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013400:	601a      	str	r2, [r3, #0]
 8013402:	f3bf 8f4f 	dsb	sy
 8013406:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801340a:	f001 ff7b 	bl	8015304 <vPortExitCritical>
				return pdPASS;
 801340e:	2301      	movs	r3, #1
 8013410:	e069      	b.n	80134e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d103      	bne.n	8013420 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013418:	f001 ff74 	bl	8015304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801341c:	2300      	movs	r3, #0
 801341e:	e062      	b.n	80134e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013422:	2b00      	cmp	r3, #0
 8013424:	d106      	bne.n	8013434 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013426:	f107 0310 	add.w	r3, r7, #16
 801342a:	4618      	mov	r0, r3
 801342c:	f001 f84c 	bl	80144c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013430:	2301      	movs	r3, #1
 8013432:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013434:	f001 ff66 	bl	8015304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013438:	f000 fd20 	bl	8013e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801343c:	f001 ff32 	bl	80152a4 <vPortEnterCritical>
 8013440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013446:	b25b      	sxtb	r3, r3
 8013448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801344c:	d103      	bne.n	8013456 <xQueueReceive+0x122>
 801344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013450:	2200      	movs	r2, #0
 8013452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801345c:	b25b      	sxtb	r3, r3
 801345e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013462:	d103      	bne.n	801346c <xQueueReceive+0x138>
 8013464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013466:	2200      	movs	r2, #0
 8013468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801346c:	f001 ff4a 	bl	8015304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013470:	1d3a      	adds	r2, r7, #4
 8013472:	f107 0310 	add.w	r3, r7, #16
 8013476:	4611      	mov	r1, r2
 8013478:	4618      	mov	r0, r3
 801347a:	f001 f83b 	bl	80144f4 <xTaskCheckForTimeOut>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d123      	bne.n	80134cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013486:	f000 f917 	bl	80136b8 <prvIsQueueEmpty>
 801348a:	4603      	mov	r3, r0
 801348c:	2b00      	cmp	r3, #0
 801348e:	d017      	beq.n	80134c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013492:	3324      	adds	r3, #36	; 0x24
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	4611      	mov	r1, r2
 8013498:	4618      	mov	r0, r3
 801349a:	f000 fec3 	bl	8014224 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801349e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a0:	f000 f8b8 	bl	8013614 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80134a4:	f000 fcf8 	bl	8013e98 <xTaskResumeAll>
 80134a8:	4603      	mov	r3, r0
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d189      	bne.n	80133c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80134ae:	4b10      	ldr	r3, [pc, #64]	; (80134f0 <xQueueReceive+0x1bc>)
 80134b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134b4:	601a      	str	r2, [r3, #0]
 80134b6:	f3bf 8f4f 	dsb	sy
 80134ba:	f3bf 8f6f 	isb	sy
 80134be:	e780      	b.n	80133c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80134c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134c2:	f000 f8a7 	bl	8013614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80134c6:	f000 fce7 	bl	8013e98 <xTaskResumeAll>
 80134ca:	e77a      	b.n	80133c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80134cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134ce:	f000 f8a1 	bl	8013614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134d2:	f000 fce1 	bl	8013e98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134d8:	f000 f8ee 	bl	80136b8 <prvIsQueueEmpty>
 80134dc:	4603      	mov	r3, r0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f43f af6f 	beq.w	80133c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80134e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3730      	adds	r7, #48	; 0x30
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	e000ed04 	.word	0xe000ed04

080134f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b086      	sub	sp, #24
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013500:	2300      	movs	r3, #0
 8013502:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013508:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801350e:	2b00      	cmp	r3, #0
 8013510:	d10d      	bne.n	801352e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d14d      	bne.n	80135b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	4618      	mov	r0, r3
 8013520:	f001 f94a 	bl	80147b8 <xTaskPriorityDisinherit>
 8013524:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2200      	movs	r2, #0
 801352a:	609a      	str	r2, [r3, #8]
 801352c:	e043      	b.n	80135b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d119      	bne.n	8013568 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6858      	ldr	r0, [r3, #4]
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801353c:	461a      	mov	r2, r3
 801353e:	68b9      	ldr	r1, [r7, #8]
 8013540:	f002 f9f6 	bl	8015930 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	685a      	ldr	r2, [r3, #4]
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801354c:	441a      	add	r2, r3
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	685a      	ldr	r2, [r3, #4]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	429a      	cmp	r2, r3
 801355c:	d32b      	bcc.n	80135b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	605a      	str	r2, [r3, #4]
 8013566:	e026      	b.n	80135b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	68d8      	ldr	r0, [r3, #12]
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013570:	461a      	mov	r2, r3
 8013572:	68b9      	ldr	r1, [r7, #8]
 8013574:	f002 f9dc 	bl	8015930 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	68da      	ldr	r2, [r3, #12]
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013580:	425b      	negs	r3, r3
 8013582:	441a      	add	r2, r3
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	68da      	ldr	r2, [r3, #12]
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	429a      	cmp	r2, r3
 8013592:	d207      	bcs.n	80135a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	689a      	ldr	r2, [r3, #8]
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801359c:	425b      	negs	r3, r3
 801359e:	441a      	add	r2, r3
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b02      	cmp	r3, #2
 80135a8:	d105      	bne.n	80135b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d002      	beq.n	80135b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	3b01      	subs	r3, #1
 80135b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	1c5a      	adds	r2, r3, #1
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80135be:	697b      	ldr	r3, [r7, #20]
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3718      	adds	r7, #24
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d018      	beq.n	801360c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	68da      	ldr	r2, [r3, #12]
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135e2:	441a      	add	r2, r3
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	68da      	ldr	r2, [r3, #12]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	689b      	ldr	r3, [r3, #8]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d303      	bcc.n	80135fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681a      	ldr	r2, [r3, #0]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	68d9      	ldr	r1, [r3, #12]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013604:	461a      	mov	r2, r3
 8013606:	6838      	ldr	r0, [r7, #0]
 8013608:	f002 f992 	bl	8015930 <memcpy>
	}
}
 801360c:	bf00      	nop
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b084      	sub	sp, #16
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801361c:	f001 fe42 	bl	80152a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013626:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013628:	e011      	b.n	801364e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801362e:	2b00      	cmp	r3, #0
 8013630:	d012      	beq.n	8013658 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	3324      	adds	r3, #36	; 0x24
 8013636:	4618      	mov	r0, r3
 8013638:	f000 fe80 	bl	801433c <xTaskRemoveFromEventList>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	d001      	beq.n	8013646 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013642:	f000 ffb9 	bl	80145b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013646:	7bfb      	ldrb	r3, [r7, #15]
 8013648:	3b01      	subs	r3, #1
 801364a:	b2db      	uxtb	r3, r3
 801364c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013652:	2b00      	cmp	r3, #0
 8013654:	dce9      	bgt.n	801362a <prvUnlockQueue+0x16>
 8013656:	e000      	b.n	801365a <prvUnlockQueue+0x46>
					break;
 8013658:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	22ff      	movs	r2, #255	; 0xff
 801365e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013662:	f001 fe4f 	bl	8015304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013666:	f001 fe1d 	bl	80152a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013670:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013672:	e011      	b.n	8013698 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	691b      	ldr	r3, [r3, #16]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d012      	beq.n	80136a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	3310      	adds	r3, #16
 8013680:	4618      	mov	r0, r3
 8013682:	f000 fe5b 	bl	801433c <xTaskRemoveFromEventList>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d001      	beq.n	8013690 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801368c:	f000 ff94 	bl	80145b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013690:	7bbb      	ldrb	r3, [r7, #14]
 8013692:	3b01      	subs	r3, #1
 8013694:	b2db      	uxtb	r3, r3
 8013696:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801369c:	2b00      	cmp	r3, #0
 801369e:	dce9      	bgt.n	8013674 <prvUnlockQueue+0x60>
 80136a0:	e000      	b.n	80136a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80136a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	22ff      	movs	r2, #255	; 0xff
 80136a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80136ac:	f001 fe2a 	bl	8015304 <vPortExitCritical>
}
 80136b0:	bf00      	nop
 80136b2:	3710      	adds	r7, #16
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136c0:	f001 fdf0 	bl	80152a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d102      	bne.n	80136d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80136cc:	2301      	movs	r3, #1
 80136ce:	60fb      	str	r3, [r7, #12]
 80136d0:	e001      	b.n	80136d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80136d2:	2300      	movs	r3, #0
 80136d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136d6:	f001 fe15 	bl	8015304 <vPortExitCritical>

	return xReturn;
 80136da:	68fb      	ldr	r3, [r7, #12]
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}

080136e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136ec:	f001 fdda 	bl	80152a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d102      	bne.n	8013702 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136fc:	2301      	movs	r3, #1
 80136fe:	60fb      	str	r3, [r7, #12]
 8013700:	e001      	b.n	8013706 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013702:	2300      	movs	r3, #0
 8013704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013706:	f001 fdfd 	bl	8015304 <vPortExitCritical>

	return xReturn;
 801370a:	68fb      	ldr	r3, [r7, #12]
}
 801370c:	4618      	mov	r0, r3
 801370e:	3710      	adds	r7, #16
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}

08013714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013714:	b480      	push	{r7}
 8013716:	b085      	sub	sp, #20
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801371e:	2300      	movs	r3, #0
 8013720:	60fb      	str	r3, [r7, #12]
 8013722:	e014      	b.n	801374e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013724:	4a0f      	ldr	r2, [pc, #60]	; (8013764 <vQueueAddToRegistry+0x50>)
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d10b      	bne.n	8013748 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013730:	490c      	ldr	r1, [pc, #48]	; (8013764 <vQueueAddToRegistry+0x50>)
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	683a      	ldr	r2, [r7, #0]
 8013736:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801373a:	4a0a      	ldr	r2, [pc, #40]	; (8013764 <vQueueAddToRegistry+0x50>)
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	00db      	lsls	r3, r3, #3
 8013740:	4413      	add	r3, r2
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013746:	e006      	b.n	8013756 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	3301      	adds	r3, #1
 801374c:	60fb      	str	r3, [r7, #12]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2b07      	cmp	r3, #7
 8013752:	d9e7      	bls.n	8013724 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013754:	bf00      	nop
 8013756:	bf00      	nop
 8013758:	3714      	adds	r7, #20
 801375a:	46bd      	mov	sp, r7
 801375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013760:	4770      	bx	lr
 8013762:	bf00      	nop
 8013764:	24001320 	.word	0x24001320

08013768 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013768:	b580      	push	{r7, lr}
 801376a:	b086      	sub	sp, #24
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013778:	f001 fd94 	bl	80152a4 <vPortEnterCritical>
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013782:	b25b      	sxtb	r3, r3
 8013784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013788:	d103      	bne.n	8013792 <vQueueWaitForMessageRestricted+0x2a>
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	2200      	movs	r2, #0
 801378e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013798:	b25b      	sxtb	r3, r3
 801379a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801379e:	d103      	bne.n	80137a8 <vQueueWaitForMessageRestricted+0x40>
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	2200      	movs	r2, #0
 80137a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80137a8:	f001 fdac 	bl	8015304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d106      	bne.n	80137c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	3324      	adds	r3, #36	; 0x24
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	68b9      	ldr	r1, [r7, #8]
 80137bc:	4618      	mov	r0, r3
 80137be:	f000 fd91 	bl	80142e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80137c2:	6978      	ldr	r0, [r7, #20]
 80137c4:	f7ff ff26 	bl	8013614 <prvUnlockQueue>
	}
 80137c8:	bf00      	nop
 80137ca:	3718      	adds	r7, #24
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b08e      	sub	sp, #56	; 0x38
 80137d4:	af04      	add	r7, sp, #16
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	607a      	str	r2, [r7, #4]
 80137dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80137de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d10a      	bne.n	80137fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80137e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e8:	f383 8811 	msr	BASEPRI, r3
 80137ec:	f3bf 8f6f 	isb	sy
 80137f0:	f3bf 8f4f 	dsb	sy
 80137f4:	623b      	str	r3, [r7, #32]
}
 80137f6:	bf00      	nop
 80137f8:	e7fe      	b.n	80137f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80137fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d10a      	bne.n	8013816 <xTaskCreateStatic+0x46>
	__asm volatile
 8013800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013804:	f383 8811 	msr	BASEPRI, r3
 8013808:	f3bf 8f6f 	isb	sy
 801380c:	f3bf 8f4f 	dsb	sy
 8013810:	61fb      	str	r3, [r7, #28]
}
 8013812:	bf00      	nop
 8013814:	e7fe      	b.n	8013814 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013816:	235c      	movs	r3, #92	; 0x5c
 8013818:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	2b5c      	cmp	r3, #92	; 0x5c
 801381e:	d00a      	beq.n	8013836 <xTaskCreateStatic+0x66>
	__asm volatile
 8013820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013824:	f383 8811 	msr	BASEPRI, r3
 8013828:	f3bf 8f6f 	isb	sy
 801382c:	f3bf 8f4f 	dsb	sy
 8013830:	61bb      	str	r3, [r7, #24]
}
 8013832:	bf00      	nop
 8013834:	e7fe      	b.n	8013834 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013836:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801383a:	2b00      	cmp	r3, #0
 801383c:	d01e      	beq.n	801387c <xTaskCreateStatic+0xac>
 801383e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013840:	2b00      	cmp	r3, #0
 8013842:	d01b      	beq.n	801387c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801384c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013850:	2202      	movs	r2, #2
 8013852:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013856:	2300      	movs	r3, #0
 8013858:	9303      	str	r3, [sp, #12]
 801385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385c:	9302      	str	r3, [sp, #8]
 801385e:	f107 0314 	add.w	r3, r7, #20
 8013862:	9301      	str	r3, [sp, #4]
 8013864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013866:	9300      	str	r3, [sp, #0]
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	68b9      	ldr	r1, [r7, #8]
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f000 f850 	bl	8013914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013876:	f000 f8dd 	bl	8013a34 <prvAddNewTaskToReadyList>
 801387a:	e001      	b.n	8013880 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801387c:	2300      	movs	r3, #0
 801387e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013880:	697b      	ldr	r3, [r7, #20]
	}
 8013882:	4618      	mov	r0, r3
 8013884:	3728      	adds	r7, #40	; 0x28
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}

0801388a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801388a:	b580      	push	{r7, lr}
 801388c:	b08c      	sub	sp, #48	; 0x30
 801388e:	af04      	add	r7, sp, #16
 8013890:	60f8      	str	r0, [r7, #12]
 8013892:	60b9      	str	r1, [r7, #8]
 8013894:	603b      	str	r3, [r7, #0]
 8013896:	4613      	mov	r3, r2
 8013898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801389a:	88fb      	ldrh	r3, [r7, #6]
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	4618      	mov	r0, r3
 80138a0:	f001 fe22 	bl	80154e8 <pvPortMalloc>
 80138a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d00e      	beq.n	80138ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138ac:	205c      	movs	r0, #92	; 0x5c
 80138ae:	f001 fe1b 	bl	80154e8 <pvPortMalloc>
 80138b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d003      	beq.n	80138c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	697a      	ldr	r2, [r7, #20]
 80138be:	631a      	str	r2, [r3, #48]	; 0x30
 80138c0:	e005      	b.n	80138ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80138c2:	6978      	ldr	r0, [r7, #20]
 80138c4:	f001 fedc 	bl	8015680 <vPortFree>
 80138c8:	e001      	b.n	80138ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80138ca:	2300      	movs	r3, #0
 80138cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d017      	beq.n	8013904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	2200      	movs	r2, #0
 80138d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80138dc:	88fa      	ldrh	r2, [r7, #6]
 80138de:	2300      	movs	r3, #0
 80138e0:	9303      	str	r3, [sp, #12]
 80138e2:	69fb      	ldr	r3, [r7, #28]
 80138e4:	9302      	str	r3, [sp, #8]
 80138e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e8:	9301      	str	r3, [sp, #4]
 80138ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	68b9      	ldr	r1, [r7, #8]
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f000 f80e 	bl	8013914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138f8:	69f8      	ldr	r0, [r7, #28]
 80138fa:	f000 f89b 	bl	8013a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80138fe:	2301      	movs	r3, #1
 8013900:	61bb      	str	r3, [r7, #24]
 8013902:	e002      	b.n	801390a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801390a:	69bb      	ldr	r3, [r7, #24]
	}
 801390c:	4618      	mov	r0, r3
 801390e:	3720      	adds	r7, #32
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}

08013914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b088      	sub	sp, #32
 8013918:	af00      	add	r7, sp, #0
 801391a:	60f8      	str	r0, [r7, #12]
 801391c:	60b9      	str	r1, [r7, #8]
 801391e:	607a      	str	r2, [r7, #4]
 8013920:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013924:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	009b      	lsls	r3, r3, #2
 801392a:	461a      	mov	r2, r3
 801392c:	21a5      	movs	r1, #165	; 0xa5
 801392e:	f002 f80d 	bl	801594c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013936:	6879      	ldr	r1, [r7, #4]
 8013938:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801393c:	440b      	add	r3, r1
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	4413      	add	r3, r2
 8013942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	f023 0307 	bic.w	r3, r3, #7
 801394a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801394c:	69bb      	ldr	r3, [r7, #24]
 801394e:	f003 0307 	and.w	r3, r3, #7
 8013952:	2b00      	cmp	r3, #0
 8013954:	d00a      	beq.n	801396c <prvInitialiseNewTask+0x58>
	__asm volatile
 8013956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395a:	f383 8811 	msr	BASEPRI, r3
 801395e:	f3bf 8f6f 	isb	sy
 8013962:	f3bf 8f4f 	dsb	sy
 8013966:	617b      	str	r3, [r7, #20]
}
 8013968:	bf00      	nop
 801396a:	e7fe      	b.n	801396a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d01f      	beq.n	80139b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013972:	2300      	movs	r3, #0
 8013974:	61fb      	str	r3, [r7, #28]
 8013976:	e012      	b.n	801399e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013978:	68ba      	ldr	r2, [r7, #8]
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	4413      	add	r3, r2
 801397e:	7819      	ldrb	r1, [r3, #0]
 8013980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	4413      	add	r3, r2
 8013986:	3334      	adds	r3, #52	; 0x34
 8013988:	460a      	mov	r2, r1
 801398a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	4413      	add	r3, r2
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d006      	beq.n	80139a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	3301      	adds	r3, #1
 801399c:	61fb      	str	r3, [r7, #28]
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	2b0f      	cmp	r3, #15
 80139a2:	d9e9      	bls.n	8013978 <prvInitialiseNewTask+0x64>
 80139a4:	e000      	b.n	80139a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80139a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80139a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139aa:	2200      	movs	r2, #0
 80139ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80139b0:	e003      	b.n	80139ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80139b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b4:	2200      	movs	r2, #0
 80139b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80139ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139bc:	2b37      	cmp	r3, #55	; 0x37
 80139be:	d901      	bls.n	80139c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80139c0:	2337      	movs	r3, #55	; 0x37
 80139c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80139c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80139ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80139d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d2:	2200      	movs	r2, #0
 80139d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80139d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d8:	3304      	adds	r3, #4
 80139da:	4618      	mov	r0, r3
 80139dc:	f7ff f978 	bl	8012cd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80139e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e2:	3318      	adds	r3, #24
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7ff f973 	bl	8012cd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80139ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80139f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80139fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a02:	2200      	movs	r2, #0
 8013a04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a08:	2200      	movs	r2, #0
 8013a0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a0e:	683a      	ldr	r2, [r7, #0]
 8013a10:	68f9      	ldr	r1, [r7, #12]
 8013a12:	69b8      	ldr	r0, [r7, #24]
 8013a14:	f001 fb18 	bl	8015048 <pxPortInitialiseStack>
 8013a18:	4602      	mov	r2, r0
 8013a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d002      	beq.n	8013a2a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a2a:	bf00      	nop
 8013a2c:	3720      	adds	r7, #32
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}
	...

08013a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a3c:	f001 fc32 	bl	80152a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a40:	4b2d      	ldr	r3, [pc, #180]	; (8013af8 <prvAddNewTaskToReadyList+0xc4>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	3301      	adds	r3, #1
 8013a46:	4a2c      	ldr	r2, [pc, #176]	; (8013af8 <prvAddNewTaskToReadyList+0xc4>)
 8013a48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a4a:	4b2c      	ldr	r3, [pc, #176]	; (8013afc <prvAddNewTaskToReadyList+0xc8>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d109      	bne.n	8013a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a52:	4a2a      	ldr	r2, [pc, #168]	; (8013afc <prvAddNewTaskToReadyList+0xc8>)
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a58:	4b27      	ldr	r3, [pc, #156]	; (8013af8 <prvAddNewTaskToReadyList+0xc4>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	d110      	bne.n	8013a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a60:	f000 fdce 	bl	8014600 <prvInitialiseTaskLists>
 8013a64:	e00d      	b.n	8013a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a66:	4b26      	ldr	r3, [pc, #152]	; (8013b00 <prvAddNewTaskToReadyList+0xcc>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d109      	bne.n	8013a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a6e:	4b23      	ldr	r3, [pc, #140]	; (8013afc <prvAddNewTaskToReadyList+0xc8>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d802      	bhi.n	8013a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013a7c:	4a1f      	ldr	r2, [pc, #124]	; (8013afc <prvAddNewTaskToReadyList+0xc8>)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013a82:	4b20      	ldr	r3, [pc, #128]	; (8013b04 <prvAddNewTaskToReadyList+0xd0>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	3301      	adds	r3, #1
 8013a88:	4a1e      	ldr	r2, [pc, #120]	; (8013b04 <prvAddNewTaskToReadyList+0xd0>)
 8013a8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013a8c:	4b1d      	ldr	r3, [pc, #116]	; (8013b04 <prvAddNewTaskToReadyList+0xd0>)
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a98:	4b1b      	ldr	r3, [pc, #108]	; (8013b08 <prvAddNewTaskToReadyList+0xd4>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d903      	bls.n	8013aa8 <prvAddNewTaskToReadyList+0x74>
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aa4:	4a18      	ldr	r2, [pc, #96]	; (8013b08 <prvAddNewTaskToReadyList+0xd4>)
 8013aa6:	6013      	str	r3, [r2, #0]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aac:	4613      	mov	r3, r2
 8013aae:	009b      	lsls	r3, r3, #2
 8013ab0:	4413      	add	r3, r2
 8013ab2:	009b      	lsls	r3, r3, #2
 8013ab4:	4a15      	ldr	r2, [pc, #84]	; (8013b0c <prvAddNewTaskToReadyList+0xd8>)
 8013ab6:	441a      	add	r2, r3
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	3304      	adds	r3, #4
 8013abc:	4619      	mov	r1, r3
 8013abe:	4610      	mov	r0, r2
 8013ac0:	f7ff f913 	bl	8012cea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013ac4:	f001 fc1e 	bl	8015304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013ac8:	4b0d      	ldr	r3, [pc, #52]	; (8013b00 <prvAddNewTaskToReadyList+0xcc>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d00e      	beq.n	8013aee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013ad0:	4b0a      	ldr	r3, [pc, #40]	; (8013afc <prvAddNewTaskToReadyList+0xc8>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d207      	bcs.n	8013aee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013ade:	4b0c      	ldr	r3, [pc, #48]	; (8013b10 <prvAddNewTaskToReadyList+0xdc>)
 8013ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ae4:	601a      	str	r2, [r3, #0]
 8013ae6:	f3bf 8f4f 	dsb	sy
 8013aea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013aee:	bf00      	nop
 8013af0:	3708      	adds	r7, #8
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}
 8013af6:	bf00      	nop
 8013af8:	24001834 	.word	0x24001834
 8013afc:	24001360 	.word	0x24001360
 8013b00:	24001840 	.word	0x24001840
 8013b04:	24001850 	.word	0x24001850
 8013b08:	2400183c 	.word	0x2400183c
 8013b0c:	24001364 	.word	0x24001364
 8013b10:	e000ed04 	.word	0xe000ed04

08013b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b084      	sub	sp, #16
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d017      	beq.n	8013b56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013b26:	4b13      	ldr	r3, [pc, #76]	; (8013b74 <vTaskDelay+0x60>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d00a      	beq.n	8013b44 <vTaskDelay+0x30>
	__asm volatile
 8013b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b32:	f383 8811 	msr	BASEPRI, r3
 8013b36:	f3bf 8f6f 	isb	sy
 8013b3a:	f3bf 8f4f 	dsb	sy
 8013b3e:	60bb      	str	r3, [r7, #8]
}
 8013b40:	bf00      	nop
 8013b42:	e7fe      	b.n	8013b42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013b44:	f000 f99a 	bl	8013e7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b48:	2100      	movs	r1, #0
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f000 feba 	bl	80148c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b50:	f000 f9a2 	bl	8013e98 <xTaskResumeAll>
 8013b54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d107      	bne.n	8013b6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013b5c:	4b06      	ldr	r3, [pc, #24]	; (8013b78 <vTaskDelay+0x64>)
 8013b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b62:	601a      	str	r2, [r3, #0]
 8013b64:	f3bf 8f4f 	dsb	sy
 8013b68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b6c:	bf00      	nop
 8013b6e:	3710      	adds	r7, #16
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	2400185c 	.word	0x2400185c
 8013b78:	e000ed04 	.word	0xe000ed04

08013b7c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b084      	sub	sp, #16
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013b84:	f001 fb8e 	bl	80152a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d102      	bne.n	8013b94 <vTaskSuspend+0x18>
 8013b8e:	4b30      	ldr	r3, [pc, #192]	; (8013c50 <vTaskSuspend+0xd4>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	e000      	b.n	8013b96 <vTaskSuspend+0x1a>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	3304      	adds	r3, #4
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7ff f901 	bl	8012da4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d004      	beq.n	8013bb4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	3318      	adds	r3, #24
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7ff f8f8 	bl	8012da4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	3304      	adds	r3, #4
 8013bb8:	4619      	mov	r1, r3
 8013bba:	4826      	ldr	r0, [pc, #152]	; (8013c54 <vTaskSuspend+0xd8>)
 8013bbc:	f7ff f895 	bl	8012cea <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013bc6:	b2db      	uxtb	r3, r3
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d103      	bne.n	8013bd4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8013bd4:	f001 fb96 	bl	8015304 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013bd8:	4b1f      	ldr	r3, [pc, #124]	; (8013c58 <vTaskSuspend+0xdc>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d005      	beq.n	8013bec <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8013be0:	f001 fb60 	bl	80152a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8013be4:	f000 fdaa 	bl	801473c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013be8:	f001 fb8c 	bl	8015304 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013bec:	4b18      	ldr	r3, [pc, #96]	; (8013c50 <vTaskSuspend+0xd4>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	68fa      	ldr	r2, [r7, #12]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d127      	bne.n	8013c46 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8013bf6:	4b18      	ldr	r3, [pc, #96]	; (8013c58 <vTaskSuspend+0xdc>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d017      	beq.n	8013c2e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013bfe:	4b17      	ldr	r3, [pc, #92]	; (8013c5c <vTaskSuspend+0xe0>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d00a      	beq.n	8013c1c <vTaskSuspend+0xa0>
	__asm volatile
 8013c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0a:	f383 8811 	msr	BASEPRI, r3
 8013c0e:	f3bf 8f6f 	isb	sy
 8013c12:	f3bf 8f4f 	dsb	sy
 8013c16:	60bb      	str	r3, [r7, #8]
}
 8013c18:	bf00      	nop
 8013c1a:	e7fe      	b.n	8013c1a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8013c1c:	4b10      	ldr	r3, [pc, #64]	; (8013c60 <vTaskSuspend+0xe4>)
 8013c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c22:	601a      	str	r2, [r3, #0]
 8013c24:	f3bf 8f4f 	dsb	sy
 8013c28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013c2c:	e00b      	b.n	8013c46 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013c2e:	4b09      	ldr	r3, [pc, #36]	; (8013c54 <vTaskSuspend+0xd8>)
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	4b0c      	ldr	r3, [pc, #48]	; (8013c64 <vTaskSuspend+0xe8>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d103      	bne.n	8013c42 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8013c3a:	4b05      	ldr	r3, [pc, #20]	; (8013c50 <vTaskSuspend+0xd4>)
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	601a      	str	r2, [r3, #0]
	}
 8013c40:	e001      	b.n	8013c46 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8013c42:	f000 fa91 	bl	8014168 <vTaskSwitchContext>
	}
 8013c46:	bf00      	nop
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	24001360 	.word	0x24001360
 8013c54:	24001820 	.word	0x24001820
 8013c58:	24001840 	.word	0x24001840
 8013c5c:	2400185c 	.word	0x2400185c
 8013c60:	e000ed04 	.word	0xe000ed04
 8013c64:	24001834 	.word	0x24001834

08013c68 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013c68:	b480      	push	{r7}
 8013c6a:	b087      	sub	sp, #28
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013c70:	2300      	movs	r3, #0
 8013c72:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d10a      	bne.n	8013c94 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8013c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c82:	f383 8811 	msr	BASEPRI, r3
 8013c86:	f3bf 8f6f 	isb	sy
 8013c8a:	f3bf 8f4f 	dsb	sy
 8013c8e:	60fb      	str	r3, [r7, #12]
}
 8013c90:	bf00      	nop
 8013c92:	e7fe      	b.n	8013c92 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013c94:	693b      	ldr	r3, [r7, #16]
 8013c96:	695b      	ldr	r3, [r3, #20]
 8013c98:	4a0a      	ldr	r2, [pc, #40]	; (8013cc4 <prvTaskIsTaskSuspended+0x5c>)
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	d10a      	bne.n	8013cb4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ca2:	4a09      	ldr	r2, [pc, #36]	; (8013cc8 <prvTaskIsTaskSuspended+0x60>)
 8013ca4:	4293      	cmp	r3, r2
 8013ca6:	d005      	beq.n	8013cb4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d101      	bne.n	8013cb4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013cb4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	371c      	adds	r7, #28
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop
 8013cc4:	24001820 	.word	0x24001820
 8013cc8:	240017f4 	.word	0x240017f4

08013ccc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b08a      	sub	sp, #40	; 0x28
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d10a      	bne.n	8013cf8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8013ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce6:	f383 8811 	msr	BASEPRI, r3
 8013cea:	f3bf 8f6f 	isb	sy
 8013cee:	f3bf 8f4f 	dsb	sy
 8013cf2:	61bb      	str	r3, [r7, #24]
}
 8013cf4:	bf00      	nop
 8013cf6:	e7fe      	b.n	8013cf6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cf8:	f001 fbb6 	bl	8015468 <vPortValidateInterruptPriority>
	__asm volatile
 8013cfc:	f3ef 8211 	mrs	r2, BASEPRI
 8013d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d04:	f383 8811 	msr	BASEPRI, r3
 8013d08:	f3bf 8f6f 	isb	sy
 8013d0c:	f3bf 8f4f 	dsb	sy
 8013d10:	617a      	str	r2, [r7, #20]
 8013d12:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013d14:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d16:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013d18:	6a38      	ldr	r0, [r7, #32]
 8013d1a:	f7ff ffa5 	bl	8013c68 <prvTaskIsTaskSuspended>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d030      	beq.n	8013d86 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d24:	4b1d      	ldr	r3, [pc, #116]	; (8013d9c <xTaskResumeFromISR+0xd0>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d126      	bne.n	8013d7a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d2c:	6a3b      	ldr	r3, [r7, #32]
 8013d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d30:	4b1b      	ldr	r3, [pc, #108]	; (8013da0 <xTaskResumeFromISR+0xd4>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d301      	bcc.n	8013d3e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d3e:	6a3b      	ldr	r3, [r7, #32]
 8013d40:	3304      	adds	r3, #4
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7ff f82e 	bl	8012da4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013d48:	6a3b      	ldr	r3, [r7, #32]
 8013d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d4c:	4b15      	ldr	r3, [pc, #84]	; (8013da4 <xTaskResumeFromISR+0xd8>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d903      	bls.n	8013d5c <xTaskResumeFromISR+0x90>
 8013d54:	6a3b      	ldr	r3, [r7, #32]
 8013d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d58:	4a12      	ldr	r2, [pc, #72]	; (8013da4 <xTaskResumeFromISR+0xd8>)
 8013d5a:	6013      	str	r3, [r2, #0]
 8013d5c:	6a3b      	ldr	r3, [r7, #32]
 8013d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d60:	4613      	mov	r3, r2
 8013d62:	009b      	lsls	r3, r3, #2
 8013d64:	4413      	add	r3, r2
 8013d66:	009b      	lsls	r3, r3, #2
 8013d68:	4a0f      	ldr	r2, [pc, #60]	; (8013da8 <xTaskResumeFromISR+0xdc>)
 8013d6a:	441a      	add	r2, r3
 8013d6c:	6a3b      	ldr	r3, [r7, #32]
 8013d6e:	3304      	adds	r3, #4
 8013d70:	4619      	mov	r1, r3
 8013d72:	4610      	mov	r0, r2
 8013d74:	f7fe ffb9 	bl	8012cea <vListInsertEnd>
 8013d78:	e005      	b.n	8013d86 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013d7a:	6a3b      	ldr	r3, [r7, #32]
 8013d7c:	3318      	adds	r3, #24
 8013d7e:	4619      	mov	r1, r3
 8013d80:	480a      	ldr	r0, [pc, #40]	; (8013dac <xTaskResumeFromISR+0xe0>)
 8013d82:	f7fe ffb2 	bl	8012cea <vListInsertEnd>
 8013d86:	69fb      	ldr	r3, [r7, #28]
 8013d88:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	f383 8811 	msr	BASEPRI, r3
}
 8013d90:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8013d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3728      	adds	r7, #40	; 0x28
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	2400185c 	.word	0x2400185c
 8013da0:	24001360 	.word	0x24001360
 8013da4:	2400183c 	.word	0x2400183c
 8013da8:	24001364 	.word	0x24001364
 8013dac:	240017f4 	.word	0x240017f4

08013db0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b08a      	sub	sp, #40	; 0x28
 8013db4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013db6:	2300      	movs	r3, #0
 8013db8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013dbe:	463a      	mov	r2, r7
 8013dc0:	1d39      	adds	r1, r7, #4
 8013dc2:	f107 0308 	add.w	r3, r7, #8
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7fe fd40 	bl	801284c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013dcc:	6839      	ldr	r1, [r7, #0]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	68ba      	ldr	r2, [r7, #8]
 8013dd2:	9202      	str	r2, [sp, #8]
 8013dd4:	9301      	str	r3, [sp, #4]
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	2300      	movs	r3, #0
 8013ddc:	460a      	mov	r2, r1
 8013dde:	4921      	ldr	r1, [pc, #132]	; (8013e64 <vTaskStartScheduler+0xb4>)
 8013de0:	4821      	ldr	r0, [pc, #132]	; (8013e68 <vTaskStartScheduler+0xb8>)
 8013de2:	f7ff fcf5 	bl	80137d0 <xTaskCreateStatic>
 8013de6:	4603      	mov	r3, r0
 8013de8:	4a20      	ldr	r2, [pc, #128]	; (8013e6c <vTaskStartScheduler+0xbc>)
 8013dea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013dec:	4b1f      	ldr	r3, [pc, #124]	; (8013e6c <vTaskStartScheduler+0xbc>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d002      	beq.n	8013dfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013df4:	2301      	movs	r3, #1
 8013df6:	617b      	str	r3, [r7, #20]
 8013df8:	e001      	b.n	8013dfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	d102      	bne.n	8013e0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013e04:	f000 fdb2 	bl	801496c <xTimerCreateTimerTask>
 8013e08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d116      	bne.n	8013e3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8013e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e14:	f383 8811 	msr	BASEPRI, r3
 8013e18:	f3bf 8f6f 	isb	sy
 8013e1c:	f3bf 8f4f 	dsb	sy
 8013e20:	613b      	str	r3, [r7, #16]
}
 8013e22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e24:	4b12      	ldr	r3, [pc, #72]	; (8013e70 <vTaskStartScheduler+0xc0>)
 8013e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e2c:	4b11      	ldr	r3, [pc, #68]	; (8013e74 <vTaskStartScheduler+0xc4>)
 8013e2e:	2201      	movs	r2, #1
 8013e30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e32:	4b11      	ldr	r3, [pc, #68]	; (8013e78 <vTaskStartScheduler+0xc8>)
 8013e34:	2200      	movs	r2, #0
 8013e36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e38:	f001 f992 	bl	8015160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e3c:	e00e      	b.n	8013e5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e44:	d10a      	bne.n	8013e5c <vTaskStartScheduler+0xac>
	__asm volatile
 8013e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4a:	f383 8811 	msr	BASEPRI, r3
 8013e4e:	f3bf 8f6f 	isb	sy
 8013e52:	f3bf 8f4f 	dsb	sy
 8013e56:	60fb      	str	r3, [r7, #12]
}
 8013e58:	bf00      	nop
 8013e5a:	e7fe      	b.n	8013e5a <vTaskStartScheduler+0xaa>
}
 8013e5c:	bf00      	nop
 8013e5e:	3718      	adds	r7, #24
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}
 8013e64:	080165bc 	.word	0x080165bc
 8013e68:	080145d1 	.word	0x080145d1
 8013e6c:	24001858 	.word	0x24001858
 8013e70:	24001854 	.word	0x24001854
 8013e74:	24001840 	.word	0x24001840
 8013e78:	24001838 	.word	0x24001838

08013e7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013e80:	4b04      	ldr	r3, [pc, #16]	; (8013e94 <vTaskSuspendAll+0x18>)
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	3301      	adds	r3, #1
 8013e86:	4a03      	ldr	r2, [pc, #12]	; (8013e94 <vTaskSuspendAll+0x18>)
 8013e88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013e8a:	bf00      	nop
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr
 8013e94:	2400185c 	.word	0x2400185c

08013e98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b084      	sub	sp, #16
 8013e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ea6:	4b42      	ldr	r3, [pc, #264]	; (8013fb0 <xTaskResumeAll+0x118>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d10a      	bne.n	8013ec4 <xTaskResumeAll+0x2c>
	__asm volatile
 8013eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb2:	f383 8811 	msr	BASEPRI, r3
 8013eb6:	f3bf 8f6f 	isb	sy
 8013eba:	f3bf 8f4f 	dsb	sy
 8013ebe:	603b      	str	r3, [r7, #0]
}
 8013ec0:	bf00      	nop
 8013ec2:	e7fe      	b.n	8013ec2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ec4:	f001 f9ee 	bl	80152a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013ec8:	4b39      	ldr	r3, [pc, #228]	; (8013fb0 <xTaskResumeAll+0x118>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	3b01      	subs	r3, #1
 8013ece:	4a38      	ldr	r2, [pc, #224]	; (8013fb0 <xTaskResumeAll+0x118>)
 8013ed0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ed2:	4b37      	ldr	r3, [pc, #220]	; (8013fb0 <xTaskResumeAll+0x118>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d162      	bne.n	8013fa0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013eda:	4b36      	ldr	r3, [pc, #216]	; (8013fb4 <xTaskResumeAll+0x11c>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d05e      	beq.n	8013fa0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ee2:	e02f      	b.n	8013f44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ee4:	4b34      	ldr	r3, [pc, #208]	; (8013fb8 <xTaskResumeAll+0x120>)
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	3318      	adds	r3, #24
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7fe ff57 	bl	8012da4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	3304      	adds	r3, #4
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fe ff52 	bl	8012da4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f04:	4b2d      	ldr	r3, [pc, #180]	; (8013fbc <xTaskResumeAll+0x124>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d903      	bls.n	8013f14 <xTaskResumeAll+0x7c>
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f10:	4a2a      	ldr	r2, [pc, #168]	; (8013fbc <xTaskResumeAll+0x124>)
 8013f12:	6013      	str	r3, [r2, #0]
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f18:	4613      	mov	r3, r2
 8013f1a:	009b      	lsls	r3, r3, #2
 8013f1c:	4413      	add	r3, r2
 8013f1e:	009b      	lsls	r3, r3, #2
 8013f20:	4a27      	ldr	r2, [pc, #156]	; (8013fc0 <xTaskResumeAll+0x128>)
 8013f22:	441a      	add	r2, r3
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	3304      	adds	r3, #4
 8013f28:	4619      	mov	r1, r3
 8013f2a:	4610      	mov	r0, r2
 8013f2c:	f7fe fedd 	bl	8012cea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f34:	4b23      	ldr	r3, [pc, #140]	; (8013fc4 <xTaskResumeAll+0x12c>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d302      	bcc.n	8013f44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013f3e:	4b22      	ldr	r3, [pc, #136]	; (8013fc8 <xTaskResumeAll+0x130>)
 8013f40:	2201      	movs	r2, #1
 8013f42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f44:	4b1c      	ldr	r3, [pc, #112]	; (8013fb8 <xTaskResumeAll+0x120>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d1cb      	bne.n	8013ee4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d001      	beq.n	8013f56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f52:	f000 fbf3 	bl	801473c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013f56:	4b1d      	ldr	r3, [pc, #116]	; (8013fcc <xTaskResumeAll+0x134>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d010      	beq.n	8013f84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013f62:	f000 f847 	bl	8013ff4 <xTaskIncrementTick>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d002      	beq.n	8013f72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013f6c:	4b16      	ldr	r3, [pc, #88]	; (8013fc8 <xTaskResumeAll+0x130>)
 8013f6e:	2201      	movs	r2, #1
 8013f70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	3b01      	subs	r3, #1
 8013f76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d1f1      	bne.n	8013f62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013f7e:	4b13      	ldr	r3, [pc, #76]	; (8013fcc <xTaskResumeAll+0x134>)
 8013f80:	2200      	movs	r2, #0
 8013f82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013f84:	4b10      	ldr	r3, [pc, #64]	; (8013fc8 <xTaskResumeAll+0x130>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d009      	beq.n	8013fa0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013f90:	4b0f      	ldr	r3, [pc, #60]	; (8013fd0 <xTaskResumeAll+0x138>)
 8013f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f96:	601a      	str	r2, [r3, #0]
 8013f98:	f3bf 8f4f 	dsb	sy
 8013f9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013fa0:	f001 f9b0 	bl	8015304 <vPortExitCritical>

	return xAlreadyYielded;
 8013fa4:	68bb      	ldr	r3, [r7, #8]
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3710      	adds	r7, #16
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	2400185c 	.word	0x2400185c
 8013fb4:	24001834 	.word	0x24001834
 8013fb8:	240017f4 	.word	0x240017f4
 8013fbc:	2400183c 	.word	0x2400183c
 8013fc0:	24001364 	.word	0x24001364
 8013fc4:	24001360 	.word	0x24001360
 8013fc8:	24001848 	.word	0x24001848
 8013fcc:	24001844 	.word	0x24001844
 8013fd0:	e000ed04 	.word	0xe000ed04

08013fd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013fda:	4b05      	ldr	r3, [pc, #20]	; (8013ff0 <xTaskGetTickCount+0x1c>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013fe0:	687b      	ldr	r3, [r7, #4]
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	370c      	adds	r7, #12
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop
 8013ff0:	24001838 	.word	0x24001838

08013ff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b086      	sub	sp, #24
 8013ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ffe:	4b4f      	ldr	r3, [pc, #316]	; (801413c <xTaskIncrementTick+0x148>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	f040 808f 	bne.w	8014126 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014008:	4b4d      	ldr	r3, [pc, #308]	; (8014140 <xTaskIncrementTick+0x14c>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	3301      	adds	r3, #1
 801400e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014010:	4a4b      	ldr	r2, [pc, #300]	; (8014140 <xTaskIncrementTick+0x14c>)
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d120      	bne.n	801405e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801401c:	4b49      	ldr	r3, [pc, #292]	; (8014144 <xTaskIncrementTick+0x150>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d00a      	beq.n	801403c <xTaskIncrementTick+0x48>
	__asm volatile
 8014026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402a:	f383 8811 	msr	BASEPRI, r3
 801402e:	f3bf 8f6f 	isb	sy
 8014032:	f3bf 8f4f 	dsb	sy
 8014036:	603b      	str	r3, [r7, #0]
}
 8014038:	bf00      	nop
 801403a:	e7fe      	b.n	801403a <xTaskIncrementTick+0x46>
 801403c:	4b41      	ldr	r3, [pc, #260]	; (8014144 <xTaskIncrementTick+0x150>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	60fb      	str	r3, [r7, #12]
 8014042:	4b41      	ldr	r3, [pc, #260]	; (8014148 <xTaskIncrementTick+0x154>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	4a3f      	ldr	r2, [pc, #252]	; (8014144 <xTaskIncrementTick+0x150>)
 8014048:	6013      	str	r3, [r2, #0]
 801404a:	4a3f      	ldr	r2, [pc, #252]	; (8014148 <xTaskIncrementTick+0x154>)
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	6013      	str	r3, [r2, #0]
 8014050:	4b3e      	ldr	r3, [pc, #248]	; (801414c <xTaskIncrementTick+0x158>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	3301      	adds	r3, #1
 8014056:	4a3d      	ldr	r2, [pc, #244]	; (801414c <xTaskIncrementTick+0x158>)
 8014058:	6013      	str	r3, [r2, #0]
 801405a:	f000 fb6f 	bl	801473c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801405e:	4b3c      	ldr	r3, [pc, #240]	; (8014150 <xTaskIncrementTick+0x15c>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	693a      	ldr	r2, [r7, #16]
 8014064:	429a      	cmp	r2, r3
 8014066:	d349      	bcc.n	80140fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014068:	4b36      	ldr	r3, [pc, #216]	; (8014144 <xTaskIncrementTick+0x150>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d104      	bne.n	801407c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014072:	4b37      	ldr	r3, [pc, #220]	; (8014150 <xTaskIncrementTick+0x15c>)
 8014074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014078:	601a      	str	r2, [r3, #0]
					break;
 801407a:	e03f      	b.n	80140fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801407c:	4b31      	ldr	r3, [pc, #196]	; (8014144 <xTaskIncrementTick+0x150>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	68db      	ldr	r3, [r3, #12]
 8014082:	68db      	ldr	r3, [r3, #12]
 8014084:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	685b      	ldr	r3, [r3, #4]
 801408a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801408c:	693a      	ldr	r2, [r7, #16]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	429a      	cmp	r2, r3
 8014092:	d203      	bcs.n	801409c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014094:	4a2e      	ldr	r2, [pc, #184]	; (8014150 <xTaskIncrementTick+0x15c>)
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801409a:	e02f      	b.n	80140fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	3304      	adds	r3, #4
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7fe fe7f 	bl	8012da4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d004      	beq.n	80140b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	3318      	adds	r3, #24
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7fe fe76 	bl	8012da4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140bc:	4b25      	ldr	r3, [pc, #148]	; (8014154 <xTaskIncrementTick+0x160>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d903      	bls.n	80140cc <xTaskIncrementTick+0xd8>
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140c8:	4a22      	ldr	r2, [pc, #136]	; (8014154 <xTaskIncrementTick+0x160>)
 80140ca:	6013      	str	r3, [r2, #0]
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140d0:	4613      	mov	r3, r2
 80140d2:	009b      	lsls	r3, r3, #2
 80140d4:	4413      	add	r3, r2
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	4a1f      	ldr	r2, [pc, #124]	; (8014158 <xTaskIncrementTick+0x164>)
 80140da:	441a      	add	r2, r3
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	3304      	adds	r3, #4
 80140e0:	4619      	mov	r1, r3
 80140e2:	4610      	mov	r0, r2
 80140e4:	f7fe fe01 	bl	8012cea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ec:	4b1b      	ldr	r3, [pc, #108]	; (801415c <xTaskIncrementTick+0x168>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d3b8      	bcc.n	8014068 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80140f6:	2301      	movs	r3, #1
 80140f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140fa:	e7b5      	b.n	8014068 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80140fc:	4b17      	ldr	r3, [pc, #92]	; (801415c <xTaskIncrementTick+0x168>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014102:	4915      	ldr	r1, [pc, #84]	; (8014158 <xTaskIncrementTick+0x164>)
 8014104:	4613      	mov	r3, r2
 8014106:	009b      	lsls	r3, r3, #2
 8014108:	4413      	add	r3, r2
 801410a:	009b      	lsls	r3, r3, #2
 801410c:	440b      	add	r3, r1
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2b01      	cmp	r3, #1
 8014112:	d901      	bls.n	8014118 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014114:	2301      	movs	r3, #1
 8014116:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014118:	4b11      	ldr	r3, [pc, #68]	; (8014160 <xTaskIncrementTick+0x16c>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d007      	beq.n	8014130 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014120:	2301      	movs	r3, #1
 8014122:	617b      	str	r3, [r7, #20]
 8014124:	e004      	b.n	8014130 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014126:	4b0f      	ldr	r3, [pc, #60]	; (8014164 <xTaskIncrementTick+0x170>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	3301      	adds	r3, #1
 801412c:	4a0d      	ldr	r2, [pc, #52]	; (8014164 <xTaskIncrementTick+0x170>)
 801412e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014130:	697b      	ldr	r3, [r7, #20]
}
 8014132:	4618      	mov	r0, r3
 8014134:	3718      	adds	r7, #24
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	2400185c 	.word	0x2400185c
 8014140:	24001838 	.word	0x24001838
 8014144:	240017ec 	.word	0x240017ec
 8014148:	240017f0 	.word	0x240017f0
 801414c:	2400184c 	.word	0x2400184c
 8014150:	24001854 	.word	0x24001854
 8014154:	2400183c 	.word	0x2400183c
 8014158:	24001364 	.word	0x24001364
 801415c:	24001360 	.word	0x24001360
 8014160:	24001848 	.word	0x24001848
 8014164:	24001844 	.word	0x24001844

08014168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014168:	b480      	push	{r7}
 801416a:	b085      	sub	sp, #20
 801416c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801416e:	4b28      	ldr	r3, [pc, #160]	; (8014210 <vTaskSwitchContext+0xa8>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d003      	beq.n	801417e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014176:	4b27      	ldr	r3, [pc, #156]	; (8014214 <vTaskSwitchContext+0xac>)
 8014178:	2201      	movs	r2, #1
 801417a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801417c:	e041      	b.n	8014202 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801417e:	4b25      	ldr	r3, [pc, #148]	; (8014214 <vTaskSwitchContext+0xac>)
 8014180:	2200      	movs	r2, #0
 8014182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014184:	4b24      	ldr	r3, [pc, #144]	; (8014218 <vTaskSwitchContext+0xb0>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	60fb      	str	r3, [r7, #12]
 801418a:	e010      	b.n	80141ae <vTaskSwitchContext+0x46>
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d10a      	bne.n	80141a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8014192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014196:	f383 8811 	msr	BASEPRI, r3
 801419a:	f3bf 8f6f 	isb	sy
 801419e:	f3bf 8f4f 	dsb	sy
 80141a2:	607b      	str	r3, [r7, #4]
}
 80141a4:	bf00      	nop
 80141a6:	e7fe      	b.n	80141a6 <vTaskSwitchContext+0x3e>
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	3b01      	subs	r3, #1
 80141ac:	60fb      	str	r3, [r7, #12]
 80141ae:	491b      	ldr	r1, [pc, #108]	; (801421c <vTaskSwitchContext+0xb4>)
 80141b0:	68fa      	ldr	r2, [r7, #12]
 80141b2:	4613      	mov	r3, r2
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	4413      	add	r3, r2
 80141b8:	009b      	lsls	r3, r3, #2
 80141ba:	440b      	add	r3, r1
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d0e4      	beq.n	801418c <vTaskSwitchContext+0x24>
 80141c2:	68fa      	ldr	r2, [r7, #12]
 80141c4:	4613      	mov	r3, r2
 80141c6:	009b      	lsls	r3, r3, #2
 80141c8:	4413      	add	r3, r2
 80141ca:	009b      	lsls	r3, r3, #2
 80141cc:	4a13      	ldr	r2, [pc, #76]	; (801421c <vTaskSwitchContext+0xb4>)
 80141ce:	4413      	add	r3, r2
 80141d0:	60bb      	str	r3, [r7, #8]
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	685a      	ldr	r2, [r3, #4]
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	605a      	str	r2, [r3, #4]
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	685a      	ldr	r2, [r3, #4]
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	3308      	adds	r3, #8
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d104      	bne.n	80141f2 <vTaskSwitchContext+0x8a>
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	685a      	ldr	r2, [r3, #4]
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	605a      	str	r2, [r3, #4]
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	68db      	ldr	r3, [r3, #12]
 80141f8:	4a09      	ldr	r2, [pc, #36]	; (8014220 <vTaskSwitchContext+0xb8>)
 80141fa:	6013      	str	r3, [r2, #0]
 80141fc:	4a06      	ldr	r2, [pc, #24]	; (8014218 <vTaskSwitchContext+0xb0>)
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	6013      	str	r3, [r2, #0]
}
 8014202:	bf00      	nop
 8014204:	3714      	adds	r7, #20
 8014206:	46bd      	mov	sp, r7
 8014208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420c:	4770      	bx	lr
 801420e:	bf00      	nop
 8014210:	2400185c 	.word	0x2400185c
 8014214:	24001848 	.word	0x24001848
 8014218:	2400183c 	.word	0x2400183c
 801421c:	24001364 	.word	0x24001364
 8014220:	24001360 	.word	0x24001360

08014224 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d10a      	bne.n	801424a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014238:	f383 8811 	msr	BASEPRI, r3
 801423c:	f3bf 8f6f 	isb	sy
 8014240:	f3bf 8f4f 	dsb	sy
 8014244:	60fb      	str	r3, [r7, #12]
}
 8014246:	bf00      	nop
 8014248:	e7fe      	b.n	8014248 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801424a:	4b07      	ldr	r3, [pc, #28]	; (8014268 <vTaskPlaceOnEventList+0x44>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	3318      	adds	r3, #24
 8014250:	4619      	mov	r1, r3
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f7fe fd6d 	bl	8012d32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014258:	2101      	movs	r1, #1
 801425a:	6838      	ldr	r0, [r7, #0]
 801425c:	f000 fb32 	bl	80148c4 <prvAddCurrentTaskToDelayedList>
}
 8014260:	bf00      	nop
 8014262:	3710      	adds	r7, #16
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}
 8014268:	24001360 	.word	0x24001360

0801426c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b086      	sub	sp, #24
 8014270:	af00      	add	r7, sp, #0
 8014272:	60f8      	str	r0, [r7, #12]
 8014274:	60b9      	str	r1, [r7, #8]
 8014276:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d10a      	bne.n	8014294 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014282:	f383 8811 	msr	BASEPRI, r3
 8014286:	f3bf 8f6f 	isb	sy
 801428a:	f3bf 8f4f 	dsb	sy
 801428e:	617b      	str	r3, [r7, #20]
}
 8014290:	bf00      	nop
 8014292:	e7fe      	b.n	8014292 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014294:	4b11      	ldr	r3, [pc, #68]	; (80142dc <vTaskPlaceOnUnorderedEventList+0x70>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d10a      	bne.n	80142b2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a0:	f383 8811 	msr	BASEPRI, r3
 80142a4:	f3bf 8f6f 	isb	sy
 80142a8:	f3bf 8f4f 	dsb	sy
 80142ac:	613b      	str	r3, [r7, #16]
}
 80142ae:	bf00      	nop
 80142b0:	e7fe      	b.n	80142b0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80142b2:	4b0b      	ldr	r3, [pc, #44]	; (80142e0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	68ba      	ldr	r2, [r7, #8]
 80142b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80142bc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142be:	4b08      	ldr	r3, [pc, #32]	; (80142e0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	3318      	adds	r3, #24
 80142c4:	4619      	mov	r1, r3
 80142c6:	68f8      	ldr	r0, [r7, #12]
 80142c8:	f7fe fd0f 	bl	8012cea <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80142cc:	2101      	movs	r1, #1
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f000 faf8 	bl	80148c4 <prvAddCurrentTaskToDelayedList>
}
 80142d4:	bf00      	nop
 80142d6:	3718      	adds	r7, #24
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	2400185c 	.word	0x2400185c
 80142e0:	24001360 	.word	0x24001360

080142e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b086      	sub	sp, #24
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	60f8      	str	r0, [r7, #12]
 80142ec:	60b9      	str	r1, [r7, #8]
 80142ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d10a      	bne.n	801430c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80142f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142fa:	f383 8811 	msr	BASEPRI, r3
 80142fe:	f3bf 8f6f 	isb	sy
 8014302:	f3bf 8f4f 	dsb	sy
 8014306:	617b      	str	r3, [r7, #20]
}
 8014308:	bf00      	nop
 801430a:	e7fe      	b.n	801430a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801430c:	4b0a      	ldr	r3, [pc, #40]	; (8014338 <vTaskPlaceOnEventListRestricted+0x54>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	3318      	adds	r3, #24
 8014312:	4619      	mov	r1, r3
 8014314:	68f8      	ldr	r0, [r7, #12]
 8014316:	f7fe fce8 	bl	8012cea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d002      	beq.n	8014326 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014324:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014326:	6879      	ldr	r1, [r7, #4]
 8014328:	68b8      	ldr	r0, [r7, #8]
 801432a:	f000 facb 	bl	80148c4 <prvAddCurrentTaskToDelayedList>
	}
 801432e:	bf00      	nop
 8014330:	3718      	adds	r7, #24
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	24001360 	.word	0x24001360

0801433c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b086      	sub	sp, #24
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	68db      	ldr	r3, [r3, #12]
 8014348:	68db      	ldr	r3, [r3, #12]
 801434a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d10a      	bne.n	8014368 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014356:	f383 8811 	msr	BASEPRI, r3
 801435a:	f3bf 8f6f 	isb	sy
 801435e:	f3bf 8f4f 	dsb	sy
 8014362:	60fb      	str	r3, [r7, #12]
}
 8014364:	bf00      	nop
 8014366:	e7fe      	b.n	8014366 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	3318      	adds	r3, #24
 801436c:	4618      	mov	r0, r3
 801436e:	f7fe fd19 	bl	8012da4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014372:	4b1e      	ldr	r3, [pc, #120]	; (80143ec <xTaskRemoveFromEventList+0xb0>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d11d      	bne.n	80143b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	3304      	adds	r3, #4
 801437e:	4618      	mov	r0, r3
 8014380:	f7fe fd10 	bl	8012da4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014388:	4b19      	ldr	r3, [pc, #100]	; (80143f0 <xTaskRemoveFromEventList+0xb4>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	429a      	cmp	r2, r3
 801438e:	d903      	bls.n	8014398 <xTaskRemoveFromEventList+0x5c>
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014394:	4a16      	ldr	r2, [pc, #88]	; (80143f0 <xTaskRemoveFromEventList+0xb4>)
 8014396:	6013      	str	r3, [r2, #0]
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801439c:	4613      	mov	r3, r2
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	4413      	add	r3, r2
 80143a2:	009b      	lsls	r3, r3, #2
 80143a4:	4a13      	ldr	r2, [pc, #76]	; (80143f4 <xTaskRemoveFromEventList+0xb8>)
 80143a6:	441a      	add	r2, r3
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	3304      	adds	r3, #4
 80143ac:	4619      	mov	r1, r3
 80143ae:	4610      	mov	r0, r2
 80143b0:	f7fe fc9b 	bl	8012cea <vListInsertEnd>
 80143b4:	e005      	b.n	80143c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	3318      	adds	r3, #24
 80143ba:	4619      	mov	r1, r3
 80143bc:	480e      	ldr	r0, [pc, #56]	; (80143f8 <xTaskRemoveFromEventList+0xbc>)
 80143be:	f7fe fc94 	bl	8012cea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143c6:	4b0d      	ldr	r3, [pc, #52]	; (80143fc <xTaskRemoveFromEventList+0xc0>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d905      	bls.n	80143dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80143d0:	2301      	movs	r3, #1
 80143d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80143d4:	4b0a      	ldr	r3, [pc, #40]	; (8014400 <xTaskRemoveFromEventList+0xc4>)
 80143d6:	2201      	movs	r2, #1
 80143d8:	601a      	str	r2, [r3, #0]
 80143da:	e001      	b.n	80143e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80143dc:	2300      	movs	r3, #0
 80143de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80143e0:	697b      	ldr	r3, [r7, #20]
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	3718      	adds	r7, #24
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	2400185c 	.word	0x2400185c
 80143f0:	2400183c 	.word	0x2400183c
 80143f4:	24001364 	.word	0x24001364
 80143f8:	240017f4 	.word	0x240017f4
 80143fc:	24001360 	.word	0x24001360
 8014400:	24001848 	.word	0x24001848

08014404 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b086      	sub	sp, #24
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
 801440c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801440e:	4b29      	ldr	r3, [pc, #164]	; (80144b4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d10a      	bne.n	801442c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801441a:	f383 8811 	msr	BASEPRI, r3
 801441e:	f3bf 8f6f 	isb	sy
 8014422:	f3bf 8f4f 	dsb	sy
 8014426:	613b      	str	r3, [r7, #16]
}
 8014428:	bf00      	nop
 801442a:	e7fe      	b.n	801442a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	68db      	ldr	r3, [r3, #12]
 801443a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d10a      	bne.n	8014458 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014446:	f383 8811 	msr	BASEPRI, r3
 801444a:	f3bf 8f6f 	isb	sy
 801444e:	f3bf 8f4f 	dsb	sy
 8014452:	60fb      	str	r3, [r7, #12]
}
 8014454:	bf00      	nop
 8014456:	e7fe      	b.n	8014456 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f7fe fca3 	bl	8012da4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801445e:	697b      	ldr	r3, [r7, #20]
 8014460:	3304      	adds	r3, #4
 8014462:	4618      	mov	r0, r3
 8014464:	f7fe fc9e 	bl	8012da4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801446c:	4b12      	ldr	r3, [pc, #72]	; (80144b8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	429a      	cmp	r2, r3
 8014472:	d903      	bls.n	801447c <vTaskRemoveFromUnorderedEventList+0x78>
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014478:	4a0f      	ldr	r2, [pc, #60]	; (80144b8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801447a:	6013      	str	r3, [r2, #0]
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014480:	4613      	mov	r3, r2
 8014482:	009b      	lsls	r3, r3, #2
 8014484:	4413      	add	r3, r2
 8014486:	009b      	lsls	r3, r3, #2
 8014488:	4a0c      	ldr	r2, [pc, #48]	; (80144bc <vTaskRemoveFromUnorderedEventList+0xb8>)
 801448a:	441a      	add	r2, r3
 801448c:	697b      	ldr	r3, [r7, #20]
 801448e:	3304      	adds	r3, #4
 8014490:	4619      	mov	r1, r3
 8014492:	4610      	mov	r0, r2
 8014494:	f7fe fc29 	bl	8012cea <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801449c:	4b08      	ldr	r3, [pc, #32]	; (80144c0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d902      	bls.n	80144ac <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80144a6:	4b07      	ldr	r3, [pc, #28]	; (80144c4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80144a8:	2201      	movs	r2, #1
 80144aa:	601a      	str	r2, [r3, #0]
	}
}
 80144ac:	bf00      	nop
 80144ae:	3718      	adds	r7, #24
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	2400185c 	.word	0x2400185c
 80144b8:	2400183c 	.word	0x2400183c
 80144bc:	24001364 	.word	0x24001364
 80144c0:	24001360 	.word	0x24001360
 80144c4:	24001848 	.word	0x24001848

080144c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80144c8:	b480      	push	{r7}
 80144ca:	b083      	sub	sp, #12
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80144d0:	4b06      	ldr	r3, [pc, #24]	; (80144ec <vTaskInternalSetTimeOutState+0x24>)
 80144d2:	681a      	ldr	r2, [r3, #0]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80144d8:	4b05      	ldr	r3, [pc, #20]	; (80144f0 <vTaskInternalSetTimeOutState+0x28>)
 80144da:	681a      	ldr	r2, [r3, #0]
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	605a      	str	r2, [r3, #4]
}
 80144e0:	bf00      	nop
 80144e2:	370c      	adds	r7, #12
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr
 80144ec:	2400184c 	.word	0x2400184c
 80144f0:	24001838 	.word	0x24001838

080144f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b088      	sub	sp, #32
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
 80144fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d10a      	bne.n	801451a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014508:	f383 8811 	msr	BASEPRI, r3
 801450c:	f3bf 8f6f 	isb	sy
 8014510:	f3bf 8f4f 	dsb	sy
 8014514:	613b      	str	r3, [r7, #16]
}
 8014516:	bf00      	nop
 8014518:	e7fe      	b.n	8014518 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d10a      	bne.n	8014536 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014524:	f383 8811 	msr	BASEPRI, r3
 8014528:	f3bf 8f6f 	isb	sy
 801452c:	f3bf 8f4f 	dsb	sy
 8014530:	60fb      	str	r3, [r7, #12]
}
 8014532:	bf00      	nop
 8014534:	e7fe      	b.n	8014534 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014536:	f000 feb5 	bl	80152a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801453a:	4b1d      	ldr	r3, [pc, #116]	; (80145b0 <xTaskCheckForTimeOut+0xbc>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	69ba      	ldr	r2, [r7, #24]
 8014546:	1ad3      	subs	r3, r2, r3
 8014548:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014552:	d102      	bne.n	801455a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014554:	2300      	movs	r3, #0
 8014556:	61fb      	str	r3, [r7, #28]
 8014558:	e023      	b.n	80145a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	4b15      	ldr	r3, [pc, #84]	; (80145b4 <xTaskCheckForTimeOut+0xc0>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	429a      	cmp	r2, r3
 8014564:	d007      	beq.n	8014576 <xTaskCheckForTimeOut+0x82>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	69ba      	ldr	r2, [r7, #24]
 801456c:	429a      	cmp	r2, r3
 801456e:	d302      	bcc.n	8014576 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014570:	2301      	movs	r3, #1
 8014572:	61fb      	str	r3, [r7, #28]
 8014574:	e015      	b.n	80145a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	697a      	ldr	r2, [r7, #20]
 801457c:	429a      	cmp	r2, r3
 801457e:	d20b      	bcs.n	8014598 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	681a      	ldr	r2, [r3, #0]
 8014584:	697b      	ldr	r3, [r7, #20]
 8014586:	1ad2      	subs	r2, r2, r3
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f7ff ff9b 	bl	80144c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014592:	2300      	movs	r3, #0
 8014594:	61fb      	str	r3, [r7, #28]
 8014596:	e004      	b.n	80145a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	2200      	movs	r2, #0
 801459c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801459e:	2301      	movs	r3, #1
 80145a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80145a2:	f000 feaf 	bl	8015304 <vPortExitCritical>

	return xReturn;
 80145a6:	69fb      	ldr	r3, [r7, #28]
}
 80145a8:	4618      	mov	r0, r3
 80145aa:	3720      	adds	r7, #32
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}
 80145b0:	24001838 	.word	0x24001838
 80145b4:	2400184c 	.word	0x2400184c

080145b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80145b8:	b480      	push	{r7}
 80145ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80145bc:	4b03      	ldr	r3, [pc, #12]	; (80145cc <vTaskMissedYield+0x14>)
 80145be:	2201      	movs	r2, #1
 80145c0:	601a      	str	r2, [r3, #0]
}
 80145c2:	bf00      	nop
 80145c4:	46bd      	mov	sp, r7
 80145c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ca:	4770      	bx	lr
 80145cc:	24001848 	.word	0x24001848

080145d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80145d8:	f000 f852 	bl	8014680 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80145dc:	4b06      	ldr	r3, [pc, #24]	; (80145f8 <prvIdleTask+0x28>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	2b01      	cmp	r3, #1
 80145e2:	d9f9      	bls.n	80145d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80145e4:	4b05      	ldr	r3, [pc, #20]	; (80145fc <prvIdleTask+0x2c>)
 80145e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145ea:	601a      	str	r2, [r3, #0]
 80145ec:	f3bf 8f4f 	dsb	sy
 80145f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80145f4:	e7f0      	b.n	80145d8 <prvIdleTask+0x8>
 80145f6:	bf00      	nop
 80145f8:	24001364 	.word	0x24001364
 80145fc:	e000ed04 	.word	0xe000ed04

08014600 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b082      	sub	sp, #8
 8014604:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014606:	2300      	movs	r3, #0
 8014608:	607b      	str	r3, [r7, #4]
 801460a:	e00c      	b.n	8014626 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	4613      	mov	r3, r2
 8014610:	009b      	lsls	r3, r3, #2
 8014612:	4413      	add	r3, r2
 8014614:	009b      	lsls	r3, r3, #2
 8014616:	4a12      	ldr	r2, [pc, #72]	; (8014660 <prvInitialiseTaskLists+0x60>)
 8014618:	4413      	add	r3, r2
 801461a:	4618      	mov	r0, r3
 801461c:	f7fe fb38 	bl	8012c90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	3301      	adds	r3, #1
 8014624:	607b      	str	r3, [r7, #4]
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2b37      	cmp	r3, #55	; 0x37
 801462a:	d9ef      	bls.n	801460c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801462c:	480d      	ldr	r0, [pc, #52]	; (8014664 <prvInitialiseTaskLists+0x64>)
 801462e:	f7fe fb2f 	bl	8012c90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014632:	480d      	ldr	r0, [pc, #52]	; (8014668 <prvInitialiseTaskLists+0x68>)
 8014634:	f7fe fb2c 	bl	8012c90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014638:	480c      	ldr	r0, [pc, #48]	; (801466c <prvInitialiseTaskLists+0x6c>)
 801463a:	f7fe fb29 	bl	8012c90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801463e:	480c      	ldr	r0, [pc, #48]	; (8014670 <prvInitialiseTaskLists+0x70>)
 8014640:	f7fe fb26 	bl	8012c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014644:	480b      	ldr	r0, [pc, #44]	; (8014674 <prvInitialiseTaskLists+0x74>)
 8014646:	f7fe fb23 	bl	8012c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801464a:	4b0b      	ldr	r3, [pc, #44]	; (8014678 <prvInitialiseTaskLists+0x78>)
 801464c:	4a05      	ldr	r2, [pc, #20]	; (8014664 <prvInitialiseTaskLists+0x64>)
 801464e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014650:	4b0a      	ldr	r3, [pc, #40]	; (801467c <prvInitialiseTaskLists+0x7c>)
 8014652:	4a05      	ldr	r2, [pc, #20]	; (8014668 <prvInitialiseTaskLists+0x68>)
 8014654:	601a      	str	r2, [r3, #0]
}
 8014656:	bf00      	nop
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	24001364 	.word	0x24001364
 8014664:	240017c4 	.word	0x240017c4
 8014668:	240017d8 	.word	0x240017d8
 801466c:	240017f4 	.word	0x240017f4
 8014670:	24001808 	.word	0x24001808
 8014674:	24001820 	.word	0x24001820
 8014678:	240017ec 	.word	0x240017ec
 801467c:	240017f0 	.word	0x240017f0

08014680 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014686:	e019      	b.n	80146bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014688:	f000 fe0c 	bl	80152a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801468c:	4b10      	ldr	r3, [pc, #64]	; (80146d0 <prvCheckTasksWaitingTermination+0x50>)
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	68db      	ldr	r3, [r3, #12]
 8014692:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	3304      	adds	r3, #4
 8014698:	4618      	mov	r0, r3
 801469a:	f7fe fb83 	bl	8012da4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801469e:	4b0d      	ldr	r3, [pc, #52]	; (80146d4 <prvCheckTasksWaitingTermination+0x54>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	3b01      	subs	r3, #1
 80146a4:	4a0b      	ldr	r2, [pc, #44]	; (80146d4 <prvCheckTasksWaitingTermination+0x54>)
 80146a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80146a8:	4b0b      	ldr	r3, [pc, #44]	; (80146d8 <prvCheckTasksWaitingTermination+0x58>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	3b01      	subs	r3, #1
 80146ae:	4a0a      	ldr	r2, [pc, #40]	; (80146d8 <prvCheckTasksWaitingTermination+0x58>)
 80146b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80146b2:	f000 fe27 	bl	8015304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 f810 	bl	80146dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80146bc:	4b06      	ldr	r3, [pc, #24]	; (80146d8 <prvCheckTasksWaitingTermination+0x58>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d1e1      	bne.n	8014688 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80146c4:	bf00      	nop
 80146c6:	bf00      	nop
 80146c8:	3708      	adds	r7, #8
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	24001808 	.word	0x24001808
 80146d4:	24001834 	.word	0x24001834
 80146d8:	2400181c 	.word	0x2400181c

080146dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b084      	sub	sp, #16
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d108      	bne.n	8014700 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146f2:	4618      	mov	r0, r3
 80146f4:	f000 ffc4 	bl	8015680 <vPortFree>
				vPortFree( pxTCB );
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f000 ffc1 	bl	8015680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80146fe:	e018      	b.n	8014732 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014706:	2b01      	cmp	r3, #1
 8014708:	d103      	bne.n	8014712 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f000 ffb8 	bl	8015680 <vPortFree>
	}
 8014710:	e00f      	b.n	8014732 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014718:	2b02      	cmp	r3, #2
 801471a:	d00a      	beq.n	8014732 <prvDeleteTCB+0x56>
	__asm volatile
 801471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014720:	f383 8811 	msr	BASEPRI, r3
 8014724:	f3bf 8f6f 	isb	sy
 8014728:	f3bf 8f4f 	dsb	sy
 801472c:	60fb      	str	r3, [r7, #12]
}
 801472e:	bf00      	nop
 8014730:	e7fe      	b.n	8014730 <prvDeleteTCB+0x54>
	}
 8014732:	bf00      	nop
 8014734:	3710      	adds	r7, #16
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
	...

0801473c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014742:	4b0c      	ldr	r3, [pc, #48]	; (8014774 <prvResetNextTaskUnblockTime+0x38>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d104      	bne.n	8014756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801474c:	4b0a      	ldr	r3, [pc, #40]	; (8014778 <prvResetNextTaskUnblockTime+0x3c>)
 801474e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014754:	e008      	b.n	8014768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014756:	4b07      	ldr	r3, [pc, #28]	; (8014774 <prvResetNextTaskUnblockTime+0x38>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	68db      	ldr	r3, [r3, #12]
 801475c:	68db      	ldr	r3, [r3, #12]
 801475e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	4a04      	ldr	r2, [pc, #16]	; (8014778 <prvResetNextTaskUnblockTime+0x3c>)
 8014766:	6013      	str	r3, [r2, #0]
}
 8014768:	bf00      	nop
 801476a:	370c      	adds	r7, #12
 801476c:	46bd      	mov	sp, r7
 801476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014772:	4770      	bx	lr
 8014774:	240017ec 	.word	0x240017ec
 8014778:	24001854 	.word	0x24001854

0801477c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801477c:	b480      	push	{r7}
 801477e:	b083      	sub	sp, #12
 8014780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014782:	4b0b      	ldr	r3, [pc, #44]	; (80147b0 <xTaskGetSchedulerState+0x34>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d102      	bne.n	8014790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801478a:	2301      	movs	r3, #1
 801478c:	607b      	str	r3, [r7, #4]
 801478e:	e008      	b.n	80147a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014790:	4b08      	ldr	r3, [pc, #32]	; (80147b4 <xTaskGetSchedulerState+0x38>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d102      	bne.n	801479e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014798:	2302      	movs	r3, #2
 801479a:	607b      	str	r3, [r7, #4]
 801479c:	e001      	b.n	80147a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801479e:	2300      	movs	r3, #0
 80147a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80147a2:	687b      	ldr	r3, [r7, #4]
	}
 80147a4:	4618      	mov	r0, r3
 80147a6:	370c      	adds	r7, #12
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr
 80147b0:	24001840 	.word	0x24001840
 80147b4:	2400185c 	.word	0x2400185c

080147b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b086      	sub	sp, #24
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80147c4:	2300      	movs	r3, #0
 80147c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d056      	beq.n	801487c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80147ce:	4b2e      	ldr	r3, [pc, #184]	; (8014888 <xTaskPriorityDisinherit+0xd0>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	693a      	ldr	r2, [r7, #16]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d00a      	beq.n	80147ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80147d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147dc:	f383 8811 	msr	BASEPRI, r3
 80147e0:	f3bf 8f6f 	isb	sy
 80147e4:	f3bf 8f4f 	dsb	sy
 80147e8:	60fb      	str	r3, [r7, #12]
}
 80147ea:	bf00      	nop
 80147ec:	e7fe      	b.n	80147ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d10a      	bne.n	801480c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80147f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fa:	f383 8811 	msr	BASEPRI, r3
 80147fe:	f3bf 8f6f 	isb	sy
 8014802:	f3bf 8f4f 	dsb	sy
 8014806:	60bb      	str	r3, [r7, #8]
}
 8014808:	bf00      	nop
 801480a:	e7fe      	b.n	801480a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014810:	1e5a      	subs	r2, r3, #1
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801481e:	429a      	cmp	r2, r3
 8014820:	d02c      	beq.n	801487c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014826:	2b00      	cmp	r3, #0
 8014828:	d128      	bne.n	801487c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	3304      	adds	r3, #4
 801482e:	4618      	mov	r0, r3
 8014830:	f7fe fab8 	bl	8012da4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014838:	693b      	ldr	r3, [r7, #16]
 801483a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014840:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801484c:	4b0f      	ldr	r3, [pc, #60]	; (801488c <xTaskPriorityDisinherit+0xd4>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	429a      	cmp	r2, r3
 8014852:	d903      	bls.n	801485c <xTaskPriorityDisinherit+0xa4>
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014858:	4a0c      	ldr	r2, [pc, #48]	; (801488c <xTaskPriorityDisinherit+0xd4>)
 801485a:	6013      	str	r3, [r2, #0]
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014860:	4613      	mov	r3, r2
 8014862:	009b      	lsls	r3, r3, #2
 8014864:	4413      	add	r3, r2
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	4a09      	ldr	r2, [pc, #36]	; (8014890 <xTaskPriorityDisinherit+0xd8>)
 801486a:	441a      	add	r2, r3
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	3304      	adds	r3, #4
 8014870:	4619      	mov	r1, r3
 8014872:	4610      	mov	r0, r2
 8014874:	f7fe fa39 	bl	8012cea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014878:	2301      	movs	r3, #1
 801487a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801487c:	697b      	ldr	r3, [r7, #20]
	}
 801487e:	4618      	mov	r0, r3
 8014880:	3718      	adds	r7, #24
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	24001360 	.word	0x24001360
 801488c:	2400183c 	.word	0x2400183c
 8014890:	24001364 	.word	0x24001364

08014894 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014894:	b480      	push	{r7}
 8014896:	b083      	sub	sp, #12
 8014898:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801489a:	4b09      	ldr	r3, [pc, #36]	; (80148c0 <uxTaskResetEventItemValue+0x2c>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	699b      	ldr	r3, [r3, #24]
 80148a0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148a2:	4b07      	ldr	r3, [pc, #28]	; (80148c0 <uxTaskResetEventItemValue+0x2c>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148a8:	4b05      	ldr	r3, [pc, #20]	; (80148c0 <uxTaskResetEventItemValue+0x2c>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80148b0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80148b2:	687b      	ldr	r3, [r7, #4]
}
 80148b4:	4618      	mov	r0, r3
 80148b6:	370c      	adds	r7, #12
 80148b8:	46bd      	mov	sp, r7
 80148ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148be:	4770      	bx	lr
 80148c0:	24001360 	.word	0x24001360

080148c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b084      	sub	sp, #16
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
 80148cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80148ce:	4b21      	ldr	r3, [pc, #132]	; (8014954 <prvAddCurrentTaskToDelayedList+0x90>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148d4:	4b20      	ldr	r3, [pc, #128]	; (8014958 <prvAddCurrentTaskToDelayedList+0x94>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	3304      	adds	r3, #4
 80148da:	4618      	mov	r0, r3
 80148dc:	f7fe fa62 	bl	8012da4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148e6:	d10a      	bne.n	80148fe <prvAddCurrentTaskToDelayedList+0x3a>
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d007      	beq.n	80148fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148ee:	4b1a      	ldr	r3, [pc, #104]	; (8014958 <prvAddCurrentTaskToDelayedList+0x94>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	3304      	adds	r3, #4
 80148f4:	4619      	mov	r1, r3
 80148f6:	4819      	ldr	r0, [pc, #100]	; (801495c <prvAddCurrentTaskToDelayedList+0x98>)
 80148f8:	f7fe f9f7 	bl	8012cea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80148fc:	e026      	b.n	801494c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80148fe:	68fa      	ldr	r2, [r7, #12]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	4413      	add	r3, r2
 8014904:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014906:	4b14      	ldr	r3, [pc, #80]	; (8014958 <prvAddCurrentTaskToDelayedList+0x94>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	68ba      	ldr	r2, [r7, #8]
 801490c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801490e:	68ba      	ldr	r2, [r7, #8]
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	429a      	cmp	r2, r3
 8014914:	d209      	bcs.n	801492a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014916:	4b12      	ldr	r3, [pc, #72]	; (8014960 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	4b0f      	ldr	r3, [pc, #60]	; (8014958 <prvAddCurrentTaskToDelayedList+0x94>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	3304      	adds	r3, #4
 8014920:	4619      	mov	r1, r3
 8014922:	4610      	mov	r0, r2
 8014924:	f7fe fa05 	bl	8012d32 <vListInsert>
}
 8014928:	e010      	b.n	801494c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801492a:	4b0e      	ldr	r3, [pc, #56]	; (8014964 <prvAddCurrentTaskToDelayedList+0xa0>)
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	4b0a      	ldr	r3, [pc, #40]	; (8014958 <prvAddCurrentTaskToDelayedList+0x94>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	3304      	adds	r3, #4
 8014934:	4619      	mov	r1, r3
 8014936:	4610      	mov	r0, r2
 8014938:	f7fe f9fb 	bl	8012d32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801493c:	4b0a      	ldr	r3, [pc, #40]	; (8014968 <prvAddCurrentTaskToDelayedList+0xa4>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	68ba      	ldr	r2, [r7, #8]
 8014942:	429a      	cmp	r2, r3
 8014944:	d202      	bcs.n	801494c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014946:	4a08      	ldr	r2, [pc, #32]	; (8014968 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	6013      	str	r3, [r2, #0]
}
 801494c:	bf00      	nop
 801494e:	3710      	adds	r7, #16
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}
 8014954:	24001838 	.word	0x24001838
 8014958:	24001360 	.word	0x24001360
 801495c:	24001820 	.word	0x24001820
 8014960:	240017f0 	.word	0x240017f0
 8014964:	240017ec 	.word	0x240017ec
 8014968:	24001854 	.word	0x24001854

0801496c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b08a      	sub	sp, #40	; 0x28
 8014970:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014972:	2300      	movs	r3, #0
 8014974:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014976:	f000 fb07 	bl	8014f88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801497a:	4b1c      	ldr	r3, [pc, #112]	; (80149ec <xTimerCreateTimerTask+0x80>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d021      	beq.n	80149c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014982:	2300      	movs	r3, #0
 8014984:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014986:	2300      	movs	r3, #0
 8014988:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801498a:	1d3a      	adds	r2, r7, #4
 801498c:	f107 0108 	add.w	r1, r7, #8
 8014990:	f107 030c 	add.w	r3, r7, #12
 8014994:	4618      	mov	r0, r3
 8014996:	f7fd ff73 	bl	8012880 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801499a:	6879      	ldr	r1, [r7, #4]
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	9202      	str	r2, [sp, #8]
 80149a2:	9301      	str	r3, [sp, #4]
 80149a4:	2302      	movs	r3, #2
 80149a6:	9300      	str	r3, [sp, #0]
 80149a8:	2300      	movs	r3, #0
 80149aa:	460a      	mov	r2, r1
 80149ac:	4910      	ldr	r1, [pc, #64]	; (80149f0 <xTimerCreateTimerTask+0x84>)
 80149ae:	4811      	ldr	r0, [pc, #68]	; (80149f4 <xTimerCreateTimerTask+0x88>)
 80149b0:	f7fe ff0e 	bl	80137d0 <xTaskCreateStatic>
 80149b4:	4603      	mov	r3, r0
 80149b6:	4a10      	ldr	r2, [pc, #64]	; (80149f8 <xTimerCreateTimerTask+0x8c>)
 80149b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80149ba:	4b0f      	ldr	r3, [pc, #60]	; (80149f8 <xTimerCreateTimerTask+0x8c>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d001      	beq.n	80149c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80149c2:	2301      	movs	r3, #1
 80149c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80149c6:	697b      	ldr	r3, [r7, #20]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d10a      	bne.n	80149e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80149cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d0:	f383 8811 	msr	BASEPRI, r3
 80149d4:	f3bf 8f6f 	isb	sy
 80149d8:	f3bf 8f4f 	dsb	sy
 80149dc:	613b      	str	r3, [r7, #16]
}
 80149de:	bf00      	nop
 80149e0:	e7fe      	b.n	80149e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80149e2:	697b      	ldr	r3, [r7, #20]
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3718      	adds	r7, #24
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	24001890 	.word	0x24001890
 80149f0:	080165c4 	.word	0x080165c4
 80149f4:	08014b31 	.word	0x08014b31
 80149f8:	24001894 	.word	0x24001894

080149fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b08a      	sub	sp, #40	; 0x28
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	607a      	str	r2, [r7, #4]
 8014a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d10a      	bne.n	8014a2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8014a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a18:	f383 8811 	msr	BASEPRI, r3
 8014a1c:	f3bf 8f6f 	isb	sy
 8014a20:	f3bf 8f4f 	dsb	sy
 8014a24:	623b      	str	r3, [r7, #32]
}
 8014a26:	bf00      	nop
 8014a28:	e7fe      	b.n	8014a28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014a2a:	4b1a      	ldr	r3, [pc, #104]	; (8014a94 <xTimerGenericCommand+0x98>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d02a      	beq.n	8014a88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	2b05      	cmp	r3, #5
 8014a42:	dc18      	bgt.n	8014a76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014a44:	f7ff fe9a 	bl	801477c <xTaskGetSchedulerState>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	2b02      	cmp	r3, #2
 8014a4c:	d109      	bne.n	8014a62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014a4e:	4b11      	ldr	r3, [pc, #68]	; (8014a94 <xTimerGenericCommand+0x98>)
 8014a50:	6818      	ldr	r0, [r3, #0]
 8014a52:	f107 0110 	add.w	r1, r7, #16
 8014a56:	2300      	movs	r3, #0
 8014a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a5a:	f7fe fad1 	bl	8013000 <xQueueGenericSend>
 8014a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8014a60:	e012      	b.n	8014a88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014a62:	4b0c      	ldr	r3, [pc, #48]	; (8014a94 <xTimerGenericCommand+0x98>)
 8014a64:	6818      	ldr	r0, [r3, #0]
 8014a66:	f107 0110 	add.w	r1, r7, #16
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	f7fe fac7 	bl	8013000 <xQueueGenericSend>
 8014a72:	6278      	str	r0, [r7, #36]	; 0x24
 8014a74:	e008      	b.n	8014a88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014a76:	4b07      	ldr	r3, [pc, #28]	; (8014a94 <xTimerGenericCommand+0x98>)
 8014a78:	6818      	ldr	r0, [r3, #0]
 8014a7a:	f107 0110 	add.w	r1, r7, #16
 8014a7e:	2300      	movs	r3, #0
 8014a80:	683a      	ldr	r2, [r7, #0]
 8014a82:	f7fe fbbb 	bl	80131fc <xQueueGenericSendFromISR>
 8014a86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	3728      	adds	r7, #40	; 0x28
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}
 8014a92:	bf00      	nop
 8014a94:	24001890 	.word	0x24001890

08014a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b088      	sub	sp, #32
 8014a9c:	af02      	add	r7, sp, #8
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014aa2:	4b22      	ldr	r3, [pc, #136]	; (8014b2c <prvProcessExpiredTimer+0x94>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	3304      	adds	r3, #4
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7fe f977 	bl	8012da4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014abc:	f003 0304 	and.w	r3, r3, #4
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d022      	beq.n	8014b0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	699a      	ldr	r2, [r3, #24]
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	18d1      	adds	r1, r2, r3
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	683a      	ldr	r2, [r7, #0]
 8014ad0:	6978      	ldr	r0, [r7, #20]
 8014ad2:	f000 f8d1 	bl	8014c78 <prvInsertTimerInActiveList>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d01f      	beq.n	8014b1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014adc:	2300      	movs	r3, #0
 8014ade:	9300      	str	r3, [sp, #0]
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	2100      	movs	r1, #0
 8014ae6:	6978      	ldr	r0, [r7, #20]
 8014ae8:	f7ff ff88 	bl	80149fc <xTimerGenericCommand>
 8014aec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d113      	bne.n	8014b1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014af8:	f383 8811 	msr	BASEPRI, r3
 8014afc:	f3bf 8f6f 	isb	sy
 8014b00:	f3bf 8f4f 	dsb	sy
 8014b04:	60fb      	str	r3, [r7, #12]
}
 8014b06:	bf00      	nop
 8014b08:	e7fe      	b.n	8014b08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b10:	f023 0301 	bic.w	r3, r3, #1
 8014b14:	b2da      	uxtb	r2, r3
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	6a1b      	ldr	r3, [r3, #32]
 8014b20:	6978      	ldr	r0, [r7, #20]
 8014b22:	4798      	blx	r3
}
 8014b24:	bf00      	nop
 8014b26:	3718      	adds	r7, #24
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	24001888 	.word	0x24001888

08014b30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b084      	sub	sp, #16
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014b38:	f107 0308 	add.w	r3, r7, #8
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f000 f857 	bl	8014bf0 <prvGetNextExpireTime>
 8014b42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	4619      	mov	r1, r3
 8014b48:	68f8      	ldr	r0, [r7, #12]
 8014b4a:	f000 f803 	bl	8014b54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014b4e:	f000 f8d5 	bl	8014cfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014b52:	e7f1      	b.n	8014b38 <prvTimerTask+0x8>

08014b54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b084      	sub	sp, #16
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
 8014b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014b5e:	f7ff f98d 	bl	8013e7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014b62:	f107 0308 	add.w	r3, r7, #8
 8014b66:	4618      	mov	r0, r3
 8014b68:	f000 f866 	bl	8014c38 <prvSampleTimeNow>
 8014b6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d130      	bne.n	8014bd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d10a      	bne.n	8014b90 <prvProcessTimerOrBlockTask+0x3c>
 8014b7a:	687a      	ldr	r2, [r7, #4]
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d806      	bhi.n	8014b90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014b82:	f7ff f989 	bl	8013e98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014b86:	68f9      	ldr	r1, [r7, #12]
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7ff ff85 	bl	8014a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014b8e:	e024      	b.n	8014bda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d008      	beq.n	8014ba8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014b96:	4b13      	ldr	r3, [pc, #76]	; (8014be4 <prvProcessTimerOrBlockTask+0x90>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d101      	bne.n	8014ba4 <prvProcessTimerOrBlockTask+0x50>
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	e000      	b.n	8014ba6 <prvProcessTimerOrBlockTask+0x52>
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014ba8:	4b0f      	ldr	r3, [pc, #60]	; (8014be8 <prvProcessTimerOrBlockTask+0x94>)
 8014baa:	6818      	ldr	r0, [r3, #0]
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	1ad3      	subs	r3, r2, r3
 8014bb2:	683a      	ldr	r2, [r7, #0]
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	f7fe fdd7 	bl	8013768 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014bba:	f7ff f96d 	bl	8013e98 <xTaskResumeAll>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d10a      	bne.n	8014bda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014bc4:	4b09      	ldr	r3, [pc, #36]	; (8014bec <prvProcessTimerOrBlockTask+0x98>)
 8014bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bca:	601a      	str	r2, [r3, #0]
 8014bcc:	f3bf 8f4f 	dsb	sy
 8014bd0:	f3bf 8f6f 	isb	sy
}
 8014bd4:	e001      	b.n	8014bda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014bd6:	f7ff f95f 	bl	8013e98 <xTaskResumeAll>
}
 8014bda:	bf00      	nop
 8014bdc:	3710      	adds	r7, #16
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}
 8014be2:	bf00      	nop
 8014be4:	2400188c 	.word	0x2400188c
 8014be8:	24001890 	.word	0x24001890
 8014bec:	e000ed04 	.word	0xe000ed04

08014bf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014bf0:	b480      	push	{r7}
 8014bf2:	b085      	sub	sp, #20
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014bf8:	4b0e      	ldr	r3, [pc, #56]	; (8014c34 <prvGetNextExpireTime+0x44>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d101      	bne.n	8014c06 <prvGetNextExpireTime+0x16>
 8014c02:	2201      	movs	r2, #1
 8014c04:	e000      	b.n	8014c08 <prvGetNextExpireTime+0x18>
 8014c06:	2200      	movs	r2, #0
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d105      	bne.n	8014c20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014c14:	4b07      	ldr	r3, [pc, #28]	; (8014c34 <prvGetNextExpireTime+0x44>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	68db      	ldr	r3, [r3, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	60fb      	str	r3, [r7, #12]
 8014c1e:	e001      	b.n	8014c24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014c20:	2300      	movs	r3, #0
 8014c22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014c24:	68fb      	ldr	r3, [r7, #12]
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3714      	adds	r7, #20
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop
 8014c34:	24001888 	.word	0x24001888

08014c38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014c40:	f7ff f9c8 	bl	8013fd4 <xTaskGetTickCount>
 8014c44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014c46:	4b0b      	ldr	r3, [pc, #44]	; (8014c74 <prvSampleTimeNow+0x3c>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	68fa      	ldr	r2, [r7, #12]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d205      	bcs.n	8014c5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014c50:	f000 f936 	bl	8014ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2201      	movs	r2, #1
 8014c58:	601a      	str	r2, [r3, #0]
 8014c5a:	e002      	b.n	8014c62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014c62:	4a04      	ldr	r2, [pc, #16]	; (8014c74 <prvSampleTimeNow+0x3c>)
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014c68:	68fb      	ldr	r3, [r7, #12]
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}
 8014c72:	bf00      	nop
 8014c74:	24001898 	.word	0x24001898

08014c78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b086      	sub	sp, #24
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	60f8      	str	r0, [r7, #12]
 8014c80:	60b9      	str	r1, [r7, #8]
 8014c82:	607a      	str	r2, [r7, #4]
 8014c84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014c86:	2300      	movs	r3, #0
 8014c88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	68ba      	ldr	r2, [r7, #8]
 8014c8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	68fa      	ldr	r2, [r7, #12]
 8014c94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014c96:	68ba      	ldr	r2, [r7, #8]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d812      	bhi.n	8014cc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c9e:	687a      	ldr	r2, [r7, #4]
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	1ad2      	subs	r2, r2, r3
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	699b      	ldr	r3, [r3, #24]
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	d302      	bcc.n	8014cb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014cac:	2301      	movs	r3, #1
 8014cae:	617b      	str	r3, [r7, #20]
 8014cb0:	e01b      	b.n	8014cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014cb2:	4b10      	ldr	r3, [pc, #64]	; (8014cf4 <prvInsertTimerInActiveList+0x7c>)
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	3304      	adds	r3, #4
 8014cba:	4619      	mov	r1, r3
 8014cbc:	4610      	mov	r0, r2
 8014cbe:	f7fe f838 	bl	8012d32 <vListInsert>
 8014cc2:	e012      	b.n	8014cea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014cc4:	687a      	ldr	r2, [r7, #4]
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d206      	bcs.n	8014cda <prvInsertTimerInActiveList+0x62>
 8014ccc:	68ba      	ldr	r2, [r7, #8]
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d302      	bcc.n	8014cda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	617b      	str	r3, [r7, #20]
 8014cd8:	e007      	b.n	8014cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014cda:	4b07      	ldr	r3, [pc, #28]	; (8014cf8 <prvInsertTimerInActiveList+0x80>)
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	3304      	adds	r3, #4
 8014ce2:	4619      	mov	r1, r3
 8014ce4:	4610      	mov	r0, r2
 8014ce6:	f7fe f824 	bl	8012d32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014cea:	697b      	ldr	r3, [r7, #20]
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	3718      	adds	r7, #24
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	2400188c 	.word	0x2400188c
 8014cf8:	24001888 	.word	0x24001888

08014cfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b08e      	sub	sp, #56	; 0x38
 8014d00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014d02:	e0ca      	b.n	8014e9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	da18      	bge.n	8014d3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014d0a:	1d3b      	adds	r3, r7, #4
 8014d0c:	3304      	adds	r3, #4
 8014d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d10a      	bne.n	8014d2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d1a:	f383 8811 	msr	BASEPRI, r3
 8014d1e:	f3bf 8f6f 	isb	sy
 8014d22:	f3bf 8f4f 	dsb	sy
 8014d26:	61fb      	str	r3, [r7, #28]
}
 8014d28:	bf00      	nop
 8014d2a:	e7fe      	b.n	8014d2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d32:	6850      	ldr	r0, [r2, #4]
 8014d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d36:	6892      	ldr	r2, [r2, #8]
 8014d38:	4611      	mov	r1, r2
 8014d3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	f2c0 80aa 	blt.w	8014e98 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d4a:	695b      	ldr	r3, [r3, #20]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d004      	beq.n	8014d5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d52:	3304      	adds	r3, #4
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7fe f825 	bl	8012da4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014d5a:	463b      	mov	r3, r7
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7ff ff6b 	bl	8014c38 <prvSampleTimeNow>
 8014d62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b09      	cmp	r3, #9
 8014d68:	f200 8097 	bhi.w	8014e9a <prvProcessReceivedCommands+0x19e>
 8014d6c:	a201      	add	r2, pc, #4	; (adr r2, 8014d74 <prvProcessReceivedCommands+0x78>)
 8014d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d72:	bf00      	nop
 8014d74:	08014d9d 	.word	0x08014d9d
 8014d78:	08014d9d 	.word	0x08014d9d
 8014d7c:	08014d9d 	.word	0x08014d9d
 8014d80:	08014e11 	.word	0x08014e11
 8014d84:	08014e25 	.word	0x08014e25
 8014d88:	08014e6f 	.word	0x08014e6f
 8014d8c:	08014d9d 	.word	0x08014d9d
 8014d90:	08014d9d 	.word	0x08014d9d
 8014d94:	08014e11 	.word	0x08014e11
 8014d98:	08014e25 	.word	0x08014e25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014da2:	f043 0301 	orr.w	r3, r3, #1
 8014da6:	b2da      	uxtb	r2, r3
 8014da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db2:	699b      	ldr	r3, [r3, #24]
 8014db4:	18d1      	adds	r1, r2, r3
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014dbc:	f7ff ff5c 	bl	8014c78 <prvInsertTimerInActiveList>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d069      	beq.n	8014e9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dc8:	6a1b      	ldr	r3, [r3, #32]
 8014dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014dcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014dd4:	f003 0304 	and.w	r3, r3, #4
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d05e      	beq.n	8014e9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014ddc:	68ba      	ldr	r2, [r7, #8]
 8014dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de0:	699b      	ldr	r3, [r3, #24]
 8014de2:	441a      	add	r2, r3
 8014de4:	2300      	movs	r3, #0
 8014de6:	9300      	str	r3, [sp, #0]
 8014de8:	2300      	movs	r3, #0
 8014dea:	2100      	movs	r1, #0
 8014dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014dee:	f7ff fe05 	bl	80149fc <xTimerGenericCommand>
 8014df2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014df4:	6a3b      	ldr	r3, [r7, #32]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d14f      	bne.n	8014e9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dfe:	f383 8811 	msr	BASEPRI, r3
 8014e02:	f3bf 8f6f 	isb	sy
 8014e06:	f3bf 8f4f 	dsb	sy
 8014e0a:	61bb      	str	r3, [r7, #24]
}
 8014e0c:	bf00      	nop
 8014e0e:	e7fe      	b.n	8014e0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e16:	f023 0301 	bic.w	r3, r3, #1
 8014e1a:	b2da      	uxtb	r2, r3
 8014e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014e22:	e03a      	b.n	8014e9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e2a:	f043 0301 	orr.w	r3, r3, #1
 8014e2e:	b2da      	uxtb	r2, r3
 8014e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014e36:	68ba      	ldr	r2, [r7, #8]
 8014e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3e:	699b      	ldr	r3, [r3, #24]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d10a      	bne.n	8014e5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e48:	f383 8811 	msr	BASEPRI, r3
 8014e4c:	f3bf 8f6f 	isb	sy
 8014e50:	f3bf 8f4f 	dsb	sy
 8014e54:	617b      	str	r3, [r7, #20]
}
 8014e56:	bf00      	nop
 8014e58:	e7fe      	b.n	8014e58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e5c:	699a      	ldr	r2, [r3, #24]
 8014e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e60:	18d1      	adds	r1, r2, r3
 8014e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e68:	f7ff ff06 	bl	8014c78 <prvInsertTimerInActiveList>
					break;
 8014e6c:	e015      	b.n	8014e9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e74:	f003 0302 	and.w	r3, r3, #2
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d103      	bne.n	8014e84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e7e:	f000 fbff 	bl	8015680 <vPortFree>
 8014e82:	e00a      	b.n	8014e9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e8a:	f023 0301 	bic.w	r3, r3, #1
 8014e8e:	b2da      	uxtb	r2, r3
 8014e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014e96:	e000      	b.n	8014e9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014e98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014e9a:	4b08      	ldr	r3, [pc, #32]	; (8014ebc <prvProcessReceivedCommands+0x1c0>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	1d39      	adds	r1, r7, #4
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7fe fa46 	bl	8013334 <xQueueReceive>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	f47f af2a 	bne.w	8014d04 <prvProcessReceivedCommands+0x8>
	}
}
 8014eb0:	bf00      	nop
 8014eb2:	bf00      	nop
 8014eb4:	3730      	adds	r7, #48	; 0x30
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	24001890 	.word	0x24001890

08014ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b088      	sub	sp, #32
 8014ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014ec6:	e048      	b.n	8014f5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014ec8:	4b2d      	ldr	r3, [pc, #180]	; (8014f80 <prvSwitchTimerLists+0xc0>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	68db      	ldr	r3, [r3, #12]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ed2:	4b2b      	ldr	r3, [pc, #172]	; (8014f80 <prvSwitchTimerLists+0xc0>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	68db      	ldr	r3, [r3, #12]
 8014ed8:	68db      	ldr	r3, [r3, #12]
 8014eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	3304      	adds	r3, #4
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7fd ff5f 	bl	8012da4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	6a1b      	ldr	r3, [r3, #32]
 8014eea:	68f8      	ldr	r0, [r7, #12]
 8014eec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ef4:	f003 0304 	and.w	r3, r3, #4
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d02e      	beq.n	8014f5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	699b      	ldr	r3, [r3, #24]
 8014f00:	693a      	ldr	r2, [r7, #16]
 8014f02:	4413      	add	r3, r2
 8014f04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014f06:	68ba      	ldr	r2, [r7, #8]
 8014f08:	693b      	ldr	r3, [r7, #16]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d90e      	bls.n	8014f2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	68ba      	ldr	r2, [r7, #8]
 8014f12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	68fa      	ldr	r2, [r7, #12]
 8014f18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014f1a:	4b19      	ldr	r3, [pc, #100]	; (8014f80 <prvSwitchTimerLists+0xc0>)
 8014f1c:	681a      	ldr	r2, [r3, #0]
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	3304      	adds	r3, #4
 8014f22:	4619      	mov	r1, r3
 8014f24:	4610      	mov	r0, r2
 8014f26:	f7fd ff04 	bl	8012d32 <vListInsert>
 8014f2a:	e016      	b.n	8014f5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	9300      	str	r3, [sp, #0]
 8014f30:	2300      	movs	r3, #0
 8014f32:	693a      	ldr	r2, [r7, #16]
 8014f34:	2100      	movs	r1, #0
 8014f36:	68f8      	ldr	r0, [r7, #12]
 8014f38:	f7ff fd60 	bl	80149fc <xTimerGenericCommand>
 8014f3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d10a      	bne.n	8014f5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f48:	f383 8811 	msr	BASEPRI, r3
 8014f4c:	f3bf 8f6f 	isb	sy
 8014f50:	f3bf 8f4f 	dsb	sy
 8014f54:	603b      	str	r3, [r7, #0]
}
 8014f56:	bf00      	nop
 8014f58:	e7fe      	b.n	8014f58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014f5a:	4b09      	ldr	r3, [pc, #36]	; (8014f80 <prvSwitchTimerLists+0xc0>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d1b1      	bne.n	8014ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014f64:	4b06      	ldr	r3, [pc, #24]	; (8014f80 <prvSwitchTimerLists+0xc0>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014f6a:	4b06      	ldr	r3, [pc, #24]	; (8014f84 <prvSwitchTimerLists+0xc4>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	4a04      	ldr	r2, [pc, #16]	; (8014f80 <prvSwitchTimerLists+0xc0>)
 8014f70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014f72:	4a04      	ldr	r2, [pc, #16]	; (8014f84 <prvSwitchTimerLists+0xc4>)
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	6013      	str	r3, [r2, #0]
}
 8014f78:	bf00      	nop
 8014f7a:	3718      	adds	r7, #24
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	24001888 	.word	0x24001888
 8014f84:	2400188c 	.word	0x2400188c

08014f88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b082      	sub	sp, #8
 8014f8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014f8e:	f000 f989 	bl	80152a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014f92:	4b15      	ldr	r3, [pc, #84]	; (8014fe8 <prvCheckForValidListAndQueue+0x60>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d120      	bne.n	8014fdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014f9a:	4814      	ldr	r0, [pc, #80]	; (8014fec <prvCheckForValidListAndQueue+0x64>)
 8014f9c:	f7fd fe78 	bl	8012c90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014fa0:	4813      	ldr	r0, [pc, #76]	; (8014ff0 <prvCheckForValidListAndQueue+0x68>)
 8014fa2:	f7fd fe75 	bl	8012c90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014fa6:	4b13      	ldr	r3, [pc, #76]	; (8014ff4 <prvCheckForValidListAndQueue+0x6c>)
 8014fa8:	4a10      	ldr	r2, [pc, #64]	; (8014fec <prvCheckForValidListAndQueue+0x64>)
 8014faa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014fac:	4b12      	ldr	r3, [pc, #72]	; (8014ff8 <prvCheckForValidListAndQueue+0x70>)
 8014fae:	4a10      	ldr	r2, [pc, #64]	; (8014ff0 <prvCheckForValidListAndQueue+0x68>)
 8014fb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	4b11      	ldr	r3, [pc, #68]	; (8014ffc <prvCheckForValidListAndQueue+0x74>)
 8014fb8:	4a11      	ldr	r2, [pc, #68]	; (8015000 <prvCheckForValidListAndQueue+0x78>)
 8014fba:	2110      	movs	r1, #16
 8014fbc:	200a      	movs	r0, #10
 8014fbe:	f7fd ff83 	bl	8012ec8 <xQueueGenericCreateStatic>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	4a08      	ldr	r2, [pc, #32]	; (8014fe8 <prvCheckForValidListAndQueue+0x60>)
 8014fc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014fc8:	4b07      	ldr	r3, [pc, #28]	; (8014fe8 <prvCheckForValidListAndQueue+0x60>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d005      	beq.n	8014fdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014fd0:	4b05      	ldr	r3, [pc, #20]	; (8014fe8 <prvCheckForValidListAndQueue+0x60>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	490b      	ldr	r1, [pc, #44]	; (8015004 <prvCheckForValidListAndQueue+0x7c>)
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7fe fb9c 	bl	8013714 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014fdc:	f000 f992 	bl	8015304 <vPortExitCritical>
}
 8014fe0:	bf00      	nop
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	24001890 	.word	0x24001890
 8014fec:	24001860 	.word	0x24001860
 8014ff0:	24001874 	.word	0x24001874
 8014ff4:	24001888 	.word	0x24001888
 8014ff8:	2400188c 	.word	0x2400188c
 8014ffc:	2400193c 	.word	0x2400193c
 8015000:	2400189c 	.word	0x2400189c
 8015004:	080165cc 	.word	0x080165cc

08015008 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015008:	b580      	push	{r7, lr}
 801500a:	b08a      	sub	sp, #40	; 0x28
 801500c:	af00      	add	r7, sp, #0
 801500e:	60f8      	str	r0, [r7, #12]
 8015010:	60b9      	str	r1, [r7, #8]
 8015012:	607a      	str	r2, [r7, #4]
 8015014:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015016:	f06f 0301 	mvn.w	r3, #1
 801501a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015028:	4b06      	ldr	r3, [pc, #24]	; (8015044 <xTimerPendFunctionCallFromISR+0x3c>)
 801502a:	6818      	ldr	r0, [r3, #0]
 801502c:	f107 0114 	add.w	r1, r7, #20
 8015030:	2300      	movs	r3, #0
 8015032:	683a      	ldr	r2, [r7, #0]
 8015034:	f7fe f8e2 	bl	80131fc <xQueueGenericSendFromISR>
 8015038:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801503c:	4618      	mov	r0, r3
 801503e:	3728      	adds	r7, #40	; 0x28
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}
 8015044:	24001890 	.word	0x24001890

08015048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015048:	b480      	push	{r7}
 801504a:	b085      	sub	sp, #20
 801504c:	af00      	add	r7, sp, #0
 801504e:	60f8      	str	r0, [r7, #12]
 8015050:	60b9      	str	r1, [r7, #8]
 8015052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	3b04      	subs	r3, #4
 8015058:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	3b04      	subs	r3, #4
 8015066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	f023 0201 	bic.w	r2, r3, #1
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	3b04      	subs	r3, #4
 8015076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015078:	4a0c      	ldr	r2, [pc, #48]	; (80150ac <pxPortInitialiseStack+0x64>)
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	3b14      	subs	r3, #20
 8015082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015084:	687a      	ldr	r2, [r7, #4]
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	3b04      	subs	r3, #4
 801508e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f06f 0202 	mvn.w	r2, #2
 8015096:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	3b20      	subs	r3, #32
 801509c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801509e:	68fb      	ldr	r3, [r7, #12]
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3714      	adds	r7, #20
 80150a4:	46bd      	mov	sp, r7
 80150a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150aa:	4770      	bx	lr
 80150ac:	080150b1 	.word	0x080150b1

080150b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80150b0:	b480      	push	{r7}
 80150b2:	b085      	sub	sp, #20
 80150b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80150b6:	2300      	movs	r3, #0
 80150b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80150ba:	4b12      	ldr	r3, [pc, #72]	; (8015104 <prvTaskExitError+0x54>)
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150c2:	d00a      	beq.n	80150da <prvTaskExitError+0x2a>
	__asm volatile
 80150c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c8:	f383 8811 	msr	BASEPRI, r3
 80150cc:	f3bf 8f6f 	isb	sy
 80150d0:	f3bf 8f4f 	dsb	sy
 80150d4:	60fb      	str	r3, [r7, #12]
}
 80150d6:	bf00      	nop
 80150d8:	e7fe      	b.n	80150d8 <prvTaskExitError+0x28>
	__asm volatile
 80150da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150de:	f383 8811 	msr	BASEPRI, r3
 80150e2:	f3bf 8f6f 	isb	sy
 80150e6:	f3bf 8f4f 	dsb	sy
 80150ea:	60bb      	str	r3, [r7, #8]
}
 80150ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80150ee:	bf00      	nop
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d0fc      	beq.n	80150f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80150f6:	bf00      	nop
 80150f8:	bf00      	nop
 80150fa:	3714      	adds	r7, #20
 80150fc:	46bd      	mov	sp, r7
 80150fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015102:	4770      	bx	lr
 8015104:	2400009c 	.word	0x2400009c
	...

08015110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015110:	4b07      	ldr	r3, [pc, #28]	; (8015130 <pxCurrentTCBConst2>)
 8015112:	6819      	ldr	r1, [r3, #0]
 8015114:	6808      	ldr	r0, [r1, #0]
 8015116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801511a:	f380 8809 	msr	PSP, r0
 801511e:	f3bf 8f6f 	isb	sy
 8015122:	f04f 0000 	mov.w	r0, #0
 8015126:	f380 8811 	msr	BASEPRI, r0
 801512a:	4770      	bx	lr
 801512c:	f3af 8000 	nop.w

08015130 <pxCurrentTCBConst2>:
 8015130:	24001360 	.word	0x24001360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015134:	bf00      	nop
 8015136:	bf00      	nop

08015138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015138:	4808      	ldr	r0, [pc, #32]	; (801515c <prvPortStartFirstTask+0x24>)
 801513a:	6800      	ldr	r0, [r0, #0]
 801513c:	6800      	ldr	r0, [r0, #0]
 801513e:	f380 8808 	msr	MSP, r0
 8015142:	f04f 0000 	mov.w	r0, #0
 8015146:	f380 8814 	msr	CONTROL, r0
 801514a:	b662      	cpsie	i
 801514c:	b661      	cpsie	f
 801514e:	f3bf 8f4f 	dsb	sy
 8015152:	f3bf 8f6f 	isb	sy
 8015156:	df00      	svc	0
 8015158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801515a:	bf00      	nop
 801515c:	e000ed08 	.word	0xe000ed08

08015160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b086      	sub	sp, #24
 8015164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015166:	4b46      	ldr	r3, [pc, #280]	; (8015280 <xPortStartScheduler+0x120>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	4a46      	ldr	r2, [pc, #280]	; (8015284 <xPortStartScheduler+0x124>)
 801516c:	4293      	cmp	r3, r2
 801516e:	d10a      	bne.n	8015186 <xPortStartScheduler+0x26>
	__asm volatile
 8015170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015174:	f383 8811 	msr	BASEPRI, r3
 8015178:	f3bf 8f6f 	isb	sy
 801517c:	f3bf 8f4f 	dsb	sy
 8015180:	613b      	str	r3, [r7, #16]
}
 8015182:	bf00      	nop
 8015184:	e7fe      	b.n	8015184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015186:	4b3e      	ldr	r3, [pc, #248]	; (8015280 <xPortStartScheduler+0x120>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	4a3f      	ldr	r2, [pc, #252]	; (8015288 <xPortStartScheduler+0x128>)
 801518c:	4293      	cmp	r3, r2
 801518e:	d10a      	bne.n	80151a6 <xPortStartScheduler+0x46>
	__asm volatile
 8015190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015194:	f383 8811 	msr	BASEPRI, r3
 8015198:	f3bf 8f6f 	isb	sy
 801519c:	f3bf 8f4f 	dsb	sy
 80151a0:	60fb      	str	r3, [r7, #12]
}
 80151a2:	bf00      	nop
 80151a4:	e7fe      	b.n	80151a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80151a6:	4b39      	ldr	r3, [pc, #228]	; (801528c <xPortStartScheduler+0x12c>)
 80151a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	781b      	ldrb	r3, [r3, #0]
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80151b2:	697b      	ldr	r3, [r7, #20]
 80151b4:	22ff      	movs	r2, #255	; 0xff
 80151b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	781b      	ldrb	r3, [r3, #0]
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80151c0:	78fb      	ldrb	r3, [r7, #3]
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80151c8:	b2da      	uxtb	r2, r3
 80151ca:	4b31      	ldr	r3, [pc, #196]	; (8015290 <xPortStartScheduler+0x130>)
 80151cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80151ce:	4b31      	ldr	r3, [pc, #196]	; (8015294 <xPortStartScheduler+0x134>)
 80151d0:	2207      	movs	r2, #7
 80151d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80151d4:	e009      	b.n	80151ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80151d6:	4b2f      	ldr	r3, [pc, #188]	; (8015294 <xPortStartScheduler+0x134>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	3b01      	subs	r3, #1
 80151dc:	4a2d      	ldr	r2, [pc, #180]	; (8015294 <xPortStartScheduler+0x134>)
 80151de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80151e0:	78fb      	ldrb	r3, [r7, #3]
 80151e2:	b2db      	uxtb	r3, r3
 80151e4:	005b      	lsls	r3, r3, #1
 80151e6:	b2db      	uxtb	r3, r3
 80151e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80151ea:	78fb      	ldrb	r3, [r7, #3]
 80151ec:	b2db      	uxtb	r3, r3
 80151ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151f2:	2b80      	cmp	r3, #128	; 0x80
 80151f4:	d0ef      	beq.n	80151d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80151f6:	4b27      	ldr	r3, [pc, #156]	; (8015294 <xPortStartScheduler+0x134>)
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	f1c3 0307 	rsb	r3, r3, #7
 80151fe:	2b04      	cmp	r3, #4
 8015200:	d00a      	beq.n	8015218 <xPortStartScheduler+0xb8>
	__asm volatile
 8015202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015206:	f383 8811 	msr	BASEPRI, r3
 801520a:	f3bf 8f6f 	isb	sy
 801520e:	f3bf 8f4f 	dsb	sy
 8015212:	60bb      	str	r3, [r7, #8]
}
 8015214:	bf00      	nop
 8015216:	e7fe      	b.n	8015216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015218:	4b1e      	ldr	r3, [pc, #120]	; (8015294 <xPortStartScheduler+0x134>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	021b      	lsls	r3, r3, #8
 801521e:	4a1d      	ldr	r2, [pc, #116]	; (8015294 <xPortStartScheduler+0x134>)
 8015220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015222:	4b1c      	ldr	r3, [pc, #112]	; (8015294 <xPortStartScheduler+0x134>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801522a:	4a1a      	ldr	r2, [pc, #104]	; (8015294 <xPortStartScheduler+0x134>)
 801522c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	b2da      	uxtb	r2, r3
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015236:	4b18      	ldr	r3, [pc, #96]	; (8015298 <xPortStartScheduler+0x138>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	4a17      	ldr	r2, [pc, #92]	; (8015298 <xPortStartScheduler+0x138>)
 801523c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015242:	4b15      	ldr	r3, [pc, #84]	; (8015298 <xPortStartScheduler+0x138>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	4a14      	ldr	r2, [pc, #80]	; (8015298 <xPortStartScheduler+0x138>)
 8015248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801524c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801524e:	f000 f8dd 	bl	801540c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015252:	4b12      	ldr	r3, [pc, #72]	; (801529c <xPortStartScheduler+0x13c>)
 8015254:	2200      	movs	r2, #0
 8015256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015258:	f000 f8fc 	bl	8015454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801525c:	4b10      	ldr	r3, [pc, #64]	; (80152a0 <xPortStartScheduler+0x140>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	4a0f      	ldr	r2, [pc, #60]	; (80152a0 <xPortStartScheduler+0x140>)
 8015262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015268:	f7ff ff66 	bl	8015138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801526c:	f7fe ff7c 	bl	8014168 <vTaskSwitchContext>
	prvTaskExitError();
 8015270:	f7ff ff1e 	bl	80150b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015274:	2300      	movs	r3, #0
}
 8015276:	4618      	mov	r0, r3
 8015278:	3718      	adds	r7, #24
 801527a:	46bd      	mov	sp, r7
 801527c:	bd80      	pop	{r7, pc}
 801527e:	bf00      	nop
 8015280:	e000ed00 	.word	0xe000ed00
 8015284:	410fc271 	.word	0x410fc271
 8015288:	410fc270 	.word	0x410fc270
 801528c:	e000e400 	.word	0xe000e400
 8015290:	2400198c 	.word	0x2400198c
 8015294:	24001990 	.word	0x24001990
 8015298:	e000ed20 	.word	0xe000ed20
 801529c:	2400009c 	.word	0x2400009c
 80152a0:	e000ef34 	.word	0xe000ef34

080152a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80152a4:	b480      	push	{r7}
 80152a6:	b083      	sub	sp, #12
 80152a8:	af00      	add	r7, sp, #0
	__asm volatile
 80152aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ae:	f383 8811 	msr	BASEPRI, r3
 80152b2:	f3bf 8f6f 	isb	sy
 80152b6:	f3bf 8f4f 	dsb	sy
 80152ba:	607b      	str	r3, [r7, #4]
}
 80152bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80152be:	4b0f      	ldr	r3, [pc, #60]	; (80152fc <vPortEnterCritical+0x58>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	3301      	adds	r3, #1
 80152c4:	4a0d      	ldr	r2, [pc, #52]	; (80152fc <vPortEnterCritical+0x58>)
 80152c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80152c8:	4b0c      	ldr	r3, [pc, #48]	; (80152fc <vPortEnterCritical+0x58>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2b01      	cmp	r3, #1
 80152ce:	d10f      	bne.n	80152f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80152d0:	4b0b      	ldr	r3, [pc, #44]	; (8015300 <vPortEnterCritical+0x5c>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	b2db      	uxtb	r3, r3
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d00a      	beq.n	80152f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80152da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152de:	f383 8811 	msr	BASEPRI, r3
 80152e2:	f3bf 8f6f 	isb	sy
 80152e6:	f3bf 8f4f 	dsb	sy
 80152ea:	603b      	str	r3, [r7, #0]
}
 80152ec:	bf00      	nop
 80152ee:	e7fe      	b.n	80152ee <vPortEnterCritical+0x4a>
	}
}
 80152f0:	bf00      	nop
 80152f2:	370c      	adds	r7, #12
 80152f4:	46bd      	mov	sp, r7
 80152f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fa:	4770      	bx	lr
 80152fc:	2400009c 	.word	0x2400009c
 8015300:	e000ed04 	.word	0xe000ed04

08015304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015304:	b480      	push	{r7}
 8015306:	b083      	sub	sp, #12
 8015308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801530a:	4b12      	ldr	r3, [pc, #72]	; (8015354 <vPortExitCritical+0x50>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d10a      	bne.n	8015328 <vPortExitCritical+0x24>
	__asm volatile
 8015312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015316:	f383 8811 	msr	BASEPRI, r3
 801531a:	f3bf 8f6f 	isb	sy
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	607b      	str	r3, [r7, #4]
}
 8015324:	bf00      	nop
 8015326:	e7fe      	b.n	8015326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015328:	4b0a      	ldr	r3, [pc, #40]	; (8015354 <vPortExitCritical+0x50>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	3b01      	subs	r3, #1
 801532e:	4a09      	ldr	r2, [pc, #36]	; (8015354 <vPortExitCritical+0x50>)
 8015330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015332:	4b08      	ldr	r3, [pc, #32]	; (8015354 <vPortExitCritical+0x50>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d105      	bne.n	8015346 <vPortExitCritical+0x42>
 801533a:	2300      	movs	r3, #0
 801533c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	f383 8811 	msr	BASEPRI, r3
}
 8015344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015346:	bf00      	nop
 8015348:	370c      	adds	r7, #12
 801534a:	46bd      	mov	sp, r7
 801534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015350:	4770      	bx	lr
 8015352:	bf00      	nop
 8015354:	2400009c 	.word	0x2400009c
	...

08015360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015360:	f3ef 8009 	mrs	r0, PSP
 8015364:	f3bf 8f6f 	isb	sy
 8015368:	4b15      	ldr	r3, [pc, #84]	; (80153c0 <pxCurrentTCBConst>)
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	f01e 0f10 	tst.w	lr, #16
 8015370:	bf08      	it	eq
 8015372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801537a:	6010      	str	r0, [r2, #0]
 801537c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015384:	f380 8811 	msr	BASEPRI, r0
 8015388:	f3bf 8f4f 	dsb	sy
 801538c:	f3bf 8f6f 	isb	sy
 8015390:	f7fe feea 	bl	8014168 <vTaskSwitchContext>
 8015394:	f04f 0000 	mov.w	r0, #0
 8015398:	f380 8811 	msr	BASEPRI, r0
 801539c:	bc09      	pop	{r0, r3}
 801539e:	6819      	ldr	r1, [r3, #0]
 80153a0:	6808      	ldr	r0, [r1, #0]
 80153a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a6:	f01e 0f10 	tst.w	lr, #16
 80153aa:	bf08      	it	eq
 80153ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80153b0:	f380 8809 	msr	PSP, r0
 80153b4:	f3bf 8f6f 	isb	sy
 80153b8:	4770      	bx	lr
 80153ba:	bf00      	nop
 80153bc:	f3af 8000 	nop.w

080153c0 <pxCurrentTCBConst>:
 80153c0:	24001360 	.word	0x24001360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80153c4:	bf00      	nop
 80153c6:	bf00      	nop

080153c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b082      	sub	sp, #8
 80153cc:	af00      	add	r7, sp, #0
	__asm volatile
 80153ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d2:	f383 8811 	msr	BASEPRI, r3
 80153d6:	f3bf 8f6f 	isb	sy
 80153da:	f3bf 8f4f 	dsb	sy
 80153de:	607b      	str	r3, [r7, #4]
}
 80153e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80153e2:	f7fe fe07 	bl	8013ff4 <xTaskIncrementTick>
 80153e6:	4603      	mov	r3, r0
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d003      	beq.n	80153f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80153ec:	4b06      	ldr	r3, [pc, #24]	; (8015408 <xPortSysTickHandler+0x40>)
 80153ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153f2:	601a      	str	r2, [r3, #0]
 80153f4:	2300      	movs	r3, #0
 80153f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	f383 8811 	msr	BASEPRI, r3
}
 80153fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}
 8015408:	e000ed04 	.word	0xe000ed04

0801540c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801540c:	b480      	push	{r7}
 801540e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015410:	4b0b      	ldr	r3, [pc, #44]	; (8015440 <vPortSetupTimerInterrupt+0x34>)
 8015412:	2200      	movs	r2, #0
 8015414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015416:	4b0b      	ldr	r3, [pc, #44]	; (8015444 <vPortSetupTimerInterrupt+0x38>)
 8015418:	2200      	movs	r2, #0
 801541a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801541c:	4b0a      	ldr	r3, [pc, #40]	; (8015448 <vPortSetupTimerInterrupt+0x3c>)
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	4a0a      	ldr	r2, [pc, #40]	; (801544c <vPortSetupTimerInterrupt+0x40>)
 8015422:	fba2 2303 	umull	r2, r3, r2, r3
 8015426:	099b      	lsrs	r3, r3, #6
 8015428:	4a09      	ldr	r2, [pc, #36]	; (8015450 <vPortSetupTimerInterrupt+0x44>)
 801542a:	3b01      	subs	r3, #1
 801542c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801542e:	4b04      	ldr	r3, [pc, #16]	; (8015440 <vPortSetupTimerInterrupt+0x34>)
 8015430:	2207      	movs	r2, #7
 8015432:	601a      	str	r2, [r3, #0]
}
 8015434:	bf00      	nop
 8015436:	46bd      	mov	sp, r7
 8015438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543c:	4770      	bx	lr
 801543e:	bf00      	nop
 8015440:	e000e010 	.word	0xe000e010
 8015444:	e000e018 	.word	0xe000e018
 8015448:	2400008c 	.word	0x2400008c
 801544c:	10624dd3 	.word	0x10624dd3
 8015450:	e000e014 	.word	0xe000e014

08015454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015464 <vPortEnableVFP+0x10>
 8015458:	6801      	ldr	r1, [r0, #0]
 801545a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801545e:	6001      	str	r1, [r0, #0]
 8015460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015462:	bf00      	nop
 8015464:	e000ed88 	.word	0xe000ed88

08015468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015468:	b480      	push	{r7}
 801546a:	b085      	sub	sp, #20
 801546c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801546e:	f3ef 8305 	mrs	r3, IPSR
 8015472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	2b0f      	cmp	r3, #15
 8015478:	d914      	bls.n	80154a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801547a:	4a17      	ldr	r2, [pc, #92]	; (80154d8 <vPortValidateInterruptPriority+0x70>)
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	4413      	add	r3, r2
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015484:	4b15      	ldr	r3, [pc, #84]	; (80154dc <vPortValidateInterruptPriority+0x74>)
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	7afa      	ldrb	r2, [r7, #11]
 801548a:	429a      	cmp	r2, r3
 801548c:	d20a      	bcs.n	80154a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015492:	f383 8811 	msr	BASEPRI, r3
 8015496:	f3bf 8f6f 	isb	sy
 801549a:	f3bf 8f4f 	dsb	sy
 801549e:	607b      	str	r3, [r7, #4]
}
 80154a0:	bf00      	nop
 80154a2:	e7fe      	b.n	80154a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80154a4:	4b0e      	ldr	r3, [pc, #56]	; (80154e0 <vPortValidateInterruptPriority+0x78>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80154ac:	4b0d      	ldr	r3, [pc, #52]	; (80154e4 <vPortValidateInterruptPriority+0x7c>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d90a      	bls.n	80154ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80154b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b8:	f383 8811 	msr	BASEPRI, r3
 80154bc:	f3bf 8f6f 	isb	sy
 80154c0:	f3bf 8f4f 	dsb	sy
 80154c4:	603b      	str	r3, [r7, #0]
}
 80154c6:	bf00      	nop
 80154c8:	e7fe      	b.n	80154c8 <vPortValidateInterruptPriority+0x60>
	}
 80154ca:	bf00      	nop
 80154cc:	3714      	adds	r7, #20
 80154ce:	46bd      	mov	sp, r7
 80154d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d4:	4770      	bx	lr
 80154d6:	bf00      	nop
 80154d8:	e000e3f0 	.word	0xe000e3f0
 80154dc:	2400198c 	.word	0x2400198c
 80154e0:	e000ed0c 	.word	0xe000ed0c
 80154e4:	24001990 	.word	0x24001990

080154e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b08a      	sub	sp, #40	; 0x28
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80154f0:	2300      	movs	r3, #0
 80154f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80154f4:	f7fe fcc2 	bl	8013e7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80154f8:	4b5b      	ldr	r3, [pc, #364]	; (8015668 <pvPortMalloc+0x180>)
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d101      	bne.n	8015504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015500:	f000 f920 	bl	8015744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015504:	4b59      	ldr	r3, [pc, #356]	; (801566c <pvPortMalloc+0x184>)
 8015506:	681a      	ldr	r2, [r3, #0]
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	4013      	ands	r3, r2
 801550c:	2b00      	cmp	r3, #0
 801550e:	f040 8093 	bne.w	8015638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d01d      	beq.n	8015554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015518:	2208      	movs	r2, #8
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	4413      	add	r3, r2
 801551e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f003 0307 	and.w	r3, r3, #7
 8015526:	2b00      	cmp	r3, #0
 8015528:	d014      	beq.n	8015554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	f023 0307 	bic.w	r3, r3, #7
 8015530:	3308      	adds	r3, #8
 8015532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f003 0307 	and.w	r3, r3, #7
 801553a:	2b00      	cmp	r3, #0
 801553c:	d00a      	beq.n	8015554 <pvPortMalloc+0x6c>
	__asm volatile
 801553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015542:	f383 8811 	msr	BASEPRI, r3
 8015546:	f3bf 8f6f 	isb	sy
 801554a:	f3bf 8f4f 	dsb	sy
 801554e:	617b      	str	r3, [r7, #20]
}
 8015550:	bf00      	nop
 8015552:	e7fe      	b.n	8015552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d06e      	beq.n	8015638 <pvPortMalloc+0x150>
 801555a:	4b45      	ldr	r3, [pc, #276]	; (8015670 <pvPortMalloc+0x188>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	687a      	ldr	r2, [r7, #4]
 8015560:	429a      	cmp	r2, r3
 8015562:	d869      	bhi.n	8015638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015564:	4b43      	ldr	r3, [pc, #268]	; (8015674 <pvPortMalloc+0x18c>)
 8015566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015568:	4b42      	ldr	r3, [pc, #264]	; (8015674 <pvPortMalloc+0x18c>)
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801556e:	e004      	b.n	801557a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	687a      	ldr	r2, [r7, #4]
 8015580:	429a      	cmp	r2, r3
 8015582:	d903      	bls.n	801558c <pvPortMalloc+0xa4>
 8015584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d1f1      	bne.n	8015570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801558c:	4b36      	ldr	r3, [pc, #216]	; (8015668 <pvPortMalloc+0x180>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015592:	429a      	cmp	r2, r3
 8015594:	d050      	beq.n	8015638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015596:	6a3b      	ldr	r3, [r7, #32]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	2208      	movs	r2, #8
 801559c:	4413      	add	r3, r2
 801559e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80155a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a2:	681a      	ldr	r2, [r3, #0]
 80155a4:	6a3b      	ldr	r3, [r7, #32]
 80155a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80155a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155aa:	685a      	ldr	r2, [r3, #4]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	1ad2      	subs	r2, r2, r3
 80155b0:	2308      	movs	r3, #8
 80155b2:	005b      	lsls	r3, r3, #1
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d91f      	bls.n	80155f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80155b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	4413      	add	r3, r2
 80155be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80155c0:	69bb      	ldr	r3, [r7, #24]
 80155c2:	f003 0307 	and.w	r3, r3, #7
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d00a      	beq.n	80155e0 <pvPortMalloc+0xf8>
	__asm volatile
 80155ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ce:	f383 8811 	msr	BASEPRI, r3
 80155d2:	f3bf 8f6f 	isb	sy
 80155d6:	f3bf 8f4f 	dsb	sy
 80155da:	613b      	str	r3, [r7, #16]
}
 80155dc:	bf00      	nop
 80155de:	e7fe      	b.n	80155de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80155e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e2:	685a      	ldr	r2, [r3, #4]
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	1ad2      	subs	r2, r2, r3
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80155ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ee:	687a      	ldr	r2, [r7, #4]
 80155f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80155f2:	69b8      	ldr	r0, [r7, #24]
 80155f4:	f000 f908 	bl	8015808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80155f8:	4b1d      	ldr	r3, [pc, #116]	; (8015670 <pvPortMalloc+0x188>)
 80155fa:	681a      	ldr	r2, [r3, #0]
 80155fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fe:	685b      	ldr	r3, [r3, #4]
 8015600:	1ad3      	subs	r3, r2, r3
 8015602:	4a1b      	ldr	r2, [pc, #108]	; (8015670 <pvPortMalloc+0x188>)
 8015604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015606:	4b1a      	ldr	r3, [pc, #104]	; (8015670 <pvPortMalloc+0x188>)
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	4b1b      	ldr	r3, [pc, #108]	; (8015678 <pvPortMalloc+0x190>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	429a      	cmp	r2, r3
 8015610:	d203      	bcs.n	801561a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015612:	4b17      	ldr	r3, [pc, #92]	; (8015670 <pvPortMalloc+0x188>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4a18      	ldr	r2, [pc, #96]	; (8015678 <pvPortMalloc+0x190>)
 8015618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801561c:	685a      	ldr	r2, [r3, #4]
 801561e:	4b13      	ldr	r3, [pc, #76]	; (801566c <pvPortMalloc+0x184>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	431a      	orrs	r2, r3
 8015624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801562a:	2200      	movs	r2, #0
 801562c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801562e:	4b13      	ldr	r3, [pc, #76]	; (801567c <pvPortMalloc+0x194>)
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	3301      	adds	r3, #1
 8015634:	4a11      	ldr	r2, [pc, #68]	; (801567c <pvPortMalloc+0x194>)
 8015636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015638:	f7fe fc2e 	bl	8013e98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	f003 0307 	and.w	r3, r3, #7
 8015642:	2b00      	cmp	r3, #0
 8015644:	d00a      	beq.n	801565c <pvPortMalloc+0x174>
	__asm volatile
 8015646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801564a:	f383 8811 	msr	BASEPRI, r3
 801564e:	f3bf 8f6f 	isb	sy
 8015652:	f3bf 8f4f 	dsb	sy
 8015656:	60fb      	str	r3, [r7, #12]
}
 8015658:	bf00      	nop
 801565a:	e7fe      	b.n	801565a <pvPortMalloc+0x172>
	return pvReturn;
 801565c:	69fb      	ldr	r3, [r7, #28]
}
 801565e:	4618      	mov	r0, r3
 8015660:	3728      	adds	r7, #40	; 0x28
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	2400559c 	.word	0x2400559c
 801566c:	240055b0 	.word	0x240055b0
 8015670:	240055a0 	.word	0x240055a0
 8015674:	24005594 	.word	0x24005594
 8015678:	240055a4 	.word	0x240055a4
 801567c:	240055a8 	.word	0x240055a8

08015680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b086      	sub	sp, #24
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d04d      	beq.n	801572e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015692:	2308      	movs	r3, #8
 8015694:	425b      	negs	r3, r3
 8015696:	697a      	ldr	r2, [r7, #20]
 8015698:	4413      	add	r3, r2
 801569a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	685a      	ldr	r2, [r3, #4]
 80156a4:	4b24      	ldr	r3, [pc, #144]	; (8015738 <vPortFree+0xb8>)
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	4013      	ands	r3, r2
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d10a      	bne.n	80156c4 <vPortFree+0x44>
	__asm volatile
 80156ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b2:	f383 8811 	msr	BASEPRI, r3
 80156b6:	f3bf 8f6f 	isb	sy
 80156ba:	f3bf 8f4f 	dsb	sy
 80156be:	60fb      	str	r3, [r7, #12]
}
 80156c0:	bf00      	nop
 80156c2:	e7fe      	b.n	80156c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d00a      	beq.n	80156e2 <vPortFree+0x62>
	__asm volatile
 80156cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156d0:	f383 8811 	msr	BASEPRI, r3
 80156d4:	f3bf 8f6f 	isb	sy
 80156d8:	f3bf 8f4f 	dsb	sy
 80156dc:	60bb      	str	r3, [r7, #8]
}
 80156de:	bf00      	nop
 80156e0:	e7fe      	b.n	80156e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	685a      	ldr	r2, [r3, #4]
 80156e6:	4b14      	ldr	r3, [pc, #80]	; (8015738 <vPortFree+0xb8>)
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	4013      	ands	r3, r2
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d01e      	beq.n	801572e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d11a      	bne.n	801572e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	685a      	ldr	r2, [r3, #4]
 80156fc:	4b0e      	ldr	r3, [pc, #56]	; (8015738 <vPortFree+0xb8>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	43db      	mvns	r3, r3
 8015702:	401a      	ands	r2, r3
 8015704:	693b      	ldr	r3, [r7, #16]
 8015706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015708:	f7fe fbb8 	bl	8013e7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	685a      	ldr	r2, [r3, #4]
 8015710:	4b0a      	ldr	r3, [pc, #40]	; (801573c <vPortFree+0xbc>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	4413      	add	r3, r2
 8015716:	4a09      	ldr	r2, [pc, #36]	; (801573c <vPortFree+0xbc>)
 8015718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801571a:	6938      	ldr	r0, [r7, #16]
 801571c:	f000 f874 	bl	8015808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015720:	4b07      	ldr	r3, [pc, #28]	; (8015740 <vPortFree+0xc0>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	3301      	adds	r3, #1
 8015726:	4a06      	ldr	r2, [pc, #24]	; (8015740 <vPortFree+0xc0>)
 8015728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801572a:	f7fe fbb5 	bl	8013e98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801572e:	bf00      	nop
 8015730:	3718      	adds	r7, #24
 8015732:	46bd      	mov	sp, r7
 8015734:	bd80      	pop	{r7, pc}
 8015736:	bf00      	nop
 8015738:	240055b0 	.word	0x240055b0
 801573c:	240055a0 	.word	0x240055a0
 8015740:	240055ac 	.word	0x240055ac

08015744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015744:	b480      	push	{r7}
 8015746:	b085      	sub	sp, #20
 8015748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801574a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801574e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015750:	4b27      	ldr	r3, [pc, #156]	; (80157f0 <prvHeapInit+0xac>)
 8015752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	f003 0307 	and.w	r3, r3, #7
 801575a:	2b00      	cmp	r3, #0
 801575c:	d00c      	beq.n	8015778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	3307      	adds	r3, #7
 8015762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	f023 0307 	bic.w	r3, r3, #7
 801576a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801576c:	68ba      	ldr	r2, [r7, #8]
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	1ad3      	subs	r3, r2, r3
 8015772:	4a1f      	ldr	r2, [pc, #124]	; (80157f0 <prvHeapInit+0xac>)
 8015774:	4413      	add	r3, r2
 8015776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801577c:	4a1d      	ldr	r2, [pc, #116]	; (80157f4 <prvHeapInit+0xb0>)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015782:	4b1c      	ldr	r3, [pc, #112]	; (80157f4 <prvHeapInit+0xb0>)
 8015784:	2200      	movs	r2, #0
 8015786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	68ba      	ldr	r2, [r7, #8]
 801578c:	4413      	add	r3, r2
 801578e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015790:	2208      	movs	r2, #8
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	1a9b      	subs	r3, r3, r2
 8015796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	f023 0307 	bic.w	r3, r3, #7
 801579e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	4a15      	ldr	r2, [pc, #84]	; (80157f8 <prvHeapInit+0xb4>)
 80157a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80157a6:	4b14      	ldr	r3, [pc, #80]	; (80157f8 <prvHeapInit+0xb4>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	2200      	movs	r2, #0
 80157ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80157ae:	4b12      	ldr	r3, [pc, #72]	; (80157f8 <prvHeapInit+0xb4>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2200      	movs	r2, #0
 80157b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	68fa      	ldr	r2, [r7, #12]
 80157be:	1ad2      	subs	r2, r2, r3
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80157c4:	4b0c      	ldr	r3, [pc, #48]	; (80157f8 <prvHeapInit+0xb4>)
 80157c6:	681a      	ldr	r2, [r3, #0]
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	4a0a      	ldr	r2, [pc, #40]	; (80157fc <prvHeapInit+0xb8>)
 80157d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	4a09      	ldr	r2, [pc, #36]	; (8015800 <prvHeapInit+0xbc>)
 80157da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80157dc:	4b09      	ldr	r3, [pc, #36]	; (8015804 <prvHeapInit+0xc0>)
 80157de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80157e2:	601a      	str	r2, [r3, #0]
}
 80157e4:	bf00      	nop
 80157e6:	3714      	adds	r7, #20
 80157e8:	46bd      	mov	sp, r7
 80157ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ee:	4770      	bx	lr
 80157f0:	24001994 	.word	0x24001994
 80157f4:	24005594 	.word	0x24005594
 80157f8:	2400559c 	.word	0x2400559c
 80157fc:	240055a4 	.word	0x240055a4
 8015800:	240055a0 	.word	0x240055a0
 8015804:	240055b0 	.word	0x240055b0

08015808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015808:	b480      	push	{r7}
 801580a:	b085      	sub	sp, #20
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015810:	4b28      	ldr	r3, [pc, #160]	; (80158b4 <prvInsertBlockIntoFreeList+0xac>)
 8015812:	60fb      	str	r3, [r7, #12]
 8015814:	e002      	b.n	801581c <prvInsertBlockIntoFreeList+0x14>
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	60fb      	str	r3, [r7, #12]
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	687a      	ldr	r2, [r7, #4]
 8015822:	429a      	cmp	r2, r3
 8015824:	d8f7      	bhi.n	8015816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	68ba      	ldr	r2, [r7, #8]
 8015830:	4413      	add	r3, r2
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	429a      	cmp	r2, r3
 8015836:	d108      	bne.n	801584a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	685a      	ldr	r2, [r3, #4]
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	441a      	add	r2, r3
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	685b      	ldr	r3, [r3, #4]
 8015852:	68ba      	ldr	r2, [r7, #8]
 8015854:	441a      	add	r2, r3
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	429a      	cmp	r2, r3
 801585c:	d118      	bne.n	8015890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	4b15      	ldr	r3, [pc, #84]	; (80158b8 <prvInsertBlockIntoFreeList+0xb0>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	429a      	cmp	r2, r3
 8015868:	d00d      	beq.n	8015886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	685a      	ldr	r2, [r3, #4]
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	685b      	ldr	r3, [r3, #4]
 8015874:	441a      	add	r2, r3
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	681a      	ldr	r2, [r3, #0]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	601a      	str	r2, [r3, #0]
 8015884:	e008      	b.n	8015898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015886:	4b0c      	ldr	r3, [pc, #48]	; (80158b8 <prvInsertBlockIntoFreeList+0xb0>)
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	601a      	str	r2, [r3, #0]
 801588e:	e003      	b.n	8015898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	681a      	ldr	r2, [r3, #0]
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015898:	68fa      	ldr	r2, [r7, #12]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	429a      	cmp	r2, r3
 801589e:	d002      	beq.n	80158a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	687a      	ldr	r2, [r7, #4]
 80158a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80158a6:	bf00      	nop
 80158a8:	3714      	adds	r7, #20
 80158aa:	46bd      	mov	sp, r7
 80158ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b0:	4770      	bx	lr
 80158b2:	bf00      	nop
 80158b4:	24005594 	.word	0x24005594
 80158b8:	2400559c 	.word	0x2400559c

080158bc <__errno>:
 80158bc:	4b01      	ldr	r3, [pc, #4]	; (80158c4 <__errno+0x8>)
 80158be:	6818      	ldr	r0, [r3, #0]
 80158c0:	4770      	bx	lr
 80158c2:	bf00      	nop
 80158c4:	240000a0 	.word	0x240000a0

080158c8 <__libc_init_array>:
 80158c8:	b570      	push	{r4, r5, r6, lr}
 80158ca:	4d0d      	ldr	r5, [pc, #52]	; (8015900 <__libc_init_array+0x38>)
 80158cc:	4c0d      	ldr	r4, [pc, #52]	; (8015904 <__libc_init_array+0x3c>)
 80158ce:	1b64      	subs	r4, r4, r5
 80158d0:	10a4      	asrs	r4, r4, #2
 80158d2:	2600      	movs	r6, #0
 80158d4:	42a6      	cmp	r6, r4
 80158d6:	d109      	bne.n	80158ec <__libc_init_array+0x24>
 80158d8:	4d0b      	ldr	r5, [pc, #44]	; (8015908 <__libc_init_array+0x40>)
 80158da:	4c0c      	ldr	r4, [pc, #48]	; (801590c <__libc_init_array+0x44>)
 80158dc:	f000 fd3c 	bl	8016358 <_init>
 80158e0:	1b64      	subs	r4, r4, r5
 80158e2:	10a4      	asrs	r4, r4, #2
 80158e4:	2600      	movs	r6, #0
 80158e6:	42a6      	cmp	r6, r4
 80158e8:	d105      	bne.n	80158f6 <__libc_init_array+0x2e>
 80158ea:	bd70      	pop	{r4, r5, r6, pc}
 80158ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80158f0:	4798      	blx	r3
 80158f2:	3601      	adds	r6, #1
 80158f4:	e7ee      	b.n	80158d4 <__libc_init_array+0xc>
 80158f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80158fa:	4798      	blx	r3
 80158fc:	3601      	adds	r6, #1
 80158fe:	e7f2      	b.n	80158e6 <__libc_init_array+0x1e>
 8015900:	08016758 	.word	0x08016758
 8015904:	08016758 	.word	0x08016758
 8015908:	08016758 	.word	0x08016758
 801590c:	0801675c 	.word	0x0801675c

08015910 <malloc>:
 8015910:	4b02      	ldr	r3, [pc, #8]	; (801591c <malloc+0xc>)
 8015912:	4601      	mov	r1, r0
 8015914:	6818      	ldr	r0, [r3, #0]
 8015916:	f000 b88d 	b.w	8015a34 <_malloc_r>
 801591a:	bf00      	nop
 801591c:	240000a0 	.word	0x240000a0

08015920 <free>:
 8015920:	4b02      	ldr	r3, [pc, #8]	; (801592c <free+0xc>)
 8015922:	4601      	mov	r1, r0
 8015924:	6818      	ldr	r0, [r3, #0]
 8015926:	f000 b819 	b.w	801595c <_free_r>
 801592a:	bf00      	nop
 801592c:	240000a0 	.word	0x240000a0

08015930 <memcpy>:
 8015930:	440a      	add	r2, r1
 8015932:	4291      	cmp	r1, r2
 8015934:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015938:	d100      	bne.n	801593c <memcpy+0xc>
 801593a:	4770      	bx	lr
 801593c:	b510      	push	{r4, lr}
 801593e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015946:	4291      	cmp	r1, r2
 8015948:	d1f9      	bne.n	801593e <memcpy+0xe>
 801594a:	bd10      	pop	{r4, pc}

0801594c <memset>:
 801594c:	4402      	add	r2, r0
 801594e:	4603      	mov	r3, r0
 8015950:	4293      	cmp	r3, r2
 8015952:	d100      	bne.n	8015956 <memset+0xa>
 8015954:	4770      	bx	lr
 8015956:	f803 1b01 	strb.w	r1, [r3], #1
 801595a:	e7f9      	b.n	8015950 <memset+0x4>

0801595c <_free_r>:
 801595c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801595e:	2900      	cmp	r1, #0
 8015960:	d044      	beq.n	80159ec <_free_r+0x90>
 8015962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015966:	9001      	str	r0, [sp, #4]
 8015968:	2b00      	cmp	r3, #0
 801596a:	f1a1 0404 	sub.w	r4, r1, #4
 801596e:	bfb8      	it	lt
 8015970:	18e4      	addlt	r4, r4, r3
 8015972:	f000 fc39 	bl	80161e8 <__malloc_lock>
 8015976:	4a1e      	ldr	r2, [pc, #120]	; (80159f0 <_free_r+0x94>)
 8015978:	9801      	ldr	r0, [sp, #4]
 801597a:	6813      	ldr	r3, [r2, #0]
 801597c:	b933      	cbnz	r3, 801598c <_free_r+0x30>
 801597e:	6063      	str	r3, [r4, #4]
 8015980:	6014      	str	r4, [r2, #0]
 8015982:	b003      	add	sp, #12
 8015984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015988:	f000 bc34 	b.w	80161f4 <__malloc_unlock>
 801598c:	42a3      	cmp	r3, r4
 801598e:	d908      	bls.n	80159a2 <_free_r+0x46>
 8015990:	6825      	ldr	r5, [r4, #0]
 8015992:	1961      	adds	r1, r4, r5
 8015994:	428b      	cmp	r3, r1
 8015996:	bf01      	itttt	eq
 8015998:	6819      	ldreq	r1, [r3, #0]
 801599a:	685b      	ldreq	r3, [r3, #4]
 801599c:	1949      	addeq	r1, r1, r5
 801599e:	6021      	streq	r1, [r4, #0]
 80159a0:	e7ed      	b.n	801597e <_free_r+0x22>
 80159a2:	461a      	mov	r2, r3
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	b10b      	cbz	r3, 80159ac <_free_r+0x50>
 80159a8:	42a3      	cmp	r3, r4
 80159aa:	d9fa      	bls.n	80159a2 <_free_r+0x46>
 80159ac:	6811      	ldr	r1, [r2, #0]
 80159ae:	1855      	adds	r5, r2, r1
 80159b0:	42a5      	cmp	r5, r4
 80159b2:	d10b      	bne.n	80159cc <_free_r+0x70>
 80159b4:	6824      	ldr	r4, [r4, #0]
 80159b6:	4421      	add	r1, r4
 80159b8:	1854      	adds	r4, r2, r1
 80159ba:	42a3      	cmp	r3, r4
 80159bc:	6011      	str	r1, [r2, #0]
 80159be:	d1e0      	bne.n	8015982 <_free_r+0x26>
 80159c0:	681c      	ldr	r4, [r3, #0]
 80159c2:	685b      	ldr	r3, [r3, #4]
 80159c4:	6053      	str	r3, [r2, #4]
 80159c6:	4421      	add	r1, r4
 80159c8:	6011      	str	r1, [r2, #0]
 80159ca:	e7da      	b.n	8015982 <_free_r+0x26>
 80159cc:	d902      	bls.n	80159d4 <_free_r+0x78>
 80159ce:	230c      	movs	r3, #12
 80159d0:	6003      	str	r3, [r0, #0]
 80159d2:	e7d6      	b.n	8015982 <_free_r+0x26>
 80159d4:	6825      	ldr	r5, [r4, #0]
 80159d6:	1961      	adds	r1, r4, r5
 80159d8:	428b      	cmp	r3, r1
 80159da:	bf04      	itt	eq
 80159dc:	6819      	ldreq	r1, [r3, #0]
 80159de:	685b      	ldreq	r3, [r3, #4]
 80159e0:	6063      	str	r3, [r4, #4]
 80159e2:	bf04      	itt	eq
 80159e4:	1949      	addeq	r1, r1, r5
 80159e6:	6021      	streq	r1, [r4, #0]
 80159e8:	6054      	str	r4, [r2, #4]
 80159ea:	e7ca      	b.n	8015982 <_free_r+0x26>
 80159ec:	b003      	add	sp, #12
 80159ee:	bd30      	pop	{r4, r5, pc}
 80159f0:	240055b4 	.word	0x240055b4

080159f4 <sbrk_aligned>:
 80159f4:	b570      	push	{r4, r5, r6, lr}
 80159f6:	4e0e      	ldr	r6, [pc, #56]	; (8015a30 <sbrk_aligned+0x3c>)
 80159f8:	460c      	mov	r4, r1
 80159fa:	6831      	ldr	r1, [r6, #0]
 80159fc:	4605      	mov	r5, r0
 80159fe:	b911      	cbnz	r1, 8015a06 <sbrk_aligned+0x12>
 8015a00:	f000 f902 	bl	8015c08 <_sbrk_r>
 8015a04:	6030      	str	r0, [r6, #0]
 8015a06:	4621      	mov	r1, r4
 8015a08:	4628      	mov	r0, r5
 8015a0a:	f000 f8fd 	bl	8015c08 <_sbrk_r>
 8015a0e:	1c43      	adds	r3, r0, #1
 8015a10:	d00a      	beq.n	8015a28 <sbrk_aligned+0x34>
 8015a12:	1cc4      	adds	r4, r0, #3
 8015a14:	f024 0403 	bic.w	r4, r4, #3
 8015a18:	42a0      	cmp	r0, r4
 8015a1a:	d007      	beq.n	8015a2c <sbrk_aligned+0x38>
 8015a1c:	1a21      	subs	r1, r4, r0
 8015a1e:	4628      	mov	r0, r5
 8015a20:	f000 f8f2 	bl	8015c08 <_sbrk_r>
 8015a24:	3001      	adds	r0, #1
 8015a26:	d101      	bne.n	8015a2c <sbrk_aligned+0x38>
 8015a28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}
 8015a30:	240055b8 	.word	0x240055b8

08015a34 <_malloc_r>:
 8015a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a38:	1ccd      	adds	r5, r1, #3
 8015a3a:	f025 0503 	bic.w	r5, r5, #3
 8015a3e:	3508      	adds	r5, #8
 8015a40:	2d0c      	cmp	r5, #12
 8015a42:	bf38      	it	cc
 8015a44:	250c      	movcc	r5, #12
 8015a46:	2d00      	cmp	r5, #0
 8015a48:	4607      	mov	r7, r0
 8015a4a:	db01      	blt.n	8015a50 <_malloc_r+0x1c>
 8015a4c:	42a9      	cmp	r1, r5
 8015a4e:	d905      	bls.n	8015a5c <_malloc_r+0x28>
 8015a50:	230c      	movs	r3, #12
 8015a52:	603b      	str	r3, [r7, #0]
 8015a54:	2600      	movs	r6, #0
 8015a56:	4630      	mov	r0, r6
 8015a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a5c:	4e2e      	ldr	r6, [pc, #184]	; (8015b18 <_malloc_r+0xe4>)
 8015a5e:	f000 fbc3 	bl	80161e8 <__malloc_lock>
 8015a62:	6833      	ldr	r3, [r6, #0]
 8015a64:	461c      	mov	r4, r3
 8015a66:	bb34      	cbnz	r4, 8015ab6 <_malloc_r+0x82>
 8015a68:	4629      	mov	r1, r5
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	f7ff ffc2 	bl	80159f4 <sbrk_aligned>
 8015a70:	1c43      	adds	r3, r0, #1
 8015a72:	4604      	mov	r4, r0
 8015a74:	d14d      	bne.n	8015b12 <_malloc_r+0xde>
 8015a76:	6834      	ldr	r4, [r6, #0]
 8015a78:	4626      	mov	r6, r4
 8015a7a:	2e00      	cmp	r6, #0
 8015a7c:	d140      	bne.n	8015b00 <_malloc_r+0xcc>
 8015a7e:	6823      	ldr	r3, [r4, #0]
 8015a80:	4631      	mov	r1, r6
 8015a82:	4638      	mov	r0, r7
 8015a84:	eb04 0803 	add.w	r8, r4, r3
 8015a88:	f000 f8be 	bl	8015c08 <_sbrk_r>
 8015a8c:	4580      	cmp	r8, r0
 8015a8e:	d13a      	bne.n	8015b06 <_malloc_r+0xd2>
 8015a90:	6821      	ldr	r1, [r4, #0]
 8015a92:	3503      	adds	r5, #3
 8015a94:	1a6d      	subs	r5, r5, r1
 8015a96:	f025 0503 	bic.w	r5, r5, #3
 8015a9a:	3508      	adds	r5, #8
 8015a9c:	2d0c      	cmp	r5, #12
 8015a9e:	bf38      	it	cc
 8015aa0:	250c      	movcc	r5, #12
 8015aa2:	4629      	mov	r1, r5
 8015aa4:	4638      	mov	r0, r7
 8015aa6:	f7ff ffa5 	bl	80159f4 <sbrk_aligned>
 8015aaa:	3001      	adds	r0, #1
 8015aac:	d02b      	beq.n	8015b06 <_malloc_r+0xd2>
 8015aae:	6823      	ldr	r3, [r4, #0]
 8015ab0:	442b      	add	r3, r5
 8015ab2:	6023      	str	r3, [r4, #0]
 8015ab4:	e00e      	b.n	8015ad4 <_malloc_r+0xa0>
 8015ab6:	6822      	ldr	r2, [r4, #0]
 8015ab8:	1b52      	subs	r2, r2, r5
 8015aba:	d41e      	bmi.n	8015afa <_malloc_r+0xc6>
 8015abc:	2a0b      	cmp	r2, #11
 8015abe:	d916      	bls.n	8015aee <_malloc_r+0xba>
 8015ac0:	1961      	adds	r1, r4, r5
 8015ac2:	42a3      	cmp	r3, r4
 8015ac4:	6025      	str	r5, [r4, #0]
 8015ac6:	bf18      	it	ne
 8015ac8:	6059      	strne	r1, [r3, #4]
 8015aca:	6863      	ldr	r3, [r4, #4]
 8015acc:	bf08      	it	eq
 8015ace:	6031      	streq	r1, [r6, #0]
 8015ad0:	5162      	str	r2, [r4, r5]
 8015ad2:	604b      	str	r3, [r1, #4]
 8015ad4:	4638      	mov	r0, r7
 8015ad6:	f104 060b 	add.w	r6, r4, #11
 8015ada:	f000 fb8b 	bl	80161f4 <__malloc_unlock>
 8015ade:	f026 0607 	bic.w	r6, r6, #7
 8015ae2:	1d23      	adds	r3, r4, #4
 8015ae4:	1af2      	subs	r2, r6, r3
 8015ae6:	d0b6      	beq.n	8015a56 <_malloc_r+0x22>
 8015ae8:	1b9b      	subs	r3, r3, r6
 8015aea:	50a3      	str	r3, [r4, r2]
 8015aec:	e7b3      	b.n	8015a56 <_malloc_r+0x22>
 8015aee:	6862      	ldr	r2, [r4, #4]
 8015af0:	42a3      	cmp	r3, r4
 8015af2:	bf0c      	ite	eq
 8015af4:	6032      	streq	r2, [r6, #0]
 8015af6:	605a      	strne	r2, [r3, #4]
 8015af8:	e7ec      	b.n	8015ad4 <_malloc_r+0xa0>
 8015afa:	4623      	mov	r3, r4
 8015afc:	6864      	ldr	r4, [r4, #4]
 8015afe:	e7b2      	b.n	8015a66 <_malloc_r+0x32>
 8015b00:	4634      	mov	r4, r6
 8015b02:	6876      	ldr	r6, [r6, #4]
 8015b04:	e7b9      	b.n	8015a7a <_malloc_r+0x46>
 8015b06:	230c      	movs	r3, #12
 8015b08:	603b      	str	r3, [r7, #0]
 8015b0a:	4638      	mov	r0, r7
 8015b0c:	f000 fb72 	bl	80161f4 <__malloc_unlock>
 8015b10:	e7a1      	b.n	8015a56 <_malloc_r+0x22>
 8015b12:	6025      	str	r5, [r4, #0]
 8015b14:	e7de      	b.n	8015ad4 <_malloc_r+0xa0>
 8015b16:	bf00      	nop
 8015b18:	240055b4 	.word	0x240055b4

08015b1c <_puts_r>:
 8015b1c:	b570      	push	{r4, r5, r6, lr}
 8015b1e:	460e      	mov	r6, r1
 8015b20:	4605      	mov	r5, r0
 8015b22:	b118      	cbz	r0, 8015b2c <_puts_r+0x10>
 8015b24:	6983      	ldr	r3, [r0, #24]
 8015b26:	b90b      	cbnz	r3, 8015b2c <_puts_r+0x10>
 8015b28:	f000 fa58 	bl	8015fdc <__sinit>
 8015b2c:	69ab      	ldr	r3, [r5, #24]
 8015b2e:	68ac      	ldr	r4, [r5, #8]
 8015b30:	b913      	cbnz	r3, 8015b38 <_puts_r+0x1c>
 8015b32:	4628      	mov	r0, r5
 8015b34:	f000 fa52 	bl	8015fdc <__sinit>
 8015b38:	4b2c      	ldr	r3, [pc, #176]	; (8015bec <_puts_r+0xd0>)
 8015b3a:	429c      	cmp	r4, r3
 8015b3c:	d120      	bne.n	8015b80 <_puts_r+0x64>
 8015b3e:	686c      	ldr	r4, [r5, #4]
 8015b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b42:	07db      	lsls	r3, r3, #31
 8015b44:	d405      	bmi.n	8015b52 <_puts_r+0x36>
 8015b46:	89a3      	ldrh	r3, [r4, #12]
 8015b48:	0598      	lsls	r0, r3, #22
 8015b4a:	d402      	bmi.n	8015b52 <_puts_r+0x36>
 8015b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b4e:	f000 fae3 	bl	8016118 <__retarget_lock_acquire_recursive>
 8015b52:	89a3      	ldrh	r3, [r4, #12]
 8015b54:	0719      	lsls	r1, r3, #28
 8015b56:	d51d      	bpl.n	8015b94 <_puts_r+0x78>
 8015b58:	6923      	ldr	r3, [r4, #16]
 8015b5a:	b1db      	cbz	r3, 8015b94 <_puts_r+0x78>
 8015b5c:	3e01      	subs	r6, #1
 8015b5e:	68a3      	ldr	r3, [r4, #8]
 8015b60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b64:	3b01      	subs	r3, #1
 8015b66:	60a3      	str	r3, [r4, #8]
 8015b68:	bb39      	cbnz	r1, 8015bba <_puts_r+0x9e>
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	da38      	bge.n	8015be0 <_puts_r+0xc4>
 8015b6e:	4622      	mov	r2, r4
 8015b70:	210a      	movs	r1, #10
 8015b72:	4628      	mov	r0, r5
 8015b74:	f000 f858 	bl	8015c28 <__swbuf_r>
 8015b78:	3001      	adds	r0, #1
 8015b7a:	d011      	beq.n	8015ba0 <_puts_r+0x84>
 8015b7c:	250a      	movs	r5, #10
 8015b7e:	e011      	b.n	8015ba4 <_puts_r+0x88>
 8015b80:	4b1b      	ldr	r3, [pc, #108]	; (8015bf0 <_puts_r+0xd4>)
 8015b82:	429c      	cmp	r4, r3
 8015b84:	d101      	bne.n	8015b8a <_puts_r+0x6e>
 8015b86:	68ac      	ldr	r4, [r5, #8]
 8015b88:	e7da      	b.n	8015b40 <_puts_r+0x24>
 8015b8a:	4b1a      	ldr	r3, [pc, #104]	; (8015bf4 <_puts_r+0xd8>)
 8015b8c:	429c      	cmp	r4, r3
 8015b8e:	bf08      	it	eq
 8015b90:	68ec      	ldreq	r4, [r5, #12]
 8015b92:	e7d5      	b.n	8015b40 <_puts_r+0x24>
 8015b94:	4621      	mov	r1, r4
 8015b96:	4628      	mov	r0, r5
 8015b98:	f000 f898 	bl	8015ccc <__swsetup_r>
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	d0dd      	beq.n	8015b5c <_puts_r+0x40>
 8015ba0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ba6:	07da      	lsls	r2, r3, #31
 8015ba8:	d405      	bmi.n	8015bb6 <_puts_r+0x9a>
 8015baa:	89a3      	ldrh	r3, [r4, #12]
 8015bac:	059b      	lsls	r3, r3, #22
 8015bae:	d402      	bmi.n	8015bb6 <_puts_r+0x9a>
 8015bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bb2:	f000 fab2 	bl	801611a <__retarget_lock_release_recursive>
 8015bb6:	4628      	mov	r0, r5
 8015bb8:	bd70      	pop	{r4, r5, r6, pc}
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	da04      	bge.n	8015bc8 <_puts_r+0xac>
 8015bbe:	69a2      	ldr	r2, [r4, #24]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	dc06      	bgt.n	8015bd2 <_puts_r+0xb6>
 8015bc4:	290a      	cmp	r1, #10
 8015bc6:	d004      	beq.n	8015bd2 <_puts_r+0xb6>
 8015bc8:	6823      	ldr	r3, [r4, #0]
 8015bca:	1c5a      	adds	r2, r3, #1
 8015bcc:	6022      	str	r2, [r4, #0]
 8015bce:	7019      	strb	r1, [r3, #0]
 8015bd0:	e7c5      	b.n	8015b5e <_puts_r+0x42>
 8015bd2:	4622      	mov	r2, r4
 8015bd4:	4628      	mov	r0, r5
 8015bd6:	f000 f827 	bl	8015c28 <__swbuf_r>
 8015bda:	3001      	adds	r0, #1
 8015bdc:	d1bf      	bne.n	8015b5e <_puts_r+0x42>
 8015bde:	e7df      	b.n	8015ba0 <_puts_r+0x84>
 8015be0:	6823      	ldr	r3, [r4, #0]
 8015be2:	250a      	movs	r5, #10
 8015be4:	1c5a      	adds	r2, r3, #1
 8015be6:	6022      	str	r2, [r4, #0]
 8015be8:	701d      	strb	r5, [r3, #0]
 8015bea:	e7db      	b.n	8015ba4 <_puts_r+0x88>
 8015bec:	08016710 	.word	0x08016710
 8015bf0:	08016730 	.word	0x08016730
 8015bf4:	080166f0 	.word	0x080166f0

08015bf8 <puts>:
 8015bf8:	4b02      	ldr	r3, [pc, #8]	; (8015c04 <puts+0xc>)
 8015bfa:	4601      	mov	r1, r0
 8015bfc:	6818      	ldr	r0, [r3, #0]
 8015bfe:	f7ff bf8d 	b.w	8015b1c <_puts_r>
 8015c02:	bf00      	nop
 8015c04:	240000a0 	.word	0x240000a0

08015c08 <_sbrk_r>:
 8015c08:	b538      	push	{r3, r4, r5, lr}
 8015c0a:	4d06      	ldr	r5, [pc, #24]	; (8015c24 <_sbrk_r+0x1c>)
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	4604      	mov	r4, r0
 8015c10:	4608      	mov	r0, r1
 8015c12:	602b      	str	r3, [r5, #0]
 8015c14:	f7ed fc94 	bl	8003540 <_sbrk>
 8015c18:	1c43      	adds	r3, r0, #1
 8015c1a:	d102      	bne.n	8015c22 <_sbrk_r+0x1a>
 8015c1c:	682b      	ldr	r3, [r5, #0]
 8015c1e:	b103      	cbz	r3, 8015c22 <_sbrk_r+0x1a>
 8015c20:	6023      	str	r3, [r4, #0]
 8015c22:	bd38      	pop	{r3, r4, r5, pc}
 8015c24:	240055c0 	.word	0x240055c0

08015c28 <__swbuf_r>:
 8015c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c2a:	460e      	mov	r6, r1
 8015c2c:	4614      	mov	r4, r2
 8015c2e:	4605      	mov	r5, r0
 8015c30:	b118      	cbz	r0, 8015c3a <__swbuf_r+0x12>
 8015c32:	6983      	ldr	r3, [r0, #24]
 8015c34:	b90b      	cbnz	r3, 8015c3a <__swbuf_r+0x12>
 8015c36:	f000 f9d1 	bl	8015fdc <__sinit>
 8015c3a:	4b21      	ldr	r3, [pc, #132]	; (8015cc0 <__swbuf_r+0x98>)
 8015c3c:	429c      	cmp	r4, r3
 8015c3e:	d12b      	bne.n	8015c98 <__swbuf_r+0x70>
 8015c40:	686c      	ldr	r4, [r5, #4]
 8015c42:	69a3      	ldr	r3, [r4, #24]
 8015c44:	60a3      	str	r3, [r4, #8]
 8015c46:	89a3      	ldrh	r3, [r4, #12]
 8015c48:	071a      	lsls	r2, r3, #28
 8015c4a:	d52f      	bpl.n	8015cac <__swbuf_r+0x84>
 8015c4c:	6923      	ldr	r3, [r4, #16]
 8015c4e:	b36b      	cbz	r3, 8015cac <__swbuf_r+0x84>
 8015c50:	6923      	ldr	r3, [r4, #16]
 8015c52:	6820      	ldr	r0, [r4, #0]
 8015c54:	1ac0      	subs	r0, r0, r3
 8015c56:	6963      	ldr	r3, [r4, #20]
 8015c58:	b2f6      	uxtb	r6, r6
 8015c5a:	4283      	cmp	r3, r0
 8015c5c:	4637      	mov	r7, r6
 8015c5e:	dc04      	bgt.n	8015c6a <__swbuf_r+0x42>
 8015c60:	4621      	mov	r1, r4
 8015c62:	4628      	mov	r0, r5
 8015c64:	f000 f926 	bl	8015eb4 <_fflush_r>
 8015c68:	bb30      	cbnz	r0, 8015cb8 <__swbuf_r+0x90>
 8015c6a:	68a3      	ldr	r3, [r4, #8]
 8015c6c:	3b01      	subs	r3, #1
 8015c6e:	60a3      	str	r3, [r4, #8]
 8015c70:	6823      	ldr	r3, [r4, #0]
 8015c72:	1c5a      	adds	r2, r3, #1
 8015c74:	6022      	str	r2, [r4, #0]
 8015c76:	701e      	strb	r6, [r3, #0]
 8015c78:	6963      	ldr	r3, [r4, #20]
 8015c7a:	3001      	adds	r0, #1
 8015c7c:	4283      	cmp	r3, r0
 8015c7e:	d004      	beq.n	8015c8a <__swbuf_r+0x62>
 8015c80:	89a3      	ldrh	r3, [r4, #12]
 8015c82:	07db      	lsls	r3, r3, #31
 8015c84:	d506      	bpl.n	8015c94 <__swbuf_r+0x6c>
 8015c86:	2e0a      	cmp	r6, #10
 8015c88:	d104      	bne.n	8015c94 <__swbuf_r+0x6c>
 8015c8a:	4621      	mov	r1, r4
 8015c8c:	4628      	mov	r0, r5
 8015c8e:	f000 f911 	bl	8015eb4 <_fflush_r>
 8015c92:	b988      	cbnz	r0, 8015cb8 <__swbuf_r+0x90>
 8015c94:	4638      	mov	r0, r7
 8015c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c98:	4b0a      	ldr	r3, [pc, #40]	; (8015cc4 <__swbuf_r+0x9c>)
 8015c9a:	429c      	cmp	r4, r3
 8015c9c:	d101      	bne.n	8015ca2 <__swbuf_r+0x7a>
 8015c9e:	68ac      	ldr	r4, [r5, #8]
 8015ca0:	e7cf      	b.n	8015c42 <__swbuf_r+0x1a>
 8015ca2:	4b09      	ldr	r3, [pc, #36]	; (8015cc8 <__swbuf_r+0xa0>)
 8015ca4:	429c      	cmp	r4, r3
 8015ca6:	bf08      	it	eq
 8015ca8:	68ec      	ldreq	r4, [r5, #12]
 8015caa:	e7ca      	b.n	8015c42 <__swbuf_r+0x1a>
 8015cac:	4621      	mov	r1, r4
 8015cae:	4628      	mov	r0, r5
 8015cb0:	f000 f80c 	bl	8015ccc <__swsetup_r>
 8015cb4:	2800      	cmp	r0, #0
 8015cb6:	d0cb      	beq.n	8015c50 <__swbuf_r+0x28>
 8015cb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015cbc:	e7ea      	b.n	8015c94 <__swbuf_r+0x6c>
 8015cbe:	bf00      	nop
 8015cc0:	08016710 	.word	0x08016710
 8015cc4:	08016730 	.word	0x08016730
 8015cc8:	080166f0 	.word	0x080166f0

08015ccc <__swsetup_r>:
 8015ccc:	4b32      	ldr	r3, [pc, #200]	; (8015d98 <__swsetup_r+0xcc>)
 8015cce:	b570      	push	{r4, r5, r6, lr}
 8015cd0:	681d      	ldr	r5, [r3, #0]
 8015cd2:	4606      	mov	r6, r0
 8015cd4:	460c      	mov	r4, r1
 8015cd6:	b125      	cbz	r5, 8015ce2 <__swsetup_r+0x16>
 8015cd8:	69ab      	ldr	r3, [r5, #24]
 8015cda:	b913      	cbnz	r3, 8015ce2 <__swsetup_r+0x16>
 8015cdc:	4628      	mov	r0, r5
 8015cde:	f000 f97d 	bl	8015fdc <__sinit>
 8015ce2:	4b2e      	ldr	r3, [pc, #184]	; (8015d9c <__swsetup_r+0xd0>)
 8015ce4:	429c      	cmp	r4, r3
 8015ce6:	d10f      	bne.n	8015d08 <__swsetup_r+0x3c>
 8015ce8:	686c      	ldr	r4, [r5, #4]
 8015cea:	89a3      	ldrh	r3, [r4, #12]
 8015cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015cf0:	0719      	lsls	r1, r3, #28
 8015cf2:	d42c      	bmi.n	8015d4e <__swsetup_r+0x82>
 8015cf4:	06dd      	lsls	r5, r3, #27
 8015cf6:	d411      	bmi.n	8015d1c <__swsetup_r+0x50>
 8015cf8:	2309      	movs	r3, #9
 8015cfa:	6033      	str	r3, [r6, #0]
 8015cfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015d00:	81a3      	strh	r3, [r4, #12]
 8015d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d06:	e03e      	b.n	8015d86 <__swsetup_r+0xba>
 8015d08:	4b25      	ldr	r3, [pc, #148]	; (8015da0 <__swsetup_r+0xd4>)
 8015d0a:	429c      	cmp	r4, r3
 8015d0c:	d101      	bne.n	8015d12 <__swsetup_r+0x46>
 8015d0e:	68ac      	ldr	r4, [r5, #8]
 8015d10:	e7eb      	b.n	8015cea <__swsetup_r+0x1e>
 8015d12:	4b24      	ldr	r3, [pc, #144]	; (8015da4 <__swsetup_r+0xd8>)
 8015d14:	429c      	cmp	r4, r3
 8015d16:	bf08      	it	eq
 8015d18:	68ec      	ldreq	r4, [r5, #12]
 8015d1a:	e7e6      	b.n	8015cea <__swsetup_r+0x1e>
 8015d1c:	0758      	lsls	r0, r3, #29
 8015d1e:	d512      	bpl.n	8015d46 <__swsetup_r+0x7a>
 8015d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d22:	b141      	cbz	r1, 8015d36 <__swsetup_r+0x6a>
 8015d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d28:	4299      	cmp	r1, r3
 8015d2a:	d002      	beq.n	8015d32 <__swsetup_r+0x66>
 8015d2c:	4630      	mov	r0, r6
 8015d2e:	f7ff fe15 	bl	801595c <_free_r>
 8015d32:	2300      	movs	r3, #0
 8015d34:	6363      	str	r3, [r4, #52]	; 0x34
 8015d36:	89a3      	ldrh	r3, [r4, #12]
 8015d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d3c:	81a3      	strh	r3, [r4, #12]
 8015d3e:	2300      	movs	r3, #0
 8015d40:	6063      	str	r3, [r4, #4]
 8015d42:	6923      	ldr	r3, [r4, #16]
 8015d44:	6023      	str	r3, [r4, #0]
 8015d46:	89a3      	ldrh	r3, [r4, #12]
 8015d48:	f043 0308 	orr.w	r3, r3, #8
 8015d4c:	81a3      	strh	r3, [r4, #12]
 8015d4e:	6923      	ldr	r3, [r4, #16]
 8015d50:	b94b      	cbnz	r3, 8015d66 <__swsetup_r+0x9a>
 8015d52:	89a3      	ldrh	r3, [r4, #12]
 8015d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d5c:	d003      	beq.n	8015d66 <__swsetup_r+0x9a>
 8015d5e:	4621      	mov	r1, r4
 8015d60:	4630      	mov	r0, r6
 8015d62:	f000 fa01 	bl	8016168 <__smakebuf_r>
 8015d66:	89a0      	ldrh	r0, [r4, #12]
 8015d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d6c:	f010 0301 	ands.w	r3, r0, #1
 8015d70:	d00a      	beq.n	8015d88 <__swsetup_r+0xbc>
 8015d72:	2300      	movs	r3, #0
 8015d74:	60a3      	str	r3, [r4, #8]
 8015d76:	6963      	ldr	r3, [r4, #20]
 8015d78:	425b      	negs	r3, r3
 8015d7a:	61a3      	str	r3, [r4, #24]
 8015d7c:	6923      	ldr	r3, [r4, #16]
 8015d7e:	b943      	cbnz	r3, 8015d92 <__swsetup_r+0xc6>
 8015d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d84:	d1ba      	bne.n	8015cfc <__swsetup_r+0x30>
 8015d86:	bd70      	pop	{r4, r5, r6, pc}
 8015d88:	0781      	lsls	r1, r0, #30
 8015d8a:	bf58      	it	pl
 8015d8c:	6963      	ldrpl	r3, [r4, #20]
 8015d8e:	60a3      	str	r3, [r4, #8]
 8015d90:	e7f4      	b.n	8015d7c <__swsetup_r+0xb0>
 8015d92:	2000      	movs	r0, #0
 8015d94:	e7f7      	b.n	8015d86 <__swsetup_r+0xba>
 8015d96:	bf00      	nop
 8015d98:	240000a0 	.word	0x240000a0
 8015d9c:	08016710 	.word	0x08016710
 8015da0:	08016730 	.word	0x08016730
 8015da4:	080166f0 	.word	0x080166f0

08015da8 <__sflush_r>:
 8015da8:	898a      	ldrh	r2, [r1, #12]
 8015daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dae:	4605      	mov	r5, r0
 8015db0:	0710      	lsls	r0, r2, #28
 8015db2:	460c      	mov	r4, r1
 8015db4:	d458      	bmi.n	8015e68 <__sflush_r+0xc0>
 8015db6:	684b      	ldr	r3, [r1, #4]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	dc05      	bgt.n	8015dc8 <__sflush_r+0x20>
 8015dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	dc02      	bgt.n	8015dc8 <__sflush_r+0x20>
 8015dc2:	2000      	movs	r0, #0
 8015dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dca:	2e00      	cmp	r6, #0
 8015dcc:	d0f9      	beq.n	8015dc2 <__sflush_r+0x1a>
 8015dce:	2300      	movs	r3, #0
 8015dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015dd4:	682f      	ldr	r7, [r5, #0]
 8015dd6:	602b      	str	r3, [r5, #0]
 8015dd8:	d032      	beq.n	8015e40 <__sflush_r+0x98>
 8015dda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015ddc:	89a3      	ldrh	r3, [r4, #12]
 8015dde:	075a      	lsls	r2, r3, #29
 8015de0:	d505      	bpl.n	8015dee <__sflush_r+0x46>
 8015de2:	6863      	ldr	r3, [r4, #4]
 8015de4:	1ac0      	subs	r0, r0, r3
 8015de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015de8:	b10b      	cbz	r3, 8015dee <__sflush_r+0x46>
 8015dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015dec:	1ac0      	subs	r0, r0, r3
 8015dee:	2300      	movs	r3, #0
 8015df0:	4602      	mov	r2, r0
 8015df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015df4:	6a21      	ldr	r1, [r4, #32]
 8015df6:	4628      	mov	r0, r5
 8015df8:	47b0      	blx	r6
 8015dfa:	1c43      	adds	r3, r0, #1
 8015dfc:	89a3      	ldrh	r3, [r4, #12]
 8015dfe:	d106      	bne.n	8015e0e <__sflush_r+0x66>
 8015e00:	6829      	ldr	r1, [r5, #0]
 8015e02:	291d      	cmp	r1, #29
 8015e04:	d82c      	bhi.n	8015e60 <__sflush_r+0xb8>
 8015e06:	4a2a      	ldr	r2, [pc, #168]	; (8015eb0 <__sflush_r+0x108>)
 8015e08:	40ca      	lsrs	r2, r1
 8015e0a:	07d6      	lsls	r6, r2, #31
 8015e0c:	d528      	bpl.n	8015e60 <__sflush_r+0xb8>
 8015e0e:	2200      	movs	r2, #0
 8015e10:	6062      	str	r2, [r4, #4]
 8015e12:	04d9      	lsls	r1, r3, #19
 8015e14:	6922      	ldr	r2, [r4, #16]
 8015e16:	6022      	str	r2, [r4, #0]
 8015e18:	d504      	bpl.n	8015e24 <__sflush_r+0x7c>
 8015e1a:	1c42      	adds	r2, r0, #1
 8015e1c:	d101      	bne.n	8015e22 <__sflush_r+0x7a>
 8015e1e:	682b      	ldr	r3, [r5, #0]
 8015e20:	b903      	cbnz	r3, 8015e24 <__sflush_r+0x7c>
 8015e22:	6560      	str	r0, [r4, #84]	; 0x54
 8015e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e26:	602f      	str	r7, [r5, #0]
 8015e28:	2900      	cmp	r1, #0
 8015e2a:	d0ca      	beq.n	8015dc2 <__sflush_r+0x1a>
 8015e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e30:	4299      	cmp	r1, r3
 8015e32:	d002      	beq.n	8015e3a <__sflush_r+0x92>
 8015e34:	4628      	mov	r0, r5
 8015e36:	f7ff fd91 	bl	801595c <_free_r>
 8015e3a:	2000      	movs	r0, #0
 8015e3c:	6360      	str	r0, [r4, #52]	; 0x34
 8015e3e:	e7c1      	b.n	8015dc4 <__sflush_r+0x1c>
 8015e40:	6a21      	ldr	r1, [r4, #32]
 8015e42:	2301      	movs	r3, #1
 8015e44:	4628      	mov	r0, r5
 8015e46:	47b0      	blx	r6
 8015e48:	1c41      	adds	r1, r0, #1
 8015e4a:	d1c7      	bne.n	8015ddc <__sflush_r+0x34>
 8015e4c:	682b      	ldr	r3, [r5, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d0c4      	beq.n	8015ddc <__sflush_r+0x34>
 8015e52:	2b1d      	cmp	r3, #29
 8015e54:	d001      	beq.n	8015e5a <__sflush_r+0xb2>
 8015e56:	2b16      	cmp	r3, #22
 8015e58:	d101      	bne.n	8015e5e <__sflush_r+0xb6>
 8015e5a:	602f      	str	r7, [r5, #0]
 8015e5c:	e7b1      	b.n	8015dc2 <__sflush_r+0x1a>
 8015e5e:	89a3      	ldrh	r3, [r4, #12]
 8015e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e64:	81a3      	strh	r3, [r4, #12]
 8015e66:	e7ad      	b.n	8015dc4 <__sflush_r+0x1c>
 8015e68:	690f      	ldr	r7, [r1, #16]
 8015e6a:	2f00      	cmp	r7, #0
 8015e6c:	d0a9      	beq.n	8015dc2 <__sflush_r+0x1a>
 8015e6e:	0793      	lsls	r3, r2, #30
 8015e70:	680e      	ldr	r6, [r1, #0]
 8015e72:	bf08      	it	eq
 8015e74:	694b      	ldreq	r3, [r1, #20]
 8015e76:	600f      	str	r7, [r1, #0]
 8015e78:	bf18      	it	ne
 8015e7a:	2300      	movne	r3, #0
 8015e7c:	eba6 0807 	sub.w	r8, r6, r7
 8015e80:	608b      	str	r3, [r1, #8]
 8015e82:	f1b8 0f00 	cmp.w	r8, #0
 8015e86:	dd9c      	ble.n	8015dc2 <__sflush_r+0x1a>
 8015e88:	6a21      	ldr	r1, [r4, #32]
 8015e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e8c:	4643      	mov	r3, r8
 8015e8e:	463a      	mov	r2, r7
 8015e90:	4628      	mov	r0, r5
 8015e92:	47b0      	blx	r6
 8015e94:	2800      	cmp	r0, #0
 8015e96:	dc06      	bgt.n	8015ea6 <__sflush_r+0xfe>
 8015e98:	89a3      	ldrh	r3, [r4, #12]
 8015e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e9e:	81a3      	strh	r3, [r4, #12]
 8015ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ea4:	e78e      	b.n	8015dc4 <__sflush_r+0x1c>
 8015ea6:	4407      	add	r7, r0
 8015ea8:	eba8 0800 	sub.w	r8, r8, r0
 8015eac:	e7e9      	b.n	8015e82 <__sflush_r+0xda>
 8015eae:	bf00      	nop
 8015eb0:	20400001 	.word	0x20400001

08015eb4 <_fflush_r>:
 8015eb4:	b538      	push	{r3, r4, r5, lr}
 8015eb6:	690b      	ldr	r3, [r1, #16]
 8015eb8:	4605      	mov	r5, r0
 8015eba:	460c      	mov	r4, r1
 8015ebc:	b913      	cbnz	r3, 8015ec4 <_fflush_r+0x10>
 8015ebe:	2500      	movs	r5, #0
 8015ec0:	4628      	mov	r0, r5
 8015ec2:	bd38      	pop	{r3, r4, r5, pc}
 8015ec4:	b118      	cbz	r0, 8015ece <_fflush_r+0x1a>
 8015ec6:	6983      	ldr	r3, [r0, #24]
 8015ec8:	b90b      	cbnz	r3, 8015ece <_fflush_r+0x1a>
 8015eca:	f000 f887 	bl	8015fdc <__sinit>
 8015ece:	4b14      	ldr	r3, [pc, #80]	; (8015f20 <_fflush_r+0x6c>)
 8015ed0:	429c      	cmp	r4, r3
 8015ed2:	d11b      	bne.n	8015f0c <_fflush_r+0x58>
 8015ed4:	686c      	ldr	r4, [r5, #4]
 8015ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d0ef      	beq.n	8015ebe <_fflush_r+0xa>
 8015ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ee0:	07d0      	lsls	r0, r2, #31
 8015ee2:	d404      	bmi.n	8015eee <_fflush_r+0x3a>
 8015ee4:	0599      	lsls	r1, r3, #22
 8015ee6:	d402      	bmi.n	8015eee <_fflush_r+0x3a>
 8015ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eea:	f000 f915 	bl	8016118 <__retarget_lock_acquire_recursive>
 8015eee:	4628      	mov	r0, r5
 8015ef0:	4621      	mov	r1, r4
 8015ef2:	f7ff ff59 	bl	8015da8 <__sflush_r>
 8015ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ef8:	07da      	lsls	r2, r3, #31
 8015efa:	4605      	mov	r5, r0
 8015efc:	d4e0      	bmi.n	8015ec0 <_fflush_r+0xc>
 8015efe:	89a3      	ldrh	r3, [r4, #12]
 8015f00:	059b      	lsls	r3, r3, #22
 8015f02:	d4dd      	bmi.n	8015ec0 <_fflush_r+0xc>
 8015f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f06:	f000 f908 	bl	801611a <__retarget_lock_release_recursive>
 8015f0a:	e7d9      	b.n	8015ec0 <_fflush_r+0xc>
 8015f0c:	4b05      	ldr	r3, [pc, #20]	; (8015f24 <_fflush_r+0x70>)
 8015f0e:	429c      	cmp	r4, r3
 8015f10:	d101      	bne.n	8015f16 <_fflush_r+0x62>
 8015f12:	68ac      	ldr	r4, [r5, #8]
 8015f14:	e7df      	b.n	8015ed6 <_fflush_r+0x22>
 8015f16:	4b04      	ldr	r3, [pc, #16]	; (8015f28 <_fflush_r+0x74>)
 8015f18:	429c      	cmp	r4, r3
 8015f1a:	bf08      	it	eq
 8015f1c:	68ec      	ldreq	r4, [r5, #12]
 8015f1e:	e7da      	b.n	8015ed6 <_fflush_r+0x22>
 8015f20:	08016710 	.word	0x08016710
 8015f24:	08016730 	.word	0x08016730
 8015f28:	080166f0 	.word	0x080166f0

08015f2c <std>:
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	b510      	push	{r4, lr}
 8015f30:	4604      	mov	r4, r0
 8015f32:	e9c0 3300 	strd	r3, r3, [r0]
 8015f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f3a:	6083      	str	r3, [r0, #8]
 8015f3c:	8181      	strh	r1, [r0, #12]
 8015f3e:	6643      	str	r3, [r0, #100]	; 0x64
 8015f40:	81c2      	strh	r2, [r0, #14]
 8015f42:	6183      	str	r3, [r0, #24]
 8015f44:	4619      	mov	r1, r3
 8015f46:	2208      	movs	r2, #8
 8015f48:	305c      	adds	r0, #92	; 0x5c
 8015f4a:	f7ff fcff 	bl	801594c <memset>
 8015f4e:	4b05      	ldr	r3, [pc, #20]	; (8015f64 <std+0x38>)
 8015f50:	6263      	str	r3, [r4, #36]	; 0x24
 8015f52:	4b05      	ldr	r3, [pc, #20]	; (8015f68 <std+0x3c>)
 8015f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f56:	4b05      	ldr	r3, [pc, #20]	; (8015f6c <std+0x40>)
 8015f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f5a:	4b05      	ldr	r3, [pc, #20]	; (8015f70 <std+0x44>)
 8015f5c:	6224      	str	r4, [r4, #32]
 8015f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8015f60:	bd10      	pop	{r4, pc}
 8015f62:	bf00      	nop
 8015f64:	08016201 	.word	0x08016201
 8015f68:	08016223 	.word	0x08016223
 8015f6c:	0801625b 	.word	0x0801625b
 8015f70:	0801627f 	.word	0x0801627f

08015f74 <_cleanup_r>:
 8015f74:	4901      	ldr	r1, [pc, #4]	; (8015f7c <_cleanup_r+0x8>)
 8015f76:	f000 b8af 	b.w	80160d8 <_fwalk_reent>
 8015f7a:	bf00      	nop
 8015f7c:	08015eb5 	.word	0x08015eb5

08015f80 <__sfmoreglue>:
 8015f80:	b570      	push	{r4, r5, r6, lr}
 8015f82:	2268      	movs	r2, #104	; 0x68
 8015f84:	1e4d      	subs	r5, r1, #1
 8015f86:	4355      	muls	r5, r2
 8015f88:	460e      	mov	r6, r1
 8015f8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f8e:	f7ff fd51 	bl	8015a34 <_malloc_r>
 8015f92:	4604      	mov	r4, r0
 8015f94:	b140      	cbz	r0, 8015fa8 <__sfmoreglue+0x28>
 8015f96:	2100      	movs	r1, #0
 8015f98:	e9c0 1600 	strd	r1, r6, [r0]
 8015f9c:	300c      	adds	r0, #12
 8015f9e:	60a0      	str	r0, [r4, #8]
 8015fa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015fa4:	f7ff fcd2 	bl	801594c <memset>
 8015fa8:	4620      	mov	r0, r4
 8015faa:	bd70      	pop	{r4, r5, r6, pc}

08015fac <__sfp_lock_acquire>:
 8015fac:	4801      	ldr	r0, [pc, #4]	; (8015fb4 <__sfp_lock_acquire+0x8>)
 8015fae:	f000 b8b3 	b.w	8016118 <__retarget_lock_acquire_recursive>
 8015fb2:	bf00      	nop
 8015fb4:	240055bd 	.word	0x240055bd

08015fb8 <__sfp_lock_release>:
 8015fb8:	4801      	ldr	r0, [pc, #4]	; (8015fc0 <__sfp_lock_release+0x8>)
 8015fba:	f000 b8ae 	b.w	801611a <__retarget_lock_release_recursive>
 8015fbe:	bf00      	nop
 8015fc0:	240055bd 	.word	0x240055bd

08015fc4 <__sinit_lock_acquire>:
 8015fc4:	4801      	ldr	r0, [pc, #4]	; (8015fcc <__sinit_lock_acquire+0x8>)
 8015fc6:	f000 b8a7 	b.w	8016118 <__retarget_lock_acquire_recursive>
 8015fca:	bf00      	nop
 8015fcc:	240055be 	.word	0x240055be

08015fd0 <__sinit_lock_release>:
 8015fd0:	4801      	ldr	r0, [pc, #4]	; (8015fd8 <__sinit_lock_release+0x8>)
 8015fd2:	f000 b8a2 	b.w	801611a <__retarget_lock_release_recursive>
 8015fd6:	bf00      	nop
 8015fd8:	240055be 	.word	0x240055be

08015fdc <__sinit>:
 8015fdc:	b510      	push	{r4, lr}
 8015fde:	4604      	mov	r4, r0
 8015fe0:	f7ff fff0 	bl	8015fc4 <__sinit_lock_acquire>
 8015fe4:	69a3      	ldr	r3, [r4, #24]
 8015fe6:	b11b      	cbz	r3, 8015ff0 <__sinit+0x14>
 8015fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fec:	f7ff bff0 	b.w	8015fd0 <__sinit_lock_release>
 8015ff0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015ff4:	6523      	str	r3, [r4, #80]	; 0x50
 8015ff6:	4b13      	ldr	r3, [pc, #76]	; (8016044 <__sinit+0x68>)
 8015ff8:	4a13      	ldr	r2, [pc, #76]	; (8016048 <__sinit+0x6c>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	62a2      	str	r2, [r4, #40]	; 0x28
 8015ffe:	42a3      	cmp	r3, r4
 8016000:	bf04      	itt	eq
 8016002:	2301      	moveq	r3, #1
 8016004:	61a3      	streq	r3, [r4, #24]
 8016006:	4620      	mov	r0, r4
 8016008:	f000 f820 	bl	801604c <__sfp>
 801600c:	6060      	str	r0, [r4, #4]
 801600e:	4620      	mov	r0, r4
 8016010:	f000 f81c 	bl	801604c <__sfp>
 8016014:	60a0      	str	r0, [r4, #8]
 8016016:	4620      	mov	r0, r4
 8016018:	f000 f818 	bl	801604c <__sfp>
 801601c:	2200      	movs	r2, #0
 801601e:	60e0      	str	r0, [r4, #12]
 8016020:	2104      	movs	r1, #4
 8016022:	6860      	ldr	r0, [r4, #4]
 8016024:	f7ff ff82 	bl	8015f2c <std>
 8016028:	68a0      	ldr	r0, [r4, #8]
 801602a:	2201      	movs	r2, #1
 801602c:	2109      	movs	r1, #9
 801602e:	f7ff ff7d 	bl	8015f2c <std>
 8016032:	68e0      	ldr	r0, [r4, #12]
 8016034:	2202      	movs	r2, #2
 8016036:	2112      	movs	r1, #18
 8016038:	f7ff ff78 	bl	8015f2c <std>
 801603c:	2301      	movs	r3, #1
 801603e:	61a3      	str	r3, [r4, #24]
 8016040:	e7d2      	b.n	8015fe8 <__sinit+0xc>
 8016042:	bf00      	nop
 8016044:	080166ec 	.word	0x080166ec
 8016048:	08015f75 	.word	0x08015f75

0801604c <__sfp>:
 801604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801604e:	4607      	mov	r7, r0
 8016050:	f7ff ffac 	bl	8015fac <__sfp_lock_acquire>
 8016054:	4b1e      	ldr	r3, [pc, #120]	; (80160d0 <__sfp+0x84>)
 8016056:	681e      	ldr	r6, [r3, #0]
 8016058:	69b3      	ldr	r3, [r6, #24]
 801605a:	b913      	cbnz	r3, 8016062 <__sfp+0x16>
 801605c:	4630      	mov	r0, r6
 801605e:	f7ff ffbd 	bl	8015fdc <__sinit>
 8016062:	3648      	adds	r6, #72	; 0x48
 8016064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016068:	3b01      	subs	r3, #1
 801606a:	d503      	bpl.n	8016074 <__sfp+0x28>
 801606c:	6833      	ldr	r3, [r6, #0]
 801606e:	b30b      	cbz	r3, 80160b4 <__sfp+0x68>
 8016070:	6836      	ldr	r6, [r6, #0]
 8016072:	e7f7      	b.n	8016064 <__sfp+0x18>
 8016074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016078:	b9d5      	cbnz	r5, 80160b0 <__sfp+0x64>
 801607a:	4b16      	ldr	r3, [pc, #88]	; (80160d4 <__sfp+0x88>)
 801607c:	60e3      	str	r3, [r4, #12]
 801607e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016082:	6665      	str	r5, [r4, #100]	; 0x64
 8016084:	f000 f847 	bl	8016116 <__retarget_lock_init_recursive>
 8016088:	f7ff ff96 	bl	8015fb8 <__sfp_lock_release>
 801608c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016094:	6025      	str	r5, [r4, #0]
 8016096:	61a5      	str	r5, [r4, #24]
 8016098:	2208      	movs	r2, #8
 801609a:	4629      	mov	r1, r5
 801609c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80160a0:	f7ff fc54 	bl	801594c <memset>
 80160a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80160a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80160ac:	4620      	mov	r0, r4
 80160ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160b0:	3468      	adds	r4, #104	; 0x68
 80160b2:	e7d9      	b.n	8016068 <__sfp+0x1c>
 80160b4:	2104      	movs	r1, #4
 80160b6:	4638      	mov	r0, r7
 80160b8:	f7ff ff62 	bl	8015f80 <__sfmoreglue>
 80160bc:	4604      	mov	r4, r0
 80160be:	6030      	str	r0, [r6, #0]
 80160c0:	2800      	cmp	r0, #0
 80160c2:	d1d5      	bne.n	8016070 <__sfp+0x24>
 80160c4:	f7ff ff78 	bl	8015fb8 <__sfp_lock_release>
 80160c8:	230c      	movs	r3, #12
 80160ca:	603b      	str	r3, [r7, #0]
 80160cc:	e7ee      	b.n	80160ac <__sfp+0x60>
 80160ce:	bf00      	nop
 80160d0:	080166ec 	.word	0x080166ec
 80160d4:	ffff0001 	.word	0xffff0001

080160d8 <_fwalk_reent>:
 80160d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160dc:	4606      	mov	r6, r0
 80160de:	4688      	mov	r8, r1
 80160e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160e4:	2700      	movs	r7, #0
 80160e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160ea:	f1b9 0901 	subs.w	r9, r9, #1
 80160ee:	d505      	bpl.n	80160fc <_fwalk_reent+0x24>
 80160f0:	6824      	ldr	r4, [r4, #0]
 80160f2:	2c00      	cmp	r4, #0
 80160f4:	d1f7      	bne.n	80160e6 <_fwalk_reent+0xe>
 80160f6:	4638      	mov	r0, r7
 80160f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160fc:	89ab      	ldrh	r3, [r5, #12]
 80160fe:	2b01      	cmp	r3, #1
 8016100:	d907      	bls.n	8016112 <_fwalk_reent+0x3a>
 8016102:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016106:	3301      	adds	r3, #1
 8016108:	d003      	beq.n	8016112 <_fwalk_reent+0x3a>
 801610a:	4629      	mov	r1, r5
 801610c:	4630      	mov	r0, r6
 801610e:	47c0      	blx	r8
 8016110:	4307      	orrs	r7, r0
 8016112:	3568      	adds	r5, #104	; 0x68
 8016114:	e7e9      	b.n	80160ea <_fwalk_reent+0x12>

08016116 <__retarget_lock_init_recursive>:
 8016116:	4770      	bx	lr

08016118 <__retarget_lock_acquire_recursive>:
 8016118:	4770      	bx	lr

0801611a <__retarget_lock_release_recursive>:
 801611a:	4770      	bx	lr

0801611c <__swhatbuf_r>:
 801611c:	b570      	push	{r4, r5, r6, lr}
 801611e:	460e      	mov	r6, r1
 8016120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016124:	2900      	cmp	r1, #0
 8016126:	b096      	sub	sp, #88	; 0x58
 8016128:	4614      	mov	r4, r2
 801612a:	461d      	mov	r5, r3
 801612c:	da08      	bge.n	8016140 <__swhatbuf_r+0x24>
 801612e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016132:	2200      	movs	r2, #0
 8016134:	602a      	str	r2, [r5, #0]
 8016136:	061a      	lsls	r2, r3, #24
 8016138:	d410      	bmi.n	801615c <__swhatbuf_r+0x40>
 801613a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801613e:	e00e      	b.n	801615e <__swhatbuf_r+0x42>
 8016140:	466a      	mov	r2, sp
 8016142:	f000 f8c3 	bl	80162cc <_fstat_r>
 8016146:	2800      	cmp	r0, #0
 8016148:	dbf1      	blt.n	801612e <__swhatbuf_r+0x12>
 801614a:	9a01      	ldr	r2, [sp, #4]
 801614c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016150:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016154:	425a      	negs	r2, r3
 8016156:	415a      	adcs	r2, r3
 8016158:	602a      	str	r2, [r5, #0]
 801615a:	e7ee      	b.n	801613a <__swhatbuf_r+0x1e>
 801615c:	2340      	movs	r3, #64	; 0x40
 801615e:	2000      	movs	r0, #0
 8016160:	6023      	str	r3, [r4, #0]
 8016162:	b016      	add	sp, #88	; 0x58
 8016164:	bd70      	pop	{r4, r5, r6, pc}
	...

08016168 <__smakebuf_r>:
 8016168:	898b      	ldrh	r3, [r1, #12]
 801616a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801616c:	079d      	lsls	r5, r3, #30
 801616e:	4606      	mov	r6, r0
 8016170:	460c      	mov	r4, r1
 8016172:	d507      	bpl.n	8016184 <__smakebuf_r+0x1c>
 8016174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016178:	6023      	str	r3, [r4, #0]
 801617a:	6123      	str	r3, [r4, #16]
 801617c:	2301      	movs	r3, #1
 801617e:	6163      	str	r3, [r4, #20]
 8016180:	b002      	add	sp, #8
 8016182:	bd70      	pop	{r4, r5, r6, pc}
 8016184:	ab01      	add	r3, sp, #4
 8016186:	466a      	mov	r2, sp
 8016188:	f7ff ffc8 	bl	801611c <__swhatbuf_r>
 801618c:	9900      	ldr	r1, [sp, #0]
 801618e:	4605      	mov	r5, r0
 8016190:	4630      	mov	r0, r6
 8016192:	f7ff fc4f 	bl	8015a34 <_malloc_r>
 8016196:	b948      	cbnz	r0, 80161ac <__smakebuf_r+0x44>
 8016198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801619c:	059a      	lsls	r2, r3, #22
 801619e:	d4ef      	bmi.n	8016180 <__smakebuf_r+0x18>
 80161a0:	f023 0303 	bic.w	r3, r3, #3
 80161a4:	f043 0302 	orr.w	r3, r3, #2
 80161a8:	81a3      	strh	r3, [r4, #12]
 80161aa:	e7e3      	b.n	8016174 <__smakebuf_r+0xc>
 80161ac:	4b0d      	ldr	r3, [pc, #52]	; (80161e4 <__smakebuf_r+0x7c>)
 80161ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80161b0:	89a3      	ldrh	r3, [r4, #12]
 80161b2:	6020      	str	r0, [r4, #0]
 80161b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161b8:	81a3      	strh	r3, [r4, #12]
 80161ba:	9b00      	ldr	r3, [sp, #0]
 80161bc:	6163      	str	r3, [r4, #20]
 80161be:	9b01      	ldr	r3, [sp, #4]
 80161c0:	6120      	str	r0, [r4, #16]
 80161c2:	b15b      	cbz	r3, 80161dc <__smakebuf_r+0x74>
 80161c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161c8:	4630      	mov	r0, r6
 80161ca:	f000 f891 	bl	80162f0 <_isatty_r>
 80161ce:	b128      	cbz	r0, 80161dc <__smakebuf_r+0x74>
 80161d0:	89a3      	ldrh	r3, [r4, #12]
 80161d2:	f023 0303 	bic.w	r3, r3, #3
 80161d6:	f043 0301 	orr.w	r3, r3, #1
 80161da:	81a3      	strh	r3, [r4, #12]
 80161dc:	89a0      	ldrh	r0, [r4, #12]
 80161de:	4305      	orrs	r5, r0
 80161e0:	81a5      	strh	r5, [r4, #12]
 80161e2:	e7cd      	b.n	8016180 <__smakebuf_r+0x18>
 80161e4:	08015f75 	.word	0x08015f75

080161e8 <__malloc_lock>:
 80161e8:	4801      	ldr	r0, [pc, #4]	; (80161f0 <__malloc_lock+0x8>)
 80161ea:	f7ff bf95 	b.w	8016118 <__retarget_lock_acquire_recursive>
 80161ee:	bf00      	nop
 80161f0:	240055bc 	.word	0x240055bc

080161f4 <__malloc_unlock>:
 80161f4:	4801      	ldr	r0, [pc, #4]	; (80161fc <__malloc_unlock+0x8>)
 80161f6:	f7ff bf90 	b.w	801611a <__retarget_lock_release_recursive>
 80161fa:	bf00      	nop
 80161fc:	240055bc 	.word	0x240055bc

08016200 <__sread>:
 8016200:	b510      	push	{r4, lr}
 8016202:	460c      	mov	r4, r1
 8016204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016208:	f000 f894 	bl	8016334 <_read_r>
 801620c:	2800      	cmp	r0, #0
 801620e:	bfab      	itete	ge
 8016210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016212:	89a3      	ldrhlt	r3, [r4, #12]
 8016214:	181b      	addge	r3, r3, r0
 8016216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801621a:	bfac      	ite	ge
 801621c:	6563      	strge	r3, [r4, #84]	; 0x54
 801621e:	81a3      	strhlt	r3, [r4, #12]
 8016220:	bd10      	pop	{r4, pc}

08016222 <__swrite>:
 8016222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016226:	461f      	mov	r7, r3
 8016228:	898b      	ldrh	r3, [r1, #12]
 801622a:	05db      	lsls	r3, r3, #23
 801622c:	4605      	mov	r5, r0
 801622e:	460c      	mov	r4, r1
 8016230:	4616      	mov	r6, r2
 8016232:	d505      	bpl.n	8016240 <__swrite+0x1e>
 8016234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016238:	2302      	movs	r3, #2
 801623a:	2200      	movs	r2, #0
 801623c:	f000 f868 	bl	8016310 <_lseek_r>
 8016240:	89a3      	ldrh	r3, [r4, #12]
 8016242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801624a:	81a3      	strh	r3, [r4, #12]
 801624c:	4632      	mov	r2, r6
 801624e:	463b      	mov	r3, r7
 8016250:	4628      	mov	r0, r5
 8016252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016256:	f000 b817 	b.w	8016288 <_write_r>

0801625a <__sseek>:
 801625a:	b510      	push	{r4, lr}
 801625c:	460c      	mov	r4, r1
 801625e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016262:	f000 f855 	bl	8016310 <_lseek_r>
 8016266:	1c43      	adds	r3, r0, #1
 8016268:	89a3      	ldrh	r3, [r4, #12]
 801626a:	bf15      	itete	ne
 801626c:	6560      	strne	r0, [r4, #84]	; 0x54
 801626e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016276:	81a3      	strheq	r3, [r4, #12]
 8016278:	bf18      	it	ne
 801627a:	81a3      	strhne	r3, [r4, #12]
 801627c:	bd10      	pop	{r4, pc}

0801627e <__sclose>:
 801627e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016282:	f000 b813 	b.w	80162ac <_close_r>
	...

08016288 <_write_r>:
 8016288:	b538      	push	{r3, r4, r5, lr}
 801628a:	4d07      	ldr	r5, [pc, #28]	; (80162a8 <_write_r+0x20>)
 801628c:	4604      	mov	r4, r0
 801628e:	4608      	mov	r0, r1
 8016290:	4611      	mov	r1, r2
 8016292:	2200      	movs	r2, #0
 8016294:	602a      	str	r2, [r5, #0]
 8016296:	461a      	mov	r2, r3
 8016298:	f7ed f901 	bl	800349e <_write>
 801629c:	1c43      	adds	r3, r0, #1
 801629e:	d102      	bne.n	80162a6 <_write_r+0x1e>
 80162a0:	682b      	ldr	r3, [r5, #0]
 80162a2:	b103      	cbz	r3, 80162a6 <_write_r+0x1e>
 80162a4:	6023      	str	r3, [r4, #0]
 80162a6:	bd38      	pop	{r3, r4, r5, pc}
 80162a8:	240055c0 	.word	0x240055c0

080162ac <_close_r>:
 80162ac:	b538      	push	{r3, r4, r5, lr}
 80162ae:	4d06      	ldr	r5, [pc, #24]	; (80162c8 <_close_r+0x1c>)
 80162b0:	2300      	movs	r3, #0
 80162b2:	4604      	mov	r4, r0
 80162b4:	4608      	mov	r0, r1
 80162b6:	602b      	str	r3, [r5, #0]
 80162b8:	f7ed f90d 	bl	80034d6 <_close>
 80162bc:	1c43      	adds	r3, r0, #1
 80162be:	d102      	bne.n	80162c6 <_close_r+0x1a>
 80162c0:	682b      	ldr	r3, [r5, #0]
 80162c2:	b103      	cbz	r3, 80162c6 <_close_r+0x1a>
 80162c4:	6023      	str	r3, [r4, #0]
 80162c6:	bd38      	pop	{r3, r4, r5, pc}
 80162c8:	240055c0 	.word	0x240055c0

080162cc <_fstat_r>:
 80162cc:	b538      	push	{r3, r4, r5, lr}
 80162ce:	4d07      	ldr	r5, [pc, #28]	; (80162ec <_fstat_r+0x20>)
 80162d0:	2300      	movs	r3, #0
 80162d2:	4604      	mov	r4, r0
 80162d4:	4608      	mov	r0, r1
 80162d6:	4611      	mov	r1, r2
 80162d8:	602b      	str	r3, [r5, #0]
 80162da:	f7ed f908 	bl	80034ee <_fstat>
 80162de:	1c43      	adds	r3, r0, #1
 80162e0:	d102      	bne.n	80162e8 <_fstat_r+0x1c>
 80162e2:	682b      	ldr	r3, [r5, #0]
 80162e4:	b103      	cbz	r3, 80162e8 <_fstat_r+0x1c>
 80162e6:	6023      	str	r3, [r4, #0]
 80162e8:	bd38      	pop	{r3, r4, r5, pc}
 80162ea:	bf00      	nop
 80162ec:	240055c0 	.word	0x240055c0

080162f0 <_isatty_r>:
 80162f0:	b538      	push	{r3, r4, r5, lr}
 80162f2:	4d06      	ldr	r5, [pc, #24]	; (801630c <_isatty_r+0x1c>)
 80162f4:	2300      	movs	r3, #0
 80162f6:	4604      	mov	r4, r0
 80162f8:	4608      	mov	r0, r1
 80162fa:	602b      	str	r3, [r5, #0]
 80162fc:	f7ed f907 	bl	800350e <_isatty>
 8016300:	1c43      	adds	r3, r0, #1
 8016302:	d102      	bne.n	801630a <_isatty_r+0x1a>
 8016304:	682b      	ldr	r3, [r5, #0]
 8016306:	b103      	cbz	r3, 801630a <_isatty_r+0x1a>
 8016308:	6023      	str	r3, [r4, #0]
 801630a:	bd38      	pop	{r3, r4, r5, pc}
 801630c:	240055c0 	.word	0x240055c0

08016310 <_lseek_r>:
 8016310:	b538      	push	{r3, r4, r5, lr}
 8016312:	4d07      	ldr	r5, [pc, #28]	; (8016330 <_lseek_r+0x20>)
 8016314:	4604      	mov	r4, r0
 8016316:	4608      	mov	r0, r1
 8016318:	4611      	mov	r1, r2
 801631a:	2200      	movs	r2, #0
 801631c:	602a      	str	r2, [r5, #0]
 801631e:	461a      	mov	r2, r3
 8016320:	f7ed f900 	bl	8003524 <_lseek>
 8016324:	1c43      	adds	r3, r0, #1
 8016326:	d102      	bne.n	801632e <_lseek_r+0x1e>
 8016328:	682b      	ldr	r3, [r5, #0]
 801632a:	b103      	cbz	r3, 801632e <_lseek_r+0x1e>
 801632c:	6023      	str	r3, [r4, #0]
 801632e:	bd38      	pop	{r3, r4, r5, pc}
 8016330:	240055c0 	.word	0x240055c0

08016334 <_read_r>:
 8016334:	b538      	push	{r3, r4, r5, lr}
 8016336:	4d07      	ldr	r5, [pc, #28]	; (8016354 <_read_r+0x20>)
 8016338:	4604      	mov	r4, r0
 801633a:	4608      	mov	r0, r1
 801633c:	4611      	mov	r1, r2
 801633e:	2200      	movs	r2, #0
 8016340:	602a      	str	r2, [r5, #0]
 8016342:	461a      	mov	r2, r3
 8016344:	f7ed f88e 	bl	8003464 <_read>
 8016348:	1c43      	adds	r3, r0, #1
 801634a:	d102      	bne.n	8016352 <_read_r+0x1e>
 801634c:	682b      	ldr	r3, [r5, #0]
 801634e:	b103      	cbz	r3, 8016352 <_read_r+0x1e>
 8016350:	6023      	str	r3, [r4, #0]
 8016352:	bd38      	pop	{r3, r4, r5, pc}
 8016354:	240055c0 	.word	0x240055c0

08016358 <_init>:
 8016358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801635a:	bf00      	nop
 801635c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801635e:	bc08      	pop	{r3}
 8016360:	469e      	mov	lr, r3
 8016362:	4770      	bx	lr

08016364 <_fini>:
 8016364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016366:	bf00      	nop
 8016368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801636a:	bc08      	pop	{r3}
 801636c:	469e      	mov	lr, r3
 801636e:	4770      	bx	lr
